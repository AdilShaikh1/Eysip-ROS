/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-25 09:50:53.909228
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((1.0)*x5);
x13=((0.1223)*x5);
x14=((1.0)*x6);
x15=((1.0)*x9);
x16=((0.09465)*x0);
x17=((0.1223)*x6);
x18=((0.425)*x1);
x19=((1.0)*x0);
x20=((0.39225)*x0);
x21=((0.09465)*x9);
x22=(x8*x9);
x23=((-1.0)*x8);
x24=(x1*x2);
x25=(x2*x3);
x26=(x0*x10);
x27=(x1*x4);
x28=(x0*x8);
x29=((1.0)*x3*x4);
x30=((0.09465)*x3*x4);
x31=(x25*x9);
x32=((((-1.0)*x29))+x24);
x33=((((1.0)*x25))+(((1.0)*x27)));
x34=(((x19*x24))+(((-1.0)*x19*x3*x4)));
x35=((((-1.0)*x15*x3*x4))+((x15*x24)));
x36=(x19*((x25+x27)));
x37=((-1.0)*x36);
x38=(x15*((x25+x27)));
x39=((-1.0)*x38);
x40=(x34*x6);
x41=(x37*x5);
x42=(((x33*x5))+((x6*(((((-1.0)*x24))+x29)))));
x43=((((-1.0)*x12*x32))+(((-1.0)*x14*x33)));
x44=(x40+x41);
x45=(((x34*x5))+((x36*x6)));
x46=(((x35*x6))+((x39*x5)));
x47=(((x35*x5))+((x38*x6)));
eerot[0]=(((x11*(((((-1.0)*x10*x9))+((x44*x8))))))+((x45*x7)));
eerot[1]=(((x11*x45))+((x7*((((x23*x44))+((x10*x15)))))));
eerot[2]=((((-1.0)*x15*x8))+((x10*(((((-1.0)*x12*x37))+(((-1.0)*x14*x34)))))));
IkReal x48=((1.0)*x16);
eetrans[0]=(((x0*x18))+((x10*(((((-1.0)*x17*x34))+(((-1.0)*x13*x37))))))+(((-0.10915)*x9))+((x5*((((x16*x3*x4))+(((-1.0)*x24*x48))))))+((x20*x27))+((x20*x25))+(((-0.1223)*x22))+((x6*(((((-1.0)*x27*x48))+(((-1.0)*x25*x48)))))));
eerot[3]=(((x47*x7))+((x11*((((x46*x8))+x26)))));
eerot[4]=(((x7*((((x23*x46))+(((-1.0)*x26))))))+((x11*x47)));
eerot[5]=(((x10*(((((-1.0)*x12*x39))+(((-1.0)*x14*x35))))))+x28);
IkReal x49=((1.0)*x21);
eetrans[1]=(((x18*x9))+(((0.39225)*x27*x9))+(((0.10915)*x0))+((x5*((((x21*x3*x4))+(((-1.0)*x24*x49))))))+((x10*(((((-1.0)*x17*x35))+(((-1.0)*x13*x39))))))+(((0.39225)*x31))+(((0.1223)*x28))+((x6*(((((-1.0)*x27*x49))+(((-1.0)*x25*x49)))))));
eerot[6]=(((x42*x7))+((x11*x8*((((x32*x5))+((x33*x6)))))));
eerot[7]=(((x11*x42))+((x43*x7*x8)));
eerot[8]=(x10*x43);
eetrans[2]=((0.089159)+(((0.425)*x3))+((x6*(((((-1.0)*x30))+(((0.09465)*x24))))))+(((0.39225)*x3*x4))+((x5*(((((-0.09465)*x25))+(((-0.09465)*x27))))))+((x10*(((((-1.0)*x17*x33))+(((-1.0)*x13*x32))))))+(((-0.39225)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1223)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.1223)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+(((-0.1223)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.1893)*npx);
IkReal x54=((0.1893)*npy);
IkReal x55=((0.09465)*r22);
IkReal x56=((0.09465)*r21);
IkReal x57=((-0.09465)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.09465)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=((1.7)*pz);
IkReal x68=(gclwh15_9*npx);
IkReal x69=(gclwh6_11*r21);
IkReal x70=((0.81725)*pp);
IkReal x71=(gclwh4_8*r22);
IkReal x72=(gclwh5_9*npz);
IkReal x73=(gclwh14_8*r20);
IkReal x74=((0.85)*pp);
IkReal x75=(npy*pz);
IkReal x76=(gclwh14_3*rxp0_2);
IkReal x77=((0.000977833645875)*r20);
IkReal x78=((0.00076243651125)*rxp1_2);
IkReal x79=((0.154705425)*rxp1_2);
IkReal x80=((0.017917245)*r21);
IkReal x81=(gclwh6_11*rxp1_2);
IkReal x82=(gclwh12_11*rxp1_2);
IkReal x83=(npz*pz);
IkReal x84=((2.0)*gclwh11_10);
IkReal x85=(gclwh12_8*r21);
IkReal x86=((0.2970117)*rxp1_2);
IkReal x87=(npx*pz);
IkReal x88=((2.0)*gclwh4_11);
IkReal x89=(gclwh10_11*rxp2_2);
IkReal x90=(gclwh5_9*rxp2_2);
IkReal x91=((0.020662095)*rxp1_2);
IkReal x92=((1.6345)*pz);
IkReal x93=(pp*r22);
IkReal x94=((0.14850585)*rxp0_2);
IkReal x95=(gclwh5_9*r22);
IkReal x96=(gclwh11_10*r22);
IkReal x97=((0.03275)*pp);
IkReal x98=(gclwh7_0*r21);
IkReal x99=(gclwh14_11*rxp0_2);
IkReal x100=(gclwh14_14*rxp0_2);
IkReal x101=((0.00195566729175)*r22);
IkReal x102=(gclwh15_10*rxp0_2);
IkReal x103=(gclwh12_8*rxp1_2);
IkReal x104=((2.0)*gclwh9_10);
IkReal x105=((0.1893)*rxp2_2);
IkReal x106=(pp*r20);
IkReal x107=((2.0)*gclwh15_10);
IkReal x108=(gclwh10_2*r22);
IkReal x109=(gclwh8_2*r20);
IkReal x110=(pp*r21);
IkReal x111=(gclwh5_15*rxp2_2);
IkReal x112=((2.0)*gclwh13_10);
IkReal x113=(gclwh9_0*r20);
IkReal x114=((0.000977833645875)*r22);
IkReal x115=(gclwh14_8*rxp0_2);
IkReal x116=((0.000977833645875)*r21);
IkReal x117=((0.0089586225)*r20);
IkReal x118=((2.0)*gclwh10_11);
IkReal x119=((4.0)*gclwh11_10);
IkReal x120=((0.00195566729175)*r20);
IkReal x121=(gclwh4_3*rxp2_2);
IkReal x122=((0.154705425)*rxp2_2);
IkReal x123=((1.0)*pz);
IkReal x124=(gclwh6_2*r21);
IkReal x125=(gclwh5_10*rxp2_2);
IkReal x126=((0.3786)*rxp0_2);
IkReal x127=((4.0)*gclwh8_11);
IkReal x128=((2.0)*gclwh7_10);
IkReal x129=((0.020662095)*rxp0_2);
IkReal x130=(gclwh13_9*r21);
IkReal x131=((0.00702803935125)*r20);
IkReal x132=((4.0)*gclwh9_10);
IkReal x133=((0.00195566729175)*r21);
IkReal x134=((0.3786)*rxp2_2);
IkReal x135=((0.00702803935125)*r22);
IkReal x136=((0.017917245)*r20);
IkReal x137=(gclwh15_9*r20);
IkReal x138=((4.0)*gclwh7_10);
IkReal x139=(gclwh7_10*rxp1_2);
IkReal x140=(gclwh6_12*r21);
IkReal x141=(gclwh5_1*rxp2_2);
IkReal x142=((0.0089586225)*r22);
IkReal x143=((0.14850585)*rxp1_2);
IkReal x144=((0.03583449)*r20);
IkReal x145=(gclwh15_15*rxp0_2);
IkReal x146=(gclwh15_1*rxp0_2);
IkReal x147=((0.0089586225)*r21);
IkReal x148=(gclwh10_11*r22);
IkReal x149=((2.0)*gclwh12_11);
IkReal x150=((0.2970117)*rxp2_2);
IkReal x151=((0.0655)*pz);
IkReal x152=((2.0)*gclwh5_10);
IkReal x153=((0.006199575)*rxp2_2);
IkReal x154=(gclwh12_14*rxp1_2);
IkReal x155=((0.01464286847625)*r22);
IkReal x156=(gclwh13_10*rxp1_2);
IkReal x157=(gclwh7_13*r21);
IkReal x158=((2.0)*gclwh8_11);
IkReal x159=(gclwh15_9*rxp0_2);
IkReal x160=((0.01464286847625)*r20);
IkReal x161=(gclwh15_0*rxp0_2);
IkReal x162=(gclwh13_9*rxp1_2);
IkReal x163=((4.0)*gclwh10_11);
IkReal x164=((0.020662095)*rxp2_2);
IkReal x165=((0.0089586225)*pz);
IkReal x166=(gclwh14_2*rxp0_2);
IkReal x167=((0.006199575)*rxp1_2);
IkReal x168=(gclwh11_0*pz);
IkReal x169=((0.14850585)*rxp2_2);
IkReal x170=(gclwh11_0*r22);
IkReal x171=(gclwh4_14*rxp2_2);
IkReal x172=((0.1893)*pz);
IkReal x173=((0.1893)*rxp0_2);
IkReal x174=(gclwh4_8*rxp2_2);
IkReal x175=((0.12699240901125)*rxp1_2);
IkReal x176=((0.1893)*pp);
IkReal x177=(gclwh13_15*rxp1_2);
IkReal x178=((0.017917245)*r22);
IkReal x179=((2.0)*gclwh14_11);
IkReal x180=(gclwh6_5*x116);
IkReal x181=(gclwh8_11*x117);
IkReal x182=((0.1893)*x99);
IkReal x183=(gclwh10_11*x142);
IkReal x184=((0.0089586225)*x69);
IkReal x185=(gclwh8_5*x77);
IkReal x186=((0.1893)*x82);
IkReal x187=(gclwh10_5*x114);
IkReal x188=(gclwh4_11*x105);
IkReal x189=((0.017917245)*x103);
IkReal x190=((0.020662095)*x100);
IkReal x191=((0.017917245)*x174);
IkReal x192=(gclwh12_14*x91);
IkReal x193=(gclwh4_14*x164);
IkReal x194=((0.017917245)*x115);
IkReal x195=((0.017917245)*x90);
IkReal x196=(gclwh13_15*x91);
IkReal x197=((0.020662095)*x111);
IkReal x198=((0.017917245)*x162);
IkReal x199=((0.017917245)*x159);
IkReal x200=(gclwh15_15*x129);
IkReal x201=((0.0089586225)*x96);
IkReal x202=(gclwh7_7*x116);
IkReal x203=((0.1893)*x102);
IkReal x204=(gclwh9_10*x117);
IkReal x205=(gclwh9_7*x77);
IkReal x206=((0.1893)*x156);
IkReal x207=(gclwh7_10*x147);
IkReal x208=(gclwh5_10*x105);
IkReal x209=(gclwh11_7*x114);
IkReal x210=((0.1893)*x81);
IkReal x211=(gclwh10_5*x164);
IkReal x212=(gclwh8_5*x129);
IkReal x213=(gclwh14_11*x117);
IkReal x214=(gclwh6_5*x91);
IkReal x215=(gclwh8_11*x173);
IkReal x216=(gclwh12_11*x147);
IkReal x217=((0.1893)*x89);
IkReal x218=(gclwh4_11*x142);
IkReal x219=(gclwh7_7*x91);
IkReal x220=(gclwh9_10*x173);
IkReal x221=(gclwh13_10*x147);
IkReal x222=(gclwh11_10*x105);
IkReal x223=(gclwh5_10*x142);
IkReal x224=((0.1893)*x139);
IkReal x225=(gclwh9_7*x129);
IkReal x226=(gclwh15_10*x117);
IkReal x227=(gclwh11_7*x164);
IkReal x228=((0.04132419)*x154);
IkReal x229=((0.04132419)*x171);
IkReal x230=((0.04132419)*x100);
IkReal x231=((0.017917245)*x148);
IkReal x232=((0.3786)*x99);
IkReal x233=(gclwh8_11*x136);
IkReal x234=(gclwh4_11*x134);
IkReal x235=((0.017917245)*x69);
IkReal x236=((0.3786)*x82);
IkReal x237=(gclwh7_10*x80);
IkReal x238=((0.3786)*x125);
IkReal x239=((0.3786)*x156);
IkReal x240=(gclwh9_10*x136);
IkReal x241=((0.3786)*x102);
IkReal x242=((0.017917245)*x96);
IkReal x243=((0.04132419)*x111);
IkReal x244=((0.04132419)*x177);
IkReal x245=((0.04132419)*x145);
IkReal x246=((2.0)*x66);
IkReal x247=(rxp1_2*x172);
IkReal x248=(rxp1_2*x176);
IkReal x249=((2.0)*gclwh6_11*x75);
IkReal x250=((0.2183)*gclwh10_5*x83);
IkReal x251=((0.2183)*gclwh8_5*x87);
IkReal x252=((0.10915)*gclwh6_5*x110);
IkReal x253=((0.2183)*gclwh6_5*x75);
IkReal x254=(x118*x83);
IkReal x255=((0.10915)*gclwh8_5*x106);
IkReal x256=(x158*x87);
IkReal x257=((0.10915)*gclwh10_5*x93);
IkReal x258=(gclwh12_3*x248);
IkReal x259=(x109*x165);
IkReal x260=(gclwh10_2*pz*x93);
IkReal x261=(x166*x172);
IkReal x262=(gclwh8_2*pz*x106);
IkReal x263=(gclwh4_3*pp*x105);
IkReal x264=(x108*x165);
IkReal x265=(gclwh12_2*x247);
IkReal x266=(gclwh4_2*pz*x105);
IkReal x267=(x176*x76);
IkReal x268=(x124*x165);
IkReal x269=(gclwh13_1*x248);
IkReal x270=(x142*x168);
IkReal x271=(x113*x165);
IkReal x272=(gclwh5_1*pp*x105);
IkReal x273=(x161*x172);
IkReal x274=(x168*x93);
IkReal x275=(gclwh9_0*pz*x106);
IkReal x276=(x146*x176);
IkReal x277=(x165*x98);
IkReal x278=(gclwh13_0*x247);
IkReal x279=(gclwh5_0*pz*x105);
IkReal x280=((0.10915)*gclwh7_7*x110);
IkReal x281=((0.2183)*gclwh9_7*x87);
IkReal x282=((0.2183)*gclwh11_7*x83);
IkReal x283=(x128*x75);
IkReal x284=(x83*x84);
IkReal x285=(x104*x87);
IkReal x286=((0.10915)*gclwh9_7*x106);
IkReal x287=((0.2183)*gclwh7_7*x75);
IkReal x288=((0.10915)*gclwh11_7*x93);
IkReal x289=(x83*x88);
IkReal x290=(x149*x75);
IkReal x291=(x179*x87);
IkReal x292=(x107*x87);
IkReal x293=(x152*x83);
IkReal x294=(x112*x75);
IkReal x295=(x106*x158);
IkReal x296=(x118*x93);
IkReal x297=((4.0)*gclwh6_11*x75);
IkReal x298=(x127*x87);
IkReal x299=((2.0)*pp*x69);
IkReal x300=(x163*x83);
IkReal x301=(x110*x128);
IkReal x302=(x132*x87);
IkReal x303=(x119*x83);
IkReal x304=(x84*x93);
IkReal x305=(x138*x75);
IkReal x306=(x104*x106);
IkReal x307=(gclwh6_2*npy*x246);
IkReal x308=(gclwh6_2*x110*x123);
IkReal x309=(gclwh10_2*npz*x246);
IkReal x310=(gclwh8_2*npx*x246);
IkReal x311=(gclwh7_0*npy*x246);
IkReal x312=(gclwh9_0*npx*x246);
IkReal x313=(gclwh11_0*npz*x246);
IkReal x314=(pp*x123*x98);
IkReal x315=(x243+x244);
IkReal x316=(x197+x196);
IkReal x317=(x211+x212);
IkReal x318=(x193+x192);
IkReal x319=(x229+x228);
IkReal x320=(x225+x227);
IkReal x321=(x181+x182+x183+x249);
IkReal x322=(x204+x203+x201+x283);
IkReal x323=(x210+x213+x290+x289);
IkReal x324=(x224+x226+x293+x294);
IkReal x325=(x180+x250+x251+x252);
IkReal x326=(x202+x282+x281+x280);
IkReal x327=(x215+x216+x217+x218+x291);
IkReal x328=(x221+x220+x223+x222+x292);
IkReal x329=(x184+x186+x188+x254+x256);
IkReal x330=(x207+x206+x208+x285+x284);
IkReal x331=(x185+x187+x255+x257+x253);
IkReal x332=(x205+x209+x288+x287+x286);
IkReal x333=(x300+x236+x234+x235+x298+x299);
IkReal x334=(x232+x233+x231+x295+x296+x297);
IkReal x335=(x306+x304+x305+x242+x241+x240);
IkReal x336=(x302+x303+x301+x238+x239+x237);
IkReal x337=(x199+x314+x313+x312+x276+x277+x278+x279);
IkReal x338=(x194+x308+x309+x310+x265+x267+x266+x268);
IkReal x339=(x198+x195+x311+x269+x274+x275+x272+x273+x270+x271);
IkReal x340=(x191+x189+x307+x258+x259+x264+x261+x260+x263+x262);
op[0]=((0.178405675)+(((-1.0)*gclwh12_8*x79))+((pp*x69))+(((-1.0)*gclwh10_11*x93))+(((-1.0)*gclwh8_11*x106))+(((-1.0)*x321))+x325+x329+(((-1.0)*gclwh4_8*x122))+(((0.154705425)*x115))+(((-1.0)*x331)));
op[1]=((((1.6345)*gclwh10_2*x83))+(((-1.0)*gclwh12_3*x175))+((gclwh12_2*x79))+(((-1.6345)*gclwh6_2*x75))+(((-1.0)*x109*x70))+(((-1.0)*x190))+((gclwh4_2*x122))+(((-0.154705425)*x166))+(((-1.0)*x108*x70))+(((-0.12699240901125)*x121))+x318+x340+(((1.6345)*gclwh8_2*x87))+(((0.007321434238125)*x124))+(((-0.007321434238125)*x109))+(((-0.007321434238125)*x108))+((x124*x70))+(((-1.0)*x338))+(((0.12699240901125)*x76)));
op[2]=((((1.569)*gclwh10_12*x83))+(((-1.0)*gclwh10_12*x135))+(((-1.0)*gclwh8_12*x131))+(((-0.7845)*gclwh10_12*x93))+x319+(((-1.0)*x230))+(((-0.7845)*gclwh8_12*x106))+(((0.7845)*gclwh6_12*x110))+(((0.00702803935125)*x140))+(((-1.569)*gclwh6_12*x75))+(((1.569)*gclwh8_12*x87)));
op[3]=((((-0.160905)*x115))+(((0.160905)*x174))+(((0.160905)*x103))+x334+(((-1.0)*x333)));
op[4]=((0.007149325)+((gclwh8_11*x106))+(((-1.0)*pp*x69))+(((-1.0)*x329))+((gclwh4_8*x153))+x325+x321+(((-0.006199575)*x115))+(((-1.0)*x331))+(((0.006199575)*x103))+((gclwh10_11*x93)));
op[5]=((((-0.006199575)*x166))+(((0.0655)*gclwh10_2*x83))+((x124*x97))+(((0.000293394886875)*x124))+x190+(((-0.000293394886875)*x109))+(((-0.000293394886875)*x108))+x340+(((-0.03275)*gclwh10_2*x93))+(((-1.0)*x318))+(((-0.00076243651125)*x121))+(((0.0655)*gclwh8_2*x87))+(((-0.0655)*gclwh6_2*x75))+(((0.00076243651125)*x76))+(((-1.0)*x338))+(((-1.0)*gclwh12_3*x78))+(((-1.0)*x109*x97))+((gclwh4_2*x153))+((gclwh12_2*x167)));
op[6]=((((0.12699240901125)*x146))+(((-1.0)*x113*x70))+((x70*x98))+(((-0.154705425)*x161))+(((-1.0)*gclwh13_1*x175))+x339+x200+((gclwh13_0*x79))+(((0.007321434238125)*x98))+(((-1.0)*x316))+(((1.6345)*gclwh9_0*x87))+(((-1.0)*x337))+(((-0.007321434238125)*x113))+(((-1.0)*x170*x70))+(((-1.6345)*gclwh7_0*x75))+(((-0.007321434238125)*x170))+(((-0.12699240901125)*x141))+(((1.6345)*gclwh11_0*x83))+((gclwh5_0*x122)));
op[7]=((0.178405675)+((gclwh7_10*x110))+(((-1.0)*gclwh9_10*x106))+(((-1.0)*gclwh13_9*x79))+(((-1.0)*x322))+(((0.154705425)*x159))+x330+x326+(((-1.0)*x332))+(((-0.154705425)*x90))+(((-1.0)*gclwh11_10*x93)));
op[8]=((((-0.160905)*x90))+(((0.160905)*x159))+(((-0.160905)*x162))+x336+(((-1.0)*x335)));
op[9]=((((-1.0)*gclwh11_13*x135))+(((-0.7845)*gclwh11_13*x93))+(((0.7845)*gclwh7_13*x110))+x315+(((-0.7845)*gclwh9_13*x106))+(((-1.569)*gclwh7_13*x75))+(((0.00702803935125)*x157))+(((-1.0)*gclwh9_13*x131))+(((-1.0)*x245))+(((1.569)*gclwh11_13*x83))+(((1.569)*gclwh9_13*x87)));
op[10]=((((-0.006199575)*x161))+((gclwh13_0*x167))+((gclwh5_0*x153))+(((-1.0)*x113*x97))+(((-0.0655)*gclwh7_0*x75))+(((0.0655)*gclwh11_0*x83))+((x97*x98))+(((-1.0)*x200))+x339+x316+(((-0.000293394886875)*x113))+(((0.00076243651125)*x146))+(((0.000293394886875)*x98))+(((0.0655)*gclwh9_0*x87))+(((-0.03275)*gclwh11_0*x93))+(((-0.000293394886875)*x170))+(((-1.0)*gclwh13_1*x78))+(((-1.0)*x337))+(((-0.00076243651125)*x141)));
op[11]=((0.007149325)+(((0.006199575)*x162))+x326+x322+((gclwh11_10*x93))+(((-1.0)*x330))+(((-1.0)*x332))+(((0.006199575)*x90))+(((-1.0)*gclwh7_10*x110))+((gclwh9_10*x106))+(((-0.006199575)*x159)));
op[12]=((-0.65598384)+(((1.6345)*gclwh12_8*x75))+((gclwh12_11*x110))+(((0.007321434238125)*x73))+(((-1.6345)*gclwh14_8*x87))+(((-1.0)*x70*x85))+(((-1.0)*x70*x71))+(((-1.0)*x323))+(((-0.007321434238125)*x85))+x327+x317+((gclwh4_11*x93))+((x70*x73))+(((-1.0)*x214))+(((1.6345)*gclwh4_8*x83))+(((-0.007321434238125)*x71))+(((-1.0)*gclwh14_11*x106)));
op[13]=((((0.81725)*gclwh1_2*pp*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((0.10915)*gclwh12_14*pp*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-1.6345)*gclwh4_2*npz*pz))+(((-0.679811285)*gclwh3_3*pp*r21))+(((0.2183)*gclwh14_14*npx*pz))+(((0.000977833645875)*gclwh4_14*r22))+(((0.000847933619625)*gclwh12_8*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.154705425)*gclwh10_2*rxp2_2))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.007321434238125)*gclwh3_2*r21))+(((-0.66189404)*gclwh4_3*pp*r22))+(((-0.2183)*gclwh12_14*npy*pz))+(((0.81725)*gclwh3_2*pp*r21))+(((0.00600991575645741)*gclwh1_3*r20))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.81725)*gclwh14_2*pp*r20))+(((-0.2183)*gclwh4_14*npz*pz))+(((-0.00600991575645741)*gclwh12_3*r21))+(((-0.007321434238125)*gclwh1_2*r20))+(((-0.1893)*gclwh4_8*npz*pz))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-1.6345)*gclwh12_2*npy*pz))+(((-1.6345)*gclwh1_2*npx*pz))+(((1.341705325)*gclwh3_3*npy*pz))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.007321434238125)*gclwh14_2*r20))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.007321434238125)*gclwh4_2*r22))+(((1.6345)*gclwh14_2*npx*pz))+(((-0.154705425)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.10915)*gclwh4_14*pp*r22))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+(((0.000977833645875)*gclwh12_14*r21))+(((-0.000977833645875)*gclwh14_14*r20))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.6345)*gclwh3_2*npy*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((0.66189404)*gclwh14_3*pp*r20))+(((0.81725)*gclwh12_2*pp*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.10915)*gclwh14_14*pp*r20))+(((-0.679811285)*gclwh1_3*pp*r20))+(((0.007321434238125)*gclwh12_2*r21))+(((0.154705425)*gclwh8_2*rxp0_2))+(((-1.341705325)*gclwh14_3*npx*pz))+(((0.00600991575645741)*gclwh3_3*r21))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.000847933619625)*gclwh4_8*r22))+(((0.81725)*gclwh4_2*pp*r22)));
op[14]=((((-0.2183)*gclwh14_14*x106))+(((-1.0)*gclwh6_12*x143))+(((-0.4366)*gclwh12_14*x75))+((gclwh4_14*x101))+(((0.2183)*gclwh4_14*x93))+((gclwh8_12*x94))+((gclwh10_12*x169))+(((0.4366)*gclwh14_14*x87))+(((-0.4366)*gclwh4_14*x83))+(((0.2183)*gclwh12_14*x110))+(((-1.0)*gclwh14_14*x120))+((gclwh12_14*x133)));
op[15]=((0.02970243)+(((4.0)*gclwh4_11*x83))+((x106*x179))+(((-1.0)*gclwh8_11*x126))+((x74*x85))+(((0.007614829125)*x71))+(((-1.0)*gclwh12_11*x80))+((gclwh14_11*x136))+(((4.0)*gclwh12_11*x75))+(((-0.007614829125)*x73))+(((-1.0)*x110*x149))+(((0.3786)*x81))+(((0.007614829125)*x85))+(((-4.0)*gclwh14_11*x87))+(((-1.0)*gclwh4_11*x178))+(((-0.3786)*x89))+(((-1.0)*x73*x74))+(((-1.0)*gclwh12_8*npy*x67))+(((-1.0)*gclwh4_8*npz*x67))+(((-1.0)*x88*x93))+((gclwh14_8*npx*x67))+((x71*x74)));
op[16]=((-0.01084116)+(((-0.000293394886875)*x73))+((x71*x97))+(((0.0655)*gclwh14_8*x87))+(((-1.0)*gclwh4_11*x93))+(((-0.0655)*gclwh4_8*x83))+(((-1.0)*x73*x97))+(((-0.0655)*gclwh12_8*x75))+(((-1.0)*x327))+((x85*x97))+(((0.000293394886875)*x71))+x323+x317+(((0.000293394886875)*x85))+(((-1.0)*gclwh12_11*x110))+((gclwh14_11*x106))+(((-1.0)*x214)));
op[17]=((((-0.10915)*gclwh4_14*pp*r22))+(((-0.10915)*gclwh12_14*pp*r21))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.03275)*gclwh14_2*pp*r20))+(((0.008055325)*gclwh1_3*npx*pz))+(((0.000293394886875)*gclwh4_2*r22))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.000293394886875)*gclwh1_2*r20))+(((-0.0655)*gclwh12_2*npy*pz))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh3_2*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.000977833645875)*gclwh12_14*r21))+(((0.10915)*gclwh14_14*pp*r20))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((0.006199575)*gclwh8_2*rxp0_2))+(((0.000847933619625)*gclwh12_8*r21))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.000293394886875)*gclwh14_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0655)*gclwh1_2*npx*pz))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.00493096)*gclwh14_3*pp*r20))+(((0.008055325)*gclwh3_3*npy*pz))+(((-0.006199575)*gclwh6_2*rxp1_2))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.03275)*gclwh1_2*pp*r20))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((0.03275)*gclwh4_2*pp*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008055325)*gclwh14_3*npx*pz))+(((0.0655)*gclwh14_2*npx*pz))+(((-0.2183)*gclwh14_14*npx*pz))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.006199575)*gclwh10_2*rxp2_2))+(((-0.012986285)*gclwh3_3*pp*r21))+(((0.000293394886875)*gclwh12_2*r21))+(((-0.000977833645875)*gclwh4_14*r22))+(((0.2183)*gclwh4_14*npz*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.03275)*gclwh3_2*pp*r21))+(((-0.0655)*gclwh4_2*npz*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((0.000977833645875)*gclwh14_14*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.0655)*gclwh3_2*npy*pz))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.2183)*gclwh12_14*npy*pz))+(((0.03275)*gclwh12_2*pp*r21))+(((0.000847933619625)*gclwh4_8*r22)));
op[18]=((((0.000977833645875)*gclwh5_15*r22))+(((-0.81725)*gclwh5_0*pp*r22))+(((1.6345)*gclwh13_0*npy*pz))+(((0.81725)*gclwh15_0*pp*r20))+(((0.10915)*gclwh13_15*pp*r21))+(((0.10915)*gclwh5_15*pp*r22))+(((-0.007321434238125)*gclwh0_0*r20))+(((0.1893)*pz))+(((-0.2183)*gclwh5_15*npz*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+((gclwh5_0*pp*pz*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-1.341705325)*gclwh13_1*npy*pz))+(((0.0089586225)*gclwh5_0*pz*r22))+(((0.81725)*gclwh0_0*pp*r20))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.10915)*gclwh15_15*pp*r20))+(((-0.000977833645875)*gclwh15_15*r20))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.66189404)*gclwh15_1*pp*r20))+(((-0.154705425)*gclwh9_0*rxp0_2))+(((-0.007321434238125)*gclwh2_0*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.679811285)*gclwh2_1*pp*r21))+(((1.6345)*gclwh5_0*npz*pz))+(((-0.154705425)*gclwh11_0*rxp2_2))+(((-0.2183)*gclwh13_15*npy*pz))+(((-1.6345)*gclwh0_0*npx*pz))+(((0.00600991575645741)*gclwh0_1*r20))+(((-0.007321434238125)*gclwh5_0*r22))+(((-0.000847933619625)*gclwh13_9*r21))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((1.341705325)*gclwh0_1*npx*pz))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.00600991575645741)*gclwh2_1*r21))+(((0.000847933619625)*gclwh15_9*r20))+(((0.00600991575645741)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.6345)*gclwh15_0*npx*pz))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((1.341705325)*gclwh2_1*npy*pz))+(((0.2183)*gclwh15_15*npx*pz))+(((0.66189404)*gclwh13_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.00600991575645741)*gclwh15_1*r20))+(((0.007321434238125)*gclwh15_0*r20))+(((-1.341705325)*gclwh5_1*npz*pz))+(((-0.679811285)*gclwh0_1*pp*r20))+(((0.154705425)*gclwh7_0*rxp1_2))+(((0.00600991575645741)*gclwh5_1*r22))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.66189404)*gclwh5_1*pp*r22))+(((-1.6345)*gclwh2_0*npy*pz))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((1.341705325)*gclwh15_1*npx*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.007321434238125)*gclwh13_0*r21))+((gclwh0_1*r20*(pp*pp)))+(((0.81725)*gclwh2_0*pp*r21))+(((0.000977833645875)*gclwh13_15*r21))+(((-0.81725)*gclwh13_0*pp*r21))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[19]=((-0.65598384)+(((-1.0)*x137*x70))+(((-1.0)*x72*x92))+(((-1.0)*gclwh5_10*x93))+(((-1.0)*gclwh13_10*x110))+((x70*x95))+(((-1.0)*x320))+(((-1.0)*x328))+((gclwh15_10*x106))+((x68*x92))+((x130*x70))+x324+x219+(((0.007321434238125)*x95))+(((-0.007321434238125)*x137))+(((0.007321434238125)*x130))+(((-1.6345)*gclwh13_9*x75)));
op[20]=((-0.02970243)+((x106*x107))+(((-1.0)*x137*x74))+(((-0.007614829125)*x137))+(((-1.0)*gclwh5_10*x178))+(((-1.0)*gclwh13_10*x80))+(((0.007614829125)*x130))+(((-1.0)*x110*x112))+((x74*x95))+((x130*x74))+(((4.0)*gclwh13_10*x75))+(((0.007614829125)*x95))+((x67*x68))+(((-4.0)*gclwh15_10*x87))+((gclwh15_10*x136))+(((-1.0)*gclwh9_10*x126))+(((-1.0)*gclwh11_10*x134))+(((-1.0)*x67*x72))+(((-1.0)*x152*x93))+(((-1.0)*gclwh13_9*npy*x67))+(((4.0)*gclwh5_10*x83))+(((0.3786)*x139)));
op[21]=((((-0.2183)*gclwh13_15*x110))+((gclwh15_15*x120))+((gclwh7_13*x143))+(((0.4366)*gclwh13_15*x75))+(((-1.0)*gclwh9_13*x94))+(((0.2183)*gclwh15_15*x106))+(((-1.0)*gclwh5_15*x101))+(((-0.4366)*gclwh15_15*x87))+(((0.4366)*gclwh5_15*x83))+(((-1.0)*gclwh11_13*x169))+(((-0.2183)*gclwh5_15*x93))+(((-1.0)*gclwh13_15*x133)));
op[22]=((((-0.2183)*gclwh15_15*npx*pz))+(((0.000977833645875)*gclwh15_15*r20))+(((0.008055325)*gclwh2_1*npy*pz))+(((0.1893)*pz))+(((-0.006199575)*gclwh11_0*rxp2_2))+(((-0.00493096)*gclwh5_1*pp*r22))+((gclwh15_1*r20*(pp*pp)))+(((0.10915)*gclwh15_15*pp*r20))+(((0.03275)*gclwh2_0*pp*r21))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+(((-0.012986285)*gclwh0_1*pp*r20))+((gclwh5_0*pp*pz*r22))+(((-0.000977833645875)*gclwh5_15*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((0.006199575)*gclwh7_0*rxp1_2))+(((-0.012986285)*gclwh2_1*pp*r21))+(((-0.000977833645875)*gclwh13_15*r21))+(((-0.000293394886875)*gclwh2_0*r21))+(((0.0089586225)*gclwh5_0*pz*r22))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.2183)*gclwh5_15*npz*pz))+(((-0.008055325)*gclwh13_1*npy*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.00493096)*gclwh13_1*pp*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.000293394886875)*gclwh13_0*r21))+(((0.00493096)*gclwh15_1*pp*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.2183)*gclwh13_15*npy*pz))+(((-0.008055325)*gclwh5_1*npz*pz))+(((-0.000293394886875)*gclwh5_0*r22))+(((-0.10915)*gclwh5_15*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.0655)*gclwh15_0*npx*pz))+(((3.60823078949063e-5)*gclwh0_1*r20))+(((-0.000847933619625)*gclwh13_9*r21))+(((-3.60823078949063e-5)*gclwh15_1*r20))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((3.60823078949063e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.10915)*gclwh13_15*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((-0.03275)*gclwh13_0*pp*r21))+(((0.000293394886875)*gclwh15_0*r20))+(((0.000847933619625)*gclwh15_9*r20))+(((3.60823078949063e-5)*gclwh13_1*r21))+(((0.0655)*gclwh5_0*npz*pz))+(((-0.0655)*gclwh0_0*npx*pz))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.60823078949063e-5)*gclwh2_1*r21))+(((0.0655)*gclwh13_0*npy*pz))+(((-0.0655)*gclwh2_0*npy*pz))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.03275)*gclwh15_0*pp*r20))+((gclwh2_1*r21*(pp*pp)))+(((0.03275)*gclwh0_0*pp*r20))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.008055325)*gclwh0_1*npx*pz))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.006199575)*gclwh9_0*rxp0_2))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-0.03275)*gclwh5_0*pp*r22))+(((-2.0)*gclwh2_1*npy*pp*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.008055325)*gclwh15_1*npx*pz))+(((-0.000293394886875)*gclwh0_0*r20))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[23]=((-0.01084116)+((gclwh5_10*x93))+(((0.0655)*gclwh13_9*x75))+(((-1.0)*gclwh15_10*x106))+((x151*x72))+(((-1.0)*x151*x68))+((x137*x97))+(((-1.0)*x320))+(((-1.0)*x324))+(((-0.000293394886875)*x130))+(((0.000293394886875)*x137))+(((-0.000293394886875)*x95))+(((-0.03275)*gclwh5_9*x93))+x328+x219+((gclwh13_10*x110))+(((-1.0)*x130*x97)));
op[24]=((((3.269)*gclwh10_12*x83))+(((3.269)*gclwh8_12*x87))+(((0.01464286847625)*x140))+(((-1.6345)*gclwh8_12*x106))+(((-3.269)*gclwh6_12*x75))+x319+(((-1.0)*x230))+(((-1.0)*gclwh8_12*x160))+(((-1.6345)*gclwh10_12*x93))+(((1.6345)*gclwh6_12*x110))+(((-1.0)*gclwh10_12*x155)));
op[25]=(x334+(((-1.0)*x333)));
op[26]=((-0.3425127)+(((-8.0)*gclwh10_11*x83))+((x163*x93))+((x106*x127))+(((8.0)*gclwh6_11*x75))+(((0.03583449)*x148))+(((-0.03583449)*x69))+(((-4.0)*pp*x69))+((gclwh8_11*x144))+(((-0.7572)*x82))+(((0.7572)*x99))+(((-0.7572)*gclwh4_11*rxp2_2))+(((-8.0)*gclwh8_11*x87)));
op[27]=((((-1.569)*gclwh6_2*x110))+(((0.08264838)*x100))+(((-1.0)*gclwh12_2*x86))+(((0.0140560787025)*x109))+(((0.0140560787025)*x108))+(((3.138)*gclwh6_2*x75))+(((0.2970117)*x166))+(((-1.0)*gclwh4_2*x150))+(((-3.138)*gclwh8_2*x87))+(((-0.08264838)*x171))+(((-3.138)*gclwh10_2*x83))+(((1.569)*gclwh10_2*x93))+(((-0.0140560787025)*x124))+(((1.569)*gclwh8_2*x106))+(((-0.08264838)*x154)));
op[28]=((((0.131)*gclwh10_12*x83))+(((-0.00058678977375)*gclwh10_12*r22))+(((-0.00058678977375)*gclwh8_12*r20))+(((0.131)*gclwh8_12*x87))+(((-0.0655)*gclwh10_12*x93))+(((0.00058678977375)*x140))+(((0.0655)*gclwh6_12*x110))+(((-0.0655)*gclwh8_12*x106))+x230+(((-1.0)*x319))+(((-0.131)*gclwh6_12*x75)));
op[29]=(x333+(((-1.0)*x334)));
op[30]=(x336+(((-1.0)*x335)));
op[31]=((((3.269)*gclwh9_13*x87))+(((-1.0)*gclwh9_13*x160))+(((-1.6345)*gclwh9_13*x106))+(((-3.269)*gclwh7_13*x75))+(((0.01464286847625)*x157))+x315+(((-1.6345)*gclwh11_13*x93))+(((3.269)*gclwh11_13*x83))+(((1.6345)*gclwh7_13*x110))+(((-1.0)*x245))+(((-1.0)*gclwh11_13*x155)));
op[32]=((((0.08264838)*x111))+(((-0.0140560787025)*x98))+(((0.0140560787025)*x113))+(((1.569)*gclwh11_0*x93))+(((3.138)*gclwh7_0*x75))+(((0.2970117)*x161))+(((0.08264838)*x177))+(((-1.0)*gclwh5_0*x150))+(((-0.08264838)*x145))+(((-3.138)*gclwh11_0*x83))+(((1.569)*gclwh9_0*x106))+(((0.0140560787025)*x170))+(((-3.138)*gclwh9_0*x87))+(((-1.0)*gclwh13_0*x86))+(((-1.569)*pp*x98)));
op[33]=((-0.3425127)+((gclwh9_10*x144))+(((0.03583449)*x96))+(((-1.0)*x110*x138))+(((-0.03583449)*gclwh7_10*r21))+((x106*x132))+((x119*x93))+(((-0.7572)*x125))+(((8.0)*gclwh7_10*x75))+(((-0.7572)*x156))+(((-8.0)*gclwh11_10*x83))+(((0.7572)*x102))+(((-8.0)*gclwh9_10*x87)));
op[34]=(x335+(((-1.0)*x336)));
IkReal x341=pz*pz;
IkReal x342=((1.7)*pz);
IkReal x343=(gclwh15_9*npx);
IkReal x344=(gclwh6_11*r21);
IkReal x345=((0.81725)*pp);
IkReal x346=(gclwh4_8*r22);
IkReal x347=(gclwh5_9*npz);
IkReal x348=(gclwh14_8*r20);
IkReal x349=((0.85)*pp);
IkReal x350=(npy*pz);
IkReal x351=((4.0)*gclwh12_11);
IkReal x352=(gclwh14_3*rxp0_2);
IkReal x353=((0.000977833645875)*r20);
IkReal x354=(npx*pz);
IkReal x355=((0.00076243651125)*rxp1_2);
IkReal x356=((0.154705425)*rxp1_2);
IkReal x357=((0.017917245)*r21);
IkReal x358=(gclwh6_11*rxp1_2);
IkReal x359=(npz*pz);
IkReal x360=((2.0)*gclwh11_10);
IkReal x361=(gclwh12_8*r21);
IkReal x362=(pp*r21);
IkReal x363=((2.0)*gclwh4_11);
IkReal x364=((0.4366)*gclwh15_15);
IkReal x365=(gclwh10_11*rxp2_2);
IkReal x366=(gclwh5_9*rxp2_2);
IkReal x367=((0.020662095)*rxp1_2);
IkReal x368=(gclwh6_12*rxp1_2);
IkReal x369=((1.6345)*pz);
IkReal x370=(pp*r22);
IkReal x371=((0.14850585)*rxp0_2);
IkReal x372=(gclwh5_9*r22);
IkReal x373=((0.3786)*rxp0_2);
IkReal x374=(gclwh14_14*rxp0_2);
IkReal x375=(gclwh4_14*r22);
IkReal x376=((0.1893)*rxp0_2);
IkReal x377=(gclwh12_8*rxp1_2);
IkReal x378=((2.0)*gclwh9_10);
IkReal x379=((0.1893)*rxp2_2);
IkReal x380=(pp*r20);
IkReal x381=((2.0)*gclwh15_10);
IkReal x382=(gclwh10_2*r22);
IkReal x383=((4.0)*gclwh14_11);
IkReal x384=(gclwh5_15*rxp2_2);
IkReal x385=((0.020662095)*rxp0_2);
IkReal x386=((2.0)*gclwh13_10);
IkReal x387=(gclwh9_0*r20);
IkReal x388=((0.007321434238125)*r21);
IkReal x389=((0.4366)*gclwh5_15);
IkReal x390=((0.000977833645875)*r22);
IkReal x391=(gclwh14_8*rxp0_2);
IkReal x392=((0.0140560787025)*r22);
IkReal x393=((0.000977833645875)*r21);
IkReal x394=((0.0089586225)*r20);
IkReal x395=((2.0)*gclwh10_11);
IkReal x396=(gclwh14_14*r20);
IkReal x397=(gclwh4_3*rxp2_2);
IkReal x398=((0.03583449)*r20);
IkReal x399=((2.0)*gclwh7_10);
IkReal x400=((0.154705425)*rxp2_2);
IkReal x401=((1.0)*pz);
IkReal x402=((4.0)*gclwh15_10);
IkReal x403=((0.0089586225)*pz);
IkReal x404=(gclwh6_2*r21);
IkReal x405=((0.3786)*rxp2_2);
IkReal x406=((0.00702803935125)*r20);
IkReal x407=(gclwh13_15*r21);
IkReal x408=((0.00702803935125)*r22);
IkReal x409=((0.017917245)*r20);
IkReal x410=(gclwh5_15*r22);
IkReal x411=(gclwh7_10*rxp1_2);
IkReal x412=(gclwh5_1*rxp2_2);
IkReal x413=((0.4366)*gclwh13_15);
IkReal x414=(gclwh5_10*r22);
IkReal x415=(gclwh10_12*rxp2_2);
IkReal x416=((0.0140560787025)*r21);
IkReal x417=((0.03275)*pp);
IkReal x418=(gclwh7_13*r21);
IkReal x419=((0.7572)*rxp0_2);
IkReal x420=((4.0)*gclwh4_11);
IkReal x421=(gclwh15_1*rxp0_2);
IkReal x422=((0.0089586225)*r21);
IkReal x423=(gclwh7_0*r21);
IkReal x424=(gclwh13_9*r21);
IkReal x425=((0.4366)*gclwh12_14);
IkReal x426=(gclwh8_2*r20);
IkReal x427=(gclwh10_11*r22);
IkReal x428=(gclwh15_15*r20);
IkReal x429=((0.2970117)*rxp0_2);
IkReal x430=((2.0)*gclwh12_11);
IkReal x431=(gclwh7_13*rxp1_2);
IkReal x432=(gclwh4_8*rxp2_2);
IkReal x433=((0.04132419)*rxp1_2);
IkReal x434=((0.4366)*gclwh4_14);
IkReal x435=(gclwh15_9*r20);
IkReal x436=((2.0)*gclwh8_11);
IkReal x437=((0.0140560787025)*r20);
IkReal x438=(gclwh15_9*rxp0_2);
IkReal x439=(gclwh15_0*rxp0_2);
IkReal x440=((4.0)*gclwh5_10);
IkReal x441=(gclwh13_9*rxp1_2);
IkReal x442=((2.0)*gclwh5_10);
IkReal x443=((0.3786)*rxp1_2);
IkReal x444=((0.4366)*gclwh14_14);
IkReal x445=((4.0)*gclwh13_10);
IkReal x446=((0.020662095)*rxp2_2);
IkReal x447=(gclwh14_2*rxp0_2);
IkReal x448=((0.006199575)*rxp1_2);
IkReal x449=((0.30941085)*rxp0_2);
IkReal x450=(gclwh11_0*r22);
IkReal x451=(gclwh12_14*r21);
IkReal x452=((0.2970117)*rxp1_2);
IkReal x453=((0.2970117)*rxp2_2);
IkReal x454=((0.01239915)*rxp0_2);
IkReal x455=((0.006199575)*rxp2_2);
IkReal x456=(gclwh4_11*r22);
IkReal x457=(gclwh8_2*pz);
IkReal x458=((0.12699240901125)*rxp1_2);
IkReal x459=(gclwh11_13*rxp2_2);
IkReal x460=(gclwh11_10*r22);
IkReal x461=((0.1893)*rxp1_2);
IkReal x462=((2.0)*gclwh14_11);
IkReal x463=((0.03583449)*r21);
IkReal x464=((0.00195566729175)*x396);
IkReal x465=((0.00195566729175)*x375);
IkReal x466=((0.00195566729175)*x451);
IkReal x467=(gclwh12_11*x357);
IkReal x468=((0.3786)*x365);
IkReal x469=((0.017917245)*x456);
IkReal x470=(gclwh8_11*x373);
IkReal x471=((0.3786)*x358);
IkReal x472=(gclwh14_11*x409);
IkReal x473=((0.017917245)*x414);
IkReal x474=(gclwh9_10*x373);
IkReal x475=(gclwh13_10*x357);
IkReal x476=(gclwh11_10*x405);
IkReal x477=(gclwh15_10*x409);
IkReal x478=((0.3786)*x411);
IkReal x479=((0.00195566729175)*x407);
IkReal x480=((0.00195566729175)*x410);
IkReal x481=((0.00195566729175)*x428);
IkReal x482=((0.0089586225)*x344);
IkReal x483=(gclwh12_11*x461);
IkReal x484=(gclwh6_5*x393);
IkReal x485=(gclwh4_11*x379);
IkReal x486=(gclwh8_5*x353);
IkReal x487=(gclwh10_5*x390);
IkReal x488=(gclwh8_11*x394);
IkReal x489=(gclwh14_11*x376);
IkReal x490=((0.0089586225)*x427);
IkReal x491=(gclwh12_14*x367);
IkReal x492=((0.017917245)*x377);
IkReal x493=(gclwh4_14*x446);
IkReal x494=((0.017917245)*x432);
IkReal x495=((0.020662095)*x374);
IkReal x496=((0.017917245)*x391);
IkReal x497=((0.04132419)*gclwh15_15*rxp0_2);
IkReal x498=((0.04132419)*x384);
IkReal x499=(gclwh13_15*x433);
IkReal x500=((0.017917245)*x366);
IkReal x501=(gclwh15_15*x385);
IkReal x502=((0.017917245)*x441);
IkReal x503=((0.017917245)*x438);
IkReal x504=(gclwh13_15*x367);
IkReal x505=((0.020662095)*x384);
IkReal x506=(gclwh13_10*x461);
IkReal x507=(gclwh7_10*x422);
IkReal x508=(gclwh5_10*x379);
IkReal x509=(gclwh7_7*x393);
IkReal x510=(gclwh9_7*x353);
IkReal x511=((0.0089586225)*x460);
IkReal x512=(gclwh15_10*x376);
IkReal x513=(gclwh9_10*x394);
IkReal x514=(gclwh11_7*x390);
IkReal x515=(gclwh8_11*x376);
IkReal x516=(gclwh12_11*x422);
IkReal x517=(gclwh10_5*x446);
IkReal x518=((0.1893)*x365);
IkReal x519=((0.0089586225)*x456);
IkReal x520=(gclwh8_5*x385);
IkReal x521=(gclwh6_5*x367);
IkReal x522=((0.1893)*x358);
IkReal x523=(gclwh14_11*x394);
IkReal x524=((2.0)*x341);
IkReal x525=(pz*x461);
IkReal x526=(pp*x461);
IkReal x527=((0.2183)*gclwh14_14*x380);
IkReal x528=(x350*x425);
IkReal x529=(x359*x434);
IkReal x530=((0.2183)*gclwh12_14*x362);
IkReal x531=(x354*x444);
IkReal x532=((0.2183)*gclwh4_14*x370);
IkReal x533=(x363*x370);
IkReal x534=(x362*x430);
IkReal x535=(x354*x383);
IkReal x536=(x380*x462);
IkReal x537=(x350*x351);
IkReal x538=(x359*x420);
IkReal x539=(x362*x386);
IkReal x540=(x354*x402);
IkReal x541=(x370*x442);
IkReal x542=(x380*x381);
IkReal x543=(x359*x440);
IkReal x544=(x350*x445);
IkReal x545=((0.2183)*gclwh13_15*x362);
IkReal x546=(x354*x364);
IkReal x547=((0.2183)*gclwh5_15*x370);
IkReal x548=(x350*x413);
IkReal x549=((0.2183)*gclwh15_15*x380);
IkReal x550=(x359*x389);
IkReal x551=(x359*x395);
IkReal x552=(x354*x436);
IkReal x553=((0.2183)*gclwh10_5*x359);
IkReal x554=((0.2183)*gclwh8_5*x354);
IkReal x555=((0.10915)*gclwh6_5*x362);
IkReal x556=((0.2183)*gclwh6_5*x350);
IkReal x557=((2.0)*gclwh6_11*x350);
IkReal x558=((0.10915)*gclwh8_5*x380);
IkReal x559=((0.10915)*gclwh10_5*x370);
IkReal x560=(gclwh12_3*x526);
IkReal x561=(x394*x457);
IkReal x562=(gclwh10_2*pz*x370);
IkReal x563=(gclwh14_2*pz*x376);
IkReal x564=(x380*x457);
IkReal x565=(gclwh4_3*pp*x379);
IkReal x566=(x382*x403);
IkReal x567=(gclwh12_2*x525);
IkReal x568=(gclwh4_2*pz*x379);
IkReal x569=((0.1893)*pp*x352);
IkReal x570=(x403*x404);
IkReal x571=(gclwh13_1*x526);
IkReal x572=(x403*x450);
IkReal x573=(x387*x403);
IkReal x574=(gclwh5_1*pp*x379);
IkReal x575=(gclwh15_0*pz*x376);
IkReal x576=(gclwh11_0*pz*x370);
IkReal x577=(gclwh9_0*pz*x380);
IkReal x578=(gclwh15_1*pp*x376);
IkReal x579=(x403*x423);
IkReal x580=(gclwh13_0*x525);
IkReal x581=(gclwh5_0*pz*x379);
IkReal x582=(x359*x360);
IkReal x583=(x354*x378);
IkReal x584=((0.10915)*gclwh7_7*x362);
IkReal x585=((0.2183)*gclwh9_7*x354);
IkReal x586=((0.2183)*gclwh11_7*x359);
IkReal x587=((0.10915)*gclwh9_7*x380);
IkReal x588=((0.2183)*gclwh7_7*x350);
IkReal x589=(x350*x399);
IkReal x590=((0.10915)*gclwh11_7*x370);
IkReal x591=(x354*x462);
IkReal x592=(x359*x363);
IkReal x593=(x350*x430);
IkReal x594=(gclwh6_2*npy*x524);
IkReal x595=(gclwh6_2*x362*x401);
IkReal x596=(gclwh10_2*npz*x524);
IkReal x597=(gclwh8_2*npx*x524);
IkReal x598=(gclwh7_0*npy*x524);
IkReal x599=(gclwh9_0*npx*x524);
IkReal x600=(gclwh11_0*npz*x524);
IkReal x601=(gclwh7_0*x362*x401);
IkReal x602=(x504+x505);
IkReal x603=(x498+x499);
IkReal x604=(x493+x491);
IkReal x605=(x520+x517);
IkReal x606=(x489+x488+x490+x557);
IkReal x607=(x513+x512+x511+x589);
IkReal x608=(x522+x523+x593+x592);
IkReal x609=(x481+x550+x548+x549);
IkReal x610=(x484+x553+x555+x554);
IkReal x611=(x464+x527+x528+x529);
IkReal x612=(x509+x584+x585+x586);
IkReal x613=(x519+x518+x516+x515+x591);
IkReal x614=(x508+x506+x507+x582+x583);
IkReal x615=(x483+x482+x485+x552+x551);
IkReal x616=(x477+x478+x544+x542+x543);
IkReal x617=(x514+x510+x587+x588+x590);
IkReal x618=(x480+x479+x545+x546+x547);
IkReal x619=(x466+x465+x531+x530+x532);
IkReal x620=(x487+x486+x559+x558+x556);
IkReal x621=(x471+x472+x537+x536+x538);
IkReal x622=(x469+x468+x467+x470+x533+x535+x534);
IkReal x623=(x474+x475+x476+x473+x540+x541+x539);
IkReal x624=(x503+x579+x578+x580+x581+x599+x601+x600);
IkReal x625=(x496+x570+x568+x569+x567+x597+x596+x595);
IkReal x626=(x492+x494+x566+x564+x565+x562+x563+x560+x561+x594);
IkReal x627=(x500+x502+x575+x574+x577+x576+x571+x573+x572+x598);
op[35]=((((0.131)*gclwh11_13*x359))+(((-0.0655)*gclwh11_13*x370))+(((-0.131)*gclwh7_13*x350))+x497+(((-0.00058678977375)*gclwh9_13*r20))+(((-0.00058678977375)*gclwh11_13*r22))+(((-1.0)*x603))+(((-0.0655)*gclwh9_13*x380))+(((0.00058678977375)*x418))+(((0.131)*gclwh9_13*x354))+(((0.0655)*gclwh7_13*x362)));
op[36]=((((0.30941085)*x415))+((gclwh8_12*x449))+(((-1.0)*x611))+x619+(((-0.30941085)*x368)));
op[37]=((-1.35962257)+(((-1.0)*x622))+x621);
op[38]=((-0.15471464)+(((8.0)*gclwh12_11*x350))+(((-8.0)*gclwh14_11*x354))+(((-1.0)*gclwh8_11*x419))+(((8.0)*gclwh4_11*x359))+(((0.7572)*x358))+(((-1.0)*x370*x420))+(((-0.03583449)*x456))+(((-0.7572)*x365))+((x380*x383))+((gclwh14_11*x398))+(((-1.0)*x351*x362))+(((-1.0)*gclwh12_11*x463)));
op[39]=((((-1.569)*gclwh3_2*x362))+(((-3.138)*gclwh14_2*x354))+(((-0.0039113345835)*x375))+(((-1.569)*gclwh4_2*x370))+(((0.8732)*gclwh4_14*x359))+(((-1.0)*x362*x425))+((gclwh14_2*x437))+(((1.569)*gclwh14_2*x380))+(((-1.569)*gclwh1_2*x380))+(((-1.0)*gclwh12_2*x416))+(((-1.0)*gclwh8_2*x429))+(((-1.569)*gclwh12_2*x362))+(((-1.0)*x370*x434))+((gclwh6_2*x452))+(((0.0039113345835)*x396))+(((3.138)*gclwh12_2*x350))+((gclwh1_2*x437))+(((-1.0)*gclwh4_2*x392))+((gclwh3_2*x416))+(((-0.0039113345835)*x451))+(((-1.0)*gclwh10_2*x453))+((x380*x444))+(((-0.8732)*gclwh14_14*x354))+(((3.138)*gclwh1_2*x354))+(((3.138)*gclwh3_2*x350))+(((0.8732)*gclwh12_14*x350))+(((3.138)*gclwh4_2*x359)));
op[40]=((((0.01239915)*x415))+(((-0.01239915)*x368))+(((-1.0)*x619))+x611+((gclwh8_12*x454)));
op[41]=((0.02597257)+(((-1.0)*x621))+x622);
op[42]=((1.35962257)+(((-1.0)*x623))+x616);
op[43]=((((-0.30941085)*x459))+(((-1.0)*x618))+x609+(((-1.0)*gclwh9_13*x449))+(((0.30941085)*x431)));
op[44]=((((-1.0)*gclwh7_0*x452))+(((-1.569)*gclwh2_0*x362))+(((0.0039113345835)*x428))+(((3.138)*gclwh2_0*x350))+((gclwh9_0*x429))+(((-1.0)*gclwh15_0*x437))+(((1.569)*gclwh5_0*x370))+(((0.8732)*gclwh13_15*x350))+(((-1.569)*gclwh0_0*x380))+(((-0.0039113345835)*x407))+((gclwh11_0*x453))+(((-1.569)*gclwh15_0*x380))+(((-0.0039113345835)*x410))+((gclwh13_0*x416))+(((3.138)*gclwh15_0*x354))+((gclwh5_0*x392))+((gclwh0_0*x437))+(((-0.8732)*gclwh15_15*x354))+((gclwh2_0*x416))+(((-3.138)*gclwh13_0*x350))+(((-1.0)*x370*x389))+(((-3.138)*gclwh5_0*x359))+(((0.8732)*gclwh5_15*x359))+((x364*x380))+(((3.138)*gclwh0_0*x354))+(((1.569)*gclwh13_0*x362))+(((-1.0)*x362*x413)));
op[45]=((-0.15471464)+(((-8.0)*gclwh5_10*x359))+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x380*x402))+(((-0.7572)*x411))+((x362*x445))+(((8.0)*gclwh15_10*x354))+(((0.03583449)*x414))+((x370*x440))+(((-8.0)*gclwh13_10*x350))+((gclwh9_10*x419))+(((-1.0)*gclwh15_10*x398))+((gclwh13_10*x463)));
op[46]=((-0.02597257)+(((-1.0)*x616))+x623);
op[47]=((((-1.0)*gclwh9_13*x454))+x618+(((-1.0)*x609))+(((-0.01239915)*x459))+(((0.01239915)*x431)));
op[48]=((-0.178405675)+(((-1.0)*pp*x344))+(((-1.0)*x620))+(((-1.0)*x615))+((gclwh10_11*x370))+((gclwh8_11*x380))+x606+x610+(((0.154705425)*x391))+(((-1.0)*gclwh12_8*x356))+(((-1.0)*gclwh4_8*x400)));
op[49]=(((x345*x426))+(((0.12699240901125)*x352))+(((-1.0)*gclwh12_2*x356))+(((-0.12699240901125)*x397))+(((0.154705425)*x447))+(((-1.6345)*gclwh10_2*x359))+((x345*x382))+(((-1.0)*gclwh6_2*x388))+(((-1.0)*x345*x404))+(((-1.0)*x625))+(((0.007321434238125)*x426))+(((1.6345)*gclwh6_2*x350))+(((0.007321434238125)*x382))+x495+(((-1.6345)*gclwh8_2*x354))+x626+(((-1.0)*x604))+(((-1.0)*gclwh4_2*x400))+(((-1.0)*gclwh12_3*x458)));
op[50]=((((-0.00702803935125)*gclwh6_12*r21))+(((-0.7845)*gclwh6_12*x362))+(((-0.04132419)*gclwh4_14*rxp2_2))+(((-1.569)*gclwh10_12*x359))+(((1.569)*gclwh6_12*x350))+(((0.7845)*gclwh10_12*x370))+((gclwh8_12*x406))+((gclwh10_12*x408))+(((-1.0)*gclwh12_14*x433))+(((0.04132419)*x374))+(((-1.569)*gclwh8_12*x354))+(((0.7845)*gclwh8_12*x380)));
op[51]=((((-0.160905)*x391))+(((-1.0)*gclwh14_11*x373))+((gclwh12_11*x443))+(((-1.0)*x370*x395))+(((0.160905)*x432))+(((-1.0)*gclwh8_11*x409))+(((-4.0)*gclwh6_11*x350))+((gclwh4_11*x405))+(((4.0)*gclwh8_11*x354))+(((2.0)*pp*x344))+(((4.0)*gclwh10_11*x359))+(((-0.017917245)*x427))+(((0.160905)*x377))+(((0.017917245)*x344))+(((-1.0)*x380*x436)));
op[52]=((-0.007149325)+(((0.006199575)*x377))+(((0.006199575)*x432))+((pp*x344))+(((-1.0)*x620))+(((-1.0)*gclwh10_11*x370))+(((-0.006199575)*x391))+x615+x610+(((-1.0)*x606))+(((-1.0)*gclwh8_11*x380)));
op[53]=((((0.006199575)*x447))+(((0.03275)*gclwh10_2*x370))+(((-0.00076243651125)*x397))+(((-1.0)*x495))+(((-1.0)*gclwh4_2*x455))+(((-0.000293394886875)*x404))+(((0.0655)*gclwh6_2*x350))+(((-1.0)*gclwh12_2*x448))+(((-1.0)*x625))+(((-0.03275)*gclwh6_2*x362))+(((0.000293394886875)*x382))+(((-0.0655)*gclwh10_2*x359))+x604+x626+(((0.00076243651125)*x352))+(((-1.0)*gclwh12_3*x355))+(((0.000293394886875)*x426))+(((-0.0655)*gclwh8_2*x354))+(((0.03275)*gclwh8_2*x380)));
op[54]=((((-0.12699240901125)*x412))+(((0.12699240901125)*x421))+(((-1.0)*x345*x423))+(((-1.0)*gclwh13_1*x458))+(((0.154705425)*x439))+((x345*x387))+(((-1.0)*x501))+((x345*x450))+(((-1.6345)*gclwh9_0*x354))+(((-1.0)*x624))+(((-1.0)*gclwh7_0*x388))+(((0.007321434238125)*x387))+(((-1.0)*gclwh5_0*x400))+(((1.6345)*gclwh7_0*x350))+(((0.007321434238125)*x450))+x602+x627+(((-1.6345)*gclwh11_0*x359))+(((-1.0)*gclwh13_0*x356)));
op[55]=((-0.178405675)+((gclwh11_10*x370))+(((-1.0)*gclwh7_10*x362))+(((0.154705425)*x438))+(((-0.154705425)*x366))+(((-1.0)*x617))+(((-1.0)*x614))+x607+x612+((gclwh9_10*x380))+(((-1.0)*gclwh13_9*x356)));
op[56]=(((x378*x380))+(((-0.160905)*x366))+(((-1.0)*gclwh13_10*x443))+(((-1.0)*x362*x399))+(((4.0)*gclwh7_10*x350))+(((0.160905)*x438))+(((-1.0)*gclwh7_10*x357))+((gclwh15_10*x373))+(((-4.0)*gclwh9_10*x354))+(((-0.160905)*x441))+(((-4.0)*gclwh11_10*x359))+((gclwh9_10*x409))+(((0.017917245)*x460))+((x360*x370))+(((-1.0)*gclwh5_10*x405)));
op[57]=((((-0.7845)*gclwh7_13*x362))+(((-1.569)*gclwh9_13*x354))+(((0.7845)*gclwh9_13*x380))+((gclwh9_13*x406))+((gclwh11_13*x408))+(((0.7845)*gclwh11_13*x370))+x497+(((1.569)*gclwh7_13*x350))+(((-1.0)*x603))+(((-1.569)*gclwh11_13*x359))+(((-0.00702803935125)*x418)));
op[58]=((((-1.0)*gclwh5_0*x455))+(((0.03275)*gclwh9_0*x380))+(((0.006199575)*x439))+(((-0.03275)*gclwh7_0*x362))+(((0.000293394886875)*x450))+(((-0.0655)*gclwh11_0*x359))+(((-1.0)*x624))+(((0.000293394886875)*x387))+(((-0.00076243651125)*x412))+(((-0.0655)*gclwh9_0*x354))+(((-1.0)*gclwh13_0*x448))+x501+(((0.00076243651125)*x421))+x627+(((-1.0)*x602))+(((0.03275)*gclwh11_0*x370))+(((-0.000293394886875)*x423))+(((-1.0)*gclwh13_1*x355))+(((0.0655)*gclwh7_0*x350)));
op[59]=((-0.007149325)+(((0.006199575)*x441))+(((-1.0)*gclwh9_10*x380))+(((-1.0)*gclwh11_10*x370))+(((-1.0)*x617))+x614+x612+((gclwh7_10*x362))+(((-1.0)*x607))+(((-0.006199575)*x438))+(((0.006199575)*x366)));
op[60]=((0.65598384)+(((-1.0)*gclwh4_11*x370))+(((-1.0)*x345*x361))+((gclwh14_11*x380))+(((-0.007321434238125)*x361))+(((-1.0)*x521))+((x345*x348))+(((-1.0)*gclwh12_11*x362))+(((-1.0)*x345*x346))+(((-1.0)*x613))+(((1.6345)*gclwh12_8*x350))+x605+x608+(((0.007321434238125)*x348))+(((-1.6345)*gclwh14_8*x354))+(((-0.007321434238125)*x346))+(((1.6345)*gclwh4_8*x359)));
op[61]=((((-0.10915)*gclwh4_14*pp*r22))+(((-0.10915)*gclwh12_14*pp*r21))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((1.6345)*gclwh3_2*npy*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.154705425)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.679811285)*gclwh3_3*pp*r21))+(((-0.000977833645875)*gclwh12_14*r21))+(((0.81725)*gclwh14_2*pp*r20))+(((0.10915)*gclwh14_14*pp*r20))+(((0.000847933619625)*gclwh12_8*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.66189404)*gclwh4_3*pp*r22))+(((0.00600991575645741)*gclwh1_3*r20))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.81725)*gclwh12_2*pp*r21))+(((-0.00600991575645741)*gclwh12_3*r21))+(((-0.007321434238125)*gclwh4_2*r22))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.007321434238125)*gclwh3_2*r21))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((1.6345)*gclwh1_2*npx*pz))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.81725)*gclwh3_2*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((1.341705325)*gclwh3_3*npy*pz))+(((1.6345)*gclwh4_2*npz*pz))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.007321434238125)*gclwh1_2*r20))+(((1.6345)*gclwh12_2*npy*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.81725)*gclwh1_2*pp*r20))+(((0.007321434238125)*gclwh14_2*r20))+(((-0.2183)*gclwh14_14*npx*pz))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.007321434238125)*gclwh12_2*r21))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.000977833645875)*gclwh4_14*r22))+(((-0.154705425)*gclwh8_2*rxp0_2))+(((0.2183)*gclwh4_14*npz*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((-1.6345)*gclwh14_2*npx*pz))+(((0.66189404)*gclwh14_3*pp*r20))+(((0.000977833645875)*gclwh14_14*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.679811285)*gclwh1_3*pp*r20))+(((-1.341705325)*gclwh14_3*npx*pz))+(((-0.81725)*gclwh4_2*pp*r22))+(((-0.154705425)*gclwh10_2*rxp2_2))+(((0.00600991575645741)*gclwh3_3*r21))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.2183)*gclwh12_14*npy*pz))+(((0.000847933619625)*gclwh4_8*r22)));
op[62]=((((-1.0)*x619))+x611+(((-0.14850585)*x415))+(((-1.0)*gclwh8_12*x371))+(((0.14850585)*x368)));
op[63]=((-0.02970243)+(((-1.0)*gclwh12_8*npy*x342))+(((-1.0)*x621))+((gclwh14_8*npx*x342))+(((-1.0)*x348*x349))+(((-1.0)*gclwh4_8*npz*x342))+(((-0.007614829125)*x348))+(((0.007614829125)*x361))+x622+((x346*x349))+((x349*x361))+(((0.007614829125)*x346)));
op[64]=((0.01084116)+(((0.0655)*gclwh14_8*x354))+(((-0.0655)*gclwh4_8*x359))+((gclwh12_11*x362))+(((-1.0)*gclwh14_11*x380))+((x361*x417))+(((-0.0655)*gclwh12_8*x350))+(((0.000293394886875)*x346))+(((-1.0)*x521))+(((-0.000293394886875)*x348))+(((0.000293394886875)*x361))+x605+x613+((x346*x417))+(((-1.0)*x608))+(((-1.0)*x348*x417))+((gclwh4_11*x370)));
op[65]=((((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((0.10915)*gclwh12_14*pp*r21))+(((0.000293394886875)*gclwh3_2*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.008055325)*gclwh1_3*npx*pz))+(((-0.03275)*gclwh12_2*pp*r21))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh12_2*r21))+((gclwh12_3*r21*(pp*pp)))+(((0.03275)*gclwh14_2*pp*r20))+(((0.2183)*gclwh14_14*npx*pz))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((0.000977833645875)*gclwh4_14*r22))+(((0.000847933619625)*gclwh12_8*r21))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.000293394886875)*gclwh1_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.2183)*gclwh12_14*npy*pz))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.00493096)*gclwh14_3*pp*r20))+(((-0.2183)*gclwh4_14*npz*pz))+(((0.008055325)*gclwh3_3*npy*pz))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((-0.0655)*gclwh14_2*npx*pz))+(((0.0655)*gclwh1_2*npx*pz))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.006199575)*gclwh6_2*rxp1_2))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008055325)*gclwh14_3*npx*pz))+(((-0.03275)*gclwh3_2*pp*r21))+(((0.10915)*gclwh4_14*pp*r22))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+(((0.000977833645875)*gclwh12_14*r21))+(((-0.000977833645875)*gclwh14_14*r20))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.012986285)*gclwh3_3*pp*r21))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.006199575)*gclwh10_2*rxp2_2))+(((0.0089586225)*gclwh1_2*pz*r20))+(((-0.03275)*gclwh1_2*pp*r20))+(((0.000293394886875)*gclwh14_2*r20))+(((0.0655)*gclwh12_2*npy*pz))+(((0.0655)*gclwh3_2*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0655)*gclwh4_2*npz*pz))+(((-0.10915)*gclwh14_14*pp*r20))+(((-0.006199575)*gclwh8_2*rxp0_2))+(((-0.000293394886875)*gclwh4_2*r22))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.000847933619625)*gclwh4_8*r22))+(((-0.03275)*gclwh4_2*pp*r22)));
op[66]=((((-0.2183)*gclwh15_15*npx*pz))+(((0.000977833645875)*gclwh15_15*r20))+(((-0.81725)*gclwh15_0*pp*r20))+(((0.1893)*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.10915)*gclwh15_15*pp*r20))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+((gclwh5_0*pp*pz*r22))+(((-0.000977833645875)*gclwh5_15*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-1.6345)*gclwh13_0*npy*pz))+(((-0.000977833645875)*gclwh13_15*r21))+(((-0.81725)*gclwh2_0*pp*r21))+(((-0.154705425)*gclwh7_0*rxp1_2))+(((-1.341705325)*gclwh13_1*npy*pz))+(((0.0089586225)*gclwh5_0*pz*r22))+(((-1.6345)*gclwh5_0*npz*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.007321434238125)*gclwh13_0*r21))+(((1.6345)*gclwh2_0*npy*pz))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.2183)*gclwh5_15*npz*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.66189404)*gclwh15_1*pp*r20))+(((0.2183)*gclwh13_15*npy*pz))+(((-0.10915)*gclwh5_15*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.679811285)*gclwh2_1*pp*r21))+(((0.007321434238125)*gclwh0_0*r20))+(((0.007321434238125)*gclwh5_0*r22))+(((0.00600991575645741)*gclwh0_1*r20))+(((-0.000847933619625)*gclwh13_9*r21))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.007321434238125)*gclwh15_0*r20))+(((0.007321434238125)*gclwh2_0*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.10915)*gclwh13_15*pp*r21))+(((1.341705325)*gclwh0_1*npx*pz))+(((0.81725)*gclwh13_0*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.00600991575645741)*gclwh2_1*r21))+(((-0.81725)*gclwh0_0*pp*r20))+(((0.000847933619625)*gclwh15_9*r20))+(((0.00600991575645741)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((1.341705325)*gclwh2_1*npy*pz))+(((0.66189404)*gclwh13_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.00600991575645741)*gclwh15_1*r20))+(((-1.341705325)*gclwh5_1*npz*pz))+(((-0.679811285)*gclwh0_1*pp*r20))+(((0.00600991575645741)*gclwh5_1*r22))+(((0.0089586225)*gclwh2_0*pz*r21))+(((1.6345)*gclwh0_0*npx*pz))+(((0.154705425)*gclwh9_0*rxp0_2))+(((0.66189404)*gclwh5_1*pp*r22))+(((0.154705425)*gclwh11_0*rxp2_2))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((1.341705325)*gclwh15_1*npx*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((1.6345)*gclwh15_0*npx*pz))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.81725)*gclwh5_0*pp*r22))+((gclwh0_1*r20*(pp*pp)))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[67]=((0.65598384)+((x345*x424))+((gclwh7_7*x367))+((gclwh11_10*x379))+(((-1.0)*x359*x442))+(((-1.0)*x347*x369))+(((-0.1893)*x411))+((gclwh13_10*x362))+(((-0.007321434238125)*x435))+(((-1.0)*x345*x435))+(((-1.0)*gclwh9_7*x385))+((x343*x369))+(((-1.0)*gclwh15_10*x380))+((gclwh13_9*x388))+(((-1.0)*x350*x386))+(((0.0089586225)*x414))+((gclwh9_10*x376))+((x345*x372))+((gclwh5_10*x370))+((gclwh13_10*x422))+(((-1.6345)*gclwh13_9*x350))+((x354*x381))+(((-1.0)*gclwh11_7*x446))+(((-1.0)*gclwh15_10*x394))+(((0.007321434238125)*x372)));
op[68]=((0.02970243)+(((-1.0)*x349*x435))+(((0.007614829125)*x424))+(((-1.0)*x616))+(((0.007614829125)*x372))+x623+((x349*x424))+((x349*x372))+(((-1.0)*x342*x347))+(((-0.007614829125)*x435))+(((-1.0)*gclwh13_9*npy*x342))+((x342*x343)));
op[69]=((((-0.14850585)*x431))+((gclwh9_13*x371))+(((0.14850585)*x459))+x618+(((-1.0)*x609)));
op[70]=((((-0.000293394886875)*gclwh15_0*r20))+(((0.000977833645875)*gclwh5_15*r22))+(((-0.0655)*gclwh5_0*npz*pz))+(((0.10915)*gclwh13_15*pp*r21))+(((0.000293394886875)*gclwh13_0*r21))+(((-0.03275)*gclwh2_0*pp*r21))+(((0.10915)*gclwh5_15*pp*r22))+(((0.008055325)*gclwh2_1*npy*pz))+(((0.1893)*pz))+(((-0.0655)*gclwh13_0*npy*pz))+(((-0.00493096)*gclwh5_1*pp*r22))+(((-0.2183)*gclwh5_15*npz*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.1893)*gclwh5_9*npz*pz))+(((0.0655)*gclwh15_0*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+(((-0.012986285)*gclwh0_1*pp*r20))+(((-0.006199575)*gclwh7_0*rxp1_2))+((gclwh5_0*pp*pz*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-0.012986285)*gclwh2_1*pp*r21))+(((-0.03275)*gclwh0_0*pp*r20))+(((0.0089586225)*gclwh5_0*pz*r22))+(((0.0655)*gclwh0_0*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.006199575)*gclwh9_0*rxp0_2))+(((0.000293394886875)*gclwh5_0*r22))+(((-0.008055325)*gclwh13_1*npy*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.00493096)*gclwh13_1*pp*r21))+(((-0.10915)*gclwh15_15*pp*r20))+(((-0.000977833645875)*gclwh15_15*r20))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.00493096)*gclwh15_1*pp*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.03275)*gclwh15_0*pp*r20))+(((-0.008055325)*gclwh5_1*npz*pz))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.0655)*gclwh2_0*npy*pz))+(((3.60823078949063e-5)*gclwh0_1*r20))+(((-0.2183)*gclwh13_15*npy*pz))+(((0.000293394886875)*gclwh2_0*r21))+(((-0.000847933619625)*gclwh13_9*r21))+(((-3.60823078949063e-5)*gclwh15_1*r20))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((3.60823078949063e-5)*gclwh5_1*r22))+(((0.000293394886875)*gclwh0_0*r20))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.000847933619625)*gclwh15_9*r20))+(((0.006199575)*gclwh11_0*rxp2_2))+(((3.60823078949063e-5)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.60823078949063e-5)*gclwh2_1*r21))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.2183)*gclwh15_15*npx*pz))+((gclwh2_1*r21*(pp*pp)))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.008055325)*gclwh0_1*npx*pz))+(((0.03275)*gclwh13_0*pp*r21))+(((0.03275)*gclwh5_0*pp*r22))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.008055325)*gclwh15_1*npx*pz))+(((0.000977833645875)*gclwh13_15*r21))+(((0.0089586225)*gclwh0_0*pz*r20)));
IkReal x628=((0.03275)*pp);
IkReal x629=(gclwh5_9*r22);
IkReal x630=((2.0)*pz);
IkReal x631=(gclwh13_9*r21);
IkReal x632=(gclwh15_10*r20);
IkReal x633=(gclwh15_9*r20);
IkReal x634=(gclwh13_10*r21);
IkReal x635=((1.0)*pp);
IkReal x636=(gclwh5_10*r22);
IkReal x637=((0.0655)*pz);
op[71]=((0.01084116)+(((-0.000293394886875)*x629))+(((0.0089586225)*x632))+(((-0.020662095)*gclwh9_7*rxp0_2))+(((0.1893)*gclwh7_10*rxp1_2))+(((-0.1893)*gclwh11_10*rxp2_2))+(((-0.020662095)*gclwh11_7*rxp2_2))+(((0.020662095)*gclwh7_7*rxp1_2))+((gclwh5_10*npz*x630))+((x628*x633))+(((-1.0)*x628*x629))+(((-1.0)*x628*x631))+(((0.000293394886875)*x633))+((pp*x632))+(((-1.0)*x634*x635))+(((-0.1893)*gclwh9_10*rxp0_2))+(((-0.0089586225)*x634))+(((-0.0089586225)*x636))+(((-1.0)*x635*x636))+((gclwh13_10*npy*x630))+(((-1.0)*gclwh15_9*npx*x637))+(((-1.0)*gclwh15_10*npx*x630))+((gclwh13_9*npy*x637))+(((-0.000293394886875)*x631))+((gclwh5_9*npz*x637)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j9array[16], cj9array[16], sj9array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IkReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj9 = zeror[ij7+2];
if(isnan(htj7)||isnan(htj8)||isnan(htj9)){
continue;
}
j7array[numsolutions]=((2.0)*(atan(htj7)));
j8array[numsolutions]=((2.0)*(atan(htj8)));
j9array[numsolutions]=((2.0)*(atan(htj9)));
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x638=htj7*htj7;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((1.0)+x638),-1);
if(!x639.valid){
continue;
}
cj7array[numsolutions]=((x639.value)*(((1.0)+(((-1.0)*x638)))));
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x640.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x640.value));
}
if(isinf(htj8)){
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
}
else{
IkReal x641=htj8*htj8;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((1.0)+x641),-1);
if(!x642.valid){
continue;
}
cj8array[numsolutions]=((x642.value)*(((1.0)+(((-1.0)*x641)))));
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((1.0)+(htj8*htj8)),-1);
if(!x643.valid){
continue;
}
sj8array[numsolutions]=((2.0)*htj8*(x643.value));
}
if(isinf(htj9)){
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
}
else{
IkReal x644=htj9*htj9;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((1.0)+x644),-1);
if(!x645.valid){
continue;
}
cj9array[numsolutions]=((x645.value)*(((1.0)+(((-1.0)*x644)))));
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((1.0)+(htj9*htj9)),-1);
if(!x646.valid){
continue;
}
sj9array[numsolutions]=((2.0)*htj9*(x646.value));
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj9 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij9[0] = 0; _ij9[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj9array[ij7]-cj9array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij7]-sj9array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij9[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j9 = j9array[ij7]; cj9 = cj9array[ij7]; sj9 = sj9array[ij7];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j11eval[2];
j11eval[0]=((r20*r20)+(r21*r21));
j11eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x647=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x647);
rxp1_0=(pz*r11);
rxp1_1=(r01*x647);
j10eval[0]=cj9;
j10eval[1]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x648=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x648);
rxp1_0=(pz*r11);
rxp1_1=(r01*x648);
j10eval[0]=r22;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(r22,-1);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(sj9,-1);
if(!x650.valid){
continue;
}
sj10array[0]=((x649.value)*(x650.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
evalcond[1]=((((-1.0)*cj7*cj8))+((cj9*r22*(IKsin(j10))))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x651=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x651);
rxp1_0=(pz*r11);
rxp1_1=(r01*x651);
IkReal x652=(cj8*sj7);
IkReal x653=(cj10*r12);
IkReal x654=((4.0)*sj10);
IkReal x655=(cj9*r12);
IkReal x656=(r10*sj9);
IkReal x657=(cj7*sj8);
IkReal x658=(cj10*cj9);
IkReal x659=(r01*sj10);
IkReal x660=(cj9*r02);
IkReal x661=((12.0)*sj10);
IkReal x662=((4.0)*sj9);
IkReal x663=(r00*sj9);
IkReal x664=(r01*x662);
IkReal x665=(r11*x662);
IkReal x666=((16.0)*r11*sj10);
IkReal x667=((12.0)*cj10*r02);
IkReal x668=((8.0)*r11*sj10);
IkReal x669=((4.0)*cj10*r02);
IkReal x670=((4.0)*r00*x658);
IkReal x671=(x660*x661);
IkReal x672=((4.0)*r10*x658);
IkReal x673=(x655*x661);
IkReal x674=((12.0)*x653*x657);
IkReal x675=(r10*x654*x657);
IkReal x676=(r10*x652*x654);
IkReal x677=((12.0)*x652*x653);
IkReal x678=(r00*x654*x657);
IkReal x679=(r00*x652*x654);
IkReal x680=(x652*x667);
IkReal x681=(x657*x667);
IkReal x682=(x677+x674);
IkReal x683=(x665+x678+x679);
IkReal x684=(x673+x681+x680);
IkReal x685=(x670+x676+x675);
j11eval[0]=((((0.5)*(IKabs(((((-1.0)*x657*x669))+x683+(((-1.0)*x652*x669))+(((-1.0)*x672))+(((-1.0)*x654*x655)))))))+(((0.5)*(IKabs(((((-16.0)*x656))+(((16.0)*x652*x659))+(((-16.0)*r11*x658))+(((16.0)*x657*x659)))))))+(((0.5)*(IKabs(((((-1.0)*x684))+x683+(((-1.0)*x672)))))))+(((0.5)*(IKabs(((((-1.0)*x654*x660))+(((-1.0)*x685))+x664+(((4.0)*x653*x657))+(((4.0)*x652*x653)))))))+(((0.5)*(IKabs(((((-1.0)*x685))+x664+x682+(((-1.0)*x671)))))))+(((0.5)*(IKabs(((((-1.0)*x664))+x682+x685+(((-1.0)*x671)))))))+(((0.5)*(IKabs(((((-1.0)*x683))+(((-1.0)*x684))+x672)))))+(((0.5)*(IKabs(((((-16.0)*x663))+(((-1.0)*x657*x666))+(((-16.0)*r01*x658))+(((-1.0)*x652*x666)))))))+(IKabs(((((-8.0)*r01*x658))+(((-8.0)*x663))+(((-1.0)*x657*x668))+(((-1.0)*x652*x668)))))+(IKabs(((((8.0)*x652*x659))+(((8.0)*x657*x659))+(((-8.0)*r11*x658))+(((-8.0)*x656))))));
if( IKabs(j11eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j11evalpoly[1];
IkReal x686=((4.0)*r00);
IkReal x687=((8.0)*r01);
IkReal x688=((16.0)*r01);
IkReal x689=(r10*sj9);
IkReal x690=((4.0)*cj9);
IkReal x691=(r12*sj10);
IkReal x692=((4.0)*r11*sj9);
IkReal x693=(cj7*sj10*sj8);
IkReal x694=(cj8*sj10*sj7);
IkReal x695=(cj10*cj9*r11);
IkReal x696=(cj10*r10*x690);
IkReal x697=((12.0)*cj9*x691);
IkReal x698=(x690*x691);
IkReal x699=(cj10*cj8*r02*sj7);
IkReal x700=(cj10*cj7*r02*sj8);
IkReal x701=(x686*x693);
IkReal x702=(x686*x694);
IkReal x703=((12.0)*x699);
IkReal x704=((12.0)*x700);
IkReal x705=((4.0)*x699);
IkReal x706=((4.0)*x700);
IkReal x707=(x692+x702+x701);
IkReal x708=(x698+x706+x705);
IkReal x709=(x697+x703+x704);
IkReal x710=(((x687*x694))+((x687*x693))+(((-8.0)*x689))+(((-8.0)*x695)));
op[0]=((((-1.0)*x708))+(((-1.0)*x696))+x707);
op[1]=x710;
op[2]=((((-1.0)*x709))+(((-1.0)*x696))+x707);
op[3]=((((-16.0)*x689))+(((-16.0)*x695))+((x688*x694))+((x688*x693)));
op[4]=((((-1.0)*x709))+(((-1.0)*x707))+x696);
op[5]=x710;
op[6]=((((-1.0)*x708))+(((-1.0)*x707))+x696);
polyroots6(op,zeror,numroots);
IkReal j11array[6], cj11array[6], sj11array[6], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[6]={true,true,true,true,true,true};
_nj11 = 6;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

IkReal x711=(cj8*sj7);
IkReal x712=(cj10*r12);
IkReal x713=(cj7*sj8);
IkReal x714=(r00*sj9);
IkReal x715=((4.0)*r01*sj9);
IkReal x716=((16.0)*r11*sj10);
IkReal x717=(cj10*cj9*r01);
IkReal x718=(cj9*r02*sj10);
IkReal x719=((4.0)*r10*sj10);
IkReal x720=((8.0)*r11*sj10);
IkReal x721=((4.0)*cj10*cj9*r00);
IkReal x722=((12.0)*x718);
IkReal x723=((4.0)*x718);
IkReal x724=(x713*x719);
IkReal x725=(x711*x719);
IkReal x726=((4.0)*x712*x713);
IkReal x727=((4.0)*x711*x712);
IkReal x728=((12.0)*x712*x713);
IkReal x729=((12.0)*x711*x712);
IkReal x730=(x726+x727);
IkReal x731=(x728+x729);
IkReal x732=(x721+x724+x725);
IkReal x733=((((-1.0)*x713*x720))+(((-8.0)*x717))+(((-8.0)*x714))+(((-1.0)*x711*x720)));
j11evalpoly[0]=((((htj11*htj11*htj11*htj11*htj11*htj11)*(((((-1.0)*x723))+(((-1.0)*x732))+x715+x730))))+((htj11*x733))+((x733*(htj11*htj11*htj11*htj11*htj11)))+(((-1.0)*x723))+(((htj11*htj11)*(((((-1.0)*x722))+(((-1.0)*x715))+x732+x731))))+(((-1.0)*x715))+(((htj11*htj11*htj11*htj11)*(((((-1.0)*x722))+(((-1.0)*x732))+x715+x731))))+x732+x730+(((htj11*htj11*htj11)*(((((-1.0)*x711*x716))+(((-1.0)*x713*x716))+(((-16.0)*x717))+(((-16.0)*x714)))))));
if( IKabs(j11evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x734=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x734))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x734))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x734))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x734))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x734))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x734))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x735=IKcos(j6);
IkReal x736=IKsin(j6);
IkReal x737=((1.0)*cj10);
IkReal x738=(cj11*r10);
IkReal x739=(r11*sj11);
IkReal x740=((1.0)*sj10);
IkReal x741=((1.0)*cj8);
IkReal x742=(cj9*sj10);
IkReal x743=(cj10*sj9);
IkReal x744=(cj10*cj9);
IkReal x745=(r01*sj11);
IkReal x746=(cj11*r00);
IkReal x747=((1.0)*sj8);
IkReal x748=((0.39225)*sj8);
IkReal x749=((0.09465)*cj11);
IkReal x750=(r00*sj11);
IkReal x751=(cj11*cj9);
IkReal x752=(r10*sj11);
IkReal x753=(cj11*sj9);
IkReal x754=((0.39225)*cj8*sj7);
IkReal x755=(cj7*x735);
IkReal x756=(sj7*x736);
IkReal x757=(cj7*x736);
IkReal x758=(sj7*x735);
evalcond[0]=((((-1.0)*x738*x740))+x735+((sj10*x739))+(((-1.0)*r12*x737)));
evalcond[1]=(((sj10*x745))+(((-1.0)*r02*x737))+(((-1.0)*x736))+(((-1.0)*x740*x746)));
evalcond[2]=(((x735*x754))+(((-0.10915)*x736))+(((-1.0)*px))+(((-0.09465)*x750))+(((-1.0)*r01*x749))+((x748*x755))+(((0.425)*x758)));
evalcond[3]=(((x736*x754))+(((-1.0)*r11*x749))+(((-1.0)*py))+(((-0.09465)*x752))+(((0.10915)*x735))+((x748*x757))+(((0.425)*x756)));
evalcond[4]=(((cj9*x750))+((cj8*x755))+((r01*x751))+(((-1.0)*x747*x758))+((x743*x746))+(((-1.0)*r02*sj9*x740))+(((-1.0)*sj9*x737*x745)));
evalcond[5]=(((r02*x742))+((x744*x745))+(((-1.0)*cj9*x737*x746))+((r01*x753))+(((-1.0)*x747*x755))+((sj9*x750))+(((-1.0)*x741*x758)));
evalcond[6]=(((cj9*x752))+((x738*x743))+((cj8*x757))+(((-1.0)*r12*sj9*x740))+(((-1.0)*x747*x756))+(((-1.0)*sj9*x737*x739))+((r11*x751)));
evalcond[7]=((((-1.0)*cj9*x737*x738))+((x739*x744))+(((-1.0)*x747*x757))+((r12*x742))+((r11*x753))+((sj9*x752))+(((-1.0)*x741*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x759=IKPowWithIntegerCheck(cj9,-1);
if(!x759.valid){
continue;
}
CheckValue<IkReal> x760=IKPowWithIntegerCheck(r22,-1);
if(!x760.valid){
continue;
}
sj10array[0]=((-1.0)*(x759.value)*(x760.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
evalcond[1]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*sj9*(IKsin(j10))))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x761=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x761);
rxp1_0=(pz*r11);
rxp1_1=(r01*x761);
IkReal x762=(cj8*sj7);
IkReal x763=(cj10*r12);
IkReal x764=((4.0)*sj10);
IkReal x765=(cj9*r12);
IkReal x766=(r10*sj9);
IkReal x767=(cj7*sj8);
IkReal x768=(cj10*cj9);
IkReal x769=(r01*sj10);
IkReal x770=(cj9*r02);
IkReal x771=((12.0)*sj10);
IkReal x772=((4.0)*sj9);
IkReal x773=(r00*sj9);
IkReal x774=(r01*x772);
IkReal x775=(r11*x772);
IkReal x776=((16.0)*r11*sj10);
IkReal x777=((12.0)*cj10*r02);
IkReal x778=((8.0)*r11*sj10);
IkReal x779=((4.0)*cj10*r02);
IkReal x780=((4.0)*r00*x768);
IkReal x781=(x770*x771);
IkReal x782=((4.0)*r10*x768);
IkReal x783=(x765*x771);
IkReal x784=((12.0)*x763*x767);
IkReal x785=(r10*x764*x767);
IkReal x786=(r10*x762*x764);
IkReal x787=((12.0)*x762*x763);
IkReal x788=(r00*x764*x767);
IkReal x789=(r00*x762*x764);
IkReal x790=(x762*x777);
IkReal x791=(x767*x777);
IkReal x792=(x787+x784);
IkReal x793=(x775+x788+x789);
IkReal x794=(x791+x790+x783);
IkReal x795=(x780+x786+x785);
j11eval[0]=((((0.5)*(IKabs(((((-16.0)*x773))+(((-16.0)*r01*x768))+(((-1.0)*x767*x776))+(((-1.0)*x762*x776)))))))+(((0.5)*(IKabs(((((-1.0)*x794))+(((-1.0)*x782))+x793)))))+(((0.5)*(IKabs(((((-1.0)*x781))+x792+x795+(((-1.0)*x774)))))))+(IKabs(((((8.0)*x762*x769))+(((8.0)*x767*x769))+(((-8.0)*r11*x768))+(((-8.0)*x766)))))+(((0.5)*(IKabs(((((-1.0)*x795))+(((-1.0)*x781))+x774+x792)))))+(((0.5)*(IKabs(((((16.0)*x762*x769))+(((-16.0)*x766))+(((16.0)*x767*x769))+(((-16.0)*r11*x768)))))))+(((0.5)*(IKabs(((((4.0)*x762*x763))+(((4.0)*x763*x767))+(((-1.0)*x795))+(((-1.0)*x764*x770))+x774)))))+(IKabs(((((-1.0)*x767*x778))+(((-8.0)*x773))+(((-8.0)*r01*x768))+(((-1.0)*x762*x778)))))+(((0.5)*(IKabs(((((-1.0)*x794))+(((-1.0)*x793))+x782)))))+(((0.5)*(IKabs(((((-1.0)*x782))+(((-1.0)*x767*x779))+(((-1.0)*x764*x765))+x793+(((-1.0)*x762*x779))))))));
if( IKabs(j11eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j11evalpoly[1];
IkReal x796=((4.0)*r00);
IkReal x797=((8.0)*r01);
IkReal x798=((16.0)*r01);
IkReal x799=(r10*sj9);
IkReal x800=((4.0)*cj9);
IkReal x801=(r12*sj10);
IkReal x802=((4.0)*r11*sj9);
IkReal x803=(cj7*sj10*sj8);
IkReal x804=(cj8*sj10*sj7);
IkReal x805=(cj10*cj9*r11);
IkReal x806=(cj10*r10*x800);
IkReal x807=((12.0)*cj9*x801);
IkReal x808=(x800*x801);
IkReal x809=(cj10*cj8*r02*sj7);
IkReal x810=(cj10*cj7*r02*sj8);
IkReal x811=(x796*x803);
IkReal x812=(x796*x804);
IkReal x813=((12.0)*x809);
IkReal x814=((12.0)*x810);
IkReal x815=((4.0)*x809);
IkReal x816=((4.0)*x810);
IkReal x817=(x812+x811+x802);
IkReal x818=(x816+x815+x808);
IkReal x819=(x814+x813+x807);
IkReal x820=(((x797*x803))+((x797*x804))+(((-8.0)*x799))+(((-8.0)*x805)));
op[0]=((((-1.0)*x818))+x817+(((-1.0)*x806)));
op[1]=x820;
op[2]=((((-1.0)*x819))+x817+(((-1.0)*x806)));
op[3]=((((-16.0)*x805))+(((-16.0)*x799))+((x798*x803))+((x798*x804)));
op[4]=((((-1.0)*x819))+(((-1.0)*x817))+x806);
op[5]=x820;
op[6]=((((-1.0)*x818))+(((-1.0)*x817))+x806);
polyroots6(op,zeror,numroots);
IkReal j11array[6], cj11array[6], sj11array[6], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[6]={true,true,true,true,true,true};
_nj11 = 6;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

IkReal x821=(cj8*sj7);
IkReal x822=(cj10*r12);
IkReal x823=(cj7*sj8);
IkReal x824=(r00*sj9);
IkReal x825=((4.0)*r01*sj9);
IkReal x826=((16.0)*r11*sj10);
IkReal x827=(cj10*cj9*r01);
IkReal x828=(cj9*r02*sj10);
IkReal x829=((4.0)*r10*sj10);
IkReal x830=((8.0)*r11*sj10);
IkReal x831=((4.0)*cj10*cj9*r00);
IkReal x832=((12.0)*x828);
IkReal x833=((4.0)*x828);
IkReal x834=(x823*x829);
IkReal x835=(x821*x829);
IkReal x836=((4.0)*x822*x823);
IkReal x837=((4.0)*x821*x822);
IkReal x838=((12.0)*x822*x823);
IkReal x839=((12.0)*x821*x822);
IkReal x840=(x836+x837);
IkReal x841=(x838+x839);
IkReal x842=(x834+x835+x831);
IkReal x843=((((-1.0)*x821*x830))+(((-8.0)*x824))+(((-8.0)*x827))+(((-1.0)*x823*x830)));
j11evalpoly[0]=(((x843*(htj11*htj11*htj11*htj11*htj11)))+((htj11*x843))+(((htj11*htj11*htj11*htj11*htj11*htj11)*(((((-1.0)*x842))+(((-1.0)*x833))+x825+x840))))+(((-1.0)*x825))+(((-1.0)*x833))+(((htj11*htj11*htj11*htj11)*(((((-1.0)*x842))+(((-1.0)*x832))+x825+x841))))+x840+x842+(((htj11*htj11)*(((((-1.0)*x825))+(((-1.0)*x832))+x841+x842))))+(((htj11*htj11*htj11)*(((((-1.0)*x823*x826))+(((-16.0)*x824))+(((-16.0)*x827))+(((-1.0)*x821*x826)))))));
if( IKabs(j11evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x844=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x844))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x844))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x844))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x844))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x844))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x844))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x845=IKcos(j6);
IkReal x846=IKsin(j6);
IkReal x847=((1.0)*cj10);
IkReal x848=(cj11*r10);
IkReal x849=(r11*sj11);
IkReal x850=((1.0)*sj10);
IkReal x851=((1.0)*cj8);
IkReal x852=(cj9*sj10);
IkReal x853=(cj10*sj9);
IkReal x854=(cj10*cj9);
IkReal x855=(r01*sj11);
IkReal x856=(cj11*r00);
IkReal x857=((1.0)*sj8);
IkReal x858=((0.39225)*sj8);
IkReal x859=((0.09465)*cj11);
IkReal x860=(r00*sj11);
IkReal x861=(cj11*cj9);
IkReal x862=(r10*sj11);
IkReal x863=(cj11*sj9);
IkReal x864=((0.39225)*cj8*sj7);
IkReal x865=(cj7*x845);
IkReal x866=(sj7*x846);
IkReal x867=(cj7*x846);
IkReal x868=(sj7*x845);
evalcond[0]=((((-1.0)*x848*x850))+((sj10*x849))+(((-1.0)*r12*x847))+x845);
evalcond[1]=(((sj10*x855))+(((-1.0)*r02*x847))+(((-1.0)*x850*x856))+(((-1.0)*x846)));
evalcond[2]=((((-1.0)*r01*x859))+(((-0.09465)*x860))+((x845*x864))+(((-0.10915)*x846))+(((-1.0)*px))+((x858*x865))+(((0.425)*x868)));
evalcond[3]=((((-1.0)*r11*x859))+(((-0.09465)*x862))+(((-1.0)*py))+((x858*x867))+(((0.425)*x866))+(((0.10915)*x845))+((x846*x864)));
evalcond[4]=(((r01*x861))+((cj8*x865))+((cj9*x860))+((x853*x856))+(((-1.0)*sj9*x847*x855))+(((-1.0)*r02*sj9*x850))+(((-1.0)*x857*x868)));
evalcond[5]=(((sj9*x860))+((r01*x863))+(((-1.0)*cj9*x847*x856))+(((-1.0)*x851*x868))+((x854*x855))+((r02*x852))+(((-1.0)*x857*x865)));
evalcond[6]=(((x848*x853))+((r11*x861))+((cj8*x867))+(((-1.0)*sj9*x847*x849))+((cj9*x862))+(((-1.0)*r12*sj9*x850))+(((-1.0)*x857*x866)));
evalcond[7]=(((sj9*x862))+((r12*x852))+((r11*x863))+(((-1.0)*x851*x866))+(((-1.0)*cj9*x847*x848))+((x849*x854))+(((-1.0)*x857*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x869=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x869);
rxp1_0=(pz*r11);
rxp1_1=(r01*x869);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=cj9;
j10eval[1]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x870=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x870);
rxp1_0=(pz*r11);
rxp1_1=(r01*x870);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=r22;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x871=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x871);
rxp1_0=(pz*r11);
rxp1_1=(r01*x871);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=1.0;
j9=0;
j10eval[0]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(r22,-1);
if(!x872.valid){
continue;
}
sj10array[0]=((-1.0)*(x872.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x873=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x873);
rxp1_0=(pz*r11);
rxp1_1=(r01*x873);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=1.0;
j9=0;
j11eval[0]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(((-1.0)*cj10*r00)),IkReal((cj10*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
IkReal x874=x875.value;
j11array[0]=((-1.0)*x874);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x874)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(((cj10*r11*(IKsin(j11))))+(((-1.0)*cj10*r10*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x876=(cj11*sj10);
IkReal x877=(sj10*sj11);
if( IKabs((((r01*x877))+(((-1.0)*r00*x876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x876))+(((-1.0)*r11*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x877))+(((-1.0)*r00*x876))))+IKsqr((((r10*x876))+(((-1.0)*r11*x877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*x877))+(((-1.0)*r00*x876))), (((r10*x876))+(((-1.0)*r11*x877))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x878=IKcos(j6);
IkReal x879=IKsin(j6);
IkReal x880=(cj7*cj8);
IkReal x881=(sj10*sj11);
IkReal x882=(r10*sj11);
IkReal x883=(cj11*r01);
IkReal x884=(r00*sj11);
IkReal x885=((0.425)*sj7);
IkReal x886=(cj11*r11);
IkReal x887=((1.0)*cj11*sj10);
IkReal x888=((1.0)*sj7*sj8);
evalcond[0]=(((r11*x881))+(((-1.0)*r10*x887))+x878);
evalcond[1]=(((r01*x881))+(((-1.0)*x879))+(((-1.0)*r00*x887)));
evalcond[2]=(((x878*x880))+x884+x883+(((-1.0)*x878*x888)));
evalcond[3]=((((-1.0)*x879*x888))+((x879*x880))+x886+x882);
evalcond[4]=((((-0.09465)*x884))+(((-0.09465)*x883))+(((-1.0)*px))+((x878*x885))+(((-0.10915)*x879)));
evalcond[5]=(((x879*x885))+(((-0.09465)*x886))+(((-0.09465)*x882))+(((-1.0)*py))+(((0.10915)*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x889=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x889);
rxp1_0=(pz*r11);
rxp1_1=(r01*x889);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j10eval[0]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x890=IKPowWithIntegerCheck(r22,-1);
if(!x890.valid){
continue;
}
sj10array[0]=((x890.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x891=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x891);
rxp1_0=(pz*r11);
rxp1_1=(r01*x891);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j11eval[0]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x893 = IKatan2WithCheck(IkReal((cj10*r00)),IkReal(((-1.0)*cj10*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
IkReal x892=x893.value;
j11array[0]=((-1.0)*x892);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x892)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj10*r11*(IKsin(j11))))+((cj10*r10*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x894=(cj11*sj10);
IkReal x895=(sj10*sj11);
if( IKabs(((((-1.0)*r00*x894))+((r01*x895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x895))+((r10*x894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x894))+((r01*x895))))+IKsqr(((((-1.0)*r11*x895))+((r10*x894))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*r00*x894))+((r01*x895))), ((((-1.0)*r11*x895))+((r10*x894))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x896=IKcos(j6);
IkReal x897=IKsin(j6);
IkReal x898=(cj7*cj8);
IkReal x899=((1.0)*r10);
IkReal x900=(sj10*sj11);
IkReal x901=(cj11*sj10);
IkReal x902=((1.0)*r00);
IkReal x903=((0.09465)*cj11);
IkReal x904=((0.09465)*sj11);
IkReal x905=((0.425)*sj7);
IkReal x906=((1.0)*cj11);
IkReal x907=((1.0)*sj7*sj8);
evalcond[0]=(((r11*x900))+x896+(((-1.0)*x899*x901)));
evalcond[1]=(((r01*x900))+(((-1.0)*x897))+(((-1.0)*x901*x902)));
evalcond[2]=((((-1.0)*x896*x907))+((x896*x898))+(((-1.0)*r01*x906))+(((-1.0)*sj11*x902)));
evalcond[3]=((((-1.0)*x897*x907))+(((-1.0)*r11*x906))+((x897*x898))+(((-1.0)*sj11*x899)));
evalcond[4]=((((-1.0)*r00*x904))+(((-1.0)*px))+(((-1.0)*r01*x903))+(((-0.10915)*x897))+((x896*x905)));
evalcond[5]=(((x897*x905))+(((-1.0)*r11*x903))+(((-1.0)*py))+(((0.10915)*x896))+(((-1.0)*r10*x904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x908=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x908);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j10eval[0]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(r22,-1);
if(!x909.valid){
continue;
}
sj10array[0]=((x909.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x910=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x910);
rxp1_0=(pz*r11);
rxp1_1=(r01*x910);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j11eval[0]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal((cj10*r00)),IkReal(((-1.0)*cj10*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x911=x912.value;
j11array[0]=((-1.0)*x911);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x911)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj10*r11*(IKsin(j11))))+((cj10*r10*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x913=(cj11*sj10);
IkReal x914=(sj10*sj11);
if( IKabs((((r01*x914))+(((-1.0)*r00*x913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x914))+((r10*x913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x914))+(((-1.0)*r00*x913))))+IKsqr(((((-1.0)*r11*x914))+((r10*x913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*x914))+(((-1.0)*r00*x913))), ((((-1.0)*r11*x914))+((r10*x913))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x915=IKcos(j6);
IkReal x916=IKsin(j6);
IkReal x917=(sj10*sj11);
IkReal x918=(cj7*sj8);
IkReal x919=((0.425)*sj7);
IkReal x920=(r10*sj11);
IkReal x921=(cj11*r01);
IkReal x922=(r00*sj11);
IkReal x923=(cj11*r11);
IkReal x924=((0.39225)*cj8*sj7);
IkReal x925=((1.0)*cj8*sj7);
IkReal x926=((1.0)*cj11*sj10);
IkReal x927=((1.0)*x916);
evalcond[0]=((((-1.0)*r10*x926))+((r11*x917))+x915);
evalcond[1]=((((-1.0)*x927))+(((-1.0)*r00*x926))+((r01*x917)));
evalcond[2]=((((-1.0)*x915*x918))+(((-1.0)*x915*x925))+x922+x921);
evalcond[3]=((((-1.0)*x918*x927))+(((-1.0)*x916*x925))+x923+x920);
evalcond[4]=((((-0.09465)*x922))+(((-0.09465)*x921))+((x915*x924))+(((-0.10915)*x916))+(((-1.0)*px))+((x915*x919))+(((0.39225)*x915*x918)));
evalcond[5]=((((-0.09465)*x923))+(((-0.09465)*x920))+((x916*x924))+(((0.10915)*x915))+(((-1.0)*py))+((x916*x919))+(((0.39225)*x916*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x928=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x928);
rxp1_0=(pz*r11);
rxp1_1=(r01*x928);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j10eval[0]=r22;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x929=IKPowWithIntegerCheck(r22,-1);
if(!x929.valid){
continue;
}
sj10array[0]=((-1.0)*(x929.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j11eval[0]=cj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((-1.0)*cj10*r00)),IkReal((cj10*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
IkReal x931=x932.value;
j11array[0]=((-1.0)*x931);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x931)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(((cj10*r11*(IKsin(j11))))+(((-1.0)*cj10*r10*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x933=(cj11*sj10);
IkReal x934=(sj10*sj11);
if( IKabs((((r01*x934))+(((-1.0)*r00*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x933))+(((-1.0)*r11*x934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x934))+(((-1.0)*r00*x933))))+IKsqr((((r10*x933))+(((-1.0)*r11*x934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*x934))+(((-1.0)*r00*x933))), (((r10*x933))+(((-1.0)*r11*x934))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x935=IKcos(j6);
IkReal x936=IKsin(j6);
IkReal x937=((1.0)*r10);
IkReal x938=(sj10*sj11);
IkReal x939=(cj11*sj10);
IkReal x940=((1.0)*cj8);
IkReal x941=((1.0)*r00);
IkReal x942=(cj7*sj8);
IkReal x943=((0.09465)*cj11);
IkReal x944=((0.09465)*sj11);
IkReal x945=((1.0)*cj11);
IkReal x946=((0.39225)*cj8*sj7);
IkReal x947=(sj7*x936);
IkReal x948=(sj7*x935);
IkReal x949=((1.0)*x936);
evalcond[0]=(((r11*x938))+(((-1.0)*x937*x939))+x935);
evalcond[1]=((((-1.0)*x949))+(((-1.0)*x939*x941))+((r01*x938)));
evalcond[2]=((((-1.0)*r01*x945))+(((-1.0)*x935*x942))+(((-1.0)*sj11*x941))+(((-1.0)*x940*x948)));
evalcond[3]=((((-1.0)*r11*x945))+(((-1.0)*sj11*x937))+(((-1.0)*x942*x949))+(((-1.0)*x940*x947)));
evalcond[4]=((((0.39225)*x935*x942))+(((-1.0)*r01*x943))+(((0.425)*x948))+(((-1.0)*r00*x944))+(((-0.10915)*x936))+(((-1.0)*px))+((x935*x946)));
evalcond[5]=((((0.10915)*x935))+(((0.425)*x947))+(((-1.0)*r11*x943))+((x936*x946))+(((-1.0)*py))+(((-1.0)*r10*x944))+(((0.39225)*x936*x942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(r22,-1);
if(!x950.valid){
continue;
}
CheckValue<IkReal> x951=IKPowWithIntegerCheck(sj9,-1);
if(!x951.valid){
continue;
}
sj10array[0]=((x950.value)*(x951.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
evalcond[1]=((((-1.0)*cj7*cj8))+((cj9*r22*(IKsin(j10))))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x952=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x952);
rxp1_0=(pz*r11);
rxp1_1=(r01*x952);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x953=((0.3786)*r01);
IkReal x954=((12.0)*px);
IkReal x955=(cj10*r01);
IkReal x956=(cj8*r00);
IkReal x957=((3.138)*r11);
IkReal x958=(cj8*sj9);
IkReal x959=((4.0)*cj7);
IkReal x960=((1.569)*r10);
IkReal x961=((8.0)*sj7);
IkReal x962=((16.0)*sj7);
IkReal x963=(cj10*cj9);
IkReal x964=(cj9*r01);
IkReal x965=(r01*sj10);
IkReal x966=(sj10*sj7);
IkReal x967=((4.0)*sj7);
IkReal x968=(r00*sj8);
IkReal x969=(cj7*sj8);
IkReal x970=((16.0)*sj9);
IkReal x971=(cj9*sj8);
IkReal x972=((6.276)*r11);
IkReal x973=(cj10*sj9);
IkReal x974=(cj7*cj9);
IkReal x975=((0.4366)*r00*sj10);
IkReal x976=((8.0)*cj7*sj9);
IkReal x977=(cj8*x966);
IkReal x978=(cj8*x974);
IkReal x979=((1.7)*r10*x966);
IkReal x980=(sj7*sj9*x968);
IkReal x981=(sj10*x960*x969);
IkReal x982=(x960*x977);
IkReal x983=(((x956*x959*x963))+((r01*sj8*sj9*x967)));
IkReal x984=(x981+x982+x975+x979);
IkReal x985=(((x963*x967*x968))+((cj8*x964*x967))+((r01*x958*x959))+((sj8*x959*x964))+((x956*x967*x973))+((x959*x968*x973)));
j11eval[0]=((((0.5)*(IKabs(((((-1.0)*x984))+(((-4.0)*px))+x953)))))+(((0.5)*(IKabs(((((-6.8)*r11*x966))+(((-1.0)*x972*x977))+(((-1.5144)*r00))+(((-1.0)*sj10*x969*x972))+(((-1.7464)*x965)))))))+(((0.5)*(IKabs(((((-1.0)*x984))+(((-1.0)*x954))+x953)))))+(IKabs(((((-1.0)*x985))+x983)))+(((0.5)*(IKabs(((((16.0)*x968*x974))+((cj9*x956*x962))+((cj7*x956*x970))+(((16.0)*x955*x978))+(((-1.0)*x955*x969*x970))+(((-1.0)*x955*x958*x962))+(((-1.0)*sj9*x962*x968))+(((-1.0)*x955*x962*x971)))))))+(((0.5)*(IKabs(((((-1.0)*x983))+x985)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x954))+x984)))))+(IKabs(((((-1.0)*x957*x977))+(((-1.0)*sj10*x957*x969))+(((-0.8732)*x965))+(((-0.7572)*r00))+(((-3.4)*r11*x966)))))+(IKabs((((cj9*x956*x961))+(((8.0)*x968*x974))+(((-1.0)*sj9*x961*x968))+(((8.0)*x955*x978))+(((-1.0)*x955*x958*x961))+(((-1.0)*x955*x961*x971))+(((-8.0)*sj9*x955*x969))+((x956*x976))))));
if( IKabs(j11eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j6, j11]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j11evalpoly[1];
IkReal x986=((0.3786)*r01);
IkReal x987=((12.0)*px);
IkReal x988=((4.0)*px);
IkReal x989=((1.569)*r10);
IkReal x990=(sj10*sj7);
IkReal x991=(r01*sj10);
IkReal x992=((0.4366)*r00*sj10);
IkReal x993=(cj7*sj10*sj8);
IkReal x994=((1.7)*r10*x990);
IkReal x995=(cj8*r11*x990);
IkReal x996=(x989*x993);
IkReal x997=(cj8*x989*x990);
IkReal x998=(x992+x997+x996+x994);
IkReal x999=((((-0.8732)*x991))+(((-3.138)*r11*x993))+(((-3.138)*x995))+(((-3.4)*r11*x990))+(((-0.7572)*r00)));
op[0]=((((-1.0)*x988))+(((-1.0)*x998))+x986);
op[1]=x999;
op[2]=((((-1.0)*x987))+(((-1.0)*x998))+x986);
op[3]=((((-6.276)*r11*x993))+(((-1.7464)*x991))+(((-1.5144)*r00))+(((-6.276)*x995))+(((-6.8)*r11*x990)));
op[4]=((((-1.0)*x986))+(((-1.0)*x987))+x998);
op[5]=x999;
op[6]=((((-1.0)*x986))+(((-1.0)*x988))+x998);
polyroots6(op,zeror,numroots);
IkReal j11array[6], cj11array[6], sj11array[6], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[6]={true,true,true,true,true,true};
_nj11 = 6;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

j11evalpoly[0]=((((-4.0)*cj10*cj7*cj8*cj9*r00))+(((4.0)*cj7*cj8*r01*sj9))+(((4.0)*cj10*cj9*r00*sj7*sj8))+(((4.0)*cj10*cj8*r00*sj7*sj9))+(((htj11*htj11*htj11)*(((((16.0)*cj8*cj9*r00*sj7))+(((16.0)*cj7*cj9*r00*sj8))+(((-16.0)*cj10*cj9*r01*sj7*sj8))+(((16.0)*cj7*cj8*r00*sj9))+(((-16.0)*cj10*cj8*r01*sj7*sj9))+(((-16.0)*cj10*cj7*r01*sj8*sj9))+(((-16.0)*r00*sj7*sj8*sj9))+(((16.0)*cj10*cj7*cj8*cj9*r01))))))+(((4.0)*cj7*cj9*r01*sj8))+(((htj11*htj11)*(((((-4.0)*cj10*cj7*cj8*cj9*r00))+(((4.0)*cj7*cj8*r01*sj9))+(((4.0)*cj10*cj9*r00*sj7*sj8))+(((4.0)*cj10*cj8*r00*sj7*sj9))+(((4.0)*cj7*cj9*r01*sj8))+(((-4.0)*r01*sj7*sj8*sj9))+(((4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj8*cj9*r01*sj7))))))+(((htj11*htj11*htj11*htj11)*(((((4.0)*r01*sj7*sj8*sj9))+(((-4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj10*cj7*cj8*cj9*r00))+(((-4.0)*cj8*cj9*r01*sj7))+(((-4.0)*cj7*cj8*r01*sj9))+(((-4.0)*cj7*cj9*r01*sj8))+(((-4.0)*cj10*cj8*r00*sj7*sj9))+(((-4.0)*cj10*cj9*r00*sj7*sj8))))))+(((-4.0)*r01*sj7*sj8*sj9))+(((htj11*htj11*htj11*htj11*htj11)*(((((-8.0)*cj10*cj7*r01*sj8*sj9))+(((8.0)*cj7*cj8*r00*sj9))+(((8.0)*cj7*cj9*r00*sj8))+(((-8.0)*r00*sj7*sj8*sj9))+(((8.0)*cj8*cj9*r00*sj7))+(((-8.0)*cj10*cj9*r01*sj7*sj8))+(((8.0)*cj10*cj7*cj8*cj9*r01))+(((-8.0)*cj10*cj8*r01*sj7*sj9))))))+(((4.0)*cj10*cj7*r00*sj8*sj9))+((htj11*(((((-8.0)*cj10*cj7*r01*sj8*sj9))+(((8.0)*cj7*cj8*r00*sj9))+(((8.0)*cj7*cj9*r00*sj8))+(((-8.0)*r00*sj7*sj8*sj9))+(((8.0)*cj8*cj9*r00*sj7))+(((-8.0)*cj10*cj9*r01*sj7*sj8))+(((8.0)*cj10*cj7*cj8*cj9*r01))+(((-8.0)*cj10*cj8*r01*sj7*sj9))))))+(((htj11*htj11*htj11*htj11*htj11*htj11)*(((((4.0)*r01*sj7*sj8*sj9))+(((-4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj10*cj7*cj8*cj9*r00))+(((-4.0)*cj8*cj9*r01*sj7))+(((-4.0)*cj7*cj8*r01*sj9))+(((-4.0)*cj7*cj9*r01*sj8))+(((-4.0)*cj10*cj8*r00*sj7*sj9))+(((-4.0)*cj10*cj9*r00*sj7*sj8))))))+(((4.0)*cj8*cj9*r01*sj7)));
if( IKabs(j11evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1000=(cj11*sj10);
IkReal x1001=(sj10*sj11);
if( IKabs((((r01*x1001))+(((-1.0)*r00*x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1001))+((r10*x1000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1001))+(((-1.0)*r00*x1000))))+IKsqr(((((-1.0)*r11*x1001))+((r10*x1000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*x1001))+(((-1.0)*r00*x1000))), ((((-1.0)*r11*x1001))+((r10*x1000))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1002=IKcos(j6);
IkReal x1003=IKsin(j6);
IkReal x1004=(cj10*cj9);
IkReal x1005=(r11*sj11);
IkReal x1006=(r01*sj11);
IkReal x1007=((1.0)*sj8);
IkReal x1008=((0.39225)*sj8);
IkReal x1009=((0.09465)*cj11);
IkReal x1010=(r00*sj11);
IkReal x1011=(r10*sj11);
IkReal x1012=(cj11*r11);
IkReal x1013=(cj11*r01);
IkReal x1014=((0.39225)*cj8*sj7);
IkReal x1015=(cj7*x1002);
IkReal x1016=((1.0)*cj11*r10);
IkReal x1017=(cj10*cj11*sj9);
IkReal x1018=((1.0)*cj11*r00);
IkReal x1019=(cj7*x1003);
IkReal x1020=(sj7*x1002);
IkReal x1021=((1.0)*cj10*sj9);
IkReal x1022=((1.0)*sj7*x1003);
evalcond[0]=(x1002+(((-1.0)*sj10*x1016))+((sj10*x1005)));
evalcond[1]=((((-1.0)*x1003))+(((-1.0)*sj10*x1018))+((sj10*x1006)));
evalcond[2]=(((cj9*x1010))+((cj9*x1013))+(((-1.0)*x1007*x1020))+((r00*x1017))+((cj8*x1015))+(((-1.0)*x1006*x1021)));
evalcond[3]=((((-1.0)*x1005*x1021))+(((-1.0)*sj7*x1003*x1007))+((cj9*x1011))+((cj9*x1012))+((r10*x1017))+((cj8*x1019)));
evalcond[4]=((((-1.0)*x1004*x1018))+((x1004*x1006))+((sj9*x1010))+((sj9*x1013))+(((-1.0)*x1007*x1015))+(((-1.0)*cj8*x1020)));
evalcond[5]=((((-1.0)*x1004*x1016))+((x1004*x1005))+(((-1.0)*cj8*x1022))+((sj9*x1011))+((sj9*x1012))+(((-1.0)*x1007*x1019)));
evalcond[6]=((((-0.10915)*x1003))+(((-1.0)*px))+(((0.425)*x1020))+(((-0.09465)*x1010))+((x1002*x1014))+((x1008*x1015))+(((-1.0)*r01*x1009)));
evalcond[7]=((((0.10915)*x1002))+((x1003*x1014))+(((-1.0)*py))+(((-1.0)*r11*x1009))+(((0.425)*sj7*x1003))+(((-0.09465)*x1011))+((x1008*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(cj9,-1);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(r22,-1);
if(!x1024.valid){
continue;
}
sj10array[0]=((-1.0)*(x1023.value)*(x1024.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j10)));
evalcond[1]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*sj9*(IKsin(j10))))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[1];
IkReal x1025=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1025);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1025);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1026=((0.3786)*r01);
IkReal x1027=((12.0)*px);
IkReal x1028=(cj10*r01);
IkReal x1029=(cj8*r00);
IkReal x1030=((3.138)*r11);
IkReal x1031=(cj8*sj9);
IkReal x1032=((4.0)*cj7);
IkReal x1033=((1.569)*r10);
IkReal x1034=((8.0)*sj7);
IkReal x1035=((16.0)*sj7);
IkReal x1036=(cj10*cj9);
IkReal x1037=(cj9*r01);
IkReal x1038=(r01*sj10);
IkReal x1039=(sj10*sj7);
IkReal x1040=((4.0)*sj7);
IkReal x1041=(r00*sj8);
IkReal x1042=(cj7*sj8);
IkReal x1043=((16.0)*sj9);
IkReal x1044=(cj9*sj8);
IkReal x1045=((6.276)*r11);
IkReal x1046=(cj10*sj9);
IkReal x1047=(cj7*cj9);
IkReal x1048=((0.4366)*r00*sj10);
IkReal x1049=((8.0)*cj7*sj9);
IkReal x1050=(cj8*x1039);
IkReal x1051=(cj8*x1047);
IkReal x1052=((1.7)*r10*x1039);
IkReal x1053=(sj7*sj9*x1041);
IkReal x1054=(sj10*x1033*x1042);
IkReal x1055=(x1033*x1050);
IkReal x1056=(((x1029*x1032*x1036))+((r01*sj8*sj9*x1040)));
IkReal x1057=(x1052+x1054+x1055+x1048);
IkReal x1058=(((x1036*x1040*x1041))+((cj8*x1037*x1040))+((r01*x1031*x1032))+((x1032*x1041*x1046))+((sj8*x1032*x1037))+((x1029*x1040*x1046)));
j11eval[0]=((((0.5)*(IKabs((x1057+(((-1.0)*x1027))+(((-1.0)*x1026)))))))+(IKabs(((((8.0)*x1028*x1051))+(((8.0)*x1041*x1047))+((cj9*x1029*x1034))+(((-1.0)*x1028*x1034*x1044))+(((-1.0)*sj9*x1034*x1041))+(((-8.0)*sj9*x1028*x1042))+((x1029*x1049))+(((-1.0)*x1028*x1031*x1034)))))+(((0.5)*(IKabs(((((-1.0)*x1045*x1050))+(((-6.8)*r11*x1039))+(((-1.0)*sj10*x1042*x1045))+(((-1.5144)*r00))+(((-1.7464)*x1038)))))))+(((0.5)*(IKabs(((((-1.0)*x1056))+x1058)))))+(((0.5)*(IKabs(((((16.0)*x1028*x1051))+((cj9*x1029*x1035))+((cj7*x1029*x1043))+(((-1.0)*sj9*x1035*x1041))+(((-1.0)*x1028*x1042*x1043))+(((16.0)*x1041*x1047))+(((-1.0)*x1028*x1031*x1035))+(((-1.0)*x1028*x1035*x1044)))))))+(IKabs(((((-1.0)*x1058))+x1056)))+(((0.5)*(IKabs(((((-1.0)*x1057))+x1026+(((-1.0)*x1027)))))))+(IKabs(((((-0.8732)*x1038))+(((-0.7572)*r00))+(((-1.0)*sj10*x1030*x1042))+(((-3.4)*r11*x1039))+(((-1.0)*x1030*x1050)))))+(((0.5)*(IKabs(((((-1.0)*x1057))+x1026+(((-4.0)*px))))))));
if( IKabs(j11eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j6, j11]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j11evalpoly[1];
IkReal x1059=((0.3786)*r01);
IkReal x1060=((12.0)*px);
IkReal x1061=((4.0)*px);
IkReal x1062=((1.569)*r10);
IkReal x1063=(sj10*sj7);
IkReal x1064=(r01*sj10);
IkReal x1065=((0.4366)*r00*sj10);
IkReal x1066=(cj7*sj10*sj8);
IkReal x1067=((1.7)*r10*x1063);
IkReal x1068=(cj8*r11*x1063);
IkReal x1069=(x1062*x1066);
IkReal x1070=(cj8*x1062*x1063);
IkReal x1071=(x1070+x1069+x1065+x1067);
IkReal x1072=((((-3.138)*x1068))+(((-3.4)*r11*x1063))+(((-3.138)*r11*x1066))+(((-0.8732)*x1064))+(((-0.7572)*r00)));
op[0]=(x1059+(((-1.0)*x1061))+(((-1.0)*x1071)));
op[1]=x1072;
op[2]=(x1059+(((-1.0)*x1060))+(((-1.0)*x1071)));
op[3]=((((-6.276)*r11*x1066))+(((-6.8)*r11*x1063))+(((-1.7464)*x1064))+(((-1.5144)*r00))+(((-6.276)*x1068)));
op[4]=((((-1.0)*x1059))+x1071+(((-1.0)*x1060)));
op[5]=x1072;
op[6]=((((-1.0)*x1059))+x1071+(((-1.0)*x1061)));
polyroots6(op,zeror,numroots);
IkReal j11array[6], cj11array[6], sj11array[6], tempj11array[1];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ++ij11)
{
IkReal htj11 = zeror[ij11];
tempj11array[0]=((2.0)*(atan(htj11)));
for(int kj11 = 0; kj11 < 1; ++kj11)
{
j11array[numsolutions] = tempj11array[kj11];
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
numsolutions++;
}
}
bool j11valid[6]={true,true,true,true,true,true};
_nj11 = 6;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
htj11 = IKtan(j11/2);

j11evalpoly[0]=((((-4.0)*cj10*cj7*cj8*cj9*r00))+(((4.0)*cj7*cj8*r01*sj9))+(((4.0)*cj10*cj9*r00*sj7*sj8))+(((4.0)*cj10*cj8*r00*sj7*sj9))+(((htj11*htj11*htj11)*(((((16.0)*cj8*cj9*r00*sj7))+(((16.0)*cj7*cj9*r00*sj8))+(((-16.0)*cj10*cj9*r01*sj7*sj8))+(((16.0)*cj7*cj8*r00*sj9))+(((-16.0)*cj10*cj8*r01*sj7*sj9))+(((-16.0)*cj10*cj7*r01*sj8*sj9))+(((-16.0)*r00*sj7*sj8*sj9))+(((16.0)*cj10*cj7*cj8*cj9*r01))))))+(((4.0)*cj7*cj9*r01*sj8))+(((htj11*htj11)*(((((-4.0)*cj10*cj7*cj8*cj9*r00))+(((4.0)*cj7*cj8*r01*sj9))+(((4.0)*cj10*cj9*r00*sj7*sj8))+(((4.0)*cj10*cj8*r00*sj7*sj9))+(((4.0)*cj7*cj9*r01*sj8))+(((-4.0)*r01*sj7*sj8*sj9))+(((4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj8*cj9*r01*sj7))))))+(((htj11*htj11*htj11*htj11)*(((((4.0)*r01*sj7*sj8*sj9))+(((-4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj10*cj7*cj8*cj9*r00))+(((-4.0)*cj8*cj9*r01*sj7))+(((-4.0)*cj7*cj8*r01*sj9))+(((-4.0)*cj7*cj9*r01*sj8))+(((-4.0)*cj10*cj8*r00*sj7*sj9))+(((-4.0)*cj10*cj9*r00*sj7*sj8))))))+(((-4.0)*r01*sj7*sj8*sj9))+(((htj11*htj11*htj11*htj11*htj11)*(((((-8.0)*cj10*cj7*r01*sj8*sj9))+(((8.0)*cj7*cj8*r00*sj9))+(((8.0)*cj7*cj9*r00*sj8))+(((-8.0)*r00*sj7*sj8*sj9))+(((8.0)*cj8*cj9*r00*sj7))+(((-8.0)*cj10*cj9*r01*sj7*sj8))+(((8.0)*cj10*cj7*cj8*cj9*r01))+(((-8.0)*cj10*cj8*r01*sj7*sj9))))))+(((4.0)*cj10*cj7*r00*sj8*sj9))+((htj11*(((((-8.0)*cj10*cj7*r01*sj8*sj9))+(((8.0)*cj7*cj8*r00*sj9))+(((8.0)*cj7*cj9*r00*sj8))+(((-8.0)*r00*sj7*sj8*sj9))+(((8.0)*cj8*cj9*r00*sj7))+(((-8.0)*cj10*cj9*r01*sj7*sj8))+(((8.0)*cj10*cj7*cj8*cj9*r01))+(((-8.0)*cj10*cj8*r01*sj7*sj9))))))+(((htj11*htj11*htj11*htj11*htj11*htj11)*(((((4.0)*r01*sj7*sj8*sj9))+(((-4.0)*cj10*cj7*r00*sj8*sj9))+(((4.0)*cj10*cj7*cj8*cj9*r00))+(((-4.0)*cj8*cj9*r01*sj7))+(((-4.0)*cj7*cj8*r01*sj9))+(((-4.0)*cj7*cj9*r01*sj8))+(((-4.0)*cj10*cj8*r00*sj7*sj9))+(((-4.0)*cj10*cj9*r00*sj7*sj8))))))+(((4.0)*cj8*cj9*r01*sj7)));
if( IKabs(j11evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1073=(cj11*sj10);
IkReal x1074=(sj10*sj11);
if( IKabs(((((-1.0)*r00*x1073))+((r01*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1074))+((r10*x1073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1073))+((r01*x1074))))+IKsqr(((((-1.0)*r11*x1074))+((r10*x1073))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*r00*x1073))+((r01*x1074))), ((((-1.0)*r11*x1074))+((r10*x1073))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1075=IKcos(j6);
IkReal x1076=IKsin(j6);
IkReal x1077=(cj10*cj9);
IkReal x1078=(r11*sj11);
IkReal x1079=(r01*sj11);
IkReal x1080=((1.0)*sj8);
IkReal x1081=((0.39225)*sj8);
IkReal x1082=((0.09465)*cj11);
IkReal x1083=(r00*sj11);
IkReal x1084=(r10*sj11);
IkReal x1085=(cj11*r11);
IkReal x1086=(cj11*r01);
IkReal x1087=((0.39225)*cj8*sj7);
IkReal x1088=(cj7*x1075);
IkReal x1089=((1.0)*cj11*r10);
IkReal x1090=(cj10*cj11*sj9);
IkReal x1091=((1.0)*cj11*r00);
IkReal x1092=(cj7*x1076);
IkReal x1093=(sj7*x1075);
IkReal x1094=((1.0)*cj10*sj9);
IkReal x1095=((1.0)*sj7*x1076);
evalcond[0]=(x1075+(((-1.0)*sj10*x1089))+((sj10*x1078)));
evalcond[1]=((((-1.0)*sj10*x1091))+((sj10*x1079))+(((-1.0)*x1076)));
evalcond[2]=((((-1.0)*x1079*x1094))+((r00*x1090))+(((-1.0)*x1080*x1093))+((cj9*x1083))+((cj9*x1086))+((cj8*x1088)));
evalcond[3]=(((cj8*x1092))+((r10*x1090))+((cj9*x1084))+((cj9*x1085))+(((-1.0)*sj7*x1076*x1080))+(((-1.0)*x1078*x1094)));
evalcond[4]=(((x1077*x1079))+((sj9*x1083))+((sj9*x1086))+(((-1.0)*x1080*x1088))+(((-1.0)*cj8*x1093))+(((-1.0)*x1077*x1091)));
evalcond[5]=(((x1077*x1078))+(((-1.0)*x1080*x1092))+((sj9*x1084))+((sj9*x1085))+(((-1.0)*cj8*x1095))+(((-1.0)*x1077*x1089)));
evalcond[6]=((((-0.09465)*x1083))+((x1081*x1088))+(((0.425)*x1093))+((x1075*x1087))+(((-0.10915)*x1076))+(((-1.0)*px))+(((-1.0)*r01*x1082)));
evalcond[7]=((((-1.0)*r11*x1082))+(((-0.09465)*x1084))+((x1076*x1087))+(((-1.0)*py))+((x1081*x1092))+(((0.10915)*x1075))+(((0.425)*sj7*x1076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
IkReal x1096=((1.0)*(x1098.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1099.valid){
continue;
}
if( (((x1099.value)*(((((-0.39225)*sj7*sj8))+(((0.425)*cj7))+(((0.39225)*cj7*cj8))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1099.value)*(((((-0.39225)*sj7*sj8))+(((0.425)*cj7))+(((0.39225)*cj7*cj8))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1097=IKasin(((x1099.value)*(((((-0.39225)*sj7*sj8))+(((0.425)*cj7))+(((0.39225)*cj7*cj8))+(((-1.0)*pz))))));
j11array[0]=((((-1.0)*x1096))+(((-1.0)*x1097)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x1097+(((-1.0)*x1096)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j10eval[2];
IkReal x1100=cj11*cj11;
IkReal x1101=r21*r21;
IkReal x1102=(sj9*x1101);
IkReal x1103=(x1102+((sj9*x1100*(r20*r20)))+(((-1.0)*x1100*x1102))+(((-2.0)*cj11*r20*r21*sj11*sj9))+((sj9*(r22*r22))));
j10eval[0]=x1103;
j10eval[1]=IKsign(x1103);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1104=r21*r21;
IkReal x1105=cj11*cj11;
IkReal x1106=((1.0)*cj9);
IkReal x1107=(cj9*x1105);
IkReal x1108=((((2.0)*cj11*cj9*r20*r21*sj11))+(((-1.0)*x1105*x1106*(r20*r20)))+((x1104*x1107))+(((-1.0)*x1106*(r22*r22)))+(((-1.0)*x1104*x1106)));
j10eval[0]=x1108;
j10eval[1]=IKsign(x1108);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1109=cj7*cj7;
IkReal x1110=cj8*cj8;
IkReal x1111=((133365000.0)*cj8);
IkReal x1112=((12.4570625281677)*cj8);
IkReal x1113=(cj7*sj7*sj8);
IkReal x1114=(x1109*x1110);
j6eval[0]=((7.19369221392727)+(((11.4971359451148)*cj8*x1113))+x1112+(((5.74856797255738)*x1110))+(((-1.0)*x1109*x1112))+(((-11.4971359451148)*x1114))+(((-1.0)*x1109))+(((12.4570625281677)*x1113)));
j6eval[1]=IKsign(((77015489.0)+x1111+(((-1.0)*x1109*x1111))+(((133365000.0)*x1113))+(((-10705975.0)*x1109))+(((-123088050.0)*x1114))+(((123088050.0)*cj8*x1113))+(((61544025.0)*x1110))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1115=((1.0)*sj11);
IkReal x1116=((1.0)*cj11);
IkReal x1117=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)));
j6eval[0]=x1117;
j6eval[1]=IKsign(x1117);
j6eval[2]=((IKabs(((((-1.0)*r01*x1116))+(((-1.0)*r00*x1115)))))+(IKabs(((((-1.0)*r11*x1116))+(((-1.0)*r10*x1115))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1118=cj11*cj11;
IkReal x1119=r21*r21;
IkReal x1120=(r21*sj11);
IkReal x1121=(cj8*sj7);
IkReal x1122=(cj11*r20);
IkReal x1123=((1.0)*cj7*sj8);
IkReal x1124=(x1119+(((-2.0)*x1120*x1122))+((x1118*(r20*r20)))+(r22*r22)+(((-1.0)*x1118*x1119)));
j10eval[0]=x1124;
j10eval[1]=((IKabs((((cj7*sj8*x1122))+((x1121*x1122))+(((-1.0)*x1120*x1121))+(((-1.0)*x1120*x1123)))))+(IKabs(((((-1.0)*r22*x1123))+(((-1.0)*r22*x1121))))));
j10eval[2]=IKsign(x1124);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j6eval[0]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1125=((1.0)*cj11);
IkReal x1126=((((-1.0)*r00*sj11))+(((-1.0)*r01*x1125)));
j10eval[0]=x1126;
j10eval[1]=IKsign(x1126);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1125))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1127=cj11*cj11;
IkReal x1128=((1.0)*r21);
IkReal x1129=((1.0)*cj11*r20);
IkReal x1130=((((-1.0)*cj11*r00*sj11*x1128))+(((-1.0)*r01*sj11*x1129))+((r01*r21))+(((-1.0)*r01*x1127*x1128))+((r02*r22))+((r00*r20*x1127)));
j10eval[0]=x1130;
j10eval[1]=((IKabs(((((-1.0)*cj6*x1129))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x1130);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1131=cj11*cj11;
IkReal x1132=((1.0)*r21);
IkReal x1133=(cj11*sj11);
IkReal x1134=((1.0)*r20);
IkReal x1135=(((r11*r21))+(((-1.0)*r11*x1131*x1132))+(((-1.0)*r11*x1133*x1134))+((r12*r22))+((r10*r20*x1131))+(((-1.0)*r10*x1132*x1133)));
j10eval[0]=x1135;
j10eval[1]=IKsign(x1135);
j10eval[2]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x1134)))))+(IKabs((r22*sj6))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1136=cj11*cj11;
IkReal x1137=((1.0)*r21);
IkReal x1138=(cj11*sj11);
IkReal x1139=((1.0)*r20);
CheckValue<IkReal> x1140 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x1139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1140.valid){
continue;
}
CheckValue<IkReal> x1141=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r11*x1138*x1139))+(((-1.0)*r10*x1137*x1138))+((r12*r22))+((r10*r20*x1136))+(((-1.0)*r11*x1136*x1137)))),-1);
if(!x1141.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1140.value)+(((1.5707963267949)*(x1141.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1142=IKsin(j10);
IkReal x1143=IKcos(j10);
IkReal x1144=(r11*sj11);
IkReal x1145=(r21*sj11);
IkReal x1146=(r01*sj11);
IkReal x1147=((1.0)*x1143);
IkReal x1148=(cj11*x1143);
IkReal x1149=((1.0)*x1142);
evalcond[0]=(((x1142*x1145))+(((-1.0)*r22*x1147))+(((-1.0)*cj11*r20*x1149)));
evalcond[1]=((((-1.0)*x1145*x1147))+((r20*x1148))+(((-1.0)*r22*x1149)));
evalcond[2]=(cj6+((x1142*x1144))+(((-1.0)*cj11*r10*x1149))+(((-1.0)*r12*x1147)));
evalcond[3]=(cj6+(((-1.0)*x1146*x1147))+(((-1.0)*r02*x1149))+((r00*x1148)));
evalcond[4]=(sj6+(((-1.0)*x1144*x1147))+(((-1.0)*r12*x1149))+((r10*x1148)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x1149))+((x1142*x1146))+(((-1.0)*r02*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1150=cj11*cj11;
IkReal x1151=((1.0)*r21);
IkReal x1152=((1.0)*cj11*r20);
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r00*sj11*x1151))+((r01*r21))+(((-1.0)*r01*sj11*x1152))+((r00*r20*x1150))+((r02*r22))+(((-1.0)*r01*x1150*x1151)))),-1);
if(!x1153.valid){
continue;
}
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x1152))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1153.value)))+(x1154.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1155=IKsin(j10);
IkReal x1156=IKcos(j10);
IkReal x1157=(r11*sj11);
IkReal x1158=(r21*sj11);
IkReal x1159=(r01*sj11);
IkReal x1160=((1.0)*x1156);
IkReal x1161=(cj11*x1156);
IkReal x1162=((1.0)*x1155);
evalcond[0]=((((-1.0)*r22*x1160))+(((-1.0)*cj11*r20*x1162))+((x1155*x1158)));
evalcond[1]=(((r20*x1161))+(((-1.0)*x1158*x1160))+(((-1.0)*r22*x1162)));
evalcond[2]=(cj6+(((-1.0)*r12*x1160))+(((-1.0)*cj11*r10*x1162))+((x1155*x1157)));
evalcond[3]=((((-1.0)*r02*x1162))+(((-1.0)*x1159*x1160))+cj6+((r00*x1161)));
evalcond[4]=(sj6+((r10*x1161))+(((-1.0)*r12*x1162))+(((-1.0)*x1157*x1160)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x1160))+(((-1.0)*cj11*r00*x1162))+((x1155*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1163=((1.0)*cj11);
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1163))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x1163)))),-1);
if(!x1165.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1164.value)+(((1.5707963267949)*(x1165.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1166=IKsin(j10);
IkReal x1167=IKcos(j10);
IkReal x1168=(r11*sj11);
IkReal x1169=(r21*sj11);
IkReal x1170=(r01*sj11);
IkReal x1171=((1.0)*x1167);
IkReal x1172=(cj11*x1167);
IkReal x1173=((1.0)*x1166);
evalcond[0]=(((x1166*x1169))+(((-1.0)*r22*x1171))+(((-1.0)*cj11*r20*x1173)));
evalcond[1]=(((r20*x1172))+(((-1.0)*r22*x1173))+(((-1.0)*x1169*x1171)));
evalcond[2]=(cj6+((x1166*x1168))+(((-1.0)*r12*x1171))+(((-1.0)*cj11*r10*x1173)));
evalcond[3]=((((-1.0)*r02*x1173))+cj6+((r00*x1172))+(((-1.0)*x1170*x1171)));
evalcond[4]=(sj6+(((-1.0)*x1168*x1171))+((r10*x1172))+(((-1.0)*r12*x1173)));
evalcond[5]=((((-1.0)*r02*x1171))+(((-1.0)*sj6))+((x1166*x1170))+(((-1.0)*cj11*r00*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1174=((1.0)*cj11);
IkReal x1175=((((-1.0)*r00*sj11))+(((-1.0)*r01*x1174)));
j10eval[0]=x1175;
j10eval[1]=IKsign(x1175);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1174))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1176=((1.0)*cj11);
IkReal x1177=((((-1.0)*r11*x1176))+(((-1.0)*r10*sj11)));
j10eval[0]=x1177;
j10eval[1]=((IKabs(((((-1.0)*r20*sj6*x1176))+((r21*sj11*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x1177);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1178=cj11*cj11;
IkReal x1179=((1.0)*r21);
IkReal x1180=(cj11*sj11);
IkReal x1181=((((-1.0)*r11*r20*x1180))+((r10*r20*x1178))+((r11*r21))+((r12*r22))+(((-1.0)*r11*x1178*x1179))+(((-1.0)*r10*x1179*x1180)));
j10eval[0]=x1181;
j10eval[1]=IKsign(x1181);
j10eval[2]=((IKabs((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x1179)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1182=cj11*cj11;
IkReal x1183=((1.0)*r21);
IkReal x1184=(cj11*sj11);
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x1183)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1183*x1184))+(((-1.0)*r11*r20*x1184))+((r11*r21))+(((-1.0)*r11*x1182*x1183))+((r12*r22))+((r10*r20*x1182)))),-1);
if(!x1186.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1185.value)+(((1.5707963267949)*(x1186.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1187=IKsin(j10);
IkReal x1188=IKcos(j10);
IkReal x1189=((1.0)*sj6);
IkReal x1190=(r11*sj11);
IkReal x1191=(r01*sj11);
IkReal x1192=(r21*sj11);
IkReal x1193=((1.0)*x1188);
IkReal x1194=(cj11*x1188);
IkReal x1195=((1.0)*x1187);
evalcond[0]=(((x1187*x1192))+(((-1.0)*r22*x1193))+(((-1.0)*cj11*r20*x1195)));
evalcond[1]=((((-1.0)*r22*x1195))+((r20*x1194))+(((-1.0)*x1192*x1193)));
evalcond[2]=(((x1187*x1190))+cj6+(((-1.0)*cj11*r10*x1195))+(((-1.0)*r12*x1193)));
evalcond[3]=(((x1187*x1191))+(((-1.0)*cj11*r00*x1195))+(((-1.0)*x1189))+(((-1.0)*r02*x1193)));
evalcond[4]=((((-1.0)*x1191*x1193))+((r00*x1194))+(((-1.0)*r02*x1195))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1190*x1193))+((r10*x1194))+(((-1.0)*x1189))+(((-1.0)*r12*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1196=((1.0)*cj11);
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x1196)))),-1);
if(!x1197.valid){
continue;
}
CheckValue<IkReal> x1198 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x1196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1198.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1197.value)))+(x1198.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1199=IKsin(j10);
IkReal x1200=IKcos(j10);
IkReal x1201=((1.0)*sj6);
IkReal x1202=(r11*sj11);
IkReal x1203=(r01*sj11);
IkReal x1204=(r21*sj11);
IkReal x1205=((1.0)*x1200);
IkReal x1206=(cj11*x1200);
IkReal x1207=((1.0)*x1199);
evalcond[0]=((((-1.0)*r22*x1205))+(((-1.0)*cj11*r20*x1207))+((x1199*x1204)));
evalcond[1]=((((-1.0)*x1204*x1205))+(((-1.0)*r22*x1207))+((r20*x1206)));
evalcond[2]=(cj6+((x1199*x1202))+(((-1.0)*cj11*r10*x1207))+(((-1.0)*r12*x1205)));
evalcond[3]=((((-1.0)*cj11*r00*x1207))+(((-1.0)*r02*x1205))+((x1199*x1203))+(((-1.0)*x1201)));
evalcond[4]=((((-1.0)*r02*x1207))+(((-1.0)*x1203*x1205))+((r00*x1206))+(((-1.0)*cj6)));
evalcond[5]=(((r10*x1206))+(((-1.0)*x1202*x1205))+(((-1.0)*x1201))+(((-1.0)*r12*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1208=((1.0)*cj11);
CheckValue<IkReal> x1209 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1208))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1209.valid){
continue;
}
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1208))+(((-1.0)*r00*sj11)))),-1);
if(!x1210.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1209.value)+(((1.5707963267949)*(x1210.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1211=IKsin(j10);
IkReal x1212=IKcos(j10);
IkReal x1213=((1.0)*sj6);
IkReal x1214=(r11*sj11);
IkReal x1215=(r01*sj11);
IkReal x1216=(r21*sj11);
IkReal x1217=((1.0)*x1212);
IkReal x1218=(cj11*x1212);
IkReal x1219=((1.0)*x1211);
evalcond[0]=((((-1.0)*r22*x1217))+(((-1.0)*cj11*r20*x1219))+((x1211*x1216)));
evalcond[1]=((((-1.0)*r22*x1219))+(((-1.0)*x1216*x1217))+((r20*x1218)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x1219))+(((-1.0)*r12*x1217))+((x1211*x1214)));
evalcond[3]=((((-1.0)*r02*x1217))+(((-1.0)*cj11*r00*x1219))+((x1211*x1215))+(((-1.0)*x1213)));
evalcond[4]=((((-1.0)*x1215*x1217))+(((-1.0)*r02*x1219))+((r00*x1218))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1214*x1217))+((r10*x1218))+(((-1.0)*r12*x1219))+(((-1.0)*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x1220=IKcos(j6);
IkReal x1221=IKsin(j6);
evalcond[0]=((((-1.0)*px))+(((0.425)*x1220))+(((-0.10915)*x1221)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1221))+(((0.10915)*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1222=((1.0)*cj11);
IkReal x1223=((((-1.0)*r01*x1222))+(((-1.0)*r00*sj11)));
j10eval[0]=x1223;
j10eval[1]=IKsign(x1223);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x1222)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1224=((1.0)*cj11);
IkReal x1225=((((-1.0)*r11*x1224))+(((-1.0)*r10*sj11)));
j10eval[0]=x1225;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x1224))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x1225);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1226=cj11*cj11;
IkReal x1227=((1.0)*r21);
IkReal x1228=(cj11*sj11);
IkReal x1229=(((r11*r21))+((r12*r22))+(((-1.0)*r11*r20*x1228))+(((-1.0)*r11*x1226*x1227))+(((-1.0)*r10*x1227*x1228))+((r10*r20*x1226)));
j10eval[0]=x1229;
j10eval[1]=IKsign(x1229);
j10eval[2]=((IKabs(((((-1.0)*cj6*sj11*x1227))+((cj11*cj6*r20)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1230=cj11*cj11;
IkReal x1231=((1.0)*r21);
IkReal x1232=(cj11*sj11);
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1231*x1232))+((r10*r20*x1230))+(((-1.0)*r11*x1230*x1231))+((r11*r21))+(((-1.0)*r11*r20*x1232))+((r12*r22)))),-1);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj11*x1231))+((cj11*cj6*r20)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1233.value)))+(x1234.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1235=IKsin(j10);
IkReal x1236=IKcos(j10);
IkReal x1237=((1.0)*sj6);
IkReal x1238=(r11*sj11);
IkReal x1239=(r01*sj11);
IkReal x1240=(r21*sj11);
IkReal x1241=((1.0)*x1236);
IkReal x1242=(cj11*x1236);
IkReal x1243=((1.0)*x1235);
evalcond[0]=((((-1.0)*r22*x1241))+(((-1.0)*cj11*r20*x1243))+((x1235*x1240)));
evalcond[1]=(((r20*x1242))+(((-1.0)*r22*x1243))+(((-1.0)*x1240*x1241)));
evalcond[2]=((((-1.0)*cj11*r10*x1243))+cj6+((x1235*x1238))+(((-1.0)*r12*x1241)));
evalcond[3]=((((-1.0)*r02*x1241))+((x1235*x1239))+(((-1.0)*x1237))+(((-1.0)*cj11*r00*x1243)));
evalcond[4]=((((-1.0)*r02*x1243))+(((-1.0)*x1239*x1241))+((r00*x1242))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1237))+(((-1.0)*r12*x1243))+(((-1.0)*x1238*x1241))+((r10*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1244=((1.0)*cj11);
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1244))+(((-1.0)*r10*sj11)))),-1);
if(!x1245.valid){
continue;
}
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x1244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1245.value)))+(x1246.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1247=IKsin(j10);
IkReal x1248=IKcos(j10);
IkReal x1249=((1.0)*sj6);
IkReal x1250=(r11*sj11);
IkReal x1251=(r01*sj11);
IkReal x1252=(r21*sj11);
IkReal x1253=((1.0)*x1248);
IkReal x1254=(cj11*x1248);
IkReal x1255=((1.0)*x1247);
evalcond[0]=(((x1247*x1252))+(((-1.0)*r22*x1253))+(((-1.0)*cj11*r20*x1255)));
evalcond[1]=((((-1.0)*r22*x1255))+(((-1.0)*x1252*x1253))+((r20*x1254)));
evalcond[2]=(((x1247*x1250))+(((-1.0)*r12*x1253))+cj6+(((-1.0)*cj11*r10*x1255)));
evalcond[3]=(((x1247*x1251))+(((-1.0)*cj11*r00*x1255))+(((-1.0)*x1249))+(((-1.0)*r02*x1253)));
evalcond[4]=((((-1.0)*x1251*x1253))+(((-1.0)*r02*x1255))+((r00*x1254))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x1255))+((r10*x1254))+(((-1.0)*x1249))+(((-1.0)*x1250*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1256=((1.0)*cj11);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1256))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1256))+(((-1.0)*r00*sj11)))),-1);
if(!x1258.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1257.value)+(((1.5707963267949)*(x1258.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1259=IKsin(j10);
IkReal x1260=IKcos(j10);
IkReal x1261=((1.0)*sj6);
IkReal x1262=(r11*sj11);
IkReal x1263=(r01*sj11);
IkReal x1264=(r21*sj11);
IkReal x1265=((1.0)*x1260);
IkReal x1266=(cj11*x1260);
IkReal x1267=((1.0)*x1259);
evalcond[0]=((((-1.0)*r22*x1265))+(((-1.0)*cj11*r20*x1267))+((x1259*x1264)));
evalcond[1]=((((-1.0)*x1264*x1265))+(((-1.0)*r22*x1267))+((r20*x1266)));
evalcond[2]=((((-1.0)*r12*x1265))+cj6+(((-1.0)*cj11*r10*x1267))+((x1259*x1262)));
evalcond[3]=((((-1.0)*cj11*r00*x1267))+((x1259*x1263))+(((-1.0)*r02*x1265))+(((-1.0)*x1261)));
evalcond[4]=((((-1.0)*x1263*x1265))+(((-1.0)*r02*x1267))+((r00*x1266))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x1267))+((r10*x1266))+(((-1.0)*x1262*x1265))+(((-1.0)*x1261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x1268=IKcos(j6);
IkReal x1269=IKsin(j6);
evalcond[0]=((((-0.10915)*x1269))+(((0.425)*x1268))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1268))+(((0.425)*x1269))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1270=((1.0)*cj11);
IkReal x1271=((((-1.0)*r01*x1270))+(((-1.0)*r00*sj11)));
j10eval[0]=x1271;
j10eval[1]=IKsign(x1271);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1270))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1272=cj11*cj11;
IkReal x1273=((1.0)*r21);
IkReal x1274=((1.0)*cj11*r20);
IkReal x1275=((((-1.0)*cj11*r00*sj11*x1273))+((r01*r21))+((r00*r20*x1272))+((r02*r22))+(((-1.0)*r01*x1272*x1273))+(((-1.0)*r01*sj11*x1274)));
j10eval[0]=x1275;
j10eval[1]=((IKabs(((((-1.0)*cj6*x1274))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x1275);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1276=cj11*cj11;
IkReal x1277=((1.0)*r21);
IkReal x1278=(cj11*sj11);
IkReal x1279=((1.0)*r20);
IkReal x1280=((((-1.0)*r11*x1276*x1277))+((r11*r21))+((r12*r22))+((r10*r20*x1276))+(((-1.0)*r10*x1277*x1278))+(((-1.0)*r11*x1278*x1279)));
j10eval[0]=x1280;
j10eval[1]=IKsign(x1280);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*cj11*sj6*x1279))+((r21*sj11*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1281=cj11*cj11;
IkReal x1282=((1.0)*r21);
IkReal x1283=(cj11*sj11);
IkReal x1284=((1.0)*r20);
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*cj11*sj6*x1284))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1282*x1283))+((r10*r20*x1281))+((r11*r21))+(((-1.0)*r11*x1281*x1282))+((r12*r22))+(((-1.0)*r11*x1283*x1284)))),-1);
if(!x1286.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1285.value)+(((1.5707963267949)*(x1286.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1287=IKsin(j10);
IkReal x1288=IKcos(j10);
IkReal x1289=(r11*sj11);
IkReal x1290=(r21*sj11);
IkReal x1291=(r01*sj11);
IkReal x1292=((1.0)*x1288);
IkReal x1293=(cj11*x1288);
IkReal x1294=((1.0)*x1287);
evalcond[0]=(((x1287*x1290))+(((-1.0)*cj11*r20*x1294))+(((-1.0)*r22*x1292)));
evalcond[1]=(((r20*x1293))+(((-1.0)*x1290*x1292))+(((-1.0)*r22*x1294)));
evalcond[2]=((((-1.0)*cj11*r10*x1294))+cj6+(((-1.0)*r12*x1292))+((x1287*x1289)));
evalcond[3]=(cj6+(((-1.0)*r02*x1294))+(((-1.0)*x1291*x1292))+((r00*x1293)));
evalcond[4]=(sj6+(((-1.0)*x1289*x1292))+(((-1.0)*r12*x1294))+((r10*x1293)));
evalcond[5]=((((-1.0)*sj6))+((x1287*x1291))+(((-1.0)*cj11*r00*x1294))+(((-1.0)*r02*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1295=cj11*cj11;
IkReal x1296=((1.0)*r21);
IkReal x1297=((1.0)*cj11*r20);
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*x1297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r00*sj11*x1296))+((r01*r21))+((r00*r20*x1295))+(((-1.0)*r01*sj11*x1297))+((r02*r22))+(((-1.0)*r01*x1295*x1296)))),-1);
if(!x1299.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1298.value)+(((1.5707963267949)*(x1299.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1300=IKsin(j10);
IkReal x1301=IKcos(j10);
IkReal x1302=(r11*sj11);
IkReal x1303=(r21*sj11);
IkReal x1304=(r01*sj11);
IkReal x1305=((1.0)*x1301);
IkReal x1306=(cj11*x1301);
IkReal x1307=((1.0)*x1300);
evalcond[0]=((((-1.0)*cj11*r20*x1307))+(((-1.0)*r22*x1305))+((x1300*x1303)));
evalcond[1]=((((-1.0)*r22*x1307))+(((-1.0)*x1303*x1305))+((r20*x1306)));
evalcond[2]=((((-1.0)*cj11*r10*x1307))+cj6+((x1300*x1302))+(((-1.0)*r12*x1305)));
evalcond[3]=(cj6+(((-1.0)*r02*x1307))+((r00*x1306))+(((-1.0)*x1304*x1305)));
evalcond[4]=(sj6+((r10*x1306))+(((-1.0)*r12*x1307))+(((-1.0)*x1302*x1305)));
evalcond[5]=((((-1.0)*sj6))+((x1300*x1304))+(((-1.0)*r02*x1305))+(((-1.0)*cj11*r00*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1308=((1.0)*cj11);
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x1308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1308))+(((-1.0)*r00*sj11)))),-1);
if(!x1310.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1309.value)+(((1.5707963267949)*(x1310.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1311=IKsin(j10);
IkReal x1312=IKcos(j10);
IkReal x1313=(r11*sj11);
IkReal x1314=(r21*sj11);
IkReal x1315=(r01*sj11);
IkReal x1316=((1.0)*x1312);
IkReal x1317=(cj11*x1312);
IkReal x1318=((1.0)*x1311);
evalcond[0]=((((-1.0)*cj11*r20*x1318))+((x1311*x1314))+(((-1.0)*r22*x1316)));
evalcond[1]=((((-1.0)*r22*x1318))+(((-1.0)*x1314*x1316))+((r20*x1317)));
evalcond[2]=(((x1311*x1313))+(((-1.0)*cj11*r10*x1318))+cj6+(((-1.0)*r12*x1316)));
evalcond[3]=(((r00*x1317))+(((-1.0)*x1315*x1316))+cj6+(((-1.0)*r02*x1318)));
evalcond[4]=(sj6+(((-1.0)*x1313*x1316))+((r10*x1317))+(((-1.0)*r12*x1318)));
evalcond[5]=(((x1311*x1315))+(((-1.0)*sj6))+(((-1.0)*cj11*r00*x1318))+(((-1.0)*r02*x1316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1319=((1.0)*cj11);
IkReal x1320=((((-1.0)*r01*x1319))+(((-1.0)*r00*sj11)));
j10eval[0]=x1320;
j10eval[1]=IKsign(x1320);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1319))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1321=((1.0)*cj11);
IkReal x1322=((((-1.0)*r11*x1321))+(((-1.0)*r10*sj11)));
j10eval[0]=x1322;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x1321))))));
j10eval[2]=IKsign(x1322);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x1323=cj11*cj11;
IkReal x1324=((1.0)*r21);
IkReal x1325=(cj11*sj11);
IkReal x1326=(((r11*r21))+(((-1.0)*r11*x1323*x1324))+((r12*r22))+(((-1.0)*r11*r20*x1325))+((r10*r20*x1323))+(((-1.0)*r10*x1324*x1325)));
j10eval[0]=x1326;
j10eval[1]=IKsign(x1326);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*sj11*x1324))+((cj11*cj6*r20))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1327=cj11*cj11;
IkReal x1328=((1.0)*r21);
IkReal x1329=(cj11*sj11);
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r10*x1328*x1329))+(((-1.0)*r11*x1327*x1328))+((r12*r22))+(((-1.0)*r11*r20*x1329))+((r10*r20*x1327)))),-1);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj11*x1328))+((cj11*cj6*r20)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1330.value)))+(x1331.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1332=IKsin(j10);
IkReal x1333=IKcos(j10);
IkReal x1334=((1.0)*sj6);
IkReal x1335=(r11*sj11);
IkReal x1336=(r01*sj11);
IkReal x1337=(r21*sj11);
IkReal x1338=((1.0)*x1333);
IkReal x1339=(cj11*x1333);
IkReal x1340=((1.0)*x1332);
evalcond[0]=((((-1.0)*r22*x1338))+(((-1.0)*cj11*r20*x1340))+((x1332*x1337)));
evalcond[1]=((((-1.0)*x1337*x1338))+((r20*x1339))+(((-1.0)*r22*x1340)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x1340))+(((-1.0)*r12*x1338))+((x1332*x1335)));
evalcond[3]=((((-1.0)*cj11*r00*x1340))+(((-1.0)*r02*x1338))+(((-1.0)*x1334))+((x1332*x1336)));
evalcond[4]=((((-1.0)*r02*x1340))+((r00*x1339))+(((-1.0)*x1336*x1338))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1335*x1338))+(((-1.0)*r12*x1340))+((r10*x1339))+(((-1.0)*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1341=((1.0)*cj11);
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x1341))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1341))+(((-1.0)*r10*sj11)))),-1);
if(!x1343.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1342.value)+(((1.5707963267949)*(x1343.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1344=IKsin(j10);
IkReal x1345=IKcos(j10);
IkReal x1346=((1.0)*sj6);
IkReal x1347=(r11*sj11);
IkReal x1348=(r01*sj11);
IkReal x1349=(r21*sj11);
IkReal x1350=((1.0)*x1345);
IkReal x1351=(cj11*x1345);
IkReal x1352=((1.0)*x1344);
evalcond[0]=(((x1344*x1349))+(((-1.0)*cj11*r20*x1352))+(((-1.0)*r22*x1350)));
evalcond[1]=((((-1.0)*r22*x1352))+((r20*x1351))+(((-1.0)*x1349*x1350)));
evalcond[2]=((((-1.0)*r12*x1350))+cj6+((x1344*x1347))+(((-1.0)*cj11*r10*x1352)));
evalcond[3]=((((-1.0)*cj11*r00*x1352))+(((-1.0)*x1346))+((x1344*x1348))+(((-1.0)*r02*x1350)));
evalcond[4]=((((-1.0)*r02*x1352))+(((-1.0)*x1348*x1350))+((r00*x1351))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x1352))+((r10*x1351))+(((-1.0)*x1346))+(((-1.0)*x1347*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1353=((1.0)*cj11);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x1353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1353))+(((-1.0)*r00*sj11)))),-1);
if(!x1355.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1356=IKsin(j10);
IkReal x1357=IKcos(j10);
IkReal x1358=((1.0)*sj6);
IkReal x1359=(r11*sj11);
IkReal x1360=(r01*sj11);
IkReal x1361=(r21*sj11);
IkReal x1362=((1.0)*x1357);
IkReal x1363=(cj11*x1357);
IkReal x1364=((1.0)*x1356);
evalcond[0]=(((x1356*x1361))+(((-1.0)*cj11*r20*x1364))+(((-1.0)*r22*x1362)));
evalcond[1]=((((-1.0)*r22*x1364))+((r20*x1363))+(((-1.0)*x1361*x1362)));
evalcond[2]=((((-1.0)*r12*x1362))+cj6+(((-1.0)*cj11*r10*x1364))+((x1356*x1359)));
evalcond[3]=(((x1356*x1360))+(((-1.0)*x1358))+(((-1.0)*r02*x1362))+(((-1.0)*cj11*r00*x1364)));
evalcond[4]=((((-1.0)*r02*x1364))+((r00*x1363))+(((-1.0)*x1360*x1362))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1358))+((r10*x1363))+(((-1.0)*r12*x1364))+(((-1.0)*x1359*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1365=((1.0)*cj11);
IkReal x1366=((((-1.0)*r01*x1365))+(((-1.0)*r00*sj11)));
j10eval[0]=x1366;
j10eval[1]=IKsign(x1366);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x1365)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1367=cj11*cj11;
IkReal x1368=((1.0)*r21);
IkReal x1369=((1.0)*cj11*r20);
IkReal x1370=((((-1.0)*cj11*r00*sj11*x1368))+(((-1.0)*r01*sj11*x1369))+((r01*r21))+(((-1.0)*r01*x1367*x1368))+((r00*r20*x1367))+((r02*r22)));
j10eval[0]=x1370;
j10eval[1]=((IKabs(((((-1.0)*cj6*x1369))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x1370);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x1371=cj11*cj11;
IkReal x1372=((1.0)*r21);
IkReal x1373=(cj11*sj11);
IkReal x1374=((1.0)*r20);
IkReal x1375=((((-1.0)*r10*x1372*x1373))+((r10*r20*x1371))+(((-1.0)*r11*x1373*x1374))+((r11*r21))+((r12*r22))+(((-1.0)*r11*x1371*x1372)));
j10eval[0]=x1375;
j10eval[1]=IKsign(x1375);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*cj11*sj6*x1374))+((r21*sj11*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1376=cj11*cj11;
IkReal x1377=((1.0)*r21);
IkReal x1378=(cj11*sj11);
IkReal x1379=((1.0)*r20);
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign((((r10*r20*x1376))+((r11*r21))+((r12*r22))+(((-1.0)*r11*x1378*x1379))+(((-1.0)*r11*x1376*x1377))+(((-1.0)*r10*x1377*x1378)))),-1);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*cj11*sj6*x1379))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1380.value)))+(x1381.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j10);
IkReal x1383=IKcos(j10);
IkReal x1384=(r11*sj11);
IkReal x1385=(r21*sj11);
IkReal x1386=(r01*sj11);
IkReal x1387=((1.0)*x1383);
IkReal x1388=(cj11*x1383);
IkReal x1389=((1.0)*x1382);
evalcond[0]=((((-1.0)*cj11*r20*x1389))+(((-1.0)*r22*x1387))+((x1382*x1385)));
evalcond[1]=(((r20*x1388))+(((-1.0)*r22*x1389))+(((-1.0)*x1385*x1387)));
evalcond[2]=((((-1.0)*r12*x1387))+cj6+(((-1.0)*cj11*r10*x1389))+((x1382*x1384)));
evalcond[3]=(cj6+(((-1.0)*r02*x1389))+((r00*x1388))+(((-1.0)*x1386*x1387)));
evalcond[4]=((((-1.0)*r12*x1389))+((r10*x1388))+sj6+(((-1.0)*x1384*x1387)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x1387))+(((-1.0)*cj11*r00*x1389))+((x1382*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1390=cj11*cj11;
IkReal x1391=((1.0)*r21);
IkReal x1392=((1.0)*cj11*r20);
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*x1392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1390*x1391))+((r01*r21))+(((-1.0)*r01*sj11*x1392))+(((-1.0)*cj11*r00*sj11*x1391))+((r02*r22))+((r00*r20*x1390)))),-1);
if(!x1394.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1393.value)+(((1.5707963267949)*(x1394.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j10);
IkReal x1396=IKcos(j10);
IkReal x1397=(r11*sj11);
IkReal x1398=(r21*sj11);
IkReal x1399=(r01*sj11);
IkReal x1400=((1.0)*x1396);
IkReal x1401=(cj11*x1396);
IkReal x1402=((1.0)*x1395);
evalcond[0]=((((-1.0)*r22*x1400))+((x1395*x1398))+(((-1.0)*cj11*r20*x1402)));
evalcond[1]=((((-1.0)*x1398*x1400))+(((-1.0)*r22*x1402))+((r20*x1401)));
evalcond[2]=((((-1.0)*r12*x1400))+(((-1.0)*cj11*r10*x1402))+cj6+((x1395*x1397)));
evalcond[3]=(cj6+(((-1.0)*x1399*x1400))+((r00*x1401))+(((-1.0)*r02*x1402)));
evalcond[4]=((((-1.0)*r12*x1402))+sj6+((r10*x1401))+(((-1.0)*x1397*x1400)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x1402))+((x1395*x1399))+(((-1.0)*r02*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1403=((1.0)*cj11);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1403))+(((-1.0)*r00*sj11)))),-1);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1403))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1404.value)))+(x1405.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j10);
IkReal x1407=IKcos(j10);
IkReal x1408=(r11*sj11);
IkReal x1409=(r21*sj11);
IkReal x1410=(r01*sj11);
IkReal x1411=((1.0)*x1407);
IkReal x1412=(cj11*x1407);
IkReal x1413=((1.0)*x1406);
evalcond[0]=((((-1.0)*r22*x1411))+((x1406*x1409))+(((-1.0)*cj11*r20*x1413)));
evalcond[1]=(((r20*x1412))+(((-1.0)*r22*x1413))+(((-1.0)*x1409*x1411)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x1413))+((x1406*x1408))+(((-1.0)*r12*x1411)));
evalcond[3]=(cj6+(((-1.0)*r02*x1413))+((r00*x1412))+(((-1.0)*x1410*x1411)));
evalcond[4]=(sj6+(((-1.0)*x1408*x1411))+(((-1.0)*r12*x1413))+((r10*x1412)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x1411))+((x1406*x1410))+(((-1.0)*cj11*r00*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x1414=IKcos(j6);
IkReal x1415=IKsin(j6);
evalcond[0]=((((-0.10915)*x1415))+(((-1.0)*px))+(((-0.425)*x1414)));
evalcond[1]=((((0.10915)*x1414))+(((-1.0)*py))+(((-0.425)*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1416=((1.0)*cj11);
IkReal x1417=((((-1.0)*r00*sj11))+(((-1.0)*r01*x1416)));
j10eval[0]=x1417;
j10eval[1]=IKsign(x1417);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1416))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1418=cj11*cj11;
IkReal x1419=((1.0)*r21);
IkReal x1420=((1.0)*cj11*r20);
IkReal x1421=((((-1.0)*cj11*r00*sj11*x1419))+(((-1.0)*r01*sj11*x1420))+((r01*r21))+((r00*r20*x1418))+((r02*r22))+(((-1.0)*r01*x1418*x1419)));
j10eval[0]=x1421;
j10eval[1]=((IKabs(((((-1.0)*cj6*x1420))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x1421);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x1422=cj11*cj11;
IkReal x1423=((1.0)*r21);
IkReal x1424=(cj11*sj11);
IkReal x1425=((1.0)*r20);
IkReal x1426=((((-1.0)*r10*x1423*x1424))+((r11*r21))+(((-1.0)*r11*x1424*x1425))+((r12*r22))+(((-1.0)*r11*x1422*x1423))+((r10*r20*x1422)));
j10eval[0]=x1426;
j10eval[1]=IKsign(x1426);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x1425))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1427=cj11*cj11;
IkReal x1428=((1.0)*r21);
IkReal x1429=(cj11*sj11);
IkReal x1430=((1.0)*r20);
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r11*x1429*x1430))+((r12*r22))+(((-1.0)*r10*x1428*x1429))+((r10*r20*x1427))+(((-1.0)*r11*x1427*x1428)))),-1);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*cj11*sj6*x1430))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1432.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1431.value)))+(x1432.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1433=IKsin(j10);
IkReal x1434=IKcos(j10);
IkReal x1435=(r11*sj11);
IkReal x1436=(r21*sj11);
IkReal x1437=(r01*sj11);
IkReal x1438=((1.0)*x1434);
IkReal x1439=(cj11*x1434);
IkReal x1440=((1.0)*x1433);
evalcond[0]=(((x1433*x1436))+(((-1.0)*r22*x1438))+(((-1.0)*cj11*r20*x1440)));
evalcond[1]=((((-1.0)*x1436*x1438))+(((-1.0)*r22*x1440))+((r20*x1439)));
evalcond[2]=((((-1.0)*r12*x1438))+cj6+((x1433*x1435))+(((-1.0)*cj11*r10*x1440)));
evalcond[3]=((((-1.0)*x1437*x1438))+cj6+((r00*x1439))+(((-1.0)*r02*x1440)));
evalcond[4]=(sj6+(((-1.0)*x1435*x1438))+(((-1.0)*r12*x1440))+((r10*x1439)));
evalcond[5]=((((-1.0)*sj6))+((x1433*x1437))+(((-1.0)*r02*x1438))+(((-1.0)*cj11*r00*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1441=cj11*cj11;
IkReal x1442=((1.0)*r21);
IkReal x1443=((1.0)*cj11*r20);
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign((((r00*r20*x1441))+(((-1.0)*r01*x1441*x1442))+((r01*r21))+(((-1.0)*r01*sj11*x1443))+(((-1.0)*cj11*r00*sj11*x1442))+((r02*r22)))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*x1443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1444.value)))+(x1445.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1446=IKsin(j10);
IkReal x1447=IKcos(j10);
IkReal x1448=(r11*sj11);
IkReal x1449=(r21*sj11);
IkReal x1450=(r01*sj11);
IkReal x1451=((1.0)*x1447);
IkReal x1452=(cj11*x1447);
IkReal x1453=((1.0)*x1446);
evalcond[0]=((((-1.0)*r22*x1451))+(((-1.0)*cj11*r20*x1453))+((x1446*x1449)));
evalcond[1]=((((-1.0)*r22*x1453))+((r20*x1452))+(((-1.0)*x1449*x1451)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x1453))+((x1446*x1448))+(((-1.0)*r12*x1451)));
evalcond[3]=(cj6+(((-1.0)*r02*x1453))+((r00*x1452))+(((-1.0)*x1450*x1451)));
evalcond[4]=(((r10*x1452))+sj6+(((-1.0)*x1448*x1451))+(((-1.0)*r12*x1453)));
evalcond[5]=((((-1.0)*sj6))+((x1446*x1450))+(((-1.0)*r02*x1451))+(((-1.0)*cj11*r00*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1454=((1.0)*cj11);
CheckValue<IkReal> x1455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1454))+(((-1.0)*r00*sj11)))),-1);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1454))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1455.value)))+(x1456.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1457=IKsin(j10);
IkReal x1458=IKcos(j10);
IkReal x1459=(r11*sj11);
IkReal x1460=(r21*sj11);
IkReal x1461=(r01*sj11);
IkReal x1462=((1.0)*x1458);
IkReal x1463=(cj11*x1458);
IkReal x1464=((1.0)*x1457);
evalcond[0]=((((-1.0)*r22*x1462))+((x1457*x1460))+(((-1.0)*cj11*r20*x1464)));
evalcond[1]=(((r20*x1463))+(((-1.0)*r22*x1464))+(((-1.0)*x1460*x1462)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x1464))+(((-1.0)*r12*x1462))+((x1457*x1459)));
evalcond[3]=((((-1.0)*r02*x1464))+cj6+((r00*x1463))+(((-1.0)*x1461*x1462)));
evalcond[4]=(sj6+(((-1.0)*x1459*x1462))+((r10*x1463))+(((-1.0)*r12*x1464)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x1462))+((x1457*x1461))+(((-1.0)*cj11*r00*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x1465=IKcos(j6);
IkReal x1466=IKsin(j6);
evalcond[0]=((((-0.10915)*x1466))+(((-1.0)*px))+(((-0.425)*x1465)));
evalcond[1]=((((0.10915)*x1465))+(((-1.0)*py))+(((-0.425)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1467=((1.0)*cj11);
IkReal x1468=((((-1.0)*r01*x1467))+(((-1.0)*r00*sj11)));
j10eval[0]=x1468;
j10eval[1]=IKsign(x1468);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1467))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1469=((1.0)*cj11);
IkReal x1470=((((-1.0)*r11*x1469))+(((-1.0)*r10*sj11)));
j10eval[0]=x1470;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x1469))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x1470);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x1471=cj11*cj11;
IkReal x1472=((1.0)*r21);
IkReal x1473=(cj11*sj11);
IkReal x1474=(((r11*r21))+(((-1.0)*r11*r20*x1473))+(((-1.0)*r11*x1471*x1472))+((r12*r22))+(((-1.0)*r10*x1472*x1473))+((r10*r20*x1471)));
j10eval[0]=x1474;
j10eval[1]=IKsign(x1474);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*sj11*x1472))+((cj11*cj6*r20))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1475=cj11*cj11;
IkReal x1476=((1.0)*r21);
IkReal x1477=(cj11*sj11);
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj11*x1476))+((cj11*cj6*r20)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r11*r20*x1477))+(((-1.0)*r10*x1476*x1477))+((r12*r22))+(((-1.0)*r11*x1475*x1476))+((r10*r20*x1475)))),-1);
if(!x1479.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1478.value)+(((1.5707963267949)*(x1479.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j10);
IkReal x1481=IKcos(j10);
IkReal x1482=((1.0)*sj6);
IkReal x1483=(r11*sj11);
IkReal x1484=(r01*sj11);
IkReal x1485=(r21*sj11);
IkReal x1486=((1.0)*x1481);
IkReal x1487=(cj11*x1481);
IkReal x1488=((1.0)*x1480);
evalcond[0]=((((-1.0)*cj11*r20*x1488))+((x1480*x1485))+(((-1.0)*r22*x1486)));
evalcond[1]=(((r20*x1487))+(((-1.0)*x1485*x1486))+(((-1.0)*r22*x1488)));
evalcond[2]=(cj6+(((-1.0)*r12*x1486))+((x1480*x1483))+(((-1.0)*cj11*r10*x1488)));
evalcond[3]=((((-1.0)*x1482))+((x1480*x1484))+(((-1.0)*cj11*r00*x1488))+(((-1.0)*r02*x1486)));
evalcond[4]=(((r00*x1487))+(((-1.0)*x1484*x1486))+(((-1.0)*r02*x1488))+(((-1.0)*cj6)));
evalcond[5]=(((r10*x1487))+(((-1.0)*r12*x1488))+(((-1.0)*x1482))+(((-1.0)*x1483*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1489=((1.0)*cj11);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x1489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1489))+(((-1.0)*r10*sj11)))),-1);
if(!x1491.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j10);
IkReal x1493=IKcos(j10);
IkReal x1494=((1.0)*sj6);
IkReal x1495=(r11*sj11);
IkReal x1496=(r01*sj11);
IkReal x1497=(r21*sj11);
IkReal x1498=((1.0)*x1493);
IkReal x1499=(cj11*x1493);
IkReal x1500=((1.0)*x1492);
evalcond[0]=((((-1.0)*cj11*r20*x1500))+((x1492*x1497))+(((-1.0)*r22*x1498)));
evalcond[1]=((((-1.0)*r22*x1500))+((r20*x1499))+(((-1.0)*x1497*x1498)));
evalcond[2]=((((-1.0)*r12*x1498))+cj6+(((-1.0)*cj11*r10*x1500))+((x1492*x1495)));
evalcond[3]=((((-1.0)*x1494))+(((-1.0)*cj11*r00*x1500))+((x1492*x1496))+(((-1.0)*r02*x1498)));
evalcond[4]=(((r00*x1499))+(((-1.0)*x1496*x1498))+(((-1.0)*r02*x1500))+(((-1.0)*cj6)));
evalcond[5]=(((r10*x1499))+(((-1.0)*x1494))+(((-1.0)*x1495*x1498))+(((-1.0)*r12*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1501=((1.0)*cj11);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1501))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1501))+(((-1.0)*r00*sj11)))),-1);
if(!x1503.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j10);
IkReal x1505=IKcos(j10);
IkReal x1506=((1.0)*sj6);
IkReal x1507=(r11*sj11);
IkReal x1508=(r01*sj11);
IkReal x1509=(r21*sj11);
IkReal x1510=((1.0)*x1505);
IkReal x1511=(cj11*x1505);
IkReal x1512=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1510))+((x1504*x1509))+(((-1.0)*cj11*r20*x1512)));
evalcond[1]=((((-1.0)*r22*x1512))+((r20*x1511))+(((-1.0)*x1509*x1510)));
evalcond[2]=(cj6+((x1504*x1507))+(((-1.0)*cj11*r10*x1512))+(((-1.0)*r12*x1510)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1508))+(((-1.0)*cj11*r00*x1512))+(((-1.0)*r02*x1510)));
evalcond[4]=(((r00*x1511))+(((-1.0)*r02*x1512))+(((-1.0)*x1508*x1510))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x1506))+(((-1.0)*x1507*x1510))+((r10*x1511))+(((-1.0)*r12*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1513=(cj8*sj7);
IkReal x1514=(r00*sj11);
IkReal x1515=((20000.0)*px);
IkReal x1516=(cj7*sj8);
IkReal x1517=(cj11*r01);
IkReal x1518=((8500.0)*sj7);
CheckValue<IkReal> x1519=IKPowWithIntegerCheck(((((-2183.0)*x1513))+(((-2183.0)*x1516))),-1);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(((((-1.0)*x1513))+(((-1.0)*x1516))),-1);
if(!x1520.valid){
continue;
}
if( IKabs(((x1519.value)*((((x1513*x1515))+(((-5952.0)*x1513*x1517))+(((-5952.0)*x1513*x1514))+(((-1.0)*x1514*x1518))+((x1515*x1516))+(((-1.0)*x1517*x1518))+(((-5952.0)*x1516*x1517))+(((-5952.0)*x1514*x1516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1520.value)*(((((-1.0)*x1517))+(((-1.0)*x1514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1519.value)*((((x1513*x1515))+(((-5952.0)*x1513*x1517))+(((-5952.0)*x1513*x1514))+(((-1.0)*x1514*x1518))+((x1515*x1516))+(((-1.0)*x1517*x1518))+(((-5952.0)*x1516*x1517))+(((-5952.0)*x1514*x1516))))))+IKsqr(((x1520.value)*(((((-1.0)*x1517))+(((-1.0)*x1514))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x1519.value)*((((x1513*x1515))+(((-5952.0)*x1513*x1517))+(((-5952.0)*x1513*x1514))+(((-1.0)*x1514*x1518))+((x1515*x1516))+(((-1.0)*x1517*x1518))+(((-5952.0)*x1516*x1517))+(((-5952.0)*x1514*x1516))))), ((x1520.value)*(((((-1.0)*x1517))+(((-1.0)*x1514))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x1521=IKcos(j6);
IkReal x1522=IKsin(j6);
IkReal x1523=(r00*sj11);
IkReal x1524=((1.0)*cj8);
IkReal x1525=(cj7*sj8);
IkReal x1526=(r10*sj11);
IkReal x1527=(cj11*r01);
IkReal x1528=(cj11*r11);
IkReal x1529=((0.39225)*cj8*sj7);
IkReal x1530=(sj7*x1522);
IkReal x1531=(sj7*x1521);
evalcond[0]=((((-1.0)*x1524*x1531))+(((-1.0)*x1521*x1525))+x1527+x1523);
evalcond[1]=((((-1.0)*x1524*x1530))+x1526+x1528+(((-1.0)*x1522*x1525)));
evalcond[2]=((((0.425)*x1531))+(((-1.0)*px))+((x1521*x1529))+(((-0.10915)*x1522))+(((0.39225)*x1521*x1525))+(((-0.09465)*x1527))+(((-0.09465)*x1523)));
evalcond[3]=(((x1522*x1529))+(((0.425)*x1530))+(((-1.0)*py))+(((0.39225)*x1522*x1525))+(((-0.09465)*x1528))+(((-0.09465)*x1526))+(((0.10915)*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1532=((1.0)*cj11);
IkReal x1533=((((-1.0)*r01*x1532))+(((-1.0)*r00*sj11)));
j10eval[0]=x1533;
j10eval[1]=IKsign(x1533);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x1532))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1534=((1.0)*cj11);
IkReal x1535=((((-1.0)*r11*x1534))+(((-1.0)*r10*sj11)));
j10eval[0]=x1535;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x1534))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x1535);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1536=((1.0)*sj11);
IkReal x1537=((((-1.0)*cj11*r21))+(((-1.0)*r20*x1536)));
j10eval[0]=x1537;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*r11*sj6*x1536))+((cj11*cj6*r00))+(((-1.0)*cj6*r01*x1536))+((cj11*r10*sj6))))));
j10eval[2]=IKsign(x1537);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1538=((-1.0)*r20);
IkReal x1540 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1540)==0){
continue;
}
IkReal x1539=pow(x1540,-0.5);
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1538),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1541.value));
IkReal gconst79=(r21*x1539);
IkReal gconst80=(x1538*x1539);
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x1542.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x1543=((-1.0)*r20);
IkReal x1544=x1539;
CheckValue<IkReal> x1546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1543),IKFAST_ATAN2_MAGTHRESH);
if(!x1546.valid){
continue;
}
IkReal x1545=((-1.0)*(x1546.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x1545;
IkReal gconst78=x1545;
IkReal gconst79=(r21*x1544);
IkReal gconst80=(x1543*x1544);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x1547=((-1.0)*r20);
IkReal x1548=x1539;
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1547),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
IkReal x1549=((-1.0)*(x1550.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x1549;
IkReal gconst78=x1549;
IkReal gconst79=(r21*x1548);
IkReal gconst80=(x1547*x1548);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1551=((-1.0)*r20);
IkReal x1552=x1539;
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1551),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
IkReal x1553=((-1.0)*(x1554.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x1553;
IkReal gconst78=x1553;
IkReal gconst79=(r21*x1552);
IkReal gconst80=(x1551*x1552);
IkReal x1555=r22*r22;
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1555))),-1);
if(!x1558.valid){
continue;
}
IkReal x1556=x1558.value;
IkReal x1557=(((x1556*(r20*r20*r20*r20)))+((x1556*(r21*r21*r21*r21)))+x1555+(((2.0)*x1556*(r20*r20)*(r21*r21))));
j10eval[0]=x1557;
j10eval[1]=IKsign(x1557);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1559=(cj8*sj7);
IkReal x1560=(gconst79*r21);
IkReal x1561=(gconst80*r20);
IkReal x1562=((1.0)*r22);
IkReal x1563=(cj7*sj8);
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1560*x1561))+(x1561*x1561)+(x1560*x1560))),-1);
if(!x1564.valid){
continue;
}
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal(((((-1.0)*x1559*x1562))+(((-1.0)*x1562*x1563)))),IkReal((((x1561*x1563))+(((-1.0)*x1560*x1563))+(((-1.0)*x1559*x1560))+((x1559*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1564.value)))+(x1565.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1566=IKsin(j10);
IkReal x1567=IKcos(j10);
IkReal x1568=((1.0)*sj8);
IkReal x1569=(cj7*cj8);
IkReal x1570=(gconst79*x1566);
IkReal x1571=((1.0)*x1567);
IkReal x1572=(gconst80*x1567);
IkReal x1573=((1.0)*x1566);
IkReal x1574=(gconst80*x1573);
evalcond[0]=((((-1.0)*r22*x1571))+((r21*x1570))+(((-1.0)*r20*x1574)));
evalcond[1]=(cj6+((r11*x1570))+(((-1.0)*r10*x1574))+(((-1.0)*r12*x1571)));
evalcond[2]=((((-1.0)*r02*x1571))+(((-1.0)*sj6))+(((-1.0)*r00*x1574))+((r01*x1570)));
evalcond[3]=(((r20*x1572))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1568))+(((-1.0)*r22*x1573))+(((-1.0)*gconst79*r21*x1571)));
evalcond[4]=((((-1.0)*r02*x1573))+((cj6*x1569))+(((-1.0)*cj6*sj7*x1568))+(((-1.0)*gconst79*r01*x1571))+((r00*x1572)));
evalcond[5]=(((sj6*x1569))+(((-1.0)*sj6*sj7*x1568))+(((-1.0)*gconst79*r11*x1571))+(((-1.0)*r12*x1573))+((r10*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1575=((1.0)*gconst80);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1575)))),-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x1575))+((gconst79*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1576.value)))+(x1577.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1578=IKsin(j10);
IkReal x1579=IKcos(j10);
IkReal x1580=((1.0)*sj8);
IkReal x1581=(cj7*cj8);
IkReal x1582=(gconst79*x1578);
IkReal x1583=((1.0)*x1579);
IkReal x1584=(gconst80*x1579);
IkReal x1585=((1.0)*x1578);
IkReal x1586=(gconst80*x1585);
evalcond[0]=((((-1.0)*r22*x1583))+(((-1.0)*r20*x1586))+((r21*x1582)));
evalcond[1]=(cj6+((r11*x1582))+(((-1.0)*r12*x1583))+(((-1.0)*r10*x1586)));
evalcond[2]=((((-1.0)*sj6))+((r01*x1582))+(((-1.0)*r02*x1583))+(((-1.0)*r00*x1586)));
evalcond[3]=((((-1.0)*gconst79*r21*x1583))+(((-1.0)*cj8*sj7))+((r20*x1584))+(((-1.0)*cj7*x1580))+(((-1.0)*r22*x1585)));
evalcond[4]=((((-1.0)*r02*x1585))+((cj6*x1581))+(((-1.0)*gconst79*r01*x1583))+(((-1.0)*cj6*sj7*x1580))+((r00*x1584)));
evalcond[5]=((((-1.0)*gconst79*r11*x1583))+(((-1.0)*sj6*sj7*x1580))+((r10*x1584))+((sj6*x1581))+(((-1.0)*r12*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1587=((1.0)*gconst80);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1587))+((cj6*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1587)))),-1);
if(!x1589.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1590=IKsin(j10);
IkReal x1591=IKcos(j10);
IkReal x1592=((1.0)*sj8);
IkReal x1593=(cj7*cj8);
IkReal x1594=(gconst79*x1590);
IkReal x1595=((1.0)*x1591);
IkReal x1596=(gconst80*x1591);
IkReal x1597=((1.0)*x1590);
IkReal x1598=(gconst80*x1597);
evalcond[0]=((((-1.0)*r22*x1595))+(((-1.0)*r20*x1598))+((r21*x1594)));
evalcond[1]=(cj6+((r11*x1594))+(((-1.0)*r10*x1598))+(((-1.0)*r12*x1595)));
evalcond[2]=(((r01*x1594))+(((-1.0)*sj6))+(((-1.0)*r02*x1595))+(((-1.0)*r00*x1598)));
evalcond[3]=((((-1.0)*gconst79*r21*x1595))+((r20*x1596))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1592))+(((-1.0)*r22*x1597)));
evalcond[4]=(((r00*x1596))+((cj6*x1593))+(((-1.0)*r02*x1597))+(((-1.0)*cj6*sj7*x1592))+(((-1.0)*gconst79*r01*x1595)));
evalcond[5]=((((-1.0)*gconst79*r11*x1595))+(((-1.0)*sj6*sj7*x1592))+((r10*x1596))+((sj6*x1593))+(((-1.0)*r12*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1599=((-1.0)*r21);
IkReal x1601 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1601)==0){
continue;
}
IkReal x1600=pow(x1601,-0.5);
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal(x1599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1602.value))));
IkReal gconst82=(x1599*x1600);
IkReal gconst83=((1.0)*r20*x1600);
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x1603.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x1604=((-1.0)*r21);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal(x1604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
IkReal x1605=((1.0)*(x1607.value));
IkReal x1606=x1600;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x1605)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1605)));
IkReal gconst82=(x1604*x1606);
IkReal gconst83=((1.0)*r20*x1606);
IkReal x1608=r22*r22;
IkReal x1609=((1.0)*x1608);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(((-1.0)+x1608),-1);
if(!x1613.valid){
continue;
}
IkReal x1610=x1613.value;
if((((1.0)+(((-1.0)*x1609)))) < -0.00001)
continue;
IkReal x1611=IKsqrt(((1.0)+(((-1.0)*x1609))));
IkReal x1612=(cj6*x1610*x1611);
j10eval[0]=((IKabs((x1612+(((-1.0)*x1609*x1612)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x1614=((-1.0)*r21);
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal(x1614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
IkReal x1615=((1.0)*(x1617.value));
IkReal x1616=x1600;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x1615)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1615)));
IkReal gconst82=(x1614*x1616);
IkReal gconst83=((1.0)*r20*x1616);
IkReal x1618=r22*r22;
IkReal x1619=((1.0)*x1618);
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(((-1.0)+x1618),-1);
if(!x1623.valid){
continue;
}
IkReal x1620=x1623.value;
if((((1.0)+(((-1.0)*x1619)))) < -0.00001)
continue;
IkReal x1621=IKsqrt(((1.0)+(((-1.0)*x1619))));
IkReal x1622=(sj6*x1620*x1621);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*x1619*x1622))+x1622))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x1624=((-1.0)*r21);
CheckValue<IkReal> x1627 = IKatan2WithCheck(IkReal(x1624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1627.valid){
continue;
}
IkReal x1625=((1.0)*(x1627.value));
IkReal x1626=x1600;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x1625)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1625)));
IkReal gconst82=(x1624*x1626);
IkReal gconst83=((1.0)*r20*x1626);
IkReal x1628=r22*r22;
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1628))),-1);
if(!x1631.valid){
continue;
}
IkReal x1629=x1631.value;
IkReal x1630=((1.0)*x1629);
j10eval[0]=IKsign((((x1630*(r21*r21*r21*r21)))+(((2.0)*x1629*(r20*r20)*(r21*r21)))+x1628+((x1630*(r20*r20*r20*r20)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1632=(cj7*sj8);
IkReal x1633=(gconst83*r20);
IkReal x1634=(gconst82*r21);
IkReal x1635=(cj8*sj7);
IkReal x1636=((1.0)*r22);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal(((((-1.0)*x1635*x1636))+(((-1.0)*x1632*x1636)))),IkReal(((((-1.0)*x1634*x1635))+((x1632*x1633))+(((-1.0)*x1632*x1634))+((x1633*x1635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((x1634*x1634)+(r22*r22)+(x1633*x1633)+(((-2.0)*x1633*x1634)))),-1);
if(!x1638.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1637.value)+(((1.5707963267949)*(x1638.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j10);
IkReal x1640=IKcos(j10);
IkReal x1641=(gconst83*r10);
IkReal x1642=((1.0)*sj8);
IkReal x1643=(cj7*cj8);
IkReal x1644=(gconst83*r20);
IkReal x1645=(gconst83*r00);
IkReal x1646=(gconst82*x1639);
IkReal x1647=((1.0)*x1639);
IkReal x1648=((1.0)*x1640);
evalcond[0]=(((r21*x1646))+(((-1.0)*r22*x1648))+(((-1.0)*x1644*x1647)));
evalcond[1]=(((r11*x1646))+(((-1.0)*x1641*x1647))+cj6+(((-1.0)*r12*x1648)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x1645*x1647))+((r01*x1646))+(((-1.0)*r02*x1648)));
evalcond[3]=(((x1640*x1644))+(((-1.0)*r22*x1647))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1642))+(((-1.0)*gconst82*r21*x1648)));
evalcond[4]=(((x1640*x1645))+((cj6*x1643))+(((-1.0)*cj6*sj7*x1642))+(((-1.0)*gconst82*r01*x1648))+(((-1.0)*r02*x1647)));
evalcond[5]=(((x1640*x1641))+(((-1.0)*sj6*sj7*x1642))+(((-1.0)*r12*x1647))+((sj6*x1643))+(((-1.0)*gconst82*r11*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1649=((1.0)*gconst83);
CheckValue<IkReal> x1650 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst82*r21*sj6))+(((-1.0)*r20*sj6*x1649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1649))+(((-1.0)*gconst82*r10)))),-1);
if(!x1651.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1650.value)+(((1.5707963267949)*(x1651.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1652=IKsin(j10);
IkReal x1653=IKcos(j10);
IkReal x1654=(gconst83*r10);
IkReal x1655=((1.0)*sj8);
IkReal x1656=(cj7*cj8);
IkReal x1657=(gconst83*r20);
IkReal x1658=(gconst83*r00);
IkReal x1659=(gconst82*x1652);
IkReal x1660=((1.0)*x1652);
IkReal x1661=((1.0)*x1653);
evalcond[0]=((((-1.0)*r22*x1661))+(((-1.0)*x1657*x1660))+((r21*x1659)));
evalcond[1]=(cj6+(((-1.0)*x1654*x1660))+(((-1.0)*r12*x1661))+((r11*x1659)));
evalcond[2]=((((-1.0)*sj6))+((r01*x1659))+(((-1.0)*r02*x1661))+(((-1.0)*x1658*x1660)));
evalcond[3]=((((-1.0)*gconst82*r21*x1661))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x1660))+((x1653*x1657))+(((-1.0)*cj7*x1655)));
evalcond[4]=((((-1.0)*gconst82*r01*x1661))+((cj6*x1656))+(((-1.0)*r02*x1660))+((x1653*x1658))+(((-1.0)*cj6*sj7*x1655)));
evalcond[5]=((((-1.0)*r12*x1660))+(((-1.0)*gconst82*r11*x1661))+((x1653*x1654))+((sj6*x1656))+(((-1.0)*sj6*sj7*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1662=((1.0)*gconst83);
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst82*r21))+(((-1.0)*cj6*r20*x1662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1662))+(((-1.0)*gconst82*r00)))),-1);
if(!x1664.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1663.value)+(((1.5707963267949)*(x1664.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j10);
IkReal x1666=IKcos(j10);
IkReal x1667=(gconst83*r10);
IkReal x1668=((1.0)*sj8);
IkReal x1669=(cj7*cj8);
IkReal x1670=(gconst83*r20);
IkReal x1671=(gconst83*r00);
IkReal x1672=(gconst82*x1665);
IkReal x1673=((1.0)*x1665);
IkReal x1674=((1.0)*x1666);
evalcond[0]=(((r21*x1672))+(((-1.0)*x1670*x1673))+(((-1.0)*r22*x1674)));
evalcond[1]=((((-1.0)*x1667*x1673))+cj6+(((-1.0)*r12*x1674))+((r11*x1672)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x1674))+(((-1.0)*x1671*x1673))+((r01*x1672)));
evalcond[3]=(((x1666*x1670))+(((-1.0)*cj8*sj7))+(((-1.0)*gconst82*r21*x1674))+(((-1.0)*r22*x1673))+(((-1.0)*cj7*x1668)));
evalcond[4]=(((x1666*x1671))+(((-1.0)*r02*x1673))+((cj6*x1669))+(((-1.0)*cj6*sj7*x1668))+(((-1.0)*gconst82*r01*x1674)));
evalcond[5]=((((-1.0)*gconst82*r11*x1674))+(((-1.0)*r12*x1673))+((x1666*x1667))+(((-1.0)*sj6*sj7*x1668))+((sj6*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1675=((-1.0)*r10);
IkReal x1677 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1677)==0){
continue;
}
IkReal x1676=pow(x1677,-0.5);
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1675),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1678.value));
IkReal gconst85=(r11*x1676);
IkReal gconst86=(x1675*x1676);
CheckValue<IkReal> x1679 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x1679.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x1680=((-1.0)*r10);
IkReal x1681=x1676;
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1680),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
IkReal x1682=((-1.0)*(x1683.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst85;
cj11=gconst86;
j11=x1682;
IkReal gconst84=x1682;
IkReal gconst85=(r11*x1681);
IkReal gconst86=(x1680*x1681);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1684=((1.0)*gconst85);
CheckValue<IkReal> x1685 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x1684))+(((-1.0)*r11*sj6*x1684))+((gconst86*r10*sj6))+((cj6*gconst86*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1684)))),-1);
if(!x1686.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1685.value)+(((1.5707963267949)*(x1686.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1687=IKsin(j10);
IkReal x1688=IKcos(j10);
IkReal x1689=(gconst85*r11);
IkReal x1690=((1.0)*sj8);
IkReal x1691=(cj7*cj8);
IkReal x1692=((1.0)*x1688);
IkReal x1693=(gconst85*x1687);
IkReal x1694=(gconst86*x1688);
IkReal x1695=((1.0)*x1687);
evalcond[0]=(((r21*x1693))+(((-1.0)*r22*x1692))+(((-1.0)*gconst86*r20*x1695)));
evalcond[1]=(cj6+(((-1.0)*r12*x1692))+(((-1.0)*gconst86*r10*x1695))+((x1687*x1689)));
evalcond[2]=(((r01*x1693))+(((-1.0)*sj6))+(((-1.0)*gconst86*r00*x1695))+(((-1.0)*r02*x1692)));
evalcond[3]=(((r20*x1694))+(((-1.0)*cj8*sj7))+(((-1.0)*gconst85*r21*x1692))+(((-1.0)*cj7*x1690))+(((-1.0)*r22*x1695)));
evalcond[4]=(((r00*x1694))+(((-1.0)*r02*x1695))+(((-1.0)*cj6*sj7*x1690))+(((-1.0)*gconst85*r01*x1692))+((cj6*x1691)));
evalcond[5]=(((r10*x1694))+(((-1.0)*r12*x1695))+((sj6*x1691))+(((-1.0)*sj6*sj7*x1690))+(((-1.0)*x1689*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1696=((1.0)*gconst86);
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst85*r21))+(((-1.0)*cj6*r20*x1696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x1696)))),-1);
if(!x1698.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1697.value)+(((1.5707963267949)*(x1698.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1699=IKsin(j10);
IkReal x1700=IKcos(j10);
IkReal x1701=(gconst85*r11);
IkReal x1702=((1.0)*sj8);
IkReal x1703=(cj7*cj8);
IkReal x1704=((1.0)*x1700);
IkReal x1705=(gconst85*x1699);
IkReal x1706=(gconst86*x1700);
IkReal x1707=((1.0)*x1699);
evalcond[0]=(((r21*x1705))+(((-1.0)*gconst86*r20*x1707))+(((-1.0)*r22*x1704)));
evalcond[1]=((((-1.0)*gconst86*r10*x1707))+cj6+((x1699*x1701))+(((-1.0)*r12*x1704)));
evalcond[2]=((((-1.0)*sj6))+((r01*x1705))+(((-1.0)*r02*x1704))+(((-1.0)*gconst86*r00*x1707)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst85*r21*x1704))+((r20*x1706))+(((-1.0)*r22*x1707))+(((-1.0)*cj7*x1702)));
evalcond[4]=((((-1.0)*cj6*sj7*x1702))+((r00*x1706))+(((-1.0)*r02*x1707))+((cj6*x1703))+(((-1.0)*gconst85*r01*x1704)));
evalcond[5]=((((-1.0)*sj6*sj7*x1702))+((r10*x1706))+((sj6*x1703))+(((-1.0)*x1701*x1704))+(((-1.0)*r12*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1708=((-1.0)*r11);
IkReal x1710 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1710)==0){
continue;
}
IkReal x1709=pow(x1710,-0.5);
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal(x1708),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1711.value))));
IkReal gconst88=(x1708*x1709);
IkReal gconst89=((1.0)*r10*x1709);
CheckValue<IkReal> x1712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1712.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x1712.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x1713=((-1.0)*r11);
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal(x1713),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
IkReal x1714=((1.0)*(x1716.value));
IkReal x1715=x1709;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x1714)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1714)));
IkReal gconst88=(x1713*x1715);
IkReal gconst89=((1.0)*r10*x1715);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x1717=((-1.0)*r11);
CheckValue<IkReal> x1720 = IKatan2WithCheck(IkReal(x1717),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1720.valid){
continue;
}
IkReal x1718=((1.0)*(x1720.value));
IkReal x1719=x1709;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x1718)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1718)));
IkReal gconst88=(x1717*x1719);
IkReal gconst89=((1.0)*r10*x1719);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=sj6;
j10eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x1721=((-1.0)*r11);
CheckValue<IkReal> x1724 = IKatan2WithCheck(IkReal(x1721),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1724.valid){
continue;
}
IkReal x1722=((1.0)*(x1724.value));
IkReal x1723=x1709;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x1722)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1722)));
IkReal gconst88=(x1721*x1723);
IkReal gconst89=((1.0)*r10*x1723);
IkReal x1725=r12*r12;
IkReal x1726=(cj6*r02);
IkReal x1727=x1709;
IkReal x1728=(sj6*x1727);
j10eval[0]=((IKabs(((((-1.0)*x1726))+(((-1.0)*r12*sj6)))))+(IKabs((((x1725*x1728))+((r12*x1726*x1727))+(((-1.0)*x1728))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1729=((1.0)*gconst88);
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x1729))+(((-1.0)*r11*sj6*x1729))+((cj6*gconst89*r00))+((gconst89*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r21))+(((-1.0)*r20*x1729)))),-1);
if(!x1731.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1730.value)+(((1.5707963267949)*(x1731.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j10);
IkReal x1733=IKcos(j10);
IkReal x1734=((1.0)*sj8);
IkReal x1735=(cj7*cj8);
IkReal x1736=(gconst88*x1732);
IkReal x1737=((1.0)*x1733);
IkReal x1738=((1.0)*x1732);
IkReal x1739=(gconst89*x1733);
IkReal x1740=(gconst88*x1737);
IkReal x1741=(gconst89*x1738);
evalcond[0]=(((r21*x1736))+(((-1.0)*r20*x1741))+(((-1.0)*r22*x1737)));
evalcond[1]=(cj6+(((-1.0)*r12*x1737))+(((-1.0)*r10*x1741))+((r11*x1736)));
evalcond[2]=(((r01*x1736))+(((-1.0)*sj6))+(((-1.0)*r00*x1741))+(((-1.0)*r02*x1737)));
evalcond[3]=((((-1.0)*cj7*x1734))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*x1740))+((r20*x1739))+(((-1.0)*r22*x1738)));
evalcond[4]=(((r00*x1739))+(((-1.0)*cj6*sj7*x1734))+((cj6*x1735))+(((-1.0)*r01*x1740))+(((-1.0)*r02*x1738)));
evalcond[5]=((((-1.0)*r11*x1740))+((sj6*x1735))+(((-1.0)*r12*x1738))+((r10*x1739))+(((-1.0)*sj6*sj7*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1742=((1.0)*gconst89);
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst88*r21*sj6))+(((-1.0)*r20*sj6*x1742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1742))+(((-1.0)*gconst88*r10)))),-1);
if(!x1744.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1743.value)+(((1.5707963267949)*(x1744.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1745=IKsin(j10);
IkReal x1746=IKcos(j10);
IkReal x1747=((1.0)*sj8);
IkReal x1748=(cj7*cj8);
IkReal x1749=(gconst88*x1745);
IkReal x1750=((1.0)*x1746);
IkReal x1751=((1.0)*x1745);
IkReal x1752=(gconst89*x1746);
IkReal x1753=(gconst88*x1750);
IkReal x1754=(gconst89*x1751);
evalcond[0]=((((-1.0)*r22*x1750))+((r21*x1749))+(((-1.0)*r20*x1754)));
evalcond[1]=((((-1.0)*r12*x1750))+cj6+(((-1.0)*r10*x1754))+((r11*x1749)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x1754))+((r01*x1749))+(((-1.0)*r02*x1750)));
evalcond[3]=((((-1.0)*cj7*x1747))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x1751))+((r20*x1752))+(((-1.0)*r21*x1753)));
evalcond[4]=((((-1.0)*cj6*sj7*x1747))+((cj6*x1748))+(((-1.0)*r01*x1753))+((r00*x1752))+(((-1.0)*r02*x1751)));
evalcond[5]=((((-1.0)*r11*x1753))+(((-1.0)*r12*x1751))+((sj6*x1748))+(((-1.0)*sj6*sj7*x1747))+((r10*x1752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1755=((1.0)*gconst89);
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x1755))+((cj6*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1755))+(((-1.0)*gconst88*r00)))),-1);
if(!x1757.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1756.value)+(((1.5707963267949)*(x1757.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1758=IKsin(j10);
IkReal x1759=IKcos(j10);
IkReal x1760=((1.0)*sj8);
IkReal x1761=(cj7*cj8);
IkReal x1762=(gconst88*x1758);
IkReal x1763=((1.0)*x1759);
IkReal x1764=((1.0)*x1758);
IkReal x1765=(gconst89*x1759);
IkReal x1766=(gconst88*x1763);
IkReal x1767=(gconst89*x1764);
evalcond[0]=(((r21*x1762))+(((-1.0)*r20*x1767))+(((-1.0)*r22*x1763)));
evalcond[1]=(cj6+((r11*x1762))+(((-1.0)*r12*x1763))+(((-1.0)*r10*x1767)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x1767))+(((-1.0)*r02*x1763))+((r01*x1762)));
evalcond[3]=(((r20*x1765))+(((-1.0)*r21*x1766))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1760))+(((-1.0)*r22*x1764)));
evalcond[4]=((((-1.0)*r01*x1766))+((cj6*x1761))+(((-1.0)*r02*x1764))+((r00*x1765))+(((-1.0)*cj6*sj7*x1760)));
evalcond[5]=((((-1.0)*sj6*sj7*x1760))+(((-1.0)*r11*x1766))+(((-1.0)*r12*x1764))+((r10*x1765))+((sj6*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x1768=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x1768;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x1768);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x1769=((1.0)*cj11);
IkReal x1770=((((-1.0)*r01*x1769))+(((-1.0)*r00*sj11)));
j10eval[0]=x1770;
j10eval[1]=((IKabs(((((-1.0)*r20*x1769))+((r21*sj11)))))+(IKabs(r22)));
j10eval[2]=IKsign(x1770);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x1771=cj11*cj11;
IkReal x1772=r11*r11;
IkReal x1773=(r11*sj11);
IkReal x1774=(cj11*r10);
IkReal x1775=((r12*r12)+x1772+(((-2.0)*x1773*x1774))+((x1771*(r10*r10)))+(((-1.0)*x1771*x1772)));
j10eval[0]=x1775;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1773))+x1774))));
j10eval[2]=IKsign(x1775);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1776=cj11*cj11;
IkReal x1777=r11*r11;
IkReal x1778=(cj11*r10);
IkReal x1779=(r11*sj11);
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(((((-1.0)*x1779))+x1778)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1778*x1779))+(r12*r12)+x1777+((x1776*(r10*r10)))+(((-1.0)*x1776*x1777)))),-1);
if(!x1781.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1780.value)+(((1.5707963267949)*(x1781.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1782=IKsin(j10);
IkReal x1783=IKcos(j10);
IkReal x1784=((1.0)*sj8);
IkReal x1785=(sj11*x1782);
IkReal x1786=((1.0)*x1783);
IkReal x1787=((1.0)*x1782);
IkReal x1788=(cj11*x1783);
evalcond[0]=((((-1.0)*r22*x1786))+((r21*x1785))+(((-1.0)*cj11*r20*x1787)));
evalcond[1]=((((-1.0)*cj11*r00*x1787))+(((-1.0)*r02*x1786))+((r01*x1785)));
evalcond[2]=(((r10*x1788))+(((-1.0)*r12*x1787))+(((-1.0)*r11*sj11*x1786)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1786))+((r11*x1785))+(((-1.0)*cj11*r10*x1787)));
evalcond[4]=((((-1.0)*r01*sj11*x1786))+((cj7*cj8))+(((-1.0)*sj7*x1784))+(((-1.0)*r02*x1787))+((r00*x1788)));
evalcond[5]=(((r20*x1788))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x1787))+(((-1.0)*cj7*x1784))+(((-1.0)*r21*sj11*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1789=((1.0)*cj11);
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x1789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1789))+(((-1.0)*r00*sj11)))),-1);
if(!x1791.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1790.value)+(((1.5707963267949)*(x1791.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1792=IKsin(j10);
IkReal x1793=IKcos(j10);
IkReal x1794=((1.0)*sj8);
IkReal x1795=(sj11*x1792);
IkReal x1796=((1.0)*x1793);
IkReal x1797=((1.0)*x1792);
IkReal x1798=(cj11*x1793);
evalcond[0]=((((-1.0)*r22*x1796))+((r21*x1795))+(((-1.0)*cj11*r20*x1797)));
evalcond[1]=((((-1.0)*cj11*r00*x1797))+(((-1.0)*r02*x1796))+((r01*x1795)));
evalcond[2]=((((-1.0)*r11*sj11*x1796))+((r10*x1798))+(((-1.0)*r12*x1797)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1796))+((r11*x1795))+(((-1.0)*cj11*r10*x1797)));
evalcond[4]=(((r00*x1798))+(((-1.0)*r01*sj11*x1796))+(((-1.0)*sj7*x1794))+((cj7*cj8))+(((-1.0)*r02*x1797)));
evalcond[5]=((((-1.0)*r22*x1797))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1794))+(((-1.0)*r21*sj11*x1796))+((r20*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1800.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1799.value)))+(x1800.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j10);
IkReal x1802=IKcos(j10);
IkReal x1803=((1.0)*sj8);
IkReal x1804=(sj11*x1801);
IkReal x1805=((1.0)*x1802);
IkReal x1806=((1.0)*x1801);
IkReal x1807=(cj11*x1802);
evalcond[0]=(((r21*x1804))+(((-1.0)*r22*x1805))+(((-1.0)*cj11*r20*x1806)));
evalcond[1]=((((-1.0)*cj11*r00*x1806))+(((-1.0)*r02*x1805))+((r01*x1804)));
evalcond[2]=((((-1.0)*r11*sj11*x1805))+(((-1.0)*r12*x1806))+((r10*x1807)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x1806))+((r11*x1804))+(((-1.0)*r12*x1805)));
evalcond[4]=(((cj7*cj8))+(((-1.0)*r02*x1806))+(((-1.0)*sj7*x1803))+((r00*x1807))+(((-1.0)*r01*sj11*x1805)));
evalcond[5]=((((-1.0)*r21*sj11*x1805))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1803))+((r20*x1807))+(((-1.0)*r22*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x1808=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x1808;
j10eval[1]=IKsign(x1808);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x1809=((1.0)*cj11);
IkReal x1810=((((-1.0)*r21*x1809))+(((-1.0)*r20*sj11)));
j10eval[0]=x1810;
j10eval[1]=((IKabs(((((-1.0)*r00*x1809))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x1810);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x1811=r11*r11;
IkReal x1812=cj11*cj11;
IkReal x1813=(cj11*r10);
IkReal x1814=(r11*sj11);
IkReal x1815=((((2.0)*x1813*x1814))+(((-1.0)*(r12*r12)))+((x1811*x1812))+(((-1.0)*x1811))+(((-1.0)*x1812*(r10*r10))));
j10eval[0]=x1815;
j10eval[1]=((IKabs((x1813+(((-1.0)*x1814)))))+(IKabs(r12)));
j10eval[2]=IKsign(x1815);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1816=r11*r11;
IkReal x1817=cj11*cj11;
IkReal x1818=(cj11*r10);
IkReal x1819=(r11*sj11);
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal((x1818+(((-1.0)*x1819)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign((((x1816*x1817))+(((-1.0)*(r12*r12)))+(((-1.0)*x1817*(r10*r10)))+(((2.0)*x1818*x1819))+(((-1.0)*x1816)))),-1);
if(!x1821.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1820.value)+(((1.5707963267949)*(x1821.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1822=IKsin(j10);
IkReal x1823=IKcos(j10);
IkReal x1824=((1.0)*cj7);
IkReal x1825=(sj11*x1822);
IkReal x1826=((1.0)*x1823);
IkReal x1827=((1.0)*x1822);
IkReal x1828=(cj11*x1823);
evalcond[0]=((((-1.0)*cj11*r20*x1827))+(((-1.0)*r22*x1826))+((r21*x1825)));
evalcond[1]=(((r01*x1825))+(((-1.0)*cj11*r00*x1827))+(((-1.0)*r02*x1826)));
evalcond[2]=(((r10*x1828))+(((-1.0)*r12*x1827))+(((-1.0)*r11*sj11*x1826)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x1826))+(((-1.0)*cj11*r10*x1827))+((r11*x1825)));
evalcond[4]=(((r00*x1828))+(((-1.0)*r02*x1827))+(((-1.0)*r01*sj11*x1826))+(((-1.0)*cj8*x1824))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x1827))+(((-1.0)*sj8*x1824))+(((-1.0)*r21*sj11*x1826))+((r20*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1829=((1.0)*cj11);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x1829))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x1829)))),-1);
if(!x1831.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1830.value)+(((1.5707963267949)*(x1831.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1832=IKsin(j10);
IkReal x1833=IKcos(j10);
IkReal x1834=((1.0)*cj7);
IkReal x1835=(sj11*x1832);
IkReal x1836=((1.0)*x1833);
IkReal x1837=((1.0)*x1832);
IkReal x1838=(cj11*x1833);
evalcond[0]=(((r21*x1835))+(((-1.0)*r22*x1836))+(((-1.0)*cj11*r20*x1837)));
evalcond[1]=(((r01*x1835))+(((-1.0)*cj11*r00*x1837))+(((-1.0)*r02*x1836)));
evalcond[2]=(((r10*x1838))+(((-1.0)*r12*x1837))+(((-1.0)*r11*sj11*x1836)));
evalcond[3]=((-1.0)+((r11*x1835))+(((-1.0)*cj11*r10*x1837))+(((-1.0)*r12*x1836)));
evalcond[4]=((((-1.0)*r01*sj11*x1836))+(((-1.0)*r02*x1837))+(((-1.0)*cj8*x1834))+((sj7*sj8))+((r00*x1838)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x1834))+(((-1.0)*r21*sj11*x1836))+((r20*x1838))+(((-1.0)*r22*x1837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x1840.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1839.value)+(((1.5707963267949)*(x1840.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1841=IKsin(j10);
IkReal x1842=IKcos(j10);
IkReal x1843=((1.0)*cj7);
IkReal x1844=(sj11*x1841);
IkReal x1845=((1.0)*x1842);
IkReal x1846=((1.0)*x1841);
IkReal x1847=(cj11*x1842);
evalcond[0]=((((-1.0)*r22*x1845))+(((-1.0)*cj11*r20*x1846))+((r21*x1844)));
evalcond[1]=((((-1.0)*r02*x1845))+((r01*x1844))+(((-1.0)*cj11*r00*x1846)));
evalcond[2]=(((r10*x1847))+(((-1.0)*r12*x1846))+(((-1.0)*r11*sj11*x1845)));
evalcond[3]=((-1.0)+(((-1.0)*cj11*r10*x1846))+(((-1.0)*r12*x1845))+((r11*x1844)));
evalcond[4]=((((-1.0)*r01*sj11*x1845))+(((-1.0)*r02*x1846))+((r00*x1847))+(((-1.0)*cj8*x1843))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x1846))+(((-1.0)*r21*sj11*x1845))+((r20*x1847))+(((-1.0)*sj8*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1848=((-1.0)*r00);
IkReal x1850 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1850)==0){
continue;
}
IkReal x1849=pow(x1850,-0.5);
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1848),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1851.value));
IkReal gconst91=(r01*x1849);
IkReal gconst92=(x1848*x1849);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x1852.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x1853=((-1.0)*r00);
IkReal x1854=x1849;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1853),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1855=((-1.0)*(x1856.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst91;
cj11=gconst92;
j11=x1855;
IkReal gconst90=x1855;
IkReal gconst91=(r01*x1854);
IkReal gconst92=(x1853*x1854);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1857=((1.0)*gconst91);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x1857))+((gconst92*r10*sj6))+((cj6*gconst92*r00))+(((-1.0)*cj6*r01*x1857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r21))+(((-1.0)*r20*x1857)))),-1);
if(!x1859.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1858.value)+(((1.5707963267949)*(x1859.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1860=IKsin(j10);
IkReal x1861=IKcos(j10);
IkReal x1862=(gconst91*r01);
IkReal x1863=((1.0)*sj8);
IkReal x1864=(cj7*cj8);
IkReal x1865=(gconst91*r21);
IkReal x1866=(gconst91*r11);
IkReal x1867=((1.0)*x1861);
IkReal x1868=((1.0)*x1860);
IkReal x1869=(gconst92*x1861);
IkReal x1870=(gconst92*x1868);
evalcond[0]=(((x1860*x1865))+(((-1.0)*r20*x1870))+(((-1.0)*r22*x1867)));
evalcond[1]=(cj6+((x1860*x1866))+(((-1.0)*r10*x1870))+(((-1.0)*r12*x1867)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x1867))+((x1860*x1862))+(((-1.0)*r00*x1870)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x1863))+(((-1.0)*x1865*x1867))+((r20*x1869))+(((-1.0)*r22*x1868)));
evalcond[4]=((((-1.0)*r02*x1868))+(((-1.0)*x1862*x1867))+((cj6*x1864))+(((-1.0)*cj6*sj7*x1863))+((r00*x1869)));
evalcond[5]=((((-1.0)*x1866*x1867))+((sj6*x1864))+(((-1.0)*r12*x1868))+((r10*x1869))+(((-1.0)*sj6*sj7*x1863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1871=((1.0)*gconst92);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x1871)))),-1);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst91*r21*sj6))+(((-1.0)*r20*sj6*x1871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1872.value)))+(x1873.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1874=IKsin(j10);
IkReal x1875=IKcos(j10);
IkReal x1876=(gconst91*r01);
IkReal x1877=((1.0)*sj8);
IkReal x1878=(cj7*cj8);
IkReal x1879=(gconst91*r21);
IkReal x1880=(gconst91*r11);
IkReal x1881=((1.0)*x1875);
IkReal x1882=((1.0)*x1874);
IkReal x1883=(gconst92*x1875);
IkReal x1884=(gconst92*x1882);
evalcond[0]=(((x1874*x1879))+(((-1.0)*r22*x1881))+(((-1.0)*r20*x1884)));
evalcond[1]=(((x1874*x1880))+cj6+(((-1.0)*r12*x1881))+(((-1.0)*r10*x1884)));
evalcond[2]=((((-1.0)*sj6))+((x1874*x1876))+(((-1.0)*r02*x1881))+(((-1.0)*r00*x1884)));
evalcond[3]=((((-1.0)*cj7*x1877))+(((-1.0)*x1879*x1881))+(((-1.0)*cj8*sj7))+((r20*x1883))+(((-1.0)*r22*x1882)));
evalcond[4]=((((-1.0)*x1876*x1881))+((cj6*x1878))+(((-1.0)*r02*x1882))+((r00*x1883))+(((-1.0)*cj6*sj7*x1877)));
evalcond[5]=(((sj6*x1878))+(((-1.0)*x1880*x1881))+(((-1.0)*r12*x1882))+(((-1.0)*sj6*sj7*x1877))+((r10*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1885=((-1.0)*r01);
IkReal x1887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1887)==0){
continue;
}
IkReal x1886=pow(x1887,-0.5);
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal(x1885),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1888.value))));
IkReal gconst94=(x1885*x1886);
IkReal gconst95=((1.0)*r00*x1886);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x1889.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x1890=((-1.0)*r01);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal(x1890),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
IkReal x1891=((1.0)*(x1893.value));
IkReal x1892=x1886;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x1891)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1891)));
IkReal gconst94=(x1890*x1892);
IkReal gconst95=((1.0)*r00*x1892);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=cj6;
j10eval[3]=r22;
j10eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x1894=((-1.0)*r01);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(x1894),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
IkReal x1895=((1.0)*(x1897.value));
IkReal x1896=x1886;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x1895)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1895)));
IkReal gconst94=(x1894*x1896);
IkReal gconst95=((1.0)*r00*x1896);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x1898=((-1.0)*r01);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(x1898),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
IkReal x1899=((1.0)*(x1901.value));
IkReal x1900=x1886;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x1899)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1899)));
IkReal gconst94=(x1898*x1900);
IkReal gconst95=((1.0)*r00*x1900);
IkReal x1902=r02*r02;
IkReal x1903=(r12*sj6);
IkReal x1904=x1886;
IkReal x1905=(cj6*x1904);
j10eval[0]=((IKabs(((((-1.0)*x1903))+(((-1.0)*cj6*r02)))))+(IKabs(((((-1.0)*x1905))+((r02*x1903*x1904))+((x1902*x1905))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1906=((1.0)*cj6);
IkReal x1907=((1.0)*sj6);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1907))+(((-1.0)*r02*x1906)))),IkReal((((cj6*gconst95*r00))+(((-1.0)*gconst94*r11*x1907))+((gconst95*r10*sj6))+(((-1.0)*gconst94*r01*x1906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x1909.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1908.value)+(((1.5707963267949)*(x1909.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1910=IKsin(j10);
IkReal x1911=IKcos(j10);
IkReal x1912=(gconst94*r21);
IkReal x1913=((1.0)*sj7);
IkReal x1914=(cj7*cj8);
IkReal x1915=(gconst94*r01);
IkReal x1916=(gconst94*r11);
IkReal x1917=((1.0)*x1911);
IkReal x1918=(gconst95*x1911);
IkReal x1919=((1.0)*x1910);
evalcond[0]=((((-1.0)*r22*x1917))+((x1910*x1912))+(((-1.0)*gconst95*r20*x1919)));
evalcond[1]=(cj6+(((-1.0)*r12*x1917))+((x1910*x1916))+(((-1.0)*gconst95*r10*x1919)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x1917))+((x1910*x1915))+(((-1.0)*gconst95*r00*x1919)));
evalcond[3]=((((-1.0)*cj8*x1913))+(((-1.0)*r22*x1919))+(((-1.0)*cj7*sj8))+((r20*x1918))+(((-1.0)*x1912*x1917)));
evalcond[4]=((((-1.0)*r02*x1919))+((r00*x1918))+((cj6*x1914))+(((-1.0)*x1915*x1917))+(((-1.0)*cj6*sj8*x1913)));
evalcond[5]=(((r10*x1918))+(((-1.0)*r12*x1919))+(((-1.0)*sj6*sj8*x1913))+(((-1.0)*x1916*x1917))+((sj6*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1920=((1.0)*gconst95);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst94*r21*sj6))+(((-1.0)*r20*sj6*x1920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1920))+(((-1.0)*gconst94*r10)))),-1);
if(!x1922.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1921.value)+(((1.5707963267949)*(x1922.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1923=IKsin(j10);
IkReal x1924=IKcos(j10);
IkReal x1925=(gconst94*r21);
IkReal x1926=((1.0)*sj7);
IkReal x1927=(cj7*cj8);
IkReal x1928=(gconst94*r01);
IkReal x1929=(gconst94*r11);
IkReal x1930=((1.0)*x1924);
IkReal x1931=(gconst95*x1924);
IkReal x1932=((1.0)*x1923);
evalcond[0]=((((-1.0)*r22*x1930))+((x1923*x1925))+(((-1.0)*gconst95*r20*x1932)));
evalcond[1]=((((-1.0)*gconst95*r10*x1932))+cj6+(((-1.0)*r12*x1930))+((x1923*x1929)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst95*r00*x1932))+((x1923*x1928))+(((-1.0)*r02*x1930)));
evalcond[3]=((((-1.0)*cj8*x1926))+(((-1.0)*r22*x1932))+(((-1.0)*x1925*x1930))+(((-1.0)*cj7*sj8))+((r20*x1931)));
evalcond[4]=((((-1.0)*x1928*x1930))+((r00*x1931))+(((-1.0)*cj6*sj8*x1926))+((cj6*x1927))+(((-1.0)*r02*x1932)));
evalcond[5]=(((sj6*x1927))+(((-1.0)*sj6*sj8*x1926))+(((-1.0)*r12*x1932))+(((-1.0)*x1929*x1930))+((r10*x1931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1933=((1.0)*gconst95);
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst94*r21))+(((-1.0)*cj6*r20*x1933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1933))+(((-1.0)*gconst94*r00)))),-1);
if(!x1935.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1934.value)+(((1.5707963267949)*(x1935.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1936=IKsin(j10);
IkReal x1937=IKcos(j10);
IkReal x1938=(gconst94*r21);
IkReal x1939=((1.0)*sj7);
IkReal x1940=(cj7*cj8);
IkReal x1941=(gconst94*r01);
IkReal x1942=(gconst94*r11);
IkReal x1943=((1.0)*x1937);
IkReal x1944=(gconst95*x1937);
IkReal x1945=((1.0)*x1936);
evalcond[0]=((((-1.0)*r22*x1943))+((x1936*x1938))+(((-1.0)*gconst95*r20*x1945)));
evalcond[1]=(cj6+((x1936*x1942))+(((-1.0)*r12*x1943))+(((-1.0)*gconst95*r10*x1945)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst95*r00*x1945))+(((-1.0)*r02*x1943))+((x1936*x1941)));
evalcond[3]=((((-1.0)*r22*x1945))+((r20*x1944))+(((-1.0)*cj8*x1939))+(((-1.0)*x1938*x1943))+(((-1.0)*cj7*sj8)));
evalcond[4]=(((cj6*x1940))+(((-1.0)*r02*x1945))+((r00*x1944))+(((-1.0)*x1941*x1943))+(((-1.0)*cj6*sj8*x1939)));
evalcond[5]=((((-1.0)*x1942*x1943))+((r10*x1944))+(((-1.0)*sj6*sj8*x1939))+((sj6*x1940))+(((-1.0)*r12*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1946=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x1946;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x1946);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1947=((1.0)*cj11);
IkReal x1948=((((-1.0)*r11*x1947))+(((-1.0)*r10*sj11)));
j10eval[0]=x1948;
j10eval[1]=IKsign(x1948);
j10eval[2]=((IKabs((((r21*sj11))+(((-1.0)*r20*x1947)))))+(IKabs(r22)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1949=r01*r01;
IkReal x1950=cj11*cj11;
IkReal x1951=(r01*sj11);
IkReal x1952=(cj11*r00);
IkReal x1953=((((2.0)*x1951*x1952))+(((-1.0)*(r02*r02)))+(((-1.0)*x1950*(r00*r00)))+(((-1.0)*x1949))+((x1949*x1950)));
j10eval[0]=x1953;
j10eval[1]=((IKabs(r02))+(IKabs((x1952+(((-1.0)*x1951))))));
j10eval[2]=IKsign(x1953);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1954=r01*r01;
IkReal x1955=cj11*cj11;
IkReal x1956=(r01*sj11);
IkReal x1957=(cj11*r00);
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal((x1957+(((-1.0)*x1956)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x1956*x1957))+(((-1.0)*x1955*(r00*r00)))+((x1954*x1955))+(((-1.0)*x1954)))),-1);
if(!x1959.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1958.value)+(((1.5707963267949)*(x1959.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1960=IKsin(j10);
IkReal x1961=IKcos(j10);
IkReal x1962=((1.0)*sj8);
IkReal x1963=(cj11*r00);
IkReal x1964=(sj11*x1960);
IkReal x1965=((1.0)*x1961);
IkReal x1966=((1.0)*x1960);
IkReal x1967=(cj11*x1961);
evalcond[0]=((((-1.0)*r22*x1965))+((r21*x1964))+(((-1.0)*cj11*r20*x1966)));
evalcond[1]=(((r11*x1964))+(((-1.0)*r12*x1965))+(((-1.0)*cj11*r10*x1966)));
evalcond[2]=((((-1.0)*r02*x1966))+(((-1.0)*r01*sj11*x1965))+((x1961*x1963)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x1965))+((r01*x1964))+(((-1.0)*x1963*x1966)));
evalcond[4]=((((-1.0)*r11*sj11*x1965))+((r10*x1967))+((cj7*cj8))+(((-1.0)*r12*x1966))+(((-1.0)*sj7*x1962)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x1965))+((r20*x1967))+(((-1.0)*cj7*x1962))+(((-1.0)*r22*x1966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1968=((1.0)*cj11);
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x1968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x1968)))),-1);
if(!x1970.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1969.value)+(((1.5707963267949)*(x1970.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1971=IKsin(j10);
IkReal x1972=IKcos(j10);
IkReal x1973=((1.0)*sj8);
IkReal x1974=(cj11*r00);
IkReal x1975=(sj11*x1971);
IkReal x1976=((1.0)*x1972);
IkReal x1977=((1.0)*x1971);
IkReal x1978=(cj11*x1972);
evalcond[0]=((((-1.0)*r22*x1976))+((r21*x1975))+(((-1.0)*cj11*r20*x1977)));
evalcond[1]=(((r11*x1975))+(((-1.0)*r12*x1976))+(((-1.0)*cj11*r10*x1977)));
evalcond[2]=(((x1972*x1974))+(((-1.0)*r02*x1977))+(((-1.0)*r01*sj11*x1976)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x1976))+(((-1.0)*x1974*x1977))+((r01*x1975)));
evalcond[4]=((((-1.0)*r11*sj11*x1976))+((r10*x1978))+((cj7*cj8))+(((-1.0)*r12*x1977))+(((-1.0)*sj7*x1973)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x1976))+((r20*x1978))+(((-1.0)*r22*x1977))+(((-1.0)*cj7*x1973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1981=IKsin(j10);
IkReal x1982=IKcos(j10);
IkReal x1983=((1.0)*sj8);
IkReal x1984=(cj11*r00);
IkReal x1985=(sj11*x1981);
IkReal x1986=((1.0)*x1982);
IkReal x1987=((1.0)*x1981);
IkReal x1988=(cj11*x1982);
evalcond[0]=(((r21*x1985))+(((-1.0)*cj11*r20*x1987))+(((-1.0)*r22*x1986)));
evalcond[1]=(((r11*x1985))+(((-1.0)*cj11*r10*x1987))+(((-1.0)*r12*x1986)));
evalcond[2]=((((-1.0)*r02*x1987))+(((-1.0)*r01*sj11*x1986))+((x1982*x1984)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x1986))+(((-1.0)*x1984*x1987))+((r01*x1985)));
evalcond[4]=((((-1.0)*sj7*x1983))+(((-1.0)*r11*sj11*x1986))+((r10*x1988))+((cj7*cj8))+(((-1.0)*r12*x1987)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x1986))+(((-1.0)*r22*x1987))+((r20*x1988))+(((-1.0)*cj7*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1989=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x1989;
j10eval[1]=IKsign(x1989);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1990=((1.0)*cj11);
IkReal x1991=((((-1.0)*r21*x1990))+(((-1.0)*r20*sj11)));
j10eval[0]=x1991;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x1990))+((r11*sj11))))));
j10eval[2]=IKsign(x1991);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1992=cj11*cj11;
IkReal x1993=r01*r01;
IkReal x1994=(cj11*r00);
IkReal x1995=(r01*sj11);
IkReal x1996=(x1993+(((-1.0)*x1992*x1993))+(r02*r02)+((x1992*(r00*r00)))+(((-2.0)*x1994*x1995)));
j10eval[0]=x1996;
j10eval[1]=((IKabs(r02))+(IKabs((x1994+(((-1.0)*x1995))))));
j10eval[2]=IKsign(x1996);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1997=cj11*cj11;
IkReal x1998=r01*r01;
IkReal x1999=(r01*sj11);
IkReal x2000=(cj11*r00);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal((x2000+(((-1.0)*x1999)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002=IKPowWithIntegerCheck(IKsign((((x1997*(r00*r00)))+x1998+(((-1.0)*x1997*x1998))+(((-2.0)*x1999*x2000))+(r02*r02))),-1);
if(!x2002.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2001.value)+(((1.5707963267949)*(x2002.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2003=IKsin(j10);
IkReal x2004=IKcos(j10);
IkReal x2005=((1.0)*cj7);
IkReal x2006=(cj11*r00);
IkReal x2007=(sj11*x2003);
IkReal x2008=((1.0)*x2004);
IkReal x2009=((1.0)*x2003);
IkReal x2010=(cj11*x2004);
evalcond[0]=(((r21*x2007))+(((-1.0)*r22*x2008))+(((-1.0)*cj11*r20*x2009)));
evalcond[1]=(((r11*x2007))+(((-1.0)*r12*x2008))+(((-1.0)*cj11*r10*x2009)));
evalcond[2]=((((-1.0)*r01*sj11*x2008))+(((-1.0)*r02*x2009))+((x2004*x2006)));
evalcond[3]=((1.0)+(((-1.0)*x2006*x2009))+((r01*x2007))+(((-1.0)*r02*x2008)));
evalcond[4]=((((-1.0)*r12*x2009))+((r10*x2010))+(((-1.0)*cj8*x2005))+(((-1.0)*r11*sj11*x2008))+((sj7*sj8)));
evalcond[5]=((((-1.0)*r22*x2009))+((r20*x2010))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x2005))+(((-1.0)*r21*sj11*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2011=((1.0)*cj11);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x2011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2011))+(((-1.0)*r20*sj11)))),-1);
if(!x2013.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2012.value)+(((1.5707963267949)*(x2013.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2014=IKsin(j10);
IkReal x2015=IKcos(j10);
IkReal x2016=((1.0)*cj7);
IkReal x2017=(cj11*r00);
IkReal x2018=(sj11*x2014);
IkReal x2019=((1.0)*x2015);
IkReal x2020=((1.0)*x2014);
IkReal x2021=(cj11*x2015);
evalcond[0]=(((r21*x2018))+(((-1.0)*cj11*r20*x2020))+(((-1.0)*r22*x2019)));
evalcond[1]=((((-1.0)*cj11*r10*x2020))+(((-1.0)*r12*x2019))+((r11*x2018)));
evalcond[2]=((((-1.0)*r01*sj11*x2019))+((x2015*x2017))+(((-1.0)*r02*x2020)));
evalcond[3]=((1.0)+((r01*x2018))+(((-1.0)*x2017*x2020))+(((-1.0)*r02*x2019)));
evalcond[4]=(((r10*x2021))+(((-1.0)*r12*x2020))+(((-1.0)*cj8*x2016))+((sj7*sj8))+(((-1.0)*r11*sj11*x2019)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x2020))+(((-1.0)*r21*sj11*x2019))+(((-1.0)*sj8*x2016))+((r20*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
CheckValue<IkReal> x2023=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x2023.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2022.value)+(((1.5707963267949)*(x2023.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2024=IKsin(j10);
IkReal x2025=IKcos(j10);
IkReal x2026=((1.0)*cj7);
IkReal x2027=(cj11*r00);
IkReal x2028=(sj11*x2024);
IkReal x2029=((1.0)*x2025);
IkReal x2030=((1.0)*x2024);
IkReal x2031=(cj11*x2025);
evalcond[0]=((((-1.0)*r22*x2029))+(((-1.0)*cj11*r20*x2030))+((r21*x2028)));
evalcond[1]=(((r11*x2028))+(((-1.0)*r12*x2029))+(((-1.0)*cj11*r10*x2030)));
evalcond[2]=((((-1.0)*r01*sj11*x2029))+((x2025*x2027))+(((-1.0)*r02*x2030)));
evalcond[3]=((1.0)+((r01*x2028))+(((-1.0)*r02*x2029))+(((-1.0)*x2027*x2030)));
evalcond[4]=(((r10*x2031))+(((-1.0)*r12*x2030))+(((-1.0)*cj8*x2026))+(((-1.0)*r11*sj11*x2029))+((sj7*sj8)));
evalcond[5]=((((-1.0)*r22*x2030))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2029))+((r20*x2031))+(((-1.0)*sj8*x2026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x2032=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2032);
rxp1_1=(px*r21);
rxp1_2=(r11*x2032);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2033=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2033);
rxp1_1=(px*r21);
rxp1_2=(r11*x2033);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2034=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2034);
rxp1_1=(px*r21);
rxp1_2=(r11*x2034);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=(((cj11*r10))+(((-1.0)*r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2037=IKPowWithIntegerCheck((((cj11*r10))+(((-1.0)*r11*sj11))),-1);
if(!x2037.valid){
continue;
}
IkReal x2035=x2037.value;
IkReal x2036=(sj6*x2035);
cj10array[0]=(((sj7*sj8*x2036))+(((-1.0)*cj7*cj8*x2036)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2038=IKsin(j10);
IkReal x2039=IKcos(j10);
IkReal x2040=(cj11*r20);
IkReal x2041=(sj11*x2038);
IkReal x2042=((1.0)*x2039);
IkReal x2043=((1.0)*x2038);
evalcond[0]=((-1.0)*r02*x2038);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x2042)));
evalcond[2]=(((r21*x2041))+(((-1.0)*x2040*x2043)));
evalcond[3]=(((r11*x2041))+(((-1.0)*cj11*r10*x2043)));
evalcond[4]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2042))+((x2039*x2040))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2045=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x2045.valid){
continue;
}
IkReal x2044=x2045.value;
cj10array[0]=(((cj7*sj8*x2044))+((cj8*sj7*x2044)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2046=IKsin(j10);
IkReal x2047=IKcos(j10);
IkReal x2048=(r11*sj11);
IkReal x2049=((1.0)*sj6);
IkReal x2050=((1.0)*x2047);
IkReal x2051=((1.0)*cj11*x2046);
evalcond[0]=((-1.0)*r02*x2046);
evalcond[1]=((((-1.0)*x2049))+(((-1.0)*r02*x2050)));
evalcond[2]=(((r21*sj11*x2046))+(((-1.0)*r20*x2051)));
evalcond[3]=((((-1.0)*r10*x2051))+((x2046*x2048)));
evalcond[4]=(((cj7*cj8*sj6))+(((-1.0)*sj7*sj8*x2049))+(((-1.0)*x2048*x2050))+((cj11*r10*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2052=IKPowWithIntegerCheck(r02,-1);
if(!x2052.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x2052.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2053=IKsin(j10);
IkReal x2054=IKcos(j10);
IkReal x2055=(cj11*r20);
IkReal x2056=((1.0)*sj7);
IkReal x2057=(cj11*r10);
IkReal x2058=(sj11*x2053);
IkReal x2059=((1.0)*x2053);
IkReal x2060=((1.0)*sj11*x2054);
evalcond[0]=((-1.0)*r02*x2053);
evalcond[1]=((((-1.0)*x2055*x2059))+((r21*x2058)));
evalcond[2]=(((r11*x2058))+(((-1.0)*x2057*x2059)));
evalcond[3]=(((x2054*x2055))+(((-1.0)*cj8*x2056))+(((-1.0)*r21*x2060))+(((-1.0)*cj7*sj8)));
evalcond[4]=((((-1.0)*sj6*sj8*x2056))+(((-1.0)*r11*x2060))+((cj7*cj8*sj6))+((x2054*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2061=((1.0)*sj11);
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x2061)))),-1);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x2061))+(((-1.0)*r11*sj6*x2061))+((cj11*cj6*r00))+((cj11*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2062.value)))+(x2063.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2064=IKsin(j10);
IkReal x2065=IKcos(j10);
IkReal x2066=((1.0)*sj8);
IkReal x2067=(cj7*cj8);
IkReal x2068=(sj11*x2064);
IkReal x2069=((1.0)*x2065);
IkReal x2070=((1.0)*x2064);
IkReal x2071=(cj11*x2065);
evalcond[0]=(((r21*x2068))+(((-1.0)*cj11*r20*x2070))+(((-1.0)*r22*x2069)));
evalcond[1]=((((-1.0)*r12*x2069))+cj6+((r11*x2068))+(((-1.0)*cj11*r10*x2070)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x2069))+(((-1.0)*cj11*r00*x2070))+((r01*x2068)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2069))+(((-1.0)*r22*x2070))+((r20*x2071))+(((-1.0)*cj7*x2066)));
evalcond[4]=((((-1.0)*cj6*sj7*x2066))+(((-1.0)*r02*x2070))+(((-1.0)*r01*sj11*x2069))+((cj6*x2067))+((r00*x2071)));
evalcond[5]=(((sj6*x2067))+(((-1.0)*r12*x2070))+(((-1.0)*sj6*sj7*x2066))+(((-1.0)*r11*sj11*x2069))+((r10*x2071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2072=((1.0)*cj11);
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x2072))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
CheckValue<IkReal> x2074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2072))+(((-1.0)*r10*sj11)))),-1);
if(!x2074.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2073.value)+(((1.5707963267949)*(x2074.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2075=IKsin(j10);
IkReal x2076=IKcos(j10);
IkReal x2077=((1.0)*sj8);
IkReal x2078=(cj7*cj8);
IkReal x2079=(sj11*x2075);
IkReal x2080=((1.0)*x2076);
IkReal x2081=((1.0)*x2075);
IkReal x2082=(cj11*x2076);
evalcond[0]=((((-1.0)*r22*x2080))+(((-1.0)*cj11*r20*x2081))+((r21*x2079)));
evalcond[1]=(cj6+((r11*x2079))+(((-1.0)*cj11*r10*x2081))+(((-1.0)*r12*x2080)));
evalcond[2]=((((-1.0)*r02*x2080))+(((-1.0)*sj6))+((r01*x2079))+(((-1.0)*cj11*r00*x2081)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x2081))+((r20*x2082))+(((-1.0)*cj7*x2077))+(((-1.0)*r21*sj11*x2080)));
evalcond[4]=((((-1.0)*r02*x2081))+(((-1.0)*cj6*sj7*x2077))+((cj6*x2078))+((r00*x2082))+(((-1.0)*r01*sj11*x2080)));
evalcond[5]=(((sj6*x2078))+(((-1.0)*sj6*sj7*x2077))+(((-1.0)*r11*sj11*x2080))+((r10*x2082))+(((-1.0)*r12*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2083=((1.0)*cj11);
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x2083)))),-1);
if(!x2085.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2084.value)+(((1.5707963267949)*(x2085.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2086=IKsin(j10);
IkReal x2087=IKcos(j10);
IkReal x2088=((1.0)*sj8);
IkReal x2089=(cj7*cj8);
IkReal x2090=(sj11*x2086);
IkReal x2091=((1.0)*x2087);
IkReal x2092=((1.0)*x2086);
IkReal x2093=(cj11*x2087);
evalcond[0]=((((-1.0)*cj11*r20*x2092))+((r21*x2090))+(((-1.0)*r22*x2091)));
evalcond[1]=(cj6+(((-1.0)*r12*x2091))+(((-1.0)*cj11*r10*x2092))+((r11*x2090)));
evalcond[2]=((((-1.0)*sj6))+((r01*x2090))+(((-1.0)*cj11*r00*x2092))+(((-1.0)*r02*x2091)));
evalcond[3]=(((r20*x2093))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2091))+(((-1.0)*cj7*x2088))+(((-1.0)*r22*x2092)));
evalcond[4]=(((cj6*x2089))+((r00*x2093))+(((-1.0)*cj6*sj7*x2088))+(((-1.0)*r02*x2092))+(((-1.0)*r01*sj11*x2091)));
evalcond[5]=((((-1.0)*r11*sj11*x2091))+(((-1.0)*sj6*sj7*x2088))+((r10*x2093))+(((-1.0)*r12*x2092))+((sj6*x2089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2094=cj11*cj11;
IkReal x2095=r21*r21;
IkReal x2096=(r21*sj11);
IkReal x2097=(cj7*sj8);
IkReal x2098=(cj11*r20);
IkReal x2099=(cj8*sj7);
IkReal x2100=((1.0)*r22);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(((((-1.0)*x2097*x2100))+(((-1.0)*x2099*x2100)))),IkReal((((x2098*x2099))+((x2097*x2098))+(((-1.0)*x2096*x2097))+(((-1.0)*x2096*x2099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2095+(((-2.0)*x2096*x2098))+((x2094*(r20*r20)))+(((-1.0)*x2094*x2095)))),-1);
if(!x2102.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x2103=IKsin(j10);
IkReal x2104=IKcos(j10);
IkReal x2105=((1.0)*r22);
IkReal x2106=(cj11*r20);
IkReal x2107=(r21*sj11);
evalcond[0]=((((-1.0)*x2103*x2106))+((x2103*x2107))+(((-1.0)*x2104*x2105)));
evalcond[1]=((((-1.0)*x2103*x2105))+(((-1.0)*cj8*sj7))+((x2104*x2106))+(((-1.0)*cj7*sj8))+(((-1.0)*x2104*x2107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2108=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x2108))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x2108))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x2108))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x2108))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x2108))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x2108))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2109=IKcos(j6);
IkReal x2110=IKsin(j6);
IkReal x2111=(cj11*r10);
IkReal x2112=((1.0)*sj7);
IkReal x2113=(r11*sj11);
IkReal x2114=((1.0)*cj10);
IkReal x2115=(r01*sj11);
IkReal x2116=((1.0)*sj10);
IkReal x2117=(cj11*r00);
IkReal x2118=(cj7*sj8);
IkReal x2119=(r10*sj11);
IkReal x2120=(cj11*r01);
IkReal x2121=(r00*sj11);
IkReal x2122=((0.425)*sj7);
IkReal x2123=(cj11*r11);
IkReal x2124=((0.39225)*cj8*sj7);
IkReal x2125=(cj8*x2109);
IkReal x2126=(cj8*x2110);
IkReal x2127=((1.0)*x2110);
evalcond[0]=(((sj10*x2113))+x2109+(((-1.0)*x2111*x2116))+(((-1.0)*r12*x2114)));
evalcond[1]=(((sj10*x2115))+(((-1.0)*x2116*x2117))+(((-1.0)*x2127))+(((-1.0)*r02*x2114)));
evalcond[2]=((((-1.0)*x2109*x2118))+x2121+x2120+(((-1.0)*x2112*x2125)));
evalcond[3]=((((-1.0)*x2118*x2127))+x2123+x2119+(((-1.0)*x2112*x2126)));
evalcond[4]=((((-1.0)*x2114*x2115))+((cj7*x2125))+(((-1.0)*sj8*x2109*x2112))+(((-1.0)*r02*x2116))+((cj10*x2117)));
evalcond[5]=(((cj7*x2126))+(((-1.0)*sj8*x2110*x2112))+(((-1.0)*r12*x2116))+((cj10*x2111))+(((-1.0)*x2113*x2114)));
evalcond[6]=((((-0.10915)*x2110))+(((-0.09465)*x2121))+(((-0.09465)*x2120))+((x2109*x2122))+((x2109*x2124))+(((0.39225)*x2109*x2118))+(((-1.0)*px)));
evalcond[7]=((((-0.09465)*x2123))+(((0.10915)*x2109))+(((-1.0)*py))+(((-0.09465)*x2119))+((x2110*x2122))+((x2110*x2124))+(((0.39225)*x2110*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2128=((1.0)*sj11);
IkReal x2129=((1.0)*cj11);
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2128))+(((-1.0)*r11*x2129)))),IkReal(((((-1.0)*r01*x2129))+(((-1.0)*r00*x2128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
CheckValue<IkReal> x2131=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))),-1);
if(!x2131.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2130.value)+(((1.5707963267949)*(x2131.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x2132=IKcos(j6);
IkReal x2133=IKsin(j6);
IkReal x2134=(r00*sj11);
IkReal x2135=((1.0)*cj8);
IkReal x2136=(cj7*sj8);
IkReal x2137=(r10*sj11);
IkReal x2138=(cj11*r01);
IkReal x2139=(cj11*r11);
IkReal x2140=((0.39225)*cj8*sj7);
IkReal x2141=(sj7*x2133);
IkReal x2142=(sj7*x2132);
evalcond[0]=((((-1.0)*x2135*x2142))+x2134+x2138+(((-1.0)*x2132*x2136)));
evalcond[1]=((((-1.0)*x2135*x2141))+x2137+x2139+(((-1.0)*x2133*x2136)));
evalcond[2]=(((x2132*x2140))+(((0.39225)*x2132*x2136))+(((-0.09465)*x2134))+(((-0.09465)*x2138))+(((-0.10915)*x2133))+(((-1.0)*px))+(((0.425)*x2142)));
evalcond[3]=(((x2133*x2140))+(((0.39225)*x2133*x2136))+(((-0.09465)*x2137))+(((-0.09465)*x2139))+(((0.10915)*x2132))+(((-1.0)*py))+(((0.425)*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2143=((1.0)*cj11);
IkReal x2144=((((-1.0)*r01*x2143))+(((-1.0)*r00*sj11)));
j10eval[0]=x2144;
j10eval[1]=IKsign(x2144);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x2143))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2145=((1.0)*cj11);
IkReal x2146=((((-1.0)*r11*x2145))+(((-1.0)*r10*sj11)));
j10eval[0]=x2146;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2145))))));
j10eval[2]=IKsign(x2146);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2147=((1.0)*sj11);
IkReal x2148=((((-1.0)*cj11*r21))+(((-1.0)*r20*x2147)));
j10eval[0]=x2148;
j10eval[1]=((IKabs(((((-1.0)*cj6*r01*x2147))+(((-1.0)*r11*sj6*x2147))+((cj11*cj6*r00))+((cj11*r10*sj6)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6))))));
j10eval[2]=IKsign(x2148);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2149=((-1.0)*r20);
IkReal x2151 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2151)==0){
continue;
}
IkReal x2150=pow(x2151,-0.5);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2149),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2152.value));
IkReal gconst79=(r21*x2150);
IkReal gconst80=(x2149*x2150);
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x2153.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x2154=((-1.0)*r20);
IkReal x2155=x2150;
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2154),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
IkReal x2156=((-1.0)*(x2157.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x2156;
IkReal gconst78=x2156;
IkReal gconst79=(r21*x2155);
IkReal gconst80=(x2154*x2155);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2158=((-1.0)*r20);
IkReal x2159=x2150;
CheckValue<IkReal> x2161 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2158),IKFAST_ATAN2_MAGTHRESH);
if(!x2161.valid){
continue;
}
IkReal x2160=((-1.0)*(x2161.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x2160;
IkReal gconst78=x2160;
IkReal gconst79=(r21*x2159);
IkReal gconst80=(x2158*x2159);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x2162=((-1.0)*r20);
IkReal x2163=x2150;
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2162),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
IkReal x2164=((-1.0)*(x2165.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst79;
cj11=gconst80;
j11=x2164;
IkReal gconst78=x2164;
IkReal gconst79=(r21*x2163);
IkReal gconst80=(x2162*x2163);
IkReal x2166=r22*r22;
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2166))),-1);
if(!x2169.valid){
continue;
}
IkReal x2167=x2169.value;
IkReal x2168=(x2166+((x2167*(r20*r20*r20*r20)))+((x2167*(r21*r21*r21*r21)))+(((2.0)*x2167*(r20*r20)*(r21*r21))));
j10eval[0]=x2168;
j10eval[1]=IKsign(x2168);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2170=(cj8*sj7);
IkReal x2171=(gconst79*r21);
IkReal x2172=(gconst80*r20);
IkReal x2173=((1.0)*r22);
IkReal x2174=(cj7*sj8);
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2172*x2172)+(x2171*x2171)+(((-2.0)*x2171*x2172)))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(((((-1.0)*x2170*x2173))+(((-1.0)*x2173*x2174)))),IkReal((((x2172*x2174))+((x2170*x2172))+(((-1.0)*x2171*x2174))+(((-1.0)*x2170*x2171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2175.value)))+(x2176.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j10);
IkReal x2178=IKcos(j10);
IkReal x2179=((1.0)*sj8);
IkReal x2180=(cj7*cj8);
IkReal x2181=(gconst79*x2177);
IkReal x2182=((1.0)*x2178);
IkReal x2183=(gconst80*x2178);
IkReal x2184=((1.0)*x2177);
IkReal x2185=(gconst80*x2184);
evalcond[0]=((((-1.0)*r20*x2185))+((r21*x2181))+(((-1.0)*r22*x2182)));
evalcond[1]=(cj6+(((-1.0)*r10*x2185))+((r11*x2181))+(((-1.0)*r12*x2182)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x2182))+((r01*x2181))+(((-1.0)*r00*x2185)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x2179))+(((-1.0)*gconst79*r21*x2182))+((r20*x2183))+(((-1.0)*r22*x2184)));
evalcond[4]=((((-1.0)*r02*x2184))+(((-1.0)*gconst79*r01*x2182))+((cj6*x2180))+(((-1.0)*cj6*sj7*x2179))+((r00*x2183)));
evalcond[5]=(((sj6*x2180))+(((-1.0)*gconst79*r11*x2182))+(((-1.0)*r12*x2184))+(((-1.0)*sj6*sj7*x2179))+((r10*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2186=((1.0)*gconst80);
CheckValue<IkReal> x2187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2186)))),-1);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x2186))+((gconst79*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2187.value)))+(x2188.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2189=IKsin(j10);
IkReal x2190=IKcos(j10);
IkReal x2191=((1.0)*sj8);
IkReal x2192=(cj7*cj8);
IkReal x2193=(gconst79*x2189);
IkReal x2194=((1.0)*x2190);
IkReal x2195=(gconst80*x2190);
IkReal x2196=((1.0)*x2189);
IkReal x2197=(gconst80*x2196);
evalcond[0]=((((-1.0)*r20*x2197))+((r21*x2193))+(((-1.0)*r22*x2194)));
evalcond[1]=(cj6+(((-1.0)*r10*x2197))+((r11*x2193))+(((-1.0)*r12*x2194)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x2194))+((r01*x2193))+(((-1.0)*r00*x2197)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst79*r21*x2194))+((r20*x2195))+(((-1.0)*cj7*x2191))+(((-1.0)*r22*x2196)));
evalcond[4]=((((-1.0)*cj6*sj7*x2191))+(((-1.0)*r02*x2196))+(((-1.0)*gconst79*r01*x2194))+((r00*x2195))+((cj6*x2192)));
evalcond[5]=(((sj6*x2192))+(((-1.0)*sj6*sj7*x2191))+(((-1.0)*r12*x2196))+(((-1.0)*gconst79*r11*x2194))+((r10*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2198=((1.0)*gconst80);
CheckValue<IkReal> x2199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2198))+(((-1.0)*gconst79*r00)))),-1);
if(!x2199.valid){
continue;
}
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2198))+((cj6*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2199.value)))+(x2200.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2201=IKsin(j10);
IkReal x2202=IKcos(j10);
IkReal x2203=((1.0)*sj8);
IkReal x2204=(cj7*cj8);
IkReal x2205=(gconst79*x2201);
IkReal x2206=((1.0)*x2202);
IkReal x2207=(gconst80*x2202);
IkReal x2208=((1.0)*x2201);
IkReal x2209=(gconst80*x2208);
evalcond[0]=((((-1.0)*r22*x2206))+(((-1.0)*r20*x2209))+((r21*x2205)));
evalcond[1]=(cj6+(((-1.0)*r10*x2209))+(((-1.0)*r12*x2206))+((r11*x2205)));
evalcond[2]=((((-1.0)*sj6))+((r01*x2205))+(((-1.0)*r00*x2209))+(((-1.0)*r02*x2206)));
evalcond[3]=((((-1.0)*cj7*x2203))+(((-1.0)*cj8*sj7))+((r20*x2207))+(((-1.0)*r22*x2208))+(((-1.0)*gconst79*r21*x2206)));
evalcond[4]=((((-1.0)*cj6*sj7*x2203))+((r00*x2207))+((cj6*x2204))+(((-1.0)*gconst79*r01*x2206))+(((-1.0)*r02*x2208)));
evalcond[5]=(((sj6*x2204))+(((-1.0)*gconst79*r11*x2206))+(((-1.0)*r12*x2208))+((r10*x2207))+(((-1.0)*sj6*sj7*x2203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2210=((-1.0)*r21);
IkReal x2212 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2212)==0){
continue;
}
IkReal x2211=pow(x2212,-0.5);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(x2210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2213.value))));
IkReal gconst82=(x2210*x2211);
IkReal gconst83=((1.0)*r20*x2211);
CheckValue<IkReal> x2214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2214.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x2214.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x2215=((-1.0)*r21);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(x2215),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal x2216=((1.0)*(x2218.value));
IkReal x2217=x2211;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x2216)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2216)));
IkReal gconst82=(x2215*x2217);
IkReal gconst83=((1.0)*r20*x2217);
IkReal x2219=r22*r22;
IkReal x2220=((1.0)*x2219);
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(((-1.0)+x2219),-1);
if(!x2224.valid){
continue;
}
IkReal x2221=x2224.value;
if((((1.0)+(((-1.0)*x2220)))) < -0.00001)
continue;
IkReal x2222=IKsqrt(((1.0)+(((-1.0)*x2220))));
IkReal x2223=(cj6*x2221*x2222);
j10eval[0]=((IKabs((x2223+(((-1.0)*x2220*x2223)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2225=((-1.0)*r21);
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal(x2225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
IkReal x2226=((1.0)*(x2228.value));
IkReal x2227=x2211;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x2226)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2226)));
IkReal gconst82=(x2225*x2227);
IkReal gconst83=((1.0)*r20*x2227);
IkReal x2229=r22*r22;
IkReal x2230=((1.0)*x2229);
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(((-1.0)+x2229),-1);
if(!x2234.valid){
continue;
}
IkReal x2231=x2234.value;
if((((1.0)+(((-1.0)*x2230)))) < -0.00001)
continue;
IkReal x2232=IKsqrt(((1.0)+(((-1.0)*x2230))));
IkReal x2233=(sj6*x2231*x2232);
j10eval[0]=((IKabs((x2233+(((-1.0)*x2230*x2233)))))+(IKabs((r22*sj6))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2235=((-1.0)*r21);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(x2235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
IkReal x2236=((1.0)*(x2238.value));
IkReal x2237=x2211;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst82;
cj11=gconst83;
j11=((3.14159265)+(((-1.0)*x2236)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2236)));
IkReal gconst82=(x2235*x2237);
IkReal gconst83=((1.0)*r20*x2237);
IkReal x2239=r22*r22;
CheckValue<IkReal> x2242=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2239))),-1);
if(!x2242.valid){
continue;
}
IkReal x2240=x2242.value;
IkReal x2241=((1.0)*x2240);
j10eval[0]=IKsign((((x2241*(r20*r20*r20*r20)))+x2239+((x2241*(r21*r21*r21*r21)))+(((2.0)*x2240*(r20*r20)*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2243=(cj7*sj8);
IkReal x2244=(gconst83*r20);
IkReal x2245=(gconst82*r21);
IkReal x2246=(cj8*sj7);
IkReal x2247=((1.0)*r22);
CheckValue<IkReal> x2248 = IKatan2WithCheck(IkReal(((((-1.0)*x2243*x2247))+(((-1.0)*x2246*x2247)))),IkReal((((x2243*x2244))+(((-1.0)*x2245*x2246))+((x2244*x2246))+(((-1.0)*x2243*x2245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2248.valid){
continue;
}
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2244*x2244)+(x2245*x2245)+(((-2.0)*x2244*x2245)))),-1);
if(!x2249.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2248.value)+(((1.5707963267949)*(x2249.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2250=IKsin(j10);
IkReal x2251=IKcos(j10);
IkReal x2252=(gconst83*r10);
IkReal x2253=((1.0)*sj8);
IkReal x2254=(cj7*cj8);
IkReal x2255=(gconst83*r20);
IkReal x2256=(gconst83*r00);
IkReal x2257=(gconst82*x2250);
IkReal x2258=((1.0)*x2250);
IkReal x2259=((1.0)*x2251);
evalcond[0]=((((-1.0)*x2255*x2258))+(((-1.0)*r22*x2259))+((r21*x2257)));
evalcond[1]=(cj6+(((-1.0)*r12*x2259))+(((-1.0)*x2252*x2258))+((r11*x2257)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x2256*x2258))+(((-1.0)*r02*x2259))+((r01*x2257)));
evalcond[3]=((((-1.0)*gconst82*r21*x2259))+(((-1.0)*cj7*x2253))+(((-1.0)*r22*x2258))+(((-1.0)*cj8*sj7))+((x2251*x2255)));
evalcond[4]=((((-1.0)*r02*x2258))+((cj6*x2254))+(((-1.0)*cj6*sj7*x2253))+(((-1.0)*gconst82*r01*x2259))+((x2251*x2256)));
evalcond[5]=((((-1.0)*gconst82*r11*x2259))+(((-1.0)*r12*x2258))+(((-1.0)*sj6*sj7*x2253))+((sj6*x2254))+((x2251*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2260=((1.0)*gconst83);
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst82*r21*sj6))+(((-1.0)*r20*sj6*x2260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
CheckValue<IkReal> x2262=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2260)))),-1);
if(!x2262.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2261.value)+(((1.5707963267949)*(x2262.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2263=IKsin(j10);
IkReal x2264=IKcos(j10);
IkReal x2265=(gconst83*r10);
IkReal x2266=((1.0)*sj8);
IkReal x2267=(cj7*cj8);
IkReal x2268=(gconst83*r20);
IkReal x2269=(gconst83*r00);
IkReal x2270=(gconst82*x2263);
IkReal x2271=((1.0)*x2263);
IkReal x2272=((1.0)*x2264);
evalcond[0]=(((r21*x2270))+(((-1.0)*r22*x2272))+(((-1.0)*x2268*x2271)));
evalcond[1]=(cj6+((r11*x2270))+(((-1.0)*x2265*x2271))+(((-1.0)*r12*x2272)));
evalcond[2]=(((r01*x2270))+(((-1.0)*sj6))+(((-1.0)*x2269*x2271))+(((-1.0)*r02*x2272)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst82*r21*x2272))+(((-1.0)*r22*x2271))+(((-1.0)*cj7*x2266))+((x2264*x2268)));
evalcond[4]=((((-1.0)*gconst82*r01*x2272))+(((-1.0)*cj6*sj7*x2266))+(((-1.0)*r02*x2271))+((cj6*x2267))+((x2264*x2269)));
evalcond[5]=(((sj6*x2267))+(((-1.0)*gconst82*r11*x2272))+(((-1.0)*sj6*sj7*x2266))+((x2264*x2265))+(((-1.0)*r12*x2271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2273=((1.0)*gconst83);
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2273))+(((-1.0)*gconst82*r00)))),-1);
if(!x2274.valid){
continue;
}
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2273))+((cj6*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2274.value)))+(x2275.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2276=IKsin(j10);
IkReal x2277=IKcos(j10);
IkReal x2278=(gconst83*r10);
IkReal x2279=((1.0)*sj8);
IkReal x2280=(cj7*cj8);
IkReal x2281=(gconst83*r20);
IkReal x2282=(gconst83*r00);
IkReal x2283=(gconst82*x2276);
IkReal x2284=((1.0)*x2276);
IkReal x2285=((1.0)*x2277);
evalcond[0]=((((-1.0)*x2281*x2284))+((r21*x2283))+(((-1.0)*r22*x2285)));
evalcond[1]=(((r11*x2283))+cj6+(((-1.0)*r12*x2285))+(((-1.0)*x2278*x2284)));
evalcond[2]=((((-1.0)*r02*x2285))+(((-1.0)*x2282*x2284))+(((-1.0)*sj6))+((r01*x2283)));
evalcond[3]=((((-1.0)*cj8*sj7))+((x2277*x2281))+(((-1.0)*cj7*x2279))+(((-1.0)*gconst82*r21*x2285))+(((-1.0)*r22*x2284)));
evalcond[4]=((((-1.0)*r02*x2284))+((cj6*x2280))+((x2277*x2282))+(((-1.0)*gconst82*r01*x2285))+(((-1.0)*cj6*sj7*x2279)));
evalcond[5]=((((-1.0)*r12*x2284))+((sj6*x2280))+(((-1.0)*sj6*sj7*x2279))+((x2277*x2278))+(((-1.0)*gconst82*r11*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2286=((-1.0)*r10);
IkReal x2288 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2288)==0){
continue;
}
IkReal x2287=pow(x2288,-0.5);
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2286),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2289.value));
IkReal gconst85=(r11*x2287);
IkReal gconst86=(x2286*x2287);
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x2290.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x2291=((-1.0)*r10);
IkReal x2292=x2287;
CheckValue<IkReal> x2294 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2291),IKFAST_ATAN2_MAGTHRESH);
if(!x2294.valid){
continue;
}
IkReal x2293=((-1.0)*(x2294.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst85;
cj11=gconst86;
j11=x2293;
IkReal gconst84=x2293;
IkReal gconst85=(r11*x2292);
IkReal gconst86=(x2291*x2292);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2295=((1.0)*gconst85);
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x2295))+(((-1.0)*cj6*r01*x2295))+((gconst86*r10*sj6))+((cj6*gconst86*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2295)))),-1);
if(!x2297.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2296.value)+(((1.5707963267949)*(x2297.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2298=IKsin(j10);
IkReal x2299=IKcos(j10);
IkReal x2300=(gconst85*r11);
IkReal x2301=((1.0)*sj8);
IkReal x2302=(cj7*cj8);
IkReal x2303=((1.0)*x2299);
IkReal x2304=(gconst85*x2298);
IkReal x2305=(gconst86*x2299);
IkReal x2306=((1.0)*x2298);
evalcond[0]=((((-1.0)*r22*x2303))+(((-1.0)*gconst86*r20*x2306))+((r21*x2304)));
evalcond[1]=((((-1.0)*gconst86*r10*x2306))+cj6+((x2298*x2300))+(((-1.0)*r12*x2303)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst86*r00*x2306))+((r01*x2304))+(((-1.0)*r02*x2303)));
evalcond[3]=((((-1.0)*r22*x2306))+(((-1.0)*cj8*sj7))+((r20*x2305))+(((-1.0)*cj7*x2301))+(((-1.0)*gconst85*r21*x2303)));
evalcond[4]=((((-1.0)*gconst85*r01*x2303))+(((-1.0)*cj6*sj7*x2301))+((r00*x2305))+((cj6*x2302))+(((-1.0)*r02*x2306)));
evalcond[5]=(((r10*x2305))+(((-1.0)*x2300*x2303))+(((-1.0)*sj6*sj7*x2301))+((sj6*x2302))+(((-1.0)*r12*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2307=((1.0)*gconst86);
CheckValue<IkReal> x2308 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2307))+((cj6*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2307))+(((-1.0)*gconst85*r00)))),-1);
if(!x2309.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2308.value)+(((1.5707963267949)*(x2309.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2310=IKsin(j10);
IkReal x2311=IKcos(j10);
IkReal x2312=(gconst85*r11);
IkReal x2313=((1.0)*sj8);
IkReal x2314=(cj7*cj8);
IkReal x2315=((1.0)*x2311);
IkReal x2316=(gconst85*x2310);
IkReal x2317=(gconst86*x2311);
IkReal x2318=((1.0)*x2310);
evalcond[0]=((((-1.0)*gconst86*r20*x2318))+(((-1.0)*r22*x2315))+((r21*x2316)));
evalcond[1]=(cj6+(((-1.0)*gconst86*r10*x2318))+(((-1.0)*r12*x2315))+((x2310*x2312)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst86*r00*x2318))+((r01*x2316))+(((-1.0)*r02*x2315)));
evalcond[3]=((((-1.0)*r22*x2318))+(((-1.0)*cj8*sj7))+(((-1.0)*gconst85*r21*x2315))+((r20*x2317))+(((-1.0)*cj7*x2313)));
evalcond[4]=((((-1.0)*cj6*sj7*x2313))+((cj6*x2314))+(((-1.0)*gconst85*r01*x2315))+((r00*x2317))+(((-1.0)*r02*x2318)));
evalcond[5]=(((r10*x2317))+(((-1.0)*sj6*sj7*x2313))+(((-1.0)*x2312*x2315))+(((-1.0)*r12*x2318))+((sj6*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2319=((-1.0)*r11);
IkReal x2321 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2321)==0){
continue;
}
IkReal x2320=pow(x2321,-0.5);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(x2319),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2322.value))));
IkReal gconst88=(x2319*x2320);
IkReal gconst89=((1.0)*r10*x2320);
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x2323.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x2324=((-1.0)*r11);
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(x2324),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
IkReal x2325=((1.0)*(x2327.value));
IkReal x2326=x2320;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x2325)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2325)));
IkReal gconst88=(x2324*x2326);
IkReal gconst89=((1.0)*r10*x2326);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x2328=((-1.0)*r11);
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(x2328),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
IkReal x2329=((1.0)*(x2331.value));
IkReal x2330=x2320;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x2329)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2329)));
IkReal gconst88=(x2328*x2330);
IkReal gconst89=((1.0)*r10*x2330);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=sj6;
j10eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2332=((-1.0)*r11);
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal(x2332),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
IkReal x2333=((1.0)*(x2335.value));
IkReal x2334=x2320;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst88;
cj11=gconst89;
j11=((3.14159265)+(((-1.0)*x2333)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2333)));
IkReal gconst88=(x2332*x2334);
IkReal gconst89=((1.0)*r10*x2334);
IkReal x2336=r12*r12;
IkReal x2337=(cj6*r02);
IkReal x2338=x2320;
IkReal x2339=(sj6*x2338);
j10eval[0]=((IKabs((((r12*x2337*x2338))+((x2336*x2339))+(((-1.0)*x2339)))))+(IKabs(((((-1.0)*r12*sj6))+(((-1.0)*x2337))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2340=((1.0)*gconst88);
CheckValue<IkReal> x2341 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst89*r00))+(((-1.0)*r11*sj6*x2340))+(((-1.0)*cj6*r01*x2340))+((gconst89*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2341.valid){
continue;
}
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2340))+(((-1.0)*gconst89*r21)))),-1);
if(!x2342.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2341.value)+(((1.5707963267949)*(x2342.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2343=IKsin(j10);
IkReal x2344=IKcos(j10);
IkReal x2345=((1.0)*sj8);
IkReal x2346=(cj7*cj8);
IkReal x2347=(gconst88*x2343);
IkReal x2348=((1.0)*x2344);
IkReal x2349=((1.0)*x2343);
IkReal x2350=(gconst89*x2344);
IkReal x2351=(gconst88*x2348);
IkReal x2352=(gconst89*x2349);
evalcond[0]=((((-1.0)*r20*x2352))+(((-1.0)*r22*x2348))+((r21*x2347)));
evalcond[1]=(cj6+((r11*x2347))+(((-1.0)*r10*x2352))+(((-1.0)*r12*x2348)));
evalcond[2]=((((-1.0)*sj6))+((r01*x2347))+(((-1.0)*r00*x2352))+(((-1.0)*r02*x2348)));
evalcond[3]=((((-1.0)*cj7*x2345))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*x2351))+(((-1.0)*r22*x2349))+((r20*x2350)));
evalcond[4]=(((r00*x2350))+(((-1.0)*cj6*sj7*x2345))+(((-1.0)*r01*x2351))+((cj6*x2346))+(((-1.0)*r02*x2349)));
evalcond[5]=(((r10*x2350))+((sj6*x2346))+(((-1.0)*sj6*sj7*x2345))+(((-1.0)*r11*x2351))+(((-1.0)*r12*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2353=((1.0)*gconst89);
CheckValue<IkReal> x2354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2353))+(((-1.0)*gconst88*r10)))),-1);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst88*r21*sj6))+(((-1.0)*r20*sj6*x2353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2355.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2354.value)))+(x2355.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2356=IKsin(j10);
IkReal x2357=IKcos(j10);
IkReal x2358=((1.0)*sj8);
IkReal x2359=(cj7*cj8);
IkReal x2360=(gconst88*x2356);
IkReal x2361=((1.0)*x2357);
IkReal x2362=((1.0)*x2356);
IkReal x2363=(gconst89*x2357);
IkReal x2364=(gconst88*x2361);
IkReal x2365=(gconst89*x2362);
evalcond[0]=((((-1.0)*r20*x2365))+(((-1.0)*r22*x2361))+((r21*x2360)));
evalcond[1]=(((r11*x2360))+(((-1.0)*r10*x2365))+cj6+(((-1.0)*r12*x2361)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x2365))+((r01*x2360))+(((-1.0)*r02*x2361)));
evalcond[3]=(((r20*x2363))+(((-1.0)*cj7*x2358))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*x2364))+(((-1.0)*r22*x2362)));
evalcond[4]=((((-1.0)*cj6*sj7*x2358))+((cj6*x2359))+(((-1.0)*r01*x2364))+((r00*x2363))+(((-1.0)*r02*x2362)));
evalcond[5]=(((r10*x2363))+((sj6*x2359))+(((-1.0)*sj6*sj7*x2358))+(((-1.0)*r11*x2364))+(((-1.0)*r12*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2366=((1.0)*gconst89);
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2366))+((cj6*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
CheckValue<IkReal> x2368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2366))+(((-1.0)*gconst88*r00)))),-1);
if(!x2368.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2367.value)+(((1.5707963267949)*(x2368.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2369=IKsin(j10);
IkReal x2370=IKcos(j10);
IkReal x2371=((1.0)*sj8);
IkReal x2372=(cj7*cj8);
IkReal x2373=(gconst88*x2369);
IkReal x2374=((1.0)*x2370);
IkReal x2375=((1.0)*x2369);
IkReal x2376=(gconst89*x2370);
IkReal x2377=(gconst88*x2374);
IkReal x2378=(gconst89*x2375);
evalcond[0]=((((-1.0)*r20*x2378))+(((-1.0)*r22*x2374))+((r21*x2373)));
evalcond[1]=((((-1.0)*r10*x2378))+cj6+(((-1.0)*r12*x2374))+((r11*x2373)));
evalcond[2]=((((-1.0)*r02*x2374))+(((-1.0)*sj6))+(((-1.0)*r00*x2378))+((r01*x2373)));
evalcond[3]=(((r20*x2376))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*x2377))+(((-1.0)*cj7*x2371))+(((-1.0)*r22*x2375)));
evalcond[4]=((((-1.0)*r02*x2375))+(((-1.0)*cj6*sj7*x2371))+(((-1.0)*r01*x2377))+((cj6*x2372))+((r00*x2376)));
evalcond[5]=(((r10*x2376))+(((-1.0)*sj6*sj7*x2371))+((sj6*x2372))+(((-1.0)*r12*x2375))+(((-1.0)*r11*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2379=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x2379;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x2379);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2380=((1.0)*cj11);
IkReal x2381=((((-1.0)*r01*x2380))+(((-1.0)*r00*sj11)));
j10eval[0]=x2381;
j10eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2380))+((r21*sj11))))));
j10eval[2]=IKsign(x2381);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2382=cj11*cj11;
IkReal x2383=r11*r11;
IkReal x2384=(r11*sj11);
IkReal x2385=(cj11*r10);
IkReal x2386=((r12*r12)+x2383+(((-1.0)*x2382*x2383))+((x2382*(r10*r10)))+(((-2.0)*x2384*x2385)));
j10eval[0]=x2386;
j10eval[1]=((IKabs(r12))+(IKabs((x2385+(((-1.0)*x2384))))));
j10eval[2]=IKsign(x2386);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2387=cj11*cj11;
IkReal x2388=r11*r11;
IkReal x2389=(cj11*r10);
IkReal x2390=(r11*sj11);
CheckValue<IkReal> x2391=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2389*x2390))+x2388+(((-1.0)*x2387*x2388))+((x2387*(r10*r10))))),-1);
if(!x2391.valid){
continue;
}
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal((x2389+(((-1.0)*x2390)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2391.value)))+(x2392.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2393=IKsin(j10);
IkReal x2394=IKcos(j10);
IkReal x2395=((1.0)*sj8);
IkReal x2396=(sj11*x2393);
IkReal x2397=((1.0)*x2394);
IkReal x2398=((1.0)*x2393);
IkReal x2399=(cj11*x2394);
evalcond[0]=((((-1.0)*cj11*r20*x2398))+(((-1.0)*r22*x2397))+((r21*x2396)));
evalcond[1]=((((-1.0)*r02*x2397))+((r01*x2396))+(((-1.0)*cj11*r00*x2398)));
evalcond[2]=((((-1.0)*r11*sj11*x2397))+((r10*x2399))+(((-1.0)*r12*x2398)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x2398))+((r11*x2396))+(((-1.0)*r12*x2397)));
evalcond[4]=((((-1.0)*sj7*x2395))+(((-1.0)*r02*x2398))+((r00*x2399))+((cj7*cj8))+(((-1.0)*r01*sj11*x2397)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r20*x2399))+(((-1.0)*cj7*x2395))+(((-1.0)*r22*x2398))+(((-1.0)*r21*sj11*x2397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2400=((1.0)*cj11);
CheckValue<IkReal> x2401 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x2400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2401.valid){
continue;
}
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2400))+(((-1.0)*r00*sj11)))),-1);
if(!x2402.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2401.value)+(((1.5707963267949)*(x2402.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2403=IKsin(j10);
IkReal x2404=IKcos(j10);
IkReal x2405=((1.0)*sj8);
IkReal x2406=(sj11*x2403);
IkReal x2407=((1.0)*x2404);
IkReal x2408=((1.0)*x2403);
IkReal x2409=(cj11*x2404);
evalcond[0]=((((-1.0)*cj11*r20*x2408))+((r21*x2406))+(((-1.0)*r22*x2407)));
evalcond[1]=(((r01*x2406))+(((-1.0)*r02*x2407))+(((-1.0)*cj11*r00*x2408)));
evalcond[2]=(((r10*x2409))+(((-1.0)*r11*sj11*x2407))+(((-1.0)*r12*x2408)));
evalcond[3]=((1.0)+((r11*x2406))+(((-1.0)*cj11*r10*x2408))+(((-1.0)*r12*x2407)));
evalcond[4]=(((r00*x2409))+(((-1.0)*sj7*x2405))+(((-1.0)*r02*x2408))+((cj7*cj8))+(((-1.0)*r01*sj11*x2407)));
evalcond[5]=(((r20*x2409))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2407))+(((-1.0)*cj7*x2405))+(((-1.0)*r22*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x2410.valid){
continue;
}
CheckValue<IkReal> x2411 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2411.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2410.value)))+(x2411.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2412=IKsin(j10);
IkReal x2413=IKcos(j10);
IkReal x2414=((1.0)*sj8);
IkReal x2415=(sj11*x2412);
IkReal x2416=((1.0)*x2413);
IkReal x2417=((1.0)*x2412);
IkReal x2418=(cj11*x2413);
evalcond[0]=(((r21*x2415))+(((-1.0)*r22*x2416))+(((-1.0)*cj11*r20*x2417)));
evalcond[1]=(((r01*x2415))+(((-1.0)*cj11*r00*x2417))+(((-1.0)*r02*x2416)));
evalcond[2]=(((r10*x2418))+(((-1.0)*r11*sj11*x2416))+(((-1.0)*r12*x2417)));
evalcond[3]=((1.0)+((r11*x2415))+(((-1.0)*r12*x2416))+(((-1.0)*cj11*r10*x2417)));
evalcond[4]=(((r00*x2418))+((cj7*cj8))+(((-1.0)*r02*x2417))+(((-1.0)*r01*sj11*x2416))+(((-1.0)*sj7*x2414)));
evalcond[5]=((((-1.0)*r21*sj11*x2416))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x2414))+((r20*x2418))+(((-1.0)*r22*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2419=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x2419;
j10eval[1]=IKsign(x2419);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2420=((1.0)*cj11);
IkReal x2421=((((-1.0)*r21*x2420))+(((-1.0)*r20*sj11)));
j10eval[0]=x2421;
j10eval[1]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x2420))))));
j10eval[2]=IKsign(x2421);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2422=r11*r11;
IkReal x2423=cj11*cj11;
IkReal x2424=(cj11*r10);
IkReal x2425=(r11*sj11);
IkReal x2426=((((-1.0)*x2423*(r10*r10)))+((x2422*x2423))+(((-1.0)*x2422))+(((-1.0)*(r12*r12)))+(((2.0)*x2424*x2425)));
j10eval[0]=x2426;
j10eval[1]=((IKabs(r12))+(IKabs((x2424+(((-1.0)*x2425))))));
j10eval[2]=IKsign(x2426);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2427=r11*r11;
IkReal x2428=cj11*cj11;
IkReal x2429=(cj11*r10);
IkReal x2430=(r11*sj11);
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(((((-1.0)*x2430))+x2429)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2428*(r10*r10)))+((x2427*x2428))+(((-1.0)*x2427))+(((-1.0)*(r12*r12)))+(((2.0)*x2429*x2430)))),-1);
if(!x2432.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2431.value)+(((1.5707963267949)*(x2432.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2433=IKsin(j10);
IkReal x2434=IKcos(j10);
IkReal x2435=((1.0)*cj7);
IkReal x2436=(sj11*x2433);
IkReal x2437=((1.0)*x2434);
IkReal x2438=((1.0)*x2433);
IkReal x2439=(cj11*x2434);
evalcond[0]=((((-1.0)*r22*x2437))+(((-1.0)*cj11*r20*x2438))+((r21*x2436)));
evalcond[1]=(((r01*x2436))+(((-1.0)*r02*x2437))+(((-1.0)*cj11*r00*x2438)));
evalcond[2]=((((-1.0)*r11*sj11*x2437))+(((-1.0)*r12*x2438))+((r10*x2439)));
evalcond[3]=((-1.0)+((r11*x2436))+(((-1.0)*cj11*r10*x2438))+(((-1.0)*r12*x2437)));
evalcond[4]=(((r00*x2439))+(((-1.0)*cj8*x2435))+(((-1.0)*r02*x2438))+((sj7*sj8))+(((-1.0)*r01*sj11*x2437)));
evalcond[5]=((((-1.0)*r22*x2438))+(((-1.0)*cj8*sj7))+((r20*x2439))+(((-1.0)*r21*sj11*x2437))+(((-1.0)*sj8*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2440=((1.0)*cj11);
CheckValue<IkReal> x2441=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2440))+(((-1.0)*r20*sj11)))),-1);
if(!x2441.valid){
continue;
}
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x2440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2441.value)))+(x2442.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2443=IKsin(j10);
IkReal x2444=IKcos(j10);
IkReal x2445=((1.0)*cj7);
IkReal x2446=(sj11*x2443);
IkReal x2447=((1.0)*x2444);
IkReal x2448=((1.0)*x2443);
IkReal x2449=(cj11*x2444);
evalcond[0]=((((-1.0)*r22*x2447))+(((-1.0)*cj11*r20*x2448))+((r21*x2446)));
evalcond[1]=(((r01*x2446))+(((-1.0)*cj11*r00*x2448))+(((-1.0)*r02*x2447)));
evalcond[2]=(((r10*x2449))+(((-1.0)*r11*sj11*x2447))+(((-1.0)*r12*x2448)));
evalcond[3]=((-1.0)+(((-1.0)*cj11*r10*x2448))+(((-1.0)*r12*x2447))+((r11*x2446)));
evalcond[4]=(((r00*x2449))+(((-1.0)*r01*sj11*x2447))+((sj7*sj8))+(((-1.0)*cj8*x2445))+(((-1.0)*r02*x2448)));
evalcond[5]=((((-1.0)*r21*sj11*x2447))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x2445))+(((-1.0)*r22*x2448))+((r20*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x2451.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2450.value)+(((1.5707963267949)*(x2451.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2452=IKsin(j10);
IkReal x2453=IKcos(j10);
IkReal x2454=((1.0)*cj7);
IkReal x2455=(sj11*x2452);
IkReal x2456=((1.0)*x2453);
IkReal x2457=((1.0)*x2452);
IkReal x2458=(cj11*x2453);
evalcond[0]=((((-1.0)*r22*x2456))+(((-1.0)*cj11*r20*x2457))+((r21*x2455)));
evalcond[1]=(((r01*x2455))+(((-1.0)*cj11*r00*x2457))+(((-1.0)*r02*x2456)));
evalcond[2]=((((-1.0)*r11*sj11*x2456))+((r10*x2458))+(((-1.0)*r12*x2457)));
evalcond[3]=((-1.0)+(((-1.0)*cj11*r10*x2457))+(((-1.0)*r12*x2456))+((r11*x2455)));
evalcond[4]=((((-1.0)*r01*sj11*x2456))+((r00*x2458))+((sj7*sj8))+(((-1.0)*r02*x2457))+(((-1.0)*cj8*x2454)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x2454))+(((-1.0)*r22*x2457))+((r20*x2458))+(((-1.0)*r21*sj11*x2456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2459=((-1.0)*r00);
IkReal x2461 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2461)==0){
continue;
}
IkReal x2460=pow(x2461,-0.5);
CheckValue<IkReal> x2462 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2459),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2462.value));
IkReal gconst91=(r01*x2460);
IkReal gconst92=(x2459*x2460);
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x2463.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x2464=((-1.0)*r00);
IkReal x2465=x2460;
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2464),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
IkReal x2466=((-1.0)*(x2467.value));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst91;
cj11=gconst92;
j11=x2466;
IkReal gconst90=x2466;
IkReal gconst91=(r01*x2465);
IkReal gconst92=(x2464*x2465);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2468=((1.0)*gconst91);
CheckValue<IkReal> x2469 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst92*r10*sj6))+((cj6*gconst92*r00))+(((-1.0)*cj6*r01*x2468))+(((-1.0)*r11*sj6*x2468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r21))+(((-1.0)*r20*x2468)))),-1);
if(!x2470.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2469.value)+(((1.5707963267949)*(x2470.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2471=IKsin(j10);
IkReal x2472=IKcos(j10);
IkReal x2473=(gconst91*r01);
IkReal x2474=((1.0)*sj8);
IkReal x2475=(cj7*cj8);
IkReal x2476=(gconst91*r21);
IkReal x2477=(gconst91*r11);
IkReal x2478=((1.0)*x2472);
IkReal x2479=((1.0)*x2471);
IkReal x2480=(gconst92*x2472);
IkReal x2481=(gconst92*x2479);
evalcond[0]=(((x2471*x2476))+(((-1.0)*r20*x2481))+(((-1.0)*r22*x2478)));
evalcond[1]=(((x2471*x2477))+(((-1.0)*r12*x2478))+cj6+(((-1.0)*r10*x2481)));
evalcond[2]=(((x2471*x2473))+(((-1.0)*sj6))+(((-1.0)*r00*x2481))+(((-1.0)*r02*x2478)));
evalcond[3]=((((-1.0)*cj7*x2474))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x2479))+(((-1.0)*x2476*x2478))+((r20*x2480)));
evalcond[4]=(((cj6*x2475))+(((-1.0)*x2473*x2478))+(((-1.0)*r02*x2479))+(((-1.0)*cj6*sj7*x2474))+((r00*x2480)));
evalcond[5]=((((-1.0)*x2477*x2478))+((sj6*x2475))+(((-1.0)*r12*x2479))+(((-1.0)*sj6*sj7*x2474))+((r10*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2482=((1.0)*gconst92);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst91*r21*sj6))+(((-1.0)*r20*sj6*x2482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2482)))),-1);
if(!x2484.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2483.value)+(((1.5707963267949)*(x2484.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2485=IKsin(j10);
IkReal x2486=IKcos(j10);
IkReal x2487=(gconst91*r01);
IkReal x2488=((1.0)*sj8);
IkReal x2489=(cj7*cj8);
IkReal x2490=(gconst91*r21);
IkReal x2491=(gconst91*r11);
IkReal x2492=((1.0)*x2486);
IkReal x2493=((1.0)*x2485);
IkReal x2494=(gconst92*x2486);
IkReal x2495=(gconst92*x2493);
evalcond[0]=(((x2485*x2490))+(((-1.0)*r20*x2495))+(((-1.0)*r22*x2492)));
evalcond[1]=(cj6+((x2485*x2491))+(((-1.0)*r10*x2495))+(((-1.0)*r12*x2492)));
evalcond[2]=((((-1.0)*sj6))+((x2485*x2487))+(((-1.0)*r00*x2495))+(((-1.0)*r02*x2492)));
evalcond[3]=((((-1.0)*x2490*x2492))+(((-1.0)*cj8*sj7))+((r20*x2494))+(((-1.0)*r22*x2493))+(((-1.0)*cj7*x2488)));
evalcond[4]=(((r00*x2494))+(((-1.0)*cj6*sj7*x2488))+((cj6*x2489))+(((-1.0)*r02*x2493))+(((-1.0)*x2487*x2492)));
evalcond[5]=((((-1.0)*x2491*x2492))+((sj6*x2489))+(((-1.0)*r12*x2493))+((r10*x2494))+(((-1.0)*sj6*sj7*x2488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2496=((-1.0)*r01);
IkReal x2498 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2498)==0){
continue;
}
IkReal x2497=pow(x2498,-0.5);
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal(x2496),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2499.value))));
IkReal gconst94=(x2496*x2497);
IkReal gconst95=((1.0)*r00*x2497);
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x2500.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x2501=((-1.0)*r01);
CheckValue<IkReal> x2504 = IKatan2WithCheck(IkReal(x2501),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2504.valid){
continue;
}
IkReal x2502=((1.0)*(x2504.value));
IkReal x2503=x2497;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x2502)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2502)));
IkReal gconst94=(x2501*x2503);
IkReal gconst95=((1.0)*r00*x2503);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=cj6;
j10eval[3]=r22;
j10eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x2505=((-1.0)*r01);
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal(x2505),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
IkReal x2506=((1.0)*(x2508.value));
IkReal x2507=x2497;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x2506)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2506)));
IkReal gconst94=(x2505*x2507);
IkReal gconst95=((1.0)*r00*x2507);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2509=((-1.0)*r01);
CheckValue<IkReal> x2512 = IKatan2WithCheck(IkReal(x2509),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2512.valid){
continue;
}
IkReal x2510=((1.0)*(x2512.value));
IkReal x2511=x2497;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=gconst94;
cj11=gconst95;
j11=((3.14159265)+(((-1.0)*x2510)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2510)));
IkReal gconst94=(x2509*x2511);
IkReal gconst95=((1.0)*r00*x2511);
IkReal x2513=r02*r02;
IkReal x2514=(r12*sj6);
IkReal x2515=x2497;
IkReal x2516=(cj6*x2515);
j10eval[0]=((IKabs((((r02*x2514*x2515))+(((-1.0)*x2516))+((x2513*x2516)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x2514))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2517=((1.0)*cj6);
IkReal x2518=((1.0)*sj6);
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2518))+(((-1.0)*r02*x2517)))),IkReal((((cj6*gconst95*r00))+(((-1.0)*gconst94*r01*x2517))+((gconst95*r10*sj6))+(((-1.0)*gconst94*r11*x2518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2519.value)))+(x2520.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2521=IKsin(j10);
IkReal x2522=IKcos(j10);
IkReal x2523=(gconst94*r21);
IkReal x2524=((1.0)*sj7);
IkReal x2525=(cj7*cj8);
IkReal x2526=(gconst94*r01);
IkReal x2527=(gconst94*r11);
IkReal x2528=((1.0)*x2522);
IkReal x2529=(gconst95*x2522);
IkReal x2530=((1.0)*x2521);
evalcond[0]=(((x2521*x2523))+(((-1.0)*r22*x2528))+(((-1.0)*gconst95*r20*x2530)));
evalcond[1]=(cj6+(((-1.0)*r12*x2528))+(((-1.0)*gconst95*r10*x2530))+((x2521*x2527)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst95*r00*x2530))+(((-1.0)*r02*x2528))+((x2521*x2526)));
evalcond[3]=((((-1.0)*x2523*x2528))+(((-1.0)*r22*x2530))+(((-1.0)*cj8*x2524))+(((-1.0)*cj7*sj8))+((r20*x2529)));
evalcond[4]=(((cj6*x2525))+(((-1.0)*r02*x2530))+(((-1.0)*cj6*sj8*x2524))+((r00*x2529))+(((-1.0)*x2526*x2528)));
evalcond[5]=((((-1.0)*x2527*x2528))+((sj6*x2525))+(((-1.0)*sj6*sj8*x2524))+(((-1.0)*r12*x2530))+((r10*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2531=((1.0)*gconst95);
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst94*r21*sj6))+(((-1.0)*r20*sj6*x2531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2531)))),-1);
if(!x2533.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2532.value)+(((1.5707963267949)*(x2533.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2534=IKsin(j10);
IkReal x2535=IKcos(j10);
IkReal x2536=(gconst94*r21);
IkReal x2537=((1.0)*sj7);
IkReal x2538=(cj7*cj8);
IkReal x2539=(gconst94*r01);
IkReal x2540=(gconst94*r11);
IkReal x2541=((1.0)*x2535);
IkReal x2542=(gconst95*x2535);
IkReal x2543=((1.0)*x2534);
evalcond[0]=((((-1.0)*gconst95*r20*x2543))+(((-1.0)*r22*x2541))+((x2534*x2536)));
evalcond[1]=((((-1.0)*r12*x2541))+cj6+((x2534*x2540))+(((-1.0)*gconst95*r10*x2543)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst95*r00*x2543))+(((-1.0)*r02*x2541))+((x2534*x2539)));
evalcond[3]=((((-1.0)*x2536*x2541))+(((-1.0)*cj8*x2537))+((r20*x2542))+(((-1.0)*cj7*sj8))+(((-1.0)*r22*x2543)));
evalcond[4]=(((cj6*x2538))+(((-1.0)*x2539*x2541))+((r00*x2542))+(((-1.0)*r02*x2543))+(((-1.0)*cj6*sj8*x2537)));
evalcond[5]=(((sj6*x2538))+(((-1.0)*r12*x2543))+(((-1.0)*sj6*sj8*x2537))+(((-1.0)*x2540*x2541))+((r10*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2544=((1.0)*gconst95);
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst94*r21))+(((-1.0)*cj6*r20*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2544)))),-1);
if(!x2546.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2545.value)+(((1.5707963267949)*(x2546.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2547=IKsin(j10);
IkReal x2548=IKcos(j10);
IkReal x2549=(gconst94*r21);
IkReal x2550=((1.0)*sj7);
IkReal x2551=(cj7*cj8);
IkReal x2552=(gconst94*r01);
IkReal x2553=(gconst94*r11);
IkReal x2554=((1.0)*x2548);
IkReal x2555=(gconst95*x2548);
IkReal x2556=((1.0)*x2547);
evalcond[0]=(((x2547*x2549))+(((-1.0)*gconst95*r20*x2556))+(((-1.0)*r22*x2554)));
evalcond[1]=(((x2547*x2553))+cj6+(((-1.0)*r12*x2554))+(((-1.0)*gconst95*r10*x2556)));
evalcond[2]=((((-1.0)*sj6))+((x2547*x2552))+(((-1.0)*gconst95*r00*x2556))+(((-1.0)*r02*x2554)));
evalcond[3]=((((-1.0)*x2549*x2554))+((r20*x2555))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x2550))+(((-1.0)*r22*x2556)));
evalcond[4]=(((cj6*x2551))+(((-1.0)*cj6*sj8*x2550))+((r00*x2555))+(((-1.0)*x2552*x2554))+(((-1.0)*r02*x2556)));
evalcond[5]=((((-1.0)*r12*x2556))+((sj6*x2551))+(((-1.0)*sj6*sj8*x2550))+(((-1.0)*x2553*x2554))+((r10*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x2557=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x2557;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x2557);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x2558=((1.0)*cj11);
IkReal x2559=((((-1.0)*r11*x2558))+(((-1.0)*r10*sj11)));
j10eval[0]=x2559;
j10eval[1]=IKsign(x2559);
j10eval[2]=((IKabs(r22))+(IKabs((((r21*sj11))+(((-1.0)*r20*x2558))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x2560=r01*r01;
IkReal x2561=cj11*cj11;
IkReal x2562=(r01*sj11);
IkReal x2563=(cj11*r00);
IkReal x2564=(((x2560*x2561))+(((-1.0)*x2560))+(((-1.0)*(r02*r02)))+(((-1.0)*x2561*(r00*r00)))+(((2.0)*x2562*x2563)));
j10eval[0]=x2564;
j10eval[1]=((IKabs(r02))+(IKabs((x2563+(((-1.0)*x2562))))));
j10eval[2]=IKsign(x2564);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2565=r01*r01;
IkReal x2566=cj11*cj11;
IkReal x2567=(r01*sj11);
IkReal x2568=(cj11*r00);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((x2568+(((-1.0)*x2567)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2565))+(((-1.0)*(r02*r02)))+((x2565*x2566))+(((-1.0)*x2566*(r00*r00)))+(((2.0)*x2567*x2568)))),-1);
if(!x2570.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2569.value)+(((1.5707963267949)*(x2570.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2571=IKsin(j10);
IkReal x2572=IKcos(j10);
IkReal x2573=((1.0)*sj8);
IkReal x2574=(cj11*r00);
IkReal x2575=(sj11*x2571);
IkReal x2576=((1.0)*x2572);
IkReal x2577=((1.0)*x2571);
IkReal x2578=(cj11*x2572);
evalcond[0]=(((r21*x2575))+(((-1.0)*cj11*r20*x2577))+(((-1.0)*r22*x2576)));
evalcond[1]=((((-1.0)*r12*x2576))+((r11*x2575))+(((-1.0)*cj11*r10*x2577)));
evalcond[2]=(((x2572*x2574))+(((-1.0)*r01*sj11*x2576))+(((-1.0)*r02*x2577)));
evalcond[3]=((-1.0)+((r01*x2575))+(((-1.0)*r02*x2576))+(((-1.0)*x2574*x2577)));
evalcond[4]=(((r10*x2578))+(((-1.0)*r12*x2577))+(((-1.0)*r11*sj11*x2576))+(((-1.0)*sj7*x2573))+((cj7*cj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2576))+((r20*x2578))+(((-1.0)*r22*x2577))+(((-1.0)*cj7*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2579=((1.0)*cj11);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x2579)))),-1);
if(!x2580.valid){
continue;
}
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x2579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2580.value)))+(x2581.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2582=IKsin(j10);
IkReal x2583=IKcos(j10);
IkReal x2584=((1.0)*sj8);
IkReal x2585=(cj11*r00);
IkReal x2586=(sj11*x2582);
IkReal x2587=((1.0)*x2583);
IkReal x2588=((1.0)*x2582);
IkReal x2589=(cj11*x2583);
evalcond[0]=((((-1.0)*cj11*r20*x2588))+((r21*x2586))+(((-1.0)*r22*x2587)));
evalcond[1]=((((-1.0)*cj11*r10*x2588))+((r11*x2586))+(((-1.0)*r12*x2587)));
evalcond[2]=((((-1.0)*r01*sj11*x2587))+(((-1.0)*r02*x2588))+((x2583*x2585)));
evalcond[3]=((-1.0)+((r01*x2586))+(((-1.0)*x2585*x2588))+(((-1.0)*r02*x2587)));
evalcond[4]=(((cj7*cj8))+((r10*x2589))+(((-1.0)*r11*sj11*x2587))+(((-1.0)*sj7*x2584))+(((-1.0)*r12*x2588)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r20*x2589))+(((-1.0)*r21*sj11*x2587))+(((-1.0)*cj7*x2584))+(((-1.0)*r22*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x2590.valid){
continue;
}
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2590.value)))+(x2591.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2592=IKsin(j10);
IkReal x2593=IKcos(j10);
IkReal x2594=((1.0)*sj8);
IkReal x2595=(cj11*r00);
IkReal x2596=(sj11*x2592);
IkReal x2597=((1.0)*x2593);
IkReal x2598=((1.0)*x2592);
IkReal x2599=(cj11*x2593);
evalcond[0]=((((-1.0)*r22*x2597))+((r21*x2596))+(((-1.0)*cj11*r20*x2598)));
evalcond[1]=((((-1.0)*cj11*r10*x2598))+((r11*x2596))+(((-1.0)*r12*x2597)));
evalcond[2]=((((-1.0)*r01*sj11*x2597))+(((-1.0)*r02*x2598))+((x2593*x2595)));
evalcond[3]=((-1.0)+((r01*x2596))+(((-1.0)*r02*x2597))+(((-1.0)*x2595*x2598)));
evalcond[4]=((((-1.0)*r11*sj11*x2597))+((r10*x2599))+((cj7*cj8))+(((-1.0)*r12*x2598))+(((-1.0)*sj7*x2594)));
evalcond[5]=((((-1.0)*r22*x2598))+(((-1.0)*cj8*sj7))+((r20*x2599))+(((-1.0)*cj7*x2594))+(((-1.0)*r21*sj11*x2597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2600=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x2600;
j10eval[1]=IKsign(x2600);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2601=((1.0)*cj11);
IkReal x2602=((((-1.0)*r20*sj11))+(((-1.0)*r21*x2601)));
j10eval[0]=x2602;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x2601))))));
j10eval[2]=IKsign(x2602);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2603=cj11*cj11;
IkReal x2604=r01*r01;
IkReal x2605=(cj11*r00);
IkReal x2606=(r01*sj11);
IkReal x2607=(((x2603*(r00*r00)))+(((-2.0)*x2605*x2606))+(r02*r02)+(((-1.0)*x2603*x2604))+x2604);
j10eval[0]=x2607;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2606))+x2605))));
j10eval[2]=IKsign(x2607);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2608=cj11*cj11;
IkReal x2609=r01*r01;
IkReal x2610=(r01*sj11);
IkReal x2611=(cj11*r00);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2608*x2609))+(r02*r02)+(((-2.0)*x2610*x2611))+((x2608*(r00*r00)))+x2609)),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal(((((-1.0)*x2610))+x2611)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2612.value)))+(x2613.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2614=IKsin(j10);
IkReal x2615=IKcos(j10);
IkReal x2616=((1.0)*cj7);
IkReal x2617=(cj11*r00);
IkReal x2618=(sj11*x2614);
IkReal x2619=((1.0)*x2615);
IkReal x2620=((1.0)*x2614);
IkReal x2621=(cj11*x2615);
evalcond[0]=((((-1.0)*cj11*r20*x2620))+(((-1.0)*r22*x2619))+((r21*x2618)));
evalcond[1]=((((-1.0)*cj11*r10*x2620))+(((-1.0)*r12*x2619))+((r11*x2618)));
evalcond[2]=(((x2615*x2617))+(((-1.0)*r01*sj11*x2619))+(((-1.0)*r02*x2620)));
evalcond[3]=((1.0)+((r01*x2618))+(((-1.0)*x2617*x2620))+(((-1.0)*r02*x2619)));
evalcond[4]=((((-1.0)*r11*sj11*x2619))+(((-1.0)*r12*x2620))+(((-1.0)*cj8*x2616))+((r10*x2621))+((sj7*sj8)));
evalcond[5]=(((r20*x2621))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2619))+(((-1.0)*r22*x2620))+(((-1.0)*sj8*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2622=((1.0)*cj11);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x2622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x2622)))),-1);
if(!x2624.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2623.value)+(((1.5707963267949)*(x2624.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2625=IKsin(j10);
IkReal x2626=IKcos(j10);
IkReal x2627=((1.0)*cj7);
IkReal x2628=(cj11*r00);
IkReal x2629=(sj11*x2625);
IkReal x2630=((1.0)*x2626);
IkReal x2631=((1.0)*x2625);
IkReal x2632=(cj11*x2626);
evalcond[0]=((((-1.0)*cj11*r20*x2631))+((r21*x2629))+(((-1.0)*r22*x2630)));
evalcond[1]=((((-1.0)*cj11*r10*x2631))+((r11*x2629))+(((-1.0)*r12*x2630)));
evalcond[2]=((((-1.0)*r02*x2631))+(((-1.0)*r01*sj11*x2630))+((x2626*x2628)));
evalcond[3]=((1.0)+((r01*x2629))+(((-1.0)*r02*x2630))+(((-1.0)*x2628*x2631)));
evalcond[4]=(((r10*x2632))+(((-1.0)*cj8*x2627))+(((-1.0)*r12*x2631))+((sj7*sj8))+(((-1.0)*r11*sj11*x2630)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2630))+((r20*x2632))+(((-1.0)*sj8*x2627))+(((-1.0)*r22*x2631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
CheckValue<IkReal> x2634=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x2634.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2633.value)+(((1.5707963267949)*(x2634.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2635=IKsin(j10);
IkReal x2636=IKcos(j10);
IkReal x2637=((1.0)*cj7);
IkReal x2638=(cj11*r00);
IkReal x2639=(sj11*x2635);
IkReal x2640=((1.0)*x2636);
IkReal x2641=((1.0)*x2635);
IkReal x2642=(cj11*x2636);
evalcond[0]=((((-1.0)*r22*x2640))+((r21*x2639))+(((-1.0)*cj11*r20*x2641)));
evalcond[1]=((((-1.0)*r12*x2640))+((r11*x2639))+(((-1.0)*cj11*r10*x2641)));
evalcond[2]=((((-1.0)*r01*sj11*x2640))+(((-1.0)*r02*x2641))+((x2636*x2638)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2640))+((r01*x2639))+(((-1.0)*x2638*x2641)));
evalcond[4]=((((-1.0)*r12*x2641))+(((-1.0)*cj8*x2637))+((r10*x2642))+((sj7*sj8))+(((-1.0)*r11*sj11*x2640)));
evalcond[5]=((((-1.0)*r22*x2641))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x2637))+(((-1.0)*r21*sj11*x2640))+((r20*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x2643=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2643);
rxp1_1=(px*r21);
rxp1_2=(r11*x2643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2644=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2644);
rxp1_1=(px*r21);
rxp1_2=(r11*x2644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x2645=((-1.0)*px);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2645);
rxp1_1=(px*r21);
rxp1_2=(r11*x2645);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=(((cj11*r10))+(((-1.0)*r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2648=IKPowWithIntegerCheck((((cj11*r10))+(((-1.0)*r11*sj11))),-1);
if(!x2648.valid){
continue;
}
IkReal x2646=x2648.value;
IkReal x2647=(sj6*x2646);
cj10array[0]=((((-1.0)*cj7*cj8*x2647))+((sj7*sj8*x2647)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2649=IKsin(j10);
IkReal x2650=IKcos(j10);
IkReal x2651=(cj11*r20);
IkReal x2652=(sj11*x2649);
IkReal x2653=((1.0)*x2650);
IkReal x2654=((1.0)*x2649);
evalcond[0]=((-1.0)*r02*x2649);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x2653)));
evalcond[2]=((((-1.0)*x2651*x2654))+((r21*x2652)));
evalcond[3]=(((r11*x2652))+(((-1.0)*cj11*r10*x2654)));
evalcond[4]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2653))+(((-1.0)*cj7*sj8))+((x2650*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x2656.valid){
continue;
}
IkReal x2655=x2656.value;
cj10array[0]=(((cj7*sj8*x2655))+((cj8*sj7*x2655)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2657=IKsin(j10);
IkReal x2658=IKcos(j10);
IkReal x2659=(r11*sj11);
IkReal x2660=((1.0)*sj6);
IkReal x2661=((1.0)*x2658);
IkReal x2662=((1.0)*cj11*x2657);
evalcond[0]=((-1.0)*r02*x2657);
evalcond[1]=((((-1.0)*r02*x2661))+(((-1.0)*x2660)));
evalcond[2]=((((-1.0)*r20*x2662))+((r21*sj11*x2657)));
evalcond[3]=(((x2657*x2659))+(((-1.0)*r10*x2662)));
evalcond[4]=(((cj11*r10*x2658))+((cj7*cj8*sj6))+(((-1.0)*x2659*x2661))+(((-1.0)*sj7*sj8*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x2663=IKPowWithIntegerCheck(r02,-1);
if(!x2663.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x2663.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x2664=IKsin(j10);
IkReal x2665=IKcos(j10);
IkReal x2666=(cj11*r20);
IkReal x2667=((1.0)*sj7);
IkReal x2668=(cj11*r10);
IkReal x2669=(sj11*x2664);
IkReal x2670=((1.0)*x2664);
IkReal x2671=((1.0)*sj11*x2665);
evalcond[0]=((-1.0)*r02*x2664);
evalcond[1]=(((r21*x2669))+(((-1.0)*x2666*x2670)));
evalcond[2]=((((-1.0)*x2668*x2670))+((r11*x2669)));
evalcond[3]=((((-1.0)*cj8*x2667))+(((-1.0)*cj7*sj8))+(((-1.0)*r21*x2671))+((x2665*x2666)));
evalcond[4]=((((-1.0)*r11*x2671))+((cj7*cj8*sj6))+(((-1.0)*sj6*sj8*x2667))+((x2665*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2672=((1.0)*sj11);
CheckValue<IkReal> x2673 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x2672))+((cj11*cj6*r00))+(((-1.0)*r11*sj6*x2672))+((cj11*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2673.valid){
continue;
}
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x2672)))),-1);
if(!x2674.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2673.value)+(((1.5707963267949)*(x2674.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2675=IKsin(j10);
IkReal x2676=IKcos(j10);
IkReal x2677=((1.0)*sj8);
IkReal x2678=(cj7*cj8);
IkReal x2679=(sj11*x2675);
IkReal x2680=((1.0)*x2676);
IkReal x2681=((1.0)*x2675);
IkReal x2682=(cj11*x2676);
evalcond[0]=((((-1.0)*cj11*r20*x2681))+((r21*x2679))+(((-1.0)*r22*x2680)));
evalcond[1]=((((-1.0)*r12*x2680))+cj6+(((-1.0)*cj11*r10*x2681))+((r11*x2679)));
evalcond[2]=((((-1.0)*cj11*r00*x2681))+(((-1.0)*r02*x2680))+(((-1.0)*sj6))+((r01*x2679)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2680))+(((-1.0)*r22*x2681))+((r20*x2682))+(((-1.0)*cj7*x2677)));
evalcond[4]=((((-1.0)*r02*x2681))+(((-1.0)*r01*sj11*x2680))+((r00*x2682))+(((-1.0)*cj6*sj7*x2677))+((cj6*x2678)));
evalcond[5]=((((-1.0)*r12*x2681))+((r10*x2682))+(((-1.0)*r11*sj11*x2680))+(((-1.0)*sj6*sj7*x2677))+((sj6*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2683=((1.0)*cj11);
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x2683))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x2683)))),-1);
if(!x2685.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2684.value)+(((1.5707963267949)*(x2685.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2686=IKsin(j10);
IkReal x2687=IKcos(j10);
IkReal x2688=((1.0)*sj8);
IkReal x2689=(cj7*cj8);
IkReal x2690=(sj11*x2686);
IkReal x2691=((1.0)*x2687);
IkReal x2692=((1.0)*x2686);
IkReal x2693=(cj11*x2687);
evalcond[0]=((((-1.0)*cj11*r20*x2692))+(((-1.0)*r22*x2691))+((r21*x2690)));
evalcond[1]=(cj6+(((-1.0)*cj11*r10*x2692))+(((-1.0)*r12*x2691))+((r11*x2690)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x2691))+((r01*x2690))+(((-1.0)*cj11*r00*x2692)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x2692))+(((-1.0)*r21*sj11*x2691))+(((-1.0)*cj7*x2688))+((r20*x2693)));
evalcond[4]=((((-1.0)*r02*x2692))+(((-1.0)*r01*sj11*x2691))+((r00*x2693))+(((-1.0)*cj6*sj7*x2688))+((cj6*x2689)));
evalcond[5]=((((-1.0)*r11*sj11*x2691))+(((-1.0)*sj6*sj7*x2688))+((sj6*x2689))+((r10*x2693))+(((-1.0)*r12*x2692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2694=((1.0)*cj11);
CheckValue<IkReal> x2695 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2694))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2695.valid){
continue;
}
CheckValue<IkReal> x2696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x2694)))),-1);
if(!x2696.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2695.value)+(((1.5707963267949)*(x2696.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2697=IKsin(j10);
IkReal x2698=IKcos(j10);
IkReal x2699=((1.0)*sj8);
IkReal x2700=(cj7*cj8);
IkReal x2701=(sj11*x2697);
IkReal x2702=((1.0)*x2698);
IkReal x2703=((1.0)*x2697);
IkReal x2704=(cj11*x2698);
evalcond[0]=((((-1.0)*r22*x2702))+(((-1.0)*cj11*r20*x2703))+((r21*x2701)));
evalcond[1]=(((r11*x2701))+cj6+(((-1.0)*r12*x2702))+(((-1.0)*cj11*r10*x2703)));
evalcond[2]=((((-1.0)*cj11*r00*x2703))+(((-1.0)*sj6))+((r01*x2701))+(((-1.0)*r02*x2702)));
evalcond[3]=((((-1.0)*r22*x2703))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x2702))+((r20*x2704))+(((-1.0)*cj7*x2699)));
evalcond[4]=(((r00*x2704))+(((-1.0)*r02*x2703))+((cj6*x2700))+(((-1.0)*cj6*sj7*x2699))+(((-1.0)*r01*sj11*x2702)));
evalcond[5]=(((sj6*x2700))+(((-1.0)*sj6*sj7*x2699))+(((-1.0)*r12*x2703))+((r10*x2704))+(((-1.0)*r11*sj11*x2702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x2705=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)));
j6eval[0]=x2705;
j6eval[1]=IKsign(x2705);
j6eval[2]=((IKabs((((cj11*r11))+((r10*sj11)))))+(IKabs((((r00*sj11))+((cj11*r01))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x2706=cj11*cj11;
IkReal x2707=r21*r21;
IkReal x2708=(r21*sj11);
IkReal x2709=(cj8*sj7);
IkReal x2710=(cj11*r20);
IkReal x2711=((1.0)*cj7*sj8);
IkReal x2712=((((-1.0)*x2706*(r20*r20)))+(((2.0)*x2708*x2710))+(((-1.0)*(r22*r22)))+((x2706*x2707))+(((-1.0)*x2707)));
j10eval[0]=x2712;
j10eval[1]=((IKabs((((x2709*x2710))+(((-1.0)*x2708*x2711))+(((-1.0)*x2708*x2709))+((cj7*sj8*x2710)))))+(IKabs(((((-1.0)*r22*x2709))+(((-1.0)*r22*x2711))))));
j10eval[2]=IKsign(x2712);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j6eval[0]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2713=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x2713;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2713);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2714=((1.0)*cj11);
IkReal x2715=((((-1.0)*r10*sj11))+(((-1.0)*r11*x2714)));
j10eval[0]=x2715;
j10eval[1]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2714)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x2715);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2716=cj11*cj11;
IkReal x2717=(cj11*r20);
IkReal x2718=(r01*r21);
IkReal x2719=(r21*sj11);
IkReal x2720=((((-1.0)*x2718))+(((-1.0)*r00*r20*x2716))+(((-1.0)*r02*r22))+((x2716*x2718))+((r01*sj11*x2717))+((cj11*r00*x2719)));
j10eval[0]=x2720;
j10eval[1]=IKsign(x2720);
j10eval[2]=((IKabs((((cj6*x2719))+(((-1.0)*cj6*x2717)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2721=cj11*cj11;
IkReal x2722=(cj11*r20);
IkReal x2723=(r01*r21);
IkReal x2724=(r21*sj11);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*x2724))+(((-1.0)*cj6*x2722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj11*x2722))+(((-1.0)*x2723))+(((-1.0)*r00*r20*x2721))+((x2721*x2723))+((cj11*r00*x2724)))),-1);
if(!x2726.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2725.value)+(((1.5707963267949)*(x2726.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2727=IKcos(j10);
IkReal x2728=IKsin(j10);
IkReal x2729=(sj11*x2727);
IkReal x2730=(sj11*x2728);
IkReal x2731=((1.0)*x2727);
IkReal x2732=(cj11*x2731);
IkReal x2733=((1.0)*cj11*x2728);
evalcond[0]=(((r22*x2728))+((r21*x2729))+(((-1.0)*r20*x2732)));
evalcond[1]=(((r21*x2730))+(((-1.0)*r22*x2731))+(((-1.0)*r20*x2733)));
evalcond[2]=(((r02*x2728))+cj6+((r01*x2729))+(((-1.0)*r00*x2732)));
evalcond[3]=(sj6+((r11*x2729))+(((-1.0)*r10*x2732))+((r12*x2728)));
evalcond[4]=(cj6+(((-1.0)*r12*x2731))+(((-1.0)*r10*x2733))+((r11*x2730)));
evalcond[5]=((((-1.0)*sj6))+((r01*x2730))+(((-1.0)*r02*x2731))+(((-1.0)*r00*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2734=((1.0)*cj11);
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2734)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2734))+(((-1.0)*r10*sj11)))),-1);
if(!x2736.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2735.value)+(((1.5707963267949)*(x2736.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2737=IKcos(j10);
IkReal x2738=IKsin(j10);
IkReal x2739=(sj11*x2737);
IkReal x2740=(sj11*x2738);
IkReal x2741=((1.0)*x2737);
IkReal x2742=(cj11*x2741);
IkReal x2743=((1.0)*cj11*x2738);
evalcond[0]=(((r21*x2739))+((r22*x2738))+(((-1.0)*r20*x2742)));
evalcond[1]=(((r21*x2740))+(((-1.0)*r20*x2743))+(((-1.0)*r22*x2741)));
evalcond[2]=(((r02*x2738))+cj6+(((-1.0)*r00*x2742))+((r01*x2739)));
evalcond[3]=(sj6+(((-1.0)*r10*x2742))+((r12*x2738))+((r11*x2739)));
evalcond[4]=(((r11*x2740))+cj6+(((-1.0)*r10*x2743))+(((-1.0)*r12*x2741)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2743))+((r01*x2740))+(((-1.0)*r02*x2741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
CheckValue<IkReal> x2745=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x2745.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2744.value)+(((1.5707963267949)*(x2745.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2746=IKcos(j10);
IkReal x2747=IKsin(j10);
IkReal x2748=(sj11*x2746);
IkReal x2749=(sj11*x2747);
IkReal x2750=((1.0)*x2746);
IkReal x2751=(cj11*x2750);
IkReal x2752=((1.0)*cj11*x2747);
evalcond[0]=(((r21*x2748))+((r22*x2747))+(((-1.0)*r20*x2751)));
evalcond[1]=((((-1.0)*r22*x2750))+((r21*x2749))+(((-1.0)*r20*x2752)));
evalcond[2]=((((-1.0)*r00*x2751))+cj6+((r01*x2748))+((r02*x2747)));
evalcond[3]=(sj6+((r11*x2748))+((r12*x2747))+(((-1.0)*r10*x2751)));
evalcond[4]=(((r11*x2749))+cj6+(((-1.0)*r10*x2752))+(((-1.0)*r12*x2750)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2752))+((r01*x2749))+(((-1.0)*r02*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2753=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x2753;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x2753);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2754=((1.0)*cj11);
IkReal x2755=((((-1.0)*r01*x2754))+(((-1.0)*r00*sj11)));
j10eval[0]=x2755;
j10eval[1]=IKsign(x2755);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x2754))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2756=((1.0)*cj11);
IkReal x2757=((((-1.0)*r01*x2756))+(((-1.0)*r00*sj11)));
j10eval[0]=x2757;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2756))))));
j10eval[2]=IKsign(x2757);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2758=((1.0)*cj11);
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2758)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2758))+(((-1.0)*r00*sj11)))),-1);
if(!x2760.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2759.value)+(((1.5707963267949)*(x2760.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2761=IKcos(j10);
IkReal x2762=IKsin(j10);
IkReal x2763=((1.0)*sj6);
IkReal x2764=(sj11*x2761);
IkReal x2765=(sj11*x2762);
IkReal x2766=((1.0)*x2761);
IkReal x2767=(cj11*x2766);
IkReal x2768=((1.0)*cj11*x2762);
evalcond[0]=((((-1.0)*r20*x2767))+((r21*x2764))+((r22*x2762)));
evalcond[1]=((((-1.0)*r20*x2768))+((r21*x2765))+(((-1.0)*r22*x2766)));
evalcond[2]=(cj6+(((-1.0)*r12*x2766))+(((-1.0)*r10*x2768))+((r11*x2765)));
evalcond[3]=((((-1.0)*r00*x2767))+((r01*x2764))+((r02*x2762))+(((-1.0)*cj6)));
evalcond[4]=(((r12*x2762))+(((-1.0)*r10*x2767))+(((-1.0)*x2763))+((r11*x2764)));
evalcond[5]=((((-1.0)*r00*x2768))+((r01*x2765))+(((-1.0)*x2763))+(((-1.0)*r02*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2769=((1.0)*cj11);
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2769))+(((-1.0)*r00*sj11)))),-1);
if(!x2771.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2770.value)+(((1.5707963267949)*(x2771.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2772=IKcos(j10);
IkReal x2773=IKsin(j10);
IkReal x2774=((1.0)*sj6);
IkReal x2775=(sj11*x2772);
IkReal x2776=(sj11*x2773);
IkReal x2777=((1.0)*x2772);
IkReal x2778=(cj11*x2777);
IkReal x2779=((1.0)*cj11*x2773);
evalcond[0]=(((r22*x2773))+((r21*x2775))+(((-1.0)*r20*x2778)));
evalcond[1]=(((r21*x2776))+(((-1.0)*r20*x2779))+(((-1.0)*r22*x2777)));
evalcond[2]=((((-1.0)*r10*x2779))+((r11*x2776))+cj6+(((-1.0)*r12*x2777)));
evalcond[3]=(((r01*x2775))+(((-1.0)*r00*x2778))+((r02*x2773))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x2778))+((r11*x2775))+(((-1.0)*x2774))+((r12*x2773)));
evalcond[5]=(((r01*x2776))+(((-1.0)*r00*x2779))+(((-1.0)*r02*x2777))+(((-1.0)*x2774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2780.value)))+(x2781.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2782=IKcos(j10);
IkReal x2783=IKsin(j10);
IkReal x2784=((1.0)*sj6);
IkReal x2785=(sj11*x2782);
IkReal x2786=(sj11*x2783);
IkReal x2787=((1.0)*x2782);
IkReal x2788=(cj11*x2787);
IkReal x2789=((1.0)*cj11*x2783);
evalcond[0]=(((r21*x2785))+(((-1.0)*r20*x2788))+((r22*x2783)));
evalcond[1]=(((r21*x2786))+(((-1.0)*r20*x2789))+(((-1.0)*r22*x2787)));
evalcond[2]=((((-1.0)*r12*x2787))+cj6+(((-1.0)*r10*x2789))+((r11*x2786)));
evalcond[3]=(((r02*x2783))+((r01*x2785))+(((-1.0)*r00*x2788))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*x2784))+((r12*x2783))+(((-1.0)*r10*x2788))+((r11*x2785)));
evalcond[5]=((((-1.0)*x2784))+((r01*x2786))+(((-1.0)*r00*x2789))+(((-1.0)*r02*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2790=IKcos(j6);
IkReal x2791=IKsin(j6);
evalcond[0]=((((0.425)*x2790))+(((-0.10915)*x2791))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x2791))+(((-1.0)*py))+(((0.10915)*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2792=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x2792;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x2792);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2793=((1.0)*cj11);
IkReal x2794=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2793)));
j10eval[0]=x2794;
j10eval[1]=IKsign(x2794);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x2793))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2795=((1.0)*cj11);
IkReal x2796=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2795)));
j10eval[0]=x2796;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2795)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2796);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2797=((1.0)*cj11);
CheckValue<IkReal> x2798 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2797)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2798.valid){
continue;
}
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x2797)))),-1);
if(!x2799.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2798.value)+(((1.5707963267949)*(x2799.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2800=IKcos(j10);
IkReal x2801=IKsin(j10);
IkReal x2802=((1.0)*sj6);
IkReal x2803=(sj11*x2800);
IkReal x2804=(sj11*x2801);
IkReal x2805=((1.0)*x2800);
IkReal x2806=(cj11*x2805);
IkReal x2807=((1.0)*cj11*x2801);
evalcond[0]=((((-1.0)*r20*x2806))+((r21*x2803))+((r22*x2801)));
evalcond[1]=((((-1.0)*r20*x2807))+(((-1.0)*r22*x2805))+((r21*x2804)));
evalcond[2]=(cj6+(((-1.0)*r10*x2807))+(((-1.0)*r12*x2805))+((r11*x2804)));
evalcond[3]=(((r02*x2801))+(((-1.0)*r00*x2806))+((r01*x2803))+(((-1.0)*cj6)));
evalcond[4]=(((r12*x2801))+(((-1.0)*x2802))+(((-1.0)*r10*x2806))+((r11*x2803)));
evalcond[5]=((((-1.0)*x2802))+(((-1.0)*r00*x2807))+(((-1.0)*r02*x2805))+((r01*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2808=((1.0)*cj11);
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2808))+(((-1.0)*r00*sj11)))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x2808))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2809.value)))+(x2810.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2811=IKcos(j10);
IkReal x2812=IKsin(j10);
IkReal x2813=((1.0)*sj6);
IkReal x2814=(sj11*x2811);
IkReal x2815=(sj11*x2812);
IkReal x2816=((1.0)*x2811);
IkReal x2817=(cj11*x2816);
IkReal x2818=((1.0)*cj11*x2812);
evalcond[0]=(((r22*x2812))+((r21*x2814))+(((-1.0)*r20*x2817)));
evalcond[1]=(((r21*x2815))+(((-1.0)*r22*x2816))+(((-1.0)*r20*x2818)));
evalcond[2]=((((-1.0)*r12*x2816))+cj6+((r11*x2815))+(((-1.0)*r10*x2818)));
evalcond[3]=(((r01*x2814))+(((-1.0)*r00*x2817))+((r02*x2812))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*x2813))+((r12*x2812))+((r11*x2814))+(((-1.0)*r10*x2817)));
evalcond[5]=(((r01*x2815))+(((-1.0)*r02*x2816))+(((-1.0)*x2813))+(((-1.0)*r00*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2820.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2819.value)))+(x2820.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2821=IKcos(j10);
IkReal x2822=IKsin(j10);
IkReal x2823=((1.0)*sj6);
IkReal x2824=(sj11*x2821);
IkReal x2825=(sj11*x2822);
IkReal x2826=((1.0)*x2821);
IkReal x2827=(cj11*x2826);
IkReal x2828=((1.0)*cj11*x2822);
evalcond[0]=((((-1.0)*r20*x2827))+((r21*x2824))+((r22*x2822)));
evalcond[1]=((((-1.0)*r20*x2828))+((r21*x2825))+(((-1.0)*r22*x2826)));
evalcond[2]=((((-1.0)*r12*x2826))+cj6+(((-1.0)*r10*x2828))+((r11*x2825)));
evalcond[3]=(((r02*x2822))+(((-1.0)*r00*x2827))+((r01*x2824))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x2827))+((r11*x2824))+(((-1.0)*x2823))+((r12*x2822)));
evalcond[5]=((((-1.0)*r00*x2828))+(((-1.0)*r02*x2826))+((r01*x2825))+(((-1.0)*x2823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2829=IKcos(j6);
IkReal x2830=IKsin(j6);
evalcond[0]=((((0.425)*x2829))+(((-1.0)*px))+(((-0.10915)*x2830)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x2829))+(((0.425)*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2831=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x2831;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2831);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2832=((1.0)*cj11);
IkReal x2833=((((-1.0)*r11*x2832))+(((-1.0)*r10*sj11)));
j10eval[0]=x2833;
j10eval[1]=((IKabs(((((-1.0)*cj6*r20*x2832))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x2833);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2834=cj11*cj11;
IkReal x2835=(cj11*r20);
IkReal x2836=(r01*r21);
IkReal x2837=(r21*sj11);
IkReal x2838=((((-1.0)*x2836))+(((-1.0)*r02*r22))+((x2834*x2836))+(((-1.0)*r00*r20*x2834))+((r01*sj11*x2835))+((cj11*r00*x2837)));
j10eval[0]=x2838;
j10eval[1]=IKsign(x2838);
j10eval[2]=((IKabs((((cj6*x2837))+(((-1.0)*cj6*x2835)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2839=cj11*cj11;
IkReal x2840=(cj11*r20);
IkReal x2841=(r01*r21);
IkReal x2842=(r21*sj11);
CheckValue<IkReal> x2843 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*x2842))+(((-1.0)*cj6*x2840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2843.valid){
continue;
}
CheckValue<IkReal> x2844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2839))+((r01*sj11*x2840))+(((-1.0)*x2841))+((cj11*r00*x2842))+((x2839*x2841)))),-1);
if(!x2844.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2843.value)+(((1.5707963267949)*(x2844.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2845=IKcos(j10);
IkReal x2846=IKsin(j10);
IkReal x2847=(sj11*x2845);
IkReal x2848=(sj11*x2846);
IkReal x2849=((1.0)*x2845);
IkReal x2850=(cj11*x2849);
IkReal x2851=((1.0)*cj11*x2846);
evalcond[0]=(((r21*x2847))+(((-1.0)*r20*x2850))+((r22*x2846)));
evalcond[1]=(((r21*x2848))+(((-1.0)*r20*x2851))+(((-1.0)*r22*x2849)));
evalcond[2]=(cj6+(((-1.0)*r00*x2850))+((r01*x2847))+((r02*x2846)));
evalcond[3]=(sj6+((r11*x2847))+((r12*x2846))+(((-1.0)*r10*x2850)));
evalcond[4]=(((r11*x2848))+cj6+(((-1.0)*r12*x2849))+(((-1.0)*r10*x2851)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2851))+(((-1.0)*r02*x2849))+((r01*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2852=((1.0)*cj11);
CheckValue<IkReal> x2853 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20*x2852))+((cj6*r21*sj11)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2853.valid){
continue;
}
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2852))+(((-1.0)*r10*sj11)))),-1);
if(!x2854.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2853.value)+(((1.5707963267949)*(x2854.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2855=IKcos(j10);
IkReal x2856=IKsin(j10);
IkReal x2857=(sj11*x2855);
IkReal x2858=(sj11*x2856);
IkReal x2859=((1.0)*x2855);
IkReal x2860=(cj11*x2859);
IkReal x2861=((1.0)*cj11*x2856);
evalcond[0]=(((r21*x2857))+((r22*x2856))+(((-1.0)*r20*x2860)));
evalcond[1]=(((r21*x2858))+(((-1.0)*r20*x2861))+(((-1.0)*r22*x2859)));
evalcond[2]=(cj6+(((-1.0)*r00*x2860))+((r01*x2857))+((r02*x2856)));
evalcond[3]=(sj6+((r11*x2857))+((r12*x2856))+(((-1.0)*r10*x2860)));
evalcond[4]=(cj6+((r11*x2858))+(((-1.0)*r12*x2859))+(((-1.0)*r10*x2861)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x2859))+(((-1.0)*r00*x2861))+((r01*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x2863.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2862.value)+(((1.5707963267949)*(x2863.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2864=IKcos(j10);
IkReal x2865=IKsin(j10);
IkReal x2866=(sj11*x2864);
IkReal x2867=(sj11*x2865);
IkReal x2868=((1.0)*x2864);
IkReal x2869=(cj11*x2868);
IkReal x2870=((1.0)*cj11*x2865);
evalcond[0]=(((r22*x2865))+((r21*x2866))+(((-1.0)*r20*x2869)));
evalcond[1]=(((r21*x2867))+(((-1.0)*r22*x2868))+(((-1.0)*r20*x2870)));
evalcond[2]=(cj6+((r02*x2865))+(((-1.0)*r00*x2869))+((r01*x2866)));
evalcond[3]=(sj6+((r12*x2865))+((r11*x2866))+(((-1.0)*r10*x2869)));
evalcond[4]=((((-1.0)*r12*x2868))+cj6+(((-1.0)*r10*x2870))+((r11*x2867)));
evalcond[5]=((((-1.0)*r02*x2868))+(((-1.0)*sj6))+(((-1.0)*r00*x2870))+((r01*x2867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2871=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x2871;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x2871);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2872=((1.0)*cj11);
IkReal x2873=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2872)));
j10eval[0]=x2873;
j10eval[1]=IKsign(x2873);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2872)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x2874=((1.0)*cj11);
IkReal x2875=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2874)));
j10eval[0]=x2875;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x2874))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x2875);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2876=((1.0)*cj11);
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x2876))+((r21*sj11*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x2876)))),-1);
if(!x2878.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2877.value)+(((1.5707963267949)*(x2878.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2879=IKcos(j10);
IkReal x2880=IKsin(j10);
IkReal x2881=((1.0)*sj6);
IkReal x2882=(sj11*x2879);
IkReal x2883=(sj11*x2880);
IkReal x2884=((1.0)*x2879);
IkReal x2885=(cj11*x2884);
IkReal x2886=((1.0)*cj11*x2880);
evalcond[0]=(((r22*x2880))+((r21*x2882))+(((-1.0)*r20*x2885)));
evalcond[1]=((((-1.0)*r22*x2884))+((r21*x2883))+(((-1.0)*r20*x2886)));
evalcond[2]=((((-1.0)*r10*x2886))+cj6+((r11*x2883))+(((-1.0)*r12*x2884)));
evalcond[3]=((((-1.0)*r00*x2885))+((r01*x2882))+((r02*x2880))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x2885))+((r11*x2882))+((r12*x2880))+(((-1.0)*x2881)));
evalcond[5]=((((-1.0)*r02*x2884))+(((-1.0)*r00*x2886))+((r01*x2883))+(((-1.0)*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2887=((1.0)*cj11);
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2887))+(((-1.0)*r00*sj11)))),-1);
if(!x2889.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2888.value)+(((1.5707963267949)*(x2889.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2890=IKcos(j10);
IkReal x2891=IKsin(j10);
IkReal x2892=((1.0)*sj6);
IkReal x2893=(sj11*x2890);
IkReal x2894=(sj11*x2891);
IkReal x2895=((1.0)*x2890);
IkReal x2896=(cj11*x2895);
IkReal x2897=((1.0)*cj11*x2891);
evalcond[0]=(((r21*x2893))+((r22*x2891))+(((-1.0)*r20*x2896)));
evalcond[1]=((((-1.0)*r22*x2895))+((r21*x2894))+(((-1.0)*r20*x2897)));
evalcond[2]=(cj6+((r11*x2894))+(((-1.0)*r10*x2897))+(((-1.0)*r12*x2895)));
evalcond[3]=(((r01*x2893))+(((-1.0)*r00*x2896))+((r02*x2891))+(((-1.0)*cj6)));
evalcond[4]=(((r11*x2893))+((r12*x2891))+(((-1.0)*x2892))+(((-1.0)*r10*x2896)));
evalcond[5]=((((-1.0)*r02*x2895))+((r01*x2894))+(((-1.0)*r00*x2897))+(((-1.0)*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x2898.valid){
continue;
}
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2898.value)))+(x2899.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2900=IKcos(j10);
IkReal x2901=IKsin(j10);
IkReal x2902=((1.0)*sj6);
IkReal x2903=(sj11*x2900);
IkReal x2904=(sj11*x2901);
IkReal x2905=((1.0)*x2900);
IkReal x2906=(cj11*x2905);
IkReal x2907=((1.0)*cj11*x2901);
evalcond[0]=(((r22*x2901))+((r21*x2903))+(((-1.0)*r20*x2906)));
evalcond[1]=(((r21*x2904))+(((-1.0)*r22*x2905))+(((-1.0)*r20*x2907)));
evalcond[2]=((((-1.0)*r10*x2907))+cj6+(((-1.0)*r12*x2905))+((r11*x2904)));
evalcond[3]=(((r02*x2901))+((r01*x2903))+(((-1.0)*r00*x2906))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x2906))+(((-1.0)*x2902))+((r12*x2901))+((r11*x2903)));
evalcond[5]=((((-1.0)*r02*x2905))+((r01*x2904))+(((-1.0)*x2902))+(((-1.0)*r00*x2907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j6)))));
evalcond[1]=((((0.10915)*(IKcos(j6))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2908=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x2908;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2908);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2909=((1.0)*cj11);
IkReal x2910=((((-1.0)*r10*sj11))+(((-1.0)*r11*x2909)));
j10eval[0]=x2910;
j10eval[1]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2909)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x2910);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x2911=cj11*cj11;
IkReal x2912=(cj11*r20);
IkReal x2913=(r01*r21);
IkReal x2914=(r21*sj11);
IkReal x2915=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2911))+((r01*sj11*x2912))+((cj11*r00*x2914))+((x2911*x2913))+(((-1.0)*x2913)));
j10eval[0]=x2915;
j10eval[1]=IKsign(x2915);
j10eval[2]=((IKabs((((cj6*x2914))+(((-1.0)*cj6*x2912)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2916=cj11*cj11;
IkReal x2917=(cj11*r20);
IkReal x2918=(r01*r21);
IkReal x2919=(r21*sj11);
CheckValue<IkReal> x2920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2916))+((r01*sj11*x2917))+((x2916*x2918))+((cj11*r00*x2919))+(((-1.0)*x2918)))),-1);
if(!x2920.valid){
continue;
}
CheckValue<IkReal> x2921 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*x2919))+(((-1.0)*cj6*x2917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2921.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2920.value)))+(x2921.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2922=IKcos(j10);
IkReal x2923=IKsin(j10);
IkReal x2924=(sj11*x2922);
IkReal x2925=(sj11*x2923);
IkReal x2926=((1.0)*x2922);
IkReal x2927=(cj11*x2926);
IkReal x2928=((1.0)*cj11*x2923);
evalcond[0]=(((r22*x2923))+(((-1.0)*r20*x2927))+((r21*x2924)));
evalcond[1]=((((-1.0)*r20*x2928))+((r21*x2925))+(((-1.0)*r22*x2926)));
evalcond[2]=(cj6+((r01*x2924))+(((-1.0)*r00*x2927))+((r02*x2923)));
evalcond[3]=(sj6+(((-1.0)*r10*x2927))+((r11*x2924))+((r12*x2923)));
evalcond[4]=(cj6+(((-1.0)*r10*x2928))+(((-1.0)*r12*x2926))+((r11*x2925)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x2926))+((r01*x2925))+(((-1.0)*r00*x2928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2929=((1.0)*cj11);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2929))+(((-1.0)*r10*sj11)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2929)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2932=IKcos(j10);
IkReal x2933=IKsin(j10);
IkReal x2934=(sj11*x2932);
IkReal x2935=(sj11*x2933);
IkReal x2936=((1.0)*x2932);
IkReal x2937=(cj11*x2936);
IkReal x2938=((1.0)*cj11*x2933);
evalcond[0]=((((-1.0)*r20*x2937))+((r21*x2934))+((r22*x2933)));
evalcond[1]=((((-1.0)*r20*x2938))+((r21*x2935))+(((-1.0)*r22*x2936)));
evalcond[2]=(((r02*x2933))+cj6+((r01*x2934))+(((-1.0)*r00*x2937)));
evalcond[3]=(sj6+((r12*x2933))+((r11*x2934))+(((-1.0)*r10*x2937)));
evalcond[4]=(cj6+(((-1.0)*r12*x2936))+((r11*x2935))+(((-1.0)*r10*x2938)));
evalcond[5]=((((-1.0)*sj6))+((r01*x2935))+(((-1.0)*r00*x2938))+(((-1.0)*r02*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x2940.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2939.value)+(((1.5707963267949)*(x2940.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2941=IKcos(j10);
IkReal x2942=IKsin(j10);
IkReal x2943=(sj11*x2941);
IkReal x2944=(sj11*x2942);
IkReal x2945=((1.0)*x2941);
IkReal x2946=(cj11*x2945);
IkReal x2947=((1.0)*cj11*x2942);
evalcond[0]=(((r21*x2943))+(((-1.0)*r20*x2946))+((r22*x2942)));
evalcond[1]=(((r21*x2944))+(((-1.0)*r20*x2947))+(((-1.0)*r22*x2945)));
evalcond[2]=(cj6+((r02*x2942))+(((-1.0)*r00*x2946))+((r01*x2943)));
evalcond[3]=(sj6+((r12*x2942))+((r11*x2943))+(((-1.0)*r10*x2946)));
evalcond[4]=((((-1.0)*r12*x2945))+cj6+((r11*x2944))+(((-1.0)*r10*x2947)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x2945))+(((-1.0)*r00*x2947))+((r01*x2944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2948=IKcos(j6);
IkReal x2949=IKsin(j6);
evalcond[0]=((((-0.425)*x2948))+(((-1.0)*px))+(((-0.10915)*x2949)));
evalcond[1]=((((0.10915)*x2948))+(((-0.425)*x2949))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2950=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x2950;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2950);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2951=((1.0)*cj11);
IkReal x2952=((((-1.0)*r11*x2951))+(((-1.0)*r10*sj11)));
j10eval[0]=x2952;
j10eval[1]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2951)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x2952);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x2953=cj11*cj11;
IkReal x2954=(cj11*r20);
IkReal x2955=(r01*r21);
IkReal x2956=(r21*sj11);
IkReal x2957=((((-1.0)*x2955))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2953))+((x2953*x2955))+((cj11*r00*x2956))+((r01*sj11*x2954)));
j10eval[0]=x2957;
j10eval[1]=IKsign(x2957);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*x2956))+(((-1.0)*cj6*x2954))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2958=cj11*cj11;
IkReal x2959=(cj11*r20);
IkReal x2960=(r01*r21);
IkReal x2961=(r21*sj11);
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x2959))+((cj6*x2961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x2960))+(((-1.0)*r00*r20*x2958))+((x2958*x2960))+((cj11*r00*x2961))+((r01*sj11*x2959)))),-1);
if(!x2963.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2962.value)+(((1.5707963267949)*(x2963.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2964=IKcos(j10);
IkReal x2965=IKsin(j10);
IkReal x2966=(sj11*x2964);
IkReal x2967=(sj11*x2965);
IkReal x2968=((1.0)*x2964);
IkReal x2969=(cj11*x2968);
IkReal x2970=((1.0)*cj11*x2965);
evalcond[0]=(((r21*x2966))+((r22*x2965))+(((-1.0)*r20*x2969)));
evalcond[1]=(((r21*x2967))+(((-1.0)*r20*x2970))+(((-1.0)*r22*x2968)));
evalcond[2]=(((r02*x2965))+cj6+(((-1.0)*r00*x2969))+((r01*x2966)));
evalcond[3]=(sj6+((r11*x2966))+((r12*x2965))+(((-1.0)*r10*x2969)));
evalcond[4]=(cj6+((r11*x2967))+(((-1.0)*r10*x2970))+(((-1.0)*r12*x2968)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2970))+(((-1.0)*r02*x2968))+((r01*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2971=((1.0)*cj11);
CheckValue<IkReal> x2972 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x2971)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2972.valid){
continue;
}
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2971))+(((-1.0)*r10*sj11)))),-1);
if(!x2973.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2972.value)+(((1.5707963267949)*(x2973.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2974=IKcos(j10);
IkReal x2975=IKsin(j10);
IkReal x2976=(sj11*x2974);
IkReal x2977=(sj11*x2975);
IkReal x2978=((1.0)*x2974);
IkReal x2979=(cj11*x2978);
IkReal x2980=((1.0)*cj11*x2975);
evalcond[0]=((((-1.0)*r20*x2979))+((r22*x2975))+((r21*x2976)));
evalcond[1]=((((-1.0)*r20*x2980))+(((-1.0)*r22*x2978))+((r21*x2977)));
evalcond[2]=(cj6+((r02*x2975))+(((-1.0)*r00*x2979))+((r01*x2976)));
evalcond[3]=(sj6+((r12*x2975))+((r11*x2976))+(((-1.0)*r10*x2979)));
evalcond[4]=(cj6+(((-1.0)*r10*x2980))+(((-1.0)*r12*x2978))+((r11*x2977)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2980))+(((-1.0)*r02*x2978))+((r01*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x2981 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x2982.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2981.value)+(((1.5707963267949)*(x2982.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x2983=IKcos(j10);
IkReal x2984=IKsin(j10);
IkReal x2985=(sj11*x2983);
IkReal x2986=(sj11*x2984);
IkReal x2987=((1.0)*x2983);
IkReal x2988=(cj11*x2987);
IkReal x2989=((1.0)*cj11*x2984);
evalcond[0]=((((-1.0)*r20*x2988))+((r22*x2984))+((r21*x2985)));
evalcond[1]=((((-1.0)*r20*x2989))+(((-1.0)*r22*x2987))+((r21*x2986)));
evalcond[2]=((((-1.0)*r00*x2988))+cj6+((r01*x2985))+((r02*x2984)));
evalcond[3]=(sj6+((r11*x2985))+(((-1.0)*r10*x2988))+((r12*x2984)));
evalcond[4]=(cj6+((r11*x2986))+(((-1.0)*r10*x2989))+(((-1.0)*r12*x2987)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x2989))+((r01*x2986))+(((-1.0)*r02*x2987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2990=IKcos(j6);
IkReal x2991=IKsin(j6);
evalcond[0]=((((-0.10915)*x2991))+(((-1.0)*px))+(((-0.425)*x2990)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x2990))+(((-0.425)*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2992=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x2992;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x2992);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2993=((1.0)*cj11);
IkReal x2994=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2993)));
j10eval[0]=x2994;
j10eval[1]=IKsign(x2994);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x2993))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x2995=((1.0)*cj11);
IkReal x2996=((((-1.0)*r00*sj11))+(((-1.0)*r01*x2995)));
j10eval[0]=x2996;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2995)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x2996);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2997=((1.0)*cj11);
CheckValue<IkReal> x2998 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x2997)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x2998.valid){
continue;
}
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x2997)))),-1);
if(!x2999.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x2998.value)+(((1.5707963267949)*(x2999.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3000=IKcos(j10);
IkReal x3001=IKsin(j10);
IkReal x3002=((1.0)*sj6);
IkReal x3003=(sj11*x3000);
IkReal x3004=(sj11*x3001);
IkReal x3005=((1.0)*x3000);
IkReal x3006=(cj11*x3005);
IkReal x3007=((1.0)*cj11*x3001);
evalcond[0]=(((r22*x3001))+((r21*x3003))+(((-1.0)*r20*x3006)));
evalcond[1]=((((-1.0)*r22*x3005))+((r21*x3004))+(((-1.0)*r20*x3007)));
evalcond[2]=((((-1.0)*r10*x3007))+cj6+(((-1.0)*r12*x3005))+((r11*x3004)));
evalcond[3]=(((r01*x3003))+(((-1.0)*r00*x3006))+((r02*x3001))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x3006))+(((-1.0)*x3002))+((r12*x3001))+((r11*x3003)));
evalcond[5]=(((r01*x3004))+(((-1.0)*r02*x3005))+(((-1.0)*r00*x3007))+(((-1.0)*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3008=((1.0)*cj11);
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3008))+(((-1.0)*r00*sj11)))),-1);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x3008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3010.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3009.value)))+(x3010.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3011=IKcos(j10);
IkReal x3012=IKsin(j10);
IkReal x3013=((1.0)*sj6);
IkReal x3014=(sj11*x3011);
IkReal x3015=(sj11*x3012);
IkReal x3016=((1.0)*x3011);
IkReal x3017=(cj11*x3016);
IkReal x3018=((1.0)*cj11*x3012);
evalcond[0]=(((r22*x3012))+(((-1.0)*r20*x3017))+((r21*x3014)));
evalcond[1]=((((-1.0)*r22*x3016))+(((-1.0)*r20*x3018))+((r21*x3015)));
evalcond[2]=((((-1.0)*r10*x3018))+cj6+(((-1.0)*r12*x3016))+((r11*x3015)));
evalcond[3]=(((r01*x3014))+(((-1.0)*r00*x3017))+(((-1.0)*cj6))+((r02*x3012)));
evalcond[4]=((((-1.0)*r10*x3017))+(((-1.0)*x3013))+((r12*x3012))+((r11*x3014)));
evalcond[5]=(((r01*x3015))+(((-1.0)*r02*x3016))+(((-1.0)*r00*x3018))+(((-1.0)*x3013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3019.value)))+(x3020.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3021=IKcos(j10);
IkReal x3022=IKsin(j10);
IkReal x3023=((1.0)*sj6);
IkReal x3024=(sj11*x3021);
IkReal x3025=(sj11*x3022);
IkReal x3026=((1.0)*x3021);
IkReal x3027=(cj11*x3026);
IkReal x3028=((1.0)*cj11*x3022);
evalcond[0]=((((-1.0)*r20*x3027))+((r21*x3024))+((r22*x3022)));
evalcond[1]=((((-1.0)*r20*x3028))+((r21*x3025))+(((-1.0)*r22*x3026)));
evalcond[2]=((((-1.0)*r12*x3026))+((r11*x3025))+cj6+(((-1.0)*r10*x3028)));
evalcond[3]=(((r02*x3022))+(((-1.0)*r00*x3027))+((r01*x3024))+(((-1.0)*cj6)));
evalcond[4]=(((r12*x3022))+((r11*x3024))+(((-1.0)*x3023))+(((-1.0)*r10*x3027)));
evalcond[5]=((((-1.0)*x3023))+(((-1.0)*r00*x3028))+((r01*x3025))+(((-1.0)*r02*x3026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3029=(r00*sj11);
IkReal x3030=(cj11*r01);
IkReal x3031=((20000.0)*px);
IkReal x3032=(cj8*sj7);
IkReal x3033=(cj7*sj8);
IkReal x3034=((8500.0)*sj7);
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(((((-2183.0)*x3033))+(((-2183.0)*x3032))),-1);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(((((-1.0)*x3032))+(((-1.0)*x3033))),-1);
if(!x3036.valid){
continue;
}
if( IKabs(((x3035.value)*(((((9738.0)*x3029*x3033))+(((9738.0)*x3029*x3032))+((x3030*x3034))+((x3031*x3033))+((x3031*x3032))+((x3029*x3034))+(((9738.0)*x3030*x3032))+(((9738.0)*x3030*x3033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3036.value)*((x3030+x3029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3035.value)*(((((9738.0)*x3029*x3033))+(((9738.0)*x3029*x3032))+((x3030*x3034))+((x3031*x3033))+((x3031*x3032))+((x3029*x3034))+(((9738.0)*x3030*x3032))+(((9738.0)*x3030*x3033))))))+IKsqr(((x3036.value)*((x3030+x3029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x3035.value)*(((((9738.0)*x3029*x3033))+(((9738.0)*x3029*x3032))+((x3030*x3034))+((x3031*x3033))+((x3031*x3032))+((x3029*x3034))+(((9738.0)*x3030*x3032))+(((9738.0)*x3030*x3033))))), ((x3036.value)*((x3030+x3029))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x3037=IKcos(j6);
IkReal x3038=IKsin(j6);
IkReal x3039=((1.0)*sj11);
IkReal x3040=((1.0)*cj8);
IkReal x3041=(cj7*sj8);
IkReal x3042=((0.09465)*cj11);
IkReal x3043=((0.09465)*sj11);
IkReal x3044=((1.0)*cj11);
IkReal x3045=((0.39225)*cj8*sj7);
IkReal x3046=(sj7*x3038);
IkReal x3047=(sj7*x3037);
evalcond[0]=((((-1.0)*r00*x3039))+(((-1.0)*x3037*x3041))+(((-1.0)*r01*x3044))+(((-1.0)*x3040*x3047)));
evalcond[1]=((((-1.0)*r11*x3044))+(((-1.0)*x3038*x3041))+(((-1.0)*x3040*x3046))+(((-1.0)*r10*x3039)));
evalcond[2]=((((-0.10915)*x3038))+((x3037*x3045))+(((0.39225)*x3037*x3041))+(((-1.0)*r00*x3043))+(((-1.0)*r01*x3042))+(((-1.0)*px))+(((0.425)*x3047)));
evalcond[3]=((((-1.0)*r11*x3042))+(((0.39225)*x3038*x3041))+(((0.10915)*x3037))+(((-1.0)*r10*x3043))+(((-1.0)*py))+((x3038*x3045))+(((0.425)*x3046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3048=((1.0)*cj11);
IkReal x3049=((((-1.0)*r01*x3048))+(((-1.0)*r00*sj11)));
j10eval[0]=x3049;
j10eval[1]=IKsign(x3049);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x3048)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3050=((1.0)*cj11);
IkReal x3051=((((-1.0)*r11*x3050))+(((-1.0)*r10*sj11)));
j10eval[0]=x3051;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x3050))))));
j10eval[2]=IKsign(x3051);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3052=((1.0)*sj11);
IkReal x3053=((((-1.0)*cj11*r21))+(((-1.0)*r20*x3052)));
j10eval[0]=x3053;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*r11*sj6*x3052))+(((-1.0)*cj6*r01*x3052))+((cj11*cj6*r00))+((cj11*r10*sj6))))));
j10eval[2]=IKsign(x3053);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3054=((-1.0)*r20);
IkReal x3056 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3056)==0){
continue;
}
IkReal x3055=pow(x3056,-0.5);
CheckValue<IkReal> x3057 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3054),IKFAST_ATAN2_MAGTHRESH);
if(!x3057.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3057.value));
IkReal gconst97=(r21*x3055);
IkReal gconst98=(x3054*x3055);
CheckValue<IkReal> x3058 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x3058.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x3059=((-1.0)*r20);
IkReal x3060=x3055;
CheckValue<IkReal> x3062 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3059),IKFAST_ATAN2_MAGTHRESH);
if(!x3062.valid){
continue;
}
IkReal x3061=((-1.0)*(x3062.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3061;
IkReal gconst96=x3061;
IkReal gconst97=(r21*x3060);
IkReal gconst98=(x3059*x3060);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3063=((-1.0)*r20);
IkReal x3064=x3055;
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3063),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
IkReal x3065=((-1.0)*(x3066.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3065;
IkReal gconst96=x3065;
IkReal gconst97=(r21*x3064);
IkReal gconst98=(x3063*x3064);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x3067=((-1.0)*r20);
IkReal x3068=x3055;
CheckValue<IkReal> x3070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3067),IKFAST_ATAN2_MAGTHRESH);
if(!x3070.valid){
continue;
}
IkReal x3069=((-1.0)*(x3070.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3069;
IkReal gconst96=x3069;
IkReal gconst97=(r21*x3068);
IkReal gconst98=(x3067*x3068);
IkReal x3071=((1.0)*(r22*r22));
CheckValue<IkReal> x3075=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3071))),-1);
if(!x3075.valid){
continue;
}
IkReal x3072=x3075.value;
IkReal x3073=((1.0)*x3072);
IkReal x3074=((((-2.0)*x3072*(r20*r20)*(r21*r21)))+(((-1.0)*x3071))+(((-1.0)*x3073*(r21*r21*r21*r21)))+(((-1.0)*x3073*(r20*r20*r20*r20))));
j10eval[0]=x3074;
j10eval[1]=IKsign(x3074);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3076=(cj8*sj7);
IkReal x3077=(cj7*sj8);
IkReal x3078=(gconst98*r20);
IkReal x3079=((1.0)*r22);
IkReal x3080=((1.0)*gconst97*r21);
CheckValue<IkReal> x3081 = IKatan2WithCheck(IkReal(((((-1.0)*x3076*x3079))+(((-1.0)*x3077*x3079)))),IkReal((((x3076*x3078))+(((-1.0)*x3076*x3080))+(((-1.0)*x3077*x3080))+((x3077*x3078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x3079))+(((-1.0)*gconst97*r21*x3080))+(((-1.0)*(x3078*x3078)))+(((2.0)*gconst97*r21*x3078)))),-1);
if(!x3082.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3081.value)+(((1.5707963267949)*(x3082.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3083=IKsin(j10);
IkReal x3084=IKcos(j10);
IkReal x3085=((1.0)*sj8);
IkReal x3086=(cj7*cj8);
IkReal x3087=(gconst98*r10);
IkReal x3088=(gconst98*r00);
IkReal x3089=((1.0)*gconst98*r20);
IkReal x3090=((1.0)*x3084);
IkReal x3091=(gconst97*x3084);
IkReal x3092=(gconst97*x3083);
IkReal x3093=((1.0)*x3083);
evalcond[0]=((((-1.0)*r22*x3090))+(((-1.0)*x3083*x3089))+((r21*x3092)));
evalcond[1]=((((-1.0)*r12*x3090))+cj6+(((-1.0)*x3087*x3093))+((r11*x3092)));
evalcond[2]=(((r01*x3092))+(((-1.0)*r02*x3090))+(((-1.0)*sj6))+(((-1.0)*x3088*x3093)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r21*x3091))+(((-1.0)*cj7*x3085))+((r22*x3083))+(((-1.0)*x3084*x3089)));
evalcond[4]=(((r01*x3091))+((r02*x3083))+(((-1.0)*x3088*x3090))+(((-1.0)*cj6*sj7*x3085))+((cj6*x3086)));
evalcond[5]=((((-1.0)*sj6*sj7*x3085))+((r12*x3083))+((sj6*x3086))+(((-1.0)*x3087*x3090))+((r11*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3094=((1.0)*gconst98);
CheckValue<IkReal> x3095 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst97*r21*sj6))+(((-1.0)*r20*sj6*x3094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3094))+(((-1.0)*gconst97*r10)))),-1);
if(!x3096.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3095.value)+(((1.5707963267949)*(x3096.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3097=IKsin(j10);
IkReal x3098=IKcos(j10);
IkReal x3099=((1.0)*sj8);
IkReal x3100=(cj7*cj8);
IkReal x3101=(gconst98*r10);
IkReal x3102=(gconst98*r00);
IkReal x3103=((1.0)*gconst98*r20);
IkReal x3104=((1.0)*x3098);
IkReal x3105=(gconst97*x3098);
IkReal x3106=(gconst97*x3097);
IkReal x3107=((1.0)*x3097);
evalcond[0]=(((r21*x3106))+(((-1.0)*x3097*x3103))+(((-1.0)*r22*x3104)));
evalcond[1]=(((r11*x3106))+cj6+(((-1.0)*r12*x3104))+(((-1.0)*x3101*x3107)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x3102*x3107))+((r01*x3106))+(((-1.0)*r02*x3104)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r21*x3105))+(((-1.0)*x3098*x3103))+(((-1.0)*cj7*x3099))+((r22*x3097)));
evalcond[4]=((((-1.0)*cj6*sj7*x3099))+((cj6*x3100))+((r02*x3097))+(((-1.0)*x3102*x3104))+((r01*x3105)));
evalcond[5]=(((r11*x3105))+((sj6*x3100))+(((-1.0)*sj6*sj7*x3099))+(((-1.0)*x3101*x3104))+((r12*x3097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3108=((1.0)*gconst98);
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst97*r21))+(((-1.0)*cj6*r20*x3108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
CheckValue<IkReal> x3110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3108))+(((-1.0)*gconst97*r00)))),-1);
if(!x3110.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3109.value)+(((1.5707963267949)*(x3110.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3111=IKsin(j10);
IkReal x3112=IKcos(j10);
IkReal x3113=((1.0)*sj8);
IkReal x3114=(cj7*cj8);
IkReal x3115=(gconst98*r10);
IkReal x3116=(gconst98*r00);
IkReal x3117=((1.0)*gconst98*r20);
IkReal x3118=((1.0)*x3112);
IkReal x3119=(gconst97*x3112);
IkReal x3120=(gconst97*x3111);
IkReal x3121=((1.0)*x3111);
evalcond[0]=(((r21*x3120))+(((-1.0)*r22*x3118))+(((-1.0)*x3111*x3117)));
evalcond[1]=(cj6+(((-1.0)*r12*x3118))+(((-1.0)*x3115*x3121))+((r11*x3120)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x3118))+((r01*x3120))+(((-1.0)*x3116*x3121)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r22*x3111))+((r21*x3119))+(((-1.0)*x3112*x3117))+(((-1.0)*cj7*x3113)));
evalcond[4]=(((cj6*x3114))+((r02*x3111))+(((-1.0)*cj6*sj7*x3113))+((r01*x3119))+(((-1.0)*x3116*x3118)));
evalcond[5]=((((-1.0)*x3115*x3118))+((r12*x3111))+((sj6*x3114))+(((-1.0)*sj6*sj7*x3113))+((r11*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3122=((-1.0)*r21);
IkReal x3124 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3124)==0){
continue;
}
IkReal x3123=pow(x3124,-0.5);
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal(x3122),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3125.value))));
IkReal gconst100=(x3122*x3123);
IkReal gconst101=((1.0)*r20*x3123);
CheckValue<IkReal> x3126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3126.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x3126.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x3127=((-1.0)*r21);
CheckValue<IkReal> x3130 = IKatan2WithCheck(IkReal(x3127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3130.valid){
continue;
}
IkReal x3128=((1.0)*(x3130.value));
IkReal x3129=x3123;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3128)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3128)));
IkReal gconst100=(x3127*x3129);
IkReal gconst101=((1.0)*r20*x3129);
IkReal x3131=r22*r22;
IkReal x3132=((1.0)*x3131);
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(((-1.0)+x3131),-1);
if(!x3136.valid){
continue;
}
IkReal x3133=x3136.value;
if((((1.0)+(((-1.0)*x3132)))) < -0.00001)
continue;
IkReal x3134=IKsqrt(((1.0)+(((-1.0)*x3132))));
IkReal x3135=(cj6*x3133*x3134);
j10eval[0]=((IKabs((x3135+(((-1.0)*x3132*x3135)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3137=((-1.0)*r21);
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal(x3137),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
IkReal x3138=((1.0)*(x3140.value));
IkReal x3139=x3123;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3138)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3138)));
IkReal gconst100=(x3137*x3139);
IkReal gconst101=((1.0)*r20*x3139);
IkReal x3141=r22*r22;
IkReal x3142=((1.0)*x3141);
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(((-1.0)+x3141),-1);
if(!x3146.valid){
continue;
}
IkReal x3143=x3146.value;
if((((1.0)+(((-1.0)*x3142)))) < -0.00001)
continue;
IkReal x3144=IKsqrt(((1.0)+(((-1.0)*x3142))));
IkReal x3145=(sj6*x3143*x3144);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs((x3145+(((-1.0)*x3142*x3145))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x3147=((-1.0)*r21);
CheckValue<IkReal> x3150 = IKatan2WithCheck(IkReal(x3147),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3150.valid){
continue;
}
IkReal x3148=((1.0)*(x3150.value));
IkReal x3149=x3123;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3148)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3148)));
IkReal gconst100=(x3147*x3149);
IkReal gconst101=((1.0)*r20*x3149);
IkReal x3151=((1.0)*(r22*r22));
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3151))),-1);
if(!x3155.valid){
continue;
}
IkReal x3152=x3155.value;
IkReal x3153=((1.0)*x3152);
IkReal x3154=((((-1.0)*x3151))+(((-1.0)*x3153*(r20*r20*r20*r20)))+(((-2.0)*x3152*(r20*r20)*(r21*r21)))+(((-1.0)*x3153*(r21*r21*r21*r21))));
j10eval[0]=x3154;
j10eval[1]=IKsign(x3154);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3156=(cj8*sj7);
IkReal x3157=(gconst101*r20);
IkReal x3158=(cj7*sj8);
IkReal x3159=((1.0)*r22);
IkReal x3160=((1.0)*gconst100*r21);
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x3159))+(((-1.0)*gconst100*r21*x3160))+(((-1.0)*(x3157*x3157)))+(((2.0)*gconst100*r21*x3157)))),-1);
if(!x3161.valid){
continue;
}
CheckValue<IkReal> x3162 = IKatan2WithCheck(IkReal(((((-1.0)*x3158*x3159))+(((-1.0)*x3156*x3159)))),IkReal(((((-1.0)*x3156*x3160))+(((-1.0)*x3158*x3160))+((x3156*x3157))+((x3157*x3158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3162.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3161.value)))+(x3162.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3163=IKsin(j10);
IkReal x3164=IKcos(j10);
IkReal x3165=((1.0)*gconst101);
IkReal x3166=((1.0)*sj8);
IkReal x3167=(cj7*cj8);
IkReal x3168=(gconst100*x3163);
IkReal x3169=((1.0)*x3164);
IkReal x3170=(gconst100*x3164);
evalcond[0]=((((-1.0)*r20*x3163*x3165))+((r21*x3168))+(((-1.0)*r22*x3169)));
evalcond[1]=((((-1.0)*r12*x3169))+cj6+((r11*x3168))+(((-1.0)*r10*x3163*x3165)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3168))+(((-1.0)*r00*x3163*x3165))+(((-1.0)*r02*x3169)));
evalcond[3]=(((r22*x3163))+(((-1.0)*cj8*sj7))+((r21*x3170))+(((-1.0)*cj7*x3166))+(((-1.0)*r20*x3164*x3165)));
evalcond[4]=(((r02*x3163))+(((-1.0)*cj6*sj7*x3166))+(((-1.0)*r00*x3164*x3165))+((cj6*x3167))+((r01*x3170)));
evalcond[5]=(((r11*x3170))+(((-1.0)*sj6*sj7*x3166))+((r12*x3163))+((sj6*x3167))+(((-1.0)*r10*x3164*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3171=((1.0)*gconst101);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x3171))+((gconst100*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3171)))),-1);
if(!x3173.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3172.value)+(((1.5707963267949)*(x3173.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3174=IKsin(j10);
IkReal x3175=IKcos(j10);
IkReal x3176=((1.0)*gconst101);
IkReal x3177=((1.0)*sj8);
IkReal x3178=(cj7*cj8);
IkReal x3179=(gconst100*x3174);
IkReal x3180=((1.0)*x3175);
IkReal x3181=(gconst100*x3175);
evalcond[0]=((((-1.0)*r22*x3180))+((r21*x3179))+(((-1.0)*r20*x3174*x3176)));
evalcond[1]=(((r11*x3179))+(((-1.0)*r10*x3174*x3176))+cj6+(((-1.0)*r12*x3180)));
evalcond[2]=((((-1.0)*r00*x3174*x3176))+(((-1.0)*sj6))+(((-1.0)*r02*x3180))+((r01*x3179)));
evalcond[3]=((((-1.0)*cj7*x3177))+(((-1.0)*cj8*sj7))+((r22*x3174))+(((-1.0)*r20*x3175*x3176))+((r21*x3181)));
evalcond[4]=(((cj6*x3178))+((r01*x3181))+(((-1.0)*r00*x3175*x3176))+((r02*x3174))+(((-1.0)*cj6*sj7*x3177)));
evalcond[5]=((((-1.0)*r10*x3175*x3176))+(((-1.0)*sj6*sj7*x3177))+((sj6*x3178))+((r11*x3181))+((r12*x3174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3182=((1.0)*gconst101);
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst100*r21))+(((-1.0)*cj6*r20*x3182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3182)))),-1);
if(!x3184.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3183.value)+(((1.5707963267949)*(x3184.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3185=IKsin(j10);
IkReal x3186=IKcos(j10);
IkReal x3187=((1.0)*gconst101);
IkReal x3188=((1.0)*sj8);
IkReal x3189=(cj7*cj8);
IkReal x3190=(gconst100*x3185);
IkReal x3191=((1.0)*x3186);
IkReal x3192=(gconst100*x3186);
evalcond[0]=((((-1.0)*r22*x3191))+((r21*x3190))+(((-1.0)*r20*x3185*x3187)));
evalcond[1]=(cj6+(((-1.0)*r10*x3185*x3187))+((r11*x3190))+(((-1.0)*r12*x3191)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3190))+(((-1.0)*r02*x3191))+(((-1.0)*r00*x3185*x3187)));
evalcond[3]=(((r22*x3185))+((r21*x3192))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3188))+(((-1.0)*r20*x3186*x3187)));
evalcond[4]=((((-1.0)*cj6*sj7*x3188))+((r01*x3192))+(((-1.0)*r00*x3186*x3187))+((cj6*x3189))+((r02*x3185)));
evalcond[5]=(((sj6*x3189))+(((-1.0)*sj6*sj7*x3188))+((r12*x3185))+((r11*x3192))+(((-1.0)*r10*x3186*x3187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3193=((-1.0)*r10);
IkReal x3195 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3195)==0){
continue;
}
IkReal x3194=pow(x3195,-0.5);
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3193),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3196.value));
IkReal gconst103=(r11*x3194);
IkReal gconst104=(x3193*x3194);
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x3197.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x3198=((-1.0)*r10);
IkReal x3199=x3194;
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3198),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
IkReal x3200=((-1.0)*(x3201.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst103;
cj11=gconst104;
j11=x3200;
IkReal gconst102=x3200;
IkReal gconst103=(r11*x3199);
IkReal gconst104=(x3198*x3199);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3202=((1.0)*gconst103);
CheckValue<IkReal> x3203=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3202)))),-1);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x3202))+((cj6*gconst104*r00))+((gconst104*r10*sj6))+(((-1.0)*r11*sj6*x3202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3204.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3203.value)))+(x3204.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3205=IKsin(j10);
IkReal x3206=IKcos(j10);
IkReal x3207=((1.0)*gconst104);
IkReal x3208=((1.0)*sj8);
IkReal x3209=(cj7*cj8);
IkReal x3210=(gconst103*x3205);
IkReal x3211=((1.0)*x3206);
IkReal x3212=(gconst103*x3206);
evalcond[0]=((((-1.0)*r20*x3205*x3207))+((r21*x3210))+(((-1.0)*r22*x3211)));
evalcond[1]=(cj6+(((-1.0)*r10*x3205*x3207))+((r11*x3210))+(((-1.0)*r12*x3211)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3210))+(((-1.0)*r02*x3211))+(((-1.0)*r00*x3205*x3207)));
evalcond[3]=(((r22*x3205))+(((-1.0)*cj7*x3208))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x3206*x3207))+((r21*x3212)));
evalcond[4]=(((r01*x3212))+(((-1.0)*r00*x3206*x3207))+((cj6*x3209))+(((-1.0)*cj6*sj7*x3208))+((r02*x3205)));
evalcond[5]=((((-1.0)*r10*x3206*x3207))+((r12*x3205))+((r11*x3212))+((sj6*x3209))+(((-1.0)*sj6*sj7*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3213=((1.0)*gconst104);
CheckValue<IkReal> x3214 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst103*r21))+(((-1.0)*cj6*r20*x3213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3213))+(((-1.0)*gconst103*r00)))),-1);
if(!x3215.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3214.value)+(((1.5707963267949)*(x3215.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3216=IKsin(j10);
IkReal x3217=IKcos(j10);
IkReal x3218=((1.0)*gconst104);
IkReal x3219=((1.0)*sj8);
IkReal x3220=(cj7*cj8);
IkReal x3221=(gconst103*x3216);
IkReal x3222=((1.0)*x3217);
IkReal x3223=(gconst103*x3217);
evalcond[0]=(((r21*x3221))+(((-1.0)*r22*x3222))+(((-1.0)*r20*x3216*x3218)));
evalcond[1]=(cj6+((r11*x3221))+(((-1.0)*r10*x3216*x3218))+(((-1.0)*r12*x3222)));
evalcond[2]=((((-1.0)*r00*x3216*x3218))+(((-1.0)*sj6))+(((-1.0)*r02*x3222))+((r01*x3221)));
evalcond[3]=((((-1.0)*cj7*x3219))+(((-1.0)*cj8*sj7))+((r22*x3216))+((r21*x3223))+(((-1.0)*r20*x3217*x3218)));
evalcond[4]=(((cj6*x3220))+((r01*x3223))+(((-1.0)*r00*x3217*x3218))+(((-1.0)*cj6*sj7*x3219))+((r02*x3216)));
evalcond[5]=(((r11*x3223))+((r12*x3216))+((sj6*x3220))+(((-1.0)*r10*x3217*x3218))+(((-1.0)*sj6*sj7*x3219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3224=((-1.0)*r11);
IkReal x3226 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3226)==0){
continue;
}
IkReal x3225=pow(x3226,-0.5);
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal(x3224),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3227.value))));
IkReal gconst106=(x3224*x3225);
IkReal gconst107=((1.0)*r10*x3225);
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x3228.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x3229=((-1.0)*r11);
CheckValue<IkReal> x3232 = IKatan2WithCheck(IkReal(x3229),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3232.valid){
continue;
}
IkReal x3230=((1.0)*(x3232.value));
IkReal x3231=x3225;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3230)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3230)));
IkReal gconst106=(x3229*x3231);
IkReal gconst107=((1.0)*r10*x3231);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x3233=((-1.0)*r11);
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal(x3233),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
IkReal x3234=((1.0)*(x3236.value));
IkReal x3235=x3225;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3234)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3234)));
IkReal gconst106=(x3233*x3235);
IkReal gconst107=((1.0)*r10*x3235);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=sj6;
j10eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3237=((-1.0)*r11);
CheckValue<IkReal> x3240 = IKatan2WithCheck(IkReal(x3237),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3240.valid){
continue;
}
IkReal x3238=((1.0)*(x3240.value));
IkReal x3239=x3225;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3238)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3238)));
IkReal gconst106=(x3237*x3239);
IkReal gconst107=((1.0)*r10*x3239);
IkReal x3241=r12*r12;
IkReal x3242=(cj6*r02);
IkReal x3243=x3225;
IkReal x3244=(sj6*x3243);
j10eval[0]=((IKabs(((((-1.0)*x3242))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*x3244))+((x3241*x3244))+((r12*x3242*x3243))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3245=((1.0)*gconst106);
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst107*r00))+(((-1.0)*r11*sj6*x3245))+((gconst107*r10*sj6))+(((-1.0)*cj6*r01*x3245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3245))+(((-1.0)*gconst107*r21)))),-1);
if(!x3247.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3246.value)+(((1.5707963267949)*(x3247.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3248=IKsin(j10);
IkReal x3249=IKcos(j10);
IkReal x3250=((1.0)*gconst107);
IkReal x3251=(gconst106*r21);
IkReal x3252=((1.0)*sj8);
IkReal x3253=(cj7*cj8);
IkReal x3254=(gconst106*x3249);
IkReal x3255=((1.0)*x3249);
IkReal x3256=(gconst106*x3248);
evalcond[0]=(((x3248*x3251))+(((-1.0)*r22*x3255))+(((-1.0)*r20*x3248*x3250)));
evalcond[1]=(cj6+((r11*x3256))+(((-1.0)*r10*x3248*x3250))+(((-1.0)*r12*x3255)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x3248*x3250))+(((-1.0)*r02*x3255))+((r01*x3256)));
evalcond[3]=(((r22*x3248))+(((-1.0)*cj8*sj7))+((x3249*x3251))+(((-1.0)*cj7*x3252))+(((-1.0)*r20*x3249*x3250)));
evalcond[4]=((((-1.0)*r00*x3249*x3250))+((cj6*x3253))+(((-1.0)*cj6*sj7*x3252))+((r01*x3254))+((r02*x3248)));
evalcond[5]=((((-1.0)*sj6*sj7*x3252))+((r11*x3254))+((sj6*x3253))+((r12*x3248))+(((-1.0)*r10*x3249*x3250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3257=((1.0)*gconst107);
CheckValue<IkReal> x3258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x3257)))),-1);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst106*r21*sj6))+(((-1.0)*r20*sj6*x3257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3258.value)))+(x3259.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3260=IKsin(j10);
IkReal x3261=IKcos(j10);
IkReal x3262=((1.0)*gconst107);
IkReal x3263=(gconst106*r21);
IkReal x3264=((1.0)*sj8);
IkReal x3265=(cj7*cj8);
IkReal x3266=(gconst106*x3261);
IkReal x3267=((1.0)*x3261);
IkReal x3268=(gconst106*x3260);
evalcond[0]=((((-1.0)*r20*x3260*x3262))+((x3260*x3263))+(((-1.0)*r22*x3267)));
evalcond[1]=(cj6+(((-1.0)*r12*x3267))+((r11*x3268))+(((-1.0)*r10*x3260*x3262)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3268))+(((-1.0)*r02*x3267))+(((-1.0)*r00*x3260*x3262)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r20*x3261*x3262))+(((-1.0)*cj7*x3264))+((x3261*x3263))+((r22*x3260)));
evalcond[4]=(((r01*x3266))+(((-1.0)*cj6*sj7*x3264))+((r02*x3260))+((cj6*x3265))+(((-1.0)*r00*x3261*x3262)));
evalcond[5]=((((-1.0)*r10*x3261*x3262))+((r11*x3266))+((r12*x3260))+((sj6*x3265))+(((-1.0)*sj6*sj7*x3264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3269=((1.0)*gconst107);
CheckValue<IkReal> x3270 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x3269))+((cj6*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3270.valid){
continue;
}
CheckValue<IkReal> x3271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3269)))),-1);
if(!x3271.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3270.value)+(((1.5707963267949)*(x3271.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3272=IKsin(j10);
IkReal x3273=IKcos(j10);
IkReal x3274=((1.0)*gconst107);
IkReal x3275=(gconst106*r21);
IkReal x3276=((1.0)*sj8);
IkReal x3277=(cj7*cj8);
IkReal x3278=(gconst106*x3273);
IkReal x3279=((1.0)*x3273);
IkReal x3280=(gconst106*x3272);
evalcond[0]=(((x3272*x3275))+(((-1.0)*r20*x3272*x3274))+(((-1.0)*r22*x3279)));
evalcond[1]=((((-1.0)*r12*x3279))+cj6+(((-1.0)*r10*x3272*x3274))+((r11*x3280)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x3272*x3274))+(((-1.0)*r02*x3279))+((r01*x3280)));
evalcond[3]=((((-1.0)*cj8*sj7))+((x3273*x3275))+(((-1.0)*r20*x3273*x3274))+(((-1.0)*cj7*x3276))+((r22*x3272)));
evalcond[4]=((((-1.0)*r00*x3273*x3274))+((r01*x3278))+(((-1.0)*cj6*sj7*x3276))+((r02*x3272))+((cj6*x3277)));
evalcond[5]=(((sj6*x3277))+(((-1.0)*r10*x3273*x3274))+((r11*x3278))+((r12*x3272))+(((-1.0)*sj6*sj7*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3281=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x3281;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x3281);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3282=((1.0)*cj11);
IkReal x3283=((((-1.0)*r01*x3282))+(((-1.0)*r00*sj11)));
j10eval[0]=x3283;
j10eval[1]=((IKabs(((((-1.0)*r20*x3282))+((r21*sj11)))))+(IKabs(r22)));
j10eval[2]=IKsign(x3283);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3284=(sj7*sj8);
IkReal x3285=(cj11*r10);
IkReal x3286=(r11*sj11);
IkReal x3287=((1.0)*cj7*cj8);
IkReal x3288=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x3288;
j10eval[1]=((IKabs((((cj7*cj8*x3286))+(((-1.0)*x3285*x3287))+((x3284*x3285))+(((-1.0)*x3284*x3286)))))+(IKabs(((((-1.0)*r12*x3287))+((r12*x3284))))));
j10eval[2]=IKsign(x3288);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3289=(sj7*sj8);
IkReal x3290=(cj11*r10);
IkReal x3291=(r11*sj11);
IkReal x3292=((1.0)*cj7*cj8);
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294 = IKatan2WithCheck(IkReal((((cj7*cj8*x3291))+((x3289*x3290))+(((-1.0)*x3289*x3291))+(((-1.0)*x3290*x3292)))),IkReal(((((-1.0)*r12*x3292))+((r12*x3289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3294.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3293.value)))+(x3294.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3295=IKcos(j10);
IkReal x3296=IKsin(j10);
IkReal x3297=(r11*sj11);
IkReal x3298=((1.0)*sj8);
IkReal x3299=(cj11*r10);
IkReal x3300=(cj11*r00);
IkReal x3301=(cj11*r20);
IkReal x3302=((1.0)*x3295);
IkReal x3303=(sj11*x3295);
IkReal x3304=((1.0)*x3296);
IkReal x3305=(sj11*x3296);
evalcond[0]=(((x3295*x3297))+(((-1.0)*x3299*x3302))+((r12*x3296)));
evalcond[1]=(((r21*x3305))+(((-1.0)*r22*x3302))+(((-1.0)*x3301*x3304)));
evalcond[2]=((((-1.0)*r02*x3302))+((r01*x3305))+(((-1.0)*x3300*x3304)));
evalcond[3]=((1.0)+((x3296*x3297))+(((-1.0)*r12*x3302))+(((-1.0)*x3299*x3304)));
evalcond[4]=(((r02*x3296))+((cj7*cj8))+(((-1.0)*sj7*x3298))+((r01*x3303))+(((-1.0)*x3300*x3302)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x3303))+((r22*x3296))+(((-1.0)*cj7*x3298))+(((-1.0)*x3301*x3302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3306=((1.0)*cj11);
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3306))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x3306)))),-1);
if(!x3308.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3309=IKcos(j10);
IkReal x3310=IKsin(j10);
IkReal x3311=(r11*sj11);
IkReal x3312=((1.0)*sj8);
IkReal x3313=(cj11*r10);
IkReal x3314=(cj11*r00);
IkReal x3315=(cj11*r20);
IkReal x3316=((1.0)*x3309);
IkReal x3317=(sj11*x3309);
IkReal x3318=((1.0)*x3310);
IkReal x3319=(sj11*x3310);
evalcond[0]=(((r12*x3310))+(((-1.0)*x3313*x3316))+((x3309*x3311)));
evalcond[1]=(((r21*x3319))+(((-1.0)*r22*x3316))+(((-1.0)*x3315*x3318)));
evalcond[2]=((((-1.0)*x3314*x3318))+(((-1.0)*r02*x3316))+((r01*x3319)));
evalcond[3]=((1.0)+(((-1.0)*x3313*x3318))+(((-1.0)*r12*x3316))+((x3310*x3311)));
evalcond[4]=(((r02*x3310))+(((-1.0)*x3314*x3316))+((cj7*cj8))+(((-1.0)*sj7*x3312))+((r01*x3317)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x3317))+(((-1.0)*cj7*x3312))+((r22*x3310))+(((-1.0)*x3315*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3322=IKcos(j10);
IkReal x3323=IKsin(j10);
IkReal x3324=(r11*sj11);
IkReal x3325=((1.0)*sj8);
IkReal x3326=(cj11*r10);
IkReal x3327=(cj11*r00);
IkReal x3328=(cj11*r20);
IkReal x3329=((1.0)*x3322);
IkReal x3330=(sj11*x3322);
IkReal x3331=((1.0)*x3323);
IkReal x3332=(sj11*x3323);
evalcond[0]=(((r12*x3323))+(((-1.0)*x3326*x3329))+((x3322*x3324)));
evalcond[1]=(((r21*x3332))+(((-1.0)*r22*x3329))+(((-1.0)*x3328*x3331)));
evalcond[2]=((((-1.0)*r02*x3329))+((r01*x3332))+(((-1.0)*x3327*x3331)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3329))+(((-1.0)*x3326*x3331))+((x3323*x3324)));
evalcond[4]=((((-1.0)*x3327*x3329))+(((-1.0)*sj7*x3325))+((cj7*cj8))+((r01*x3330))+((r02*x3323)));
evalcond[5]=(((r22*x3323))+((r21*x3330))+(((-1.0)*cj7*x3325))+(((-1.0)*cj8*sj7))+(((-1.0)*x3328*x3329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3333=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x3333;
j10eval[1]=IKsign(x3333);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3334=((1.0)*cj11);
IkReal x3335=((((-1.0)*r21*x3334))+(((-1.0)*r20*sj11)));
j10eval[0]=x3335;
j10eval[1]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x3334))))));
j10eval[2]=IKsign(x3335);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3336=cj11*cj11;
IkReal x3337=r11*r11;
IkReal x3338=(cj11*r10);
IkReal x3339=(r11*sj11);
IkReal x3340=((r12*r12)+x3337+((x3336*(r10*r10)))+(((-1.0)*x3336*x3337))+(((-2.0)*x3338*x3339)));
j10eval[0]=x3340;
j10eval[1]=((IKabs(r12))+(IKabs((x3339+(((-1.0)*x3338))))));
j10eval[2]=IKsign(x3340);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3341=cj11*cj11;
IkReal x3342=r11*r11;
IkReal x3343=(r11*sj11);
IkReal x3344=(cj11*r10);
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal(((((-1.0)*x3344))+x3343)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3342+(((-2.0)*x3343*x3344))+((x3341*(r10*r10)))+(((-1.0)*x3341*x3342)))),-1);
if(!x3346.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3345.value)+(((1.5707963267949)*(x3346.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3347=IKcos(j10);
IkReal x3348=IKsin(j10);
IkReal x3349=(r11*sj11);
IkReal x3350=((1.0)*cj7);
IkReal x3351=(cj11*r10);
IkReal x3352=(cj11*r00);
IkReal x3353=(cj11*r20);
IkReal x3354=((1.0)*x3347);
IkReal x3355=(sj11*x3347);
IkReal x3356=((1.0)*x3348);
IkReal x3357=(sj11*x3348);
evalcond[0]=(((x3347*x3349))+(((-1.0)*x3351*x3354))+((r12*x3348)));
evalcond[1]=((((-1.0)*x3353*x3356))+((r21*x3357))+(((-1.0)*r22*x3354)));
evalcond[2]=((((-1.0)*x3352*x3356))+(((-1.0)*r02*x3354))+((r01*x3357)));
evalcond[3]=((-1.0)+((x3348*x3349))+(((-1.0)*x3351*x3356))+(((-1.0)*r12*x3354)));
evalcond[4]=((((-1.0)*x3352*x3354))+((r01*x3355))+((r02*x3348))+(((-1.0)*cj8*x3350))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x3348))+(((-1.0)*x3353*x3354))+((r21*x3355))+(((-1.0)*sj8*x3350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3358=((1.0)*cj11);
CheckValue<IkReal> x3359 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x3358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3359.valid){
continue;
}
CheckValue<IkReal> x3360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3358))+(((-1.0)*r20*sj11)))),-1);
if(!x3360.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3359.value)+(((1.5707963267949)*(x3360.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3361=IKcos(j10);
IkReal x3362=IKsin(j10);
IkReal x3363=(r11*sj11);
IkReal x3364=((1.0)*cj7);
IkReal x3365=(cj11*r10);
IkReal x3366=(cj11*r00);
IkReal x3367=(cj11*r20);
IkReal x3368=((1.0)*x3361);
IkReal x3369=(sj11*x3361);
IkReal x3370=((1.0)*x3362);
IkReal x3371=(sj11*x3362);
evalcond[0]=(((x3361*x3363))+(((-1.0)*x3365*x3368))+((r12*x3362)));
evalcond[1]=((((-1.0)*x3367*x3370))+(((-1.0)*r22*x3368))+((r21*x3371)));
evalcond[2]=(((r01*x3371))+(((-1.0)*x3366*x3370))+(((-1.0)*r02*x3368)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3368))+((x3362*x3363))+(((-1.0)*x3365*x3370)));
evalcond[4]=((((-1.0)*cj8*x3364))+((r02*x3362))+((r01*x3369))+(((-1.0)*x3366*x3368))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x3362))+((r21*x3369))+(((-1.0)*sj8*x3364))+(((-1.0)*x3367*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x3373.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3372.value)+(((1.5707963267949)*(x3373.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3374=IKcos(j10);
IkReal x3375=IKsin(j10);
IkReal x3376=(r11*sj11);
IkReal x3377=((1.0)*cj7);
IkReal x3378=(cj11*r10);
IkReal x3379=(cj11*r00);
IkReal x3380=(cj11*r20);
IkReal x3381=((1.0)*x3374);
IkReal x3382=(sj11*x3374);
IkReal x3383=((1.0)*x3375);
IkReal x3384=(sj11*x3375);
evalcond[0]=(((r12*x3375))+(((-1.0)*x3378*x3381))+((x3374*x3376)));
evalcond[1]=((((-1.0)*r22*x3381))+(((-1.0)*x3380*x3383))+((r21*x3384)));
evalcond[2]=(((r01*x3384))+(((-1.0)*r02*x3381))+(((-1.0)*x3379*x3383)));
evalcond[3]=((-1.0)+((x3375*x3376))+(((-1.0)*x3378*x3383))+(((-1.0)*r12*x3381)));
evalcond[4]=(((r01*x3382))+((r02*x3375))+(((-1.0)*x3379*x3381))+((sj7*sj8))+(((-1.0)*cj8*x3377)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x3375))+(((-1.0)*x3380*x3381))+((r21*x3382))+(((-1.0)*sj8*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3385=((-1.0)*r00);
IkReal x3387 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3387)==0){
continue;
}
IkReal x3386=pow(x3387,-0.5);
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3385),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3388.value));
IkReal gconst109=(r01*x3386);
IkReal gconst110=(x3385*x3386);
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x3389.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x3390=((-1.0)*r00);
IkReal x3391=x3386;
CheckValue<IkReal> x3393 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3390),IKFAST_ATAN2_MAGTHRESH);
if(!x3393.valid){
continue;
}
IkReal x3392=((-1.0)*(x3393.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst109;
cj11=gconst110;
j11=x3392;
IkReal gconst108=x3392;
IkReal gconst109=(r01*x3391);
IkReal gconst110=(x3390*x3391);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3394=((1.0)*gconst109);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst110*r10*sj6))+((cj6*gconst110*r00))+(((-1.0)*cj6*r01*x3394))+(((-1.0)*r11*sj6*x3394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3394))+(((-1.0)*gconst110*r21)))),-1);
if(!x3396.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3397=IKsin(j10);
IkReal x3398=IKcos(j10);
IkReal x3399=(gconst109*r21);
IkReal x3400=(gconst110*r00);
IkReal x3401=((1.0)*sj8);
IkReal x3402=(cj7*cj8);
IkReal x3403=(gconst110*r10);
IkReal x3404=(gconst110*r20);
IkReal x3405=((1.0)*x3398);
IkReal x3406=((1.0)*x3397);
IkReal x3407=(gconst109*x3398);
IkReal x3408=(gconst109*x3397);
evalcond[0]=((((-1.0)*x3404*x3406))+((x3397*x3399))+(((-1.0)*r22*x3405)));
evalcond[1]=(cj6+((r11*x3408))+(((-1.0)*r12*x3405))+(((-1.0)*x3403*x3406)));
evalcond[2]=((((-1.0)*x3400*x3406))+(((-1.0)*sj6))+(((-1.0)*r02*x3405))+((r01*x3408)));
evalcond[3]=((((-1.0)*x3404*x3405))+(((-1.0)*cj8*sj7))+((r22*x3397))+((x3398*x3399))+(((-1.0)*cj7*x3401)));
evalcond[4]=((((-1.0)*x3400*x3405))+((cj6*x3402))+(((-1.0)*cj6*sj7*x3401))+((r02*x3397))+((r01*x3407)));
evalcond[5]=(((r11*x3407))+((sj6*x3402))+((r12*x3397))+(((-1.0)*x3403*x3405))+(((-1.0)*sj6*sj7*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3409=((1.0)*gconst110);
CheckValue<IkReal> x3410 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x3409))+((gconst109*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3410.valid){
continue;
}
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3409))+(((-1.0)*gconst109*r10)))),-1);
if(!x3411.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3410.value)+(((1.5707963267949)*(x3411.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3412=IKsin(j10);
IkReal x3413=IKcos(j10);
IkReal x3414=(gconst109*r21);
IkReal x3415=(gconst110*r00);
IkReal x3416=((1.0)*sj8);
IkReal x3417=(cj7*cj8);
IkReal x3418=(gconst110*r10);
IkReal x3419=(gconst110*r20);
IkReal x3420=((1.0)*x3413);
IkReal x3421=((1.0)*x3412);
IkReal x3422=(gconst109*x3413);
IkReal x3423=(gconst109*x3412);
evalcond[0]=((((-1.0)*x3419*x3421))+(((-1.0)*r22*x3420))+((x3412*x3414)));
evalcond[1]=((((-1.0)*r12*x3420))+cj6+(((-1.0)*x3418*x3421))+((r11*x3423)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x3415*x3421))+(((-1.0)*r02*x3420))+((r01*x3423)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r22*x3412))+(((-1.0)*x3419*x3420))+((x3413*x3414))+(((-1.0)*cj7*x3416)));
evalcond[4]=(((r02*x3412))+((cj6*x3417))+(((-1.0)*x3415*x3420))+(((-1.0)*cj6*sj7*x3416))+((r01*x3422)));
evalcond[5]=(((r12*x3412))+(((-1.0)*x3418*x3420))+((sj6*x3417))+(((-1.0)*sj6*sj7*x3416))+((r11*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3424=((-1.0)*r01);
IkReal x3426 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3426)==0){
continue;
}
IkReal x3425=pow(x3426,-0.5);
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal(x3424),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3427.value))));
IkReal gconst112=(x3424*x3425);
IkReal gconst113=((1.0)*r00*x3425);
CheckValue<IkReal> x3428 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x3428.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x3429=((-1.0)*r01);
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal(x3429),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
IkReal x3430=((1.0)*(x3432.value));
IkReal x3431=x3425;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x3430)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3430)));
IkReal gconst112=(x3429*x3431);
IkReal gconst113=((1.0)*r00*x3431);
j10eval[0]=0;
j10eval[1]=cj6;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x3433=((-1.0)*r01);
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal(x3433),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
IkReal x3434=((1.0)*(x3436.value));
IkReal x3435=x3425;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x3434)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3434)));
IkReal gconst112=(x3433*x3435);
IkReal gconst113=((1.0)*r00*x3435);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3437=((-1.0)*r01);
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal(x3437),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
IkReal x3438=((1.0)*(x3440.value));
IkReal x3439=x3425;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x3438)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3438)));
IkReal gconst112=(x3437*x3439);
IkReal gconst113=((1.0)*r00*x3439);
IkReal x3441=r02*r02;
IkReal x3442=(r12*sj6);
IkReal x3443=x3425;
IkReal x3444=(cj6*x3443);
j10eval[0]=((IKabs(((((-1.0)*x3444))+((r02*x3442*x3443))+((x3441*x3444)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x3442))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3445=((1.0)*gconst112);
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x3445))+(((-1.0)*r11*sj6*x3445))+((gconst113*r10*sj6))+((cj6*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3445)))),-1);
if(!x3447.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3446.value)+(((1.5707963267949)*(x3447.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3448=IKsin(j10);
IkReal x3449=IKcos(j10);
IkReal x3450=((1.0)*sj8);
IkReal x3451=(cj7*cj8);
IkReal x3452=((1.0)*x3449);
IkReal x3453=(gconst112*x3449);
IkReal x3454=(gconst112*x3448);
IkReal x3455=(gconst113*x3452);
IkReal x3456=((1.0)*gconst113*x3448);
evalcond[0]=(((r21*x3454))+(((-1.0)*r20*x3456))+(((-1.0)*r22*x3452)));
evalcond[1]=(cj6+(((-1.0)*r10*x3456))+(((-1.0)*r12*x3452))+((r11*x3454)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x3452))+((r01*x3454))+(((-1.0)*r00*x3456)));
evalcond[3]=((((-1.0)*cj7*x3450))+((r21*x3453))+(((-1.0)*cj8*sj7))+((r22*x3448))+(((-1.0)*r20*x3455)));
evalcond[4]=(((cj6*x3451))+((r02*x3448))+(((-1.0)*cj6*sj7*x3450))+((r01*x3453))+(((-1.0)*r00*x3455)));
evalcond[5]=(((r12*x3448))+((sj6*x3451))+(((-1.0)*r10*x3455))+(((-1.0)*sj6*sj7*x3450))+((r11*x3453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3457=((1.0)*gconst113);
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3457)))),-1);
if(!x3458.valid){
continue;
}
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst112*r21*sj6))+(((-1.0)*r20*sj6*x3457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3458.value)))+(x3459.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3460=IKsin(j10);
IkReal x3461=IKcos(j10);
IkReal x3462=((1.0)*sj8);
IkReal x3463=(cj7*cj8);
IkReal x3464=((1.0)*x3461);
IkReal x3465=(gconst112*x3461);
IkReal x3466=(gconst112*x3460);
IkReal x3467=(gconst113*x3464);
IkReal x3468=((1.0)*gconst113*x3460);
evalcond[0]=((((-1.0)*r20*x3468))+(((-1.0)*r22*x3464))+((r21*x3466)));
evalcond[1]=((((-1.0)*r10*x3468))+cj6+(((-1.0)*r12*x3464))+((r11*x3466)));
evalcond[2]=((((-1.0)*r00*x3468))+(((-1.0)*sj6))+(((-1.0)*r02*x3464))+((r01*x3466)));
evalcond[3]=((((-1.0)*r20*x3467))+(((-1.0)*cj8*sj7))+((r21*x3465))+(((-1.0)*cj7*x3462))+((r22*x3460)));
evalcond[4]=((((-1.0)*r00*x3467))+(((-1.0)*cj6*sj7*x3462))+((r01*x3465))+((cj6*x3463))+((r02*x3460)));
evalcond[5]=((((-1.0)*r10*x3467))+((r12*x3460))+((r11*x3465))+(((-1.0)*sj6*sj7*x3462))+((sj6*x3463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3469=((1.0)*gconst113);
CheckValue<IkReal> x3470=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x3469)))),-1);
if(!x3470.valid){
continue;
}
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x3469))+((cj6*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3470.value)))+(x3471.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3472=IKsin(j10);
IkReal x3473=IKcos(j10);
IkReal x3474=((1.0)*sj8);
IkReal x3475=(cj7*cj8);
IkReal x3476=((1.0)*x3473);
IkReal x3477=(gconst112*x3473);
IkReal x3478=(gconst112*x3472);
IkReal x3479=(gconst113*x3476);
IkReal x3480=((1.0)*gconst113*x3472);
evalcond[0]=((((-1.0)*r20*x3480))+(((-1.0)*r22*x3476))+((r21*x3478)));
evalcond[1]=(cj6+(((-1.0)*r10*x3480))+(((-1.0)*r12*x3476))+((r11*x3478)));
evalcond[2]=((((-1.0)*r00*x3480))+(((-1.0)*sj6))+(((-1.0)*r02*x3476))+((r01*x3478)));
evalcond[3]=((((-1.0)*r20*x3479))+(((-1.0)*cj8*sj7))+((r21*x3477))+(((-1.0)*cj7*x3474))+((r22*x3472)));
evalcond[4]=((((-1.0)*r00*x3479))+(((-1.0)*cj6*sj7*x3474))+((r01*x3477))+((cj6*x3475))+((r02*x3472)));
evalcond[5]=((((-1.0)*r10*x3479))+((r12*x3472))+((r11*x3477))+(((-1.0)*sj6*sj7*x3474))+((sj6*x3475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x3481=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x3481;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x3481);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x3482=((1.0)*cj11);
IkReal x3483=((((-1.0)*r11*x3482))+(((-1.0)*r10*sj11)));
j10eval[0]=x3483;
j10eval[1]=IKsign(x3483);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3482))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x3484=cj11*cj11;
IkReal x3485=r01*r01;
IkReal x3486=(cj11*r00);
IkReal x3487=(r01*sj11);
IkReal x3488=((((-2.0)*x3486*x3487))+x3485+((x3484*(r00*r00)))+(((-1.0)*x3484*x3485))+(r02*r02));
j10eval[0]=x3488;
j10eval[1]=IKsign(x3488);
j10eval[2]=((IKabs(r02))+(IKabs((x3487+(((-1.0)*x3486))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3489=cj11*cj11;
IkReal x3490=r01*r01;
IkReal x3491=(cj11*r00);
IkReal x3492=(r01*sj11);
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(IKsign((((x3489*(r00*r00)))+(((-1.0)*x3489*x3490))+x3490+(((-2.0)*x3491*x3492))+(r02*r02))),-1);
if(!x3493.valid){
continue;
}
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal((x3492+(((-1.0)*x3491)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3493.value)))+(x3494.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3495=IKcos(j10);
IkReal x3496=IKsin(j10);
IkReal x3497=(r11*sj11);
IkReal x3498=((1.0)*sj8);
IkReal x3499=(cj11*r00);
IkReal x3500=(cj11*r10);
IkReal x3501=(cj11*r20);
IkReal x3502=((1.0)*x3495);
IkReal x3503=(sj11*x3495);
IkReal x3504=((1.0)*x3496);
IkReal x3505=(sj11*x3496);
evalcond[0]=(((r01*x3503))+((r02*x3496))+(((-1.0)*x3499*x3502)));
evalcond[1]=((((-1.0)*r22*x3502))+(((-1.0)*x3501*x3504))+((r21*x3505)));
evalcond[2]=((((-1.0)*r12*x3502))+((x3496*x3497))+(((-1.0)*x3500*x3504)));
evalcond[3]=((-1.0)+((r01*x3505))+(((-1.0)*x3499*x3504))+(((-1.0)*r02*x3502)));
evalcond[4]=((((-1.0)*sj7*x3498))+((cj7*cj8))+((r12*x3496))+((x3495*x3497))+(((-1.0)*x3500*x3502)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3498))+(((-1.0)*x3501*x3502))+((r22*x3496))+((r21*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3506=((1.0)*cj11);
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x3506)))),-1);
if(!x3507.valid){
continue;
}
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x3506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3507.value)))+(x3508.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3509=IKcos(j10);
IkReal x3510=IKsin(j10);
IkReal x3511=(r11*sj11);
IkReal x3512=((1.0)*sj8);
IkReal x3513=(cj11*r00);
IkReal x3514=(cj11*r10);
IkReal x3515=(cj11*r20);
IkReal x3516=((1.0)*x3509);
IkReal x3517=(sj11*x3509);
IkReal x3518=((1.0)*x3510);
IkReal x3519=(sj11*x3510);
evalcond[0]=((((-1.0)*x3513*x3516))+((r01*x3517))+((r02*x3510)));
evalcond[1]=((((-1.0)*x3515*x3518))+((r21*x3519))+(((-1.0)*r22*x3516)));
evalcond[2]=((((-1.0)*x3514*x3518))+((x3510*x3511))+(((-1.0)*r12*x3516)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3516))+(((-1.0)*x3513*x3518))+((r01*x3519)));
evalcond[4]=((((-1.0)*x3514*x3516))+((cj7*cj8))+((x3509*x3511))+((r12*x3510))+(((-1.0)*sj7*x3512)));
evalcond[5]=((((-1.0)*x3515*x3516))+((r21*x3517))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3512))+((r22*x3510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3520.value)))+(x3521.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3522=IKcos(j10);
IkReal x3523=IKsin(j10);
IkReal x3524=(r11*sj11);
IkReal x3525=((1.0)*sj8);
IkReal x3526=(cj11*r00);
IkReal x3527=(cj11*r10);
IkReal x3528=(cj11*r20);
IkReal x3529=((1.0)*x3522);
IkReal x3530=(sj11*x3522);
IkReal x3531=((1.0)*x3523);
IkReal x3532=(sj11*x3523);
evalcond[0]=((((-1.0)*x3526*x3529))+((r02*x3523))+((r01*x3530)));
evalcond[1]=((((-1.0)*r22*x3529))+((r21*x3532))+(((-1.0)*x3528*x3531)));
evalcond[2]=(((x3523*x3524))+(((-1.0)*x3527*x3531))+(((-1.0)*r12*x3529)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3529))+(((-1.0)*x3526*x3531))+((r01*x3532)));
evalcond[4]=((((-1.0)*x3527*x3529))+((x3522*x3524))+((cj7*cj8))+((r12*x3523))+(((-1.0)*sj7*x3525)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3525))+((r21*x3530))+((r22*x3523))+(((-1.0)*x3528*x3529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x3533=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x3533;
j10eval[1]=IKsign(x3533);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x3534=((1.0)*cj11);
IkReal x3535=((((-1.0)*r21*x3534))+(((-1.0)*r20*sj11)));
j10eval[0]=x3535;
j10eval[1]=((IKabs((((r11*sj11))+(((-1.0)*r10*x3534)))))+(IKabs(r12)));
j10eval[2]=IKsign(x3535);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x3536=(sj7*sj8);
IkReal x3537=(cj7*cj8);
IkReal x3538=((1.0)*sj11);
IkReal x3539=((1.0)*cj11);
IkReal x3540=((((-1.0)*r21*x3539))+(((-1.0)*r20*x3538)));
j10eval[0]=x3540;
j10eval[1]=((IKabs(((((-1.0)*r00*x3536*x3539))+(((-1.0)*r01*x3537*x3538))+((r01*sj11*x3536))+((cj11*r00*x3537)))))+(IKabs((((r02*x3537))+(((-1.0)*r02*x3536))))));
j10eval[2]=IKsign(x3540);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3541=(sj7*sj8);
IkReal x3542=(cj7*cj8);
IkReal x3543=((1.0)*sj11);
IkReal x3544=((1.0)*cj11);
CheckValue<IkReal> x3545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3543))+(((-1.0)*r21*x3544)))),-1);
if(!x3545.valid){
continue;
}
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal((((cj11*r00*x3542))+((r01*sj11*x3541))+(((-1.0)*r01*x3542*x3543))+(((-1.0)*r00*x3541*x3544)))),IkReal((((r02*x3542))+(((-1.0)*r02*x3541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3545.value)))+(x3546.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3547=IKcos(j10);
IkReal x3548=IKsin(j10);
IkReal x3549=(r11*sj11);
IkReal x3550=((1.0)*cj7);
IkReal x3551=(cj11*r00);
IkReal x3552=(cj11*r10);
IkReal x3553=(cj11*r20);
IkReal x3554=((1.0)*x3547);
IkReal x3555=(sj11*x3547);
IkReal x3556=((1.0)*x3548);
IkReal x3557=(sj11*x3548);
evalcond[0]=(((r02*x3548))+((r01*x3555))+(((-1.0)*x3551*x3554)));
evalcond[1]=(((r21*x3557))+(((-1.0)*x3553*x3556))+(((-1.0)*r22*x3554)));
evalcond[2]=(((x3548*x3549))+(((-1.0)*r12*x3554))+(((-1.0)*x3552*x3556)));
evalcond[3]=((1.0)+((r01*x3557))+(((-1.0)*x3551*x3556))+(((-1.0)*r02*x3554)));
evalcond[4]=(((x3547*x3549))+((r12*x3548))+(((-1.0)*cj8*x3550))+(((-1.0)*x3552*x3554))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x3555))+(((-1.0)*x3553*x3554))+(((-1.0)*sj8*x3550))+((r22*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3558=((1.0)*cj11);
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3558))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3558))+(((-1.0)*r20*sj11)))),-1);
if(!x3560.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3559.value)+(((1.5707963267949)*(x3560.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3561=IKcos(j10);
IkReal x3562=IKsin(j10);
IkReal x3563=(r11*sj11);
IkReal x3564=((1.0)*cj7);
IkReal x3565=(cj11*r00);
IkReal x3566=(cj11*r10);
IkReal x3567=(cj11*r20);
IkReal x3568=((1.0)*x3561);
IkReal x3569=(sj11*x3561);
IkReal x3570=((1.0)*x3562);
IkReal x3571=(sj11*x3562);
evalcond[0]=((((-1.0)*x3565*x3568))+((r01*x3569))+((r02*x3562)));
evalcond[1]=(((r21*x3571))+(((-1.0)*r22*x3568))+(((-1.0)*x3567*x3570)));
evalcond[2]=(((x3562*x3563))+(((-1.0)*x3566*x3570))+(((-1.0)*r12*x3568)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3568))+((r01*x3571))+(((-1.0)*x3565*x3570)));
evalcond[4]=((((-1.0)*x3566*x3568))+((x3561*x3563))+(((-1.0)*cj8*x3564))+((r12*x3562))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x3569))+(((-1.0)*sj8*x3564))+((r22*x3562))+(((-1.0)*x3567*x3568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
CheckValue<IkReal> x3573=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x3573.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3572.value)+(((1.5707963267949)*(x3573.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3574=IKcos(j10);
IkReal x3575=IKsin(j10);
IkReal x3576=(r11*sj11);
IkReal x3577=((1.0)*cj7);
IkReal x3578=(cj11*r00);
IkReal x3579=(cj11*r10);
IkReal x3580=(cj11*r20);
IkReal x3581=((1.0)*x3574);
IkReal x3582=(sj11*x3574);
IkReal x3583=((1.0)*x3575);
IkReal x3584=(sj11*x3575);
evalcond[0]=(((r01*x3582))+((r02*x3575))+(((-1.0)*x3578*x3581)));
evalcond[1]=((((-1.0)*r22*x3581))+(((-1.0)*x3580*x3583))+((r21*x3584)));
evalcond[2]=(((x3575*x3576))+(((-1.0)*x3579*x3583))+(((-1.0)*r12*x3581)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3581))+((r01*x3584))+(((-1.0)*x3578*x3583)));
evalcond[4]=((((-1.0)*cj8*x3577))+((r12*x3575))+(((-1.0)*x3579*x3581))+((x3574*x3576))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x3577))+(((-1.0)*x3580*x3581))+((r22*x3575))+((r21*x3582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x3585=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3585);
rxp1_1=(px*r21);
rxp1_2=(r11*x3585);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3586=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3586);
rxp1_1=(px*r21);
rxp1_2=(r11*x3586);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r20))+((r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3587=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3587);
rxp1_1=(px*r21);
rxp1_2=(r11*x3587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x3590.valid){
continue;
}
IkReal x3588=x3590.value;
IkReal x3589=(sj6*x3588);
cj10array[0]=((((-1.0)*cj7*cj8*x3589))+((sj7*sj8*x3589)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x3591=IKsin(j10);
IkReal x3592=IKcos(j10);
IkReal x3593=(r21*sj11);
IkReal x3594=(cj11*r20);
IkReal x3595=((1.0)*x3592);
IkReal x3596=((1.0)*x3591);
evalcond[0]=(r02*x3591);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x3595)));
evalcond[2]=((((-1.0)*x3594*x3596))+((x3591*x3593)));
evalcond[3]=(((r11*sj11*x3591))+(((-1.0)*cj11*r10*x3596)));
evalcond[4]=((((-1.0)*x3594*x3595))+(((-1.0)*cj8*sj7))+((x3592*x3593))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(((((-1.0)*cj11*r20))+((r21*sj11))),-1);
if(!x3598.valid){
continue;
}
IkReal x3597=x3598.value;
cj10array[0]=(((cj8*sj7*x3597))+((cj7*sj8*x3597)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x3599=IKsin(j10);
IkReal x3600=IKcos(j10);
IkReal x3601=(cj11*r10);
IkReal x3602=((1.0)*sj6);
IkReal x3603=((1.0)*x3600);
IkReal x3604=(sj11*x3599);
IkReal x3605=((1.0)*x3599);
evalcond[0]=(r02*x3599);
evalcond[1]=((((-1.0)*r02*x3603))+(((-1.0)*x3602)));
evalcond[2]=(((r21*x3604))+(((-1.0)*cj11*r20*x3605)));
evalcond[3]=(((r11*x3604))+(((-1.0)*x3601*x3605)));
evalcond[4]=(((r11*sj11*x3600))+((cj7*cj8*sj6))+(((-1.0)*x3601*x3603))+(((-1.0)*sj7*sj8*x3602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(r02,-1);
if(!x3606.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x3606.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x3607=IKsin(j10);
IkReal x3608=IKcos(j10);
IkReal x3609=(r21*sj11);
IkReal x3610=(r11*sj11);
IkReal x3611=((1.0)*sj7);
IkReal x3612=((1.0)*cj11*r20);
IkReal x3613=((1.0)*cj11*r10);
evalcond[0]=(r02*x3607);
evalcond[1]=(((x3607*x3609))+(((-1.0)*x3607*x3612)));
evalcond[2]=(((x3607*x3610))+(((-1.0)*x3607*x3613)));
evalcond[3]=(((x3608*x3609))+(((-1.0)*x3608*x3612))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x3611)));
evalcond[4]=(((cj7*cj8*sj6))+((x3608*x3610))+(((-1.0)*sj6*sj8*x3611))+(((-1.0)*x3608*x3613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3614=((1.0)*sj11);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x3614))+((cj11*cj6*r00))+((cj11*r10*sj6))+(((-1.0)*cj6*r01*x3614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x3614)))),-1);
if(!x3616.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3617=IKsin(j10);
IkReal x3618=IKcos(j10);
IkReal x3619=(r11*sj11);
IkReal x3620=((1.0)*sj8);
IkReal x3621=(cj7*cj8);
IkReal x3622=(cj11*r00);
IkReal x3623=(cj11*r10);
IkReal x3624=(cj11*r20);
IkReal x3625=((1.0)*x3618);
IkReal x3626=(sj11*x3618);
IkReal x3627=((1.0)*x3617);
IkReal x3628=(sj11*x3617);
evalcond[0]=((((-1.0)*x3624*x3627))+((r21*x3628))+(((-1.0)*r22*x3625)));
evalcond[1]=(cj6+(((-1.0)*x3623*x3627))+(((-1.0)*r12*x3625))+((x3617*x3619)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3628))+(((-1.0)*x3622*x3627))+(((-1.0)*r02*x3625)));
evalcond[3]=((((-1.0)*x3624*x3625))+((r21*x3626))+(((-1.0)*cj8*sj7))+((r22*x3617))+(((-1.0)*cj7*x3620)));
evalcond[4]=(((r02*x3617))+((cj6*x3621))+((r01*x3626))+(((-1.0)*x3622*x3625))+(((-1.0)*cj6*sj7*x3620)));
evalcond[5]=(((x3618*x3619))+(((-1.0)*sj6*sj7*x3620))+((sj6*x3621))+(((-1.0)*x3623*x3625))+((r12*x3617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3629=((1.0)*cj11);
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x3629))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
CheckValue<IkReal> x3631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3629))+(((-1.0)*r10*sj11)))),-1);
if(!x3631.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3630.value)+(((1.5707963267949)*(x3631.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3632=IKsin(j10);
IkReal x3633=IKcos(j10);
IkReal x3634=(r11*sj11);
IkReal x3635=((1.0)*sj8);
IkReal x3636=(cj7*cj8);
IkReal x3637=(cj11*r00);
IkReal x3638=(cj11*r10);
IkReal x3639=(cj11*r20);
IkReal x3640=((1.0)*x3633);
IkReal x3641=(sj11*x3633);
IkReal x3642=((1.0)*x3632);
IkReal x3643=(sj11*x3632);
evalcond[0]=((((-1.0)*x3639*x3642))+((r21*x3643))+(((-1.0)*r22*x3640)));
evalcond[1]=(cj6+((x3632*x3634))+(((-1.0)*r12*x3640))+(((-1.0)*x3638*x3642)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3643))+(((-1.0)*x3637*x3642))+(((-1.0)*r02*x3640)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r22*x3632))+(((-1.0)*cj7*x3635))+(((-1.0)*x3639*x3640))+((r21*x3641)));
evalcond[4]=(((r02*x3632))+((r01*x3641))+(((-1.0)*cj6*sj7*x3635))+(((-1.0)*x3637*x3640))+((cj6*x3636)));
evalcond[5]=(((r12*x3632))+(((-1.0)*sj6*sj7*x3635))+(((-1.0)*x3638*x3640))+((sj6*x3636))+((x3633*x3634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3644=((1.0)*cj11);
CheckValue<IkReal> x3645 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x3644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3645.valid){
continue;
}
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x3644)))),-1);
if(!x3646.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3645.value)+(((1.5707963267949)*(x3646.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3647=IKsin(j10);
IkReal x3648=IKcos(j10);
IkReal x3649=(r11*sj11);
IkReal x3650=((1.0)*sj8);
IkReal x3651=(cj7*cj8);
IkReal x3652=(cj11*r00);
IkReal x3653=(cj11*r10);
IkReal x3654=(cj11*r20);
IkReal x3655=((1.0)*x3648);
IkReal x3656=(sj11*x3648);
IkReal x3657=((1.0)*x3647);
IkReal x3658=(sj11*x3647);
evalcond[0]=(((r21*x3658))+(((-1.0)*x3654*x3657))+(((-1.0)*r22*x3655)));
evalcond[1]=(cj6+(((-1.0)*x3653*x3657))+((x3647*x3649))+(((-1.0)*r12*x3655)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x3655))+(((-1.0)*x3652*x3657))+((r01*x3658)));
evalcond[3]=((((-1.0)*cj7*x3650))+(((-1.0)*cj8*sj7))+((r21*x3656))+(((-1.0)*x3654*x3655))+((r22*x3647)));
evalcond[4]=(((cj6*x3651))+(((-1.0)*cj6*sj7*x3650))+((r02*x3647))+(((-1.0)*x3652*x3655))+((r01*x3656)));
evalcond[5]=((((-1.0)*x3653*x3655))+((r12*x3647))+((x3648*x3649))+((sj6*x3651))+(((-1.0)*sj6*sj7*x3650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3659=cj11*cj11;
IkReal x3660=r21*r21;
IkReal x3661=(cj7*sj8);
IkReal x3662=(cj11*r20);
IkReal x3663=(cj8*sj7);
IkReal x3664=((1.0)*r22);
IkReal x3665=((1.0)*r21*sj11);
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal(((((-1.0)*x3663*x3664))+(((-1.0)*x3661*x3664)))),IkReal(((((-1.0)*x3663*x3665))+((x3662*x3663))+(((-1.0)*x3661*x3665))+((x3661*x3662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(IKsign((((x3659*x3660))+(((-1.0)*x3660))+(((2.0)*r21*sj11*x3662))+(((-1.0)*r22*x3664))+(((-1.0)*x3659*(r20*r20))))),-1);
if(!x3667.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3666.value)+(((1.5707963267949)*(x3667.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3668=IKsin(j10);
IkReal x3669=IKcos(j10);
IkReal x3670=(r21*sj11);
IkReal x3671=(cj11*r20);
IkReal x3672=((1.0)*x3669);
evalcond[0]=(((x3668*x3670))+(((-1.0)*r22*x3672))+(((-1.0)*x3668*x3671)));
evalcond[1]=(((r22*x3668))+(((-1.0)*x3671*x3672))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))+((x3669*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x3673=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x3673))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x3673))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x3673))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x3673))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x3673))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x3673))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x3674=IKcos(j6);
IkReal x3675=IKsin(j6);
IkReal x3676=((1.0)*r10);
IkReal x3677=(r11*sj11);
IkReal x3678=((1.0)*cj10);
IkReal x3679=(cj11*sj10);
IkReal x3680=((1.0)*r00);
IkReal x3681=((1.0)*sj8);
IkReal x3682=((0.39225)*sj8);
IkReal x3683=((0.09465)*cj11);
IkReal x3684=((0.09465)*sj11);
IkReal x3685=((1.0)*cj11);
IkReal x3686=(r01*sj11);
IkReal x3687=((0.39225)*cj8*sj7);
IkReal x3688=(cj7*x3674);
IkReal x3689=(cj7*x3675);
IkReal x3690=(sj7*x3674);
IkReal x3691=((1.0)*sj7*x3675);
evalcond[0]=((((-1.0)*x3676*x3679))+(((-1.0)*r12*x3678))+x3674+((sj10*x3677)));
evalcond[1]=(((sj10*x3686))+(((-1.0)*x3675))+(((-1.0)*x3679*x3680))+(((-1.0)*r02*x3678)));
evalcond[2]=((((-1.0)*cj8*x3690))+(((-1.0)*sj11*x3680))+(((-1.0)*r01*x3685))+(((-1.0)*x3681*x3688)));
evalcond[3]=((((-1.0)*sj11*x3676))+(((-1.0)*cj8*x3691))+(((-1.0)*r11*x3685))+(((-1.0)*x3681*x3689)));
evalcond[4]=((((-1.0)*x3681*x3690))+((r02*sj10))+((cj10*x3686))+(((-1.0)*cj11*r00*x3678))+((cj8*x3688)));
evalcond[5]=(((r12*sj10))+(((-1.0)*cj10*cj11*x3676))+((cj10*x3677))+(((-1.0)*sj7*x3675*x3681))+((cj8*x3689)));
evalcond[6]=((((0.425)*x3690))+(((-1.0)*r00*x3684))+(((-1.0)*px))+(((-1.0)*r01*x3683))+((x3674*x3687))+((x3682*x3688))+(((-0.10915)*x3675)));
evalcond[7]=((((-1.0)*py))+(((0.10915)*x3674))+((x3675*x3687))+((x3682*x3689))+(((0.425)*sj7*x3675))+(((-1.0)*r11*x3683))+(((-1.0)*r10*x3684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))),-1);
if(!x3692.valid){
continue;
}
CheckValue<IkReal> x3693 = IKatan2WithCheck(IkReal((((cj11*r11))+((r10*sj11)))),IkReal((((r00*sj11))+((cj11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3693.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3692.value)))+(x3693.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x3694=IKcos(j6);
IkReal x3695=IKsin(j6);
IkReal x3696=((1.0)*sj11);
IkReal x3697=((1.0)*cj8);
IkReal x3698=(cj7*sj8);
IkReal x3699=((0.09465)*cj11);
IkReal x3700=((0.09465)*sj11);
IkReal x3701=((1.0)*cj11);
IkReal x3702=((0.39225)*cj8*sj7);
IkReal x3703=(sj7*x3695);
IkReal x3704=(sj7*x3694);
evalcond[0]=((((-1.0)*x3697*x3704))+(((-1.0)*r01*x3701))+(((-1.0)*x3694*x3698))+(((-1.0)*r00*x3696)));
evalcond[1]=((((-1.0)*x3697*x3703))+(((-1.0)*r10*x3696))+(((-1.0)*r11*x3701))+(((-1.0)*x3695*x3698)));
evalcond[2]=((((-1.0)*r00*x3700))+(((-0.10915)*x3695))+(((-1.0)*px))+((x3694*x3702))+(((0.39225)*x3694*x3698))+(((-1.0)*r01*x3699))+(((0.425)*x3704)));
evalcond[3]=(((x3695*x3702))+(((-1.0)*r10*x3700))+(((-1.0)*r11*x3699))+(((0.39225)*x3695*x3698))+(((-1.0)*py))+(((0.10915)*x3694))+(((0.425)*x3703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3705=((1.0)*cj11);
IkReal x3706=((((-1.0)*r01*x3705))+(((-1.0)*r00*sj11)));
j10eval[0]=x3706;
j10eval[1]=IKsign(x3706);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x3705))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3707=((1.0)*cj11);
IkReal x3708=((((-1.0)*r11*x3707))+(((-1.0)*r10*sj11)));
j10eval[0]=x3708;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x3707))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x3708);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3709=((1.0)*sj11);
IkReal x3710=((((-1.0)*cj11*r21))+(((-1.0)*r20*x3709)));
j10eval[0]=x3710;
j10eval[1]=((IKabs(((((-1.0)*cj6*r01*x3709))+((cj11*cj6*r00))+(((-1.0)*r11*sj6*x3709))+((cj11*r10*sj6)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6))))));
j10eval[2]=IKsign(x3710);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3711=((-1.0)*r20);
IkReal x3713 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3713)==0){
continue;
}
IkReal x3712=pow(x3713,-0.5);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3711),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3714.value));
IkReal gconst97=(r21*x3712);
IkReal gconst98=(x3711*x3712);
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x3715.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x3716=((-1.0)*r20);
IkReal x3717=x3712;
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3716),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal x3718=((-1.0)*(x3719.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3718;
IkReal gconst96=x3718;
IkReal gconst97=(r21*x3717);
IkReal gconst98=(x3716*x3717);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3720=((-1.0)*r20);
IkReal x3721=x3712;
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3720),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
IkReal x3722=((-1.0)*(x3723.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3722;
IkReal gconst96=x3722;
IkReal gconst97=(r21*x3721);
IkReal gconst98=(x3720*x3721);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x3724=((-1.0)*r20);
IkReal x3725=x3712;
CheckValue<IkReal> x3727 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3724),IKFAST_ATAN2_MAGTHRESH);
if(!x3727.valid){
continue;
}
IkReal x3726=((-1.0)*(x3727.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst97;
cj11=gconst98;
j11=x3726;
IkReal gconst96=x3726;
IkReal gconst97=(r21*x3725);
IkReal gconst98=(x3724*x3725);
IkReal x3728=((1.0)*(r22*r22));
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3728))),-1);
if(!x3732.valid){
continue;
}
IkReal x3729=x3732.value;
IkReal x3730=((1.0)*x3729);
IkReal x3731=((((-1.0)*x3728))+(((-1.0)*x3730*(r20*r20*r20*r20)))+(((-2.0)*x3729*(r20*r20)*(r21*r21)))+(((-1.0)*x3730*(r21*r21*r21*r21))));
j10eval[0]=x3731;
j10eval[1]=IKsign(x3731);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3733=(cj8*sj7);
IkReal x3734=(cj7*sj8);
IkReal x3735=(gconst98*r20);
IkReal x3736=((1.0)*r22);
IkReal x3737=((1.0)*gconst97*r21);
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r21*x3737))+(((-1.0)*(x3735*x3735)))+(((2.0)*gconst97*r21*x3735))+(((-1.0)*r22*x3736)))),-1);
if(!x3738.valid){
continue;
}
CheckValue<IkReal> x3739 = IKatan2WithCheck(IkReal(((((-1.0)*x3733*x3736))+(((-1.0)*x3734*x3736)))),IkReal((((x3733*x3735))+((x3734*x3735))+(((-1.0)*x3733*x3737))+(((-1.0)*x3734*x3737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3739.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3738.value)))+(x3739.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3740=IKsin(j10);
IkReal x3741=IKcos(j10);
IkReal x3742=((1.0)*sj8);
IkReal x3743=(cj7*cj8);
IkReal x3744=(gconst98*r10);
IkReal x3745=(gconst98*r00);
IkReal x3746=((1.0)*gconst98*r20);
IkReal x3747=((1.0)*x3741);
IkReal x3748=(gconst97*x3741);
IkReal x3749=(gconst97*x3740);
IkReal x3750=((1.0)*x3740);
evalcond[0]=((((-1.0)*r22*x3747))+(((-1.0)*x3740*x3746))+((r21*x3749)));
evalcond[1]=(cj6+(((-1.0)*r12*x3747))+((r11*x3749))+(((-1.0)*x3744*x3750)));
evalcond[2]=(((r01*x3749))+(((-1.0)*sj6))+(((-1.0)*x3745*x3750))+(((-1.0)*r02*x3747)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r22*x3740))+(((-1.0)*x3741*x3746))+(((-1.0)*cj7*x3742))+((r21*x3748)));
evalcond[4]=(((r01*x3748))+((r02*x3740))+(((-1.0)*x3745*x3747))+(((-1.0)*cj6*sj7*x3742))+((cj6*x3743)));
evalcond[5]=(((sj6*x3743))+((r12*x3740))+((r11*x3748))+(((-1.0)*sj6*sj7*x3742))+(((-1.0)*x3744*x3747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3751=((1.0)*gconst98);
CheckValue<IkReal> x3752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3751))+(((-1.0)*gconst97*r10)))),-1);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst97*r21*sj6))+(((-1.0)*r20*sj6*x3751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3752.value)))+(x3753.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3754=IKsin(j10);
IkReal x3755=IKcos(j10);
IkReal x3756=((1.0)*sj8);
IkReal x3757=(cj7*cj8);
IkReal x3758=(gconst98*r10);
IkReal x3759=(gconst98*r00);
IkReal x3760=((1.0)*gconst98*r20);
IkReal x3761=((1.0)*x3755);
IkReal x3762=(gconst97*x3755);
IkReal x3763=(gconst97*x3754);
IkReal x3764=((1.0)*x3754);
evalcond[0]=(((r21*x3763))+(((-1.0)*r22*x3761))+(((-1.0)*x3754*x3760)));
evalcond[1]=(cj6+((r11*x3763))+(((-1.0)*r12*x3761))+(((-1.0)*x3758*x3764)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x3759*x3764))+(((-1.0)*r02*x3761))+((r01*x3763)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r21*x3762))+(((-1.0)*x3755*x3760))+((r22*x3754))+(((-1.0)*cj7*x3756)));
evalcond[4]=((((-1.0)*x3759*x3761))+((r02*x3754))+(((-1.0)*cj6*sj7*x3756))+((cj6*x3757))+((r01*x3762)));
evalcond[5]=(((sj6*x3757))+((r12*x3754))+(((-1.0)*sj6*sj7*x3756))+((r11*x3762))+(((-1.0)*x3758*x3761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3765=((1.0)*gconst98);
CheckValue<IkReal> x3766=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3765))+(((-1.0)*gconst97*r00)))),-1);
if(!x3766.valid){
continue;
}
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x3765))+((cj6*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3766.value)))+(x3767.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3768=IKsin(j10);
IkReal x3769=IKcos(j10);
IkReal x3770=((1.0)*sj8);
IkReal x3771=(cj7*cj8);
IkReal x3772=(gconst98*r10);
IkReal x3773=(gconst98*r00);
IkReal x3774=((1.0)*gconst98*r20);
IkReal x3775=((1.0)*x3769);
IkReal x3776=(gconst97*x3769);
IkReal x3777=(gconst97*x3768);
IkReal x3778=((1.0)*x3768);
evalcond[0]=(((r21*x3777))+(((-1.0)*r22*x3775))+(((-1.0)*x3768*x3774)));
evalcond[1]=(cj6+((r11*x3777))+(((-1.0)*x3772*x3778))+(((-1.0)*r12*x3775)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x3773*x3778))+(((-1.0)*r02*x3775))+((r01*x3777)));
evalcond[3]=(((r22*x3768))+(((-1.0)*cj7*x3770))+((r21*x3776))+(((-1.0)*cj8*sj7))+(((-1.0)*x3769*x3774)));
evalcond[4]=(((r02*x3768))+(((-1.0)*cj6*sj7*x3770))+(((-1.0)*x3773*x3775))+((cj6*x3771))+((r01*x3776)));
evalcond[5]=(((sj6*x3771))+(((-1.0)*sj6*sj7*x3770))+((r11*x3776))+((r12*x3768))+(((-1.0)*x3772*x3775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3779=((-1.0)*r21);
IkReal x3781 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3781)==0){
continue;
}
IkReal x3780=pow(x3781,-0.5);
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal(x3779),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3782.value))));
IkReal gconst100=(x3779*x3780);
IkReal gconst101=((1.0)*r20*x3780);
CheckValue<IkReal> x3783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x3783.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x3784=((-1.0)*r21);
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal(x3784),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
IkReal x3785=((1.0)*(x3787.value));
IkReal x3786=x3780;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3785)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3785)));
IkReal gconst100=(x3784*x3786);
IkReal gconst101=((1.0)*r20*x3786);
IkReal x3788=r22*r22;
IkReal x3789=((1.0)*x3788);
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(((-1.0)+x3788),-1);
if(!x3793.valid){
continue;
}
IkReal x3790=x3793.value;
if((((1.0)+(((-1.0)*x3789)))) < -0.00001)
continue;
IkReal x3791=IKsqrt(((1.0)+(((-1.0)*x3789))));
IkReal x3792=(cj6*x3790*x3791);
j10eval[0]=((IKabs((x3792+(((-1.0)*x3789*x3792)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3794=((-1.0)*r21);
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal(x3794),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
IkReal x3795=((1.0)*(x3797.value));
IkReal x3796=x3780;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3795)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3795)));
IkReal gconst100=(x3794*x3796);
IkReal gconst101=((1.0)*r20*x3796);
IkReal x3798=r22*r22;
IkReal x3799=((1.0)*x3798);
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(((-1.0)+x3798),-1);
if(!x3803.valid){
continue;
}
IkReal x3800=x3803.value;
if((((1.0)+(((-1.0)*x3799)))) < -0.00001)
continue;
IkReal x3801=IKsqrt(((1.0)+(((-1.0)*x3799))));
IkReal x3802=(sj6*x3800*x3801);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs((x3802+(((-1.0)*x3799*x3802))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x3804=((-1.0)*r21);
CheckValue<IkReal> x3807 = IKatan2WithCheck(IkReal(x3804),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3807.valid){
continue;
}
IkReal x3805=((1.0)*(x3807.value));
IkReal x3806=x3780;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst100;
cj11=gconst101;
j11=((3.14159265)+(((-1.0)*x3805)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3805)));
IkReal gconst100=(x3804*x3806);
IkReal gconst101=((1.0)*r20*x3806);
IkReal x3808=((1.0)*(r22*r22));
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3808))),-1);
if(!x3812.valid){
continue;
}
IkReal x3809=x3812.value;
IkReal x3810=((1.0)*x3809);
IkReal x3811=((((-1.0)*x3810*(r21*r21*r21*r21)))+(((-1.0)*x3808))+(((-1.0)*x3810*(r20*r20*r20*r20)))+(((-2.0)*x3809*(r20*r20)*(r21*r21))));
j10eval[0]=x3811;
j10eval[1]=IKsign(x3811);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3813=(cj8*sj7);
IkReal x3814=(gconst101*r20);
IkReal x3815=(cj7*sj8);
IkReal x3816=((1.0)*r22);
IkReal x3817=((1.0)*gconst100*r21);
CheckValue<IkReal> x3818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x3816))+(((2.0)*gconst100*r21*x3814))+(((-1.0)*(x3814*x3814)))+(((-1.0)*gconst100*r21*x3817)))),-1);
if(!x3818.valid){
continue;
}
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(((((-1.0)*x3815*x3816))+(((-1.0)*x3813*x3816)))),IkReal((((x3813*x3814))+(((-1.0)*x3815*x3817))+(((-1.0)*x3813*x3817))+((x3814*x3815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3818.value)))+(x3819.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3820=IKsin(j10);
IkReal x3821=IKcos(j10);
IkReal x3822=((1.0)*gconst101);
IkReal x3823=((1.0)*sj8);
IkReal x3824=(cj7*cj8);
IkReal x3825=(gconst100*x3820);
IkReal x3826=((1.0)*x3821);
IkReal x3827=(gconst100*x3821);
evalcond[0]=((((-1.0)*r22*x3826))+(((-1.0)*r20*x3820*x3822))+((r21*x3825)));
evalcond[1]=((((-1.0)*r12*x3826))+cj6+((r11*x3825))+(((-1.0)*r10*x3820*x3822)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x3826))+(((-1.0)*r00*x3820*x3822))+((r01*x3825)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r22*x3820))+(((-1.0)*r20*x3821*x3822))+(((-1.0)*cj7*x3823))+((r21*x3827)));
evalcond[4]=(((cj6*x3824))+(((-1.0)*r00*x3821*x3822))+(((-1.0)*cj6*sj7*x3823))+((r02*x3820))+((r01*x3827)));
evalcond[5]=(((r12*x3820))+(((-1.0)*r10*x3821*x3822))+((r11*x3827))+(((-1.0)*sj6*sj7*x3823))+((sj6*x3824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3828=((1.0)*gconst101);
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x3828))+((gconst100*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3828)))),-1);
if(!x3830.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x3829.value)+(((1.5707963267949)*(x3830.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3831=IKsin(j10);
IkReal x3832=IKcos(j10);
IkReal x3833=((1.0)*gconst101);
IkReal x3834=((1.0)*sj8);
IkReal x3835=(cj7*cj8);
IkReal x3836=(gconst100*x3831);
IkReal x3837=((1.0)*x3832);
IkReal x3838=(gconst100*x3832);
evalcond[0]=(((r21*x3836))+(((-1.0)*r22*x3837))+(((-1.0)*r20*x3831*x3833)));
evalcond[1]=(cj6+(((-1.0)*r12*x3837))+((r11*x3836))+(((-1.0)*r10*x3831*x3833)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3836))+(((-1.0)*r00*x3831*x3833))+(((-1.0)*r02*x3837)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*r20*x3832*x3833))+((r21*x3838))+(((-1.0)*cj7*x3834))+((r22*x3831)));
evalcond[4]=(((r02*x3831))+((cj6*x3835))+((r01*x3838))+(((-1.0)*cj6*sj7*x3834))+(((-1.0)*r00*x3832*x3833)));
evalcond[5]=(((sj6*x3835))+((r12*x3831))+(((-1.0)*r10*x3832*x3833))+((r11*x3838))+(((-1.0)*sj6*sj7*x3834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3839=((1.0)*gconst101);
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3839)))),-1);
if(!x3840.valid){
continue;
}
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst100*r21))+(((-1.0)*cj6*r20*x3839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3840.value)))+(x3841.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3842=IKsin(j10);
IkReal x3843=IKcos(j10);
IkReal x3844=((1.0)*gconst101);
IkReal x3845=((1.0)*sj8);
IkReal x3846=(cj7*cj8);
IkReal x3847=(gconst100*x3842);
IkReal x3848=((1.0)*x3843);
IkReal x3849=(gconst100*x3843);
evalcond[0]=(((r21*x3847))+(((-1.0)*r20*x3842*x3844))+(((-1.0)*r22*x3848)));
evalcond[1]=(cj6+(((-1.0)*r12*x3848))+((r11*x3847))+(((-1.0)*r10*x3842*x3844)));
evalcond[2]=((((-1.0)*r02*x3848))+(((-1.0)*sj6))+(((-1.0)*r00*x3842*x3844))+((r01*x3847)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r21*x3849))+(((-1.0)*cj7*x3845))+(((-1.0)*r20*x3843*x3844))+((r22*x3842)));
evalcond[4]=((((-1.0)*cj6*sj7*x3845))+(((-1.0)*r00*x3843*x3844))+((r01*x3849))+((cj6*x3846))+((r02*x3842)));
evalcond[5]=(((r12*x3842))+(((-1.0)*r10*x3843*x3844))+(((-1.0)*sj6*sj7*x3845))+((sj6*x3846))+((r11*x3849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3850=((-1.0)*r10);
IkReal x3852 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3852)==0){
continue;
}
IkReal x3851=pow(x3852,-0.5);
CheckValue<IkReal> x3853 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3850),IKFAST_ATAN2_MAGTHRESH);
if(!x3853.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3853.value));
IkReal gconst103=(r11*x3851);
IkReal gconst104=(x3850*x3851);
CheckValue<IkReal> x3854 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3854.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x3854.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x3855=((-1.0)*r10);
IkReal x3856=x3851;
CheckValue<IkReal> x3858 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3855),IKFAST_ATAN2_MAGTHRESH);
if(!x3858.valid){
continue;
}
IkReal x3857=((-1.0)*(x3858.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst103;
cj11=gconst104;
j11=x3857;
IkReal gconst102=x3857;
IkReal gconst103=(r11*x3856);
IkReal gconst104=(x3855*x3856);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3859=((1.0)*gconst103);
CheckValue<IkReal> x3860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3859))+(((-1.0)*gconst104*r21)))),-1);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst104*r00))+((gconst104*r10*sj6))+(((-1.0)*r11*sj6*x3859))+(((-1.0)*cj6*r01*x3859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3861.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3860.value)))+(x3861.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3862=IKsin(j10);
IkReal x3863=IKcos(j10);
IkReal x3864=((1.0)*gconst104);
IkReal x3865=((1.0)*sj8);
IkReal x3866=(cj7*cj8);
IkReal x3867=(gconst103*x3862);
IkReal x3868=((1.0)*x3863);
IkReal x3869=(gconst103*x3863);
evalcond[0]=(((r21*x3867))+(((-1.0)*r20*x3862*x3864))+(((-1.0)*r22*x3868)));
evalcond[1]=(((r11*x3867))+cj6+(((-1.0)*r10*x3862*x3864))+(((-1.0)*r12*x3868)));
evalcond[2]=((((-1.0)*r02*x3868))+(((-1.0)*sj6))+((r01*x3867))+(((-1.0)*r00*x3862*x3864)));
evalcond[3]=(((r21*x3869))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3865))+(((-1.0)*r20*x3863*x3864))+((r22*x3862)));
evalcond[4]=(((r02*x3862))+(((-1.0)*cj6*sj7*x3865))+((cj6*x3866))+((r01*x3869))+(((-1.0)*r00*x3863*x3864)));
evalcond[5]=(((r11*x3869))+((sj6*x3866))+(((-1.0)*sj6*sj7*x3865))+(((-1.0)*r10*x3863*x3864))+((r12*x3862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3870=((1.0)*gconst104);
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3870)))),-1);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst103*r21))+(((-1.0)*cj6*r20*x3870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3872.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3871.value)))+(x3872.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3873=IKsin(j10);
IkReal x3874=IKcos(j10);
IkReal x3875=((1.0)*gconst104);
IkReal x3876=((1.0)*sj8);
IkReal x3877=(cj7*cj8);
IkReal x3878=(gconst103*x3873);
IkReal x3879=((1.0)*x3874);
IkReal x3880=(gconst103*x3874);
evalcond[0]=((((-1.0)*r20*x3873*x3875))+((r21*x3878))+(((-1.0)*r22*x3879)));
evalcond[1]=(cj6+(((-1.0)*r12*x3879))+(((-1.0)*r10*x3873*x3875))+((r11*x3878)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3878))+(((-1.0)*r02*x3879))+(((-1.0)*r00*x3873*x3875)));
evalcond[3]=((((-1.0)*r20*x3874*x3875))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3876))+((r21*x3880))+((r22*x3873)));
evalcond[4]=((((-1.0)*r00*x3874*x3875))+(((-1.0)*cj6*sj7*x3876))+((r01*x3880))+((cj6*x3877))+((r02*x3873)));
evalcond[5]=(((r11*x3880))+((sj6*x3877))+((r12*x3873))+(((-1.0)*sj6*sj7*x3876))+(((-1.0)*r10*x3874*x3875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3881=((-1.0)*r11);
IkReal x3883 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3883)==0){
continue;
}
IkReal x3882=pow(x3883,-0.5);
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal(x3881),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3884.value))));
IkReal gconst106=(x3881*x3882);
IkReal gconst107=((1.0)*r10*x3882);
CheckValue<IkReal> x3885 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x3885.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x3886=((-1.0)*r11);
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(x3886),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
IkReal x3887=((1.0)*(x3889.value));
IkReal x3888=x3882;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3887)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3887)));
IkReal gconst106=(x3886*x3888);
IkReal gconst107=((1.0)*r10*x3888);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x3890=((-1.0)*r11);
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(x3890),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
IkReal x3891=((1.0)*(x3893.value));
IkReal x3892=x3882;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3891)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3891)));
IkReal gconst106=(x3890*x3892);
IkReal gconst107=((1.0)*r10*x3892);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=sj6;
j10eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x3894=((-1.0)*r11);
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(x3894),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
IkReal x3895=((1.0)*(x3897.value));
IkReal x3896=x3882;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst106;
cj11=gconst107;
j11=((3.14159265)+(((-1.0)*x3895)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3895)));
IkReal gconst106=(x3894*x3896);
IkReal gconst107=((1.0)*r10*x3896);
IkReal x3898=r12*r12;
IkReal x3899=(cj6*r02);
IkReal x3900=x3882;
IkReal x3901=(sj6*x3900);
j10eval[0]=((IKabs((((r12*x3899*x3900))+(((-1.0)*x3901))+((x3898*x3901)))))+(IKabs(((((-1.0)*x3899))+(((-1.0)*r12*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3902=((1.0)*gconst106);
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3902)))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x3902))+((cj6*gconst107*r00))+((gconst107*r10*sj6))+(((-1.0)*r11*sj6*x3902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3903.value)))+(x3904.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3905=IKsin(j10);
IkReal x3906=IKcos(j10);
IkReal x3907=((1.0)*gconst107);
IkReal x3908=(gconst106*r21);
IkReal x3909=((1.0)*sj8);
IkReal x3910=(cj7*cj8);
IkReal x3911=(gconst106*x3906);
IkReal x3912=((1.0)*x3906);
IkReal x3913=(gconst106*x3905);
evalcond[0]=((((-1.0)*r22*x3912))+((x3905*x3908))+(((-1.0)*r20*x3905*x3907)));
evalcond[1]=(cj6+((r11*x3913))+(((-1.0)*r10*x3905*x3907))+(((-1.0)*r12*x3912)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x3912))+((r01*x3913))+(((-1.0)*r00*x3905*x3907)));
evalcond[3]=(((r22*x3905))+(((-1.0)*cj8*sj7))+((x3906*x3908))+(((-1.0)*cj7*x3909))+(((-1.0)*r20*x3906*x3907)));
evalcond[4]=((((-1.0)*r00*x3906*x3907))+(((-1.0)*cj6*sj7*x3909))+((r01*x3911))+((r02*x3905))+((cj6*x3910)));
evalcond[5]=(((sj6*x3910))+((r12*x3905))+((r11*x3911))+(((-1.0)*sj6*sj7*x3909))+(((-1.0)*r10*x3906*x3907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3914=((1.0)*gconst107);
CheckValue<IkReal> x3915=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x3914)))),-1);
if(!x3915.valid){
continue;
}
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst106*r21*sj6))+(((-1.0)*r20*sj6*x3914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3915.value)))+(x3916.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3917=IKsin(j10);
IkReal x3918=IKcos(j10);
IkReal x3919=((1.0)*gconst107);
IkReal x3920=(gconst106*r21);
IkReal x3921=((1.0)*sj8);
IkReal x3922=(cj7*cj8);
IkReal x3923=(gconst106*x3918);
IkReal x3924=((1.0)*x3918);
IkReal x3925=(gconst106*x3917);
evalcond[0]=(((x3917*x3920))+(((-1.0)*r22*x3924))+(((-1.0)*r20*x3917*x3919)));
evalcond[1]=(((r11*x3925))+cj6+(((-1.0)*r10*x3917*x3919))+(((-1.0)*r12*x3924)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x3917*x3919))+(((-1.0)*r02*x3924))+((r01*x3925)));
evalcond[3]=(((x3918*x3920))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x3918*x3919))+(((-1.0)*cj7*x3921))+((r22*x3917)));
evalcond[4]=(((cj6*x3922))+(((-1.0)*r00*x3918*x3919))+((r02*x3917))+((r01*x3923))+(((-1.0)*cj6*sj7*x3921)));
evalcond[5]=(((r11*x3923))+(((-1.0)*r10*x3918*x3919))+((sj6*x3922))+((r12*x3917))+(((-1.0)*sj6*sj7*x3921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3926=((1.0)*gconst107);
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3926)))),-1);
if(!x3927.valid){
continue;
}
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x3926))+((cj6*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3927.value)))+(x3928.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3929=IKsin(j10);
IkReal x3930=IKcos(j10);
IkReal x3931=((1.0)*gconst107);
IkReal x3932=(gconst106*r21);
IkReal x3933=((1.0)*sj8);
IkReal x3934=(cj7*cj8);
IkReal x3935=(gconst106*x3930);
IkReal x3936=((1.0)*x3930);
IkReal x3937=(gconst106*x3929);
evalcond[0]=((((-1.0)*r20*x3929*x3931))+((x3929*x3932))+(((-1.0)*r22*x3936)));
evalcond[1]=(cj6+(((-1.0)*r10*x3929*x3931))+(((-1.0)*r12*x3936))+((r11*x3937)));
evalcond[2]=((((-1.0)*sj6))+((r01*x3937))+(((-1.0)*r00*x3929*x3931))+(((-1.0)*r02*x3936)));
evalcond[3]=((((-1.0)*cj7*x3933))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x3930*x3931))+((r22*x3929))+((x3930*x3932)));
evalcond[4]=(((r01*x3935))+(((-1.0)*cj6*sj7*x3933))+((r02*x3929))+(((-1.0)*r00*x3930*x3931))+((cj6*x3934)));
evalcond[5]=(((r12*x3929))+(((-1.0)*r10*x3930*x3931))+((sj6*x3934))+((r11*x3935))+(((-1.0)*sj6*sj7*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3938=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x3938;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x3938);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3939=((1.0)*cj11);
IkReal x3940=((((-1.0)*r01*x3939))+(((-1.0)*r00*sj11)));
j10eval[0]=x3940;
j10eval[1]=((IKabs((((r21*sj11))+(((-1.0)*r20*x3939)))))+(IKabs(r22)));
j10eval[2]=IKsign(x3940);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal x3941=(sj7*sj8);
IkReal x3942=(cj11*r10);
IkReal x3943=(r11*sj11);
IkReal x3944=((1.0)*cj7*cj8);
IkReal x3945=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x3945;
j10eval[1]=((IKabs((((cj7*cj8*x3943))+(((-1.0)*x3942*x3944))+((x3941*x3942))+(((-1.0)*x3941*x3943)))))+(IKabs(((((-1.0)*r12*x3944))+((r12*x3941))))));
j10eval[2]=IKsign(x3945);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3946=(sj7*sj8);
IkReal x3947=(cj11*r10);
IkReal x3948=(r11*sj11);
IkReal x3949=((1.0)*cj7*cj8);
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal((((cj7*cj8*x3948))+((x3946*x3947))+(((-1.0)*x3946*x3948))+(((-1.0)*x3947*x3949)))),IkReal(((((-1.0)*r12*x3949))+((r12*x3946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3950.value)))+(x3951.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3952=IKcos(j10);
IkReal x3953=IKsin(j10);
IkReal x3954=(r11*sj11);
IkReal x3955=((1.0)*sj8);
IkReal x3956=(cj11*r10);
IkReal x3957=(cj11*r00);
IkReal x3958=(cj11*r20);
IkReal x3959=((1.0)*x3952);
IkReal x3960=(sj11*x3952);
IkReal x3961=((1.0)*x3953);
IkReal x3962=(sj11*x3953);
evalcond[0]=((((-1.0)*x3956*x3959))+((x3952*x3954))+((r12*x3953)));
evalcond[1]=((((-1.0)*r22*x3959))+(((-1.0)*x3958*x3961))+((r21*x3962)));
evalcond[2]=((((-1.0)*x3957*x3961))+(((-1.0)*r02*x3959))+((r01*x3962)));
evalcond[3]=((1.0)+((x3953*x3954))+(((-1.0)*r12*x3959))+(((-1.0)*x3956*x3961)));
evalcond[4]=((((-1.0)*x3957*x3959))+((cj7*cj8))+(((-1.0)*sj7*x3955))+((r02*x3953))+((r01*x3960)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x3960))+(((-1.0)*cj7*x3955))+((r22*x3953))+(((-1.0)*x3958*x3959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3963=((1.0)*cj11);
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x3963)))),-1);
if(!x3964.valid){
continue;
}
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3963))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3964.value)))+(x3965.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3966=IKcos(j10);
IkReal x3967=IKsin(j10);
IkReal x3968=(r11*sj11);
IkReal x3969=((1.0)*sj8);
IkReal x3970=(cj11*r10);
IkReal x3971=(cj11*r00);
IkReal x3972=(cj11*r20);
IkReal x3973=((1.0)*x3966);
IkReal x3974=(sj11*x3966);
IkReal x3975=((1.0)*x3967);
IkReal x3976=(sj11*x3967);
evalcond[0]=(((r12*x3967))+(((-1.0)*x3970*x3973))+((x3966*x3968)));
evalcond[1]=((((-1.0)*x3972*x3975))+((r21*x3976))+(((-1.0)*r22*x3973)));
evalcond[2]=((((-1.0)*r02*x3973))+(((-1.0)*x3971*x3975))+((r01*x3976)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3973))+(((-1.0)*x3970*x3975))+((x3967*x3968)));
evalcond[4]=(((r02*x3967))+((cj7*cj8))+(((-1.0)*x3971*x3973))+((r01*x3974))+(((-1.0)*sj7*x3969)));
evalcond[5]=((((-1.0)*x3972*x3973))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x3969))+((r22*x3967))+((r21*x3974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x3977.valid){
continue;
}
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3977.value)))+(x3978.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x3979=IKcos(j10);
IkReal x3980=IKsin(j10);
IkReal x3981=(r11*sj11);
IkReal x3982=((1.0)*sj8);
IkReal x3983=(cj11*r10);
IkReal x3984=(cj11*r00);
IkReal x3985=(cj11*r20);
IkReal x3986=((1.0)*x3979);
IkReal x3987=(sj11*x3979);
IkReal x3988=((1.0)*x3980);
IkReal x3989=(sj11*x3980);
evalcond[0]=((((-1.0)*x3983*x3986))+((x3979*x3981))+((r12*x3980)));
evalcond[1]=(((r21*x3989))+(((-1.0)*x3985*x3988))+(((-1.0)*r22*x3986)));
evalcond[2]=((((-1.0)*x3984*x3988))+((r01*x3989))+(((-1.0)*r02*x3986)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3986))+(((-1.0)*x3983*x3988))+((x3980*x3981)));
evalcond[4]=((((-1.0)*x3984*x3986))+((r01*x3987))+(((-1.0)*sj7*x3982))+((cj7*cj8))+((r02*x3980)));
evalcond[5]=(((r21*x3987))+(((-1.0)*cj8*sj7))+(((-1.0)*x3985*x3986))+(((-1.0)*cj7*x3982))+((r22*x3980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3990=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x3990;
j10eval[1]=IKsign(x3990);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3991=((1.0)*cj11);
IkReal x3992=((((-1.0)*r20*sj11))+(((-1.0)*r21*x3991)));
j10eval[0]=x3992;
j10eval[1]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x3991))))));
j10eval[2]=IKsign(x3992);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3993=cj11*cj11;
IkReal x3994=r11*r11;
IkReal x3995=(cj11*r10);
IkReal x3996=(r11*sj11);
IkReal x3997=((r12*r12)+((x3993*(r10*r10)))+(((-1.0)*x3993*x3994))+x3994+(((-2.0)*x3995*x3996)));
j10eval[0]=x3997;
j10eval[1]=((IKabs(r12))+(IKabs((x3996+(((-1.0)*x3995))))));
j10eval[2]=IKsign(x3997);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3998=cj11*cj11;
IkReal x3999=r11*r11;
IkReal x4000=(r11*sj11);
IkReal x4001=(cj11*r10);
CheckValue<IkReal> x4002=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4000*x4001))+(((-1.0)*x3998*x3999))+x3999+((x3998*(r10*r10))))),-1);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003 = IKatan2WithCheck(IkReal(((((-1.0)*x4001))+x4000)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4002.value)))+(x4003.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4004=IKcos(j10);
IkReal x4005=IKsin(j10);
IkReal x4006=(r11*sj11);
IkReal x4007=((1.0)*cj7);
IkReal x4008=(cj11*r10);
IkReal x4009=(cj11*r00);
IkReal x4010=(cj11*r20);
IkReal x4011=((1.0)*x4004);
IkReal x4012=(sj11*x4004);
IkReal x4013=((1.0)*x4005);
IkReal x4014=(sj11*x4005);
evalcond[0]=(((r12*x4005))+((x4004*x4006))+(((-1.0)*x4008*x4011)));
evalcond[1]=((((-1.0)*r22*x4011))+((r21*x4014))+(((-1.0)*x4010*x4013)));
evalcond[2]=((((-1.0)*r02*x4011))+((r01*x4014))+(((-1.0)*x4009*x4013)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4011))+((x4005*x4006))+(((-1.0)*x4008*x4013)));
evalcond[4]=((((-1.0)*cj8*x4007))+((r01*x4012))+((r02*x4005))+(((-1.0)*x4009*x4011))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x4007))+((r22*x4005))+((r21*x4012))+(((-1.0)*x4010*x4011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4015=((1.0)*cj11);
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x4015)))),-1);
if(!x4016.valid){
continue;
}
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x4015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4016.value)))+(x4017.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4018=IKcos(j10);
IkReal x4019=IKsin(j10);
IkReal x4020=(r11*sj11);
IkReal x4021=((1.0)*cj7);
IkReal x4022=(cj11*r10);
IkReal x4023=(cj11*r00);
IkReal x4024=(cj11*r20);
IkReal x4025=((1.0)*x4018);
IkReal x4026=(sj11*x4018);
IkReal x4027=((1.0)*x4019);
IkReal x4028=(sj11*x4019);
evalcond[0]=((((-1.0)*x4022*x4025))+((x4018*x4020))+((r12*x4019)));
evalcond[1]=((((-1.0)*r22*x4025))+(((-1.0)*x4024*x4027))+((r21*x4028)));
evalcond[2]=((((-1.0)*x4023*x4027))+(((-1.0)*r02*x4025))+((r01*x4028)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4025))+(((-1.0)*x4022*x4027))+((x4019*x4020)));
evalcond[4]=(((r02*x4019))+(((-1.0)*x4023*x4025))+((r01*x4026))+(((-1.0)*cj8*x4021))+((sj7*sj8)));
evalcond[5]=((((-1.0)*sj8*x4021))+(((-1.0)*cj8*sj7))+(((-1.0)*x4024*x4025))+((r21*x4026))+((r22*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4029 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x4030.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4029.value)+(((1.5707963267949)*(x4030.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4031=IKcos(j10);
IkReal x4032=IKsin(j10);
IkReal x4033=(r11*sj11);
IkReal x4034=((1.0)*cj7);
IkReal x4035=(cj11*r10);
IkReal x4036=(cj11*r00);
IkReal x4037=(cj11*r20);
IkReal x4038=((1.0)*x4031);
IkReal x4039=(sj11*x4031);
IkReal x4040=((1.0)*x4032);
IkReal x4041=(sj11*x4032);
evalcond[0]=((((-1.0)*x4035*x4038))+((r12*x4032))+((x4031*x4033)));
evalcond[1]=((((-1.0)*r22*x4038))+((r21*x4041))+(((-1.0)*x4037*x4040)));
evalcond[2]=((((-1.0)*x4036*x4040))+((r01*x4041))+(((-1.0)*r02*x4038)));
evalcond[3]=((-1.0)+((x4032*x4033))+(((-1.0)*x4035*x4040))+(((-1.0)*r12*x4038)));
evalcond[4]=(((r02*x4032))+(((-1.0)*cj8*x4034))+((r01*x4039))+(((-1.0)*x4036*x4038))+((sj7*sj8)));
evalcond[5]=(((r21*x4039))+(((-1.0)*x4037*x4038))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x4034))+((r22*x4032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4042=((-1.0)*r00);
IkReal x4044 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4044)==0){
continue;
}
IkReal x4043=pow(x4044,-0.5);
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4042),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4045.value));
IkReal gconst109=(r01*x4043);
IkReal gconst110=(x4042*x4043);
CheckValue<IkReal> x4046 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4046.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x4046.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x4047=((-1.0)*r00);
IkReal x4048=x4043;
CheckValue<IkReal> x4050 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4047),IKFAST_ATAN2_MAGTHRESH);
if(!x4050.valid){
continue;
}
IkReal x4049=((-1.0)*(x4050.value));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst109;
cj11=gconst110;
j11=x4049;
IkReal gconst108=x4049;
IkReal gconst109=(r01*x4048);
IkReal gconst110=(x4047*x4048);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4051=((1.0)*gconst109);
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4051))+(((-1.0)*gconst110*r21)))),-1);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst110*r10*sj6))+(((-1.0)*cj6*r01*x4051))+(((-1.0)*r11*sj6*x4051))+((cj6*gconst110*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4052.value)))+(x4053.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4054=IKsin(j10);
IkReal x4055=IKcos(j10);
IkReal x4056=(gconst109*r21);
IkReal x4057=(gconst110*r00);
IkReal x4058=((1.0)*sj8);
IkReal x4059=(cj7*cj8);
IkReal x4060=(gconst110*r10);
IkReal x4061=(gconst110*r20);
IkReal x4062=((1.0)*x4055);
IkReal x4063=((1.0)*x4054);
IkReal x4064=(gconst109*x4055);
IkReal x4065=(gconst109*x4054);
evalcond[0]=((((-1.0)*x4061*x4063))+((x4054*x4056))+(((-1.0)*r22*x4062)));
evalcond[1]=((((-1.0)*x4060*x4063))+cj6+(((-1.0)*r12*x4062))+((r11*x4065)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x4057*x4063))+(((-1.0)*r02*x4062))+((r01*x4065)));
evalcond[3]=((((-1.0)*x4061*x4062))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x4058))+((x4055*x4056))+((r22*x4054)));
evalcond[4]=(((r02*x4054))+((cj6*x4059))+(((-1.0)*cj6*sj7*x4058))+(((-1.0)*x4057*x4062))+((r01*x4064)));
evalcond[5]=((((-1.0)*x4060*x4062))+((r11*x4064))+((sj6*x4059))+((r12*x4054))+(((-1.0)*sj6*sj7*x4058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4066=((1.0)*gconst110);
CheckValue<IkReal> x4067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4066))+(((-1.0)*gconst109*r10)))),-1);
if(!x4067.valid){
continue;
}
CheckValue<IkReal> x4068 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst109*r21*sj6))+(((-1.0)*r20*sj6*x4066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4068.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4067.value)))+(x4068.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4069=IKsin(j10);
IkReal x4070=IKcos(j10);
IkReal x4071=(gconst109*r21);
IkReal x4072=(gconst110*r00);
IkReal x4073=((1.0)*sj8);
IkReal x4074=(cj7*cj8);
IkReal x4075=(gconst110*r10);
IkReal x4076=(gconst110*r20);
IkReal x4077=((1.0)*x4070);
IkReal x4078=((1.0)*x4069);
IkReal x4079=(gconst109*x4070);
IkReal x4080=(gconst109*x4069);
evalcond[0]=((((-1.0)*r22*x4077))+((x4069*x4071))+(((-1.0)*x4076*x4078)));
evalcond[1]=((((-1.0)*x4075*x4078))+cj6+(((-1.0)*r12*x4077))+((r11*x4080)));
evalcond[2]=(((r01*x4080))+(((-1.0)*sj6))+(((-1.0)*r02*x4077))+(((-1.0)*x4072*x4078)));
evalcond[3]=((((-1.0)*cj8*sj7))+((x4070*x4071))+(((-1.0)*cj7*x4073))+((r22*x4069))+(((-1.0)*x4076*x4077)));
evalcond[4]=(((r02*x4069))+((r01*x4079))+(((-1.0)*cj6*sj7*x4073))+((cj6*x4074))+(((-1.0)*x4072*x4077)));
evalcond[5]=(((sj6*x4074))+(((-1.0)*x4075*x4077))+(((-1.0)*sj6*sj7*x4073))+((r12*x4069))+((r11*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4081=((-1.0)*r01);
IkReal x4083 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4083)==0){
continue;
}
IkReal x4082=pow(x4083,-0.5);
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(x4081),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4084.value))));
IkReal gconst112=(x4081*x4082);
IkReal gconst113=((1.0)*r00*x4082);
CheckValue<IkReal> x4085 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x4085.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x4086=((-1.0)*r01);
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal(x4086),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
IkReal x4087=((1.0)*(x4089.value));
IkReal x4088=x4082;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x4087)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4087)));
IkReal gconst112=(x4086*x4088);
IkReal gconst113=((1.0)*r00*x4088);
j10eval[0]=0;
j10eval[1]=cj6;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x4090=((-1.0)*r01);
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(x4090),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
IkReal x4091=((1.0)*(x4093.value));
IkReal x4092=x4082;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x4091)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4091)));
IkReal gconst112=(x4090*x4092);
IkReal gconst113=((1.0)*r00*x4092);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4094=((-1.0)*r01);
CheckValue<IkReal> x4097 = IKatan2WithCheck(IkReal(x4094),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4097.valid){
continue;
}
IkReal x4095=((1.0)*(x4097.value));
IkReal x4096=x4082;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=gconst112;
cj11=gconst113;
j11=((3.14159265)+(((-1.0)*x4095)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4095)));
IkReal gconst112=(x4094*x4096);
IkReal gconst113=((1.0)*r00*x4096);
IkReal x4098=r02*r02;
IkReal x4099=(r12*sj6);
IkReal x4100=x4082;
IkReal x4101=(cj6*x4100);
j10eval[0]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x4099)))))+(IKabs(((((-1.0)*x4101))+((x4098*x4101))+((r02*x4099*x4100))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4102=((1.0)*gconst112);
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4102)))),-1);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x4102))+((gconst113*r10*sj6))+(((-1.0)*r11*sj6*x4102))+((cj6*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4103.value)))+(x4104.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4105=IKsin(j10);
IkReal x4106=IKcos(j10);
IkReal x4107=((1.0)*sj8);
IkReal x4108=(cj7*cj8);
IkReal x4109=((1.0)*x4106);
IkReal x4110=(gconst112*x4106);
IkReal x4111=(gconst112*x4105);
IkReal x4112=(gconst113*x4109);
IkReal x4113=((1.0)*gconst113*x4105);
evalcond[0]=(((r21*x4111))+(((-1.0)*r22*x4109))+(((-1.0)*r20*x4113)));
evalcond[1]=(cj6+(((-1.0)*r12*x4109))+(((-1.0)*r10*x4113))+((r11*x4111)));
evalcond[2]=((((-1.0)*r00*x4113))+(((-1.0)*sj6))+((r01*x4111))+(((-1.0)*r02*x4109)));
evalcond[3]=(((r21*x4110))+((r22*x4105))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x4112))+(((-1.0)*cj7*x4107)));
evalcond[4]=((((-1.0)*r00*x4112))+(((-1.0)*cj6*sj7*x4107))+((cj6*x4108))+((r02*x4105))+((r01*x4110)));
evalcond[5]=((((-1.0)*sj6*sj7*x4107))+(((-1.0)*r10*x4112))+((sj6*x4108))+((r12*x4105))+((r11*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4114=((1.0)*gconst113);
CheckValue<IkReal> x4115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4114))+(((-1.0)*gconst112*r10)))),-1);
if(!x4115.valid){
continue;
}
CheckValue<IkReal> x4116 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst112*r21*sj6))+(((-1.0)*r20*sj6*x4114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4116.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4115.value)))+(x4116.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4117=IKsin(j10);
IkReal x4118=IKcos(j10);
IkReal x4119=((1.0)*sj8);
IkReal x4120=(cj7*cj8);
IkReal x4121=((1.0)*x4118);
IkReal x4122=(gconst112*x4118);
IkReal x4123=(gconst112*x4117);
IkReal x4124=(gconst113*x4121);
IkReal x4125=((1.0)*gconst113*x4117);
evalcond[0]=(((r21*x4123))+(((-1.0)*r22*x4121))+(((-1.0)*r20*x4125)));
evalcond[1]=((((-1.0)*r12*x4121))+cj6+(((-1.0)*r10*x4125))+((r11*x4123)));
evalcond[2]=((((-1.0)*r00*x4125))+(((-1.0)*sj6))+(((-1.0)*r02*x4121))+((r01*x4123)));
evalcond[3]=(((r21*x4122))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x4124))+(((-1.0)*cj7*x4119))+((r22*x4117)));
evalcond[4]=((((-1.0)*r00*x4124))+((r02*x4117))+(((-1.0)*cj6*sj7*x4119))+((r01*x4122))+((cj6*x4120)));
evalcond[5]=(((r12*x4117))+(((-1.0)*sj6*sj7*x4119))+(((-1.0)*r10*x4124))+((sj6*x4120))+((r11*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4126=((1.0)*gconst113);
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4126))+(((-1.0)*gconst112*r00)))),-1);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x4126))+((cj6*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4128.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4127.value)))+(x4128.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j10);
IkReal x4130=IKcos(j10);
IkReal x4131=((1.0)*sj8);
IkReal x4132=(cj7*cj8);
IkReal x4133=((1.0)*x4130);
IkReal x4134=(gconst112*x4130);
IkReal x4135=(gconst112*x4129);
IkReal x4136=(gconst113*x4133);
IkReal x4137=((1.0)*gconst113*x4129);
evalcond[0]=((((-1.0)*r20*x4137))+((r21*x4135))+(((-1.0)*r22*x4133)));
evalcond[1]=(cj6+((r11*x4135))+(((-1.0)*r12*x4133))+(((-1.0)*r10*x4137)));
evalcond[2]=((((-1.0)*sj6))+((r01*x4135))+(((-1.0)*r02*x4133))+(((-1.0)*r00*x4137)));
evalcond[3]=((((-1.0)*cj7*x4131))+(((-1.0)*r20*x4136))+(((-1.0)*cj8*sj7))+((r21*x4134))+((r22*x4129)));
evalcond[4]=((((-1.0)*cj6*sj7*x4131))+((r02*x4129))+((r01*x4134))+((cj6*x4132))+(((-1.0)*r00*x4136)));
evalcond[5]=(((r12*x4129))+((sj6*x4132))+((r11*x4134))+(((-1.0)*sj6*sj7*x4131))+(((-1.0)*r10*x4136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x4138=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x4138;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x4138);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x4139=((1.0)*cj11);
IkReal x4140=((((-1.0)*r11*x4139))+(((-1.0)*r10*sj11)));
j10eval[0]=x4140;
j10eval[1]=IKsign(x4140);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4139))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x4141=cj11*cj11;
IkReal x4142=r01*r01;
IkReal x4143=(cj11*r00);
IkReal x4144=(r01*sj11);
IkReal x4145=((((-1.0)*x4141*x4142))+x4142+((x4141*(r00*r00)))+(r02*r02)+(((-2.0)*x4143*x4144)));
j10eval[0]=x4145;
j10eval[1]=IKsign(x4145);
j10eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4143))+x4144))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4146=cj11*cj11;
IkReal x4147=r01*r01;
IkReal x4148=(cj11*r00);
IkReal x4149=(r01*sj11);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal(((((-1.0)*x4148))+x4149)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4148*x4149))+((x4146*(r00*r00)))+(((-1.0)*x4146*x4147))+x4147+(r02*r02))),-1);
if(!x4151.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4152=IKcos(j10);
IkReal x4153=IKsin(j10);
IkReal x4154=(r11*sj11);
IkReal x4155=((1.0)*sj8);
IkReal x4156=(cj11*r00);
IkReal x4157=(cj11*r10);
IkReal x4158=(cj11*r20);
IkReal x4159=((1.0)*x4152);
IkReal x4160=(sj11*x4152);
IkReal x4161=((1.0)*x4153);
IkReal x4162=(sj11*x4153);
evalcond[0]=(((r01*x4160))+((r02*x4153))+(((-1.0)*x4156*x4159)));
evalcond[1]=((((-1.0)*x4158*x4161))+((r21*x4162))+(((-1.0)*r22*x4159)));
evalcond[2]=(((x4153*x4154))+(((-1.0)*r12*x4159))+(((-1.0)*x4157*x4161)));
evalcond[3]=((-1.0)+((r01*x4162))+(((-1.0)*r02*x4159))+(((-1.0)*x4156*x4161)));
evalcond[4]=((((-1.0)*sj7*x4155))+((x4152*x4154))+((r12*x4153))+(((-1.0)*x4157*x4159))+((cj7*cj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x4155))+((r22*x4153))+((r21*x4160))+(((-1.0)*x4158*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4163=((1.0)*cj11);
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x4163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4163))+(((-1.0)*r10*sj11)))),-1);
if(!x4165.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4164.value)+(((1.5707963267949)*(x4165.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4166=IKcos(j10);
IkReal x4167=IKsin(j10);
IkReal x4168=(r11*sj11);
IkReal x4169=((1.0)*sj8);
IkReal x4170=(cj11*r00);
IkReal x4171=(cj11*r10);
IkReal x4172=(cj11*r20);
IkReal x4173=((1.0)*x4166);
IkReal x4174=(sj11*x4166);
IkReal x4175=((1.0)*x4167);
IkReal x4176=(sj11*x4167);
evalcond[0]=((((-1.0)*x4170*x4173))+((r02*x4167))+((r01*x4174)));
evalcond[1]=((((-1.0)*x4172*x4175))+((r21*x4176))+(((-1.0)*r22*x4173)));
evalcond[2]=((((-1.0)*x4171*x4175))+((x4167*x4168))+(((-1.0)*r12*x4173)));
evalcond[3]=((-1.0)+(((-1.0)*x4170*x4175))+((r01*x4176))+(((-1.0)*r02*x4173)));
evalcond[4]=((((-1.0)*x4171*x4173))+((x4166*x4168))+(((-1.0)*sj7*x4169))+((cj7*cj8))+((r12*x4167)));
evalcond[5]=(((r22*x4167))+(((-1.0)*cj8*sj7))+(((-1.0)*x4172*x4173))+((r21*x4174))+(((-1.0)*cj7*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4177=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x4177.valid){
continue;
}
CheckValue<IkReal> x4178 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4178.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4177.value)))+(x4178.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4179=IKcos(j10);
IkReal x4180=IKsin(j10);
IkReal x4181=(r11*sj11);
IkReal x4182=((1.0)*sj8);
IkReal x4183=(cj11*r00);
IkReal x4184=(cj11*r10);
IkReal x4185=(cj11*r20);
IkReal x4186=((1.0)*x4179);
IkReal x4187=(sj11*x4179);
IkReal x4188=((1.0)*x4180);
IkReal x4189=(sj11*x4180);
evalcond[0]=((((-1.0)*x4183*x4186))+((r02*x4180))+((r01*x4187)));
evalcond[1]=(((r21*x4189))+(((-1.0)*r22*x4186))+(((-1.0)*x4185*x4188)));
evalcond[2]=((((-1.0)*r12*x4186))+((x4180*x4181))+(((-1.0)*x4184*x4188)));
evalcond[3]=((-1.0)+(((-1.0)*x4183*x4188))+(((-1.0)*r02*x4186))+((r01*x4189)));
evalcond[4]=(((r12*x4180))+((x4179*x4181))+((cj7*cj8))+(((-1.0)*sj7*x4182))+(((-1.0)*x4184*x4186)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x4187))+(((-1.0)*cj7*x4182))+((r22*x4180))+(((-1.0)*x4185*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x4190=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x4190;
j10eval[1]=IKsign(x4190);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x4191=((1.0)*cj11);
IkReal x4192=((((-1.0)*r21*x4191))+(((-1.0)*r20*sj11)));
j10eval[0]=x4192;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x4191))))));
j10eval[2]=IKsign(x4192);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x4193=(sj7*sj8);
IkReal x4194=(cj7*cj8);
IkReal x4195=((1.0)*sj11);
IkReal x4196=((1.0)*cj11);
IkReal x4197=((((-1.0)*r20*x4195))+(((-1.0)*r21*x4196)));
j10eval[0]=x4197;
j10eval[1]=((IKabs((((r02*x4194))+(((-1.0)*r02*x4193)))))+(IKabs(((((-1.0)*r00*x4193*x4196))+((cj11*r00*x4194))+(((-1.0)*r01*x4194*x4195))+((r01*sj11*x4193))))));
j10eval[2]=IKsign(x4197);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4198=(sj7*sj8);
IkReal x4199=(cj7*cj8);
IkReal x4200=((1.0)*sj11);
IkReal x4201=((1.0)*cj11);
CheckValue<IkReal> x4202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4200))+(((-1.0)*r21*x4201)))),-1);
if(!x4202.valid){
continue;
}
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4198*x4201))+((cj11*r00*x4199))+(((-1.0)*r01*x4199*x4200))+((r01*sj11*x4198)))),IkReal((((r02*x4199))+(((-1.0)*r02*x4198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4202.value)))+(x4203.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4204=IKcos(j10);
IkReal x4205=IKsin(j10);
IkReal x4206=(r11*sj11);
IkReal x4207=((1.0)*cj7);
IkReal x4208=(cj11*r00);
IkReal x4209=(cj11*r10);
IkReal x4210=(cj11*r20);
IkReal x4211=((1.0)*x4204);
IkReal x4212=(sj11*x4204);
IkReal x4213=((1.0)*x4205);
IkReal x4214=(sj11*x4205);
evalcond[0]=(((r02*x4205))+(((-1.0)*x4208*x4211))+((r01*x4212)));
evalcond[1]=((((-1.0)*x4210*x4213))+(((-1.0)*r22*x4211))+((r21*x4214)));
evalcond[2]=((((-1.0)*r12*x4211))+((x4205*x4206))+(((-1.0)*x4209*x4213)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4211))+(((-1.0)*x4208*x4213))+((r01*x4214)));
evalcond[4]=(((x4204*x4206))+(((-1.0)*cj8*x4207))+((sj7*sj8))+(((-1.0)*x4209*x4211))+((r12*x4205)));
evalcond[5]=(((r22*x4205))+(((-1.0)*cj8*sj7))+(((-1.0)*x4210*x4211))+(((-1.0)*sj8*x4207))+((r21*x4212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4215=((1.0)*cj11);
CheckValue<IkReal> x4216 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x4215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4216.valid){
continue;
}
CheckValue<IkReal> x4217=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4215))+(((-1.0)*r20*sj11)))),-1);
if(!x4217.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4216.value)+(((1.5707963267949)*(x4217.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4218=IKcos(j10);
IkReal x4219=IKsin(j10);
IkReal x4220=(r11*sj11);
IkReal x4221=((1.0)*cj7);
IkReal x4222=(cj11*r00);
IkReal x4223=(cj11*r10);
IkReal x4224=(cj11*r20);
IkReal x4225=((1.0)*x4218);
IkReal x4226=(sj11*x4218);
IkReal x4227=((1.0)*x4219);
IkReal x4228=(sj11*x4219);
evalcond[0]=(((r01*x4226))+((r02*x4219))+(((-1.0)*x4222*x4225)));
evalcond[1]=((((-1.0)*x4224*x4227))+(((-1.0)*r22*x4225))+((r21*x4228)));
evalcond[2]=((((-1.0)*r12*x4225))+(((-1.0)*x4223*x4227))+((x4219*x4220)));
evalcond[3]=((1.0)+((r01*x4228))+(((-1.0)*x4222*x4227))+(((-1.0)*r02*x4225)));
evalcond[4]=(((r12*x4219))+((x4218*x4220))+(((-1.0)*x4223*x4225))+((sj7*sj8))+(((-1.0)*cj8*x4221)));
evalcond[5]=((((-1.0)*x4224*x4225))+((r22*x4219))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x4221))+((r21*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4229 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4229.valid){
continue;
}
CheckValue<IkReal> x4230=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x4230.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4229.value)+(((1.5707963267949)*(x4230.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4231=IKcos(j10);
IkReal x4232=IKsin(j10);
IkReal x4233=(r11*sj11);
IkReal x4234=((1.0)*cj7);
IkReal x4235=(cj11*r00);
IkReal x4236=(cj11*r10);
IkReal x4237=(cj11*r20);
IkReal x4238=((1.0)*x4231);
IkReal x4239=(sj11*x4231);
IkReal x4240=((1.0)*x4232);
IkReal x4241=(sj11*x4232);
evalcond[0]=(((r01*x4239))+((r02*x4232))+(((-1.0)*x4235*x4238)));
evalcond[1]=((((-1.0)*r22*x4238))+(((-1.0)*x4237*x4240))+((r21*x4241)));
evalcond[2]=(((x4232*x4233))+(((-1.0)*r12*x4238))+(((-1.0)*x4236*x4240)));
evalcond[3]=((1.0)+((r01*x4241))+(((-1.0)*x4235*x4240))+(((-1.0)*r02*x4238)));
evalcond[4]=(((r12*x4232))+((x4231*x4233))+(((-1.0)*x4236*x4238))+(((-1.0)*cj8*x4234))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x4232))+(((-1.0)*x4237*x4238))+(((-1.0)*sj8*x4234))+((r21*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x4242=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4242);
rxp1_1=(px*r21);
rxp1_2=(r11*x4242);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4243=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4243);
rxp1_1=(px*r21);
rxp1_2=(r11*x4243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r20))+((r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4244=((-1.0)*px);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4244);
rxp1_1=(px*r21);
rxp1_2=(r11*x4244);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x4247=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x4247.valid){
continue;
}
IkReal x4245=x4247.value;
IkReal x4246=(sj6*x4245);
cj10array[0]=((((-1.0)*cj7*cj8*x4246))+((sj7*sj8*x4246)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x4248=IKsin(j10);
IkReal x4249=IKcos(j10);
IkReal x4250=(r21*sj11);
IkReal x4251=(cj11*r20);
IkReal x4252=((1.0)*x4249);
IkReal x4253=((1.0)*x4248);
evalcond[0]=(r02*x4248);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x4252)));
evalcond[2]=((((-1.0)*x4251*x4253))+((x4248*x4250)));
evalcond[3]=((((-1.0)*cj11*r10*x4253))+((r11*sj11*x4248)));
evalcond[4]=((((-1.0)*cj8*sj7))+(((-1.0)*x4251*x4252))+((x4249*x4250))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(((((-1.0)*cj11*r20))+((r21*sj11))),-1);
if(!x4255.valid){
continue;
}
IkReal x4254=x4255.value;
cj10array[0]=(((cj7*sj8*x4254))+((cj8*sj7*x4254)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x4256=IKsin(j10);
IkReal x4257=IKcos(j10);
IkReal x4258=(cj11*r10);
IkReal x4259=((1.0)*sj6);
IkReal x4260=((1.0)*x4257);
IkReal x4261=(sj11*x4256);
IkReal x4262=((1.0)*x4256);
evalcond[0]=(r02*x4256);
evalcond[1]=((((-1.0)*r02*x4260))+(((-1.0)*x4259)));
evalcond[2]=(((r21*x4261))+(((-1.0)*cj11*r20*x4262)));
evalcond[3]=(((r11*x4261))+(((-1.0)*x4258*x4262)));
evalcond[4]=((((-1.0)*sj7*sj8*x4259))+((cj7*cj8*sj6))+((r11*sj11*x4257))+(((-1.0)*x4258*x4260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x4263=IKPowWithIntegerCheck(r02,-1);
if(!x4263.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x4263.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x4264=IKsin(j10);
IkReal x4265=IKcos(j10);
IkReal x4266=(r21*sj11);
IkReal x4267=(r11*sj11);
IkReal x4268=((1.0)*sj7);
IkReal x4269=((1.0)*cj11*r20);
IkReal x4270=((1.0)*cj11*r10);
evalcond[0]=(r02*x4264);
evalcond[1]=((((-1.0)*x4264*x4269))+((x4264*x4266)));
evalcond[2]=((((-1.0)*x4264*x4270))+((x4264*x4267)));
evalcond[3]=(((x4265*x4266))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x4268))+(((-1.0)*x4265*x4269)));
evalcond[4]=(((cj7*cj8*sj6))+((x4265*x4267))+(((-1.0)*x4265*x4270))+(((-1.0)*sj6*sj8*x4268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4271=((1.0)*sj11);
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x4271)))),-1);
if(!x4272.valid){
continue;
}
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x4271))+((cj11*cj6*r00))+(((-1.0)*cj6*r01*x4271))+((cj11*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4272.value)))+(x4273.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4274=IKsin(j10);
IkReal x4275=IKcos(j10);
IkReal x4276=(r11*sj11);
IkReal x4277=((1.0)*sj8);
IkReal x4278=(cj7*cj8);
IkReal x4279=(cj11*r00);
IkReal x4280=(cj11*r10);
IkReal x4281=(cj11*r20);
IkReal x4282=((1.0)*x4275);
IkReal x4283=(sj11*x4275);
IkReal x4284=((1.0)*x4274);
IkReal x4285=(sj11*x4274);
evalcond[0]=((((-1.0)*r22*x4282))+((r21*x4285))+(((-1.0)*x4281*x4284)));
evalcond[1]=(cj6+(((-1.0)*x4280*x4284))+(((-1.0)*r12*x4282))+((x4274*x4276)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x4282))+(((-1.0)*x4279*x4284))+((r01*x4285)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x4277))+((r21*x4283))+(((-1.0)*x4281*x4282))+((r22*x4274)));
evalcond[4]=(((cj6*x4278))+((r02*x4274))+(((-1.0)*x4279*x4282))+(((-1.0)*cj6*sj7*x4277))+((r01*x4283)));
evalcond[5]=((((-1.0)*x4280*x4282))+((r12*x4274))+((sj6*x4278))+((x4275*x4276))+(((-1.0)*sj6*sj7*x4277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4286=((1.0)*cj11);
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4286))+(((-1.0)*r10*sj11)))),-1);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x4286))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4287.value)))+(x4288.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4289=IKsin(j10);
IkReal x4290=IKcos(j10);
IkReal x4291=(r11*sj11);
IkReal x4292=((1.0)*sj8);
IkReal x4293=(cj7*cj8);
IkReal x4294=(cj11*r00);
IkReal x4295=(cj11*r10);
IkReal x4296=(cj11*r20);
IkReal x4297=((1.0)*x4290);
IkReal x4298=(sj11*x4290);
IkReal x4299=((1.0)*x4289);
IkReal x4300=(sj11*x4289);
evalcond[0]=((((-1.0)*r22*x4297))+(((-1.0)*x4296*x4299))+((r21*x4300)));
evalcond[1]=(cj6+((x4289*x4291))+(((-1.0)*x4295*x4299))+(((-1.0)*r12*x4297)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x4294*x4299))+((r01*x4300))+(((-1.0)*r02*x4297)));
evalcond[3]=(((r22*x4289))+(((-1.0)*x4296*x4297))+(((-1.0)*cj8*sj7))+((r21*x4298))+(((-1.0)*cj7*x4292)));
evalcond[4]=(((cj6*x4293))+((r01*x4298))+((r02*x4289))+(((-1.0)*x4294*x4297))+(((-1.0)*cj6*sj7*x4292)));
evalcond[5]=(((sj6*x4293))+((r12*x4289))+(((-1.0)*x4295*x4297))+(((-1.0)*sj6*sj7*x4292))+((x4290*x4291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4301=((1.0)*cj11);
CheckValue<IkReal> x4302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4301))+(((-1.0)*r00*sj11)))),-1);
if(!x4302.valid){
continue;
}
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4302.value)))+(x4303.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4304=IKsin(j10);
IkReal x4305=IKcos(j10);
IkReal x4306=(r11*sj11);
IkReal x4307=((1.0)*sj8);
IkReal x4308=(cj7*cj8);
IkReal x4309=(cj11*r00);
IkReal x4310=(cj11*r10);
IkReal x4311=(cj11*r20);
IkReal x4312=((1.0)*x4305);
IkReal x4313=(sj11*x4305);
IkReal x4314=((1.0)*x4304);
IkReal x4315=(sj11*x4304);
evalcond[0]=((((-1.0)*r22*x4312))+((r21*x4315))+(((-1.0)*x4311*x4314)));
evalcond[1]=(cj6+(((-1.0)*x4310*x4314))+(((-1.0)*r12*x4312))+((x4304*x4306)));
evalcond[2]=((((-1.0)*sj6))+((r01*x4315))+(((-1.0)*x4309*x4314))+(((-1.0)*r02*x4312)));
evalcond[3]=((((-1.0)*cj7*x4307))+((r22*x4304))+((r21*x4313))+(((-1.0)*cj8*sj7))+(((-1.0)*x4311*x4312)));
evalcond[4]=(((cj6*x4308))+((r02*x4304))+((r01*x4313))+(((-1.0)*x4309*x4312))+(((-1.0)*cj6*sj7*x4307)));
evalcond[5]=(((r12*x4304))+(((-1.0)*x4310*x4312))+(((-1.0)*sj6*sj7*x4307))+((x4305*x4306))+((sj6*x4308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x4316=((1.0)*sj11);
IkReal x4317=((1.0)*cj11);
IkReal x4318=(((cj7*cj8))+(((-1.0)*sj7*sj8)));
j6eval[0]=x4318;
j6eval[1]=IKsign(x4318);
j6eval[2]=((IKabs(((((-1.0)*r01*x4317))+(((-1.0)*r00*x4316)))))+(IKabs(((((-1.0)*r11*x4317))+(((-1.0)*r10*x4316))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x4319=cj11*cj11;
IkReal x4320=r21*r21;
IkReal x4321=(sj7*sj8);
IkReal x4322=(r21*sj11);
IkReal x4323=(cj11*r20);
IkReal x4324=((1.0)*cj7*cj8);
IkReal x4325=((((2.0)*x4322*x4323))+((x4319*x4320))+(((-1.0)*x4320))+(((-1.0)*x4319*(r20*r20)))+(((-1.0)*(r22*r22))));
j10eval[0]=x4325;
j10eval[1]=IKsign(x4325);
j10eval[2]=((IKabs(((((-1.0)*r22*x4324))+((r22*x4321)))))+(IKabs(((((-1.0)*x4321*x4323))+((x4321*x4322))+((cj7*cj8*x4323))+(((-1.0)*x4322*x4324))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj9=0;
cj9=1.0;
j9=0;
j6eval[0]=(((cj7*cj8))+(((-1.0)*sj7*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4326=IKcos(j6);
IkReal x4327=IKsin(j6);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x4327))+(((0.39225)*x4326)));
evalcond[1]=((((0.10915)*x4326))+(((-1.0)*py))+(((0.39225)*x4327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4328=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x4328;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x4328);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4329=((1.0)*cj11);
IkReal x4330=((((-1.0)*r01*x4329))+(((-1.0)*r00*sj11)));
j10eval[0]=x4330;
j10eval[1]=IKsign(x4330);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*r20*x4329))+((cj6*r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4331=((1.0)*cj11);
IkReal x4332=((((-1.0)*r01*x4331))+(((-1.0)*r00*sj11)));
j10eval[0]=x4332;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x4331))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x4332);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4333=((1.0)*cj11);
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4333))+(((-1.0)*r00*sj11)))),-1);
if(!x4334.valid){
continue;
}
CheckValue<IkReal> x4335 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x4333))+((r21*sj11*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4335.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4334.value)))+(x4335.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4336=IKcos(j10);
IkReal x4337=IKsin(j10);
IkReal x4338=((1.0)*sj6);
IkReal x4339=(sj11*x4336);
IkReal x4340=(sj11*x4337);
IkReal x4341=((1.0)*x4336);
IkReal x4342=(cj11*x4341);
IkReal x4343=((1.0)*cj11*x4337);
evalcond[0]=((((-1.0)*r20*x4342))+((r21*x4339))+((r22*x4337)));
evalcond[1]=((((-1.0)*r20*x4343))+((r21*x4340))+(((-1.0)*r22*x4341)));
evalcond[2]=(cj6+(((-1.0)*r12*x4341))+(((-1.0)*r10*x4343))+((r11*x4340)));
evalcond[3]=(((r01*x4339))+((r02*x4337))+(((-1.0)*cj6))+(((-1.0)*r00*x4342)));
evalcond[4]=((((-1.0)*x4338))+(((-1.0)*r10*x4342))+((r12*x4337))+((r11*x4339)));
evalcond[5]=((((-1.0)*r02*x4341))+(((-1.0)*x4338))+((r01*x4340))+(((-1.0)*r00*x4343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4344=((1.0)*cj11);
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x4344)))),-1);
if(!x4345.valid){
continue;
}
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4345.value)))+(x4346.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4347=IKcos(j10);
IkReal x4348=IKsin(j10);
IkReal x4349=((1.0)*sj6);
IkReal x4350=(sj11*x4347);
IkReal x4351=(sj11*x4348);
IkReal x4352=((1.0)*x4347);
IkReal x4353=(cj11*x4352);
IkReal x4354=((1.0)*cj11*x4348);
evalcond[0]=(((r22*x4348))+((r21*x4350))+(((-1.0)*r20*x4353)));
evalcond[1]=(((r21*x4351))+(((-1.0)*r22*x4352))+(((-1.0)*r20*x4354)));
evalcond[2]=(cj6+(((-1.0)*r12*x4352))+(((-1.0)*r10*x4354))+((r11*x4351)));
evalcond[3]=(((r02*x4348))+(((-1.0)*cj6))+(((-1.0)*r00*x4353))+((r01*x4350)));
evalcond[4]=((((-1.0)*x4349))+(((-1.0)*r10*x4353))+((r12*x4348))+((r11*x4350)));
evalcond[5]=((((-1.0)*r02*x4352))+(((-1.0)*x4349))+(((-1.0)*r00*x4354))+((r01*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x4355.valid){
continue;
}
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4355.value)))+(x4356.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4357=IKcos(j10);
IkReal x4358=IKsin(j10);
IkReal x4359=((1.0)*sj6);
IkReal x4360=(sj11*x4357);
IkReal x4361=(sj11*x4358);
IkReal x4362=((1.0)*x4357);
IkReal x4363=(cj11*x4362);
IkReal x4364=((1.0)*cj11*x4358);
evalcond[0]=(((r21*x4360))+((r22*x4358))+(((-1.0)*r20*x4363)));
evalcond[1]=((((-1.0)*r22*x4362))+((r21*x4361))+(((-1.0)*r20*x4364)));
evalcond[2]=(cj6+((r11*x4361))+(((-1.0)*r12*x4362))+(((-1.0)*r10*x4364)));
evalcond[3]=(((r01*x4360))+((r02*x4358))+(((-1.0)*r00*x4363))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*x4359))+((r11*x4360))+((r12*x4358))+(((-1.0)*r10*x4363)));
evalcond[5]=((((-1.0)*x4359))+((r01*x4361))+(((-1.0)*r02*x4362))+(((-1.0)*r00*x4364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4365=IKcos(j6);
IkReal x4366=IKsin(j6);
evalcond[0]=((((-0.10915)*x4366))+(((-1.0)*px))+(((-0.39225)*x4365)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x4365))+(((-0.39225)*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4367=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x4367;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x4367);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4368=((1.0)*cj11);
IkReal x4369=((((-1.0)*r11*x4368))+(((-1.0)*r10*sj11)));
j10eval[0]=x4369;
j10eval[1]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4368)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x4369);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4370=cj11*cj11;
IkReal x4371=(cj11*r20);
IkReal x4372=(r01*r21);
IkReal x4373=(r21*sj11);
IkReal x4374=((((-1.0)*r00*r20*x4370))+((x4370*x4372))+((cj11*r00*x4373))+(((-1.0)*r02*r22))+(((-1.0)*x4372))+((r01*sj11*x4371)));
j10eval[0]=x4374;
j10eval[1]=IKsign(x4374);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*x4371))+((cj6*x4373))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4375=cj11*cj11;
IkReal x4376=(cj11*r20);
IkReal x4377=(r01*r21);
IkReal x4378=(r21*sj11);
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x4376))+((cj6*x4378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x4375))+((cj11*r00*x4378))+(((-1.0)*r02*r22))+((x4375*x4377))+(((-1.0)*x4377))+((r01*sj11*x4376)))),-1);
if(!x4380.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4379.value)+(((1.5707963267949)*(x4380.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4381=IKcos(j10);
IkReal x4382=IKsin(j10);
IkReal x4383=(sj11*x4381);
IkReal x4384=(sj11*x4382);
IkReal x4385=((1.0)*x4381);
IkReal x4386=(cj11*x4385);
IkReal x4387=((1.0)*cj11*x4382);
evalcond[0]=(((r22*x4382))+((r21*x4383))+(((-1.0)*r20*x4386)));
evalcond[1]=((((-1.0)*r22*x4385))+((r21*x4384))+(((-1.0)*r20*x4387)));
evalcond[2]=(cj6+(((-1.0)*r00*x4386))+((r02*x4382))+((r01*x4383)));
evalcond[3]=(sj6+(((-1.0)*r10*x4386))+((r11*x4383))+((r12*x4382)));
evalcond[4]=((((-1.0)*r12*x4385))+cj6+(((-1.0)*r10*x4387))+((r11*x4384)));
evalcond[5]=((((-1.0)*r02*x4385))+(((-1.0)*sj6))+(((-1.0)*r00*x4387))+((r01*x4384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4388=((1.0)*cj11);
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20*x4388))+((cj6*r21*sj11)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4388))+(((-1.0)*r10*sj11)))),-1);
if(!x4390.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4389.value)+(((1.5707963267949)*(x4390.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4391=IKcos(j10);
IkReal x4392=IKsin(j10);
IkReal x4393=(sj11*x4391);
IkReal x4394=(sj11*x4392);
IkReal x4395=((1.0)*x4391);
IkReal x4396=(cj11*x4395);
IkReal x4397=((1.0)*cj11*x4392);
evalcond[0]=(((r22*x4392))+((r21*x4393))+(((-1.0)*r20*x4396)));
evalcond[1]=((((-1.0)*r22*x4395))+((r21*x4394))+(((-1.0)*r20*x4397)));
evalcond[2]=(((r01*x4393))+cj6+(((-1.0)*r00*x4396))+((r02*x4392)));
evalcond[3]=(sj6+(((-1.0)*r10*x4396))+((r11*x4393))+((r12*x4392)));
evalcond[4]=((((-1.0)*r12*x4395))+cj6+(((-1.0)*r10*x4397))+((r11*x4394)));
evalcond[5]=(((r01*x4394))+(((-1.0)*sj6))+(((-1.0)*r02*x4395))+(((-1.0)*r00*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x4399.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4400=IKcos(j10);
IkReal x4401=IKsin(j10);
IkReal x4402=(sj11*x4400);
IkReal x4403=(sj11*x4401);
IkReal x4404=((1.0)*x4400);
IkReal x4405=(cj11*x4404);
IkReal x4406=((1.0)*cj11*x4401);
evalcond[0]=(((r22*x4401))+((r21*x4402))+(((-1.0)*r20*x4405)));
evalcond[1]=(((r21*x4403))+(((-1.0)*r20*x4406))+(((-1.0)*r22*x4404)));
evalcond[2]=(cj6+(((-1.0)*r00*x4405))+((r01*x4402))+((r02*x4401)));
evalcond[3]=(((r11*x4402))+sj6+((r12*x4401))+(((-1.0)*r10*x4405)));
evalcond[4]=(((r11*x4403))+cj6+(((-1.0)*r10*x4406))+(((-1.0)*r12*x4404)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x4406))+((r01*x4403))+(((-1.0)*r02*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4407=IKcos(j6);
IkReal x4408=IKsin(j6);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4407))+(((-0.10915)*x4408)));
evalcond[1]=((((0.10915)*x4407))+(((-1.0)*py))+(((0.81725)*x4408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4409=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x4409;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x4409);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4410=((1.0)*cj11);
IkReal x4411=((((-1.0)*r01*x4410))+(((-1.0)*r00*sj11)));
j10eval[0]=x4411;
j10eval[1]=IKsign(x4411);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4410)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4412=((1.0)*cj11);
IkReal x4413=((((-1.0)*r01*x4412))+(((-1.0)*r00*sj11)));
j10eval[0]=x4413;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x4412))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x4413);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4414=((1.0)*cj11);
CheckValue<IkReal> x4415 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x4414))+((r21*sj11*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4415.valid){
continue;
}
CheckValue<IkReal> x4416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4414))+(((-1.0)*r00*sj11)))),-1);
if(!x4416.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4415.value)+(((1.5707963267949)*(x4416.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4417=IKcos(j10);
IkReal x4418=IKsin(j10);
IkReal x4419=((1.0)*sj6);
IkReal x4420=(sj11*x4417);
IkReal x4421=(sj11*x4418);
IkReal x4422=((1.0)*x4417);
IkReal x4423=(cj11*x4422);
IkReal x4424=((1.0)*cj11*x4418);
evalcond[0]=(((r22*x4418))+(((-1.0)*r20*x4423))+((r21*x4420)));
evalcond[1]=((((-1.0)*r22*x4422))+(((-1.0)*r20*x4424))+((r21*x4421)));
evalcond[2]=(cj6+(((-1.0)*r12*x4422))+(((-1.0)*r10*x4424))+((r11*x4421)));
evalcond[3]=(((r01*x4420))+((r02*x4418))+(((-1.0)*cj6))+(((-1.0)*r00*x4423)));
evalcond[4]=(((r12*x4418))+(((-1.0)*x4419))+(((-1.0)*r10*x4423))+((r11*x4420)));
evalcond[5]=((((-1.0)*x4419))+((r01*x4421))+(((-1.0)*r02*x4422))+(((-1.0)*r00*x4424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4425=((1.0)*cj11);
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
CheckValue<IkReal> x4427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4425))+(((-1.0)*r00*sj11)))),-1);
if(!x4427.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4426.value)+(((1.5707963267949)*(x4427.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4428=IKcos(j10);
IkReal x4429=IKsin(j10);
IkReal x4430=((1.0)*sj6);
IkReal x4431=(sj11*x4428);
IkReal x4432=(sj11*x4429);
IkReal x4433=((1.0)*x4428);
IkReal x4434=(cj11*x4433);
IkReal x4435=((1.0)*cj11*x4429);
evalcond[0]=(((r22*x4429))+(((-1.0)*r20*x4434))+((r21*x4431)));
evalcond[1]=((((-1.0)*r22*x4433))+(((-1.0)*r20*x4435))+((r21*x4432)));
evalcond[2]=(cj6+(((-1.0)*r10*x4435))+(((-1.0)*r12*x4433))+((r11*x4432)));
evalcond[3]=(((r02*x4429))+(((-1.0)*r00*x4434))+(((-1.0)*cj6))+((r01*x4431)));
evalcond[4]=((((-1.0)*x4430))+(((-1.0)*r10*x4434))+((r11*x4431))+((r12*x4429)));
evalcond[5]=((((-1.0)*r02*x4433))+(((-1.0)*x4430))+(((-1.0)*r00*x4435))+((r01*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4436=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x4436.valid){
continue;
}
CheckValue<IkReal> x4437 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4437.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4436.value)))+(x4437.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4438=IKcos(j10);
IkReal x4439=IKsin(j10);
IkReal x4440=((1.0)*sj6);
IkReal x4441=(sj11*x4438);
IkReal x4442=(sj11*x4439);
IkReal x4443=((1.0)*x4438);
IkReal x4444=(cj11*x4443);
IkReal x4445=((1.0)*cj11*x4439);
evalcond[0]=(((r22*x4439))+((r21*x4441))+(((-1.0)*r20*x4444)));
evalcond[1]=(((r21*x4442))+(((-1.0)*r22*x4443))+(((-1.0)*r20*x4445)));
evalcond[2]=(cj6+(((-1.0)*r12*x4443))+((r11*x4442))+(((-1.0)*r10*x4445)));
evalcond[3]=(((r01*x4441))+(((-1.0)*r00*x4444))+((r02*x4439))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*x4440))+((r12*x4439))+((r11*x4441))+(((-1.0)*r10*x4444)));
evalcond[5]=((((-1.0)*x4440))+((r01*x4442))+(((-1.0)*r02*x4443))+(((-1.0)*r00*x4445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4446=IKcos(j6);
IkReal x4447=IKsin(j6);
evalcond[0]=((((-0.10915)*x4447))+(((-1.0)*px))+(((0.03275)*x4446)));
evalcond[1]=((((0.10915)*x4446))+(((-1.0)*py))+(((0.03275)*x4447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4448=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x4448;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x4448);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4449=((1.0)*cj11);
IkReal x4450=((((-1.0)*r11*x4449))+(((-1.0)*r10*sj11)));
j10eval[0]=x4450;
j10eval[1]=((IKabs(((((-1.0)*cj6*r20*x4449))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x4450);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4451=cj11*cj11;
IkReal x4452=(cj11*r20);
IkReal x4453=(r01*r21);
IkReal x4454=(r21*sj11);
IkReal x4455=((((-1.0)*r02*r22))+((x4451*x4453))+(((-1.0)*r00*r20*x4451))+(((-1.0)*x4453))+((r01*sj11*x4452))+((cj11*r00*x4454)));
j10eval[0]=x4455;
j10eval[1]=IKsign(x4455);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*x4454))+(((-1.0)*cj6*x4452))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4456=cj11*cj11;
IkReal x4457=(cj11*r20);
IkReal x4458=(r01*r21);
IkReal x4459=(r21*sj11);
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*x4459))+(((-1.0)*cj6*x4457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
CheckValue<IkReal> x4461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x4456))+(((-1.0)*x4458))+((r01*sj11*x4457))+((x4456*x4458))+((cj11*r00*x4459)))),-1);
if(!x4461.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4460.value)+(((1.5707963267949)*(x4461.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4462=IKcos(j10);
IkReal x4463=IKsin(j10);
IkReal x4464=(sj11*x4462);
IkReal x4465=(sj11*x4463);
IkReal x4466=((1.0)*x4462);
IkReal x4467=(cj11*x4466);
IkReal x4468=((1.0)*cj11*x4463);
evalcond[0]=(((r22*x4463))+((r21*x4464))+(((-1.0)*r20*x4467)));
evalcond[1]=((((-1.0)*r22*x4466))+((r21*x4465))+(((-1.0)*r20*x4468)));
evalcond[2]=(cj6+((r01*x4464))+(((-1.0)*r00*x4467))+((r02*x4463)));
evalcond[3]=(sj6+((r12*x4463))+((r11*x4464))+(((-1.0)*r10*x4467)));
evalcond[4]=(cj6+((r11*x4465))+(((-1.0)*r10*x4468))+(((-1.0)*r12*x4466)));
evalcond[5]=((((-1.0)*sj6))+((r01*x4465))+(((-1.0)*r02*x4466))+(((-1.0)*r00*x4468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4469=((1.0)*cj11);
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4469))+(((-1.0)*r10*sj11)))),-1);
if(!x4470.valid){
continue;
}
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20*x4469))+((cj6*r21*sj11)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4470.value)))+(x4471.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4472=IKcos(j10);
IkReal x4473=IKsin(j10);
IkReal x4474=(sj11*x4472);
IkReal x4475=(sj11*x4473);
IkReal x4476=((1.0)*x4472);
IkReal x4477=(cj11*x4476);
IkReal x4478=((1.0)*cj11*x4473);
evalcond[0]=(((r21*x4474))+(((-1.0)*r20*x4477))+((r22*x4473)));
evalcond[1]=(((r21*x4475))+(((-1.0)*r20*x4478))+(((-1.0)*r22*x4476)));
evalcond[2]=(cj6+((r02*x4473))+(((-1.0)*r00*x4477))+((r01*x4474)));
evalcond[3]=(sj6+(((-1.0)*r10*x4477))+((r12*x4473))+((r11*x4474)));
evalcond[4]=((((-1.0)*r12*x4476))+cj6+(((-1.0)*r10*x4478))+((r11*x4475)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x4478))+((r01*x4475))+(((-1.0)*r02*x4476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4479 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4479.valid){
continue;
}
CheckValue<IkReal> x4480=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x4480.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4479.value)+(((1.5707963267949)*(x4480.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4481=IKcos(j10);
IkReal x4482=IKsin(j10);
IkReal x4483=(sj11*x4481);
IkReal x4484=(sj11*x4482);
IkReal x4485=((1.0)*x4481);
IkReal x4486=(cj11*x4485);
IkReal x4487=((1.0)*cj11*x4482);
evalcond[0]=(((r21*x4483))+(((-1.0)*r20*x4486))+((r22*x4482)));
evalcond[1]=(((r21*x4484))+(((-1.0)*r20*x4487))+(((-1.0)*r22*x4485)));
evalcond[2]=(cj6+((r02*x4482))+((r01*x4483))+(((-1.0)*r00*x4486)));
evalcond[3]=(((r11*x4483))+sj6+(((-1.0)*r10*x4486))+((r12*x4482)));
evalcond[4]=(((r11*x4484))+(((-1.0)*r12*x4485))+cj6+(((-1.0)*r10*x4487)));
evalcond[5]=((((-1.0)*sj6))+((r01*x4484))+(((-1.0)*r00*x4487))+(((-1.0)*r02*x4485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4488=IKcos(j6);
IkReal x4489=IKsin(j6);
evalcond[0]=((((-0.39225)*x4488))+(((-1.0)*px))+(((-0.10915)*x4489)));
evalcond[1]=((((0.10915)*x4488))+(((-0.39225)*x4489))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4490=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x4490;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x4490);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4491=((1.0)*cj11);
IkReal x4492=((((-1.0)*r11*x4491))+(((-1.0)*r10*sj11)));
j10eval[0]=x4492;
j10eval[1]=((IKabs(((((-1.0)*cj6*r20*x4491))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x4492);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x4493=cj11*cj11;
IkReal x4494=(cj11*r20);
IkReal x4495=(r01*r21);
IkReal x4496=(r21*sj11);
IkReal x4497=((((-1.0)*r02*r22))+(((-1.0)*x4495))+((cj11*r00*x4496))+((x4493*x4495))+((r01*sj11*x4494))+(((-1.0)*r00*r20*x4493)));
j10eval[0]=x4497;
j10eval[1]=IKsign(x4497);
j10eval[2]=((IKabs(((((-1.0)*cj6*x4494))+((cj6*x4496)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4498=cj11*cj11;
IkReal x4499=(cj11*r20);
IkReal x4500=(r01*r21);
IkReal x4501=(r21*sj11);
CheckValue<IkReal> x4502 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x4499))+((cj6*x4501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4502.valid){
continue;
}
CheckValue<IkReal> x4503=IKPowWithIntegerCheck(IKsign((((x4498*x4500))+(((-1.0)*r02*r22))+((cj11*r00*x4501))+((r01*sj11*x4499))+(((-1.0)*x4500))+(((-1.0)*r00*r20*x4498)))),-1);
if(!x4503.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4502.value)+(((1.5707963267949)*(x4503.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4504=IKcos(j10);
IkReal x4505=IKsin(j10);
IkReal x4506=(sj11*x4504);
IkReal x4507=(sj11*x4505);
IkReal x4508=((1.0)*x4504);
IkReal x4509=(cj11*x4508);
IkReal x4510=((1.0)*cj11*x4505);
evalcond[0]=(((r22*x4505))+((r21*x4506))+(((-1.0)*r20*x4509)));
evalcond[1]=(((r21*x4507))+(((-1.0)*r22*x4508))+(((-1.0)*r20*x4510)));
evalcond[2]=((((-1.0)*r00*x4509))+cj6+((r02*x4505))+((r01*x4506)));
evalcond[3]=(sj6+((r12*x4505))+((r11*x4506))+(((-1.0)*r10*x4509)));
evalcond[4]=(cj6+((r11*x4507))+(((-1.0)*r10*x4510))+(((-1.0)*r12*x4508)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x4508))+(((-1.0)*r00*x4510))+((r01*x4507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4511=((1.0)*cj11);
CheckValue<IkReal> x4512 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20*x4511))+((cj6*r21*sj11)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4511))+(((-1.0)*r10*sj11)))),-1);
if(!x4513.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4512.value)+(((1.5707963267949)*(x4513.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4514=IKcos(j10);
IkReal x4515=IKsin(j10);
IkReal x4516=(sj11*x4514);
IkReal x4517=(sj11*x4515);
IkReal x4518=((1.0)*x4514);
IkReal x4519=(cj11*x4518);
IkReal x4520=((1.0)*cj11*x4515);
evalcond[0]=(((r21*x4516))+(((-1.0)*r20*x4519))+((r22*x4515)));
evalcond[1]=((((-1.0)*r20*x4520))+((r21*x4517))+(((-1.0)*r22*x4518)));
evalcond[2]=(((r02*x4515))+cj6+((r01*x4516))+(((-1.0)*r00*x4519)));
evalcond[3]=(sj6+(((-1.0)*r10*x4519))+((r11*x4516))+((r12*x4515)));
evalcond[4]=(cj6+(((-1.0)*r12*x4518))+((r11*x4517))+(((-1.0)*r10*x4520)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x4518))+(((-1.0)*r00*x4520))+((r01*x4517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4521 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4521.valid){
continue;
}
CheckValue<IkReal> x4522=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x4522.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4521.value)+(((1.5707963267949)*(x4522.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4523=IKcos(j10);
IkReal x4524=IKsin(j10);
IkReal x4525=(sj11*x4523);
IkReal x4526=(sj11*x4524);
IkReal x4527=((1.0)*x4523);
IkReal x4528=(cj11*x4527);
IkReal x4529=((1.0)*cj11*x4524);
evalcond[0]=(((r21*x4525))+(((-1.0)*r20*x4528))+((r22*x4524)));
evalcond[1]=(((r21*x4526))+(((-1.0)*r20*x4529))+(((-1.0)*r22*x4527)));
evalcond[2]=(((r01*x4525))+cj6+(((-1.0)*r00*x4528))+((r02*x4524)));
evalcond[3]=(((r11*x4525))+((r12*x4524))+sj6+(((-1.0)*r10*x4528)));
evalcond[4]=((((-1.0)*r12*x4527))+((r11*x4526))+cj6+(((-1.0)*r10*x4529)));
evalcond[5]=(((r01*x4526))+(((-1.0)*sj6))+(((-1.0)*r00*x4529))+(((-1.0)*r02*x4527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4530=IKcos(j6);
IkReal x4531=IKsin(j6);
evalcond[0]=((((0.39225)*x4530))+(((-1.0)*px))+(((-0.10915)*x4531)));
evalcond[1]=((((0.39225)*x4531))+(((-1.0)*py))+(((0.10915)*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4532=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x4532;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x4532);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4533=((1.0)*cj11);
IkReal x4534=((((-1.0)*r01*x4533))+(((-1.0)*r00*sj11)));
j10eval[0]=x4534;
j10eval[1]=IKsign(x4534);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x4533))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x4535=((1.0)*cj11);
IkReal x4536=((((-1.0)*r01*x4535))+(((-1.0)*r00*sj11)));
j10eval[0]=x4536;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x4535))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x4536);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4537=((1.0)*cj11);
CheckValue<IkReal> x4538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4537))+(((-1.0)*r00*sj11)))),-1);
if(!x4538.valid){
continue;
}
CheckValue<IkReal> x4539 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x4537))+((r21*sj11*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4539.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4538.value)))+(x4539.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4540=IKcos(j10);
IkReal x4541=IKsin(j10);
IkReal x4542=((1.0)*sj6);
IkReal x4543=(sj11*x4540);
IkReal x4544=(sj11*x4541);
IkReal x4545=((1.0)*x4540);
IkReal x4546=(cj11*x4545);
IkReal x4547=((1.0)*cj11*x4541);
evalcond[0]=(((r22*x4541))+(((-1.0)*r20*x4546))+((r21*x4543)));
evalcond[1]=((((-1.0)*r22*x4545))+(((-1.0)*r20*x4547))+((r21*x4544)));
evalcond[2]=(cj6+(((-1.0)*r10*x4547))+(((-1.0)*r12*x4545))+((r11*x4544)));
evalcond[3]=(((r02*x4541))+(((-1.0)*r00*x4546))+((r01*x4543))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x4546))+((r12*x4541))+((r11*x4543))+(((-1.0)*x4542)));
evalcond[5]=((((-1.0)*r02*x4545))+(((-1.0)*r00*x4547))+((r01*x4544))+(((-1.0)*x4542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4548=((1.0)*cj11);
CheckValue<IkReal> x4549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4548))+(((-1.0)*r00*sj11)))),-1);
if(!x4549.valid){
continue;
}
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x4548))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4549.value)))+(x4550.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4551=IKcos(j10);
IkReal x4552=IKsin(j10);
IkReal x4553=((1.0)*sj6);
IkReal x4554=(sj11*x4551);
IkReal x4555=(sj11*x4552);
IkReal x4556=((1.0)*x4551);
IkReal x4557=(cj11*x4556);
IkReal x4558=((1.0)*cj11*x4552);
evalcond[0]=((((-1.0)*r20*x4557))+((r22*x4552))+((r21*x4554)));
evalcond[1]=((((-1.0)*r20*x4558))+((r21*x4555))+(((-1.0)*r22*x4556)));
evalcond[2]=((((-1.0)*r12*x4556))+cj6+(((-1.0)*r10*x4558))+((r11*x4555)));
evalcond[3]=((((-1.0)*r00*x4557))+((r01*x4554))+((r02*x4552))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x4557))+(((-1.0)*x4553))+((r11*x4554))+((r12*x4552)));
evalcond[5]=((((-1.0)*r00*x4558))+((r01*x4555))+(((-1.0)*x4553))+(((-1.0)*r02*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4559=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x4559.valid){
continue;
}
CheckValue<IkReal> x4560 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4560.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4559.value)))+(x4560.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4561=IKcos(j10);
IkReal x4562=IKsin(j10);
IkReal x4563=((1.0)*sj6);
IkReal x4564=(sj11*x4561);
IkReal x4565=(sj11*x4562);
IkReal x4566=((1.0)*x4561);
IkReal x4567=(cj11*x4566);
IkReal x4568=((1.0)*cj11*x4562);
evalcond[0]=((((-1.0)*r20*x4567))+((r22*x4562))+((r21*x4564)));
evalcond[1]=((((-1.0)*r20*x4568))+((r21*x4565))+(((-1.0)*r22*x4566)));
evalcond[2]=((((-1.0)*r10*x4568))+cj6+((r11*x4565))+(((-1.0)*r12*x4566)));
evalcond[3]=(((r02*x4562))+(((-1.0)*r00*x4567))+((r01*x4564))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x4567))+((r11*x4564))+((r12*x4562))+(((-1.0)*x4563)));
evalcond[5]=((((-1.0)*r00*x4568))+(((-1.0)*r02*x4566))+((r01*x4565))+(((-1.0)*x4563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4569=IKcos(j6);
IkReal x4570=IKsin(j6);
evalcond[0]=((((-0.10915)*x4570))+(((-1.0)*px))+(((-0.81725)*x4569)));
evalcond[1]=((((-1.0)*py))+(((-0.81725)*x4570))+(((0.10915)*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4571=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x4571;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x4571);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4572=((1.0)*cj11);
IkReal x4573=((((-1.0)*r11*x4572))+(((-1.0)*r10*sj11)));
j10eval[0]=x4573;
j10eval[1]=((IKabs(((((-1.0)*cj6*r20*x4572))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x4573);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x4574=cj11*cj11;
IkReal x4575=(cj11*r20);
IkReal x4576=(r01*r21);
IkReal x4577=(r21*sj11);
IkReal x4578=((((-1.0)*r00*r20*x4574))+(((-1.0)*r02*r22))+((r01*sj11*x4575))+((cj11*r00*x4577))+((x4574*x4576))+(((-1.0)*x4576)));
j10eval[0]=x4578;
j10eval[1]=IKsign(x4578);
j10eval[2]=((IKabs(((((-1.0)*cj6*x4575))+((cj6*x4577)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4579=cj11*cj11;
IkReal x4580=(cj11*r20);
IkReal x4581=(r01*r21);
IkReal x4582=(r21*sj11);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*x4582))+(((-1.0)*cj6*x4580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x4579))+(((-1.0)*r02*r22))+(((-1.0)*x4581))+((x4579*x4581))+((r01*sj11*x4580))+((cj11*r00*x4582)))),-1);
if(!x4584.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4583.value)+(((1.5707963267949)*(x4584.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j10);
IkReal x4586=IKsin(j10);
IkReal x4587=(sj11*x4585);
IkReal x4588=(sj11*x4586);
IkReal x4589=((1.0)*x4585);
IkReal x4590=(cj11*x4589);
IkReal x4591=((1.0)*cj11*x4586);
evalcond[0]=(((r21*x4587))+((r22*x4586))+(((-1.0)*r20*x4590)));
evalcond[1]=(((r21*x4588))+(((-1.0)*r22*x4589))+(((-1.0)*r20*x4591)));
evalcond[2]=(cj6+((r02*x4586))+(((-1.0)*r00*x4590))+((r01*x4587)));
evalcond[3]=(sj6+((r11*x4587))+(((-1.0)*r10*x4590))+((r12*x4586)));
evalcond[4]=(cj6+((r11*x4588))+(((-1.0)*r10*x4591))+(((-1.0)*r12*x4589)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r00*x4591))+(((-1.0)*r02*x4589))+((r01*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4592=((1.0)*cj11);
CheckValue<IkReal> x4593 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4592)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4593.valid){
continue;
}
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4592))+(((-1.0)*r10*sj11)))),-1);
if(!x4594.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4593.value)+(((1.5707963267949)*(x4594.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4595=IKcos(j10);
IkReal x4596=IKsin(j10);
IkReal x4597=(sj11*x4595);
IkReal x4598=(sj11*x4596);
IkReal x4599=((1.0)*x4595);
IkReal x4600=(cj11*x4599);
IkReal x4601=((1.0)*cj11*x4596);
evalcond[0]=(((r21*x4597))+((r22*x4596))+(((-1.0)*r20*x4600)));
evalcond[1]=(((r21*x4598))+(((-1.0)*r22*x4599))+(((-1.0)*r20*x4601)));
evalcond[2]=(cj6+((r02*x4596))+(((-1.0)*r00*x4600))+((r01*x4597)));
evalcond[3]=(sj6+((r11*x4597))+((r12*x4596))+(((-1.0)*r10*x4600)));
evalcond[4]=(cj6+((r11*x4598))+(((-1.0)*r12*x4599))+(((-1.0)*r10*x4601)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x4599))+(((-1.0)*r00*x4601))+((r01*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4602 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*r20*sj6)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4602.valid){
continue;
}
CheckValue<IkReal> x4603=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x4603.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4602.value)+(((1.5707963267949)*(x4603.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4604=IKcos(j10);
IkReal x4605=IKsin(j10);
IkReal x4606=(sj11*x4604);
IkReal x4607=(sj11*x4605);
IkReal x4608=((1.0)*x4604);
IkReal x4609=(cj11*x4608);
IkReal x4610=((1.0)*cj11*x4605);
evalcond[0]=(((r21*x4606))+(((-1.0)*r20*x4609))+((r22*x4605)));
evalcond[1]=((((-1.0)*r20*x4610))+((r21*x4607))+(((-1.0)*r22*x4608)));
evalcond[2]=(cj6+((r01*x4606))+((r02*x4605))+(((-1.0)*r00*x4609)));
evalcond[3]=(((r11*x4606))+sj6+((r12*x4605))+(((-1.0)*r10*x4609)));
evalcond[4]=(((r11*x4607))+cj6+(((-1.0)*r10*x4610))+(((-1.0)*r12*x4608)));
evalcond[5]=((((-1.0)*sj6))+((r01*x4607))+(((-1.0)*r02*x4608))+(((-1.0)*r00*x4610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x4611=IKcos(j6);
IkReal x4612=IKsin(j6);
evalcond[0]=((((-0.03275)*x4611))+(((-1.0)*px))+(((-0.10915)*x4612)));
evalcond[1]=((((-0.03275)*x4612))+(((-1.0)*py))+(((0.10915)*x4611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4613=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x4613;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20))))));
j10eval[2]=IKsign(x4613);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4614=((1.0)*cj11);
IkReal x4615=((((-1.0)*r00*sj11))+(((-1.0)*r01*x4614)));
j10eval[0]=x4615;
j10eval[1]=IKsign(x4615);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x4614)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x4616=((1.0)*cj11);
IkReal x4617=((((-1.0)*r00*sj11))+(((-1.0)*r01*x4616)));
j10eval[0]=x4617;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x4616))))));
j10eval[2]=IKsign(x4617);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4618=((1.0)*cj11);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x4618)))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x4618)))),IkReal(((-1.0)*r22*sj6)),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4621=IKcos(j10);
IkReal x4622=IKsin(j10);
IkReal x4623=((1.0)*sj6);
IkReal x4624=(sj11*x4621);
IkReal x4625=(sj11*x4622);
IkReal x4626=((1.0)*x4621);
IkReal x4627=(cj11*x4626);
IkReal x4628=((1.0)*cj11*x4622);
evalcond[0]=((((-1.0)*r20*x4627))+((r22*x4622))+((r21*x4624)));
evalcond[1]=((((-1.0)*r22*x4626))+(((-1.0)*r20*x4628))+((r21*x4625)));
evalcond[2]=(cj6+((r11*x4625))+(((-1.0)*r12*x4626))+(((-1.0)*r10*x4628)));
evalcond[3]=((((-1.0)*r00*x4627))+((r02*x4622))+((r01*x4624))+(((-1.0)*cj6)));
evalcond[4]=(((r12*x4622))+((r11*x4624))+(((-1.0)*r10*x4627))+(((-1.0)*x4623)));
evalcond[5]=((((-1.0)*r02*x4626))+(((-1.0)*r00*x4628))+((r01*x4625))+(((-1.0)*x4623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4629=((1.0)*cj11);
CheckValue<IkReal> x4630 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x4629))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4629))+(((-1.0)*r00*sj11)))),-1);
if(!x4631.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4630.value)+(((1.5707963267949)*(x4631.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4632=IKcos(j10);
IkReal x4633=IKsin(j10);
IkReal x4634=((1.0)*sj6);
IkReal x4635=(sj11*x4632);
IkReal x4636=(sj11*x4633);
IkReal x4637=((1.0)*x4632);
IkReal x4638=(cj11*x4637);
IkReal x4639=((1.0)*cj11*x4633);
evalcond[0]=(((r21*x4635))+(((-1.0)*r20*x4638))+((r22*x4633)));
evalcond[1]=(((r21*x4636))+(((-1.0)*r20*x4639))+(((-1.0)*r22*x4637)));
evalcond[2]=(cj6+((r11*x4636))+(((-1.0)*r10*x4639))+(((-1.0)*r12*x4637)));
evalcond[3]=(((r01*x4635))+(((-1.0)*r00*x4638))+((r02*x4633))+(((-1.0)*cj6)));
evalcond[4]=(((r12*x4633))+(((-1.0)*x4634))+((r11*x4635))+(((-1.0)*r10*x4638)));
evalcond[5]=(((r01*x4636))+(((-1.0)*x4634))+(((-1.0)*r02*x4637))+(((-1.0)*r00*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4640=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x4640.valid){
continue;
}
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal((((cj6*r21*sj11))+(((-1.0)*cj11*cj6*r20)))),IkReal(((-1.0)*cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4640.value)))+(x4641.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4642=IKcos(j10);
IkReal x4643=IKsin(j10);
IkReal x4644=((1.0)*sj6);
IkReal x4645=(sj11*x4642);
IkReal x4646=(sj11*x4643);
IkReal x4647=((1.0)*x4642);
IkReal x4648=(cj11*x4647);
IkReal x4649=((1.0)*cj11*x4643);
evalcond[0]=(((r21*x4645))+((r22*x4643))+(((-1.0)*r20*x4648)));
evalcond[1]=(((r21*x4646))+(((-1.0)*r20*x4649))+(((-1.0)*r22*x4647)));
evalcond[2]=(cj6+(((-1.0)*r10*x4649))+((r11*x4646))+(((-1.0)*r12*x4647)));
evalcond[3]=(((r02*x4643))+((r01*x4645))+(((-1.0)*r00*x4648))+(((-1.0)*cj6)));
evalcond[4]=((((-1.0)*r10*x4648))+((r11*x4645))+((r12*x4643))+(((-1.0)*x4644)));
evalcond[5]=((((-1.0)*r02*x4647))+(((-1.0)*x4644))+((r01*x4646))+(((-1.0)*r00*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x4650=(sj7*sj8);
IkReal x4651=((1893.0)*cj7);
IkReal x4652=((7845.0)*sj7);
IkReal x4653=(cj11*r01);
IkReal x4654=(r00*sj11);
IkReal x4655=((8500.0)*sj7);
IkReal x4656=((20000.0)*px);
IkReal x4657=(cj7*cj8);
IkReal x4658=(cj8*x4654);
IkReal x4659=((7845.0)*cj7*sj8);
CheckValue<IkReal> x4660=IKPowWithIntegerCheck(((((-2183.0)*x4650))+(((2183.0)*x4657))),-1);
if(!x4660.valid){
continue;
}
CheckValue<IkReal> x4661=IKPowWithIntegerCheck((x4657+(((-1.0)*x4650))),-1);
if(!x4661.valid){
continue;
}
if( IKabs(((x4660.value)*((((x4650*x4656))+(((-1.0)*cj8*x4652*x4653))+(((-1.0)*x4654*x4659))+(((-1.0)*x4654*x4655))+(((-1.0)*cj8*x4651*x4653))+(((1893.0)*x4650*x4653))+(((1893.0)*x4650*x4654))+(((-1.0)*x4651*x4658))+(((-1.0)*x4656*x4657))+(((-1.0)*x4653*x4659))+(((-1.0)*x4653*x4655))+(((-1.0)*x4652*x4658)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4661.value)*(((((-1.0)*x4654))+(((-1.0)*x4653)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4660.value)*((((x4650*x4656))+(((-1.0)*cj8*x4652*x4653))+(((-1.0)*x4654*x4659))+(((-1.0)*x4654*x4655))+(((-1.0)*cj8*x4651*x4653))+(((1893.0)*x4650*x4653))+(((1893.0)*x4650*x4654))+(((-1.0)*x4651*x4658))+(((-1.0)*x4656*x4657))+(((-1.0)*x4653*x4659))+(((-1.0)*x4653*x4655))+(((-1.0)*x4652*x4658))))))+IKsqr(((x4661.value)*(((((-1.0)*x4654))+(((-1.0)*x4653))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x4660.value)*((((x4650*x4656))+(((-1.0)*cj8*x4652*x4653))+(((-1.0)*x4654*x4659))+(((-1.0)*x4654*x4655))+(((-1.0)*cj8*x4651*x4653))+(((1893.0)*x4650*x4653))+(((1893.0)*x4650*x4654))+(((-1.0)*x4651*x4658))+(((-1.0)*x4656*x4657))+(((-1.0)*x4653*x4659))+(((-1.0)*x4653*x4655))+(((-1.0)*x4652*x4658))))), ((x4661.value)*(((((-1.0)*x4654))+(((-1.0)*x4653))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x4662=IKcos(j6);
IkReal x4663=IKsin(j6);
IkReal x4664=(cj7*cj8);
IkReal x4665=((0.39225)*cj7);
IkReal x4666=((1.0)*sj7);
IkReal x4667=(r10*sj11);
IkReal x4668=(cj11*r01);
IkReal x4669=(r00*sj11);
IkReal x4670=((0.425)*sj7);
IkReal x4671=(cj11*r11);
IkReal x4672=((0.39225)*cj8*sj7);
IkReal x4673=(sj8*x4663);
IkReal x4674=(sj8*x4662);
evalcond[0]=(((x4662*x4664))+x4668+x4669+(((-1.0)*x4666*x4674)));
evalcond[1]=(x4667+x4671+((x4663*x4664))+(((-1.0)*x4666*x4673)));
evalcond[2]=(((x4665*x4674))+((x4662*x4672))+((x4662*x4670))+(((-1.0)*px))+(((-0.10915)*x4663))+(((-0.09465)*x4668))+(((-0.09465)*x4669)));
evalcond[3]=(((x4665*x4673))+(((-0.09465)*x4671))+(((-1.0)*py))+((x4663*x4672))+((x4663*x4670))+(((0.10915)*x4662))+(((-0.09465)*x4667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x4675=((1.0)*cj11);
IkReal x4676=((((-1.0)*r00*sj11))+(((-1.0)*r01*x4675)));
j10eval[0]=x4676;
j10eval[1]=IKsign(x4676);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x4675))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x4677=((1.0)*cj11);
IkReal x4678=((((-1.0)*r11*x4677))+(((-1.0)*r10*sj11)));
j10eval[0]=x4678;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x4677))))));
j10eval[2]=IKsign(x4678);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x4679=((1.0)*sj11);
IkReal x4680=((((-1.0)*cj11*r21))+(((-1.0)*r20*x4679)));
j10eval[0]=x4680;
j10eval[1]=((IKabs((((cj11*cj6*r00))+(((-1.0)*cj6*r01*x4679))+((cj11*r10*sj6))+(((-1.0)*r11*sj6*x4679)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6))))));
j10eval[2]=IKsign(x4680);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4681=((-1.0)*r20);
IkReal x4683 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4683)==0){
continue;
}
IkReal x4682=pow(x4683,-0.5);
CheckValue<IkReal> x4684 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4681),IKFAST_ATAN2_MAGTHRESH);
if(!x4684.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4684.value));
IkReal gconst115=(r21*x4682);
IkReal gconst116=(x4681*x4682);
CheckValue<IkReal> x4685 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x4685.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x4686=((-1.0)*r20);
IkReal x4687=x4682;
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4686),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
IkReal x4688=((-1.0)*(x4689.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x4688;
IkReal gconst114=x4688;
IkReal gconst115=(r21*x4687);
IkReal gconst116=(x4686*x4687);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4690=((-1.0)*r20);
IkReal x4691=x4682;
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4690),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
IkReal x4692=((-1.0)*(x4693.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x4692;
IkReal gconst114=x4692;
IkReal gconst115=(r21*x4691);
IkReal gconst116=(x4690*x4691);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x4694=((-1.0)*r20);
IkReal x4695=x4682;
CheckValue<IkReal> x4697 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4694),IKFAST_ATAN2_MAGTHRESH);
if(!x4697.valid){
continue;
}
IkReal x4696=((-1.0)*(x4697.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x4696;
IkReal gconst114=x4696;
IkReal gconst115=(r21*x4695);
IkReal gconst116=(x4694*x4695);
IkReal x4698=((1.0)*(r22*r22));
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4698))),-1);
if(!x4702.valid){
continue;
}
IkReal x4699=x4702.value;
IkReal x4700=((1.0)*x4699);
IkReal x4701=((((-1.0)*x4700*(r21*r21*r21*r21)))+(((-1.0)*x4700*(r20*r20*r20*r20)))+(((-2.0)*x4699*(r20*r20)*(r21*r21)))+(((-1.0)*x4698)));
j10eval[0]=x4701;
j10eval[1]=IKsign(x4701);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4703=(cj7*cj8);
IkReal x4704=(gconst116*r20);
IkReal x4705=(sj7*sj8);
IkReal x4706=(gconst115*r21);
CheckValue<IkReal> x4707 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4703))+((r22*x4705)))),IkReal((((x4705*x4706))+(((-1.0)*x4704*x4705))+(((-1.0)*x4703*x4706))+((x4703*x4704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4707.valid){
continue;
}
CheckValue<IkReal> x4708=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4704*x4704)))+(((-1.0)*(x4706*x4706)))+(((-1.0)*(r22*r22)))+(((2.0)*x4704*x4706)))),-1);
if(!x4708.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4707.value)+(((1.5707963267949)*(x4708.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4709=IKsin(j10);
IkReal x4710=IKcos(j10);
IkReal x4711=(gconst116*r20);
IkReal x4712=(gconst116*r10);
IkReal x4713=((1.0)*cj8);
IkReal x4714=(gconst116*r00);
IkReal x4715=((1.0)*x4710);
IkReal x4716=(gconst115*x4709);
IkReal x4717=((1.0)*cj7*sj8);
IkReal x4718=(gconst115*x4710);
IkReal x4719=((1.0)*x4709);
evalcond[0]=((((-1.0)*r22*x4715))+((r21*x4716))+(((-1.0)*x4711*x4719)));
evalcond[1]=((((-1.0)*x4712*x4719))+cj6+(((-1.0)*r12*x4715))+((r11*x4716)));
evalcond[2]=((((-1.0)*r02*x4715))+(((-1.0)*sj6))+(((-1.0)*x4714*x4719))+((r01*x4716)));
evalcond[3]=((((-1.0)*cj7*x4713))+((r21*x4718))+(((-1.0)*x4711*x4715))+((sj7*sj8))+((r22*x4709)));
evalcond[4]=((((-1.0)*x4714*x4715))+((r01*x4718))+(((-1.0)*cj6*sj7*x4713))+(((-1.0)*cj6*x4717))+((r02*x4709)));
evalcond[5]=((((-1.0)*x4712*x4715))+(((-1.0)*sj6*sj7*x4713))+(((-1.0)*sj6*x4717))+((r11*x4718))+((r12*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4720=((1.0)*gconst116);
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x4720)))),-1);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x4720))+((gconst115*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4722.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4721.value)))+(x4722.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4723=IKsin(j10);
IkReal x4724=IKcos(j10);
IkReal x4725=(gconst116*r20);
IkReal x4726=(gconst116*r10);
IkReal x4727=((1.0)*cj8);
IkReal x4728=(gconst116*r00);
IkReal x4729=((1.0)*x4724);
IkReal x4730=(gconst115*x4723);
IkReal x4731=((1.0)*cj7*sj8);
IkReal x4732=(gconst115*x4724);
IkReal x4733=((1.0)*x4723);
evalcond[0]=(((r21*x4730))+(((-1.0)*x4725*x4733))+(((-1.0)*r22*x4729)));
evalcond[1]=(((r11*x4730))+cj6+(((-1.0)*r12*x4729))+(((-1.0)*x4726*x4733)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x4728*x4733))+(((-1.0)*r02*x4729))+((r01*x4730)));
evalcond[3]=(((r21*x4732))+(((-1.0)*x4725*x4729))+(((-1.0)*cj7*x4727))+((r22*x4723))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x4728*x4729))+(((-1.0)*cj6*sj7*x4727))+((r02*x4723))+((r01*x4732))+(((-1.0)*cj6*x4731)));
evalcond[5]=(((r11*x4732))+(((-1.0)*x4726*x4729))+(((-1.0)*sj6*x4731))+(((-1.0)*sj6*sj7*x4727))+((r12*x4723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4734=((1.0)*gconst116);
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4734))+(((-1.0)*gconst115*r00)))),-1);
if(!x4735.valid){
continue;
}
CheckValue<IkReal> x4736 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst115*r21))+(((-1.0)*cj6*r20*x4734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4736.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4735.value)))+(x4736.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4737=IKsin(j10);
IkReal x4738=IKcos(j10);
IkReal x4739=(gconst116*r20);
IkReal x4740=(gconst116*r10);
IkReal x4741=((1.0)*cj8);
IkReal x4742=(gconst116*r00);
IkReal x4743=((1.0)*x4738);
IkReal x4744=(gconst115*x4737);
IkReal x4745=((1.0)*cj7*sj8);
IkReal x4746=(gconst115*x4738);
IkReal x4747=((1.0)*x4737);
evalcond[0]=((((-1.0)*r22*x4743))+((r21*x4744))+(((-1.0)*x4739*x4747)));
evalcond[1]=(((r11*x4744))+(((-1.0)*r12*x4743))+cj6+(((-1.0)*x4740*x4747)));
evalcond[2]=((((-1.0)*sj6))+((r01*x4744))+(((-1.0)*x4742*x4747))+(((-1.0)*r02*x4743)));
evalcond[3]=(((r22*x4737))+((r21*x4746))+(((-1.0)*cj7*x4741))+((sj7*sj8))+(((-1.0)*x4739*x4743)));
evalcond[4]=((((-1.0)*cj6*x4745))+((r01*x4746))+((r02*x4737))+(((-1.0)*x4742*x4743))+(((-1.0)*cj6*sj7*x4741)));
evalcond[5]=((((-1.0)*sj6*x4745))+((r11*x4746))+(((-1.0)*x4740*x4743))+(((-1.0)*sj6*sj7*x4741))+((r12*x4737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4748=((-1.0)*r21);
IkReal x4750 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4750)==0){
continue;
}
IkReal x4749=pow(x4750,-0.5);
CheckValue<IkReal> x4751 = IKatan2WithCheck(IkReal(x4748),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4751.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4751.value))));
IkReal gconst118=(x4748*x4749);
IkReal gconst119=((1.0)*r20*x4749);
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x4752.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x4753=((-1.0)*r21);
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal(x4753),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
IkReal x4754=((1.0)*(x4756.value));
IkReal x4755=x4749;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x4754)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4754)));
IkReal gconst118=(x4753*x4755);
IkReal gconst119=((1.0)*r20*x4755);
IkReal x4757=r22*r22;
IkReal x4758=((1.0)*x4757);
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(((-1.0)+x4757),-1);
if(!x4762.valid){
continue;
}
IkReal x4759=x4762.value;
if((((1.0)+(((-1.0)*x4758)))) < -0.00001)
continue;
IkReal x4760=IKsqrt(((1.0)+(((-1.0)*x4758))));
IkReal x4761=(cj6*x4759*x4760);
j10eval[0]=((IKabs(((((-1.0)*x4758*x4761))+x4761)))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4763=((-1.0)*r21);
CheckValue<IkReal> x4766 = IKatan2WithCheck(IkReal(x4763),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4766.valid){
continue;
}
IkReal x4764=((1.0)*(x4766.value));
IkReal x4765=x4749;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x4764)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4764)));
IkReal gconst118=(x4763*x4765);
IkReal gconst119=((1.0)*r20*x4765);
IkReal x4767=r22*r22;
IkReal x4768=((1.0)*x4767);
CheckValue<IkReal> x4772=IKPowWithIntegerCheck(((-1.0)+x4767),-1);
if(!x4772.valid){
continue;
}
IkReal x4769=x4772.value;
if((((1.0)+(((-1.0)*x4768)))) < -0.00001)
continue;
IkReal x4770=IKsqrt(((1.0)+(((-1.0)*x4768))));
IkReal x4771=(sj6*x4769*x4770);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs((x4771+(((-1.0)*x4768*x4771))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x4773=((-1.0)*r21);
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(x4773),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
IkReal x4774=((1.0)*(x4776.value));
IkReal x4775=x4749;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x4774)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4774)));
IkReal gconst118=(x4773*x4775);
IkReal gconst119=((1.0)*r20*x4775);
IkReal x4777=((1.0)*(r22*r22));
CheckValue<IkReal> x4781=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4777))),-1);
if(!x4781.valid){
continue;
}
IkReal x4778=x4781.value;
IkReal x4779=((1.0)*x4778);
IkReal x4780=((((-1.0)*x4779*(r20*r20*r20*r20)))+(((-1.0)*x4777))+(((-1.0)*x4779*(r21*r21*r21*r21)))+(((-2.0)*x4778*(r20*r20)*(r21*r21))));
j10eval[0]=x4780;
j10eval[1]=IKsign(x4780);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4782=(cj7*cj8);
IkReal x4783=(sj7*sj8);
IkReal x4784=(gconst118*r21);
IkReal x4785=(gconst119*r20);
CheckValue<IkReal> x4786=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4784*x4784)))+(((2.0)*x4784*x4785))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4785*x4785))))),-1);
if(!x4786.valid){
continue;
}
CheckValue<IkReal> x4787 = IKatan2WithCheck(IkReal((((r22*x4783))+(((-1.0)*r22*x4782)))),IkReal(((((-1.0)*x4783*x4785))+(((-1.0)*x4782*x4784))+((x4783*x4784))+((x4782*x4785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4787.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4786.value)))+(x4787.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4788=IKsin(j10);
IkReal x4789=IKcos(j10);
IkReal x4790=((1.0)*gconst119);
IkReal x4791=(gconst118*r01);
IkReal x4792=((1.0)*cj8);
IkReal x4793=((1.0)*cj7*sj8);
IkReal x4794=((1.0)*x4789);
IkReal x4795=(gconst118*x4789);
IkReal x4796=(gconst118*x4788);
evalcond[0]=(((r21*x4796))+(((-1.0)*r22*x4794))+(((-1.0)*r20*x4788*x4790)));
evalcond[1]=(cj6+(((-1.0)*r10*x4788*x4790))+(((-1.0)*r12*x4794))+((r11*x4796)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x4794))+(((-1.0)*r00*x4788*x4790))+((x4788*x4791)));
evalcond[3]=(((r21*x4795))+((r22*x4788))+(((-1.0)*r20*x4789*x4790))+((sj7*sj8))+(((-1.0)*cj7*x4792)));
evalcond[4]=(((r02*x4788))+(((-1.0)*cj6*sj7*x4792))+(((-1.0)*r00*x4789*x4790))+((x4789*x4791))+(((-1.0)*cj6*x4793)));
evalcond[5]=((((-1.0)*sj6*sj7*x4792))+(((-1.0)*r10*x4789*x4790))+((r12*x4788))+(((-1.0)*sj6*x4793))+((r11*x4795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4797=((1.0)*gconst119);
CheckValue<IkReal> x4798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x4797)))),-1);
if(!x4798.valid){
continue;
}
CheckValue<IkReal> x4799 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x4797))+((gconst118*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4799.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4798.value)))+(x4799.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4800=IKsin(j10);
IkReal x4801=IKcos(j10);
IkReal x4802=((1.0)*gconst119);
IkReal x4803=(gconst118*r01);
IkReal x4804=((1.0)*cj8);
IkReal x4805=((1.0)*cj7*sj8);
IkReal x4806=((1.0)*x4801);
IkReal x4807=(gconst118*x4801);
IkReal x4808=(gconst118*x4800);
evalcond[0]=((((-1.0)*r22*x4806))+(((-1.0)*r20*x4800*x4802))+((r21*x4808)));
evalcond[1]=(cj6+(((-1.0)*r10*x4800*x4802))+(((-1.0)*r12*x4806))+((r11*x4808)));
evalcond[2]=((((-1.0)*sj6))+((x4800*x4803))+(((-1.0)*r02*x4806))+(((-1.0)*r00*x4800*x4802)));
evalcond[3]=((((-1.0)*r20*x4801*x4802))+(((-1.0)*cj7*x4804))+((r21*x4807))+((r22*x4800))+((sj7*sj8)));
evalcond[4]=(((r02*x4800))+(((-1.0)*cj6*sj7*x4804))+(((-1.0)*cj6*x4805))+((x4801*x4803))+(((-1.0)*r00*x4801*x4802)));
evalcond[5]=((((-1.0)*sj6*sj7*x4804))+(((-1.0)*sj6*x4805))+(((-1.0)*r10*x4801*x4802))+((r12*x4800))+((r11*x4807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4809=((1.0)*gconst119);
CheckValue<IkReal> x4810 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst118*r21))+(((-1.0)*cj6*r20*x4809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4810.valid){
continue;
}
CheckValue<IkReal> x4811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x4809)))),-1);
if(!x4811.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4810.value)+(((1.5707963267949)*(x4811.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4812=IKsin(j10);
IkReal x4813=IKcos(j10);
IkReal x4814=((1.0)*gconst119);
IkReal x4815=(gconst118*r01);
IkReal x4816=((1.0)*cj8);
IkReal x4817=((1.0)*cj7*sj8);
IkReal x4818=((1.0)*x4813);
IkReal x4819=(gconst118*x4813);
IkReal x4820=(gconst118*x4812);
evalcond[0]=((((-1.0)*r20*x4812*x4814))+((r21*x4820))+(((-1.0)*r22*x4818)));
evalcond[1]=(cj6+((r11*x4820))+(((-1.0)*r10*x4812*x4814))+(((-1.0)*r12*x4818)));
evalcond[2]=((((-1.0)*sj6))+((x4812*x4815))+(((-1.0)*r00*x4812*x4814))+(((-1.0)*r02*x4818)));
evalcond[3]=(((r21*x4819))+((sj7*sj8))+(((-1.0)*cj7*x4816))+(((-1.0)*r20*x4813*x4814))+((r22*x4812)));
evalcond[4]=((((-1.0)*cj6*sj7*x4816))+((x4813*x4815))+((r02*x4812))+(((-1.0)*cj6*x4817))+(((-1.0)*r00*x4813*x4814)));
evalcond[5]=(((r11*x4819))+(((-1.0)*r10*x4813*x4814))+((r12*x4812))+(((-1.0)*sj6*x4817))+(((-1.0)*sj6*sj7*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4821=((-1.0)*r10);
IkReal x4823 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4823)==0){
continue;
}
IkReal x4822=pow(x4823,-0.5);
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4821),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4824.value));
IkReal gconst121=(r11*x4822);
IkReal gconst122=(x4821*x4822);
CheckValue<IkReal> x4825 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4825.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x4825.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x4826=((-1.0)*r10);
IkReal x4827=x4822;
CheckValue<IkReal> x4829 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4826),IKFAST_ATAN2_MAGTHRESH);
if(!x4829.valid){
continue;
}
IkReal x4828=((-1.0)*(x4829.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst121;
cj11=gconst122;
j11=x4828;
IkReal gconst120=x4828;
IkReal gconst121=(r11*x4827);
IkReal gconst122=(x4826*x4827);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4830=((1.0)*gconst121);
CheckValue<IkReal> x4831 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst122*r00))+(((-1.0)*cj6*r01*x4830))+(((-1.0)*r11*sj6*x4830))+((gconst122*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4831.valid){
continue;
}
CheckValue<IkReal> x4832=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x4830)))),-1);
if(!x4832.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4831.value)+(((1.5707963267949)*(x4832.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4833=IKsin(j10);
IkReal x4834=IKcos(j10);
IkReal x4835=(gconst122*r00);
IkReal x4836=((1.0)*cj8);
IkReal x4837=(gconst122*r10);
IkReal x4838=(gconst122*r20);
IkReal x4839=(gconst121*x4833);
IkReal x4840=((1.0)*cj7*sj8);
IkReal x4841=(gconst121*x4834);
IkReal x4842=((1.0)*x4834);
IkReal x4843=((1.0)*x4833);
evalcond[0]=((((-1.0)*x4838*x4843))+((r21*x4839))+(((-1.0)*r22*x4842)));
evalcond[1]=((((-1.0)*x4837*x4843))+((r11*x4839))+cj6+(((-1.0)*r12*x4842)));
evalcond[2]=(((r01*x4839))+(((-1.0)*sj6))+(((-1.0)*r02*x4842))+(((-1.0)*x4835*x4843)));
evalcond[3]=((((-1.0)*x4838*x4842))+(((-1.0)*cj7*x4836))+((r22*x4833))+((r21*x4841))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x4840))+(((-1.0)*cj6*sj7*x4836))+(((-1.0)*x4835*x4842))+((r01*x4841))+((r02*x4833)));
evalcond[5]=((((-1.0)*x4837*x4842))+((r12*x4833))+((r11*x4841))+(((-1.0)*sj6*x4840))+(((-1.0)*sj6*sj7*x4836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4844=((1.0)*gconst122);
CheckValue<IkReal> x4845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4844))+(((-1.0)*gconst121*r00)))),-1);
if(!x4845.valid){
continue;
}
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x4844))+((cj6*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4845.value)))+(x4846.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4847=IKsin(j10);
IkReal x4848=IKcos(j10);
IkReal x4849=(gconst122*r00);
IkReal x4850=((1.0)*cj8);
IkReal x4851=(gconst122*r10);
IkReal x4852=(gconst122*r20);
IkReal x4853=(gconst121*x4847);
IkReal x4854=((1.0)*cj7*sj8);
IkReal x4855=(gconst121*x4848);
IkReal x4856=((1.0)*x4848);
IkReal x4857=((1.0)*x4847);
evalcond[0]=(((r21*x4853))+(((-1.0)*r22*x4856))+(((-1.0)*x4852*x4857)));
evalcond[1]=(cj6+(((-1.0)*r12*x4856))+(((-1.0)*x4851*x4857))+((r11*x4853)));
evalcond[2]=((((-1.0)*sj6))+((r01*x4853))+(((-1.0)*r02*x4856))+(((-1.0)*x4849*x4857)));
evalcond[3]=(((r21*x4855))+(((-1.0)*cj7*x4850))+((r22*x4847))+(((-1.0)*x4852*x4856))+((sj7*sj8)));
evalcond[4]=(((r02*x4847))+((r01*x4855))+(((-1.0)*cj6*sj7*x4850))+(((-1.0)*cj6*x4854))+(((-1.0)*x4849*x4856)));
evalcond[5]=((((-1.0)*sj6*sj7*x4850))+(((-1.0)*sj6*x4854))+((r12*x4847))+(((-1.0)*x4851*x4856))+((r11*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4858=((-1.0)*r11);
IkReal x4860 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4860)==0){
continue;
}
IkReal x4859=pow(x4860,-0.5);
CheckValue<IkReal> x4861 = IKatan2WithCheck(IkReal(x4858),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4861.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4861.value))));
IkReal gconst124=(x4858*x4859);
IkReal gconst125=((1.0)*r10*x4859);
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x4862.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x4863=((-1.0)*r11);
CheckValue<IkReal> x4866 = IKatan2WithCheck(IkReal(x4863),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4866.valid){
continue;
}
IkReal x4864=((1.0)*(x4866.value));
IkReal x4865=x4859;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x4864)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4864)));
IkReal gconst124=(x4863*x4865);
IkReal gconst125=((1.0)*r10*x4865);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x4867=((-1.0)*r11);
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal(x4867),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
IkReal x4868=((1.0)*(x4870.value));
IkReal x4869=x4859;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x4868)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4868)));
IkReal gconst124=(x4867*x4869);
IkReal gconst125=((1.0)*r10*x4869);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=sj6;
j10eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x4871=((-1.0)*r11);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal(x4871),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
IkReal x4872=((1.0)*(x4874.value));
IkReal x4873=x4859;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x4872)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4872)));
IkReal gconst124=(x4871*x4873);
IkReal gconst125=((1.0)*r10*x4873);
IkReal x4875=r12*r12;
IkReal x4876=(cj6*r02);
IkReal x4877=x4859;
IkReal x4878=(sj6*x4877);
j10eval[0]=((IKabs(((((-1.0)*x4876))+(((-1.0)*r12*sj6)))))+(IKabs((((r12*x4876*x4877))+(((-1.0)*x4878))+((x4875*x4878))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4879=((1.0)*gconst124);
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x4879))+((gconst125*r10*sj6))+((cj6*gconst125*r00))+(((-1.0)*r11*sj6*x4879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x4879)))),-1);
if(!x4881.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4880.value)+(((1.5707963267949)*(x4881.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4882=IKsin(j10);
IkReal x4883=IKcos(j10);
IkReal x4884=(gconst124*r01);
IkReal x4885=(gconst125*r20);
IkReal x4886=(gconst125*r10);
IkReal x4887=((1.0)*cj8);
IkReal x4888=(gconst125*r00);
IkReal x4889=((1.0)*cj7*sj8);
IkReal x4890=((1.0)*x4883);
IkReal x4891=((1.0)*x4882);
IkReal x4892=(gconst124*x4883);
IkReal x4893=(gconst124*x4882);
evalcond[0]=(((r21*x4893))+(((-1.0)*x4885*x4891))+(((-1.0)*r22*x4890)));
evalcond[1]=(((r11*x4893))+(((-1.0)*r12*x4890))+cj6+(((-1.0)*x4886*x4891)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x4888*x4891))+(((-1.0)*r02*x4890))+((x4882*x4884)));
evalcond[3]=(((r21*x4892))+(((-1.0)*x4885*x4890))+((r22*x4882))+((sj7*sj8))+(((-1.0)*cj7*x4887)));
evalcond[4]=((((-1.0)*x4888*x4890))+(((-1.0)*cj6*sj7*x4887))+((r02*x4882))+(((-1.0)*cj6*x4889))+((x4883*x4884)));
evalcond[5]=(((r11*x4892))+((r12*x4882))+(((-1.0)*x4886*x4890))+(((-1.0)*sj6*x4889))+(((-1.0)*sj6*sj7*x4887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4894=((1.0)*gconst125);
CheckValue<IkReal> x4895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4894))+(((-1.0)*gconst124*r10)))),-1);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst124*r21*sj6))+(((-1.0)*r20*sj6*x4894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4895.value)))+(x4896.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4897=IKsin(j10);
IkReal x4898=IKcos(j10);
IkReal x4899=(gconst124*r01);
IkReal x4900=(gconst125*r20);
IkReal x4901=(gconst125*r10);
IkReal x4902=((1.0)*cj8);
IkReal x4903=(gconst125*r00);
IkReal x4904=((1.0)*cj7*sj8);
IkReal x4905=((1.0)*x4898);
IkReal x4906=((1.0)*x4897);
IkReal x4907=(gconst124*x4898);
IkReal x4908=(gconst124*x4897);
evalcond[0]=(((r21*x4908))+(((-1.0)*r22*x4905))+(((-1.0)*x4900*x4906)));
evalcond[1]=((((-1.0)*r12*x4905))+cj6+((r11*x4908))+(((-1.0)*x4901*x4906)));
evalcond[2]=((((-1.0)*sj6))+((x4897*x4899))+(((-1.0)*x4903*x4906))+(((-1.0)*r02*x4905)));
evalcond[3]=((((-1.0)*cj7*x4902))+((r21*x4907))+(((-1.0)*x4900*x4905))+((r22*x4897))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x4904))+(((-1.0)*cj6*sj7*x4902))+((r02*x4897))+(((-1.0)*x4903*x4905))+((x4898*x4899)));
evalcond[5]=((((-1.0)*sj6*sj7*x4902))+(((-1.0)*sj6*x4904))+((r12*x4897))+((r11*x4907))+(((-1.0)*x4901*x4905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4909=((1.0)*gconst125);
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4909))+(((-1.0)*gconst124*r00)))),-1);
if(!x4910.valid){
continue;
}
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x4909))+((cj6*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4910.value)))+(x4911.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4912=IKsin(j10);
IkReal x4913=IKcos(j10);
IkReal x4914=(gconst124*r01);
IkReal x4915=(gconst125*r20);
IkReal x4916=(gconst125*r10);
IkReal x4917=((1.0)*cj8);
IkReal x4918=(gconst125*r00);
IkReal x4919=((1.0)*cj7*sj8);
IkReal x4920=((1.0)*x4913);
IkReal x4921=((1.0)*x4912);
IkReal x4922=(gconst124*x4913);
IkReal x4923=(gconst124*x4912);
evalcond[0]=((((-1.0)*x4915*x4921))+((r21*x4923))+(((-1.0)*r22*x4920)));
evalcond[1]=(cj6+(((-1.0)*x4916*x4921))+(((-1.0)*r12*x4920))+((r11*x4923)));
evalcond[2]=((((-1.0)*r02*x4920))+(((-1.0)*sj6))+(((-1.0)*x4918*x4921))+((x4912*x4914)));
evalcond[3]=((((-1.0)*x4915*x4920))+(((-1.0)*cj7*x4917))+((r21*x4922))+((sj7*sj8))+((r22*x4912)));
evalcond[4]=(((r02*x4912))+(((-1.0)*cj6*sj7*x4917))+(((-1.0)*x4918*x4920))+((x4913*x4914))+(((-1.0)*cj6*x4919)));
evalcond[5]=((((-1.0)*x4916*x4920))+(((-1.0)*sj6*x4919))+((r12*x4912))+((r11*x4922))+(((-1.0)*sj6*sj7*x4917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x4924=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x4924;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x4924);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x4925=((1.0)*cj11);
IkReal x4926=((((-1.0)*r01*x4925))+(((-1.0)*r00*sj11)));
j10eval[0]=x4926;
j10eval[1]=((IKabs((((r21*sj11))+(((-1.0)*r20*x4925)))))+(IKabs(r22)));
j10eval[2]=IKsign(x4926);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x4927=(cj7*cj8);
IkReal x4928=(sj7*sj8);
IkReal x4929=(r11*sj11);
IkReal x4930=(cj11*r10);
IkReal x4931=((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)));
j10eval[0]=x4931;
j10eval[1]=((IKabs(((((-1.0)*r12*x4928))+((r12*x4927)))))+(IKabs(((((-1.0)*x4928*x4930))+((x4927*x4930))+(((-1.0)*x4927*x4929))+((x4928*x4929))))));
j10eval[2]=IKsign(x4931);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4932=(cj7*cj8);
IkReal x4933=(sj7*sj8);
IkReal x4934=(r11*sj11);
IkReal x4935=(cj11*r10);
CheckValue<IkReal> x4936 = IKatan2WithCheck(IkReal((((x4932*x4935))+((x4933*x4934))+(((-1.0)*x4933*x4935))+(((-1.0)*x4932*x4934)))),IkReal((((r12*x4932))+(((-1.0)*r12*x4933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)))),-1);
if(!x4937.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4936.value)+(((1.5707963267949)*(x4937.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4938=IKcos(j10);
IkReal x4939=IKsin(j10);
IkReal x4940=(r11*sj11);
IkReal x4941=((1.0)*cj7);
IkReal x4942=(cj11*r10);
IkReal x4943=(cj11*r00);
IkReal x4944=(cj11*r20);
IkReal x4945=((1.0)*x4938);
IkReal x4946=(sj11*x4938);
IkReal x4947=((1.0)*x4939);
IkReal x4948=(sj11*x4939);
evalcond[0]=((((-1.0)*x4942*x4945))+((r12*x4939))+((x4938*x4940)));
evalcond[1]=(((r21*x4948))+(((-1.0)*r22*x4945))+(((-1.0)*x4944*x4947)));
evalcond[2]=((((-1.0)*x4943*x4947))+((r01*x4948))+(((-1.0)*r02*x4945)));
evalcond[3]=((1.0)+(((-1.0)*x4942*x4947))+(((-1.0)*r12*x4945))+((x4939*x4940)));
evalcond[4]=(((r21*x4946))+((r22*x4939))+(((-1.0)*x4944*x4945))+((sj7*sj8))+(((-1.0)*cj8*x4941)));
evalcond[5]=((((-1.0)*x4943*x4945))+((r01*x4946))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x4941))+((r02*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4949=((1.0)*cj11);
CheckValue<IkReal> x4950 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4949))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4950.valid){
continue;
}
CheckValue<IkReal> x4951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x4949)))),-1);
if(!x4951.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4950.value)+(((1.5707963267949)*(x4951.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4952=IKcos(j10);
IkReal x4953=IKsin(j10);
IkReal x4954=(r11*sj11);
IkReal x4955=((1.0)*cj7);
IkReal x4956=(cj11*r10);
IkReal x4957=(cj11*r00);
IkReal x4958=(cj11*r20);
IkReal x4959=((1.0)*x4952);
IkReal x4960=(sj11*x4952);
IkReal x4961=((1.0)*x4953);
IkReal x4962=(sj11*x4953);
evalcond[0]=(((r12*x4953))+(((-1.0)*x4956*x4959))+((x4952*x4954)));
evalcond[1]=((((-1.0)*x4958*x4961))+(((-1.0)*r22*x4959))+((r21*x4962)));
evalcond[2]=((((-1.0)*x4957*x4961))+(((-1.0)*r02*x4959))+((r01*x4962)));
evalcond[3]=((1.0)+(((-1.0)*x4956*x4961))+(((-1.0)*r12*x4959))+((x4953*x4954)));
evalcond[4]=((((-1.0)*cj8*x4955))+(((-1.0)*x4958*x4959))+((r22*x4953))+((r21*x4960))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*x4957*x4959))+((r02*x4953))+(((-1.0)*sj8*x4955))+((r01*x4960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x4963.valid){
continue;
}
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4963.value)))+(x4964.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4965=IKcos(j10);
IkReal x4966=IKsin(j10);
IkReal x4967=(r11*sj11);
IkReal x4968=((1.0)*cj7);
IkReal x4969=(cj11*r10);
IkReal x4970=(cj11*r00);
IkReal x4971=(cj11*r20);
IkReal x4972=((1.0)*x4965);
IkReal x4973=(sj11*x4965);
IkReal x4974=((1.0)*x4966);
IkReal x4975=(sj11*x4966);
evalcond[0]=(((r12*x4966))+((x4965*x4967))+(((-1.0)*x4969*x4972)));
evalcond[1]=((((-1.0)*x4971*x4974))+(((-1.0)*r22*x4972))+((r21*x4975)));
evalcond[2]=((((-1.0)*r02*x4972))+(((-1.0)*x4970*x4974))+((r01*x4975)));
evalcond[3]=((1.0)+((x4966*x4967))+(((-1.0)*r12*x4972))+(((-1.0)*x4969*x4974)));
evalcond[4]=((((-1.0)*cj8*x4968))+((r22*x4966))+(((-1.0)*x4971*x4972))+((sj7*sj8))+((r21*x4973)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r02*x4966))+(((-1.0)*sj8*x4968))+(((-1.0)*x4970*x4972))+((r01*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x4976=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x4976;
j10eval[1]=IKsign(x4976);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x4977=((1.0)*cj11);
IkReal x4978=((((-1.0)*r21*x4977))+(((-1.0)*r20*sj11)));
j10eval[0]=x4978;
j10eval[1]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x4977))))));
j10eval[2]=IKsign(x4978);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x4979=cj11*cj11;
IkReal x4980=r11*r11;
IkReal x4981=(cj11*r10);
IkReal x4982=(r11*sj11);
IkReal x4983=(x4980+(r12*r12)+(((-1.0)*x4979*x4980))+(((-2.0)*x4981*x4982))+((x4979*(r10*r10))));
j10eval[0]=x4983;
j10eval[1]=((IKabs(r12))+(IKabs((x4982+(((-1.0)*x4981))))));
j10eval[2]=IKsign(x4983);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4984=cj11*cj11;
IkReal x4985=r11*r11;
IkReal x4986=(r11*sj11);
IkReal x4987=(cj11*r10);
CheckValue<IkReal> x4988 = IKatan2WithCheck(IkReal((x4986+(((-1.0)*x4987)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4988.valid){
continue;
}
CheckValue<IkReal> x4989=IKPowWithIntegerCheck(IKsign((x4985+(r12*r12)+((x4984*(r10*r10)))+(((-2.0)*x4986*x4987))+(((-1.0)*x4984*x4985)))),-1);
if(!x4989.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x4988.value)+(((1.5707963267949)*(x4989.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x4990=IKcos(j10);
IkReal x4991=IKsin(j10);
IkReal x4992=(r11*sj11);
IkReal x4993=(cj11*r10);
IkReal x4994=(cj11*r00);
IkReal x4995=(cj11*r20);
IkReal x4996=((1.0)*x4990);
IkReal x4997=(sj11*x4990);
IkReal x4998=((1.0)*x4991);
IkReal x4999=(sj11*x4991);
evalcond[0]=((((-1.0)*x4993*x4996))+((r12*x4991))+((x4990*x4992)));
evalcond[1]=((((-1.0)*r22*x4996))+(((-1.0)*x4995*x4998))+((r21*x4999)));
evalcond[2]=((((-1.0)*r02*x4996))+(((-1.0)*x4994*x4998))+((r01*x4999)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4996))+(((-1.0)*x4993*x4998))+((x4991*x4992)));
evalcond[4]=(((cj8*sj7))+((r02*x4991))+((cj7*sj8))+(((-1.0)*x4994*x4996))+((r01*x4997)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r22*x4991))+(((-1.0)*x4995*x4996))+((sj7*sj8))+((r21*x4997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5000=((1.0)*cj11);
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x5000)))),-1);
if(!x5001.valid){
continue;
}
CheckValue<IkReal> x5002 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x5000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5002.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5001.value)))+(x5002.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5003=IKcos(j10);
IkReal x5004=IKsin(j10);
IkReal x5005=(r11*sj11);
IkReal x5006=(cj11*r10);
IkReal x5007=(cj11*r00);
IkReal x5008=(cj11*r20);
IkReal x5009=((1.0)*x5003);
IkReal x5010=(sj11*x5003);
IkReal x5011=((1.0)*x5004);
IkReal x5012=(sj11*x5004);
evalcond[0]=(((r12*x5004))+((x5003*x5005))+(((-1.0)*x5006*x5009)));
evalcond[1]=((((-1.0)*x5008*x5011))+((r21*x5012))+(((-1.0)*r22*x5009)));
evalcond[2]=((((-1.0)*x5007*x5011))+((r01*x5012))+(((-1.0)*r02*x5009)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5009))+(((-1.0)*x5006*x5011))+((x5004*x5005)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x5007*x5009))+((r02*x5004))+((cj7*sj8))+((r01*x5010)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r21*x5010))+((r22*x5004))+((sj7*sj8))+(((-1.0)*x5008*x5009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5013 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5013.valid){
continue;
}
CheckValue<IkReal> x5014=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x5014.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5013.value)+(((1.5707963267949)*(x5014.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5015=IKcos(j10);
IkReal x5016=IKsin(j10);
IkReal x5017=(r11*sj11);
IkReal x5018=(cj11*r10);
IkReal x5019=(cj11*r00);
IkReal x5020=(cj11*r20);
IkReal x5021=((1.0)*x5015);
IkReal x5022=(sj11*x5015);
IkReal x5023=((1.0)*x5016);
IkReal x5024=(sj11*x5016);
evalcond[0]=((((-1.0)*x5018*x5021))+((r12*x5016))+((x5015*x5017)));
evalcond[1]=((((-1.0)*x5020*x5023))+(((-1.0)*r22*x5021))+((r21*x5024)));
evalcond[2]=((((-1.0)*x5019*x5023))+(((-1.0)*r02*x5021))+((r01*x5024)));
evalcond[3]=((-1.0)+((x5016*x5017))+(((-1.0)*r12*x5021))+(((-1.0)*x5018*x5023)));
evalcond[4]=((((-1.0)*x5019*x5021))+((cj8*sj7))+((r02*x5016))+((r01*x5022))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x5020*x5021))+((sj7*sj8))+((r22*x5016))+((r21*x5022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5025=((-1.0)*r00);
IkReal x5027 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5027)==0){
continue;
}
IkReal x5026=pow(x5027,-0.5);
CheckValue<IkReal> x5028 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5025),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5028.value));
IkReal gconst127=(r01*x5026);
IkReal gconst128=(x5025*x5026);
CheckValue<IkReal> x5029 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5029.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x5029.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x5030=((-1.0)*r00);
IkReal x5031=x5026;
CheckValue<IkReal> x5033 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5030),IKFAST_ATAN2_MAGTHRESH);
if(!x5033.valid){
continue;
}
IkReal x5032=((-1.0)*(x5033.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst127;
cj11=gconst128;
j11=x5032;
IkReal gconst126=x5032;
IkReal gconst127=(r01*x5031);
IkReal gconst128=(x5030*x5031);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5034=((1.0)*gconst127);
CheckValue<IkReal> x5035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5034)))),-1);
if(!x5035.valid){
continue;
}
CheckValue<IkReal> x5036 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x5034))+((gconst128*r10*sj6))+(((-1.0)*r11*sj6*x5034))+((cj6*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5036.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5035.value)))+(x5036.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5037=IKsin(j10);
IkReal x5038=IKcos(j10);
IkReal x5039=((1.0)*cj8);
IkReal x5040=(gconst128*r00);
IkReal x5041=(gconst128*r20);
IkReal x5042=(gconst127*x5038);
IkReal x5043=(gconst127*x5037);
IkReal x5044=((1.0)*cj7*sj8);
IkReal x5045=((1.0)*gconst128*r10);
IkReal x5046=((1.0)*x5038);
IkReal x5047=((1.0)*x5037);
evalcond[0]=((((-1.0)*x5041*x5047))+((r21*x5043))+(((-1.0)*r22*x5046)));
evalcond[1]=(cj6+(((-1.0)*x5037*x5045))+(((-1.0)*r12*x5046))+((r11*x5043)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5040*x5047))+(((-1.0)*r02*x5046))+((r01*x5043)));
evalcond[3]=((((-1.0)*x5041*x5046))+((r21*x5042))+((r22*x5037))+((sj7*sj8))+(((-1.0)*cj7*x5039)));
evalcond[4]=((((-1.0)*x5040*x5046))+(((-1.0)*cj6*sj7*x5039))+((r02*x5037))+(((-1.0)*cj6*x5044))+((r01*x5042)));
evalcond[5]=(((r12*x5037))+(((-1.0)*sj6*x5044))+(((-1.0)*sj6*sj7*x5039))+(((-1.0)*x5038*x5045))+((r11*x5042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5048=((1.0)*gconst128);
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5048))+((gconst127*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
CheckValue<IkReal> x5050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5048))+(((-1.0)*gconst127*r10)))),-1);
if(!x5050.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5049.value)+(((1.5707963267949)*(x5050.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5051=IKsin(j10);
IkReal x5052=IKcos(j10);
IkReal x5053=((1.0)*cj8);
IkReal x5054=(gconst128*r00);
IkReal x5055=(gconst128*r20);
IkReal x5056=(gconst127*x5052);
IkReal x5057=(gconst127*x5051);
IkReal x5058=((1.0)*cj7*sj8);
IkReal x5059=((1.0)*gconst128*r10);
IkReal x5060=((1.0)*x5052);
IkReal x5061=((1.0)*x5051);
evalcond[0]=(((r21*x5057))+(((-1.0)*x5055*x5061))+(((-1.0)*r22*x5060)));
evalcond[1]=(cj6+((r11*x5057))+(((-1.0)*r12*x5060))+(((-1.0)*x5051*x5059)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5060))+((r01*x5057))+(((-1.0)*x5054*x5061)));
evalcond[3]=(((r21*x5056))+((r22*x5051))+(((-1.0)*x5055*x5060))+((sj7*sj8))+(((-1.0)*cj7*x5053)));
evalcond[4]=((((-1.0)*cj6*x5058))+((r01*x5056))+(((-1.0)*cj6*sj7*x5053))+(((-1.0)*x5054*x5060))+((r02*x5051)));
evalcond[5]=(((r12*x5051))+((r11*x5056))+(((-1.0)*sj6*sj7*x5053))+(((-1.0)*x5052*x5059))+(((-1.0)*sj6*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5062=((-1.0)*r01);
IkReal x5064 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5064)==0){
continue;
}
IkReal x5063=pow(x5064,-0.5);
CheckValue<IkReal> x5065 = IKatan2WithCheck(IkReal(x5062),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5065.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5065.value))));
IkReal gconst130=(x5062*x5063);
IkReal gconst131=((1.0)*r00*x5063);
CheckValue<IkReal> x5066 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x5066.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x5067=((-1.0)*r01);
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal(x5067),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
IkReal x5068=((1.0)*(x5070.value));
IkReal x5069=x5063;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5068)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5068)));
IkReal gconst130=(x5067*x5069);
IkReal gconst131=((1.0)*r00*x5069);
j10eval[0]=0;
j10eval[1]=cj6;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x5071=((-1.0)*r01);
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(x5071),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
IkReal x5072=((1.0)*(x5074.value));
IkReal x5073=x5063;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5072)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5072)));
IkReal gconst130=(x5071*x5073);
IkReal gconst131=((1.0)*r00*x5073);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5075=((-1.0)*r01);
CheckValue<IkReal> x5078 = IKatan2WithCheck(IkReal(x5075),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5078.valid){
continue;
}
IkReal x5076=((1.0)*(x5078.value));
IkReal x5077=x5063;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5076)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5076)));
IkReal gconst130=(x5075*x5077);
IkReal gconst131=((1.0)*r00*x5077);
IkReal x5079=r02*r02;
IkReal x5080=(r12*sj6);
IkReal x5081=x5063;
IkReal x5082=(cj6*x5081);
j10eval[0]=((IKabs((((r02*x5080*x5081))+(((-1.0)*x5082))+((x5079*x5082)))))+(IKabs(((((-1.0)*x5080))+(((-1.0)*cj6*r02))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5083=((1.0)*gconst130);
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x5083))+(((-1.0)*r11*sj6*x5083))+((cj6*gconst131*r00))+((gconst131*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5083)))),-1);
if(!x5085.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5084.value)+(((1.5707963267949)*(x5085.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5086=IKsin(j10);
IkReal x5087=IKcos(j10);
IkReal x5088=((1.0)*gconst131);
IkReal x5089=((1.0)*cj8);
IkReal x5090=(gconst130*x5087);
IkReal x5091=(gconst130*x5086);
IkReal x5092=((1.0)*cj7*sj8);
IkReal x5093=((1.0)*x5087);
evalcond[0]=((((-1.0)*r22*x5093))+((r21*x5091))+(((-1.0)*r20*x5086*x5088)));
evalcond[1]=(cj6+((r11*x5091))+(((-1.0)*r10*x5086*x5088))+(((-1.0)*r12*x5093)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5091))+(((-1.0)*r00*x5086*x5088))+(((-1.0)*r02*x5093)));
evalcond[3]=(((r21*x5090))+((r22*x5086))+(((-1.0)*cj7*x5089))+((sj7*sj8))+(((-1.0)*r20*x5087*x5088)));
evalcond[4]=((((-1.0)*cj6*x5092))+(((-1.0)*r00*x5087*x5088))+((r01*x5090))+(((-1.0)*cj6*sj7*x5089))+((r02*x5086)));
evalcond[5]=((((-1.0)*r10*x5087*x5088))+((r11*x5090))+((r12*x5086))+(((-1.0)*sj6*sj7*x5089))+(((-1.0)*sj6*x5092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5094=((1.0)*gconst131);
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5094))+(((-1.0)*gconst130*r10)))),-1);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst130*r21*sj6))+(((-1.0)*r20*sj6*x5094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5095.value)))+(x5096.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5097=IKsin(j10);
IkReal x5098=IKcos(j10);
IkReal x5099=((1.0)*gconst131);
IkReal x5100=((1.0)*cj8);
IkReal x5101=(gconst130*x5098);
IkReal x5102=(gconst130*x5097);
IkReal x5103=((1.0)*cj7*sj8);
IkReal x5104=((1.0)*x5098);
evalcond[0]=((((-1.0)*r22*x5104))+((r21*x5102))+(((-1.0)*r20*x5097*x5099)));
evalcond[1]=(cj6+(((-1.0)*r10*x5097*x5099))+((r11*x5102))+(((-1.0)*r12*x5104)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5102))+(((-1.0)*r02*x5104))+(((-1.0)*r00*x5097*x5099)));
evalcond[3]=((((-1.0)*r20*x5098*x5099))+((r22*x5097))+((r21*x5101))+((sj7*sj8))+(((-1.0)*cj7*x5100)));
evalcond[4]=(((r01*x5101))+(((-1.0)*cj6*x5103))+(((-1.0)*r00*x5098*x5099))+(((-1.0)*cj6*sj7*x5100))+((r02*x5097)));
evalcond[5]=((((-1.0)*sj6*sj7*x5100))+((r12*x5097))+((r11*x5101))+(((-1.0)*sj6*x5103))+(((-1.0)*r10*x5098*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5105=((1.0)*gconst131);
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst130*r21))+(((-1.0)*cj6*r20*x5105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
CheckValue<IkReal> x5107=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5105)))),-1);
if(!x5107.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5106.value)+(((1.5707963267949)*(x5107.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5108=IKsin(j10);
IkReal x5109=IKcos(j10);
IkReal x5110=((1.0)*gconst131);
IkReal x5111=((1.0)*cj8);
IkReal x5112=(gconst130*x5109);
IkReal x5113=(gconst130*x5108);
IkReal x5114=((1.0)*cj7*sj8);
IkReal x5115=((1.0)*x5109);
evalcond[0]=((((-1.0)*r22*x5115))+(((-1.0)*r20*x5108*x5110))+((r21*x5113)));
evalcond[1]=((((-1.0)*r10*x5108*x5110))+cj6+((r11*x5113))+(((-1.0)*r12*x5115)));
evalcond[2]=(((r01*x5113))+(((-1.0)*sj6))+(((-1.0)*r02*x5115))+(((-1.0)*r00*x5108*x5110)));
evalcond[3]=((((-1.0)*r20*x5109*x5110))+((r22*x5108))+((r21*x5112))+(((-1.0)*cj7*x5111))+((sj7*sj8)));
evalcond[4]=(((r01*x5112))+(((-1.0)*r00*x5109*x5110))+(((-1.0)*cj6*x5114))+((r02*x5108))+(((-1.0)*cj6*sj7*x5111)));
evalcond[5]=(((r12*x5108))+(((-1.0)*r10*x5109*x5110))+(((-1.0)*sj6*sj7*x5111))+(((-1.0)*sj6*x5114))+((r11*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5116=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x5116;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x5116);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5117=((1.0)*cj11);
IkReal x5118=((((-1.0)*r10*sj11))+(((-1.0)*r11*x5117)));
j10eval[0]=x5118;
j10eval[1]=IKsign(x5118);
j10eval[2]=((IKabs(((((-1.0)*r20*x5117))+((r21*sj11)))))+(IKabs(r22)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5119=cj11*cj11;
IkReal x5120=r01*r01;
IkReal x5121=(cj11*r00);
IkReal x5122=(r01*sj11);
IkReal x5123=((((-2.0)*x5121*x5122))+(((-1.0)*x5119*x5120))+x5120+(r02*r02)+((x5119*(r00*r00))));
j10eval[0]=x5123;
j10eval[1]=IKsign(x5123);
j10eval[2]=((IKabs(r02))+(IKabs((x5122+(((-1.0)*x5121))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5124=cj11*cj11;
IkReal x5125=r01*r01;
IkReal x5126=(cj11*r00);
IkReal x5127=(r01*sj11);
CheckValue<IkReal> x5128 = IKatan2WithCheck(IkReal((x5127+(((-1.0)*x5126)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5128.valid){
continue;
}
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign((((x5124*(r00*r00)))+x5125+(((-2.0)*x5126*x5127))+(r02*r02)+(((-1.0)*x5124*x5125)))),-1);
if(!x5129.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5128.value)+(((1.5707963267949)*(x5129.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5130=IKcos(j10);
IkReal x5131=IKsin(j10);
IkReal x5132=(r11*sj11);
IkReal x5133=((1.0)*cj7);
IkReal x5134=(cj11*r00);
IkReal x5135=(cj11*r10);
IkReal x5136=(cj11*r20);
IkReal x5137=((1.0)*x5130);
IkReal x5138=(sj11*x5130);
IkReal x5139=((1.0)*x5131);
IkReal x5140=(sj11*x5131);
evalcond[0]=(((r01*x5138))+((r02*x5131))+(((-1.0)*x5134*x5137)));
evalcond[1]=(((r21*x5140))+(((-1.0)*x5136*x5139))+(((-1.0)*r22*x5137)));
evalcond[2]=((((-1.0)*x5135*x5139))+((x5131*x5132))+(((-1.0)*r12*x5137)));
evalcond[3]=((-1.0)+((r01*x5140))+(((-1.0)*r02*x5137))+(((-1.0)*x5134*x5139)));
evalcond[4]=(((r22*x5131))+(((-1.0)*x5136*x5137))+((r21*x5138))+((sj7*sj8))+(((-1.0)*cj8*x5133)));
evalcond[5]=((((-1.0)*sj8*x5133))+(((-1.0)*cj8*sj7))+((r12*x5131))+(((-1.0)*x5135*x5137))+((x5130*x5132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5141=((1.0)*cj11);
CheckValue<IkReal> x5142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5141))+(((-1.0)*r10*sj11)))),-1);
if(!x5142.valid){
continue;
}
CheckValue<IkReal> x5143 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5141))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5143.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5142.value)))+(x5143.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5144=IKcos(j10);
IkReal x5145=IKsin(j10);
IkReal x5146=(r11*sj11);
IkReal x5147=((1.0)*cj7);
IkReal x5148=(cj11*r00);
IkReal x5149=(cj11*r10);
IkReal x5150=(cj11*r20);
IkReal x5151=((1.0)*x5144);
IkReal x5152=(sj11*x5144);
IkReal x5153=((1.0)*x5145);
IkReal x5154=(sj11*x5145);
evalcond[0]=(((r01*x5152))+((r02*x5145))+(((-1.0)*x5148*x5151)));
evalcond[1]=(((r21*x5154))+(((-1.0)*r22*x5151))+(((-1.0)*x5150*x5153)));
evalcond[2]=((((-1.0)*r12*x5151))+((x5145*x5146))+(((-1.0)*x5149*x5153)));
evalcond[3]=((-1.0)+((r01*x5154))+(((-1.0)*x5148*x5153))+(((-1.0)*r02*x5151)));
evalcond[4]=(((r21*x5152))+(((-1.0)*x5150*x5151))+((r22*x5145))+((sj7*sj8))+(((-1.0)*cj8*x5147)));
evalcond[5]=(((x5144*x5146))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x5147))+((r12*x5145))+(((-1.0)*x5149*x5151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5155=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x5155.valid){
continue;
}
CheckValue<IkReal> x5156 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5156.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5155.value)))+(x5156.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5157=IKcos(j10);
IkReal x5158=IKsin(j10);
IkReal x5159=(r11*sj11);
IkReal x5160=((1.0)*cj7);
IkReal x5161=(cj11*r00);
IkReal x5162=(cj11*r10);
IkReal x5163=(cj11*r20);
IkReal x5164=((1.0)*x5157);
IkReal x5165=(sj11*x5157);
IkReal x5166=((1.0)*x5158);
IkReal x5167=(sj11*x5158);
evalcond[0]=(((r01*x5165))+(((-1.0)*x5161*x5164))+((r02*x5158)));
evalcond[1]=((((-1.0)*r22*x5164))+((r21*x5167))+(((-1.0)*x5163*x5166)));
evalcond[2]=((((-1.0)*r12*x5164))+(((-1.0)*x5162*x5166))+((x5158*x5159)));
evalcond[3]=((-1.0)+((r01*x5167))+(((-1.0)*x5161*x5166))+(((-1.0)*r02*x5164)));
evalcond[4]=(((r21*x5165))+(((-1.0)*x5163*x5164))+((r22*x5158))+((sj7*sj8))+(((-1.0)*cj8*x5160)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x5160))+((x5157*x5159))+((r12*x5158))+(((-1.0)*x5162*x5164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5168=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x5168;
j10eval[1]=IKsign(x5168);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5169=((1.0)*cj11);
IkReal x5170=((((-1.0)*r21*x5169))+(((-1.0)*r20*sj11)));
j10eval[0]=x5170;
j10eval[1]=((IKabs((((r11*sj11))+(((-1.0)*r10*x5169)))))+(IKabs(r12)));
j10eval[2]=IKsign(x5170);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5171=r01*r01;
IkReal x5172=cj11*cj11;
IkReal x5173=(cj11*r00);
IkReal x5174=(r01*sj11);
IkReal x5175=((((-1.0)*(r02*r02)))+(((-1.0)*x5171))+(((2.0)*x5173*x5174))+(((-1.0)*x5172*(r00*r00)))+((x5171*x5172)));
j10eval[0]=x5175;
j10eval[1]=IKsign(x5175);
j10eval[2]=((IKabs((x5174+(((-1.0)*x5173)))))+(IKabs(r02)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5176=r01*r01;
IkReal x5177=cj11*cj11;
IkReal x5178=(cj11*r00);
IkReal x5179=(r01*sj11);
CheckValue<IkReal> x5180 = IKatan2WithCheck(IkReal((x5179+(((-1.0)*x5178)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5180.valid){
continue;
}
CheckValue<IkReal> x5181=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x5176))+(((2.0)*x5178*x5179))+((x5176*x5177))+(((-1.0)*x5177*(r00*r00))))),-1);
if(!x5181.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5180.value)+(((1.5707963267949)*(x5181.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5182=IKcos(j10);
IkReal x5183=IKsin(j10);
IkReal x5184=(r11*sj11);
IkReal x5185=(cj11*r00);
IkReal x5186=(cj11*r10);
IkReal x5187=(cj11*r20);
IkReal x5188=((1.0)*x5182);
IkReal x5189=(sj11*x5182);
IkReal x5190=((1.0)*x5183);
IkReal x5191=(sj11*x5183);
evalcond[0]=(((r01*x5189))+(((-1.0)*x5185*x5188))+((r02*x5183)));
evalcond[1]=((((-1.0)*r22*x5188))+((r21*x5191))+(((-1.0)*x5187*x5190)));
evalcond[2]=((((-1.0)*x5186*x5190))+((x5183*x5184))+(((-1.0)*r12*x5188)));
evalcond[3]=((1.0)+(((-1.0)*x5185*x5190))+(((-1.0)*r02*x5188))+((r01*x5191)));
evalcond[4]=(((cj8*sj7))+((x5182*x5184))+((cj7*sj8))+(((-1.0)*x5186*x5188))+((r12*x5183)));
evalcond[5]=(((r22*x5183))+(((-1.0)*cj7*cj8))+(((-1.0)*x5187*x5188))+((r21*x5189))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5192=((1.0)*cj11);
CheckValue<IkReal> x5193 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5192))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5193.valid){
continue;
}
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5192))+(((-1.0)*r20*sj11)))),-1);
if(!x5194.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5193.value)+(((1.5707963267949)*(x5194.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5195=IKcos(j10);
IkReal x5196=IKsin(j10);
IkReal x5197=(r11*sj11);
IkReal x5198=(cj11*r00);
IkReal x5199=(cj11*r10);
IkReal x5200=(cj11*r20);
IkReal x5201=((1.0)*x5195);
IkReal x5202=(sj11*x5195);
IkReal x5203=((1.0)*x5196);
IkReal x5204=(sj11*x5196);
evalcond[0]=(((r01*x5202))+((r02*x5196))+(((-1.0)*x5198*x5201)));
evalcond[1]=((((-1.0)*x5200*x5203))+(((-1.0)*r22*x5201))+((r21*x5204)));
evalcond[2]=((((-1.0)*x5199*x5203))+((x5196*x5197))+(((-1.0)*r12*x5201)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5201))+((r01*x5204))+(((-1.0)*x5198*x5203)));
evalcond[4]=((((-1.0)*x5199*x5201))+((cj8*sj7))+((x5195*x5197))+((r12*x5196))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x5200*x5201))+((r22*x5196))+((sj7*sj8))+((r21*x5202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
CheckValue<IkReal> x5206=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x5206.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5205.value)+(((1.5707963267949)*(x5206.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5207=IKcos(j10);
IkReal x5208=IKsin(j10);
IkReal x5209=(r11*sj11);
IkReal x5210=(cj11*r00);
IkReal x5211=(cj11*r10);
IkReal x5212=(cj11*r20);
IkReal x5213=((1.0)*x5207);
IkReal x5214=(sj11*x5207);
IkReal x5215=((1.0)*x5208);
IkReal x5216=(sj11*x5208);
evalcond[0]=(((r01*x5214))+((r02*x5208))+(((-1.0)*x5210*x5213)));
evalcond[1]=((((-1.0)*x5212*x5215))+(((-1.0)*r22*x5213))+((r21*x5216)));
evalcond[2]=(((x5208*x5209))+(((-1.0)*x5211*x5215))+(((-1.0)*r12*x5213)));
evalcond[3]=((1.0)+((r01*x5216))+(((-1.0)*x5210*x5215))+(((-1.0)*r02*x5213)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x5211*x5213))+((r12*x5208))+((cj7*sj8))+((x5207*x5209)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x5212*x5213))+((r22*x5208))+((r21*x5214))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x5217=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5217);
rxp1_1=(px*r21);
rxp1_2=(r11*x5217);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5218=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5218);
rxp1_1=(px*r21);
rxp1_2=(r11*x5218);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r20))+((r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5219=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5219);
rxp1_1=(px*r21);
rxp1_2=(r11*x5219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5222=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x5222.valid){
continue;
}
IkReal x5220=x5222.value;
IkReal x5221=(sj6*x5220);
cj10array[0]=(((cj7*sj8*x5221))+((cj8*sj7*x5221)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5223=IKsin(j10);
IkReal x5224=IKcos(j10);
IkReal x5225=(r21*sj11);
IkReal x5226=(cj11*r20);
IkReal x5227=((1.0)*x5224);
IkReal x5228=((1.0)*x5223);
evalcond[0]=(r02*x5223);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x5227)));
evalcond[2]=(((x5223*x5225))+(((-1.0)*x5226*x5228)));
evalcond[3]=(((r11*sj11*x5223))+(((-1.0)*cj11*r10*x5228)));
evalcond[4]=((((-1.0)*cj7*cj8))+(((-1.0)*x5226*x5227))+((sj7*sj8))+((x5224*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5230=IKPowWithIntegerCheck(((((-1.0)*cj11*r20))+((r21*sj11))),-1);
if(!x5230.valid){
continue;
}
IkReal x5229=x5230.value;
cj10array[0]=(((cj7*cj8*x5229))+(((-1.0)*sj7*sj8*x5229)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5231=IKsin(j10);
IkReal x5232=IKcos(j10);
IkReal x5233=(cj11*r10);
IkReal x5234=((1.0)*sj6);
IkReal x5235=((1.0)*x5232);
IkReal x5236=(sj11*x5231);
IkReal x5237=((1.0)*x5231);
evalcond[0]=(r02*x5231);
evalcond[1]=((((-1.0)*x5234))+(((-1.0)*r02*x5235)));
evalcond[2]=((((-1.0)*cj11*r20*x5237))+((r21*x5236)));
evalcond[3]=(((r11*x5236))+(((-1.0)*x5233*x5237)));
evalcond[4]=((((-1.0)*cj7*sj8*x5234))+((r11*sj11*x5232))+(((-1.0)*cj8*sj7*x5234))+(((-1.0)*x5233*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(r02,-1);
if(!x5238.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x5238.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5239=IKsin(j10);
IkReal x5240=IKcos(j10);
IkReal x5241=(r21*sj11);
IkReal x5242=(r11*sj11);
IkReal x5243=((1.0)*cj8);
IkReal x5244=((1.0)*cj11*r20);
IkReal x5245=((1.0)*cj11*r10);
evalcond[0]=(r02*x5239);
evalcond[1]=(((x5239*x5241))+(((-1.0)*x5239*x5244)));
evalcond[2]=(((x5239*x5242))+(((-1.0)*x5239*x5245)));
evalcond[3]=(((x5240*x5241))+(((-1.0)*cj7*x5243))+(((-1.0)*x5240*x5244))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj6*sj7*x5243))+((x5240*x5242))+(((-1.0)*cj7*sj6*sj8))+(((-1.0)*x5240*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5246=((1.0)*sj11);
CheckValue<IkReal> x5247 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj11*cj6*r00))+(((-1.0)*cj6*r01*x5246))+((cj11*r10*sj6))+(((-1.0)*r11*sj6*x5246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5247.valid){
continue;
}
CheckValue<IkReal> x5248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5246))+(((-1.0)*cj11*r21)))),-1);
if(!x5248.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5247.value)+(((1.5707963267949)*(x5248.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5249=IKsin(j10);
IkReal x5250=IKcos(j10);
IkReal x5251=(r11*sj11);
IkReal x5252=(cj11*r00);
IkReal x5253=(cj11*r10);
IkReal x5254=((1.0)*cj8);
IkReal x5255=(cj11*r20);
IkReal x5256=((1.0)*cj7*sj8);
IkReal x5257=((1.0)*x5250);
IkReal x5258=(sj11*x5250);
IkReal x5259=((1.0)*x5249);
IkReal x5260=(sj11*x5249);
evalcond[0]=((((-1.0)*x5255*x5259))+(((-1.0)*r22*x5257))+((r21*x5260)));
evalcond[1]=(cj6+(((-1.0)*r12*x5257))+((x5249*x5251))+(((-1.0)*x5253*x5259)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5257))+((r01*x5260))+(((-1.0)*x5252*x5259)));
evalcond[3]=((((-1.0)*x5255*x5257))+((r21*x5258))+(((-1.0)*cj7*x5254))+((sj7*sj8))+((r22*x5249)));
evalcond[4]=((((-1.0)*cj6*sj7*x5254))+((r01*x5258))+(((-1.0)*cj6*x5256))+(((-1.0)*x5252*x5257))+((r02*x5249)));
evalcond[5]=((((-1.0)*sj6*x5256))+((x5250*x5251))+((r12*x5249))+(((-1.0)*sj6*sj7*x5254))+(((-1.0)*x5253*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5261=((1.0)*cj11);
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5261))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
CheckValue<IkReal> x5263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5261))+(((-1.0)*r10*sj11)))),-1);
if(!x5263.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5262.value)+(((1.5707963267949)*(x5263.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5264=IKsin(j10);
IkReal x5265=IKcos(j10);
IkReal x5266=(r11*sj11);
IkReal x5267=(cj11*r00);
IkReal x5268=(cj11*r10);
IkReal x5269=((1.0)*cj8);
IkReal x5270=(cj11*r20);
IkReal x5271=((1.0)*cj7*sj8);
IkReal x5272=((1.0)*x5265);
IkReal x5273=(sj11*x5265);
IkReal x5274=((1.0)*x5264);
IkReal x5275=(sj11*x5264);
evalcond[0]=(((r21*x5275))+(((-1.0)*x5270*x5274))+(((-1.0)*r22*x5272)));
evalcond[1]=(cj6+(((-1.0)*r12*x5272))+((x5264*x5266))+(((-1.0)*x5268*x5274)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5275))+(((-1.0)*r02*x5272))+(((-1.0)*x5267*x5274)));
evalcond[3]=(((r21*x5273))+(((-1.0)*cj7*x5269))+(((-1.0)*x5270*x5272))+((sj7*sj8))+((r22*x5264)));
evalcond[4]=(((r02*x5264))+(((-1.0)*cj6*sj7*x5269))+((r01*x5273))+(((-1.0)*cj6*x5271))+(((-1.0)*x5267*x5272)));
evalcond[5]=(((r12*x5264))+((x5265*x5266))+(((-1.0)*sj6*x5271))+(((-1.0)*x5268*x5272))+(((-1.0)*sj6*sj7*x5269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5276=((1.0)*cj11);
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x5276))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5276))+(((-1.0)*r00*sj11)))),-1);
if(!x5278.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5279=IKsin(j10);
IkReal x5280=IKcos(j10);
IkReal x5281=(r11*sj11);
IkReal x5282=(cj11*r00);
IkReal x5283=(cj11*r10);
IkReal x5284=((1.0)*cj8);
IkReal x5285=(cj11*r20);
IkReal x5286=((1.0)*cj7*sj8);
IkReal x5287=((1.0)*x5280);
IkReal x5288=(sj11*x5280);
IkReal x5289=((1.0)*x5279);
IkReal x5290=(sj11*x5279);
evalcond[0]=((((-1.0)*r22*x5287))+((r21*x5290))+(((-1.0)*x5285*x5289)));
evalcond[1]=(cj6+((x5279*x5281))+(((-1.0)*r12*x5287))+(((-1.0)*x5283*x5289)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5287))+((r01*x5290))+(((-1.0)*x5282*x5289)));
evalcond[3]=(((r22*x5279))+((r21*x5288))+(((-1.0)*cj7*x5284))+((sj7*sj8))+(((-1.0)*x5285*x5287)));
evalcond[4]=(((r02*x5279))+(((-1.0)*cj6*sj7*x5284))+((r01*x5288))+(((-1.0)*cj6*x5286))+(((-1.0)*x5282*x5287)));
evalcond[5]=((((-1.0)*sj6*sj7*x5284))+((x5280*x5281))+(((-1.0)*sj6*x5286))+(((-1.0)*x5283*x5287))+((r12*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5291=cj11*cj11;
IkReal x5292=r21*r21;
IkReal x5293=(sj7*sj8);
IkReal x5294=(r21*sj11);
IkReal x5295=(cj11*r20);
IkReal x5296=((1.0)*cj7*cj8);
CheckValue<IkReal> x5297 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5296))+((r22*x5293)))),IkReal(((((-1.0)*x5294*x5296))+((x5293*x5294))+(((-1.0)*x5293*x5295))+((cj7*cj8*x5295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5297.valid){
continue;
}
CheckValue<IkReal> x5298=IKPowWithIntegerCheck(IKsign((((x5291*x5292))+(((-1.0)*x5291*(r20*r20)))+(((-1.0)*x5292))+(((-1.0)*(r22*r22)))+(((2.0)*x5294*x5295)))),-1);
if(!x5298.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5297.value)+(((1.5707963267949)*(x5298.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5299=IKsin(j10);
IkReal x5300=IKcos(j10);
IkReal x5301=(r21*sj11);
IkReal x5302=(cj11*r20);
IkReal x5303=((1.0)*x5300);
evalcond[0]=((((-1.0)*r22*x5303))+(((-1.0)*x5299*x5302))+((x5299*x5301)));
evalcond[1]=((((-1.0)*cj7*cj8))+((r22*x5299))+((x5300*x5301))+(((-1.0)*x5302*x5303))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x5304=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x5304))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x5304))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x5304))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x5304))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x5304))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x5304))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x5305=IKcos(j6);
IkReal x5306=IKsin(j6);
IkReal x5307=((1.0)*sj7);
IkReal x5308=(r11*sj11);
IkReal x5309=((1.0)*cj10);
IkReal x5310=(cj7*sj8);
IkReal x5311=(r10*sj11);
IkReal x5312=(cj11*r01);
IkReal x5313=(r00*sj11);
IkReal x5314=((0.425)*sj7);
IkReal x5315=(cj11*r11);
IkReal x5316=(r01*sj11);
IkReal x5317=((0.39225)*cj8*sj7);
IkReal x5318=(cj8*x5305);
IkReal x5319=((1.0)*cj11*sj10);
IkReal x5320=(cj8*x5306);
IkReal x5321=((1.0)*x5306);
evalcond[0]=(x5305+(((-1.0)*r12*x5309))+((sj10*x5308))+(((-1.0)*r10*x5319)));
evalcond[1]=((((-1.0)*r00*x5319))+(((-1.0)*r02*x5309))+(((-1.0)*x5321))+((sj10*x5316)));
evalcond[2]=(((cj7*x5318))+x5313+x5312+(((-1.0)*sj8*x5305*x5307)));
evalcond[3]=((((-1.0)*sj8*x5306*x5307))+x5311+x5315+((cj7*x5320)));
evalcond[4]=(((r02*sj10))+(((-1.0)*cj11*r00*x5309))+((cj10*x5316))+(((-1.0)*x5305*x5310))+(((-1.0)*x5307*x5318)));
evalcond[5]=((((-1.0)*cj11*r10*x5309))+((r12*sj10))+(((-1.0)*x5307*x5320))+(((-1.0)*x5310*x5321))+((cj10*x5308)));
evalcond[6]=(((x5305*x5314))+((x5305*x5317))+(((-0.09465)*x5312))+(((-0.09465)*x5313))+(((-0.10915)*x5306))+(((-1.0)*px))+(((0.39225)*x5305*x5310)));
evalcond[7]=((((-0.09465)*x5311))+(((-0.09465)*x5315))+(((0.39225)*x5306*x5310))+(((-1.0)*py))+(((0.10915)*x5305))+((x5306*x5314))+((x5306*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x5322=((1.0)*sj11);
IkReal x5323=((1.0)*cj11);
CheckValue<IkReal> x5324 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5323))+(((-1.0)*r10*x5322)))),IkReal(((((-1.0)*r00*x5322))+(((-1.0)*r01*x5323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5324.valid){
continue;
}
CheckValue<IkReal> x5325=IKPowWithIntegerCheck(IKsign((((cj7*cj8))+(((-1.0)*sj7*sj8)))),-1);
if(!x5325.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x5324.value)+(((1.5707963267949)*(x5325.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x5326=IKcos(j6);
IkReal x5327=IKsin(j6);
IkReal x5328=(cj7*cj8);
IkReal x5329=((0.39225)*cj7);
IkReal x5330=((1.0)*sj7);
IkReal x5331=(r10*sj11);
IkReal x5332=(cj11*r01);
IkReal x5333=(r00*sj11);
IkReal x5334=((0.425)*sj7);
IkReal x5335=(cj11*r11);
IkReal x5336=((0.39225)*cj8*sj7);
IkReal x5337=(sj8*x5327);
IkReal x5338=(sj8*x5326);
evalcond[0]=((((-1.0)*x5330*x5338))+x5333+x5332+((x5326*x5328)));
evalcond[1]=((((-1.0)*x5330*x5337))+((x5327*x5328))+x5331+x5335);
evalcond[2]=(((x5326*x5336))+((x5326*x5334))+(((-1.0)*px))+(((-0.09465)*x5332))+(((-0.09465)*x5333))+(((-0.10915)*x5327))+((x5329*x5338)));
evalcond[3]=(((x5327*x5334))+((x5327*x5336))+(((-1.0)*py))+(((0.10915)*x5326))+(((-0.09465)*x5335))+(((-0.09465)*x5331))+((x5329*x5337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x5339=((1.0)*cj11);
IkReal x5340=((((-1.0)*r00*sj11))+(((-1.0)*r01*x5339)));
j10eval[0]=x5340;
j10eval[1]=IKsign(x5340);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x5339))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x5341=((1.0)*cj11);
IkReal x5342=((((-1.0)*r11*x5341))+(((-1.0)*r10*sj11)));
j10eval[0]=x5342;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x5341))))));
j10eval[2]=IKsign(x5342);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
IkReal x5343=((1.0)*sj11);
IkReal x5344=((((-1.0)*r20*x5343))+(((-1.0)*cj11*r21)));
j10eval[0]=x5344;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*r11*sj6*x5343))+((cj11*cj6*r00))+((cj11*r10*sj6))+(((-1.0)*cj6*r01*x5343))))));
j10eval[2]=IKsign(x5344);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5345=((-1.0)*r20);
IkReal x5347 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5347)==0){
continue;
}
IkReal x5346=pow(x5347,-0.5);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5345),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5348.value));
IkReal gconst115=(r21*x5346);
IkReal gconst116=(x5345*x5346);
CheckValue<IkReal> x5349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x5349.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x5350=((-1.0)*r20);
IkReal x5351=x5346;
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5350),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
IkReal x5352=((-1.0)*(x5353.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x5352;
IkReal gconst114=x5352;
IkReal gconst115=(r21*x5351);
IkReal gconst116=(x5350*x5351);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5354=((-1.0)*r20);
IkReal x5355=x5346;
CheckValue<IkReal> x5357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5354),IKFAST_ATAN2_MAGTHRESH);
if(!x5357.valid){
continue;
}
IkReal x5356=((-1.0)*(x5357.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x5356;
IkReal gconst114=x5356;
IkReal gconst115=(r21*x5355);
IkReal gconst116=(x5354*x5355);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x5358=((-1.0)*r20);
IkReal x5359=x5346;
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5358),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
IkReal x5360=((-1.0)*(x5361.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst115;
cj11=gconst116;
j11=x5360;
IkReal gconst114=x5360;
IkReal gconst115=(r21*x5359);
IkReal gconst116=(x5358*x5359);
IkReal x5362=((1.0)*(r22*r22));
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5362))),-1);
if(!x5366.valid){
continue;
}
IkReal x5363=x5366.value;
IkReal x5364=((1.0)*x5363);
IkReal x5365=((((-2.0)*x5363*(r20*r20)*(r21*r21)))+(((-1.0)*x5364*(r20*r20*r20*r20)))+(((-1.0)*x5364*(r21*r21*r21*r21)))+(((-1.0)*x5362)));
j10eval[0]=x5365;
j10eval[1]=IKsign(x5365);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5367=(cj7*cj8);
IkReal x5368=(gconst116*r20);
IkReal x5369=(sj7*sj8);
IkReal x5370=(gconst115*r21);
CheckValue<IkReal> x5371=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5368*x5368)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5370*x5370)))+(((2.0)*x5368*x5370)))),-1);
if(!x5371.valid){
continue;
}
CheckValue<IkReal> x5372 = IKatan2WithCheck(IkReal((((r22*x5369))+(((-1.0)*r22*x5367)))),IkReal((((x5369*x5370))+(((-1.0)*x5367*x5370))+(((-1.0)*x5368*x5369))+((x5367*x5368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5372.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5371.value)))+(x5372.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5373=IKsin(j10);
IkReal x5374=IKcos(j10);
IkReal x5375=(gconst116*r20);
IkReal x5376=(gconst116*r10);
IkReal x5377=((1.0)*cj8);
IkReal x5378=(gconst116*r00);
IkReal x5379=((1.0)*x5374);
IkReal x5380=(gconst115*x5373);
IkReal x5381=((1.0)*cj7*sj8);
IkReal x5382=(gconst115*x5374);
IkReal x5383=((1.0)*x5373);
evalcond[0]=((((-1.0)*r22*x5379))+(((-1.0)*x5375*x5383))+((r21*x5380)));
evalcond[1]=(cj6+(((-1.0)*r12*x5379))+((r11*x5380))+(((-1.0)*x5376*x5383)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5379))+((r01*x5380))+(((-1.0)*x5378*x5383)));
evalcond[3]=(((r22*x5373))+(((-1.0)*cj7*x5377))+(((-1.0)*x5375*x5379))+((sj7*sj8))+((r21*x5382)));
evalcond[4]=((((-1.0)*cj6*sj7*x5377))+(((-1.0)*cj6*x5381))+((r02*x5373))+((r01*x5382))+(((-1.0)*x5378*x5379)));
evalcond[5]=((((-1.0)*sj6*sj7*x5377))+(((-1.0)*x5376*x5379))+((r11*x5382))+(((-1.0)*sj6*x5381))+((r12*x5373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5384=((1.0)*gconst116);
CheckValue<IkReal> x5385=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5384)))),-1);
if(!x5385.valid){
continue;
}
CheckValue<IkReal> x5386 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5384))+((gconst115*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5386.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5385.value)))+(x5386.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5387=IKsin(j10);
IkReal x5388=IKcos(j10);
IkReal x5389=(gconst116*r20);
IkReal x5390=(gconst116*r10);
IkReal x5391=((1.0)*cj8);
IkReal x5392=(gconst116*r00);
IkReal x5393=((1.0)*x5388);
IkReal x5394=(gconst115*x5387);
IkReal x5395=((1.0)*cj7*sj8);
IkReal x5396=(gconst115*x5388);
IkReal x5397=((1.0)*x5387);
evalcond[0]=((((-1.0)*x5389*x5397))+(((-1.0)*r22*x5393))+((r21*x5394)));
evalcond[1]=(cj6+((r11*x5394))+(((-1.0)*r12*x5393))+(((-1.0)*x5390*x5397)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5392*x5397))+(((-1.0)*r02*x5393))+((r01*x5394)));
evalcond[3]=((((-1.0)*x5389*x5393))+((sj7*sj8))+((r21*x5396))+((r22*x5387))+(((-1.0)*cj7*x5391)));
evalcond[4]=((((-1.0)*cj6*sj7*x5391))+((r02*x5387))+(((-1.0)*x5392*x5393))+(((-1.0)*cj6*x5395))+((r01*x5396)));
evalcond[5]=((((-1.0)*sj6*sj7*x5391))+((r11*x5396))+(((-1.0)*sj6*x5395))+((r12*x5387))+(((-1.0)*x5390*x5393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5398=((1.0)*gconst116);
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst115*r21))+(((-1.0)*cj6*r20*x5398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
CheckValue<IkReal> x5400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5398)))),-1);
if(!x5400.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5399.value)+(((1.5707963267949)*(x5400.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5401=IKsin(j10);
IkReal x5402=IKcos(j10);
IkReal x5403=(gconst116*r20);
IkReal x5404=(gconst116*r10);
IkReal x5405=((1.0)*cj8);
IkReal x5406=(gconst116*r00);
IkReal x5407=((1.0)*x5402);
IkReal x5408=(gconst115*x5401);
IkReal x5409=((1.0)*cj7*sj8);
IkReal x5410=(gconst115*x5402);
IkReal x5411=((1.0)*x5401);
evalcond[0]=(((r21*x5408))+(((-1.0)*x5403*x5411))+(((-1.0)*r22*x5407)));
evalcond[1]=(cj6+(((-1.0)*x5404*x5411))+(((-1.0)*r12*x5407))+((r11*x5408)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5406*x5411))+(((-1.0)*r02*x5407))+((r01*x5408)));
evalcond[3]=(((r22*x5401))+(((-1.0)*x5403*x5407))+(((-1.0)*cj7*x5405))+((r21*x5410))+((sj7*sj8)));
evalcond[4]=(((r02*x5401))+(((-1.0)*x5406*x5407))+((r01*x5410))+(((-1.0)*cj6*sj7*x5405))+(((-1.0)*cj6*x5409)));
evalcond[5]=((((-1.0)*sj6*sj7*x5405))+((r12*x5401))+((r11*x5410))+(((-1.0)*sj6*x5409))+(((-1.0)*x5404*x5407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5412=((-1.0)*r21);
IkReal x5414 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5414)==0){
continue;
}
IkReal x5413=pow(x5414,-0.5);
CheckValue<IkReal> x5415 = IKatan2WithCheck(IkReal(x5412),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5415.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5415.value))));
IkReal gconst118=(x5412*x5413);
IkReal gconst119=((1.0)*r20*x5413);
CheckValue<IkReal> x5416 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5416.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x5416.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x5417=((-1.0)*r21);
CheckValue<IkReal> x5420 = IKatan2WithCheck(IkReal(x5417),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5420.valid){
continue;
}
IkReal x5418=((1.0)*(x5420.value));
IkReal x5419=x5413;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x5418)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5418)));
IkReal gconst118=(x5417*x5419);
IkReal gconst119=((1.0)*r20*x5419);
IkReal x5421=r22*r22;
IkReal x5422=((1.0)*x5421);
CheckValue<IkReal> x5426=IKPowWithIntegerCheck(((-1.0)+x5421),-1);
if(!x5426.valid){
continue;
}
IkReal x5423=x5426.value;
if((((1.0)+(((-1.0)*x5422)))) < -0.00001)
continue;
IkReal x5424=IKsqrt(((1.0)+(((-1.0)*x5422))));
IkReal x5425=(cj6*x5423*x5424);
j10eval[0]=((IKabs(((((-1.0)*x5422*x5425))+x5425)))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5427=((-1.0)*r21);
CheckValue<IkReal> x5430 = IKatan2WithCheck(IkReal(x5427),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5430.valid){
continue;
}
IkReal x5428=((1.0)*(x5430.value));
IkReal x5429=x5413;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x5428)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5428)));
IkReal gconst118=(x5427*x5429);
IkReal gconst119=((1.0)*r20*x5429);
IkReal x5431=r22*r22;
IkReal x5432=((1.0)*x5431);
CheckValue<IkReal> x5436=IKPowWithIntegerCheck(((-1.0)+x5431),-1);
if(!x5436.valid){
continue;
}
IkReal x5433=x5436.value;
if((((1.0)+(((-1.0)*x5432)))) < -0.00001)
continue;
IkReal x5434=IKsqrt(((1.0)+(((-1.0)*x5432))));
IkReal x5435=(sj6*x5433*x5434);
j10eval[0]=((IKabs((x5435+(((-1.0)*x5432*x5435)))))+(IKabs((r22*sj6))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x5437=((-1.0)*r21);
CheckValue<IkReal> x5440 = IKatan2WithCheck(IkReal(x5437),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5440.valid){
continue;
}
IkReal x5438=((1.0)*(x5440.value));
IkReal x5439=x5413;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst118;
cj11=gconst119;
j11=((3.14159265)+(((-1.0)*x5438)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5438)));
IkReal gconst118=(x5437*x5439);
IkReal gconst119=((1.0)*r20*x5439);
IkReal x5441=((1.0)*(r22*r22));
CheckValue<IkReal> x5445=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5441))),-1);
if(!x5445.valid){
continue;
}
IkReal x5442=x5445.value;
IkReal x5443=((1.0)*x5442);
IkReal x5444=((((-2.0)*x5442*(r20*r20)*(r21*r21)))+(((-1.0)*x5441))+(((-1.0)*x5443*(r21*r21*r21*r21)))+(((-1.0)*x5443*(r20*r20*r20*r20))));
j10eval[0]=x5444;
j10eval[1]=IKsign(x5444);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5446=(cj7*cj8);
IkReal x5447=(sj7*sj8);
IkReal x5448=(gconst118*r21);
IkReal x5449=(gconst119*r20);
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5448*x5448)))+(((-1.0)*(x5449*x5449)))+(((-1.0)*(r22*r22)))+(((2.0)*x5448*x5449)))),-1);
if(!x5450.valid){
continue;
}
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal((((r22*x5447))+(((-1.0)*r22*x5446)))),IkReal(((((-1.0)*x5447*x5449))+((x5446*x5449))+(((-1.0)*x5446*x5448))+((x5447*x5448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5450.value)))+(x5451.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5452=IKsin(j10);
IkReal x5453=IKcos(j10);
IkReal x5454=((1.0)*gconst119);
IkReal x5455=(gconst118*r01);
IkReal x5456=((1.0)*cj8);
IkReal x5457=((1.0)*cj7*sj8);
IkReal x5458=((1.0)*x5453);
IkReal x5459=(gconst118*x5453);
IkReal x5460=(gconst118*x5452);
evalcond[0]=(((r21*x5460))+(((-1.0)*r20*x5452*x5454))+(((-1.0)*r22*x5458)));
evalcond[1]=((((-1.0)*r12*x5458))+cj6+((r11*x5460))+(((-1.0)*r10*x5452*x5454)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x5452*x5454))+(((-1.0)*r02*x5458))+((x5452*x5455)));
evalcond[3]=(((r21*x5459))+((r22*x5452))+(((-1.0)*cj7*x5456))+((sj7*sj8))+(((-1.0)*r20*x5453*x5454)));
evalcond[4]=((((-1.0)*r00*x5453*x5454))+(((-1.0)*cj6*x5457))+((r02*x5452))+(((-1.0)*cj6*sj7*x5456))+((x5453*x5455)));
evalcond[5]=(((r12*x5452))+(((-1.0)*sj6*x5457))+(((-1.0)*r10*x5453*x5454))+(((-1.0)*sj6*sj7*x5456))+((r11*x5459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5461=((1.0)*gconst119);
CheckValue<IkReal> x5462 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5461))+((gconst118*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5462.valid){
continue;
}
CheckValue<IkReal> x5463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5461)))),-1);
if(!x5463.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5462.value)+(((1.5707963267949)*(x5463.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5464=IKsin(j10);
IkReal x5465=IKcos(j10);
IkReal x5466=((1.0)*gconst119);
IkReal x5467=(gconst118*r01);
IkReal x5468=((1.0)*cj8);
IkReal x5469=((1.0)*cj7*sj8);
IkReal x5470=((1.0)*x5465);
IkReal x5471=(gconst118*x5465);
IkReal x5472=(gconst118*x5464);
evalcond[0]=((((-1.0)*r20*x5464*x5466))+(((-1.0)*r22*x5470))+((r21*x5472)));
evalcond[1]=(cj6+(((-1.0)*r12*x5470))+(((-1.0)*r10*x5464*x5466))+((r11*x5472)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x5464*x5466))+(((-1.0)*r02*x5470))+((x5464*x5467)));
evalcond[3]=(((r22*x5464))+(((-1.0)*r20*x5465*x5466))+(((-1.0)*cj7*x5468))+((sj7*sj8))+((r21*x5471)));
evalcond[4]=((((-1.0)*cj6*x5469))+((r02*x5464))+(((-1.0)*cj6*sj7*x5468))+((x5465*x5467))+(((-1.0)*r00*x5465*x5466)));
evalcond[5]=((((-1.0)*sj6*sj7*x5468))+(((-1.0)*sj6*x5469))+((r12*x5464))+(((-1.0)*r10*x5465*x5466))+((r11*x5471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5473=((1.0)*gconst119);
CheckValue<IkReal> x5474 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x5473))+((cj6*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5474.valid){
continue;
}
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5473)))),-1);
if(!x5475.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5474.value)+(((1.5707963267949)*(x5475.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5476=IKsin(j10);
IkReal x5477=IKcos(j10);
IkReal x5478=((1.0)*gconst119);
IkReal x5479=(gconst118*r01);
IkReal x5480=((1.0)*cj8);
IkReal x5481=((1.0)*cj7*sj8);
IkReal x5482=((1.0)*x5477);
IkReal x5483=(gconst118*x5477);
IkReal x5484=(gconst118*x5476);
evalcond[0]=((((-1.0)*r20*x5476*x5478))+(((-1.0)*r22*x5482))+((r21*x5484)));
evalcond[1]=((((-1.0)*r12*x5482))+cj6+((r11*x5484))+(((-1.0)*r10*x5476*x5478)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x5476*x5478))+(((-1.0)*r02*x5482))+((x5476*x5479)));
evalcond[3]=((((-1.0)*cj7*x5480))+(((-1.0)*r20*x5477*x5478))+((r21*x5483))+((r22*x5476))+((sj7*sj8)));
evalcond[4]=(((x5477*x5479))+(((-1.0)*cj6*sj7*x5480))+(((-1.0)*cj6*x5481))+(((-1.0)*r00*x5477*x5478))+((r02*x5476)));
evalcond[5]=(((r11*x5483))+(((-1.0)*sj6*sj7*x5480))+(((-1.0)*r10*x5477*x5478))+(((-1.0)*sj6*x5481))+((r12*x5476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5485=((-1.0)*r10);
IkReal x5487 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5487)==0){
continue;
}
IkReal x5486=pow(x5487,-0.5);
CheckValue<IkReal> x5488 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5485),IKFAST_ATAN2_MAGTHRESH);
if(!x5488.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5488.value));
IkReal gconst121=(r11*x5486);
IkReal gconst122=(x5485*x5486);
CheckValue<IkReal> x5489 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5489.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x5489.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x5490=((-1.0)*r10);
IkReal x5491=x5486;
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5490),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
IkReal x5492=((-1.0)*(x5493.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst121;
cj11=gconst122;
j11=x5492;
IkReal gconst120=x5492;
IkReal gconst121=(r11*x5491);
IkReal gconst122=(x5490*x5491);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5494=((1.0)*gconst121);
CheckValue<IkReal> x5495 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst122*r00))+(((-1.0)*r11*sj6*x5494))+(((-1.0)*cj6*r01*x5494))+((gconst122*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5495.valid){
continue;
}
CheckValue<IkReal> x5496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5494))+(((-1.0)*gconst122*r21)))),-1);
if(!x5496.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5495.value)+(((1.5707963267949)*(x5496.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5497=IKsin(j10);
IkReal x5498=IKcos(j10);
IkReal x5499=(gconst122*r00);
IkReal x5500=((1.0)*cj8);
IkReal x5501=(gconst122*r10);
IkReal x5502=(gconst122*r20);
IkReal x5503=(gconst121*x5497);
IkReal x5504=((1.0)*cj7*sj8);
IkReal x5505=(gconst121*x5498);
IkReal x5506=((1.0)*x5498);
IkReal x5507=((1.0)*x5497);
evalcond[0]=((((-1.0)*x5502*x5507))+(((-1.0)*r22*x5506))+((r21*x5503)));
evalcond[1]=(cj6+(((-1.0)*x5501*x5507))+(((-1.0)*r12*x5506))+((r11*x5503)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5506))+((r01*x5503))+(((-1.0)*x5499*x5507)));
evalcond[3]=((((-1.0)*x5502*x5506))+((r21*x5505))+(((-1.0)*cj7*x5500))+((sj7*sj8))+((r22*x5497)));
evalcond[4]=((((-1.0)*cj6*x5504))+(((-1.0)*cj6*sj7*x5500))+((r01*x5505))+((r02*x5497))+(((-1.0)*x5499*x5506)));
evalcond[5]=((((-1.0)*sj6*sj7*x5500))+(((-1.0)*x5501*x5506))+((r12*x5497))+((r11*x5505))+(((-1.0)*sj6*x5504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5508=((1.0)*gconst122);
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5508)))),-1);
if(!x5509.valid){
continue;
}
CheckValue<IkReal> x5510 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x5508))+((cj6*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5510.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5509.value)))+(x5510.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5511=IKsin(j10);
IkReal x5512=IKcos(j10);
IkReal x5513=(gconst122*r00);
IkReal x5514=((1.0)*cj8);
IkReal x5515=(gconst122*r10);
IkReal x5516=(gconst122*r20);
IkReal x5517=(gconst121*x5511);
IkReal x5518=((1.0)*cj7*sj8);
IkReal x5519=(gconst121*x5512);
IkReal x5520=((1.0)*x5512);
IkReal x5521=((1.0)*x5511);
evalcond[0]=((((-1.0)*x5516*x5521))+(((-1.0)*r22*x5520))+((r21*x5517)));
evalcond[1]=(cj6+(((-1.0)*x5515*x5521))+((r11*x5517))+(((-1.0)*r12*x5520)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5520))+(((-1.0)*x5513*x5521))+((r01*x5517)));
evalcond[3]=((((-1.0)*x5516*x5520))+((r21*x5519))+(((-1.0)*cj7*x5514))+((r22*x5511))+((sj7*sj8)));
evalcond[4]=(((r02*x5511))+(((-1.0)*cj6*x5518))+(((-1.0)*x5513*x5520))+((r01*x5519))+(((-1.0)*cj6*sj7*x5514)));
evalcond[5]=((((-1.0)*sj6*sj7*x5514))+(((-1.0)*x5515*x5520))+((r12*x5511))+((r11*x5519))+(((-1.0)*sj6*x5518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5522=((-1.0)*r11);
IkReal x5524 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5524)==0){
continue;
}
IkReal x5523=pow(x5524,-0.5);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(x5522),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5525.value))));
IkReal gconst124=(x5522*x5523);
IkReal gconst125=((1.0)*r10*x5523);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x5526.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x5527=((-1.0)*r11);
CheckValue<IkReal> x5530 = IKatan2WithCheck(IkReal(x5527),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5530.valid){
continue;
}
IkReal x5528=((1.0)*(x5530.value));
IkReal x5529=x5523;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x5528)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5528)));
IkReal gconst124=(x5527*x5529);
IkReal gconst125=((1.0)*r10*x5529);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x5531=((-1.0)*r11);
CheckValue<IkReal> x5534 = IKatan2WithCheck(IkReal(x5531),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5534.valid){
continue;
}
IkReal x5532=((1.0)*(x5534.value));
IkReal x5533=x5523;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x5532)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5532)));
IkReal gconst124=(x5531*x5533);
IkReal gconst125=((1.0)*r10*x5533);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=sj6;
j10eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5535=((-1.0)*r11);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal(x5535),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
IkReal x5536=((1.0)*(x5538.value));
IkReal x5537=x5523;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst124;
cj11=gconst125;
j11=((3.14159265)+(((-1.0)*x5536)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5536)));
IkReal gconst124=(x5535*x5537);
IkReal gconst125=((1.0)*r10*x5537);
IkReal x5539=r12*r12;
IkReal x5540=(cj6*r02);
IkReal x5541=x5523;
IkReal x5542=(sj6*x5541);
j10eval[0]=((IKabs((((x5539*x5542))+((r12*x5540*x5541))+(((-1.0)*x5542)))))+(IKabs(((((-1.0)*r12*sj6))+(((-1.0)*x5540))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5543=((1.0)*gconst124);
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x5543)))),-1);
if(!x5544.valid){
continue;
}
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x5543))+((gconst125*r10*sj6))+(((-1.0)*cj6*r01*x5543))+((cj6*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5544.value)))+(x5545.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5546=IKsin(j10);
IkReal x5547=IKcos(j10);
IkReal x5548=(gconst124*r01);
IkReal x5549=(gconst125*r20);
IkReal x5550=(gconst125*r10);
IkReal x5551=((1.0)*cj8);
IkReal x5552=(gconst125*r00);
IkReal x5553=((1.0)*cj7*sj8);
IkReal x5554=((1.0)*x5547);
IkReal x5555=((1.0)*x5546);
IkReal x5556=(gconst124*x5547);
IkReal x5557=(gconst124*x5546);
evalcond[0]=(((r21*x5557))+(((-1.0)*x5549*x5555))+(((-1.0)*r22*x5554)));
evalcond[1]=(cj6+((r11*x5557))+(((-1.0)*x5550*x5555))+(((-1.0)*r12*x5554)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5552*x5555))+((x5546*x5548))+(((-1.0)*r02*x5554)));
evalcond[3]=(((r21*x5556))+(((-1.0)*x5549*x5554))+(((-1.0)*cj7*x5551))+((sj7*sj8))+((r22*x5546)));
evalcond[4]=((((-1.0)*x5552*x5554))+(((-1.0)*cj6*x5553))+((r02*x5546))+((x5547*x5548))+(((-1.0)*cj6*sj7*x5551)));
evalcond[5]=(((r12*x5546))+((r11*x5556))+(((-1.0)*x5550*x5554))+(((-1.0)*sj6*x5553))+(((-1.0)*sj6*sj7*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5558=((1.0)*gconst125);
CheckValue<IkReal> x5559 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst124*r21*sj6))+(((-1.0)*r20*sj6*x5558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5559.valid){
continue;
}
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r10))+(((-1.0)*r11*x5558)))),-1);
if(!x5560.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5559.value)+(((1.5707963267949)*(x5560.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5561=IKsin(j10);
IkReal x5562=IKcos(j10);
IkReal x5563=(gconst124*r01);
IkReal x5564=(gconst125*r20);
IkReal x5565=(gconst125*r10);
IkReal x5566=((1.0)*cj8);
IkReal x5567=(gconst125*r00);
IkReal x5568=((1.0)*cj7*sj8);
IkReal x5569=((1.0)*x5562);
IkReal x5570=((1.0)*x5561);
IkReal x5571=(gconst124*x5562);
IkReal x5572=(gconst124*x5561);
evalcond[0]=((((-1.0)*x5564*x5570))+(((-1.0)*r22*x5569))+((r21*x5572)));
evalcond[1]=((((-1.0)*r12*x5569))+cj6+((r11*x5572))+(((-1.0)*x5565*x5570)));
evalcond[2]=((((-1.0)*sj6))+((x5561*x5563))+(((-1.0)*r02*x5569))+(((-1.0)*x5567*x5570)));
evalcond[3]=((((-1.0)*x5564*x5569))+(((-1.0)*cj7*x5566))+((r22*x5561))+((r21*x5571))+((sj7*sj8)));
evalcond[4]=(((r02*x5561))+((x5562*x5563))+(((-1.0)*cj6*sj7*x5566))+(((-1.0)*cj6*x5568))+(((-1.0)*x5567*x5569)));
evalcond[5]=((((-1.0)*sj6*sj7*x5566))+((r11*x5571))+(((-1.0)*sj6*x5568))+((r12*x5561))+(((-1.0)*x5565*x5569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5573=((1.0)*gconst125);
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst124*r21))+(((-1.0)*cj6*r20*x5573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
CheckValue<IkReal> x5575=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5573)))),-1);
if(!x5575.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5574.value)+(((1.5707963267949)*(x5575.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5576=IKsin(j10);
IkReal x5577=IKcos(j10);
IkReal x5578=(gconst124*r01);
IkReal x5579=(gconst125*r20);
IkReal x5580=(gconst125*r10);
IkReal x5581=((1.0)*cj8);
IkReal x5582=(gconst125*r00);
IkReal x5583=((1.0)*cj7*sj8);
IkReal x5584=((1.0)*x5577);
IkReal x5585=((1.0)*x5576);
IkReal x5586=(gconst124*x5577);
IkReal x5587=(gconst124*x5576);
evalcond[0]=(((r21*x5587))+(((-1.0)*x5579*x5585))+(((-1.0)*r22*x5584)));
evalcond[1]=((((-1.0)*r12*x5584))+cj6+((r11*x5587))+(((-1.0)*x5580*x5585)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5584))+(((-1.0)*x5582*x5585))+((x5576*x5578)));
evalcond[3]=(((r21*x5586))+(((-1.0)*cj7*x5581))+(((-1.0)*x5579*x5584))+((r22*x5576))+((sj7*sj8)));
evalcond[4]=(((r02*x5576))+((x5577*x5578))+(((-1.0)*x5582*x5584))+(((-1.0)*cj6*sj7*x5581))+(((-1.0)*cj6*x5583)));
evalcond[5]=((((-1.0)*sj6*x5583))+((r11*x5586))+((r12*x5576))+(((-1.0)*sj6*sj7*x5581))+(((-1.0)*x5580*x5584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x5588=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x5588;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x5588);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x5589=((1.0)*cj11);
IkReal x5590=((((-1.0)*r00*sj11))+(((-1.0)*r01*x5589)));
j10eval[0]=x5590;
j10eval[1]=((IKabs(((((-1.0)*r20*x5589))+((r21*sj11)))))+(IKabs(r22)));
j10eval[2]=IKsign(x5590);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x5591=(cj7*cj8);
IkReal x5592=(sj7*sj8);
IkReal x5593=(r11*sj11);
IkReal x5594=(cj11*r10);
IkReal x5595=((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)));
j10eval[0]=x5595;
j10eval[1]=((IKabs(((((-1.0)*r12*x5592))+((r12*x5591)))))+(IKabs((((x5592*x5593))+(((-1.0)*x5592*x5594))+(((-1.0)*x5591*x5593))+((x5591*x5594))))));
j10eval[2]=IKsign(x5595);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5596=(cj7*cj8);
IkReal x5597=(sj7*sj8);
IkReal x5598=(r11*sj11);
IkReal x5599=(cj11*r10);
CheckValue<IkReal> x5600=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)))),-1);
if(!x5600.valid){
continue;
}
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal(((((-1.0)*x5597*x5599))+(((-1.0)*x5596*x5598))+((x5596*x5599))+((x5597*x5598)))),IkReal(((((-1.0)*r12*x5597))+((r12*x5596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5600.value)))+(x5601.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5602=IKcos(j10);
IkReal x5603=IKsin(j10);
IkReal x5604=(r11*sj11);
IkReal x5605=((1.0)*cj7);
IkReal x5606=(cj11*r10);
IkReal x5607=(cj11*r00);
IkReal x5608=(cj11*r20);
IkReal x5609=((1.0)*x5602);
IkReal x5610=(sj11*x5602);
IkReal x5611=((1.0)*x5603);
IkReal x5612=(sj11*x5603);
evalcond[0]=(((x5602*x5604))+((r12*x5603))+(((-1.0)*x5606*x5609)));
evalcond[1]=((((-1.0)*r22*x5609))+(((-1.0)*x5608*x5611))+((r21*x5612)));
evalcond[2]=(((r01*x5612))+(((-1.0)*r02*x5609))+(((-1.0)*x5607*x5611)));
evalcond[3]=((1.0)+((x5603*x5604))+(((-1.0)*r12*x5609))+(((-1.0)*x5606*x5611)));
evalcond[4]=((((-1.0)*cj8*x5605))+(((-1.0)*x5608*x5609))+((r21*x5610))+((sj7*sj8))+((r22*x5603)));
evalcond[5]=((((-1.0)*x5607*x5609))+(((-1.0)*cj8*sj7))+((r02*x5603))+((r01*x5610))+(((-1.0)*sj8*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5613=((1.0)*cj11);
CheckValue<IkReal> x5614 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x5613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5614.valid){
continue;
}
CheckValue<IkReal> x5615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5613))+(((-1.0)*r00*sj11)))),-1);
if(!x5615.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5614.value)+(((1.5707963267949)*(x5615.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5616=IKcos(j10);
IkReal x5617=IKsin(j10);
IkReal x5618=(r11*sj11);
IkReal x5619=((1.0)*cj7);
IkReal x5620=(cj11*r10);
IkReal x5621=(cj11*r00);
IkReal x5622=(cj11*r20);
IkReal x5623=((1.0)*x5616);
IkReal x5624=(sj11*x5616);
IkReal x5625=((1.0)*x5617);
IkReal x5626=(sj11*x5617);
evalcond[0]=(((r12*x5617))+(((-1.0)*x5620*x5623))+((x5616*x5618)));
evalcond[1]=((((-1.0)*r22*x5623))+((r21*x5626))+(((-1.0)*x5622*x5625)));
evalcond[2]=(((r01*x5626))+(((-1.0)*x5621*x5625))+(((-1.0)*r02*x5623)));
evalcond[3]=((1.0)+((x5617*x5618))+(((-1.0)*r12*x5623))+(((-1.0)*x5620*x5625)));
evalcond[4]=((((-1.0)*cj8*x5619))+((r21*x5624))+(((-1.0)*x5622*x5623))+((sj7*sj8))+((r22*x5617)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r02*x5617))+((r01*x5624))+(((-1.0)*x5621*x5623))+(((-1.0)*sj8*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5627=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x5627.valid){
continue;
}
CheckValue<IkReal> x5628 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5628.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5627.value)))+(x5628.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5629=IKcos(j10);
IkReal x5630=IKsin(j10);
IkReal x5631=(r11*sj11);
IkReal x5632=((1.0)*cj7);
IkReal x5633=(cj11*r10);
IkReal x5634=(cj11*r00);
IkReal x5635=(cj11*r20);
IkReal x5636=((1.0)*x5629);
IkReal x5637=(sj11*x5629);
IkReal x5638=((1.0)*x5630);
IkReal x5639=(sj11*x5630);
evalcond[0]=(((r12*x5630))+(((-1.0)*x5633*x5636))+((x5629*x5631)));
evalcond[1]=((((-1.0)*x5635*x5638))+(((-1.0)*r22*x5636))+((r21*x5639)));
evalcond[2]=(((r01*x5639))+(((-1.0)*r02*x5636))+(((-1.0)*x5634*x5638)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5636))+(((-1.0)*x5633*x5638))+((x5630*x5631)));
evalcond[4]=((((-1.0)*x5635*x5636))+(((-1.0)*cj8*x5632))+((r22*x5630))+((sj7*sj8))+((r21*x5637)));
evalcond[5]=(((r01*x5637))+(((-1.0)*sj8*x5632))+(((-1.0)*cj8*sj7))+((r02*x5630))+(((-1.0)*x5634*x5636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x5640=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x5640;
j10eval[1]=IKsign(x5640);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x5641=((1.0)*cj11);
IkReal x5642=((((-1.0)*r21*x5641))+(((-1.0)*r20*sj11)));
j10eval[0]=x5642;
j10eval[1]=((IKabs((((r01*sj11))+(((-1.0)*r00*x5641)))))+(IKabs(r02)));
j10eval[2]=IKsign(x5642);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x5643=cj11*cj11;
IkReal x5644=r11*r11;
IkReal x5645=(cj11*r10);
IkReal x5646=(r11*sj11);
IkReal x5647=(x5644+(((-1.0)*x5643*x5644))+(r12*r12)+(((-2.0)*x5645*x5646))+((x5643*(r10*r10))));
j10eval[0]=x5647;
j10eval[1]=((IKabs(r12))+(IKabs((x5646+(((-1.0)*x5645))))));
j10eval[2]=IKsign(x5647);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5648=cj11*cj11;
IkReal x5649=r11*r11;
IkReal x5650=(r11*sj11);
IkReal x5651=(cj11*r10);
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal((x5650+(((-1.0)*x5651)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign((x5649+(r12*r12)+(((-2.0)*x5650*x5651))+(((-1.0)*x5648*x5649))+((x5648*(r10*r10))))),-1);
if(!x5653.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5652.value)+(((1.5707963267949)*(x5653.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5654=IKcos(j10);
IkReal x5655=IKsin(j10);
IkReal x5656=(r11*sj11);
IkReal x5657=(cj11*r10);
IkReal x5658=(cj11*r00);
IkReal x5659=(cj11*r20);
IkReal x5660=((1.0)*x5654);
IkReal x5661=(sj11*x5654);
IkReal x5662=((1.0)*x5655);
IkReal x5663=(sj11*x5655);
evalcond[0]=(((x5654*x5656))+(((-1.0)*x5657*x5660))+((r12*x5655)));
evalcond[1]=((((-1.0)*r22*x5660))+(((-1.0)*x5659*x5662))+((r21*x5663)));
evalcond[2]=(((r01*x5663))+(((-1.0)*r02*x5660))+(((-1.0)*x5658*x5662)));
evalcond[3]=((-1.0)+(((-1.0)*x5657*x5662))+((x5655*x5656))+(((-1.0)*r12*x5660)));
evalcond[4]=(((r01*x5661))+((cj8*sj7))+((cj7*sj8))+((r02*x5655))+(((-1.0)*x5658*x5660)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x5659*x5660))+((r22*x5655))+((sj7*sj8))+((r21*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5664=((1.0)*cj11);
CheckValue<IkReal> x5665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5664))+(((-1.0)*r20*sj11)))),-1);
if(!x5665.valid){
continue;
}
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5664))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5665.value)))+(x5666.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5667=IKcos(j10);
IkReal x5668=IKsin(j10);
IkReal x5669=(r11*sj11);
IkReal x5670=(cj11*r10);
IkReal x5671=(cj11*r00);
IkReal x5672=(cj11*r20);
IkReal x5673=((1.0)*x5667);
IkReal x5674=(sj11*x5667);
IkReal x5675=((1.0)*x5668);
IkReal x5676=(sj11*x5668);
evalcond[0]=((((-1.0)*x5670*x5673))+((x5667*x5669))+((r12*x5668)));
evalcond[1]=((((-1.0)*x5672*x5675))+(((-1.0)*r22*x5673))+((r21*x5676)));
evalcond[2]=((((-1.0)*x5671*x5675))+((r01*x5676))+(((-1.0)*r02*x5673)));
evalcond[3]=((-1.0)+(((-1.0)*x5670*x5675))+(((-1.0)*r12*x5673))+((x5668*x5669)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x5671*x5673))+((r02*x5668))+((r01*x5674))+((cj7*sj8)));
evalcond[5]=((((-1.0)*x5672*x5673))+((r22*x5668))+(((-1.0)*cj7*cj8))+((r21*x5674))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
CheckValue<IkReal> x5678=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x5678.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5677.value)+(((1.5707963267949)*(x5678.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5679=IKcos(j10);
IkReal x5680=IKsin(j10);
IkReal x5681=(r11*sj11);
IkReal x5682=(cj11*r10);
IkReal x5683=(cj11*r00);
IkReal x5684=(cj11*r20);
IkReal x5685=((1.0)*x5679);
IkReal x5686=(sj11*x5679);
IkReal x5687=((1.0)*x5680);
IkReal x5688=(sj11*x5680);
evalcond[0]=(((r12*x5680))+((x5679*x5681))+(((-1.0)*x5682*x5685)));
evalcond[1]=((((-1.0)*r22*x5685))+(((-1.0)*x5684*x5687))+((r21*x5688)));
evalcond[2]=((((-1.0)*r02*x5685))+(((-1.0)*x5683*x5687))+((r01*x5688)));
evalcond[3]=((-1.0)+((x5680*x5681))+(((-1.0)*x5682*x5687))+(((-1.0)*r12*x5685)));
evalcond[4]=(((cj8*sj7))+((r02*x5680))+(((-1.0)*x5683*x5685))+((cj7*sj8))+((r01*x5686)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r22*x5680))+(((-1.0)*x5684*x5685))+((r21*x5686))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5689=((-1.0)*r00);
IkReal x5691 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5691)==0){
continue;
}
IkReal x5690=pow(x5691,-0.5);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5689),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5692.value));
IkReal gconst127=(r01*x5690);
IkReal gconst128=(x5689*x5690);
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x5693.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x5694=((-1.0)*r00);
IkReal x5695=x5690;
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5694),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
IkReal x5696=((-1.0)*(x5697.value));
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst127;
cj11=gconst128;
j11=x5696;
IkReal gconst126=x5696;
IkReal gconst127=(r01*x5695);
IkReal gconst128=(x5694*x5695);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5698=((1.0)*gconst127);
CheckValue<IkReal> x5699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5698)))),-1);
if(!x5699.valid){
continue;
}
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x5698))+((gconst128*r10*sj6))+((cj6*gconst128*r00))+(((-1.0)*r11*sj6*x5698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5699.value)))+(x5700.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5701=IKsin(j10);
IkReal x5702=IKcos(j10);
IkReal x5703=((1.0)*cj8);
IkReal x5704=(gconst128*r00);
IkReal x5705=(gconst128*r20);
IkReal x5706=(gconst127*x5702);
IkReal x5707=(gconst127*x5701);
IkReal x5708=((1.0)*cj7*sj8);
IkReal x5709=((1.0)*gconst128*r10);
IkReal x5710=((1.0)*x5702);
IkReal x5711=((1.0)*x5701);
evalcond[0]=((((-1.0)*r22*x5710))+(((-1.0)*x5705*x5711))+((r21*x5707)));
evalcond[1]=(cj6+(((-1.0)*x5701*x5709))+((r11*x5707))+(((-1.0)*r12*x5710)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5707))+(((-1.0)*x5704*x5711))+(((-1.0)*r02*x5710)));
evalcond[3]=(((r22*x5701))+(((-1.0)*x5705*x5710))+((r21*x5706))+((sj7*sj8))+(((-1.0)*cj7*x5703)));
evalcond[4]=(((r02*x5701))+(((-1.0)*cj6*sj7*x5703))+(((-1.0)*cj6*x5708))+((r01*x5706))+(((-1.0)*x5704*x5710)));
evalcond[5]=((((-1.0)*x5702*x5709))+(((-1.0)*sj6*sj7*x5703))+(((-1.0)*sj6*x5708))+((r12*x5701))+((r11*x5706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5712=((1.0)*gconst128);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5712))+((gconst127*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
CheckValue<IkReal> x5714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5712))+(((-1.0)*gconst127*r10)))),-1);
if(!x5714.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5713.value)+(((1.5707963267949)*(x5714.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5715=IKsin(j10);
IkReal x5716=IKcos(j10);
IkReal x5717=((1.0)*cj8);
IkReal x5718=(gconst128*r00);
IkReal x5719=(gconst128*r20);
IkReal x5720=(gconst127*x5716);
IkReal x5721=(gconst127*x5715);
IkReal x5722=((1.0)*cj7*sj8);
IkReal x5723=((1.0)*gconst128*r10);
IkReal x5724=((1.0)*x5716);
IkReal x5725=((1.0)*x5715);
evalcond[0]=(((r21*x5721))+(((-1.0)*x5719*x5725))+(((-1.0)*r22*x5724)));
evalcond[1]=(((r11*x5721))+cj6+(((-1.0)*r12*x5724))+(((-1.0)*x5715*x5723)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5721))+(((-1.0)*r02*x5724))+(((-1.0)*x5718*x5725)));
evalcond[3]=(((r21*x5720))+((r22*x5715))+(((-1.0)*x5719*x5724))+((sj7*sj8))+(((-1.0)*cj7*x5717)));
evalcond[4]=((((-1.0)*cj6*x5722))+((r02*x5715))+(((-1.0)*cj6*sj7*x5717))+((r01*x5720))+(((-1.0)*x5718*x5724)));
evalcond[5]=(((r11*x5720))+(((-1.0)*sj6*sj7*x5717))+(((-1.0)*x5716*x5723))+((r12*x5715))+(((-1.0)*sj6*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5726=((-1.0)*r01);
IkReal x5728 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5728)==0){
continue;
}
IkReal x5727=pow(x5728,-0.5);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(x5726),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5729.value))));
IkReal gconst130=(x5726*x5727);
IkReal gconst131=((1.0)*r00*x5727);
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x5730.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x5731=((-1.0)*r01);
CheckValue<IkReal> x5734 = IKatan2WithCheck(IkReal(x5731),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5734.valid){
continue;
}
IkReal x5732=((1.0)*(x5734.value));
IkReal x5733=x5727;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5732)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5732)));
IkReal gconst130=(x5731*x5733);
IkReal gconst131=((1.0)*r00*x5733);
j10eval[0]=0;
j10eval[1]=cj6;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x5735=((-1.0)*r01);
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal(x5735),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
IkReal x5736=((1.0)*(x5738.value));
IkReal x5737=x5727;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5736)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5736)));
IkReal gconst130=(x5735*x5737);
IkReal gconst131=((1.0)*r00*x5737);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5739=((-1.0)*r01);
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(x5739),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
IkReal x5740=((1.0)*(x5742.value));
IkReal x5741=x5727;
sj9=0;
cj9=1.0;
j9=0;
sj11=gconst130;
cj11=gconst131;
j11=((3.14159265)+(((-1.0)*x5740)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5740)));
IkReal gconst130=(x5739*x5741);
IkReal gconst131=((1.0)*r00*x5741);
IkReal x5743=r02*r02;
IkReal x5744=(r12*sj6);
IkReal x5745=x5727;
IkReal x5746=(cj6*x5745);
j10eval[0]=((IKabs((((r02*x5744*x5745))+((x5743*x5746))+(((-1.0)*x5746)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x5744))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5747=((1.0)*gconst130);
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst131*r00))+(((-1.0)*cj6*r01*x5747))+(((-1.0)*r11*sj6*x5747))+((gconst131*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5747))+(((-1.0)*gconst131*r21)))),-1);
if(!x5749.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5748.value)+(((1.5707963267949)*(x5749.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5750=IKsin(j10);
IkReal x5751=IKcos(j10);
IkReal x5752=((1.0)*gconst131);
IkReal x5753=((1.0)*cj8);
IkReal x5754=(gconst130*x5751);
IkReal x5755=(gconst130*x5750);
IkReal x5756=((1.0)*cj7*sj8);
IkReal x5757=((1.0)*x5751);
evalcond[0]=(((r21*x5755))+(((-1.0)*r22*x5757))+(((-1.0)*r20*x5750*x5752)));
evalcond[1]=(cj6+(((-1.0)*r10*x5750*x5752))+(((-1.0)*r12*x5757))+((r11*x5755)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x5750*x5752))+((r01*x5755))+(((-1.0)*r02*x5757)));
evalcond[3]=(((r21*x5754))+(((-1.0)*r20*x5751*x5752))+(((-1.0)*cj7*x5753))+((sj7*sj8))+((r22*x5750)));
evalcond[4]=((((-1.0)*r00*x5751*x5752))+((r01*x5754))+((r02*x5750))+(((-1.0)*cj6*sj7*x5753))+(((-1.0)*cj6*x5756)));
evalcond[5]=((((-1.0)*sj6*sj7*x5753))+(((-1.0)*sj6*x5756))+(((-1.0)*r10*x5751*x5752))+((r11*x5754))+((r12*x5750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5758=((1.0)*gconst131);
CheckValue<IkReal> x5759 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst130*r21*sj6))+(((-1.0)*r20*sj6*x5758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5759.valid){
continue;
}
CheckValue<IkReal> x5760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5758))+(((-1.0)*gconst130*r10)))),-1);
if(!x5760.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5759.value)+(((1.5707963267949)*(x5760.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5761=IKsin(j10);
IkReal x5762=IKcos(j10);
IkReal x5763=((1.0)*gconst131);
IkReal x5764=((1.0)*cj8);
IkReal x5765=(gconst130*x5762);
IkReal x5766=(gconst130*x5761);
IkReal x5767=((1.0)*cj7*sj8);
IkReal x5768=((1.0)*x5762);
evalcond[0]=((((-1.0)*r20*x5761*x5763))+((r21*x5766))+(((-1.0)*r22*x5768)));
evalcond[1]=(cj6+(((-1.0)*r12*x5768))+(((-1.0)*r10*x5761*x5763))+((r11*x5766)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5766))+(((-1.0)*r00*x5761*x5763))+(((-1.0)*r02*x5768)));
evalcond[3]=((((-1.0)*r20*x5762*x5763))+((r22*x5761))+(((-1.0)*cj7*x5764))+((r21*x5765))+((sj7*sj8)));
evalcond[4]=(((r01*x5765))+(((-1.0)*cj6*x5767))+(((-1.0)*r00*x5762*x5763))+(((-1.0)*cj6*sj7*x5764))+((r02*x5761)));
evalcond[5]=((((-1.0)*r10*x5762*x5763))+((r11*x5765))+(((-1.0)*sj6*x5767))+((r12*x5761))+(((-1.0)*sj6*sj7*x5764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5769=((1.0)*gconst131);
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst130*r21))+(((-1.0)*cj6*r20*x5769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5769))+(((-1.0)*gconst130*r00)))),-1);
if(!x5771.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5770.value)+(((1.5707963267949)*(x5771.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5772=IKsin(j10);
IkReal x5773=IKcos(j10);
IkReal x5774=((1.0)*gconst131);
IkReal x5775=((1.0)*cj8);
IkReal x5776=(gconst130*x5773);
IkReal x5777=(gconst130*x5772);
IkReal x5778=((1.0)*cj7*sj8);
IkReal x5779=((1.0)*x5773);
evalcond[0]=(((r21*x5777))+(((-1.0)*r20*x5772*x5774))+(((-1.0)*r22*x5779)));
evalcond[1]=(cj6+(((-1.0)*r12*x5779))+(((-1.0)*r10*x5772*x5774))+((r11*x5777)));
evalcond[2]=((((-1.0)*sj6))+((r01*x5777))+(((-1.0)*r00*x5772*x5774))+(((-1.0)*r02*x5779)));
evalcond[3]=((((-1.0)*cj7*x5775))+((r22*x5772))+((r21*x5776))+(((-1.0)*r20*x5773*x5774))+((sj7*sj8)));
evalcond[4]=(((r01*x5776))+(((-1.0)*cj6*x5778))+((r02*x5772))+(((-1.0)*cj6*sj7*x5775))+(((-1.0)*r00*x5773*x5774)));
evalcond[5]=((((-1.0)*r10*x5773*x5774))+((r11*x5776))+((r12*x5772))+(((-1.0)*sj6*x5778))+(((-1.0)*sj6*sj7*x5775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5780=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x5780;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x5780);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5781=((1.0)*cj11);
IkReal x5782=((((-1.0)*r11*x5781))+(((-1.0)*r10*sj11)));
j10eval[0]=x5782;
j10eval[1]=IKsign(x5782);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5781))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x5783=cj11*cj11;
IkReal x5784=r01*r01;
IkReal x5785=(cj11*r00);
IkReal x5786=(r01*sj11);
IkReal x5787=((((-2.0)*x5785*x5786))+(((-1.0)*x5783*x5784))+((x5783*(r00*r00)))+(r02*r02)+x5784);
j10eval[0]=x5787;
j10eval[1]=IKsign(x5787);
j10eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5785))+x5786))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5788=cj11*cj11;
IkReal x5789=r01*r01;
IkReal x5790=(cj11*r00);
IkReal x5791=(r01*sj11);
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*x5790))+x5791)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5788*x5789))+((x5788*(r00*r00)))+(((-2.0)*x5790*x5791))+(r02*r02)+x5789)),-1);
if(!x5793.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5792.value)+(((1.5707963267949)*(x5793.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5794=IKcos(j10);
IkReal x5795=IKsin(j10);
IkReal x5796=(r11*sj11);
IkReal x5797=((1.0)*cj7);
IkReal x5798=(cj11*r00);
IkReal x5799=(cj11*r10);
IkReal x5800=(cj11*r20);
IkReal x5801=((1.0)*x5794);
IkReal x5802=(sj11*x5794);
IkReal x5803=((1.0)*x5795);
IkReal x5804=(sj11*x5795);
evalcond[0]=(((r01*x5802))+(((-1.0)*x5798*x5801))+((r02*x5795)));
evalcond[1]=((((-1.0)*r22*x5801))+(((-1.0)*x5800*x5803))+((r21*x5804)));
evalcond[2]=(((x5795*x5796))+(((-1.0)*r12*x5801))+(((-1.0)*x5799*x5803)));
evalcond[3]=((-1.0)+((r01*x5804))+(((-1.0)*x5798*x5803))+(((-1.0)*r02*x5801)));
evalcond[4]=((((-1.0)*x5800*x5801))+((r21*x5802))+(((-1.0)*cj8*x5797))+((r22*x5795))+((sj7*sj8)));
evalcond[5]=((((-1.0)*sj8*x5797))+(((-1.0)*cj8*sj7))+((r12*x5795))+((x5794*x5796))+(((-1.0)*x5799*x5801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5805=((1.0)*cj11);
CheckValue<IkReal> x5806 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5805))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5806.valid){
continue;
}
CheckValue<IkReal> x5807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5805))+(((-1.0)*r10*sj11)))),-1);
if(!x5807.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5806.value)+(((1.5707963267949)*(x5807.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5808=IKcos(j10);
IkReal x5809=IKsin(j10);
IkReal x5810=(r11*sj11);
IkReal x5811=((1.0)*cj7);
IkReal x5812=(cj11*r00);
IkReal x5813=(cj11*r10);
IkReal x5814=(cj11*r20);
IkReal x5815=((1.0)*x5808);
IkReal x5816=(sj11*x5808);
IkReal x5817=((1.0)*x5809);
IkReal x5818=(sj11*x5809);
evalcond[0]=(((r02*x5809))+(((-1.0)*x5812*x5815))+((r01*x5816)));
evalcond[1]=(((r21*x5818))+(((-1.0)*x5814*x5817))+(((-1.0)*r22*x5815)));
evalcond[2]=((((-1.0)*r12*x5815))+(((-1.0)*x5813*x5817))+((x5809*x5810)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5815))+(((-1.0)*x5812*x5817))+((r01*x5818)));
evalcond[4]=(((r21*x5816))+(((-1.0)*x5814*x5815))+((r22*x5809))+((sj7*sj8))+(((-1.0)*cj8*x5811)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*x5813*x5815))+((x5808*x5810))+((r12*x5809))+(((-1.0)*sj8*x5811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x5819.valid){
continue;
}
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5819.value)))+(x5820.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5821=IKcos(j10);
IkReal x5822=IKsin(j10);
IkReal x5823=(r11*sj11);
IkReal x5824=((1.0)*cj7);
IkReal x5825=(cj11*r00);
IkReal x5826=(cj11*r10);
IkReal x5827=(cj11*r20);
IkReal x5828=((1.0)*x5821);
IkReal x5829=(sj11*x5821);
IkReal x5830=((1.0)*x5822);
IkReal x5831=(sj11*x5822);
evalcond[0]=(((r02*x5822))+((r01*x5829))+(((-1.0)*x5825*x5828)));
evalcond[1]=((((-1.0)*r22*x5828))+((r21*x5831))+(((-1.0)*x5827*x5830)));
evalcond[2]=(((x5822*x5823))+(((-1.0)*x5826*x5830))+(((-1.0)*r12*x5828)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5828))+((r01*x5831))+(((-1.0)*x5825*x5830)));
evalcond[4]=(((r21*x5829))+(((-1.0)*cj8*x5824))+(((-1.0)*x5827*x5828))+((r22*x5822))+((sj7*sj8)));
evalcond[5]=(((x5821*x5823))+(((-1.0)*cj8*sj7))+((r12*x5822))+(((-1.0)*sj8*x5824))+(((-1.0)*x5826*x5828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5832=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x5832;
j10eval[1]=IKsign(x5832);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5833=((1.0)*cj11);
IkReal x5834=((((-1.0)*r21*x5833))+(((-1.0)*r20*sj11)));
j10eval[0]=x5834;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x5833))))));
j10eval[2]=IKsign(x5834);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x5835=r01*r01;
IkReal x5836=cj11*cj11;
IkReal x5837=(cj11*r00);
IkReal x5838=(r01*sj11);
IkReal x5839=(((x5835*x5836))+(((-1.0)*(r02*r02)))+(((2.0)*x5837*x5838))+(((-1.0)*x5836*(r00*r00)))+(((-1.0)*x5835)));
j10eval[0]=x5839;
j10eval[1]=IKsign(x5839);
j10eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5837))+x5838))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5840=r01*r01;
IkReal x5841=cj11*cj11;
IkReal x5842=(cj11*r00);
IkReal x5843=(r01*sj11);
CheckValue<IkReal> x5844 = IKatan2WithCheck(IkReal(((((-1.0)*x5842))+x5843)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5841*(r00*r00)))+(((-1.0)*x5840))+((x5840*x5841))+(((2.0)*x5842*x5843))+(((-1.0)*(r02*r02))))),-1);
if(!x5845.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5844.value)+(((1.5707963267949)*(x5845.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5846=IKcos(j10);
IkReal x5847=IKsin(j10);
IkReal x5848=(r11*sj11);
IkReal x5849=(cj11*r00);
IkReal x5850=(cj11*r10);
IkReal x5851=(cj11*r20);
IkReal x5852=((1.0)*x5846);
IkReal x5853=(sj11*x5846);
IkReal x5854=((1.0)*x5847);
IkReal x5855=(sj11*x5847);
evalcond[0]=((((-1.0)*x5849*x5852))+((r01*x5853))+((r02*x5847)));
evalcond[1]=((((-1.0)*r22*x5852))+(((-1.0)*x5851*x5854))+((r21*x5855)));
evalcond[2]=((((-1.0)*r12*x5852))+(((-1.0)*x5850*x5854))+((x5847*x5848)));
evalcond[3]=((1.0)+(((-1.0)*x5849*x5854))+((r01*x5855))+(((-1.0)*r02*x5852)));
evalcond[4]=(((cj8*sj7))+((x5846*x5848))+((r12*x5847))+(((-1.0)*x5850*x5852))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x5851*x5852))+((r22*x5847))+((r21*x5853))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5856=((1.0)*cj11);
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x5856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5856))+(((-1.0)*r20*sj11)))),-1);
if(!x5858.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5857.value)+(((1.5707963267949)*(x5858.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5859=IKcos(j10);
IkReal x5860=IKsin(j10);
IkReal x5861=(r11*sj11);
IkReal x5862=(cj11*r00);
IkReal x5863=(cj11*r10);
IkReal x5864=(cj11*r20);
IkReal x5865=((1.0)*x5859);
IkReal x5866=(sj11*x5859);
IkReal x5867=((1.0)*x5860);
IkReal x5868=(sj11*x5860);
evalcond[0]=((((-1.0)*x5862*x5865))+((r02*x5860))+((r01*x5866)));
evalcond[1]=((((-1.0)*r22*x5865))+((r21*x5868))+(((-1.0)*x5864*x5867)));
evalcond[2]=(((x5860*x5861))+(((-1.0)*x5863*x5867))+(((-1.0)*r12*x5865)));
evalcond[3]=((1.0)+(((-1.0)*x5862*x5867))+(((-1.0)*r02*x5865))+((r01*x5868)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x5863*x5865))+((r12*x5860))+((x5859*x5861))+((cj7*sj8)));
evalcond[5]=(((r21*x5866))+(((-1.0)*cj7*cj8))+((r22*x5860))+(((-1.0)*x5864*x5865))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x5870.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j10);
IkReal x5872=IKsin(j10);
IkReal x5873=(r11*sj11);
IkReal x5874=(cj11*r00);
IkReal x5875=(cj11*r10);
IkReal x5876=(cj11*r20);
IkReal x5877=((1.0)*x5871);
IkReal x5878=(sj11*x5871);
IkReal x5879=((1.0)*x5872);
IkReal x5880=(sj11*x5872);
evalcond[0]=((((-1.0)*x5874*x5877))+((r02*x5872))+((r01*x5878)));
evalcond[1]=((((-1.0)*r22*x5877))+((r21*x5880))+(((-1.0)*x5876*x5879)));
evalcond[2]=((((-1.0)*x5875*x5879))+(((-1.0)*r12*x5877))+((x5872*x5873)));
evalcond[3]=((1.0)+((r01*x5880))+(((-1.0)*x5874*x5879))+(((-1.0)*r02*x5877)));
evalcond[4]=((((-1.0)*x5875*x5877))+((cj8*sj7))+((r12*x5872))+((x5871*x5873))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r22*x5872))+((sj7*sj8))+(((-1.0)*x5876*x5877))+((r21*x5878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x5881=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5881);
rxp1_1=(px*r21);
rxp1_2=(r11*x5881);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5882=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5882);
rxp1_1=(px*r21);
rxp1_2=(r11*x5882);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r20))+((r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x5883=((-1.0)*px);
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5883);
rxp1_1=(px*r21);
rxp1_2=(r11*x5883);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5886=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x5886.valid){
continue;
}
IkReal x5884=x5886.value;
IkReal x5885=(sj6*x5884);
cj10array[0]=(((cj8*sj7*x5885))+((cj7*sj8*x5885)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5887=IKsin(j10);
IkReal x5888=IKcos(j10);
IkReal x5889=(r21*sj11);
IkReal x5890=(cj11*r20);
IkReal x5891=((1.0)*x5888);
IkReal x5892=((1.0)*x5887);
evalcond[0]=(r02*x5887);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x5891)));
evalcond[2]=(((x5887*x5889))+(((-1.0)*x5890*x5892)));
evalcond[3]=(((r11*sj11*x5887))+(((-1.0)*cj11*r10*x5892)));
evalcond[4]=((((-1.0)*cj7*cj8))+(((-1.0)*x5890*x5891))+((x5888*x5889))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(((((-1.0)*cj11*r20))+((r21*sj11))),-1);
if(!x5894.valid){
continue;
}
IkReal x5893=x5894.value;
cj10array[0]=(((cj7*cj8*x5893))+(((-1.0)*sj7*sj8*x5893)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5895=IKsin(j10);
IkReal x5896=IKcos(j10);
IkReal x5897=(cj11*r10);
IkReal x5898=((1.0)*sj6);
IkReal x5899=((1.0)*x5896);
IkReal x5900=(sj11*x5895);
IkReal x5901=((1.0)*x5895);
evalcond[0]=(r02*x5895);
evalcond[1]=((((-1.0)*r02*x5899))+(((-1.0)*x5898)));
evalcond[2]=((((-1.0)*cj11*r20*x5901))+((r21*x5900)));
evalcond[3]=((((-1.0)*x5897*x5901))+((r11*x5900)));
evalcond[4]=((((-1.0)*x5897*x5899))+(((-1.0)*cj8*sj7*x5898))+((r11*sj11*x5896))+(((-1.0)*cj7*sj8*x5898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(r02,-1);
if(!x5902.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x5902.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x5903=IKsin(j10);
IkReal x5904=IKcos(j10);
IkReal x5905=(r21*sj11);
IkReal x5906=(r11*sj11);
IkReal x5907=((1.0)*cj8);
IkReal x5908=((1.0)*cj11*r20);
IkReal x5909=((1.0)*cj11*r10);
evalcond[0]=(r02*x5903);
evalcond[1]=(((x5903*x5905))+(((-1.0)*x5903*x5908)));
evalcond[2]=(((x5903*x5906))+(((-1.0)*x5903*x5909)));
evalcond[3]=((((-1.0)*x5904*x5908))+((x5904*x5905))+((sj7*sj8))+(((-1.0)*cj7*x5907)));
evalcond[4]=((((-1.0)*x5904*x5909))+(((-1.0)*sj6*sj7*x5907))+(((-1.0)*cj7*sj6*sj8))+((x5904*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5910=((1.0)*sj11);
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x5910))+((cj11*cj6*r00))+((cj11*r10*sj6))+(((-1.0)*r11*sj6*x5910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x5910)))),-1);
if(!x5912.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5913=IKsin(j10);
IkReal x5914=IKcos(j10);
IkReal x5915=(r11*sj11);
IkReal x5916=(cj11*r00);
IkReal x5917=(cj11*r10);
IkReal x5918=((1.0)*cj8);
IkReal x5919=(cj11*r20);
IkReal x5920=((1.0)*cj7*sj8);
IkReal x5921=((1.0)*x5914);
IkReal x5922=(sj11*x5914);
IkReal x5923=((1.0)*x5913);
IkReal x5924=(sj11*x5913);
evalcond[0]=((((-1.0)*r22*x5921))+((r21*x5924))+(((-1.0)*x5919*x5923)));
evalcond[1]=(cj6+(((-1.0)*x5917*x5923))+(((-1.0)*r12*x5921))+((x5913*x5915)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5916*x5923))+(((-1.0)*r02*x5921))+((r01*x5924)));
evalcond[3]=(((r22*x5913))+((r21*x5922))+(((-1.0)*x5919*x5921))+((sj7*sj8))+(((-1.0)*cj7*x5918)));
evalcond[4]=((((-1.0)*cj6*x5920))+(((-1.0)*cj6*sj7*x5918))+(((-1.0)*x5916*x5921))+((r02*x5913))+((r01*x5922)));
evalcond[5]=(((r12*x5913))+(((-1.0)*sj6*x5920))+(((-1.0)*sj6*sj7*x5918))+(((-1.0)*x5917*x5921))+((x5914*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5925=((1.0)*cj11);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x5925))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
CheckValue<IkReal> x5927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5925))+(((-1.0)*r10*sj11)))),-1);
if(!x5927.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5926.value)+(((1.5707963267949)*(x5927.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5928=IKsin(j10);
IkReal x5929=IKcos(j10);
IkReal x5930=(r11*sj11);
IkReal x5931=(cj11*r00);
IkReal x5932=(cj11*r10);
IkReal x5933=((1.0)*cj8);
IkReal x5934=(cj11*r20);
IkReal x5935=((1.0)*cj7*sj8);
IkReal x5936=((1.0)*x5929);
IkReal x5937=(sj11*x5929);
IkReal x5938=((1.0)*x5928);
IkReal x5939=(sj11*x5928);
evalcond[0]=((((-1.0)*x5934*x5938))+((r21*x5939))+(((-1.0)*r22*x5936)));
evalcond[1]=(cj6+(((-1.0)*x5932*x5938))+((x5928*x5930))+(((-1.0)*r12*x5936)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x5936))+(((-1.0)*x5931*x5938))+((r01*x5939)));
evalcond[3]=((((-1.0)*x5934*x5936))+((r22*x5928))+((r21*x5937))+(((-1.0)*cj7*x5933))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x5935))+(((-1.0)*cj6*sj7*x5933))+(((-1.0)*x5931*x5936))+((r01*x5937))+((r02*x5928)));
evalcond[5]=(((x5929*x5930))+(((-1.0)*sj6*sj7*x5933))+(((-1.0)*sj6*x5935))+(((-1.0)*x5932*x5936))+((r12*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5940=((1.0)*cj11);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x5940))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
CheckValue<IkReal> x5942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x5940)))),-1);
if(!x5942.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5941.value)+(((1.5707963267949)*(x5942.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5943=IKsin(j10);
IkReal x5944=IKcos(j10);
IkReal x5945=(r11*sj11);
IkReal x5946=(cj11*r00);
IkReal x5947=(cj11*r10);
IkReal x5948=((1.0)*cj8);
IkReal x5949=(cj11*r20);
IkReal x5950=((1.0)*cj7*sj8);
IkReal x5951=((1.0)*x5944);
IkReal x5952=(sj11*x5944);
IkReal x5953=((1.0)*x5943);
IkReal x5954=(sj11*x5943);
evalcond[0]=(((r21*x5954))+(((-1.0)*r22*x5951))+(((-1.0)*x5949*x5953)));
evalcond[1]=(((x5943*x5945))+cj6+(((-1.0)*x5947*x5953))+(((-1.0)*r12*x5951)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x5946*x5953))+(((-1.0)*r02*x5951))+((r01*x5954)));
evalcond[3]=(((r21*x5952))+(((-1.0)*cj7*x5948))+((r22*x5943))+(((-1.0)*x5949*x5951))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x5946*x5951))+(((-1.0)*cj6*sj7*x5948))+(((-1.0)*cj6*x5950))+((r02*x5943))+((r01*x5952)));
evalcond[5]=((((-1.0)*x5947*x5951))+(((-1.0)*sj6*x5950))+((x5944*x5945))+(((-1.0)*sj6*sj7*x5948))+((r12*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x5955=(((cj7*cj8))+(((-1.0)*sj7*sj8)));
j6eval[0]=x5955;
j6eval[1]=IKsign(x5955);
j6eval[2]=((IKabs((((cj11*r11))+((r10*sj11)))))+(IKabs((((r00*sj11))+((cj11*r01))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x5956=cj11*cj11;
IkReal x5957=r21*r21;
IkReal x5958=(sj7*sj8);
IkReal x5959=(r21*sj11);
IkReal x5960=(cj11*r20);
IkReal x5961=((1.0)*cj7*cj8);
IkReal x5962=((r22*r22)+((x5956*(r20*r20)))+(((-1.0)*x5956*x5957))+(((-2.0)*x5959*x5960))+x5957);
j10eval[0]=x5962;
j10eval[1]=IKsign(x5962);
j10eval[2]=((IKabs(((((-1.0)*r22*x5961))+((r22*x5958)))))+(IKabs(((((-1.0)*x5958*x5960))+((cj7*cj8*x5960))+((x5958*x5959))+(((-1.0)*x5959*x5961))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j6eval[0]=(((cj7*cj8))+(((-1.0)*sj7*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x5963=IKcos(j6);
IkReal x5964=IKsin(j6);
evalcond[0]=((((-0.10915)*x5964))+(((0.39225)*x5963))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5964))+(((0.10915)*x5963))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x5965=((1.0)*cj11);
IkReal x5966=((((-1.0)*r01*x5965))+(((-1.0)*r00*sj11)));
j10eval[0]=x5966;
j10eval[1]=IKsign(x5966);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x5965))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x5967=((1.0)*cj11);
IkReal x5968=((((-1.0)*r11*x5967))+(((-1.0)*r10*sj11)));
j10eval[0]=x5968;
j10eval[1]=((IKabs(((((-1.0)*r20*sj6*x5967))+((r21*sj11*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x5968);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x5969=cj11*cj11;
IkReal x5970=((1.0)*r21);
IkReal x5971=(cj11*sj11);
IkReal x5972=(((r10*r20*x5969))+((r11*r21))+(((-1.0)*r10*x5970*x5971))+((r12*r22))+(((-1.0)*r11*x5969*x5970))+(((-1.0)*r11*r20*x5971)));
j10eval[0]=x5972;
j10eval[1]=IKsign(x5972);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x5970))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5973=cj11*cj11;
IkReal x5974=((1.0)*r21);
IkReal x5975=(cj11*sj11);
CheckValue<IkReal> x5976=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r10*x5974*x5975))+((r12*r22))+(((-1.0)*r11*x5973*x5974))+((r10*r20*x5973))+(((-1.0)*r11*r20*x5975)))),-1);
if(!x5976.valid){
continue;
}
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x5974)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5976.value)))+(x5977.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5978=IKsin(j10);
IkReal x5979=IKcos(j10);
IkReal x5980=((1.0)*sj6);
IkReal x5981=(r11*sj11);
IkReal x5982=(r01*sj11);
IkReal x5983=(r21*sj11);
IkReal x5984=((1.0)*x5979);
IkReal x5985=(cj11*x5979);
IkReal x5986=((1.0)*x5978);
evalcond[0]=(((x5978*x5983))+(((-1.0)*cj11*r20*x5986))+(((-1.0)*r22*x5984)));
evalcond[1]=(((r20*x5985))+(((-1.0)*r22*x5986))+(((-1.0)*x5983*x5984)));
evalcond[2]=((((-1.0)*r12*x5984))+cj6+((x5978*x5981))+(((-1.0)*cj11*r10*x5986)));
evalcond[3]=((((-1.0)*x5980))+((x5978*x5982))+(((-1.0)*cj11*r00*x5986))+(((-1.0)*r02*x5984)));
evalcond[4]=((((-1.0)*r02*x5986))+((r00*x5985))+(((-1.0)*x5982*x5984))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x5980))+(((-1.0)*r12*x5986))+((r10*x5985))+(((-1.0)*x5981*x5984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5987=((1.0)*cj11);
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x5987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5987))+(((-1.0)*r10*sj11)))),-1);
if(!x5989.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x5988.value)+(((1.5707963267949)*(x5989.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x5990=IKsin(j10);
IkReal x5991=IKcos(j10);
IkReal x5992=((1.0)*sj6);
IkReal x5993=(r11*sj11);
IkReal x5994=(r01*sj11);
IkReal x5995=(r21*sj11);
IkReal x5996=((1.0)*x5991);
IkReal x5997=(cj11*x5991);
IkReal x5998=((1.0)*x5990);
evalcond[0]=((((-1.0)*cj11*r20*x5998))+((x5990*x5995))+(((-1.0)*r22*x5996)));
evalcond[1]=(((r20*x5997))+(((-1.0)*x5995*x5996))+(((-1.0)*r22*x5998)));
evalcond[2]=((((-1.0)*r12*x5996))+cj6+(((-1.0)*cj11*r10*x5998))+((x5990*x5993)));
evalcond[3]=((((-1.0)*cj11*r00*x5998))+(((-1.0)*r02*x5996))+((x5990*x5994))+(((-1.0)*x5992)));
evalcond[4]=((((-1.0)*r02*x5998))+(((-1.0)*x5994*x5996))+((r00*x5997))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x5998))+((r10*x5997))+(((-1.0)*x5993*x5996))+(((-1.0)*x5992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5999=((1.0)*cj11);
CheckValue<IkReal> x6000 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x5999))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x5999)))),-1);
if(!x6001.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6000.value)+(((1.5707963267949)*(x6001.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6002=IKsin(j10);
IkReal x6003=IKcos(j10);
IkReal x6004=((1.0)*sj6);
IkReal x6005=(r11*sj11);
IkReal x6006=(r01*sj11);
IkReal x6007=(r21*sj11);
IkReal x6008=((1.0)*x6003);
IkReal x6009=(cj11*x6003);
IkReal x6010=((1.0)*x6002);
evalcond[0]=((((-1.0)*cj11*r20*x6010))+((x6002*x6007))+(((-1.0)*r22*x6008)));
evalcond[1]=(((r20*x6009))+(((-1.0)*x6007*x6008))+(((-1.0)*r22*x6010)));
evalcond[2]=(cj6+(((-1.0)*r12*x6008))+((x6002*x6005))+(((-1.0)*cj11*r10*x6010)));
evalcond[3]=((((-1.0)*x6004))+((x6002*x6006))+(((-1.0)*cj11*r00*x6010))+(((-1.0)*r02*x6008)));
evalcond[4]=((((-1.0)*r02*x6010))+(((-1.0)*x6006*x6008))+((r00*x6009))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x6004))+(((-1.0)*r12*x6010))+((r10*x6009))+(((-1.0)*x6005*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6011=IKcos(j6);
IkReal x6012=IKsin(j6);
evalcond[0]=((((-0.39225)*x6011))+(((-1.0)*px))+(((-0.10915)*x6012)));
evalcond[1]=((((-0.39225)*x6012))+(((-1.0)*py))+(((0.10915)*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6013=((1.0)*cj11);
IkReal x6014=((((-1.0)*r00*sj11))+(((-1.0)*r01*x6013)));
j10eval[0]=x6014;
j10eval[1]=IKsign(x6014);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x6013))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6015=cj11*cj11;
IkReal x6016=((1.0)*r21);
IkReal x6017=((1.0)*cj11*r20);
IkReal x6018=((((-1.0)*r01*sj11*x6017))+((r01*r21))+((r00*r20*x6015))+(((-1.0)*r01*x6015*x6016))+(((-1.0)*cj11*r00*sj11*x6016))+((r02*r22)));
j10eval[0]=x6018;
j10eval[1]=((IKabs(((((-1.0)*cj6*x6017))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x6018);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6019=cj11*cj11;
IkReal x6020=((1.0)*r21);
IkReal x6021=(cj11*sj11);
IkReal x6022=((1.0)*r20);
IkReal x6023=((((-1.0)*r10*x6020*x6021))+((r11*r21))+(((-1.0)*r11*x6019*x6020))+((r12*r22))+(((-1.0)*r11*x6021*x6022))+((r10*r20*x6019)));
j10eval[0]=x6023;
j10eval[1]=IKsign(x6023);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x6022))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6024=cj11*cj11;
IkReal x6025=((1.0)*r21);
IkReal x6026=(cj11*sj11);
IkReal x6027=((1.0)*r20);
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x6027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
CheckValue<IkReal> x6029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6024*x6025))+(((-1.0)*r11*x6026*x6027))+((r11*r21))+((r12*r22))+((r10*r20*x6024))+(((-1.0)*r10*x6025*x6026)))),-1);
if(!x6029.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6028.value)+(((1.5707963267949)*(x6029.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6030=IKsin(j10);
IkReal x6031=IKcos(j10);
IkReal x6032=(r11*sj11);
IkReal x6033=(r21*sj11);
IkReal x6034=(r01*sj11);
IkReal x6035=((1.0)*x6031);
IkReal x6036=(cj11*x6031);
IkReal x6037=((1.0)*x6030);
evalcond[0]=((((-1.0)*cj11*r20*x6037))+(((-1.0)*r22*x6035))+((x6030*x6033)));
evalcond[1]=(((r20*x6036))+(((-1.0)*x6033*x6035))+(((-1.0)*r22*x6037)));
evalcond[2]=(cj6+(((-1.0)*r12*x6035))+(((-1.0)*cj11*r10*x6037))+((x6030*x6032)));
evalcond[3]=(cj6+(((-1.0)*x6034*x6035))+((r00*x6036))+(((-1.0)*r02*x6037)));
evalcond[4]=((((-1.0)*x6032*x6035))+sj6+(((-1.0)*r12*x6037))+((r10*x6036)));
evalcond[5]=((((-1.0)*sj6))+((x6030*x6034))+(((-1.0)*cj11*r00*x6037))+(((-1.0)*r02*x6035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6038=cj11*cj11;
IkReal x6039=((1.0)*r21);
IkReal x6040=((1.0)*cj11*r20);
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6038*x6039))+(((-1.0)*cj11*r00*sj11*x6039))+((r00*r20*x6038))+((r02*r22))+(((-1.0)*r01*sj11*x6040)))),-1);
if(!x6041.valid){
continue;
}
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x6040))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6041.value)))+(x6042.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6043=IKsin(j10);
IkReal x6044=IKcos(j10);
IkReal x6045=(r11*sj11);
IkReal x6046=(r21*sj11);
IkReal x6047=(r01*sj11);
IkReal x6048=((1.0)*x6044);
IkReal x6049=(cj11*x6044);
IkReal x6050=((1.0)*x6043);
evalcond[0]=(((x6043*x6046))+(((-1.0)*cj11*r20*x6050))+(((-1.0)*r22*x6048)));
evalcond[1]=((((-1.0)*x6046*x6048))+(((-1.0)*r22*x6050))+((r20*x6049)));
evalcond[2]=(cj6+((x6043*x6045))+(((-1.0)*cj11*r10*x6050))+(((-1.0)*r12*x6048)));
evalcond[3]=(((r00*x6049))+cj6+(((-1.0)*r02*x6050))+(((-1.0)*x6047*x6048)));
evalcond[4]=(sj6+(((-1.0)*r12*x6050))+(((-1.0)*x6045*x6048))+((r10*x6049)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x6048))+((x6043*x6047))+(((-1.0)*cj11*r00*x6050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6051=((1.0)*cj11);
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6051))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6051))+(((-1.0)*r00*sj11)))),-1);
if(!x6053.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6052.value)+(((1.5707963267949)*(x6053.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6054=IKsin(j10);
IkReal x6055=IKcos(j10);
IkReal x6056=(r11*sj11);
IkReal x6057=(r21*sj11);
IkReal x6058=(r01*sj11);
IkReal x6059=((1.0)*x6055);
IkReal x6060=(cj11*x6055);
IkReal x6061=((1.0)*x6054);
evalcond[0]=((((-1.0)*r22*x6059))+((x6054*x6057))+(((-1.0)*cj11*r20*x6061)));
evalcond[1]=((((-1.0)*r22*x6061))+(((-1.0)*x6057*x6059))+((r20*x6060)));
evalcond[2]=((((-1.0)*cj11*r10*x6061))+cj6+(((-1.0)*r12*x6059))+((x6054*x6056)));
evalcond[3]=(cj6+(((-1.0)*x6058*x6059))+((r00*x6060))+(((-1.0)*r02*x6061)));
evalcond[4]=(sj6+((r10*x6060))+(((-1.0)*x6056*x6059))+(((-1.0)*r12*x6061)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x6061))+(((-1.0)*r02*x6059))+((x6054*x6058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6062=IKcos(j6);
IkReal x6063=IKsin(j6);
evalcond[0]=((((0.81725)*x6062))+(((-0.10915)*x6063))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6063))+(((0.10915)*x6062))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6064=((1.0)*cj11);
IkReal x6065=((((-1.0)*r01*x6064))+(((-1.0)*r00*sj11)));
j10eval[0]=x6065;
j10eval[1]=IKsign(x6065);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x6064))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6066=((1.0)*cj11);
IkReal x6067=((((-1.0)*r11*x6066))+(((-1.0)*r10*sj11)));
j10eval[0]=x6067;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x6066))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x6067);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6068=cj11*cj11;
IkReal x6069=((1.0)*r21);
IkReal x6070=(cj11*sj11);
IkReal x6071=(((r11*r21))+((r10*r20*x6068))+((r12*r22))+(((-1.0)*r11*x6068*x6069))+(((-1.0)*r11*r20*x6070))+(((-1.0)*r10*x6069*x6070)));
j10eval[0]=x6071;
j10eval[1]=IKsign(x6071);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x6069))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6072=cj11*cj11;
IkReal x6073=((1.0)*r21);
IkReal x6074=(cj11*sj11);
CheckValue<IkReal> x6075 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj11*x6073))+((cj11*cj6*r20)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6075.valid){
continue;
}
CheckValue<IkReal> x6076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6072*x6073))+((r11*r21))+((r12*r22))+(((-1.0)*r10*x6073*x6074))+((r10*r20*x6072))+(((-1.0)*r11*r20*x6074)))),-1);
if(!x6076.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6075.value)+(((1.5707963267949)*(x6076.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6077=IKsin(j10);
IkReal x6078=IKcos(j10);
IkReal x6079=((1.0)*sj6);
IkReal x6080=(r11*sj11);
IkReal x6081=(r01*sj11);
IkReal x6082=(r21*sj11);
IkReal x6083=((1.0)*x6078);
IkReal x6084=(cj11*x6078);
IkReal x6085=((1.0)*x6077);
evalcond[0]=((((-1.0)*cj11*r20*x6085))+(((-1.0)*r22*x6083))+((x6077*x6082)));
evalcond[1]=((((-1.0)*r22*x6085))+(((-1.0)*x6082*x6083))+((r20*x6084)));
evalcond[2]=((((-1.0)*r12*x6083))+cj6+((x6077*x6080))+(((-1.0)*cj11*r10*x6085)));
evalcond[3]=((((-1.0)*x6079))+(((-1.0)*cj11*r00*x6085))+(((-1.0)*r02*x6083))+((x6077*x6081)));
evalcond[4]=(((r00*x6084))+(((-1.0)*r02*x6085))+(((-1.0)*cj6))+(((-1.0)*x6081*x6083)));
evalcond[5]=((((-1.0)*r12*x6085))+((r10*x6084))+(((-1.0)*x6080*x6083))+(((-1.0)*x6079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6086=((1.0)*cj11);
CheckValue<IkReal> x6087 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6086))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6087.valid){
continue;
}
CheckValue<IkReal> x6088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x6086)))),-1);
if(!x6088.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6087.value)+(((1.5707963267949)*(x6088.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6089=IKsin(j10);
IkReal x6090=IKcos(j10);
IkReal x6091=((1.0)*sj6);
IkReal x6092=(r11*sj11);
IkReal x6093=(r01*sj11);
IkReal x6094=(r21*sj11);
IkReal x6095=((1.0)*x6090);
IkReal x6096=(cj11*x6090);
IkReal x6097=((1.0)*x6089);
evalcond[0]=((((-1.0)*cj11*r20*x6097))+(((-1.0)*r22*x6095))+((x6089*x6094)));
evalcond[1]=((((-1.0)*r22*x6097))+((r20*x6096))+(((-1.0)*x6094*x6095)));
evalcond[2]=((((-1.0)*cj11*r10*x6097))+cj6+((x6089*x6092))+(((-1.0)*r12*x6095)));
evalcond[3]=((((-1.0)*cj11*r00*x6097))+(((-1.0)*x6091))+((x6089*x6093))+(((-1.0)*r02*x6095)));
evalcond[4]=((((-1.0)*x6093*x6095))+((r00*x6096))+(((-1.0)*r02*x6097))+(((-1.0)*cj6)));
evalcond[5]=(((r10*x6096))+(((-1.0)*x6091))+(((-1.0)*x6092*x6095))+(((-1.0)*r12*x6097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6098=((1.0)*cj11);
CheckValue<IkReal> x6099 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6098))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6099.valid){
continue;
}
CheckValue<IkReal> x6100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6098))+(((-1.0)*r00*sj11)))),-1);
if(!x6100.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6099.value)+(((1.5707963267949)*(x6100.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6101=IKsin(j10);
IkReal x6102=IKcos(j10);
IkReal x6103=((1.0)*sj6);
IkReal x6104=(r11*sj11);
IkReal x6105=(r01*sj11);
IkReal x6106=(r21*sj11);
IkReal x6107=((1.0)*x6102);
IkReal x6108=(cj11*x6102);
IkReal x6109=((1.0)*x6101);
evalcond[0]=(((x6101*x6106))+(((-1.0)*r22*x6107))+(((-1.0)*cj11*r20*x6109)));
evalcond[1]=((((-1.0)*r22*x6109))+((r20*x6108))+(((-1.0)*x6106*x6107)));
evalcond[2]=(((x6101*x6104))+cj6+(((-1.0)*cj11*r10*x6109))+(((-1.0)*r12*x6107)));
evalcond[3]=((((-1.0)*r02*x6107))+((x6101*x6105))+(((-1.0)*x6103))+(((-1.0)*cj11*r00*x6109)));
evalcond[4]=((((-1.0)*r02*x6109))+(((-1.0)*x6105*x6107))+((r00*x6108))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x6104*x6107))+((r10*x6108))+(((-1.0)*r12*x6109))+(((-1.0)*x6103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6110=IKcos(j6);
IkReal x6111=IKsin(j6);
evalcond[0]=((((0.03275)*x6110))+(((-1.0)*px))+(((-0.10915)*x6111)));
evalcond[1]=((((0.03275)*x6111))+(((-1.0)*py))+(((0.10915)*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6112=((1.0)*cj11);
IkReal x6113=((((-1.0)*r00*sj11))+(((-1.0)*r01*x6112)));
j10eval[0]=x6113;
j10eval[1]=IKsign(x6113);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x6112))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6114=cj11*cj11;
IkReal x6115=((1.0)*r21);
IkReal x6116=((1.0)*cj11*r20);
IkReal x6117=((((-1.0)*cj11*r00*sj11*x6115))+(((-1.0)*r01*sj11*x6116))+((r01*r21))+(((-1.0)*r01*x6114*x6115))+((r02*r22))+((r00*r20*x6114)));
j10eval[0]=x6117;
j10eval[1]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*x6116)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x6117);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6118=cj11*cj11;
IkReal x6119=((1.0)*r21);
IkReal x6120=(cj11*sj11);
IkReal x6121=((1.0)*r20);
IkReal x6122=(((r10*r20*x6118))+((r11*r21))+(((-1.0)*r10*x6119*x6120))+((r12*r22))+(((-1.0)*r11*x6118*x6119))+(((-1.0)*r11*x6120*x6121)));
j10eval[0]=x6122;
j10eval[1]=IKsign(x6122);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*cj11*sj6*x6121))+((r21*sj11*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6123=cj11*cj11;
IkReal x6124=((1.0)*r21);
IkReal x6125=(cj11*sj11);
IkReal x6126=((1.0)*r20);
CheckValue<IkReal> x6127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6124*x6125))+((r11*r21))+((r10*r20*x6123))+((r12*r22))+(((-1.0)*r11*x6123*x6124))+(((-1.0)*r11*x6125*x6126)))),-1);
if(!x6127.valid){
continue;
}
CheckValue<IkReal> x6128 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*cj11*sj6*x6126))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6128.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6127.value)))+(x6128.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6129=IKsin(j10);
IkReal x6130=IKcos(j10);
IkReal x6131=(r11*sj11);
IkReal x6132=(r21*sj11);
IkReal x6133=(r01*sj11);
IkReal x6134=((1.0)*x6130);
IkReal x6135=(cj11*x6130);
IkReal x6136=((1.0)*x6129);
evalcond[0]=(((x6129*x6132))+(((-1.0)*r22*x6134))+(((-1.0)*cj11*r20*x6136)));
evalcond[1]=((((-1.0)*r22*x6136))+((r20*x6135))+(((-1.0)*x6132*x6134)));
evalcond[2]=(cj6+((x6129*x6131))+(((-1.0)*r12*x6134))+(((-1.0)*cj11*r10*x6136)));
evalcond[3]=(cj6+(((-1.0)*x6133*x6134))+((r00*x6135))+(((-1.0)*r02*x6136)));
evalcond[4]=(sj6+(((-1.0)*x6131*x6134))+((r10*x6135))+(((-1.0)*r12*x6136)));
evalcond[5]=((((-1.0)*sj6))+((x6129*x6133))+(((-1.0)*cj11*r00*x6136))+(((-1.0)*r02*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6137=cj11*cj11;
IkReal x6138=((1.0)*r21);
IkReal x6139=((1.0)*cj11*r20);
CheckValue<IkReal> x6140=IKPowWithIntegerCheck(IKsign((((r00*r20*x6137))+(((-1.0)*r01*x6137*x6138))+((r01*r21))+(((-1.0)*cj11*r00*sj11*x6138))+((r02*r22))+(((-1.0)*r01*sj11*x6139)))),-1);
if(!x6140.valid){
continue;
}
CheckValue<IkReal> x6141 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x6139))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6141.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6140.value)))+(x6141.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6142=IKsin(j10);
IkReal x6143=IKcos(j10);
IkReal x6144=(r11*sj11);
IkReal x6145=(r21*sj11);
IkReal x6146=(r01*sj11);
IkReal x6147=((1.0)*x6143);
IkReal x6148=(cj11*x6143);
IkReal x6149=((1.0)*x6142);
evalcond[0]=((((-1.0)*cj11*r20*x6149))+((x6142*x6145))+(((-1.0)*r22*x6147)));
evalcond[1]=((((-1.0)*x6145*x6147))+(((-1.0)*r22*x6149))+((r20*x6148)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x6149))+((x6142*x6144))+(((-1.0)*r12*x6147)));
evalcond[3]=(cj6+(((-1.0)*r02*x6149))+((r00*x6148))+(((-1.0)*x6146*x6147)));
evalcond[4]=((((-1.0)*x6144*x6147))+((r10*x6148))+sj6+(((-1.0)*r12*x6149)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x6149))+(((-1.0)*r02*x6147))+((x6142*x6146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6150=((1.0)*cj11);
CheckValue<IkReal> x6151 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x6150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6151.valid){
continue;
}
CheckValue<IkReal> x6152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6150))+(((-1.0)*r00*sj11)))),-1);
if(!x6152.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6151.value)+(((1.5707963267949)*(x6152.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6153=IKsin(j10);
IkReal x6154=IKcos(j10);
IkReal x6155=(r11*sj11);
IkReal x6156=(r21*sj11);
IkReal x6157=(r01*sj11);
IkReal x6158=((1.0)*x6154);
IkReal x6159=(cj11*x6154);
IkReal x6160=((1.0)*x6153);
evalcond[0]=((((-1.0)*cj11*r20*x6160))+((x6153*x6156))+(((-1.0)*r22*x6158)));
evalcond[1]=(((r20*x6159))+(((-1.0)*x6156*x6158))+(((-1.0)*r22*x6160)));
evalcond[2]=(((x6153*x6155))+cj6+(((-1.0)*cj11*r10*x6160))+(((-1.0)*r12*x6158)));
evalcond[3]=(((r00*x6159))+cj6+(((-1.0)*r02*x6160))+(((-1.0)*x6157*x6158)));
evalcond[4]=(sj6+(((-1.0)*r12*x6160))+(((-1.0)*x6155*x6158))+((r10*x6159)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x6158))+((x6153*x6157))+(((-1.0)*cj11*r00*x6160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6161=IKcos(j6);
IkReal x6162=IKsin(j6);
evalcond[0]=((((-0.39225)*x6161))+(((-1.0)*px))+(((-0.10915)*x6162)));
evalcond[1]=((((-0.39225)*x6162))+(((0.10915)*x6161))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x6163=((1.0)*cj11);
IkReal x6164=((((-1.0)*r00*sj11))+(((-1.0)*r01*x6163)));
j10eval[0]=x6164;
j10eval[1]=IKsign(x6164);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*r20*x6163))+((cj6*r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x6165=cj11*cj11;
IkReal x6166=((1.0)*r21);
IkReal x6167=((1.0)*cj11*r20);
IkReal x6168=((((-1.0)*cj11*r00*sj11*x6166))+(((-1.0)*r01*x6165*x6166))+(((-1.0)*r01*sj11*x6167))+((r01*r21))+((r00*r20*x6165))+((r02*r22)));
j10eval[0]=x6168;
j10eval[1]=((IKabs((cj6*r22)))+(IKabs(((((-1.0)*cj6*x6167))+((cj6*r21*sj11))))));
j10eval[2]=IKsign(x6168);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x6169=cj11*cj11;
IkReal x6170=((1.0)*r21);
IkReal x6171=(cj11*sj11);
IkReal x6172=((1.0)*r20);
IkReal x6173=(((r11*r21))+(((-1.0)*r11*x6169*x6170))+(((-1.0)*r11*x6171*x6172))+((r12*r22))+((r10*r20*x6169))+(((-1.0)*r10*x6170*x6171)));
j10eval[0]=x6173;
j10eval[1]=IKsign(x6173);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*cj11*sj6*x6172))+((r21*sj11*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6174=cj11*cj11;
IkReal x6175=((1.0)*r21);
IkReal x6176=(cj11*sj11);
IkReal x6177=((1.0)*r20);
CheckValue<IkReal> x6178 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*cj11*sj6*x6177))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6178.valid){
continue;
}
CheckValue<IkReal> x6179=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*r10*x6175*x6176))+(((-1.0)*r11*x6174*x6175))+((r10*r20*x6174))+(((-1.0)*r11*x6176*x6177)))),-1);
if(!x6179.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6178.value)+(((1.5707963267949)*(x6179.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6180=IKsin(j10);
IkReal x6181=IKcos(j10);
IkReal x6182=(r11*sj11);
IkReal x6183=(r21*sj11);
IkReal x6184=(r01*sj11);
IkReal x6185=((1.0)*x6181);
IkReal x6186=(cj11*x6181);
IkReal x6187=((1.0)*x6180);
evalcond[0]=((((-1.0)*r22*x6185))+(((-1.0)*cj11*r20*x6187))+((x6180*x6183)));
evalcond[1]=((((-1.0)*r22*x6187))+(((-1.0)*x6183*x6185))+((r20*x6186)));
evalcond[2]=((((-1.0)*cj11*r10*x6187))+cj6+(((-1.0)*r12*x6185))+((x6180*x6182)));
evalcond[3]=(cj6+(((-1.0)*x6184*x6185))+((r00*x6186))+(((-1.0)*r02*x6187)));
evalcond[4]=(sj6+(((-1.0)*x6182*x6185))+(((-1.0)*r12*x6187))+((r10*x6186)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x6185))+((x6180*x6184))+(((-1.0)*cj11*r00*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6188=cj11*cj11;
IkReal x6189=((1.0)*r21);
IkReal x6190=((1.0)*cj11*r20);
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj11*x6190))+((r00*r20*x6188))+((r01*r21))+(((-1.0)*r01*x6188*x6189))+(((-1.0)*cj11*r00*sj11*x6189))+((r02*r22)))),-1);
if(!x6191.valid){
continue;
}
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*x6190))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6191.value)))+(x6192.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6193=IKsin(j10);
IkReal x6194=IKcos(j10);
IkReal x6195=(r11*sj11);
IkReal x6196=(r21*sj11);
IkReal x6197=(r01*sj11);
IkReal x6198=((1.0)*x6194);
IkReal x6199=(cj11*x6194);
IkReal x6200=((1.0)*x6193);
evalcond[0]=((((-1.0)*cj11*r20*x6200))+(((-1.0)*r22*x6198))+((x6193*x6196)));
evalcond[1]=(((r20*x6199))+(((-1.0)*r22*x6200))+(((-1.0)*x6196*x6198)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x6200))+(((-1.0)*r12*x6198))+((x6193*x6195)));
evalcond[3]=(cj6+(((-1.0)*r02*x6200))+(((-1.0)*x6197*x6198))+((r00*x6199)));
evalcond[4]=(sj6+((r10*x6199))+(((-1.0)*x6195*x6198))+(((-1.0)*r12*x6200)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x6200))+((x6193*x6197))+(((-1.0)*r02*x6198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6201=((1.0)*cj11);
CheckValue<IkReal> x6202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x6201)))),-1);
if(!x6202.valid){
continue;
}
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x6201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6202.value)))+(x6203.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6204=IKsin(j10);
IkReal x6205=IKcos(j10);
IkReal x6206=(r11*sj11);
IkReal x6207=(r21*sj11);
IkReal x6208=(r01*sj11);
IkReal x6209=((1.0)*x6205);
IkReal x6210=(cj11*x6205);
IkReal x6211=((1.0)*x6204);
evalcond[0]=((((-1.0)*r22*x6209))+((x6204*x6207))+(((-1.0)*cj11*r20*x6211)));
evalcond[1]=((((-1.0)*x6207*x6209))+((r20*x6210))+(((-1.0)*r22*x6211)));
evalcond[2]=((((-1.0)*cj11*r10*x6211))+cj6+((x6204*x6206))+(((-1.0)*r12*x6209)));
evalcond[3]=(cj6+(((-1.0)*x6208*x6209))+((r00*x6210))+(((-1.0)*r02*x6211)));
evalcond[4]=(sj6+(((-1.0)*r12*x6211))+((r10*x6210))+(((-1.0)*x6206*x6209)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*r02*x6209))+(((-1.0)*cj11*r00*x6211))+((x6204*x6208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6212=IKcos(j6);
IkReal x6213=IKsin(j6);
evalcond[0]=((((0.39225)*x6212))+(((-0.10915)*x6213))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6212))+(((0.39225)*x6213))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6214=((1.0)*cj11);
IkReal x6215=((((-1.0)*r01*x6214))+(((-1.0)*r00*sj11)));
j10eval[0]=x6215;
j10eval[1]=IKsign(x6215);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x6214)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6216=((1.0)*cj11);
IkReal x6217=((((-1.0)*r11*x6216))+(((-1.0)*r10*sj11)));
j10eval[0]=x6217;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x6216))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x6217);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x6218=cj11*cj11;
IkReal x6219=((1.0)*r21);
IkReal x6220=(cj11*sj11);
IkReal x6221=(((r11*r21))+(((-1.0)*r11*x6218*x6219))+((r12*r22))+(((-1.0)*r10*x6219*x6220))+(((-1.0)*r11*r20*x6220))+((r10*r20*x6218)));
j10eval[0]=x6221;
j10eval[1]=IKsign(x6221);
j10eval[2]=((IKabs(((((-1.0)*cj6*sj11*x6219))+((cj11*cj6*r20)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6222=cj11*cj11;
IkReal x6223=((1.0)*r21);
IkReal x6224=(cj11*sj11);
CheckValue<IkReal> x6225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6222*x6223))+((r11*r21))+(((-1.0)*r10*x6223*x6224))+((r12*r22))+(((-1.0)*r11*r20*x6224))+((r10*r20*x6222)))),-1);
if(!x6225.valid){
continue;
}
CheckValue<IkReal> x6226 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*sj11*x6223))+((cj11*cj6*r20)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6226.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6225.value)))+(x6226.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6227=IKsin(j10);
IkReal x6228=IKcos(j10);
IkReal x6229=((1.0)*sj6);
IkReal x6230=(r11*sj11);
IkReal x6231=(r01*sj11);
IkReal x6232=(r21*sj11);
IkReal x6233=((1.0)*x6228);
IkReal x6234=(cj11*x6228);
IkReal x6235=((1.0)*x6227);
evalcond[0]=((((-1.0)*cj11*r20*x6235))+(((-1.0)*r22*x6233))+((x6227*x6232)));
evalcond[1]=(((r20*x6234))+(((-1.0)*x6232*x6233))+(((-1.0)*r22*x6235)));
evalcond[2]=((((-1.0)*r12*x6233))+cj6+(((-1.0)*cj11*r10*x6235))+((x6227*x6230)));
evalcond[3]=((((-1.0)*x6229))+(((-1.0)*cj11*r00*x6235))+(((-1.0)*r02*x6233))+((x6227*x6231)));
evalcond[4]=((((-1.0)*x6231*x6233))+((r00*x6234))+(((-1.0)*r02*x6235))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x6235))+(((-1.0)*x6229))+((r10*x6234))+(((-1.0)*x6230*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6236=((1.0)*cj11);
CheckValue<IkReal> x6237 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6236))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6237.valid){
continue;
}
CheckValue<IkReal> x6238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6236))+(((-1.0)*r10*sj11)))),-1);
if(!x6238.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6237.value)+(((1.5707963267949)*(x6238.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6239=IKsin(j10);
IkReal x6240=IKcos(j10);
IkReal x6241=((1.0)*sj6);
IkReal x6242=(r11*sj11);
IkReal x6243=(r01*sj11);
IkReal x6244=(r21*sj11);
IkReal x6245=((1.0)*x6240);
IkReal x6246=(cj11*x6240);
IkReal x6247=((1.0)*x6239);
evalcond[0]=(((x6239*x6244))+(((-1.0)*cj11*r20*x6247))+(((-1.0)*r22*x6245)));
evalcond[1]=(((r20*x6246))+(((-1.0)*r22*x6247))+(((-1.0)*x6244*x6245)));
evalcond[2]=(cj6+(((-1.0)*r12*x6245))+((x6239*x6242))+(((-1.0)*cj11*r10*x6247)));
evalcond[3]=((((-1.0)*r02*x6245))+(((-1.0)*cj11*r00*x6247))+(((-1.0)*x6241))+((x6239*x6243)));
evalcond[4]=((((-1.0)*r02*x6247))+(((-1.0)*cj6))+(((-1.0)*x6243*x6245))+((r00*x6246)));
evalcond[5]=((((-1.0)*x6242*x6245))+(((-1.0)*x6241))+((r10*x6246))+(((-1.0)*r12*x6247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6248=((1.0)*cj11);
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6248))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
CheckValue<IkReal> x6250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6248))+(((-1.0)*r00*sj11)))),-1);
if(!x6250.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6249.value)+(((1.5707963267949)*(x6250.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6251=IKsin(j10);
IkReal x6252=IKcos(j10);
IkReal x6253=((1.0)*sj6);
IkReal x6254=(r11*sj11);
IkReal x6255=(r01*sj11);
IkReal x6256=(r21*sj11);
IkReal x6257=((1.0)*x6252);
IkReal x6258=(cj11*x6252);
IkReal x6259=((1.0)*x6251);
evalcond[0]=(((x6251*x6256))+(((-1.0)*cj11*r20*x6259))+(((-1.0)*r22*x6257)));
evalcond[1]=((((-1.0)*r22*x6259))+((r20*x6258))+(((-1.0)*x6256*x6257)));
evalcond[2]=(cj6+((x6251*x6254))+(((-1.0)*r12*x6257))+(((-1.0)*cj11*r10*x6259)));
evalcond[3]=(((x6251*x6255))+(((-1.0)*r02*x6257))+(((-1.0)*cj11*r00*x6259))+(((-1.0)*x6253)));
evalcond[4]=(((r00*x6258))+(((-1.0)*r02*x6259))+(((-1.0)*x6255*x6257))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x6254*x6257))+((r10*x6258))+(((-1.0)*x6253))+(((-1.0)*r12*x6259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6260=IKcos(j6);
IkReal x6261=IKsin(j6);
evalcond[0]=((((-0.81725)*x6260))+(((-0.10915)*x6261))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6260))+(((-0.81725)*x6261))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6262=((1.0)*cj11);
IkReal x6263=((((-1.0)*r00*sj11))+(((-1.0)*r01*x6262)));
j10eval[0]=x6263;
j10eval[1]=IKsign(x6263);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x6262))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6264=cj11*cj11;
IkReal x6265=((1.0)*r21);
IkReal x6266=((1.0)*cj11*r20);
IkReal x6267=((((-1.0)*cj11*r00*sj11*x6265))+((r00*r20*x6264))+((r01*r21))+(((-1.0)*r01*x6264*x6265))+(((-1.0)*r01*sj11*x6266))+((r02*r22)));
j10eval[0]=x6267;
j10eval[1]=((IKabs(((((-1.0)*cj6*x6266))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
j10eval[2]=IKsign(x6267);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x6268=cj11*cj11;
IkReal x6269=((1.0)*r21);
IkReal x6270=(cj11*sj11);
IkReal x6271=((1.0)*r20);
IkReal x6272=((((-1.0)*r10*x6269*x6270))+((r11*r21))+((r12*r22))+(((-1.0)*r11*x6270*x6271))+((r10*r20*x6268))+(((-1.0)*r11*x6268*x6269)));
j10eval[0]=x6272;
j10eval[1]=IKsign(x6272);
j10eval[2]=((IKabs((r22*sj6)))+(IKabs((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x6271))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6273=cj11*cj11;
IkReal x6274=((1.0)*r21);
IkReal x6275=(cj11*sj11);
IkReal x6276=((1.0)*r20);
CheckValue<IkReal> x6277 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*cj11*sj6*x6276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6277.valid){
continue;
}
CheckValue<IkReal> x6278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6274*x6275))+((r11*r21))+(((-1.0)*r11*x6273*x6274))+((r12*r22))+(((-1.0)*r11*x6275*x6276))+((r10*r20*x6273)))),-1);
if(!x6278.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6277.value)+(((1.5707963267949)*(x6278.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6279=IKsin(j10);
IkReal x6280=IKcos(j10);
IkReal x6281=(r11*sj11);
IkReal x6282=(r21*sj11);
IkReal x6283=(r01*sj11);
IkReal x6284=((1.0)*x6280);
IkReal x6285=(cj11*x6280);
IkReal x6286=((1.0)*x6279);
evalcond[0]=(((x6279*x6282))+(((-1.0)*cj11*r20*x6286))+(((-1.0)*r22*x6284)));
evalcond[1]=((((-1.0)*x6282*x6284))+(((-1.0)*r22*x6286))+((r20*x6285)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x6286))+((x6279*x6281))+(((-1.0)*r12*x6284)));
evalcond[3]=((((-1.0)*x6283*x6284))+cj6+(((-1.0)*r02*x6286))+((r00*x6285)));
evalcond[4]=(sj6+(((-1.0)*r12*x6286))+((r10*x6285))+(((-1.0)*x6281*x6284)));
evalcond[5]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x6286))+(((-1.0)*r02*x6284))+((x6279*x6283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6287=cj11*cj11;
IkReal x6288=((1.0)*r21);
IkReal x6289=((1.0)*cj11*r20);
CheckValue<IkReal> x6290=IKPowWithIntegerCheck(IKsign((((r00*r20*x6287))+((r01*r21))+(((-1.0)*cj11*r00*sj11*x6288))+((r02*r22))+(((-1.0)*r01*sj11*x6289))+(((-1.0)*r01*x6287*x6288)))),-1);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*x6289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6290.value)))+(x6291.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j10);
IkReal x6293=IKcos(j10);
IkReal x6294=(r11*sj11);
IkReal x6295=(r21*sj11);
IkReal x6296=(r01*sj11);
IkReal x6297=((1.0)*x6293);
IkReal x6298=(cj11*x6293);
IkReal x6299=((1.0)*x6292);
evalcond[0]=((((-1.0)*cj11*r20*x6299))+(((-1.0)*r22*x6297))+((x6292*x6295)));
evalcond[1]=((((-1.0)*r22*x6299))+((r20*x6298))+(((-1.0)*x6295*x6297)));
evalcond[2]=(cj6+((x6292*x6294))+(((-1.0)*cj11*r10*x6299))+(((-1.0)*r12*x6297)));
evalcond[3]=(((r00*x6298))+(((-1.0)*x6296*x6297))+cj6+(((-1.0)*r02*x6299)));
evalcond[4]=(sj6+(((-1.0)*x6294*x6297))+(((-1.0)*r12*x6299))+((r10*x6298)));
evalcond[5]=((((-1.0)*cj11*r00*x6299))+(((-1.0)*sj6))+(((-1.0)*r02*x6297))+((x6292*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6300=((1.0)*cj11);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6300))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6300))+(((-1.0)*r00*sj11)))),-1);
if(!x6302.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j10);
IkReal x6304=IKcos(j10);
IkReal x6305=(r11*sj11);
IkReal x6306=(r21*sj11);
IkReal x6307=(r01*sj11);
IkReal x6308=((1.0)*x6304);
IkReal x6309=(cj11*x6304);
IkReal x6310=((1.0)*x6303);
evalcond[0]=(((x6303*x6306))+(((-1.0)*cj11*r20*x6310))+(((-1.0)*r22*x6308)));
evalcond[1]=((((-1.0)*r22*x6310))+((r20*x6309))+(((-1.0)*x6306*x6308)));
evalcond[2]=(((x6303*x6305))+cj6+(((-1.0)*r12*x6308))+(((-1.0)*cj11*r10*x6310)));
evalcond[3]=(cj6+(((-1.0)*r02*x6310))+((r00*x6309))+(((-1.0)*x6307*x6308)));
evalcond[4]=((((-1.0)*x6305*x6308))+sj6+(((-1.0)*r12*x6310))+((r10*x6309)));
evalcond[5]=((((-1.0)*sj6))+((x6303*x6307))+(((-1.0)*r02*x6308))+(((-1.0)*cj11*r00*x6310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x6311=IKcos(j6);
IkReal x6312=IKsin(j6);
evalcond[0]=((((-0.10915)*x6312))+(((-1.0)*px))+(((-0.03275)*x6311)));
evalcond[1]=((((-1.0)*py))+(((-0.03275)*x6312))+(((0.10915)*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6313=((1.0)*cj11);
IkReal x6314=((((-1.0)*r01*x6313))+(((-1.0)*r00*sj11)));
j10eval[0]=x6314;
j10eval[1]=IKsign(x6314);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x6313))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6315=((1.0)*cj11);
IkReal x6316=((((-1.0)*r11*x6315))+(((-1.0)*r10*sj11)));
j10eval[0]=x6316;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x6315))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x6316);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x6317=cj11*cj11;
IkReal x6318=((1.0)*r21);
IkReal x6319=(cj11*sj11);
IkReal x6320=((((-1.0)*r10*x6318*x6319))+((r11*r21))+(((-1.0)*r11*x6317*x6318))+((r12*r22))+(((-1.0)*r11*r20*x6319))+((r10*r20*x6317)));
j10eval[0]=x6320;
j10eval[1]=IKsign(x6320);
j10eval[2]=((IKabs(((((-1.0)*cj6*sj11*x6318))+((cj11*cj6*r20)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6321=cj11*cj11;
IkReal x6322=((1.0)*r21);
IkReal x6323=(cj11*sj11);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal((((cj11*cj6*r20))+(((-1.0)*cj6*sj11*x6322)))),IkReal((cj6*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
CheckValue<IkReal> x6325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6321*x6322))+((r11*r21))+(((-1.0)*r11*r20*x6323))+((r10*r20*x6321))+((r12*r22))+(((-1.0)*r10*x6322*x6323)))),-1);
if(!x6325.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6324.value)+(((1.5707963267949)*(x6325.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6326=IKsin(j10);
IkReal x6327=IKcos(j10);
IkReal x6328=((1.0)*sj6);
IkReal x6329=(r11*sj11);
IkReal x6330=(r01*sj11);
IkReal x6331=(r21*sj11);
IkReal x6332=((1.0)*x6327);
IkReal x6333=(cj11*x6327);
IkReal x6334=((1.0)*x6326);
evalcond[0]=((((-1.0)*cj11*r20*x6334))+((x6326*x6331))+(((-1.0)*r22*x6332)));
evalcond[1]=((((-1.0)*x6331*x6332))+((r20*x6333))+(((-1.0)*r22*x6334)));
evalcond[2]=((((-1.0)*r12*x6332))+cj6+((x6326*x6329))+(((-1.0)*cj11*r10*x6334)));
evalcond[3]=(((x6326*x6330))+(((-1.0)*cj11*r00*x6334))+(((-1.0)*r02*x6332))+(((-1.0)*x6328)));
evalcond[4]=((((-1.0)*x6330*x6332))+((r00*x6333))+(((-1.0)*r02*x6334))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*r12*x6334))+((r10*x6333))+(((-1.0)*x6328))+(((-1.0)*x6329*x6332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6335=((1.0)*cj11);
CheckValue<IkReal> x6336 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x6335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6336.valid){
continue;
}
CheckValue<IkReal> x6337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6335))+(((-1.0)*r10*sj11)))),-1);
if(!x6337.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6336.value)+(((1.5707963267949)*(x6337.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6338=IKsin(j10);
IkReal x6339=IKcos(j10);
IkReal x6340=((1.0)*sj6);
IkReal x6341=(r11*sj11);
IkReal x6342=(r01*sj11);
IkReal x6343=(r21*sj11);
IkReal x6344=((1.0)*x6339);
IkReal x6345=(cj11*x6339);
IkReal x6346=((1.0)*x6338);
evalcond[0]=((((-1.0)*cj11*r20*x6346))+(((-1.0)*r22*x6344))+((x6338*x6343)));
evalcond[1]=((((-1.0)*r22*x6346))+(((-1.0)*x6343*x6344))+((r20*x6345)));
evalcond[2]=(cj6+((x6338*x6341))+(((-1.0)*r12*x6344))+(((-1.0)*cj11*r10*x6346)));
evalcond[3]=(((x6338*x6342))+(((-1.0)*cj11*r00*x6346))+(((-1.0)*r02*x6344))+(((-1.0)*x6340)));
evalcond[4]=((((-1.0)*x6342*x6344))+((r00*x6345))+(((-1.0)*r02*x6346))+(((-1.0)*cj6)));
evalcond[5]=((((-1.0)*x6341*x6344))+((r10*x6345))+(((-1.0)*r12*x6346))+(((-1.0)*x6340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6347=((1.0)*cj11);
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6347))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
CheckValue<IkReal> x6349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x6347)))),-1);
if(!x6349.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6348.value)+(((1.5707963267949)*(x6349.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6350=IKsin(j10);
IkReal x6351=IKcos(j10);
IkReal x6352=((1.0)*sj6);
IkReal x6353=(r11*sj11);
IkReal x6354=(r01*sj11);
IkReal x6355=(r21*sj11);
IkReal x6356=((1.0)*x6351);
IkReal x6357=(cj11*x6351);
IkReal x6358=((1.0)*x6350);
evalcond[0]=((((-1.0)*cj11*r20*x6358))+(((-1.0)*r22*x6356))+((x6350*x6355)));
evalcond[1]=((((-1.0)*x6355*x6356))+((r20*x6357))+(((-1.0)*r22*x6358)));
evalcond[2]=(cj6+(((-1.0)*cj11*r10*x6358))+(((-1.0)*r12*x6356))+((x6350*x6353)));
evalcond[3]=((((-1.0)*r02*x6356))+(((-1.0)*x6352))+((x6350*x6354))+(((-1.0)*cj11*r00*x6358)));
evalcond[4]=((((-1.0)*x6354*x6356))+((r00*x6357))+(((-1.0)*r02*x6358))+(((-1.0)*cj6)));
evalcond[5]=(((r10*x6357))+(((-1.0)*x6353*x6356))+(((-1.0)*r12*x6358))+(((-1.0)*x6352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x6359=(r00*sj11);
IkReal x6360=(cj11*r01);
IkReal x6361=(sj7*sj8);
IkReal x6362=((8500.0)*sj7);
IkReal x6363=((20000.0)*px);
IkReal x6364=(cj7*cj8);
IkReal x6365=((7845.0)*cj8*sj7);
IkReal x6366=((1893.0)*x6364);
IkReal x6367=((7845.0)*cj7*sj8);
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(((((-2183.0)*x6361))+(((2183.0)*x6364))),-1);
if(!x6368.valid){
continue;
}
CheckValue<IkReal> x6369=IKPowWithIntegerCheck((x6364+(((-1.0)*x6361))),-1);
if(!x6369.valid){
continue;
}
if( IKabs(((x6368.value)*((((x6359*x6365))+((x6359*x6367))+((x6359*x6362))+((x6361*x6363))+(((-1.0)*x6360*x6366))+((x6360*x6362))+((x6360*x6365))+((x6360*x6367))+(((1893.0)*x6360*x6361))+(((1893.0)*x6359*x6361))+(((-1.0)*x6359*x6366))+(((-1.0)*x6363*x6364)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6369.value)*((x6360+x6359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6368.value)*((((x6359*x6365))+((x6359*x6367))+((x6359*x6362))+((x6361*x6363))+(((-1.0)*x6360*x6366))+((x6360*x6362))+((x6360*x6365))+((x6360*x6367))+(((1893.0)*x6360*x6361))+(((1893.0)*x6359*x6361))+(((-1.0)*x6359*x6366))+(((-1.0)*x6363*x6364))))))+IKsqr(((x6369.value)*((x6360+x6359))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x6368.value)*((((x6359*x6365))+((x6359*x6367))+((x6359*x6362))+((x6361*x6363))+(((-1.0)*x6360*x6366))+((x6360*x6362))+((x6360*x6365))+((x6360*x6367))+(((1893.0)*x6360*x6361))+(((1893.0)*x6359*x6361))+(((-1.0)*x6359*x6366))+(((-1.0)*x6363*x6364))))), ((x6369.value)*((x6360+x6359))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x6370=IKcos(j6);
IkReal x6371=IKsin(j6);
IkReal x6372=(cj7*cj8);
IkReal x6373=((1.0)*sj11);
IkReal x6374=((0.39225)*cj7);
IkReal x6375=((1.0)*sj7);
IkReal x6376=((0.09465)*cj11);
IkReal x6377=((0.09465)*sj11);
IkReal x6378=((0.425)*sj7);
IkReal x6379=((1.0)*cj11);
IkReal x6380=((0.39225)*cj8*sj7);
IkReal x6381=(sj8*x6371);
IkReal x6382=(sj8*x6370);
evalcond[0]=((((-1.0)*r01*x6379))+(((-1.0)*x6375*x6382))+((x6370*x6372))+(((-1.0)*r00*x6373)));
evalcond[1]=((((-1.0)*x6375*x6381))+((x6371*x6372))+(((-1.0)*r11*x6379))+(((-1.0)*r10*x6373)));
evalcond[2]=((((-1.0)*r01*x6376))+((x6370*x6380))+(((-1.0)*px))+((x6370*x6378))+(((-0.10915)*x6371))+((x6374*x6382))+(((-1.0)*r00*x6377)));
evalcond[3]=(((x6371*x6380))+(((-1.0)*py))+((x6371*x6378))+(((-1.0)*r11*x6376))+(((0.10915)*x6370))+(((-1.0)*r10*x6377))+((x6374*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x6383=((1.0)*cj11);
IkReal x6384=((((-1.0)*r01*x6383))+(((-1.0)*r00*sj11)));
j10eval[0]=x6384;
j10eval[1]=IKsign(x6384);
j10eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x6383))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x6385=((1.0)*cj11);
IkReal x6386=((((-1.0)*r11*x6385))+(((-1.0)*r10*sj11)));
j10eval[0]=x6386;
j10eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*r20*sj6*x6385))+((r21*sj11*sj6))))));
j10eval[2]=IKsign(x6386);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x6387=((1.0)*sj11);
IkReal x6388=((((-1.0)*cj11*r21))+(((-1.0)*r20*x6387)));
j10eval[0]=x6388;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*r11*sj6*x6387))+((cj11*cj6*r00))+(((-1.0)*cj6*r01*x6387))+((cj11*r10*sj6))))));
j10eval[2]=IKsign(x6388);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6389=((-1.0)*r20);
IkReal x6391 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6391)==0){
continue;
}
IkReal x6390=pow(x6391,-0.5);
CheckValue<IkReal> x6392 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6389),IKFAST_ATAN2_MAGTHRESH);
if(!x6392.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6392.value));
IkReal gconst133=(r21*x6390);
IkReal gconst134=(x6389*x6390);
CheckValue<IkReal> x6393 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x6393.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x6394=((-1.0)*r20);
IkReal x6395=x6390;
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6394),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
IkReal x6396=((-1.0)*(x6397.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x6396;
IkReal gconst132=x6396;
IkReal gconst133=(r21*x6395);
IkReal gconst134=(x6394*x6395);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6398=((-1.0)*r20);
IkReal x6399=x6390;
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6398),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal x6400=((-1.0)*(x6401.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x6400;
IkReal gconst132=x6400;
IkReal gconst133=(r21*x6399);
IkReal gconst134=(x6398*x6399);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x6402=((-1.0)*r20);
IkReal x6403=x6390;
CheckValue<IkReal> x6405 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6402),IKFAST_ATAN2_MAGTHRESH);
if(!x6405.valid){
continue;
}
IkReal x6404=((-1.0)*(x6405.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x6404;
IkReal gconst132=x6404;
IkReal gconst133=(r21*x6403);
IkReal gconst134=(x6402*x6403);
IkReal x6406=r22*r22;
CheckValue<IkReal> x6409=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6406))),-1);
if(!x6409.valid){
continue;
}
IkReal x6407=x6409.value;
IkReal x6408=(((x6407*(r21*r21*r21*r21)))+x6406+(((2.0)*x6407*(r20*r20)*(r21*r21)))+((x6407*(r20*r20*r20*r20))));
j10eval[0]=x6408;
j10eval[1]=IKsign(x6408);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6410=(gconst133*r21);
IkReal x6411=(sj7*sj8);
IkReal x6412=(cj7*cj8);
IkReal x6413=(gconst134*r20);
CheckValue<IkReal> x6414=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6410*x6413))+(x6413*x6413)+(x6410*x6410))),-1);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6412))+((r22*x6411)))),IkReal(((((-1.0)*x6410*x6412))+(((-1.0)*x6411*x6413))+((x6410*x6411))+((x6412*x6413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6414.value)))+(x6415.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6416=IKsin(j10);
IkReal x6417=IKcos(j10);
IkReal x6418=(gconst133*r21);
IkReal x6419=(gconst133*r01);
IkReal x6420=(gconst133*r11);
IkReal x6421=((1.0)*cj8);
IkReal x6422=((1.0)*x6417);
IkReal x6423=(gconst134*x6417);
IkReal x6424=((1.0)*cj7*sj8);
IkReal x6425=((1.0)*x6416);
evalcond[0]=((((-1.0)*r22*x6422))+((x6416*x6418))+(((-1.0)*gconst134*r20*x6425)));
evalcond[1]=(cj6+((x6416*x6420))+(((-1.0)*gconst134*r10*x6425))+(((-1.0)*r12*x6422)));
evalcond[2]=((((-1.0)*gconst134*r00*x6425))+(((-1.0)*sj6))+((x6416*x6419))+(((-1.0)*r02*x6422)));
evalcond[3]=((((-1.0)*cj7*x6421))+(((-1.0)*x6418*x6422))+((r20*x6423))+(((-1.0)*r22*x6425))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x6424))+(((-1.0)*x6419*x6422))+(((-1.0)*cj6*sj7*x6421))+((r00*x6423))+(((-1.0)*r02*x6425)));
evalcond[5]=((((-1.0)*sj6*x6424))+((r10*x6423))+(((-1.0)*sj6*sj7*x6421))+(((-1.0)*x6420*x6422))+(((-1.0)*r12*x6425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6426=((1.0)*gconst134);
CheckValue<IkReal> x6427=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x6426)))),-1);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6426))+((gconst133*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6427.value)))+(x6428.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6429=IKsin(j10);
IkReal x6430=IKcos(j10);
IkReal x6431=(gconst133*r21);
IkReal x6432=(gconst133*r01);
IkReal x6433=(gconst133*r11);
IkReal x6434=((1.0)*cj8);
IkReal x6435=((1.0)*x6430);
IkReal x6436=(gconst134*x6430);
IkReal x6437=((1.0)*cj7*sj8);
IkReal x6438=((1.0)*x6429);
evalcond[0]=(((x6429*x6431))+(((-1.0)*r22*x6435))+(((-1.0)*gconst134*r20*x6438)));
evalcond[1]=(((x6429*x6433))+cj6+(((-1.0)*gconst134*r10*x6438))+(((-1.0)*r12*x6435)));
evalcond[2]=(((x6429*x6432))+(((-1.0)*sj6))+(((-1.0)*r02*x6435))+(((-1.0)*gconst134*r00*x6438)));
evalcond[3]=((((-1.0)*x6431*x6435))+(((-1.0)*r22*x6438))+(((-1.0)*cj7*x6434))+((r20*x6436))+((sj7*sj8)));
evalcond[4]=((((-1.0)*r02*x6438))+(((-1.0)*cj6*sj7*x6434))+(((-1.0)*x6432*x6435))+(((-1.0)*cj6*x6437))+((r00*x6436)));
evalcond[5]=((((-1.0)*sj6*sj7*x6434))+(((-1.0)*r12*x6438))+(((-1.0)*x6433*x6435))+(((-1.0)*sj6*x6437))+((r10*x6436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6439=((1.0)*gconst134);
CheckValue<IkReal> x6440 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6439))+((cj6*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6440.valid){
continue;
}
CheckValue<IkReal> x6441=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x6439)))),-1);
if(!x6441.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6440.value)+(((1.5707963267949)*(x6441.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6442=IKsin(j10);
IkReal x6443=IKcos(j10);
IkReal x6444=(gconst133*r21);
IkReal x6445=(gconst133*r01);
IkReal x6446=(gconst133*r11);
IkReal x6447=((1.0)*cj8);
IkReal x6448=((1.0)*x6443);
IkReal x6449=(gconst134*x6443);
IkReal x6450=((1.0)*cj7*sj8);
IkReal x6451=((1.0)*x6442);
evalcond[0]=(((x6442*x6444))+(((-1.0)*r22*x6448))+(((-1.0)*gconst134*r20*x6451)));
evalcond[1]=(((x6442*x6446))+cj6+(((-1.0)*gconst134*r10*x6451))+(((-1.0)*r12*x6448)));
evalcond[2]=((((-1.0)*sj6))+((x6442*x6445))+(((-1.0)*gconst134*r00*x6451))+(((-1.0)*r02*x6448)));
evalcond[3]=((((-1.0)*x6444*x6448))+(((-1.0)*cj7*x6447))+((sj7*sj8))+(((-1.0)*r22*x6451))+((r20*x6449)));
evalcond[4]=(((r00*x6449))+(((-1.0)*r02*x6451))+(((-1.0)*cj6*x6450))+(((-1.0)*x6445*x6448))+(((-1.0)*cj6*sj7*x6447)));
evalcond[5]=((((-1.0)*sj6*sj7*x6447))+(((-1.0)*x6446*x6448))+(((-1.0)*r12*x6451))+(((-1.0)*sj6*x6450))+((r10*x6449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6452=((-1.0)*r21);
IkReal x6454 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6454)==0){
continue;
}
IkReal x6453=pow(x6454,-0.5);
CheckValue<IkReal> x6455 = IKatan2WithCheck(IkReal(x6452),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6455.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6455.value))));
IkReal gconst136=(x6452*x6453);
IkReal gconst137=((1.0)*r20*x6453);
CheckValue<IkReal> x6456 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6456.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x6456.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x6457=((-1.0)*r21);
CheckValue<IkReal> x6460 = IKatan2WithCheck(IkReal(x6457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6460.valid){
continue;
}
IkReal x6458=((1.0)*(x6460.value));
IkReal x6459=x6453;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x6458)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6458)));
IkReal gconst136=(x6457*x6459);
IkReal gconst137=((1.0)*r20*x6459);
IkReal x6461=r22*r22;
IkReal x6462=((1.0)*x6461);
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(((-1.0)+x6461),-1);
if(!x6466.valid){
continue;
}
IkReal x6463=x6466.value;
if((((1.0)+(((-1.0)*x6462)))) < -0.00001)
continue;
IkReal x6464=IKsqrt(((1.0)+(((-1.0)*x6462))));
IkReal x6465=(cj6*x6463*x6464);
j10eval[0]=((IKabs((x6465+(((-1.0)*x6462*x6465)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6467=((-1.0)*r21);
CheckValue<IkReal> x6470 = IKatan2WithCheck(IkReal(x6467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6470.valid){
continue;
}
IkReal x6468=((1.0)*(x6470.value));
IkReal x6469=x6453;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x6468)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6468)));
IkReal gconst136=(x6467*x6469);
IkReal gconst137=((1.0)*r20*x6469);
IkReal x6471=r22*r22;
IkReal x6472=((1.0)*x6471);
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(((-1.0)+x6471),-1);
if(!x6476.valid){
continue;
}
IkReal x6473=x6476.value;
if((((1.0)+(((-1.0)*x6472)))) < -0.00001)
continue;
IkReal x6474=IKsqrt(((1.0)+(((-1.0)*x6472))));
IkReal x6475=(sj6*x6473*x6474);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs((x6475+(((-1.0)*x6472*x6475))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6477=((-1.0)*r21);
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal(x6477),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
IkReal x6478=((1.0)*(x6480.value));
IkReal x6479=x6453;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x6478)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6478)));
IkReal gconst136=(x6477*x6479);
IkReal gconst137=((1.0)*r20*x6479);
IkReal x6481=r22*r22;
CheckValue<IkReal> x6484=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6481))),-1);
if(!x6484.valid){
continue;
}
IkReal x6482=x6484.value;
IkReal x6483=((1.0)*x6482);
j10eval[0]=IKsign((x6481+(((2.0)*x6482*(r20*r20)*(r21*r21)))+((x6483*(r20*r20*r20*r20)))+((x6483*(r21*r21*r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6485=(gconst137*r20);
IkReal x6486=(sj7*sj8);
IkReal x6487=(cj7*cj8);
IkReal x6488=(gconst136*r21);
CheckValue<IkReal> x6489 = IKatan2WithCheck(IkReal((((r22*x6486))+(((-1.0)*r22*x6487)))),IkReal((((x6486*x6488))+((x6485*x6487))+(((-1.0)*x6485*x6486))+(((-1.0)*x6487*x6488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6489.valid){
continue;
}
CheckValue<IkReal> x6490=IKPowWithIntegerCheck(IKsign(((x6485*x6485)+(x6488*x6488)+(r22*r22)+(((-2.0)*x6485*x6488)))),-1);
if(!x6490.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6489.value)+(((1.5707963267949)*(x6490.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6491=IKsin(j10);
IkReal x6492=IKcos(j10);
IkReal x6493=(gconst137*r10);
IkReal x6494=(gconst136*r01);
IkReal x6495=((1.0)*sj6);
IkReal x6496=(gconst137*r20);
IkReal x6497=(gconst136*r11);
IkReal x6498=(gconst137*r00);
IkReal x6499=((1.0)*cj8);
IkReal x6500=(gconst136*r21);
IkReal x6501=((1.0)*x6491);
IkReal x6502=((1.0)*cj7*sj8);
IkReal x6503=((1.0)*x6492);
evalcond[0]=((((-1.0)*r22*x6503))+(((-1.0)*x6496*x6501))+((x6491*x6500)));
evalcond[1]=(((x6491*x6497))+(((-1.0)*r12*x6503))+cj6+(((-1.0)*x6493*x6501)));
evalcond[2]=(((x6491*x6494))+(((-1.0)*x6495))+(((-1.0)*x6498*x6501))+(((-1.0)*r02*x6503)));
evalcond[3]=(((x6492*x6496))+(((-1.0)*x6500*x6503))+(((-1.0)*cj7*x6499))+(((-1.0)*r22*x6501))+((sj7*sj8)));
evalcond[4]=(((x6492*x6498))+(((-1.0)*cj6*sj7*x6499))+(((-1.0)*x6494*x6503))+(((-1.0)*r02*x6501))+(((-1.0)*cj6*x6502)));
evalcond[5]=(((x6492*x6493))+(((-1.0)*r12*x6501))+(((-1.0)*cj8*sj7*x6495))+(((-1.0)*x6497*x6503))+(((-1.0)*cj7*sj8*x6495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6504=((1.0)*gconst137);
CheckValue<IkReal> x6505 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst136*r21*sj6))+(((-1.0)*r20*sj6*x6504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6505.valid){
continue;
}
CheckValue<IkReal> x6506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6504))+(((-1.0)*gconst136*r10)))),-1);
if(!x6506.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6505.value)+(((1.5707963267949)*(x6506.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6507=IKsin(j10);
IkReal x6508=IKcos(j10);
IkReal x6509=(gconst137*r10);
IkReal x6510=(gconst136*r01);
IkReal x6511=((1.0)*sj6);
IkReal x6512=(gconst137*r20);
IkReal x6513=(gconst136*r11);
IkReal x6514=(gconst137*r00);
IkReal x6515=((1.0)*cj8);
IkReal x6516=(gconst136*r21);
IkReal x6517=((1.0)*x6507);
IkReal x6518=((1.0)*cj7*sj8);
IkReal x6519=((1.0)*x6508);
evalcond[0]=((((-1.0)*x6512*x6517))+(((-1.0)*r22*x6519))+((x6507*x6516)));
evalcond[1]=(cj6+((x6507*x6513))+(((-1.0)*r12*x6519))+(((-1.0)*x6509*x6517)));
evalcond[2]=((((-1.0)*r02*x6519))+(((-1.0)*x6514*x6517))+(((-1.0)*x6511))+((x6507*x6510)));
evalcond[3]=(((x6508*x6512))+(((-1.0)*x6516*x6519))+(((-1.0)*r22*x6517))+((sj7*sj8))+(((-1.0)*cj7*x6515)));
evalcond[4]=((((-1.0)*r02*x6517))+((x6508*x6514))+(((-1.0)*cj6*x6518))+(((-1.0)*cj6*sj7*x6515))+(((-1.0)*x6510*x6519)));
evalcond[5]=((((-1.0)*cj7*sj8*x6511))+((x6508*x6509))+(((-1.0)*r12*x6517))+(((-1.0)*cj8*sj7*x6511))+(((-1.0)*x6513*x6519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6520=((1.0)*gconst137);
CheckValue<IkReal> x6521=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x6520)))),-1);
if(!x6521.valid){
continue;
}
CheckValue<IkReal> x6522 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst136*r21))+(((-1.0)*cj6*r20*x6520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6522.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6521.value)))+(x6522.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6523=IKsin(j10);
IkReal x6524=IKcos(j10);
IkReal x6525=(gconst137*r10);
IkReal x6526=(gconst136*r01);
IkReal x6527=((1.0)*sj6);
IkReal x6528=(gconst137*r20);
IkReal x6529=(gconst136*r11);
IkReal x6530=(gconst137*r00);
IkReal x6531=((1.0)*cj8);
IkReal x6532=(gconst136*r21);
IkReal x6533=((1.0)*x6523);
IkReal x6534=((1.0)*cj7*sj8);
IkReal x6535=((1.0)*x6524);
evalcond[0]=(((x6523*x6532))+(((-1.0)*r22*x6535))+(((-1.0)*x6528*x6533)));
evalcond[1]=(cj6+(((-1.0)*r12*x6535))+(((-1.0)*x6525*x6533))+((x6523*x6529)));
evalcond[2]=((((-1.0)*r02*x6535))+(((-1.0)*x6527))+((x6523*x6526))+(((-1.0)*x6530*x6533)));
evalcond[3]=((((-1.0)*cj7*x6531))+((x6524*x6528))+(((-1.0)*r22*x6533))+(((-1.0)*x6532*x6535))+((sj7*sj8)));
evalcond[4]=((((-1.0)*r02*x6533))+(((-1.0)*x6526*x6535))+((x6524*x6530))+(((-1.0)*cj6*x6534))+(((-1.0)*cj6*sj7*x6531)));
evalcond[5]=((((-1.0)*r12*x6533))+((x6524*x6525))+(((-1.0)*x6529*x6535))+(((-1.0)*cj8*sj7*x6527))+(((-1.0)*cj7*sj8*x6527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6536=((-1.0)*r10);
IkReal x6538 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6538)==0){
continue;
}
IkReal x6537=pow(x6538,-0.5);
CheckValue<IkReal> x6539 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6536),IKFAST_ATAN2_MAGTHRESH);
if(!x6539.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6539.value));
IkReal gconst139=(r11*x6537);
IkReal gconst140=(x6536*x6537);
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x6540.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x6541=((-1.0)*r10);
IkReal x6542=x6537;
CheckValue<IkReal> x6544 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6541),IKFAST_ATAN2_MAGTHRESH);
if(!x6544.valid){
continue;
}
IkReal x6543=((-1.0)*(x6544.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst139;
cj11=gconst140;
j11=x6543;
IkReal gconst138=x6543;
IkReal gconst139=(r11*x6542);
IkReal gconst140=(x6541*x6542);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6545=((1.0)*gconst139);
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x6545)))),-1);
if(!x6546.valid){
continue;
}
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst140*r10*sj6))+(((-1.0)*r11*sj6*x6545))+(((-1.0)*cj6*r01*x6545))+((cj6*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6546.value)))+(x6547.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6548=IKsin(j10);
IkReal x6549=IKcos(j10);
IkReal x6550=(gconst139*r01);
IkReal x6551=(gconst139*r11);
IkReal x6552=((1.0)*cj8);
IkReal x6553=(gconst139*r21);
IkReal x6554=(gconst140*x6549);
IkReal x6555=((1.0)*cj7*sj8);
IkReal x6556=((1.0)*x6549);
IkReal x6557=((1.0)*x6548);
evalcond[0]=((((-1.0)*r22*x6556))+(((-1.0)*gconst140*r20*x6557))+((x6548*x6553)));
evalcond[1]=(cj6+(((-1.0)*r12*x6556))+(((-1.0)*gconst140*r10*x6557))+((x6548*x6551)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst140*r00*x6557))+(((-1.0)*r02*x6556))+((x6548*x6550)));
evalcond[3]=(((r20*x6554))+(((-1.0)*x6553*x6556))+(((-1.0)*r22*x6557))+(((-1.0)*cj7*x6552))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x6550*x6556))+(((-1.0)*cj6*sj7*x6552))+(((-1.0)*cj6*x6555))+(((-1.0)*r02*x6557))+((r00*x6554)));
evalcond[5]=((((-1.0)*x6551*x6556))+(((-1.0)*sj6*x6555))+(((-1.0)*r12*x6557))+(((-1.0)*sj6*sj7*x6552))+((r10*x6554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6558=((1.0)*gconst140);
CheckValue<IkReal> x6559 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst139*r21))+(((-1.0)*cj6*r20*x6558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6559.valid){
continue;
}
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x6558)))),-1);
if(!x6560.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6559.value)+(((1.5707963267949)*(x6560.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6561=IKsin(j10);
IkReal x6562=IKcos(j10);
IkReal x6563=(gconst139*r01);
IkReal x6564=(gconst139*r11);
IkReal x6565=((1.0)*cj8);
IkReal x6566=(gconst139*r21);
IkReal x6567=(gconst140*x6562);
IkReal x6568=((1.0)*cj7*sj8);
IkReal x6569=((1.0)*x6562);
IkReal x6570=((1.0)*x6561);
evalcond[0]=(((x6561*x6566))+(((-1.0)*r22*x6569))+(((-1.0)*gconst140*r20*x6570)));
evalcond[1]=(((x6561*x6564))+cj6+(((-1.0)*gconst140*r10*x6570))+(((-1.0)*r12*x6569)));
evalcond[2]=(((x6561*x6563))+(((-1.0)*sj6))+(((-1.0)*gconst140*r00*x6570))+(((-1.0)*r02*x6569)));
evalcond[3]=((((-1.0)*x6566*x6569))+((r20*x6567))+(((-1.0)*r22*x6570))+((sj7*sj8))+(((-1.0)*cj7*x6565)));
evalcond[4]=(((r00*x6567))+(((-1.0)*cj6*x6568))+(((-1.0)*cj6*sj7*x6565))+(((-1.0)*x6563*x6569))+(((-1.0)*r02*x6570)));
evalcond[5]=((((-1.0)*sj6*x6568))+(((-1.0)*sj6*sj7*x6565))+((r10*x6567))+(((-1.0)*r12*x6570))+(((-1.0)*x6564*x6569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6571=((-1.0)*r11);
IkReal x6573 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6573)==0){
continue;
}
IkReal x6572=pow(x6573,-0.5);
CheckValue<IkReal> x6574 = IKatan2WithCheck(IkReal(x6571),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6574.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6574.value))));
IkReal gconst142=(x6571*x6572);
IkReal gconst143=((1.0)*r10*x6572);
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x6575.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x6576=((-1.0)*r11);
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal(x6576),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
IkReal x6577=((1.0)*(x6579.value));
IkReal x6578=x6572;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x6577)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6577)));
IkReal gconst142=(x6576*x6578);
IkReal gconst143=((1.0)*r10*x6578);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x6580=((-1.0)*r11);
CheckValue<IkReal> x6583 = IKatan2WithCheck(IkReal(x6580),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6583.valid){
continue;
}
IkReal x6581=((1.0)*(x6583.value));
IkReal x6582=x6572;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x6581)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6581)));
IkReal gconst142=(x6580*x6582);
IkReal gconst143=((1.0)*r10*x6582);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=sj6;
j10eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6584=((-1.0)*r11);
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal(x6584),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
IkReal x6585=((1.0)*(x6587.value));
IkReal x6586=x6572;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x6585)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6585)));
IkReal gconst142=(x6584*x6586);
IkReal gconst143=((1.0)*r10*x6586);
IkReal x6588=r12*r12;
IkReal x6589=(cj6*r02);
IkReal x6590=x6572;
IkReal x6591=(sj6*x6590);
j10eval[0]=((IKabs(((((-1.0)*x6589))+(((-1.0)*r12*sj6)))))+(IKabs((((x6588*x6591))+((r12*x6589*x6590))+(((-1.0)*x6591))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6592=((1.0)*sj6);
IkReal x6593=((1.0)*gconst142);
CheckValue<IkReal> x6594 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6592))+(((-1.0)*cj6*r02)))),IkReal(((((-1.0)*gconst142*r11*x6592))+(((-1.0)*cj6*r01*x6593))+((cj6*gconst143*r00))+((gconst143*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6594.valid){
continue;
}
CheckValue<IkReal> x6595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6593))+(((-1.0)*gconst143*r21)))),-1);
if(!x6595.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6594.value)+(((1.5707963267949)*(x6595.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6596=IKsin(j10);
IkReal x6597=IKcos(j10);
IkReal x6598=(gconst142*r01);
IkReal x6599=(gconst143*r20);
IkReal x6600=(gconst143*r10);
IkReal x6601=(gconst142*r11);
IkReal x6602=((1.0)*cj8);
IkReal x6603=(gconst142*r21);
IkReal x6604=(gconst143*r00);
IkReal x6605=((1.0)*x6597);
IkReal x6606=((1.0)*cj7*sj8);
IkReal x6607=((1.0)*x6596);
evalcond[0]=((((-1.0)*x6599*x6607))+(((-1.0)*r22*x6605))+((x6596*x6603)));
evalcond[1]=(cj6+(((-1.0)*x6600*x6607))+(((-1.0)*r12*x6605))+((x6596*x6601)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x6605))+(((-1.0)*x6604*x6607))+((x6596*x6598)));
evalcond[3]=((((-1.0)*cj7*x6602))+((x6597*x6599))+(((-1.0)*r22*x6607))+(((-1.0)*x6603*x6605))+((sj7*sj8)));
evalcond[4]=(((x6597*x6604))+(((-1.0)*cj6*sj7*x6602))+(((-1.0)*x6598*x6605))+(((-1.0)*r02*x6607))+(((-1.0)*cj6*x6606)));
evalcond[5]=(((x6597*x6600))+(((-1.0)*x6601*x6605))+(((-1.0)*sj6*x6606))+(((-1.0)*r12*x6607))+(((-1.0)*sj6*sj7*x6602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6608=((1.0)*gconst143);
CheckValue<IkReal> x6609=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r10))+(((-1.0)*r11*x6608)))),-1);
if(!x6609.valid){
continue;
}
CheckValue<IkReal> x6610 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6608))+((gconst142*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6610.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6609.value)))+(x6610.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6611=IKsin(j10);
IkReal x6612=IKcos(j10);
IkReal x6613=(gconst142*r01);
IkReal x6614=(gconst143*r20);
IkReal x6615=(gconst143*r10);
IkReal x6616=(gconst142*r11);
IkReal x6617=((1.0)*cj8);
IkReal x6618=(gconst142*r21);
IkReal x6619=(gconst143*r00);
IkReal x6620=((1.0)*x6612);
IkReal x6621=((1.0)*cj7*sj8);
IkReal x6622=((1.0)*x6611);
evalcond[0]=((((-1.0)*r22*x6620))+((x6611*x6618))+(((-1.0)*x6614*x6622)));
evalcond[1]=((((-1.0)*r12*x6620))+cj6+((x6611*x6616))+(((-1.0)*x6615*x6622)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x6619*x6622))+((x6611*x6613))+(((-1.0)*r02*x6620)));
evalcond[3]=(((x6612*x6614))+(((-1.0)*r22*x6622))+(((-1.0)*x6618*x6620))+(((-1.0)*cj7*x6617))+((sj7*sj8)));
evalcond[4]=(((x6612*x6619))+(((-1.0)*r02*x6622))+(((-1.0)*cj6*sj7*x6617))+(((-1.0)*cj6*x6621))+(((-1.0)*x6613*x6620)));
evalcond[5]=((((-1.0)*r12*x6622))+((x6612*x6615))+(((-1.0)*sj6*x6621))+(((-1.0)*x6616*x6620))+(((-1.0)*sj6*sj7*x6617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6623=((1.0)*gconst143);
CheckValue<IkReal> x6624 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6623))+((cj6*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6624.valid){
continue;
}
CheckValue<IkReal> x6625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x6623)))),-1);
if(!x6625.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6624.value)+(((1.5707963267949)*(x6625.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6626=IKsin(j10);
IkReal x6627=IKcos(j10);
IkReal x6628=(gconst142*r01);
IkReal x6629=(gconst143*r20);
IkReal x6630=(gconst143*r10);
IkReal x6631=(gconst142*r11);
IkReal x6632=((1.0)*cj8);
IkReal x6633=(gconst142*r21);
IkReal x6634=(gconst143*r00);
IkReal x6635=((1.0)*x6627);
IkReal x6636=((1.0)*cj7*sj8);
IkReal x6637=((1.0)*x6626);
evalcond[0]=((((-1.0)*r22*x6635))+((x6626*x6633))+(((-1.0)*x6629*x6637)));
evalcond[1]=(cj6+((x6626*x6631))+(((-1.0)*x6630*x6637))+(((-1.0)*r12*x6635)));
evalcond[2]=((((-1.0)*sj6))+((x6626*x6628))+(((-1.0)*x6634*x6637))+(((-1.0)*r02*x6635)));
evalcond[3]=(((x6627*x6629))+(((-1.0)*r22*x6637))+(((-1.0)*cj7*x6632))+(((-1.0)*x6633*x6635))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x6628*x6635))+((x6627*x6634))+(((-1.0)*cj6*sj7*x6632))+(((-1.0)*r02*x6637))+(((-1.0)*cj6*x6636)));
evalcond[5]=(((x6627*x6630))+(((-1.0)*sj6*x6636))+(((-1.0)*sj6*sj7*x6632))+(((-1.0)*r12*x6637))+(((-1.0)*x6631*x6635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x6638=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x6638;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x6638);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x6639=((1.0)*cj11);
IkReal x6640=((((-1.0)*r00*sj11))+(((-1.0)*r01*x6639)));
j10eval[0]=x6640;
j10eval[1]=((IKabs((((r21*sj11))+(((-1.0)*r20*x6639)))))+(IKabs(r22)));
j10eval[2]=IKsign(x6640);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x6641=cj11*cj11;
IkReal x6642=r11*r11;
IkReal x6643=(r11*sj11);
IkReal x6644=(cj11*r10);
IkReal x6645=((r12*r12)+(((-1.0)*x6641*x6642))+x6642+((x6641*(r10*r10)))+(((-2.0)*x6643*x6644)));
j10eval[0]=x6645;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6643))+x6644))));
j10eval[2]=IKsign(x6645);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6646=cj11*cj11;
IkReal x6647=r11*r11;
IkReal x6648=(cj11*r10);
IkReal x6649=(r11*sj11);
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal(((((-1.0)*x6649))+x6648)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
CheckValue<IkReal> x6651=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6647+((x6646*(r10*r10)))+(((-1.0)*x6646*x6647))+(((-2.0)*x6648*x6649)))),-1);
if(!x6651.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6650.value)+(((1.5707963267949)*(x6651.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6652=IKsin(j10);
IkReal x6653=IKcos(j10);
IkReal x6654=((1.0)*cj7);
IkReal x6655=(sj11*x6652);
IkReal x6656=((1.0)*x6653);
IkReal x6657=((1.0)*x6652);
IkReal x6658=(cj11*x6653);
evalcond[0]=((((-1.0)*r22*x6656))+(((-1.0)*cj11*r20*x6657))+((r21*x6655)));
evalcond[1]=(((r01*x6655))+(((-1.0)*cj11*r00*x6657))+(((-1.0)*r02*x6656)));
evalcond[2]=((((-1.0)*r12*x6657))+((r10*x6658))+(((-1.0)*r11*sj11*x6656)));
evalcond[3]=((1.0)+((r11*x6655))+(((-1.0)*r12*x6656))+(((-1.0)*cj11*r10*x6657)));
evalcond[4]=((((-1.0)*r22*x6657))+((r20*x6658))+(((-1.0)*cj8*x6654))+((sj7*sj8))+(((-1.0)*r21*sj11*x6656)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r00*x6658))+(((-1.0)*sj8*x6654))+(((-1.0)*r02*x6657))+(((-1.0)*r01*sj11*x6656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6659=((1.0)*cj11);
CheckValue<IkReal> x6660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6659))+(((-1.0)*r00*sj11)))),-1);
if(!x6660.valid){
continue;
}
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6659))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6660.value)))+(x6661.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6662=IKsin(j10);
IkReal x6663=IKcos(j10);
IkReal x6664=((1.0)*cj7);
IkReal x6665=(sj11*x6662);
IkReal x6666=((1.0)*x6663);
IkReal x6667=((1.0)*x6662);
IkReal x6668=(cj11*x6663);
evalcond[0]=((((-1.0)*cj11*r20*x6667))+((r21*x6665))+(((-1.0)*r22*x6666)));
evalcond[1]=(((r01*x6665))+(((-1.0)*cj11*r00*x6667))+(((-1.0)*r02*x6666)));
evalcond[2]=((((-1.0)*r12*x6667))+((r10*x6668))+(((-1.0)*r11*sj11*x6666)));
evalcond[3]=((1.0)+((r11*x6665))+(((-1.0)*r12*x6666))+(((-1.0)*cj11*r10*x6667)));
evalcond[4]=(((r20*x6668))+(((-1.0)*cj8*x6664))+((sj7*sj8))+(((-1.0)*r21*sj11*x6666))+(((-1.0)*r22*x6667)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x6664))+((r00*x6668))+(((-1.0)*r02*x6667))+(((-1.0)*r01*sj11*x6666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x6669.valid){
continue;
}
CheckValue<IkReal> x6670 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6670.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6669.value)))+(x6670.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6671=IKsin(j10);
IkReal x6672=IKcos(j10);
IkReal x6673=((1.0)*cj7);
IkReal x6674=(sj11*x6671);
IkReal x6675=((1.0)*x6672);
IkReal x6676=((1.0)*x6671);
IkReal x6677=(cj11*x6672);
evalcond[0]=((((-1.0)*cj11*r20*x6676))+(((-1.0)*r22*x6675))+((r21*x6674)));
evalcond[1]=((((-1.0)*r02*x6675))+(((-1.0)*cj11*r00*x6676))+((r01*x6674)));
evalcond[2]=((((-1.0)*r12*x6676))+(((-1.0)*r11*sj11*x6675))+((r10*x6677)));
evalcond[3]=((1.0)+((r11*x6674))+(((-1.0)*r12*x6675))+(((-1.0)*cj11*r10*x6676)));
evalcond[4]=((((-1.0)*r21*sj11*x6675))+((r20*x6677))+(((-1.0)*cj8*x6673))+((sj7*sj8))+(((-1.0)*r22*x6676)));
evalcond[5]=((((-1.0)*r02*x6676))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x6673))+((r00*x6677))+(((-1.0)*r01*sj11*x6675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x6678=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x6678;
j10eval[1]=IKsign(x6678);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x6679=((1.0)*cj11);
IkReal x6680=((((-1.0)*r21*x6679))+(((-1.0)*r20*sj11)));
j10eval[0]=x6680;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6679))+((r01*sj11))))));
j10eval[2]=IKsign(x6680);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x6681=r11*r11;
IkReal x6682=cj11*cj11;
IkReal x6683=(cj11*r10);
IkReal x6684=(r11*sj11);
IkReal x6685=((((2.0)*x6683*x6684))+(((-1.0)*x6682*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6681*x6682))+(((-1.0)*x6681)));
j10eval[0]=x6685;
j10eval[1]=((IKabs(r12))+(IKabs((x6683+(((-1.0)*x6684))))));
j10eval[2]=IKsign(x6685);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6686=r11*r11;
IkReal x6687=cj11*cj11;
IkReal x6688=(cj11*r10);
IkReal x6689=(r11*sj11);
CheckValue<IkReal> x6690=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6687*(r10*r10)))+(((2.0)*x6688*x6689))+(((-1.0)*(r12*r12)))+((x6686*x6687))+(((-1.0)*x6686)))),-1);
if(!x6690.valid){
continue;
}
CheckValue<IkReal> x6691 = IKatan2WithCheck(IkReal((x6688+(((-1.0)*x6689)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6691.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6690.value)))+(x6691.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6692=IKsin(j10);
IkReal x6693=IKcos(j10);
IkReal x6694=(sj11*x6692);
IkReal x6695=((1.0)*x6693);
IkReal x6696=((1.0)*x6692);
IkReal x6697=(cj11*x6693);
evalcond[0]=(((r21*x6694))+(((-1.0)*cj11*r20*x6696))+(((-1.0)*r22*x6695)));
evalcond[1]=((((-1.0)*r02*x6695))+(((-1.0)*cj11*r00*x6696))+((r01*x6694)));
evalcond[2]=(((r10*x6697))+(((-1.0)*r12*x6696))+(((-1.0)*r11*sj11*x6695)));
evalcond[3]=((-1.0)+((r11*x6694))+(((-1.0)*cj11*r10*x6696))+(((-1.0)*r12*x6695)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r02*x6696))+(((-1.0)*r01*sj11*x6695))+((r00*x6697))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r21*sj11*x6695))+((r20*x6697))+((sj7*sj8))+(((-1.0)*r22*x6696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6698=((1.0)*cj11);
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6698))+(((-1.0)*r20*sj11)))),-1);
if(!x6699.valid){
continue;
}
CheckValue<IkReal> x6700 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6698))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6700.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6699.value)))+(x6700.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6701=IKsin(j10);
IkReal x6702=IKcos(j10);
IkReal x6703=(sj11*x6701);
IkReal x6704=((1.0)*x6702);
IkReal x6705=((1.0)*x6701);
IkReal x6706=(cj11*x6702);
evalcond[0]=((((-1.0)*cj11*r20*x6705))+((r21*x6703))+(((-1.0)*r22*x6704)));
evalcond[1]=((((-1.0)*r02*x6704))+((r01*x6703))+(((-1.0)*cj11*r00*x6705)));
evalcond[2]=(((r10*x6706))+(((-1.0)*r12*x6705))+(((-1.0)*r11*sj11*x6704)));
evalcond[3]=((-1.0)+(((-1.0)*cj11*r10*x6705))+((r11*x6703))+(((-1.0)*r12*x6704)));
evalcond[4]=((((-1.0)*r02*x6705))+((cj8*sj7))+((r00*x6706))+(((-1.0)*r01*sj11*x6704))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x6705))+((r20*x6706))+((sj7*sj8))+(((-1.0)*r21*sj11*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x6707 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6707.valid){
continue;
}
CheckValue<IkReal> x6708=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x6708.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6707.value)+(((1.5707963267949)*(x6708.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6709=IKsin(j10);
IkReal x6710=IKcos(j10);
IkReal x6711=(sj11*x6709);
IkReal x6712=((1.0)*x6710);
IkReal x6713=((1.0)*x6709);
IkReal x6714=(cj11*x6710);
evalcond[0]=((((-1.0)*cj11*r20*x6713))+((r21*x6711))+(((-1.0)*r22*x6712)));
evalcond[1]=((((-1.0)*r02*x6712))+(((-1.0)*cj11*r00*x6713))+((r01*x6711)));
evalcond[2]=((((-1.0)*r11*sj11*x6712))+(((-1.0)*r12*x6713))+((r10*x6714)));
evalcond[3]=((-1.0)+((r11*x6711))+(((-1.0)*cj11*r10*x6713))+(((-1.0)*r12*x6712)));
evalcond[4]=((((-1.0)*r01*sj11*x6712))+((cj8*sj7))+(((-1.0)*r02*x6713))+((cj7*sj8))+((r00*x6714)));
evalcond[5]=(((r20*x6714))+(((-1.0)*cj7*cj8))+(((-1.0)*r21*sj11*x6712))+((sj7*sj8))+(((-1.0)*r22*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6715=((-1.0)*r00);
IkReal x6717 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6717)==0){
continue;
}
IkReal x6716=pow(x6717,-0.5);
CheckValue<IkReal> x6718 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6715),IKFAST_ATAN2_MAGTHRESH);
if(!x6718.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6718.value));
IkReal gconst145=(r01*x6716);
IkReal gconst146=(x6715*x6716);
CheckValue<IkReal> x6719 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6719.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x6719.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x6720=((-1.0)*r00);
IkReal x6721=x6716;
CheckValue<IkReal> x6723 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6720),IKFAST_ATAN2_MAGTHRESH);
if(!x6723.valid){
continue;
}
IkReal x6722=((-1.0)*(x6723.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst145;
cj11=gconst146;
j11=x6722;
IkReal gconst144=x6722;
IkReal gconst145=(r01*x6721);
IkReal gconst146=(x6720*x6721);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6724=((1.0)*gconst145);
CheckValue<IkReal> x6725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6724))+(((-1.0)*gconst146*r21)))),-1);
if(!x6725.valid){
continue;
}
CheckValue<IkReal> x6726 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst146*r10*sj6))+(((-1.0)*r11*sj6*x6724))+((cj6*gconst146*r00))+(((-1.0)*cj6*r01*x6724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6726.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6725.value)))+(x6726.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6727=IKsin(j10);
IkReal x6728=IKcos(j10);
IkReal x6729=(gconst145*r21);
IkReal x6730=(gconst145*r01);
IkReal x6731=((1.0)*cj8);
IkReal x6732=(gconst145*r11);
IkReal x6733=((1.0)*cj7*sj8);
IkReal x6734=((1.0)*x6728);
IkReal x6735=((1.0)*x6727);
IkReal x6736=(gconst146*x6728);
IkReal x6737=(gconst146*x6735);
evalcond[0]=((((-1.0)*r20*x6737))+(((-1.0)*r22*x6734))+((x6727*x6729)));
evalcond[1]=((((-1.0)*r10*x6737))+cj6+(((-1.0)*r12*x6734))+((x6727*x6732)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x6737))+(((-1.0)*r02*x6734))+((x6727*x6730)));
evalcond[3]=((((-1.0)*r22*x6735))+(((-1.0)*cj7*x6731))+((r20*x6736))+((sj7*sj8))+(((-1.0)*x6729*x6734)));
evalcond[4]=((((-1.0)*x6730*x6734))+(((-1.0)*r02*x6735))+(((-1.0)*cj6*x6733))+(((-1.0)*cj6*sj7*x6731))+((r00*x6736)));
evalcond[5]=((((-1.0)*r12*x6735))+(((-1.0)*sj6*sj7*x6731))+((r10*x6736))+(((-1.0)*sj6*x6733))+(((-1.0)*x6732*x6734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6738=((1.0)*gconst146);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6738))+(((-1.0)*gconst145*r10)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6738))+((gconst145*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j10);
IkReal x6742=IKcos(j10);
IkReal x6743=(gconst145*r21);
IkReal x6744=(gconst145*r01);
IkReal x6745=((1.0)*cj8);
IkReal x6746=(gconst145*r11);
IkReal x6747=((1.0)*cj7*sj8);
IkReal x6748=((1.0)*x6742);
IkReal x6749=((1.0)*x6741);
IkReal x6750=(gconst146*x6742);
IkReal x6751=(gconst146*x6749);
evalcond[0]=((((-1.0)*r20*x6751))+(((-1.0)*r22*x6748))+((x6741*x6743)));
evalcond[1]=((((-1.0)*r12*x6748))+cj6+((x6741*x6746))+(((-1.0)*r10*x6751)));
evalcond[2]=((((-1.0)*sj6))+((x6741*x6744))+(((-1.0)*r02*x6748))+(((-1.0)*r00*x6751)));
evalcond[3]=((((-1.0)*r22*x6749))+(((-1.0)*cj7*x6745))+((r20*x6750))+(((-1.0)*x6743*x6748))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x6744*x6748))+((r00*x6750))+(((-1.0)*r02*x6749))+(((-1.0)*cj6*sj7*x6745))+(((-1.0)*cj6*x6747)));
evalcond[5]=((((-1.0)*r12*x6749))+(((-1.0)*sj6*sj7*x6745))+(((-1.0)*x6746*x6748))+((r10*x6750))+(((-1.0)*sj6*x6747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6752=((-1.0)*r01);
IkReal x6754 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6754)==0){
continue;
}
IkReal x6753=pow(x6754,-0.5);
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal(x6752),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6755.value))));
IkReal gconst148=(x6752*x6753);
IkReal gconst149=((1.0)*r00*x6753);
CheckValue<IkReal> x6756 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6756.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x6756.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x6757=((-1.0)*r01);
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal(x6757),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
IkReal x6758=((1.0)*(x6760.value));
IkReal x6759=x6753;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x6758)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6758)));
IkReal gconst148=(x6757*x6759);
IkReal gconst149=((1.0)*r00*x6759);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=cj6;
j10eval[3]=r22;
j10eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x6761=((-1.0)*r01);
CheckValue<IkReal> x6764 = IKatan2WithCheck(IkReal(x6761),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6764.valid){
continue;
}
IkReal x6762=((1.0)*(x6764.value));
IkReal x6763=x6753;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x6762)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6762)));
IkReal gconst148=(x6761*x6763);
IkReal gconst149=((1.0)*r00*x6763);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6765=((-1.0)*r01);
CheckValue<IkReal> x6768 = IKatan2WithCheck(IkReal(x6765),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6768.valid){
continue;
}
IkReal x6766=((1.0)*(x6768.value));
IkReal x6767=x6753;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x6766)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6766)));
IkReal gconst148=(x6765*x6767);
IkReal gconst149=((1.0)*r00*x6767);
IkReal x6769=r02*r02;
IkReal x6770=(r12*sj6);
IkReal x6771=x6753;
IkReal x6772=(cj6*x6771);
j10eval[0]=((IKabs(((((-1.0)*x6770))+(((-1.0)*cj6*r02)))))+(IKabs((((r02*x6770*x6771))+((x6769*x6772))+(((-1.0)*x6772))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6773=((1.0)*gconst148);
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x6773)))),-1);
if(!x6774.valid){
continue;
}
CheckValue<IkReal> x6775 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x6773))+((gconst149*r10*sj6))+(((-1.0)*r11*sj6*x6773))+((cj6*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6775.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6774.value)))+(x6775.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6776=IKsin(j10);
IkReal x6777=IKcos(j10);
IkReal x6778=(gconst149*r00);
IkReal x6779=(gconst149*r10);
IkReal x6780=((1.0)*cj8);
IkReal x6781=(gconst149*r20);
IkReal x6782=((1.0)*x6776);
IkReal x6783=(gconst148*x6776);
IkReal x6784=((1.0)*x6777);
IkReal x6785=((1.0)*cj7*sj8);
evalcond[0]=(((r21*x6783))+(((-1.0)*x6781*x6782))+(((-1.0)*r22*x6784)));
evalcond[1]=(cj6+((r11*x6783))+(((-1.0)*r12*x6784))+(((-1.0)*x6779*x6782)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x6778*x6782))+(((-1.0)*r02*x6784))+((r01*x6783)));
evalcond[3]=((((-1.0)*gconst148*r21*x6784))+((x6777*x6781))+(((-1.0)*cj7*x6780))+(((-1.0)*r22*x6782))+((sj7*sj8)));
evalcond[4]=(((x6777*x6778))+(((-1.0)*cj6*sj7*x6780))+(((-1.0)*r02*x6782))+(((-1.0)*gconst148*r01*x6784))+(((-1.0)*cj6*x6785)));
evalcond[5]=(((x6777*x6779))+(((-1.0)*sj6*sj7*x6780))+(((-1.0)*r12*x6782))+(((-1.0)*gconst148*r11*x6784))+(((-1.0)*sj6*x6785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6786=((1.0)*gconst149);
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6786))+((gconst148*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
CheckValue<IkReal> x6788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6786))+(((-1.0)*gconst148*r10)))),-1);
if(!x6788.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6787.value)+(((1.5707963267949)*(x6788.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6789=IKsin(j10);
IkReal x6790=IKcos(j10);
IkReal x6791=(gconst149*r00);
IkReal x6792=(gconst149*r10);
IkReal x6793=((1.0)*cj8);
IkReal x6794=(gconst149*r20);
IkReal x6795=((1.0)*x6789);
IkReal x6796=(gconst148*x6789);
IkReal x6797=((1.0)*x6790);
IkReal x6798=((1.0)*cj7*sj8);
evalcond[0]=(((r21*x6796))+(((-1.0)*r22*x6797))+(((-1.0)*x6794*x6795)));
evalcond[1]=(cj6+(((-1.0)*x6792*x6795))+((r11*x6796))+(((-1.0)*r12*x6797)));
evalcond[2]=((((-1.0)*sj6))+((r01*x6796))+(((-1.0)*x6791*x6795))+(((-1.0)*r02*x6797)));
evalcond[3]=((((-1.0)*cj7*x6793))+(((-1.0)*gconst148*r21*x6797))+(((-1.0)*r22*x6795))+((sj7*sj8))+((x6790*x6794)));
evalcond[4]=((((-1.0)*cj6*x6798))+((x6790*x6791))+(((-1.0)*cj6*sj7*x6793))+(((-1.0)*gconst148*r01*x6797))+(((-1.0)*r02*x6795)));
evalcond[5]=((((-1.0)*gconst148*r11*x6797))+(((-1.0)*sj6*x6798))+(((-1.0)*sj6*sj7*x6793))+((x6790*x6792))+(((-1.0)*r12*x6795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6799=((1.0)*gconst149);
CheckValue<IkReal> x6800 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst148*r21))+(((-1.0)*cj6*r20*x6799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6800.valid){
continue;
}
CheckValue<IkReal> x6801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6799))+(((-1.0)*gconst148*r00)))),-1);
if(!x6801.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6800.value)+(((1.5707963267949)*(x6801.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6802=IKsin(j10);
IkReal x6803=IKcos(j10);
IkReal x6804=(gconst149*r00);
IkReal x6805=(gconst149*r10);
IkReal x6806=((1.0)*cj8);
IkReal x6807=(gconst149*r20);
IkReal x6808=((1.0)*x6802);
IkReal x6809=(gconst148*x6802);
IkReal x6810=((1.0)*x6803);
IkReal x6811=((1.0)*cj7*sj8);
evalcond[0]=(((r21*x6809))+(((-1.0)*x6807*x6808))+(((-1.0)*r22*x6810)));
evalcond[1]=(cj6+((r11*x6809))+(((-1.0)*x6805*x6808))+(((-1.0)*r12*x6810)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x6804*x6808))+((r01*x6809))+(((-1.0)*r02*x6810)));
evalcond[3]=((((-1.0)*gconst148*r21*x6810))+(((-1.0)*cj7*x6806))+(((-1.0)*r22*x6808))+((x6803*x6807))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*sj7*x6806))+(((-1.0)*r02*x6808))+((x6803*x6804))+(((-1.0)*cj6*x6811))+(((-1.0)*gconst148*r01*x6810)));
evalcond[5]=((((-1.0)*sj6*x6811))+(((-1.0)*sj6*sj7*x6806))+(((-1.0)*r12*x6808))+((x6803*x6805))+(((-1.0)*gconst148*r11*x6810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x6812=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x6812;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x6812);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x6813=((1.0)*cj11);
IkReal x6814=((((-1.0)*r11*x6813))+(((-1.0)*r10*sj11)));
j10eval[0]=x6814;
j10eval[1]=IKsign(x6814);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6813))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x6815=r01*r01;
IkReal x6816=cj11*cj11;
IkReal x6817=(r01*sj11);
IkReal x6818=(cj11*r00);
IkReal x6819=((((-1.0)*x6815))+(((-1.0)*(r02*r02)))+((x6815*x6816))+(((-1.0)*x6816*(r00*r00)))+(((2.0)*x6817*x6818)));
j10eval[0]=x6819;
j10eval[1]=((IKabs(((((-1.0)*x6817))+x6818)))+(IKabs(r02)));
j10eval[2]=IKsign(x6819);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6820=r01*r01;
IkReal x6821=cj11*cj11;
IkReal x6822=(r01*sj11);
IkReal x6823=(cj11*r00);
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x6822*x6823))+(((-1.0)*x6820))+((x6820*x6821))+(((-1.0)*x6821*(r00*r00))))),-1);
if(!x6824.valid){
continue;
}
CheckValue<IkReal> x6825 = IKatan2WithCheck(IkReal(((((-1.0)*x6822))+x6823)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6825.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6824.value)))+(x6825.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6826=IKsin(j10);
IkReal x6827=IKcos(j10);
IkReal x6828=((1.0)*cj7);
IkReal x6829=(cj11*r00);
IkReal x6830=(sj11*x6826);
IkReal x6831=((1.0)*x6827);
IkReal x6832=((1.0)*x6826);
IkReal x6833=(cj11*x6827);
evalcond[0]=(((r21*x6830))+(((-1.0)*r22*x6831))+(((-1.0)*cj11*r20*x6832)));
evalcond[1]=((((-1.0)*r12*x6831))+((r11*x6830))+(((-1.0)*cj11*r10*x6832)));
evalcond[2]=((((-1.0)*r02*x6832))+(((-1.0)*r01*sj11*x6831))+((x6827*x6829)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6831))+((r01*x6830))+(((-1.0)*x6829*x6832)));
evalcond[4]=((((-1.0)*r21*sj11*x6831))+((r20*x6833))+(((-1.0)*r22*x6832))+((sj7*sj8))+(((-1.0)*cj8*x6828)));
evalcond[5]=((((-1.0)*sj8*x6828))+(((-1.0)*cj8*sj7))+(((-1.0)*r11*sj11*x6831))+(((-1.0)*r12*x6832))+((r10*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6834=((1.0)*cj11);
CheckValue<IkReal> x6835 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x6834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6835.valid){
continue;
}
CheckValue<IkReal> x6836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6834))+(((-1.0)*r10*sj11)))),-1);
if(!x6836.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6835.value)+(((1.5707963267949)*(x6836.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6837=IKsin(j10);
IkReal x6838=IKcos(j10);
IkReal x6839=((1.0)*cj7);
IkReal x6840=(cj11*r00);
IkReal x6841=(sj11*x6837);
IkReal x6842=((1.0)*x6838);
IkReal x6843=((1.0)*x6837);
IkReal x6844=(cj11*x6838);
evalcond[0]=(((r21*x6841))+(((-1.0)*r22*x6842))+(((-1.0)*cj11*r20*x6843)));
evalcond[1]=(((r11*x6841))+(((-1.0)*r12*x6842))+(((-1.0)*cj11*r10*x6843)));
evalcond[2]=(((x6838*x6840))+(((-1.0)*r01*sj11*x6842))+(((-1.0)*r02*x6843)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6842))+((r01*x6841))+(((-1.0)*x6840*x6843)));
evalcond[4]=((((-1.0)*r22*x6843))+(((-1.0)*r21*sj11*x6842))+((r20*x6844))+((sj7*sj8))+(((-1.0)*cj8*x6839)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r11*sj11*x6842))+(((-1.0)*r12*x6843))+(((-1.0)*sj8*x6839))+((r10*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x6845=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x6845.valid){
continue;
}
CheckValue<IkReal> x6846 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6846.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6845.value)))+(x6846.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6847=IKsin(j10);
IkReal x6848=IKcos(j10);
IkReal x6849=((1.0)*cj7);
IkReal x6850=(cj11*r00);
IkReal x6851=(sj11*x6847);
IkReal x6852=((1.0)*x6848);
IkReal x6853=((1.0)*x6847);
IkReal x6854=(cj11*x6848);
evalcond[0]=(((r21*x6851))+(((-1.0)*r22*x6852))+(((-1.0)*cj11*r20*x6853)));
evalcond[1]=((((-1.0)*r12*x6852))+(((-1.0)*cj11*r10*x6853))+((r11*x6851)));
evalcond[2]=((((-1.0)*r02*x6853))+((x6848*x6850))+(((-1.0)*r01*sj11*x6852)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6852))+((r01*x6851))+(((-1.0)*x6850*x6853)));
evalcond[4]=((((-1.0)*cj8*x6849))+((r20*x6854))+(((-1.0)*r22*x6853))+((sj7*sj8))+(((-1.0)*r21*sj11*x6852)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r10*x6854))+(((-1.0)*r11*sj11*x6852))+(((-1.0)*r12*x6853))+(((-1.0)*sj8*x6849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x6855=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x6855;
j10eval[1]=IKsign(x6855);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x6856=((1.0)*cj11);
IkReal x6857=((((-1.0)*r20*sj11))+(((-1.0)*r21*x6856)));
j10eval[0]=x6857;
j10eval[1]=((IKabs((((r11*sj11))+(((-1.0)*r10*x6856)))))+(IKabs(r12)));
j10eval[2]=IKsign(x6857);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x6858=cj11*cj11;
IkReal x6859=r01*r01;
IkReal x6860=(cj11*r00);
IkReal x6861=(r01*sj11);
IkReal x6862=((((-2.0)*x6860*x6861))+((x6858*(r00*r00)))+x6859+(((-1.0)*x6858*x6859))+(r02*r02));
j10eval[0]=x6862;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6861))+x6860))));
j10eval[2]=IKsign(x6862);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6863=cj11*cj11;
IkReal x6864=r01*r01;
IkReal x6865=(r01*sj11);
IkReal x6866=(cj11*r00);
CheckValue<IkReal> x6867 = IKatan2WithCheck(IkReal(((((-1.0)*x6865))+x6866)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6867.valid){
continue;
}
CheckValue<IkReal> x6868=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6865*x6866))+(((-1.0)*x6863*x6864))+x6864+(r02*r02)+((x6863*(r00*r00))))),-1);
if(!x6868.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6867.value)+(((1.5707963267949)*(x6868.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6869=IKsin(j10);
IkReal x6870=IKcos(j10);
IkReal x6871=(cj11*r00);
IkReal x6872=(sj11*x6869);
IkReal x6873=((1.0)*x6870);
IkReal x6874=((1.0)*x6869);
IkReal x6875=(cj11*x6870);
evalcond[0]=(((r21*x6872))+(((-1.0)*r22*x6873))+(((-1.0)*cj11*r20*x6874)));
evalcond[1]=(((r11*x6872))+(((-1.0)*r12*x6873))+(((-1.0)*cj11*r10*x6874)));
evalcond[2]=(((x6870*x6871))+(((-1.0)*r01*sj11*x6873))+(((-1.0)*r02*x6874)));
evalcond[3]=((1.0)+(((-1.0)*x6871*x6874))+(((-1.0)*r02*x6873))+((r01*x6872)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r11*sj11*x6873))+(((-1.0)*r12*x6874))+((cj7*sj8))+((r10*x6875)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x6874))+(((-1.0)*r21*sj11*x6873))+((sj7*sj8))+((r20*x6875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6876=((1.0)*cj11);
CheckValue<IkReal> x6877 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x6876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6877.valid){
continue;
}
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6876))+(((-1.0)*r20*sj11)))),-1);
if(!x6878.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6877.value)+(((1.5707963267949)*(x6878.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6879=IKsin(j10);
IkReal x6880=IKcos(j10);
IkReal x6881=(cj11*r00);
IkReal x6882=(sj11*x6879);
IkReal x6883=((1.0)*x6880);
IkReal x6884=((1.0)*x6879);
IkReal x6885=(cj11*x6880);
evalcond[0]=(((r21*x6882))+(((-1.0)*r22*x6883))+(((-1.0)*cj11*r20*x6884)));
evalcond[1]=((((-1.0)*cj11*r10*x6884))+((r11*x6882))+(((-1.0)*r12*x6883)));
evalcond[2]=(((x6880*x6881))+(((-1.0)*r01*sj11*x6883))+(((-1.0)*r02*x6884)));
evalcond[3]=((1.0)+(((-1.0)*x6881*x6884))+(((-1.0)*r02*x6883))+((r01*x6882)));
evalcond[4]=((((-1.0)*r11*sj11*x6883))+((cj8*sj7))+((cj7*sj8))+(((-1.0)*r12*x6884))+((r10*x6885)));
evalcond[5]=(((r20*x6885))+(((-1.0)*cj7*cj8))+(((-1.0)*r21*sj11*x6883))+((sj7*sj8))+(((-1.0)*r22*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x6886 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6886.valid){
continue;
}
CheckValue<IkReal> x6887=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x6887.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6886.value)+(((1.5707963267949)*(x6887.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6888=IKsin(j10);
IkReal x6889=IKcos(j10);
IkReal x6890=(cj11*r00);
IkReal x6891=(sj11*x6888);
IkReal x6892=((1.0)*x6889);
IkReal x6893=((1.0)*x6888);
IkReal x6894=(cj11*x6889);
evalcond[0]=(((r21*x6891))+(((-1.0)*r22*x6892))+(((-1.0)*cj11*r20*x6893)));
evalcond[1]=((((-1.0)*cj11*r10*x6893))+(((-1.0)*r12*x6892))+((r11*x6891)));
evalcond[2]=((((-1.0)*r01*sj11*x6892))+((x6889*x6890))+(((-1.0)*r02*x6893)));
evalcond[3]=((1.0)+(((-1.0)*x6890*x6893))+(((-1.0)*r02*x6892))+((r01*x6891)));
evalcond[4]=(((r10*x6894))+((cj8*sj7))+(((-1.0)*r12*x6893))+((cj7*sj8))+(((-1.0)*r11*sj11*x6892)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r21*sj11*x6892))+((sj7*sj8))+(((-1.0)*r22*x6893))+((r20*x6894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x6895=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6895);
rxp1_1=(px*r21);
rxp1_2=(r11*x6895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6896=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6896);
rxp1_1=(px*r21);
rxp1_2=(r11*x6896);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x6897=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6897);
rxp1_1=(px*r21);
rxp1_2=(r11*x6897);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=(((cj11*r10))+(((-1.0)*r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x6900=IKPowWithIntegerCheck((((cj11*r10))+(((-1.0)*r11*sj11))),-1);
if(!x6900.valid){
continue;
}
IkReal x6898=x6900.value;
IkReal x6899=(sj6*x6898);
cj10array[0]=(((cj7*sj8*x6899))+((cj8*sj7*x6899)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x6901=IKsin(j10);
IkReal x6902=IKcos(j10);
IkReal x6903=(cj11*r20);
IkReal x6904=(sj11*x6901);
IkReal x6905=((1.0)*x6902);
IkReal x6906=((1.0)*x6901);
evalcond[0]=((-1.0)*r02*x6901);
evalcond[1]=((((-1.0)*r02*x6905))+(((-1.0)*sj6)));
evalcond[2]=(((r21*x6904))+(((-1.0)*x6903*x6906)));
evalcond[3]=(((r11*x6904))+(((-1.0)*cj11*r10*x6906)));
evalcond[4]=((((-1.0)*cj7*cj8))+((sj7*sj8))+((x6902*x6903))+(((-1.0)*r21*sj11*x6905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x6908=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x6908.valid){
continue;
}
IkReal x6907=x6908.value;
cj10array[0]=(((cj7*cj8*x6907))+(((-1.0)*sj7*sj8*x6907)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x6909=IKsin(j10);
IkReal x6910=IKcos(j10);
IkReal x6911=(r11*sj11);
IkReal x6912=((1.0)*sj6);
IkReal x6913=((1.0)*x6910);
IkReal x6914=((1.0)*cj11*x6909);
evalcond[0]=((-1.0)*r02*x6909);
evalcond[1]=((((-1.0)*x6912))+(((-1.0)*r02*x6913)));
evalcond[2]=(((r21*sj11*x6909))+(((-1.0)*r20*x6914)));
evalcond[3]=(((x6909*x6911))+(((-1.0)*r10*x6914)));
evalcond[4]=(((cj11*r10*x6910))+(((-1.0)*x6911*x6913))+(((-1.0)*cj7*sj8*x6912))+(((-1.0)*cj8*sj7*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(r02,-1);
if(!x6915.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x6915.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x6916=IKsin(j10);
IkReal x6917=IKcos(j10);
IkReal x6918=(cj11*r20);
IkReal x6919=((1.0)*cj8);
IkReal x6920=(cj11*r10);
IkReal x6921=(sj11*x6916);
IkReal x6922=((1.0)*x6916);
IkReal x6923=((1.0)*sj11*x6917);
evalcond[0]=((-1.0)*r02*x6916);
evalcond[1]=((((-1.0)*x6918*x6922))+((r21*x6921)));
evalcond[2]=(((r11*x6921))+(((-1.0)*x6920*x6922)));
evalcond[3]=((((-1.0)*cj7*x6919))+((x6917*x6918))+(((-1.0)*r21*x6923))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj6*sj7*x6919))+(((-1.0)*cj7*sj6*sj8))+(((-1.0)*r11*x6923))+((x6917*x6920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6924=((1.0)*sj11);
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x6924)))),-1);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x6924))+((cj11*cj6*r00))+((cj11*r10*sj6))+(((-1.0)*cj6*r01*x6924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6925.value)))+(x6926.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6927=IKsin(j10);
IkReal x6928=IKcos(j10);
IkReal x6929=((1.0)*cj8);
IkReal x6930=(sj11*x6927);
IkReal x6931=((1.0)*cj7*sj8);
IkReal x6932=((1.0)*x6928);
IkReal x6933=((1.0)*x6927);
IkReal x6934=(cj11*x6928);
evalcond[0]=((((-1.0)*cj11*r20*x6933))+(((-1.0)*r22*x6932))+((r21*x6930)));
evalcond[1]=(cj6+(((-1.0)*cj11*r10*x6933))+((r11*x6930))+(((-1.0)*r12*x6932)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x6932))+((r01*x6930))+(((-1.0)*cj11*r00*x6933)));
evalcond[3]=(((r20*x6934))+(((-1.0)*r22*x6933))+(((-1.0)*cj7*x6929))+(((-1.0)*r21*sj11*x6932))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x6931))+((r00*x6934))+(((-1.0)*r02*x6933))+(((-1.0)*cj6*sj7*x6929))+(((-1.0)*r01*sj11*x6932)));
evalcond[5]=(((r10*x6934))+(((-1.0)*sj6*sj7*x6929))+(((-1.0)*r12*x6933))+(((-1.0)*sj6*x6931))+(((-1.0)*r11*sj11*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6935=((1.0)*cj11);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6935))+(((-1.0)*r10*sj11)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x6935))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6938=IKsin(j10);
IkReal x6939=IKcos(j10);
IkReal x6940=((1.0)*cj8);
IkReal x6941=(sj11*x6938);
IkReal x6942=((1.0)*cj7*sj8);
IkReal x6943=((1.0)*x6939);
IkReal x6944=((1.0)*x6938);
IkReal x6945=(cj11*x6939);
evalcond[0]=((((-1.0)*r22*x6943))+((r21*x6941))+(((-1.0)*cj11*r20*x6944)));
evalcond[1]=(cj6+(((-1.0)*r12*x6943))+(((-1.0)*cj11*r10*x6944))+((r11*x6941)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x6943))+((r01*x6941))+(((-1.0)*cj11*r00*x6944)));
evalcond[3]=((((-1.0)*cj7*x6940))+((r20*x6945))+(((-1.0)*r22*x6944))+((sj7*sj8))+(((-1.0)*r21*sj11*x6943)));
evalcond[4]=((((-1.0)*cj6*x6942))+(((-1.0)*cj6*sj7*x6940))+(((-1.0)*r01*sj11*x6943))+(((-1.0)*r02*x6944))+((r00*x6945)));
evalcond[5]=(((r10*x6945))+(((-1.0)*r12*x6944))+(((-1.0)*r11*sj11*x6943))+(((-1.0)*sj6*x6942))+(((-1.0)*sj6*sj7*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6946=((1.0)*cj11);
CheckValue<IkReal> x6947 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x6946))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6947.valid){
continue;
}
CheckValue<IkReal> x6948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x6946)))),-1);
if(!x6948.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6947.value)+(((1.5707963267949)*(x6948.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x6949=IKsin(j10);
IkReal x6950=IKcos(j10);
IkReal x6951=((1.0)*cj8);
IkReal x6952=(sj11*x6949);
IkReal x6953=((1.0)*cj7*sj8);
IkReal x6954=((1.0)*x6950);
IkReal x6955=((1.0)*x6949);
IkReal x6956=(cj11*x6950);
evalcond[0]=((((-1.0)*r22*x6954))+((r21*x6952))+(((-1.0)*cj11*r20*x6955)));
evalcond[1]=(cj6+(((-1.0)*r12*x6954))+(((-1.0)*cj11*r10*x6955))+((r11*x6952)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x6954))+((r01*x6952))+(((-1.0)*cj11*r00*x6955)));
evalcond[3]=((((-1.0)*cj7*x6951))+((r20*x6956))+(((-1.0)*r22*x6955))+((sj7*sj8))+(((-1.0)*r21*sj11*x6954)));
evalcond[4]=((((-1.0)*cj6*x6953))+(((-1.0)*r01*sj11*x6954))+(((-1.0)*cj6*sj7*x6951))+(((-1.0)*r02*x6955))+((r00*x6956)));
evalcond[5]=(((r10*x6956))+(((-1.0)*r12*x6955))+(((-1.0)*r11*sj11*x6954))+(((-1.0)*sj6*x6953))+(((-1.0)*sj6*sj7*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6957=cj11*cj11;
IkReal x6958=r21*r21;
IkReal x6959=(sj7*sj8);
IkReal x6960=(r21*sj11);
IkReal x6961=(cj11*r20);
IkReal x6962=((1.0)*cj7*cj8);
CheckValue<IkReal> x6963=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6958+(((-1.0)*x6957*x6958))+((x6957*(r20*r20)))+(((-2.0)*x6960*x6961)))),-1);
if(!x6963.valid){
continue;
}
CheckValue<IkReal> x6964 = IKatan2WithCheck(IkReal((((r22*x6959))+(((-1.0)*r22*x6962)))),IkReal(((((-1.0)*x6959*x6961))+((x6959*x6960))+((cj7*cj8*x6961))+(((-1.0)*x6960*x6962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6964.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6963.value)))+(x6964.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6965=IKsin(j10);
IkReal x6966=IKcos(j10);
IkReal x6967=((1.0)*r22);
IkReal x6968=(cj11*r20);
IkReal x6969=(r21*sj11);
evalcond[0]=(((x6965*x6969))+(((-1.0)*x6966*x6967))+(((-1.0)*x6965*x6968)));
evalcond[1]=((((-1.0)*x6965*x6967))+(((-1.0)*cj7*cj8))+((x6966*x6968))+(((-1.0)*x6966*x6969))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x6970=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x6970))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x6970))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x6970))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x6970))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x6970))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x6970))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x6971=IKcos(j6);
IkReal x6972=IKsin(j6);
IkReal x6973=(cj11*r10);
IkReal x6974=((1.0)*sj11);
IkReal x6975=(sj10*sj11);
IkReal x6976=((1.0)*r02);
IkReal x6977=((1.0)*sj10);
IkReal x6978=(cj11*r00);
IkReal x6979=((1.0)*sj8);
IkReal x6980=((0.39225)*sj8);
IkReal x6981=((0.09465)*cj11);
IkReal x6982=((0.09465)*sj11);
IkReal x6983=((1.0)*cj11);
IkReal x6984=((0.39225)*cj8*sj7);
IkReal x6985=(cj7*x6971);
IkReal x6986=(cj7*x6972);
IkReal x6987=(sj7*x6971);
IkReal x6988=((1.0)*sj7*x6972);
evalcond[0]=(x6971+(((-1.0)*x6973*x6977))+(((-1.0)*cj10*r12))+((r11*x6975)));
evalcond[1]=((((-1.0)*x6972))+((r01*x6975))+(((-1.0)*x6977*x6978))+(((-1.0)*cj10*x6976)));
evalcond[2]=(((cj8*x6985))+(((-1.0)*x6979*x6987))+(((-1.0)*r01*x6983))+(((-1.0)*r00*x6974)));
evalcond[3]=((((-1.0)*sj7*x6972*x6979))+(((-1.0)*r10*x6974))+((cj8*x6986))+(((-1.0)*r11*x6983)));
evalcond[4]=((((-1.0)*cj10*r01*x6974))+((cj10*x6978))+(((-1.0)*sj10*x6976))+(((-1.0)*x6979*x6985))+(((-1.0)*cj8*x6987)));
evalcond[5]=((((-1.0)*cj10*r11*x6974))+((cj10*x6973))+(((-1.0)*r12*x6977))+(((-1.0)*x6979*x6986))+(((-1.0)*cj8*x6988)));
evalcond[6]=(((x6980*x6985))+(((-1.0)*px))+(((-1.0)*r00*x6982))+(((-0.10915)*x6972))+(((0.425)*x6987))+(((-1.0)*r01*x6981))+((x6971*x6984)));
evalcond[7]=((((-1.0)*r10*x6982))+(((0.10915)*x6971))+(((0.425)*sj7*x6972))+((x6980*x6986))+(((-1.0)*py))+((x6972*x6984))+(((-1.0)*r11*x6981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x6989 = IKatan2WithCheck(IkReal((((cj11*r11))+((r10*sj11)))),IkReal((((r00*sj11))+((cj11*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6989.valid){
continue;
}
CheckValue<IkReal> x6990=IKPowWithIntegerCheck(IKsign((((cj7*cj8))+(((-1.0)*sj7*sj8)))),-1);
if(!x6990.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x6989.value)+(((1.5707963267949)*(x6990.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x6991=IKcos(j6);
IkReal x6992=IKsin(j6);
IkReal x6993=(cj7*cj8);
IkReal x6994=((1.0)*sj11);
IkReal x6995=((0.39225)*cj7);
IkReal x6996=((1.0)*sj7);
IkReal x6997=((0.09465)*cj11);
IkReal x6998=((0.09465)*sj11);
IkReal x6999=((0.425)*sj7);
IkReal x7000=((1.0)*cj11);
IkReal x7001=((0.39225)*cj8*sj7);
IkReal x7002=(sj8*x6992);
IkReal x7003=(sj8*x6991);
evalcond[0]=((((-1.0)*r00*x6994))+((x6991*x6993))+(((-1.0)*r01*x7000))+(((-1.0)*x6996*x7003)));
evalcond[1]=((((-1.0)*r11*x7000))+((x6992*x6993))+(((-1.0)*r10*x6994))+(((-1.0)*x6996*x7002)));
evalcond[2]=((((-0.10915)*x6992))+(((-1.0)*r00*x6998))+((x6995*x7003))+((x6991*x6999))+(((-1.0)*px))+((x6991*x7001))+(((-1.0)*r01*x6997)));
evalcond[3]=((((-1.0)*r11*x6997))+((x6995*x7002))+((x6992*x6999))+(((-1.0)*r10*x6998))+(((-1.0)*py))+(((0.10915)*x6991))+((x6992*x7001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x7004=((1.0)*cj11);
IkReal x7005=((((-1.0)*r01*x7004))+(((-1.0)*r00*sj11)));
j10eval[0]=x7005;
j10eval[1]=IKsign(x7005);
j10eval[2]=((IKabs((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x7004)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x7006=((1.0)*cj11);
IkReal x7007=((((-1.0)*r11*x7006))+(((-1.0)*r10*sj11)));
j10eval[0]=x7007;
j10eval[1]=((IKabs((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x7006)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x7007);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x7008=((1.0)*sj11);
IkReal x7009=((((-1.0)*r20*x7008))+(((-1.0)*cj11*r21)));
j10eval[0]=x7009;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*r11*sj6*x7008))+((cj11*cj6*r00))+(((-1.0)*cj6*r01*x7008))+((cj11*r10*sj6))))));
j10eval[2]=IKsign(x7009);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7010=((-1.0)*r20);
IkReal x7012 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7012)==0){
continue;
}
IkReal x7011=pow(x7012,-0.5);
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7010),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7013.value));
IkReal gconst133=(r21*x7011);
IkReal gconst134=(x7010*x7011);
CheckValue<IkReal> x7014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x7014.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7015=((-1.0)*r20);
IkReal x7016=x7011;
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7015),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
IkReal x7017=((-1.0)*(x7018.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x7017;
IkReal gconst132=x7017;
IkReal gconst133=(r21*x7016);
IkReal gconst134=(x7015*x7016);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7019=((-1.0)*r20);
IkReal x7020=x7011;
CheckValue<IkReal> x7022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7019),IKFAST_ATAN2_MAGTHRESH);
if(!x7022.valid){
continue;
}
IkReal x7021=((-1.0)*(x7022.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x7021;
IkReal gconst132=x7021;
IkReal gconst133=(r21*x7020);
IkReal gconst134=(x7019*x7020);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7023=((-1.0)*r20);
IkReal x7024=x7011;
CheckValue<IkReal> x7026 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7023),IKFAST_ATAN2_MAGTHRESH);
if(!x7026.valid){
continue;
}
IkReal x7025=((-1.0)*(x7026.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst133;
cj11=gconst134;
j11=x7025;
IkReal gconst132=x7025;
IkReal gconst133=(r21*x7024);
IkReal gconst134=(x7023*x7024);
IkReal x7027=r22*r22;
CheckValue<IkReal> x7030=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7027))),-1);
if(!x7030.valid){
continue;
}
IkReal x7028=x7030.value;
IkReal x7029=(x7027+((x7028*(r20*r20*r20*r20)))+((x7028*(r21*r21*r21*r21)))+(((2.0)*x7028*(r20*r20)*(r21*r21))));
j10eval[0]=x7029;
j10eval[1]=IKsign(x7029);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7031=(gconst133*r21);
IkReal x7032=(sj7*sj8);
IkReal x7033=(cj7*cj8);
IkReal x7034=(gconst134*r20);
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7031*x7034))+(x7031*x7031)+(x7034*x7034))),-1);
if(!x7035.valid){
continue;
}
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7033))+((r22*x7032)))),IkReal(((((-1.0)*x7032*x7034))+(((-1.0)*x7031*x7033))+((x7031*x7032))+((x7033*x7034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7035.value)))+(x7036.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7037=IKsin(j10);
IkReal x7038=IKcos(j10);
IkReal x7039=(gconst133*r21);
IkReal x7040=(gconst133*r01);
IkReal x7041=(gconst133*r11);
IkReal x7042=((1.0)*cj8);
IkReal x7043=((1.0)*x7038);
IkReal x7044=(gconst134*x7038);
IkReal x7045=((1.0)*cj7*sj8);
IkReal x7046=((1.0)*x7037);
evalcond[0]=((((-1.0)*r22*x7043))+((x7037*x7039))+(((-1.0)*gconst134*r20*x7046)));
evalcond[1]=(cj6+(((-1.0)*r12*x7043))+((x7037*x7041))+(((-1.0)*gconst134*r10*x7046)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x7043))+((x7037*x7040))+(((-1.0)*gconst134*r00*x7046)));
evalcond[3]=((((-1.0)*cj7*x7042))+(((-1.0)*r22*x7046))+((r20*x7044))+((sj7*sj8))+(((-1.0)*x7039*x7043)));
evalcond[4]=((((-1.0)*cj6*x7045))+((r00*x7044))+(((-1.0)*r02*x7046))+(((-1.0)*x7040*x7043))+(((-1.0)*cj6*sj7*x7042)));
evalcond[5]=((((-1.0)*sj6*x7045))+(((-1.0)*r12*x7046))+((r10*x7044))+(((-1.0)*sj6*sj7*x7042))+(((-1.0)*x7041*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7047=((1.0)*gconst134);
CheckValue<IkReal> x7048=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7047)))),-1);
if(!x7048.valid){
continue;
}
CheckValue<IkReal> x7049 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst133*r21*sj6))+(((-1.0)*r20*sj6*x7047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7049.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7048.value)))+(x7049.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7050=IKsin(j10);
IkReal x7051=IKcos(j10);
IkReal x7052=(gconst133*r21);
IkReal x7053=(gconst133*r01);
IkReal x7054=(gconst133*r11);
IkReal x7055=((1.0)*cj8);
IkReal x7056=((1.0)*x7051);
IkReal x7057=(gconst134*x7051);
IkReal x7058=((1.0)*cj7*sj8);
IkReal x7059=((1.0)*x7050);
evalcond[0]=((((-1.0)*r22*x7056))+((x7050*x7052))+(((-1.0)*gconst134*r20*x7059)));
evalcond[1]=(cj6+((x7050*x7054))+(((-1.0)*gconst134*r10*x7059))+(((-1.0)*r12*x7056)));
evalcond[2]=((((-1.0)*sj6))+((x7050*x7053))+(((-1.0)*gconst134*r00*x7059))+(((-1.0)*r02*x7056)));
evalcond[3]=(((r20*x7057))+(((-1.0)*r22*x7059))+(((-1.0)*cj7*x7055))+(((-1.0)*x7052*x7056))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x7058))+(((-1.0)*x7053*x7056))+((r00*x7057))+(((-1.0)*cj6*sj7*x7055))+(((-1.0)*r02*x7059)));
evalcond[5]=(((r10*x7057))+(((-1.0)*x7054*x7056))+(((-1.0)*sj6*sj7*x7055))+(((-1.0)*sj6*x7058))+(((-1.0)*r12*x7059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7060=((1.0)*gconst134);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x7060))+((cj6*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7060)))),-1);
if(!x7062.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j10);
IkReal x7064=IKcos(j10);
IkReal x7065=(gconst133*r21);
IkReal x7066=(gconst133*r01);
IkReal x7067=(gconst133*r11);
IkReal x7068=((1.0)*cj8);
IkReal x7069=((1.0)*x7064);
IkReal x7070=(gconst134*x7064);
IkReal x7071=((1.0)*cj7*sj8);
IkReal x7072=((1.0)*x7063);
evalcond[0]=(((x7063*x7065))+(((-1.0)*gconst134*r20*x7072))+(((-1.0)*r22*x7069)));
evalcond[1]=((((-1.0)*gconst134*r10*x7072))+cj6+((x7063*x7067))+(((-1.0)*r12*x7069)));
evalcond[2]=((((-1.0)*sj6))+((x7063*x7066))+(((-1.0)*r02*x7069))+(((-1.0)*gconst134*r00*x7072)));
evalcond[3]=((((-1.0)*cj7*x7068))+(((-1.0)*x7065*x7069))+((r20*x7070))+((sj7*sj8))+(((-1.0)*r22*x7072)));
evalcond[4]=((((-1.0)*cj6*sj7*x7068))+(((-1.0)*x7066*x7069))+((r00*x7070))+(((-1.0)*r02*x7072))+(((-1.0)*cj6*x7071)));
evalcond[5]=((((-1.0)*sj6*sj7*x7068))+(((-1.0)*x7067*x7069))+(((-1.0)*r12*x7072))+((r10*x7070))+(((-1.0)*sj6*x7071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7073=((-1.0)*r21);
IkReal x7075 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7075)==0){
continue;
}
IkReal x7074=pow(x7075,-0.5);
CheckValue<IkReal> x7076 = IKatan2WithCheck(IkReal(x7073),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7076.value))));
IkReal gconst136=(x7073*x7074);
IkReal gconst137=((1.0)*r20*x7074);
CheckValue<IkReal> x7077 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x7077.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7078=((-1.0)*r21);
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(x7078),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
IkReal x7079=((1.0)*(x7081.value));
IkReal x7080=x7074;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x7079)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7079)));
IkReal gconst136=(x7078*x7080);
IkReal gconst137=((1.0)*r20*x7080);
IkReal x7082=r22*r22;
IkReal x7083=((1.0)*x7082);
CheckValue<IkReal> x7087=IKPowWithIntegerCheck(((-1.0)+x7082),-1);
if(!x7087.valid){
continue;
}
IkReal x7084=x7087.value;
if((((1.0)+(((-1.0)*x7083)))) < -0.00001)
continue;
IkReal x7085=IKsqrt(((1.0)+(((-1.0)*x7083))));
IkReal x7086=(cj6*x7084*x7085);
j10eval[0]=((IKabs((x7086+(((-1.0)*x7083*x7086)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7088=((-1.0)*r21);
CheckValue<IkReal> x7091 = IKatan2WithCheck(IkReal(x7088),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7091.valid){
continue;
}
IkReal x7089=((1.0)*(x7091.value));
IkReal x7090=x7074;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x7089)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7089)));
IkReal gconst136=(x7088*x7090);
IkReal gconst137=((1.0)*r20*x7090);
IkReal x7092=r22*r22;
IkReal x7093=((1.0)*x7092);
CheckValue<IkReal> x7097=IKPowWithIntegerCheck(((-1.0)+x7092),-1);
if(!x7097.valid){
continue;
}
IkReal x7094=x7097.value;
if((((1.0)+(((-1.0)*x7093)))) < -0.00001)
continue;
IkReal x7095=IKsqrt(((1.0)+(((-1.0)*x7093))));
IkReal x7096=(sj6*x7094*x7095);
j10eval[0]=((IKabs(((((-1.0)*x7093*x7096))+x7096)))+(IKabs((r22*sj6))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7098=((-1.0)*r21);
CheckValue<IkReal> x7101 = IKatan2WithCheck(IkReal(x7098),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7101.valid){
continue;
}
IkReal x7099=((1.0)*(x7101.value));
IkReal x7100=x7074;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst136;
cj11=gconst137;
j11=((3.14159265)+(((-1.0)*x7099)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7099)));
IkReal gconst136=(x7098*x7100);
IkReal gconst137=((1.0)*r20*x7100);
IkReal x7102=r22*r22;
CheckValue<IkReal> x7105=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7102))),-1);
if(!x7105.valid){
continue;
}
IkReal x7103=x7105.value;
IkReal x7104=((1.0)*x7103);
j10eval[0]=IKsign((x7102+((x7104*(r21*r21*r21*r21)))+((x7104*(r20*r20*r20*r20)))+(((2.0)*x7103*(r20*r20)*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7106=(gconst137*r20);
IkReal x7107=(sj7*sj8);
IkReal x7108=(cj7*cj8);
IkReal x7109=(gconst136*r21);
CheckValue<IkReal> x7110=IKPowWithIntegerCheck(IKsign(((x7109*x7109)+(r22*r22)+(x7106*x7106)+(((-2.0)*x7106*x7109)))),-1);
if(!x7110.valid){
continue;
}
CheckValue<IkReal> x7111 = IKatan2WithCheck(IkReal((((r22*x7107))+(((-1.0)*r22*x7108)))),IkReal(((((-1.0)*x7106*x7107))+((x7106*x7108))+((x7107*x7109))+(((-1.0)*x7108*x7109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7111.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7110.value)))+(x7111.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7112=IKsin(j10);
IkReal x7113=IKcos(j10);
IkReal x7114=(gconst137*r10);
IkReal x7115=(gconst136*r01);
IkReal x7116=((1.0)*sj6);
IkReal x7117=(gconst137*r20);
IkReal x7118=(gconst136*r11);
IkReal x7119=(gconst137*r00);
IkReal x7120=((1.0)*cj8);
IkReal x7121=(gconst136*r21);
IkReal x7122=((1.0)*x7112);
IkReal x7123=((1.0)*cj7*sj8);
IkReal x7124=((1.0)*x7113);
evalcond[0]=((((-1.0)*r22*x7124))+((x7112*x7121))+(((-1.0)*x7117*x7122)));
evalcond[1]=((((-1.0)*x7114*x7122))+cj6+(((-1.0)*r12*x7124))+((x7112*x7118)));
evalcond[2]=((((-1.0)*x7119*x7122))+(((-1.0)*r02*x7124))+((x7112*x7115))+(((-1.0)*x7116)));
evalcond[3]=(((x7113*x7117))+(((-1.0)*x7121*x7124))+(((-1.0)*r22*x7122))+(((-1.0)*cj7*x7120))+((sj7*sj8)));
evalcond[4]=(((x7113*x7119))+(((-1.0)*x7115*x7124))+(((-1.0)*r02*x7122))+(((-1.0)*cj6*sj7*x7120))+(((-1.0)*cj6*x7123)));
evalcond[5]=(((x7113*x7114))+(((-1.0)*cj7*sj8*x7116))+(((-1.0)*x7118*x7124))+(((-1.0)*cj8*sj7*x7116))+(((-1.0)*r12*x7122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7125=((1.0)*gconst137);
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7125)))),-1);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst136*r21*sj6))+(((-1.0)*r20*sj6*x7125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7126.value)))+(x7127.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j10);
IkReal x7129=IKcos(j10);
IkReal x7130=(gconst137*r10);
IkReal x7131=(gconst136*r01);
IkReal x7132=((1.0)*sj6);
IkReal x7133=(gconst137*r20);
IkReal x7134=(gconst136*r11);
IkReal x7135=(gconst137*r00);
IkReal x7136=((1.0)*cj8);
IkReal x7137=(gconst136*r21);
IkReal x7138=((1.0)*x7128);
IkReal x7139=((1.0)*cj7*sj8);
IkReal x7140=((1.0)*x7129);
evalcond[0]=((((-1.0)*r22*x7140))+(((-1.0)*x7133*x7138))+((x7128*x7137)));
evalcond[1]=((((-1.0)*x7130*x7138))+cj6+(((-1.0)*r12*x7140))+((x7128*x7134)));
evalcond[2]=((((-1.0)*x7132))+(((-1.0)*r02*x7140))+(((-1.0)*x7135*x7138))+((x7128*x7131)));
evalcond[3]=((((-1.0)*cj7*x7136))+(((-1.0)*r22*x7138))+(((-1.0)*x7137*x7140))+((sj7*sj8))+((x7129*x7133)));
evalcond[4]=((((-1.0)*x7131*x7140))+(((-1.0)*cj6*x7139))+(((-1.0)*cj6*sj7*x7136))+((x7129*x7135))+(((-1.0)*r02*x7138)));
evalcond[5]=((((-1.0)*cj8*sj7*x7132))+(((-1.0)*cj7*sj8*x7132))+(((-1.0)*r12*x7138))+(((-1.0)*x7134*x7140))+((x7129*x7130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7141=((1.0)*gconst137);
CheckValue<IkReal> x7142 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst136*r21))+(((-1.0)*cj6*r20*x7141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7142.valid){
continue;
}
CheckValue<IkReal> x7143=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7141)))),-1);
if(!x7143.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7142.value)+(((1.5707963267949)*(x7143.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7144=IKsin(j10);
IkReal x7145=IKcos(j10);
IkReal x7146=(gconst137*r10);
IkReal x7147=(gconst136*r01);
IkReal x7148=((1.0)*sj6);
IkReal x7149=(gconst137*r20);
IkReal x7150=(gconst136*r11);
IkReal x7151=(gconst137*r00);
IkReal x7152=((1.0)*cj8);
IkReal x7153=(gconst136*r21);
IkReal x7154=((1.0)*x7144);
IkReal x7155=((1.0)*cj7*sj8);
IkReal x7156=((1.0)*x7145);
evalcond[0]=((((-1.0)*r22*x7156))+((x7144*x7153))+(((-1.0)*x7149*x7154)));
evalcond[1]=((((-1.0)*x7146*x7154))+(((-1.0)*r12*x7156))+cj6+((x7144*x7150)));
evalcond[2]=((((-1.0)*x7151*x7154))+(((-1.0)*x7148))+((x7144*x7147))+(((-1.0)*r02*x7156)));
evalcond[3]=((((-1.0)*x7153*x7156))+(((-1.0)*r22*x7154))+((x7145*x7149))+(((-1.0)*cj7*x7152))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*sj7*x7152))+((x7145*x7151))+(((-1.0)*cj6*x7155))+(((-1.0)*r02*x7154))+(((-1.0)*x7147*x7156)));
evalcond[5]=((((-1.0)*r12*x7154))+((x7145*x7146))+(((-1.0)*x7150*x7156))+(((-1.0)*cj7*sj8*x7148))+(((-1.0)*cj8*sj7*x7148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7157=((-1.0)*r10);
IkReal x7159 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7159)==0){
continue;
}
IkReal x7158=pow(x7159,-0.5);
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7157),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7160.value));
IkReal gconst139=(r11*x7158);
IkReal gconst140=(x7157*x7158);
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x7161.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x7162=((-1.0)*r10);
IkReal x7163=x7158;
CheckValue<IkReal> x7165 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7162),IKFAST_ATAN2_MAGTHRESH);
if(!x7165.valid){
continue;
}
IkReal x7164=((-1.0)*(x7165.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst139;
cj11=gconst140;
j11=x7164;
IkReal gconst138=x7164;
IkReal gconst139=(r11*x7163);
IkReal gconst140=(x7162*x7163);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7166=((1.0)*gconst139);
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7166)))),-1);
if(!x7167.valid){
continue;
}
CheckValue<IkReal> x7168 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst140*r10*sj6))+(((-1.0)*cj6*r01*x7166))+((cj6*gconst140*r00))+(((-1.0)*r11*sj6*x7166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7168.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7167.value)))+(x7168.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7169=IKsin(j10);
IkReal x7170=IKcos(j10);
IkReal x7171=(gconst139*r01);
IkReal x7172=(gconst139*r11);
IkReal x7173=((1.0)*cj8);
IkReal x7174=(gconst139*r21);
IkReal x7175=(gconst140*x7170);
IkReal x7176=((1.0)*cj7*sj8);
IkReal x7177=((1.0)*x7170);
IkReal x7178=((1.0)*x7169);
evalcond[0]=(((x7169*x7174))+(((-1.0)*r22*x7177))+(((-1.0)*gconst140*r20*x7178)));
evalcond[1]=(cj6+((x7169*x7172))+(((-1.0)*r12*x7177))+(((-1.0)*gconst140*r10*x7178)));
evalcond[2]=((((-1.0)*sj6))+((x7169*x7171))+(((-1.0)*r02*x7177))+(((-1.0)*gconst140*r00*x7178)));
evalcond[3]=((((-1.0)*cj7*x7173))+(((-1.0)*x7174*x7177))+(((-1.0)*r22*x7178))+((sj7*sj8))+((r20*x7175)));
evalcond[4]=((((-1.0)*x7171*x7177))+(((-1.0)*cj6*x7176))+(((-1.0)*r02*x7178))+(((-1.0)*cj6*sj7*x7173))+((r00*x7175)));
evalcond[5]=((((-1.0)*sj6*sj7*x7173))+(((-1.0)*sj6*x7176))+((r10*x7175))+(((-1.0)*r12*x7178))+(((-1.0)*x7172*x7177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7179=((1.0)*gconst140);
CheckValue<IkReal> x7180 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x7179))+((cj6*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7180.valid){
continue;
}
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7179)))),-1);
if(!x7181.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7180.value)+(((1.5707963267949)*(x7181.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7182=IKsin(j10);
IkReal x7183=IKcos(j10);
IkReal x7184=(gconst139*r01);
IkReal x7185=(gconst139*r11);
IkReal x7186=((1.0)*cj8);
IkReal x7187=(gconst139*r21);
IkReal x7188=(gconst140*x7183);
IkReal x7189=((1.0)*cj7*sj8);
IkReal x7190=((1.0)*x7183);
IkReal x7191=((1.0)*x7182);
evalcond[0]=(((x7182*x7187))+(((-1.0)*r22*x7190))+(((-1.0)*gconst140*r20*x7191)));
evalcond[1]=(cj6+((x7182*x7185))+(((-1.0)*r12*x7190))+(((-1.0)*gconst140*r10*x7191)));
evalcond[2]=((((-1.0)*sj6))+((x7182*x7184))+(((-1.0)*r02*x7190))+(((-1.0)*gconst140*r00*x7191)));
evalcond[3]=((((-1.0)*cj7*x7186))+((r20*x7188))+(((-1.0)*x7187*x7190))+(((-1.0)*r22*x7191))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x7184*x7190))+((r00*x7188))+(((-1.0)*cj6*sj7*x7186))+(((-1.0)*cj6*x7189))+(((-1.0)*r02*x7191)));
evalcond[5]=(((r10*x7188))+(((-1.0)*sj6*sj7*x7186))+(((-1.0)*sj6*x7189))+(((-1.0)*x7185*x7190))+(((-1.0)*r12*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7192=((-1.0)*r11);
IkReal x7194 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7194)==0){
continue;
}
IkReal x7193=pow(x7194,-0.5);
CheckValue<IkReal> x7195 = IKatan2WithCheck(IkReal(x7192),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7195.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7195.value))));
IkReal gconst142=(x7192*x7193);
IkReal gconst143=((1.0)*r10*x7193);
CheckValue<IkReal> x7196 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7196.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x7196.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x7197=((-1.0)*r11);
CheckValue<IkReal> x7200 = IKatan2WithCheck(IkReal(x7197),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7200.valid){
continue;
}
IkReal x7198=((1.0)*(x7200.value));
IkReal x7199=x7193;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x7198)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7198)));
IkReal gconst142=(x7197*x7199);
IkReal gconst143=((1.0)*r10*x7199);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x7201=((-1.0)*r11);
CheckValue<IkReal> x7204 = IKatan2WithCheck(IkReal(x7201),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7204.valid){
continue;
}
IkReal x7202=((1.0)*(x7204.value));
IkReal x7203=x7193;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x7202)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7202)));
IkReal gconst142=(x7201*x7203);
IkReal gconst143=((1.0)*r10*x7203);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=sj6;
j10eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[4]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7205=((-1.0)*r11);
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal(x7205),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
IkReal x7206=((1.0)*(x7208.value));
IkReal x7207=x7193;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst142;
cj11=gconst143;
j11=((3.14159265)+(((-1.0)*x7206)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7206)));
IkReal gconst142=(x7205*x7207);
IkReal gconst143=((1.0)*r10*x7207);
IkReal x7209=r12*r12;
IkReal x7210=(cj6*r02);
IkReal x7211=x7193;
IkReal x7212=(sj6*x7211);
j10eval[0]=((IKabs(((((-1.0)*x7210))+(((-1.0)*r12*sj6)))))+(IKabs((((x7209*x7212))+((r12*x7210*x7211))+(((-1.0)*x7212))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7213=((1.0)*sj6);
IkReal x7214=((1.0)*gconst142);
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*x7213)))),IkReal(((((-1.0)*cj6*r01*x7214))+((cj6*gconst143*r00))+(((-1.0)*gconst142*r11*x7213))+((gconst143*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
CheckValue<IkReal> x7216=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7214)))),-1);
if(!x7216.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7215.value)+(((1.5707963267949)*(x7216.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7217=IKsin(j10);
IkReal x7218=IKcos(j10);
IkReal x7219=(gconst142*r01);
IkReal x7220=(gconst143*r20);
IkReal x7221=(gconst143*r10);
IkReal x7222=(gconst142*r11);
IkReal x7223=((1.0)*cj8);
IkReal x7224=(gconst142*r21);
IkReal x7225=(gconst143*r00);
IkReal x7226=((1.0)*x7218);
IkReal x7227=((1.0)*cj7*sj8);
IkReal x7228=((1.0)*x7217);
evalcond[0]=((((-1.0)*x7220*x7228))+((x7217*x7224))+(((-1.0)*r22*x7226)));
evalcond[1]=(cj6+(((-1.0)*x7221*x7228))+(((-1.0)*r12*x7226))+((x7217*x7222)));
evalcond[2]=((((-1.0)*x7225*x7228))+(((-1.0)*r02*x7226))+(((-1.0)*sj6))+((x7217*x7219)));
evalcond[3]=((((-1.0)*x7224*x7226))+((x7218*x7220))+(((-1.0)*cj7*x7223))+(((-1.0)*r22*x7228))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*sj7*x7223))+(((-1.0)*r02*x7228))+(((-1.0)*cj6*x7227))+((x7218*x7225))+(((-1.0)*x7219*x7226)));
evalcond[5]=((((-1.0)*sj6*x7227))+((x7218*x7221))+(((-1.0)*x7222*x7226))+(((-1.0)*sj6*sj7*x7223))+(((-1.0)*r12*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7229=((1.0)*gconst143);
CheckValue<IkReal> x7230=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r10))+(((-1.0)*r11*x7229)))),-1);
if(!x7230.valid){
continue;
}
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst142*r21*sj6))+(((-1.0)*r20*sj6*x7229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7230.value)))+(x7231.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7232=IKsin(j10);
IkReal x7233=IKcos(j10);
IkReal x7234=(gconst142*r01);
IkReal x7235=(gconst143*r20);
IkReal x7236=(gconst143*r10);
IkReal x7237=(gconst142*r11);
IkReal x7238=((1.0)*cj8);
IkReal x7239=(gconst142*r21);
IkReal x7240=(gconst143*r00);
IkReal x7241=((1.0)*x7233);
IkReal x7242=((1.0)*cj7*sj8);
IkReal x7243=((1.0)*x7232);
evalcond[0]=(((x7232*x7239))+(((-1.0)*r22*x7241))+(((-1.0)*x7235*x7243)));
evalcond[1]=((((-1.0)*x7236*x7243))+((x7232*x7237))+(((-1.0)*r12*x7241))+cj6);
evalcond[2]=((((-1.0)*sj6))+((x7232*x7234))+(((-1.0)*r02*x7241))+(((-1.0)*x7240*x7243)));
evalcond[3]=(((x7233*x7235))+(((-1.0)*r22*x7243))+(((-1.0)*x7239*x7241))+(((-1.0)*cj7*x7238))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*sj7*x7238))+(((-1.0)*cj6*x7242))+(((-1.0)*r02*x7243))+((x7233*x7240))+(((-1.0)*x7234*x7241)));
evalcond[5]=(((x7233*x7236))+(((-1.0)*sj6*x7242))+(((-1.0)*r12*x7243))+(((-1.0)*x7237*x7241))+(((-1.0)*sj6*sj7*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7244=((1.0)*gconst143);
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7244)))),-1);
if(!x7245.valid){
continue;
}
CheckValue<IkReal> x7246 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst142*r21))+(((-1.0)*cj6*r20*x7244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7246.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7245.value)))+(x7246.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7247=IKsin(j10);
IkReal x7248=IKcos(j10);
IkReal x7249=(gconst142*r01);
IkReal x7250=(gconst143*r20);
IkReal x7251=(gconst143*r10);
IkReal x7252=(gconst142*r11);
IkReal x7253=((1.0)*cj8);
IkReal x7254=(gconst142*r21);
IkReal x7255=(gconst143*r00);
IkReal x7256=((1.0)*x7248);
IkReal x7257=((1.0)*cj7*sj8);
IkReal x7258=((1.0)*x7247);
evalcond[0]=((((-1.0)*r22*x7256))+((x7247*x7254))+(((-1.0)*x7250*x7258)));
evalcond[1]=((((-1.0)*x7251*x7258))+cj6+(((-1.0)*r12*x7256))+((x7247*x7252)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x7256))+((x7247*x7249))+(((-1.0)*x7255*x7258)));
evalcond[3]=((((-1.0)*cj7*x7253))+(((-1.0)*r22*x7258))+((x7248*x7250))+(((-1.0)*x7254*x7256))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x7257))+(((-1.0)*x7249*x7256))+(((-1.0)*r02*x7258))+((x7248*x7255))+(((-1.0)*cj6*sj7*x7253)));
evalcond[5]=((((-1.0)*x7252*x7256))+(((-1.0)*sj6*sj7*x7253))+(((-1.0)*sj6*x7257))+(((-1.0)*r12*x7258))+((x7248*x7251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7259=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x7259;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x7259);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7260=((1.0)*cj11);
IkReal x7261=((((-1.0)*r01*x7260))+(((-1.0)*r00*sj11)));
j10eval[0]=x7261;
j10eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7260))+((r21*sj11))))));
j10eval[2]=IKsign(x7261);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7262=cj11*cj11;
IkReal x7263=r11*r11;
IkReal x7264=(r11*sj11);
IkReal x7265=(cj11*r10);
IkReal x7266=((r12*r12)+x7263+(((-1.0)*x7262*x7263))+((x7262*(r10*r10)))+(((-2.0)*x7264*x7265)));
j10eval[0]=x7266;
j10eval[1]=((IKabs((x7265+(((-1.0)*x7264)))))+(IKabs(r12)));
j10eval[2]=IKsign(x7266);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7267=cj11*cj11;
IkReal x7268=r11*r11;
IkReal x7269=(cj11*r10);
IkReal x7270=(r11*sj11);
CheckValue<IkReal> x7271 = IKatan2WithCheck(IkReal((x7269+(((-1.0)*x7270)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7271.valid){
continue;
}
CheckValue<IkReal> x7272=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7268+(((-1.0)*x7267*x7268))+(((-2.0)*x7269*x7270))+((x7267*(r10*r10))))),-1);
if(!x7272.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7271.value)+(((1.5707963267949)*(x7272.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7273=IKsin(j10);
IkReal x7274=IKcos(j10);
IkReal x7275=((1.0)*cj7);
IkReal x7276=(sj11*x7273);
IkReal x7277=((1.0)*x7274);
IkReal x7278=((1.0)*x7273);
IkReal x7279=(cj11*x7274);
evalcond[0]=((((-1.0)*r22*x7277))+((r21*x7276))+(((-1.0)*cj11*r20*x7278)));
evalcond[1]=((((-1.0)*r02*x7277))+((r01*x7276))+(((-1.0)*cj11*r00*x7278)));
evalcond[2]=((((-1.0)*r12*x7278))+(((-1.0)*r11*sj11*x7277))+((r10*x7279)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7277))+((r11*x7276))+(((-1.0)*cj11*r10*x7278)));
evalcond[4]=((((-1.0)*r22*x7278))+((r20*x7279))+(((-1.0)*cj8*x7275))+((sj7*sj8))+(((-1.0)*r21*sj11*x7277)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r01*sj11*x7277))+(((-1.0)*r02*x7278))+((r00*x7279))+(((-1.0)*sj8*x7275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7280=((1.0)*cj11);
CheckValue<IkReal> x7281 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7280))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7281.valid){
continue;
}
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7280))+(((-1.0)*r00*sj11)))),-1);
if(!x7282.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7281.value)+(((1.5707963267949)*(x7282.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7283=IKsin(j10);
IkReal x7284=IKcos(j10);
IkReal x7285=((1.0)*cj7);
IkReal x7286=(sj11*x7283);
IkReal x7287=((1.0)*x7284);
IkReal x7288=((1.0)*x7283);
IkReal x7289=(cj11*x7284);
evalcond[0]=(((r21*x7286))+(((-1.0)*cj11*r20*x7288))+(((-1.0)*r22*x7287)));
evalcond[1]=((((-1.0)*cj11*r00*x7288))+((r01*x7286))+(((-1.0)*r02*x7287)));
evalcond[2]=((((-1.0)*r12*x7288))+(((-1.0)*r11*sj11*x7287))+((r10*x7289)));
evalcond[3]=((1.0)+((r11*x7286))+(((-1.0)*r12*x7287))+(((-1.0)*cj11*r10*x7288)));
evalcond[4]=((((-1.0)*r21*sj11*x7287))+((r20*x7289))+((sj7*sj8))+(((-1.0)*cj8*x7285))+(((-1.0)*r22*x7288)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r01*sj11*x7287))+(((-1.0)*sj8*x7285))+((r00*x7289))+(((-1.0)*r02*x7288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7290=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x7290.valid){
continue;
}
CheckValue<IkReal> x7291 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7291.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7290.value)))+(x7291.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7292=IKsin(j10);
IkReal x7293=IKcos(j10);
IkReal x7294=((1.0)*cj7);
IkReal x7295=(sj11*x7292);
IkReal x7296=((1.0)*x7293);
IkReal x7297=((1.0)*x7292);
IkReal x7298=(cj11*x7293);
evalcond[0]=((((-1.0)*r22*x7296))+((r21*x7295))+(((-1.0)*cj11*r20*x7297)));
evalcond[1]=((((-1.0)*cj11*r00*x7297))+(((-1.0)*r02*x7296))+((r01*x7295)));
evalcond[2]=(((r10*x7298))+(((-1.0)*r12*x7297))+(((-1.0)*r11*sj11*x7296)));
evalcond[3]=((1.0)+((r11*x7295))+(((-1.0)*r12*x7296))+(((-1.0)*cj11*r10*x7297)));
evalcond[4]=((((-1.0)*cj8*x7294))+(((-1.0)*r22*x7297))+(((-1.0)*r21*sj11*x7296))+((r20*x7298))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r01*sj11*x7296))+(((-1.0)*r02*x7297))+(((-1.0)*sj8*x7294))+((r00*x7298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7299=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x7299;
j10eval[1]=IKsign(x7299);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7300=((1.0)*cj11);
IkReal x7301=((((-1.0)*r21*x7300))+(((-1.0)*r20*sj11)));
j10eval[0]=x7301;
j10eval[1]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x7300))))));
j10eval[2]=IKsign(x7301);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7302=r11*r11;
IkReal x7303=cj11*cj11;
IkReal x7304=(cj11*r10);
IkReal x7305=(r11*sj11);
IkReal x7306=((((-1.0)*x7302))+((x7302*x7303))+(((-1.0)*(r12*r12)))+(((2.0)*x7304*x7305))+(((-1.0)*x7303*(r10*r10))));
j10eval[0]=x7306;
j10eval[1]=((IKabs(r12))+(IKabs((x7304+(((-1.0)*x7305))))));
j10eval[2]=IKsign(x7306);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7307=r11*r11;
IkReal x7308=cj11*cj11;
IkReal x7309=(cj11*r10);
IkReal x7310=(r11*sj11);
CheckValue<IkReal> x7311=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7307))+(((2.0)*x7309*x7310))+((x7307*x7308))+(((-1.0)*x7308*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x7311.valid){
continue;
}
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((x7309+(((-1.0)*x7310)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7311.value)))+(x7312.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7313=IKsin(j10);
IkReal x7314=IKcos(j10);
IkReal x7315=(sj11*x7313);
IkReal x7316=((1.0)*x7314);
IkReal x7317=((1.0)*x7313);
IkReal x7318=(cj11*x7314);
evalcond[0]=((((-1.0)*cj11*r20*x7317))+((r21*x7315))+(((-1.0)*r22*x7316)));
evalcond[1]=((((-1.0)*cj11*r00*x7317))+((r01*x7315))+(((-1.0)*r02*x7316)));
evalcond[2]=(((r10*x7318))+(((-1.0)*r11*sj11*x7316))+(((-1.0)*r12*x7317)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7316))+(((-1.0)*cj11*r10*x7317))+((r11*x7315)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r01*sj11*x7316))+((cj7*sj8))+((r00*x7318))+(((-1.0)*r02*x7317)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r20*x7318))+(((-1.0)*r21*sj11*x7316))+(((-1.0)*r22*x7317))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7319=((1.0)*cj11);
CheckValue<IkReal> x7320 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x7319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7320.valid){
continue;
}
CheckValue<IkReal> x7321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7319))+(((-1.0)*r20*sj11)))),-1);
if(!x7321.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7320.value)+(((1.5707963267949)*(x7321.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7322=IKsin(j10);
IkReal x7323=IKcos(j10);
IkReal x7324=(sj11*x7322);
IkReal x7325=((1.0)*x7323);
IkReal x7326=((1.0)*x7322);
IkReal x7327=(cj11*x7323);
evalcond[0]=(((r21*x7324))+(((-1.0)*r22*x7325))+(((-1.0)*cj11*r20*x7326)));
evalcond[1]=(((r01*x7324))+(((-1.0)*cj11*r00*x7326))+(((-1.0)*r02*x7325)));
evalcond[2]=((((-1.0)*r11*sj11*x7325))+((r10*x7327))+(((-1.0)*r12*x7326)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7325))+((r11*x7324))+(((-1.0)*cj11*r10*x7326)));
evalcond[4]=(((cj8*sj7))+((r00*x7327))+(((-1.0)*r01*sj11*x7325))+((cj7*sj8))+(((-1.0)*r02*x7326)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x7326))+(((-1.0)*r21*sj11*x7325))+((r20*x7327))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x7329.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7328.value)+(((1.5707963267949)*(x7329.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7330=IKsin(j10);
IkReal x7331=IKcos(j10);
IkReal x7332=(sj11*x7330);
IkReal x7333=((1.0)*x7331);
IkReal x7334=((1.0)*x7330);
IkReal x7335=(cj11*x7331);
evalcond[0]=((((-1.0)*cj11*r20*x7334))+((r21*x7332))+(((-1.0)*r22*x7333)));
evalcond[1]=((((-1.0)*r02*x7333))+(((-1.0)*cj11*r00*x7334))+((r01*x7332)));
evalcond[2]=(((r10*x7335))+(((-1.0)*r11*sj11*x7333))+(((-1.0)*r12*x7334)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7333))+(((-1.0)*cj11*r10*x7334))+((r11*x7332)));
evalcond[4]=((((-1.0)*r02*x7334))+((cj8*sj7))+(((-1.0)*r01*sj11*x7333))+((cj7*sj8))+((r00*x7335)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r20*x7335))+(((-1.0)*r21*sj11*x7333))+((sj7*sj8))+(((-1.0)*r22*x7334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7336=((-1.0)*r00);
IkReal x7338 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7338)==0){
continue;
}
IkReal x7337=pow(x7338,-0.5);
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7336),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7339.value));
IkReal gconst145=(r01*x7337);
IkReal gconst146=(x7336*x7337);
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x7340.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x7341=((-1.0)*r00);
IkReal x7342=x7337;
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7341),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
IkReal x7343=((-1.0)*(x7344.value));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst145;
cj11=gconst146;
j11=x7343;
IkReal gconst144=x7343;
IkReal gconst145=(r01*x7342);
IkReal gconst146=(x7341*x7342);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7345=((1.0)*gconst145);
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x7345))+((gconst146*r10*sj6))+((cj6*gconst146*r00))+(((-1.0)*cj6*r01*x7345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
CheckValue<IkReal> x7347=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7345)))),-1);
if(!x7347.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7346.value)+(((1.5707963267949)*(x7347.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7348=IKsin(j10);
IkReal x7349=IKcos(j10);
IkReal x7350=(gconst145*r21);
IkReal x7351=(gconst145*r01);
IkReal x7352=((1.0)*cj8);
IkReal x7353=(gconst145*r11);
IkReal x7354=((1.0)*cj7*sj8);
IkReal x7355=((1.0)*x7349);
IkReal x7356=((1.0)*x7348);
IkReal x7357=(gconst146*x7349);
IkReal x7358=(gconst146*x7356);
evalcond[0]=(((x7348*x7350))+(((-1.0)*r22*x7355))+(((-1.0)*r20*x7358)));
evalcond[1]=(((x7348*x7353))+(((-1.0)*r10*x7358))+cj6+(((-1.0)*r12*x7355)));
evalcond[2]=(((x7348*x7351))+(((-1.0)*sj6))+(((-1.0)*r00*x7358))+(((-1.0)*r02*x7355)));
evalcond[3]=((((-1.0)*cj7*x7352))+(((-1.0)*r22*x7356))+((r20*x7357))+(((-1.0)*x7350*x7355))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x7351*x7355))+(((-1.0)*cj6*x7354))+((r00*x7357))+(((-1.0)*r02*x7356))+(((-1.0)*cj6*sj7*x7352)));
evalcond[5]=(((r10*x7357))+(((-1.0)*r12*x7356))+(((-1.0)*x7353*x7355))+(((-1.0)*sj6*x7354))+(((-1.0)*sj6*sj7*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7359=((1.0)*gconst146);
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7359))+(((-1.0)*gconst145*r10)))),-1);
if(!x7360.valid){
continue;
}
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x7359))+((gconst145*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7360.value)))+(x7361.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7362=IKsin(j10);
IkReal x7363=IKcos(j10);
IkReal x7364=(gconst145*r21);
IkReal x7365=(gconst145*r01);
IkReal x7366=((1.0)*cj8);
IkReal x7367=(gconst145*r11);
IkReal x7368=((1.0)*cj7*sj8);
IkReal x7369=((1.0)*x7363);
IkReal x7370=((1.0)*x7362);
IkReal x7371=(gconst146*x7363);
IkReal x7372=(gconst146*x7370);
evalcond[0]=((((-1.0)*r22*x7369))+(((-1.0)*r20*x7372))+((x7362*x7364)));
evalcond[1]=(cj6+(((-1.0)*r12*x7369))+((x7362*x7367))+(((-1.0)*r10*x7372)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x7369))+((x7362*x7365))+(((-1.0)*r00*x7372)));
evalcond[3]=((((-1.0)*cj7*x7366))+(((-1.0)*r22*x7370))+(((-1.0)*x7364*x7369))+((r20*x7371))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x7368))+((r00*x7371))+(((-1.0)*x7365*x7369))+(((-1.0)*r02*x7370))+(((-1.0)*cj6*sj7*x7366)));
evalcond[5]=((((-1.0)*r12*x7370))+(((-1.0)*sj6*x7368))+(((-1.0)*x7367*x7369))+(((-1.0)*sj6*sj7*x7366))+((r10*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7373=((-1.0)*r01);
IkReal x7375 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7375)==0){
continue;
}
IkReal x7374=pow(x7375,-0.5);
CheckValue<IkReal> x7376 = IKatan2WithCheck(IkReal(x7373),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7376.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7376.value))));
IkReal gconst148=(x7373*x7374);
IkReal gconst149=((1.0)*r00*x7374);
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x7377.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x7378=((-1.0)*r01);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(x7378),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
IkReal x7379=((1.0)*(x7381.value));
IkReal x7380=x7374;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x7379)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7379)));
IkReal gconst148=(x7378*x7380);
IkReal gconst149=((1.0)*r00*x7380);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=cj6;
j10eval[3]=r22;
j10eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x7382=((-1.0)*r01);
CheckValue<IkReal> x7385 = IKatan2WithCheck(IkReal(x7382),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7385.valid){
continue;
}
IkReal x7383=((1.0)*(x7385.value));
IkReal x7384=x7374;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x7383)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7383)));
IkReal gconst148=(x7382*x7384);
IkReal gconst149=((1.0)*r00*x7384);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7386=((-1.0)*r01);
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(x7386),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
IkReal x7387=((1.0)*(x7389.value));
IkReal x7388=x7374;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj11=gconst148;
cj11=gconst149;
j11=((3.14159265)+(((-1.0)*x7387)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7387)));
IkReal gconst148=(x7386*x7388);
IkReal gconst149=((1.0)*r00*x7388);
IkReal x7390=r02*r02;
IkReal x7391=(r12*sj6);
IkReal x7392=x7374;
IkReal x7393=(cj6*x7392);
j10eval[0]=((IKabs(((((-1.0)*x7393))+((x7390*x7393))+((r02*x7391*x7392)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x7391))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7394=((1.0)*gconst148);
CheckValue<IkReal> x7395=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7394)))),-1);
if(!x7395.valid){
continue;
}
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*r11*sj6*x7394))+((gconst149*r10*sj6))+(((-1.0)*cj6*r01*x7394))+((cj6*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7395.value)))+(x7396.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7397=IKsin(j10);
IkReal x7398=IKcos(j10);
IkReal x7399=(gconst149*r00);
IkReal x7400=(gconst149*r10);
IkReal x7401=((1.0)*cj8);
IkReal x7402=(gconst149*r20);
IkReal x7403=((1.0)*x7397);
IkReal x7404=(gconst148*x7397);
IkReal x7405=((1.0)*x7398);
IkReal x7406=((1.0)*cj7*sj8);
evalcond[0]=(((r21*x7404))+(((-1.0)*r22*x7405))+(((-1.0)*x7402*x7403)));
evalcond[1]=(((r11*x7404))+(((-1.0)*r12*x7405))+cj6+(((-1.0)*x7400*x7403)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*x7399*x7403))+((r01*x7404))+(((-1.0)*r02*x7405)));
evalcond[3]=((((-1.0)*gconst148*r21*x7405))+((x7398*x7402))+(((-1.0)*r22*x7403))+((sj7*sj8))+(((-1.0)*cj7*x7401)));
evalcond[4]=((((-1.0)*cj6*x7406))+((x7398*x7399))+(((-1.0)*gconst148*r01*x7405))+(((-1.0)*r02*x7403))+(((-1.0)*cj6*sj7*x7401)));
evalcond[5]=((((-1.0)*r12*x7403))+(((-1.0)*gconst148*r11*x7405))+(((-1.0)*sj6*x7406))+((x7398*x7400))+(((-1.0)*sj6*sj7*x7401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7407=((1.0)*gconst149);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x7407))+((gconst148*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7407))+(((-1.0)*gconst148*r10)))),-1);
if(!x7409.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7408.value)+(((1.5707963267949)*(x7409.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7410=IKsin(j10);
IkReal x7411=IKcos(j10);
IkReal x7412=(gconst149*r00);
IkReal x7413=(gconst149*r10);
IkReal x7414=((1.0)*cj8);
IkReal x7415=(gconst149*r20);
IkReal x7416=((1.0)*x7410);
IkReal x7417=(gconst148*x7410);
IkReal x7418=((1.0)*x7411);
IkReal x7419=((1.0)*cj7*sj8);
evalcond[0]=((((-1.0)*x7415*x7416))+((r21*x7417))+(((-1.0)*r22*x7418)));
evalcond[1]=((((-1.0)*r12*x7418))+cj6+(((-1.0)*x7413*x7416))+((r11*x7417)));
evalcond[2]=((((-1.0)*sj6))+((r01*x7417))+(((-1.0)*x7412*x7416))+(((-1.0)*r02*x7418)));
evalcond[3]=((((-1.0)*gconst148*r21*x7418))+((x7411*x7415))+(((-1.0)*r22*x7416))+((sj7*sj8))+(((-1.0)*cj7*x7414)));
evalcond[4]=((((-1.0)*cj6*x7419))+(((-1.0)*gconst148*r01*x7418))+((x7411*x7412))+(((-1.0)*cj6*sj7*x7414))+(((-1.0)*r02*x7416)));
evalcond[5]=((((-1.0)*r12*x7416))+(((-1.0)*gconst148*r11*x7418))+(((-1.0)*sj6*x7419))+((x7411*x7413))+(((-1.0)*sj6*sj7*x7414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7420=((1.0)*gconst149);
CheckValue<IkReal> x7421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x7420)))),-1);
if(!x7421.valid){
continue;
}
CheckValue<IkReal> x7422 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x7420))+((cj6*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7422.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7421.value)))+(x7422.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7423=IKsin(j10);
IkReal x7424=IKcos(j10);
IkReal x7425=(gconst149*r00);
IkReal x7426=(gconst149*r10);
IkReal x7427=((1.0)*cj8);
IkReal x7428=(gconst149*r20);
IkReal x7429=((1.0)*x7423);
IkReal x7430=(gconst148*x7423);
IkReal x7431=((1.0)*x7424);
IkReal x7432=((1.0)*cj7*sj8);
evalcond[0]=(((r21*x7430))+(((-1.0)*r22*x7431))+(((-1.0)*x7428*x7429)));
evalcond[1]=(cj6+(((-1.0)*r12*x7431))+((r11*x7430))+(((-1.0)*x7426*x7429)));
evalcond[2]=(((r01*x7430))+(((-1.0)*sj6))+(((-1.0)*r02*x7431))+(((-1.0)*x7425*x7429)));
evalcond[3]=((((-1.0)*cj7*x7427))+(((-1.0)*gconst148*r21*x7431))+(((-1.0)*r22*x7429))+((x7424*x7428))+((sj7*sj8)));
evalcond[4]=((((-1.0)*gconst148*r01*x7431))+(((-1.0)*cj6*sj7*x7427))+((x7424*x7425))+(((-1.0)*r02*x7429))+(((-1.0)*cj6*x7432)));
evalcond[5]=((((-1.0)*sj6*sj7*x7427))+((x7424*x7426))+(((-1.0)*r12*x7429))+(((-1.0)*gconst148*r11*x7431))+(((-1.0)*sj6*x7432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7433=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x7433;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x7433);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7434=((1.0)*cj11);
IkReal x7435=((((-1.0)*r11*x7434))+(((-1.0)*r10*sj11)));
j10eval[0]=x7435;
j10eval[1]=IKsign(x7435);
j10eval[2]=((IKabs((((r21*sj11))+(((-1.0)*r20*x7434)))))+(IKabs(r22)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7436=r01*r01;
IkReal x7437=cj11*cj11;
IkReal x7438=(r01*sj11);
IkReal x7439=(cj11*r00);
IkReal x7440=((((-1.0)*x7437*(r00*r00)))+(((-1.0)*x7436))+((x7436*x7437))+(((-1.0)*(r02*r02)))+(((2.0)*x7438*x7439)));
j10eval[0]=x7440;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7438))+x7439))));
j10eval[2]=IKsign(x7440);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7441=r01*r01;
IkReal x7442=cj11*cj11;
IkReal x7443=(r01*sj11);
IkReal x7444=(cj11*r00);
CheckValue<IkReal> x7445=IKPowWithIntegerCheck(IKsign(((((2.0)*x7443*x7444))+(((-1.0)*(r02*r02)))+(((-1.0)*x7441))+(((-1.0)*x7442*(r00*r00)))+((x7441*x7442)))),-1);
if(!x7445.valid){
continue;
}
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(((((-1.0)*x7443))+x7444)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7445.value)))+(x7446.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7447=IKsin(j10);
IkReal x7448=IKcos(j10);
IkReal x7449=((1.0)*cj7);
IkReal x7450=(cj11*r00);
IkReal x7451=(sj11*x7447);
IkReal x7452=((1.0)*x7448);
IkReal x7453=((1.0)*x7447);
IkReal x7454=(cj11*x7448);
evalcond[0]=((((-1.0)*cj11*r20*x7453))+((r21*x7451))+(((-1.0)*r22*x7452)));
evalcond[1]=((((-1.0)*cj11*r10*x7453))+((r11*x7451))+(((-1.0)*r12*x7452)));
evalcond[2]=((((-1.0)*r01*sj11*x7452))+((x7448*x7450))+(((-1.0)*r02*x7453)));
evalcond[3]=((-1.0)+(((-1.0)*x7450*x7453))+((r01*x7451))+(((-1.0)*r02*x7452)));
evalcond[4]=(((r20*x7454))+(((-1.0)*cj8*x7449))+(((-1.0)*r21*sj11*x7452))+((sj7*sj8))+(((-1.0)*r22*x7453)));
evalcond[5]=((((-1.0)*sj8*x7449))+(((-1.0)*r11*sj11*x7452))+(((-1.0)*cj8*sj7))+((r10*x7454))+(((-1.0)*r12*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7455=((1.0)*cj11);
CheckValue<IkReal> x7456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x7455)))),-1);
if(!x7456.valid){
continue;
}
CheckValue<IkReal> x7457 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x7455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7457.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7456.value)))+(x7457.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7458=IKsin(j10);
IkReal x7459=IKcos(j10);
IkReal x7460=((1.0)*cj7);
IkReal x7461=(cj11*r00);
IkReal x7462=(sj11*x7458);
IkReal x7463=((1.0)*x7459);
IkReal x7464=((1.0)*x7458);
IkReal x7465=(cj11*x7459);
evalcond[0]=(((r21*x7462))+(((-1.0)*r22*x7463))+(((-1.0)*cj11*r20*x7464)));
evalcond[1]=((((-1.0)*cj11*r10*x7464))+(((-1.0)*r12*x7463))+((r11*x7462)));
evalcond[2]=((((-1.0)*r02*x7464))+((x7459*x7461))+(((-1.0)*r01*sj11*x7463)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7463))+(((-1.0)*x7461*x7464))+((r01*x7462)));
evalcond[4]=((((-1.0)*r21*sj11*x7463))+(((-1.0)*r22*x7464))+((r20*x7465))+(((-1.0)*cj8*x7460))+((sj7*sj8)));
evalcond[5]=(((r10*x7465))+(((-1.0)*cj8*sj7))+(((-1.0)*r12*x7464))+(((-1.0)*sj8*x7460))+(((-1.0)*r11*sj11*x7463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7466=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x7466.valid){
continue;
}
CheckValue<IkReal> x7467 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7467.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7466.value)))+(x7467.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7468=IKsin(j10);
IkReal x7469=IKcos(j10);
IkReal x7470=((1.0)*cj7);
IkReal x7471=(cj11*r00);
IkReal x7472=(sj11*x7468);
IkReal x7473=((1.0)*x7469);
IkReal x7474=((1.0)*x7468);
IkReal x7475=(cj11*x7469);
evalcond[0]=((((-1.0)*r22*x7473))+((r21*x7472))+(((-1.0)*cj11*r20*x7474)));
evalcond[1]=((((-1.0)*cj11*r10*x7474))+((r11*x7472))+(((-1.0)*r12*x7473)));
evalcond[2]=((((-1.0)*r01*sj11*x7473))+(((-1.0)*r02*x7474))+((x7469*x7471)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7473))+(((-1.0)*x7471*x7474))+((r01*x7472)));
evalcond[4]=((((-1.0)*cj8*x7470))+((r20*x7475))+(((-1.0)*r22*x7474))+(((-1.0)*r21*sj11*x7473))+((sj7*sj8)));
evalcond[5]=(((r10*x7475))+(((-1.0)*r11*sj11*x7473))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x7470))+(((-1.0)*r12*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x7476=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x7476;
j10eval[1]=IKsign(x7476);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x7477=((1.0)*cj11);
IkReal x7478=((((-1.0)*r21*x7477))+(((-1.0)*r20*sj11)));
j10eval[0]=x7478;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x7477))))));
j10eval[2]=IKsign(x7478);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x7479=cj11*cj11;
IkReal x7480=r01*r01;
IkReal x7481=(cj11*r00);
IkReal x7482=(r01*sj11);
IkReal x7483=((((-1.0)*x7479*x7480))+(((-2.0)*x7481*x7482))+(r02*r02)+x7480+((x7479*(r00*r00))));
j10eval[0]=x7483;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7482))+x7481))));
j10eval[2]=IKsign(x7483);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7484=cj11*cj11;
IkReal x7485=r01*r01;
IkReal x7486=(r01*sj11);
IkReal x7487=(cj11*r00);
CheckValue<IkReal> x7488=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7486*x7487))+((x7484*(r00*r00)))+(r02*r02)+x7485+(((-1.0)*x7484*x7485)))),-1);
if(!x7488.valid){
continue;
}
CheckValue<IkReal> x7489 = IKatan2WithCheck(IkReal(((((-1.0)*x7486))+x7487)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7489.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7488.value)))+(x7489.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7490=IKsin(j10);
IkReal x7491=IKcos(j10);
IkReal x7492=(cj11*r00);
IkReal x7493=(sj11*x7490);
IkReal x7494=((1.0)*x7491);
IkReal x7495=((1.0)*x7490);
IkReal x7496=(cj11*x7491);
evalcond[0]=((((-1.0)*cj11*r20*x7495))+(((-1.0)*r22*x7494))+((r21*x7493)));
evalcond[1]=(((r11*x7493))+(((-1.0)*cj11*r10*x7495))+(((-1.0)*r12*x7494)));
evalcond[2]=(((x7491*x7492))+(((-1.0)*r02*x7495))+(((-1.0)*r01*sj11*x7494)));
evalcond[3]=((1.0)+((r01*x7493))+(((-1.0)*r02*x7494))+(((-1.0)*x7492*x7495)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r11*sj11*x7494))+((r10*x7496))+((cj7*sj8))+(((-1.0)*r12*x7495)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r20*x7496))+(((-1.0)*r21*sj11*x7494))+(((-1.0)*r22*x7495))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7497=((1.0)*cj11);
CheckValue<IkReal> x7498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7497))+(((-1.0)*r20*sj11)))),-1);
if(!x7498.valid){
continue;
}
CheckValue<IkReal> x7499 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x7497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7499.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7498.value)))+(x7499.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7500=IKsin(j10);
IkReal x7501=IKcos(j10);
IkReal x7502=(cj11*r00);
IkReal x7503=(sj11*x7500);
IkReal x7504=((1.0)*x7501);
IkReal x7505=((1.0)*x7500);
IkReal x7506=(cj11*x7501);
evalcond[0]=((((-1.0)*r22*x7504))+(((-1.0)*cj11*r20*x7505))+((r21*x7503)));
evalcond[1]=(((r11*x7503))+(((-1.0)*cj11*r10*x7505))+(((-1.0)*r12*x7504)));
evalcond[2]=((((-1.0)*r02*x7505))+((x7501*x7502))+(((-1.0)*r01*sj11*x7504)));
evalcond[3]=((1.0)+(((-1.0)*x7502*x7505))+(((-1.0)*r02*x7504))+((r01*x7503)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r11*sj11*x7504))+((r10*x7506))+((cj7*sj8))+(((-1.0)*r12*x7505)));
evalcond[5]=((((-1.0)*r22*x7505))+(((-1.0)*cj7*cj8))+((r20*x7506))+(((-1.0)*r21*sj11*x7504))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7507 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7507.valid){
continue;
}
CheckValue<IkReal> x7508=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x7508.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7507.value)+(((1.5707963267949)*(x7508.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7509=IKsin(j10);
IkReal x7510=IKcos(j10);
IkReal x7511=(cj11*r00);
IkReal x7512=(sj11*x7509);
IkReal x7513=((1.0)*x7510);
IkReal x7514=((1.0)*x7509);
IkReal x7515=(cj11*x7510);
evalcond[0]=(((r21*x7512))+(((-1.0)*cj11*r20*x7514))+(((-1.0)*r22*x7513)));
evalcond[1]=(((r11*x7512))+(((-1.0)*cj11*r10*x7514))+(((-1.0)*r12*x7513)));
evalcond[2]=((((-1.0)*r02*x7514))+(((-1.0)*r01*sj11*x7513))+((x7510*x7511)));
evalcond[3]=((1.0)+((r01*x7512))+(((-1.0)*x7511*x7514))+(((-1.0)*r02*x7513)));
evalcond[4]=((((-1.0)*r11*sj11*x7513))+((cj8*sj7))+((r10*x7515))+(((-1.0)*r12*x7514))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r20*x7515))+(((-1.0)*r21*sj11*x7513))+((sj7*sj8))+(((-1.0)*r22*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7516=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7516);
rxp1_1=(px*r21);
rxp1_2=(r11*x7516);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7517=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7517);
rxp1_1=(px*r21);
rxp1_2=(r11*x7517);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7518=((-1.0)*px);
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7518);
rxp1_1=(px*r21);
rxp1_2=(r11*x7518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=(((cj11*r10))+(((-1.0)*r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x7521=IKPowWithIntegerCheck((((cj11*r10))+(((-1.0)*r11*sj11))),-1);
if(!x7521.valid){
continue;
}
IkReal x7519=x7521.value;
IkReal x7520=(sj6*x7519);
cj10array[0]=(((cj8*sj7*x7520))+((cj7*sj8*x7520)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x7522=IKsin(j10);
IkReal x7523=IKcos(j10);
IkReal x7524=(cj11*r20);
IkReal x7525=(sj11*x7522);
IkReal x7526=((1.0)*x7523);
IkReal x7527=((1.0)*x7522);
evalcond[0]=((-1.0)*r02*x7522);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x7526)));
evalcond[2]=(((r21*x7525))+(((-1.0)*x7524*x7527)));
evalcond[3]=(((r11*x7525))+(((-1.0)*cj11*r10*x7527)));
evalcond[4]=((((-1.0)*cj7*cj8))+(((-1.0)*r21*sj11*x7526))+((sj7*sj8))+((x7523*x7524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x7529=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x7529.valid){
continue;
}
IkReal x7528=x7529.value;
cj10array[0]=(((cj7*cj8*x7528))+(((-1.0)*sj7*sj8*x7528)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x7530=IKsin(j10);
IkReal x7531=IKcos(j10);
IkReal x7532=(r11*sj11);
IkReal x7533=((1.0)*sj6);
IkReal x7534=((1.0)*x7531);
IkReal x7535=((1.0)*cj11*x7530);
evalcond[0]=((-1.0)*r02*x7530);
evalcond[1]=((((-1.0)*x7533))+(((-1.0)*r02*x7534)));
evalcond[2]=(((r21*sj11*x7530))+(((-1.0)*r20*x7535)));
evalcond[3]=(((x7530*x7532))+(((-1.0)*r10*x7535)));
evalcond[4]=((((-1.0)*cj8*sj7*x7533))+(((-1.0)*x7532*x7534))+((cj11*r10*x7531))+(((-1.0)*cj7*sj8*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x7536=IKPowWithIntegerCheck(r02,-1);
if(!x7536.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x7536.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x7537=IKsin(j10);
IkReal x7538=IKcos(j10);
IkReal x7539=(cj11*r20);
IkReal x7540=((1.0)*cj8);
IkReal x7541=(cj11*r10);
IkReal x7542=(sj11*x7537);
IkReal x7543=((1.0)*x7537);
IkReal x7544=((1.0)*sj11*x7538);
evalcond[0]=((-1.0)*r02*x7537);
evalcond[1]=(((r21*x7542))+(((-1.0)*x7539*x7543)));
evalcond[2]=(((r11*x7542))+(((-1.0)*x7541*x7543)));
evalcond[3]=(((x7538*x7539))+(((-1.0)*cj7*x7540))+((sj7*sj8))+(((-1.0)*r21*x7544)));
evalcond[4]=(((x7538*x7541))+(((-1.0)*cj7*sj6*sj8))+(((-1.0)*sj6*sj7*x7540))+(((-1.0)*r11*x7544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7545=((1.0)*sj11);
CheckValue<IkReal> x7546=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x7545)))),-1);
if(!x7546.valid){
continue;
}
CheckValue<IkReal> x7547 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x7545))+((cj11*cj6*r00))+((cj11*r10*sj6))+(((-1.0)*r11*sj6*x7545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7547.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7546.value)))+(x7547.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7548=IKsin(j10);
IkReal x7549=IKcos(j10);
IkReal x7550=((1.0)*cj8);
IkReal x7551=(sj11*x7548);
IkReal x7552=((1.0)*cj7*sj8);
IkReal x7553=((1.0)*x7549);
IkReal x7554=((1.0)*x7548);
IkReal x7555=(cj11*x7549);
evalcond[0]=(((r21*x7551))+(((-1.0)*r22*x7553))+(((-1.0)*cj11*r20*x7554)));
evalcond[1]=(cj6+(((-1.0)*cj11*r10*x7554))+(((-1.0)*r12*x7553))+((r11*x7551)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*cj11*r00*x7554))+((r01*x7551))+(((-1.0)*r02*x7553)));
evalcond[3]=((((-1.0)*r22*x7554))+(((-1.0)*cj7*x7550))+((sj7*sj8))+(((-1.0)*r21*sj11*x7553))+((r20*x7555)));
evalcond[4]=(((r00*x7555))+(((-1.0)*cj6*sj7*x7550))+(((-1.0)*cj6*x7552))+(((-1.0)*r01*sj11*x7553))+(((-1.0)*r02*x7554)));
evalcond[5]=(((r10*x7555))+(((-1.0)*sj6*x7552))+(((-1.0)*sj6*sj7*x7550))+(((-1.0)*r12*x7554))+(((-1.0)*r11*sj11*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7556=((1.0)*cj11);
CheckValue<IkReal> x7557 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((r21*sj11*sj6))+(((-1.0)*r20*sj6*x7556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7557.valid){
continue;
}
CheckValue<IkReal> x7558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7556))+(((-1.0)*r10*sj11)))),-1);
if(!x7558.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7557.value)+(((1.5707963267949)*(x7558.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7559=IKsin(j10);
IkReal x7560=IKcos(j10);
IkReal x7561=((1.0)*cj8);
IkReal x7562=(sj11*x7559);
IkReal x7563=((1.0)*cj7*sj8);
IkReal x7564=((1.0)*x7560);
IkReal x7565=((1.0)*x7559);
IkReal x7566=(cj11*x7560);
evalcond[0]=((((-1.0)*r22*x7564))+((r21*x7562))+(((-1.0)*cj11*r20*x7565)));
evalcond[1]=(cj6+(((-1.0)*cj11*r10*x7565))+((r11*x7562))+(((-1.0)*r12*x7564)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x7564))+(((-1.0)*cj11*r00*x7565))+((r01*x7562)));
evalcond[3]=((((-1.0)*r21*sj11*x7564))+(((-1.0)*r22*x7565))+(((-1.0)*cj7*x7561))+((sj7*sj8))+((r20*x7566)));
evalcond[4]=((((-1.0)*r02*x7565))+(((-1.0)*cj6*sj7*x7561))+(((-1.0)*cj6*x7563))+((r00*x7566))+(((-1.0)*r01*sj11*x7564)));
evalcond[5]=((((-1.0)*sj6*x7563))+((r10*x7566))+(((-1.0)*r12*x7565))+(((-1.0)*sj6*sj7*x7561))+(((-1.0)*r11*sj11*x7564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7567=((1.0)*cj11);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x7567))+((cj6*r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7567))+(((-1.0)*r00*sj11)))),-1);
if(!x7569.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7568.value)+(((1.5707963267949)*(x7569.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7570=IKsin(j10);
IkReal x7571=IKcos(j10);
IkReal x7572=((1.0)*cj8);
IkReal x7573=(sj11*x7570);
IkReal x7574=((1.0)*cj7*sj8);
IkReal x7575=((1.0)*x7571);
IkReal x7576=((1.0)*x7570);
IkReal x7577=(cj11*x7571);
evalcond[0]=((((-1.0)*cj11*r20*x7576))+(((-1.0)*r22*x7575))+((r21*x7573)));
evalcond[1]=(cj6+(((-1.0)*r12*x7575))+((r11*x7573))+(((-1.0)*cj11*r10*x7576)));
evalcond[2]=((((-1.0)*sj6))+((r01*x7573))+(((-1.0)*r02*x7575))+(((-1.0)*cj11*r00*x7576)));
evalcond[3]=(((r20*x7577))+(((-1.0)*r21*sj11*x7575))+(((-1.0)*r22*x7576))+(((-1.0)*cj7*x7572))+((sj7*sj8)));
evalcond[4]=((((-1.0)*cj6*x7574))+((r00*x7577))+(((-1.0)*r01*sj11*x7575))+(((-1.0)*r02*x7576))+(((-1.0)*cj6*sj7*x7572)));
evalcond[5]=((((-1.0)*sj6*sj7*x7572))+(((-1.0)*r11*sj11*x7575))+(((-1.0)*sj6*x7574))+((r10*x7577))+(((-1.0)*r12*x7576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x7578=cj7*cj7;
IkReal x7579=cj8*cj8;
IkReal x7580=((16090500.0)*sj7);
IkReal x7581=(r00*sj11);
IkReal x7582=(cj11*r01);
IkReal x7583=(cj11*r11);
IkReal x7584=(cj7*sj8);
IkReal x7585=((156900000.0)*px);
IkReal x7586=(r10*sj11);
IkReal x7587=((170000000.0)*sj7);
IkReal x7588=(cj8*sj7);
IkReal x7589=((156900000.0)*py);
IkReal x7590=((133365000.0)*cj8);
IkReal x7591=((14850585.0)*x7588);
CheckValue<IkReal> x7592=IKPowWithIntegerCheck(IKsign(((77015489.0)+(((133365000.0)*sj7*x7584))+(((-1.0)*x7578*x7590))+(((-10705975.0)*x7578))+(((-123088050.0)*x7578*x7579))+(((123088050.0)*x7584*x7588))+(((61544025.0)*x7579))+x7590)),-1);
if(!x7592.valid){
continue;
}
CheckValue<IkReal> x7593 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((x7588*x7589))+((py*x7587))+((x7586*x7591))+(((14850585.0)*x7584*x7586))+(((-4132419.0)*x7581))+(((-4132419.0)*x7582))+((x7584*x7589))+((x7583*x7591))+((x7580*x7586))+((x7580*x7583))+(((14850585.0)*x7583*x7584)))),IkReal((((x7581*x7591))+(((14850585.0)*x7582*x7584))+(((14850585.0)*x7581*x7584))+(((43660000.0)*py))+((x7585*x7588))+((px*x7587))+((x7584*x7585))+(((4132419.0)*x7586))+(((4132419.0)*x7583))+((x7582*x7591))+((x7580*x7581))+((x7580*x7582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7593.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7592.value)))+(x7593.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x7594=IKcos(j6);
IkReal x7595=IKsin(j6);
IkReal x7596=((0.09465)*sj11);
IkReal x7597=((0.09465)*cj11);
IkReal x7598=((0.425)*sj7);
IkReal x7599=((0.39225)*cj8*sj7);
IkReal x7600=((0.39225)*cj7*sj8);
evalcond[0]=(((x7594*x7598))+((x7594*x7599))+(((-1.0)*px))+(((-1.0)*r00*x7596))+(((-1.0)*r01*x7597))+((x7594*x7600))+(((-0.10915)*x7595)));
evalcond[1]=(((x7595*x7599))+((x7595*x7598))+(((-1.0)*r11*x7597))+(((0.10915)*x7594))+(((-1.0)*py))+((x7595*x7600))+(((-1.0)*r10*x7596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
IkReal x7601=((1.0)*cj11);
IkReal x7602=((((-1.0)*r00*sj11))+(((-1.0)*r01*x7601)));
j10eval[0]=x7602;
j10eval[1]=IKsign(x7602);
j10eval[2]=((IKabs(((((-1.0)*cj6*r20*x7601))+((cj6*r21*sj11)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x7603=((1.0)*cj11);
IkReal x7604=((((-1.0)*r11*x7603))+(((-1.0)*r10*sj11)));
j10eval[0]=x7604;
j10eval[1]=((IKabs(((((-1.0)*r20*sj6*x7603))+((r21*sj11*sj6)))))+(IKabs((r22*sj6))));
j10eval[2]=IKsign(x7604);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x7605=((1.0)*sj11);
IkReal x7606=((((-1.0)*cj11*r21))+(((-1.0)*r20*x7605)));
j10eval[0]=x7606;
j10eval[1]=((IKabs(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))))+(IKabs(((((-1.0)*cj6*r01*x7605))+((cj11*cj6*r00))+(((-1.0)*r11*sj6*x7605))+((cj11*r10*sj6))))));
j10eval[2]=IKsign(x7606);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7607=((-1.0)*r20);
IkReal x7609 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7609)==0){
continue;
}
IkReal x7608=pow(x7609,-0.5);
CheckValue<IkReal> x7610 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7607),IKFAST_ATAN2_MAGTHRESH);
if(!x7610.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7610.value));
IkReal gconst1=(r21*x7608);
IkReal gconst2=(x7607*x7608);
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x7611.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7612=((-1.0)*r20);
IkReal x7613=x7608;
CheckValue<IkReal> x7615 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7612),IKFAST_ATAN2_MAGTHRESH);
if(!x7615.valid){
continue;
}
IkReal x7614=((-1.0)*(x7615.value));
sj11=gconst1;
cj11=gconst2;
j11=x7614;
IkReal gconst0=x7614;
IkReal gconst1=(r21*x7613);
IkReal gconst2=(x7612*x7613);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7616=((-1.0)*r20);
IkReal x7617=x7608;
CheckValue<IkReal> x7619 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7616),IKFAST_ATAN2_MAGTHRESH);
if(!x7619.valid){
continue;
}
IkReal x7618=((-1.0)*(x7619.value));
sj11=gconst1;
cj11=gconst2;
j11=x7618;
IkReal gconst0=x7618;
IkReal gconst1=(r21*x7617);
IkReal gconst2=(x7616*x7617);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7620=((-1.0)*r20);
IkReal x7621=x7608;
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7620),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
IkReal x7622=((-1.0)*(x7623.value));
sj11=gconst1;
cj11=gconst2;
j11=x7622;
IkReal gconst0=x7622;
IkReal gconst1=(r21*x7621);
IkReal gconst2=(x7620*x7621);
IkReal x7624=r22*r22;
CheckValue<IkReal> x7628=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7624))),-1);
if(!x7628.valid){
continue;
}
IkReal x7625=x7628.value;
IkReal x7626=(sj9*x7625);
IkReal x7627=(((x7626*(r20*r20*r20*r20)))+((sj9*x7624))+(((2.0)*x7626*(r20*r20)*(r21*r21)))+((x7626*(r21*r21*r21*r21))));
j10eval[0]=x7627;
j10eval[1]=IKsign(x7627);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7629=((-1.0)*r20);
IkReal x7630=x7608;
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7629),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal x7631=((-1.0)*(x7632.value));
sj11=gconst1;
cj11=gconst2;
j11=x7631;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst0=x7631;
IkReal gconst1=(r21*x7630);
IkReal gconst2=(x7629*x7630);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7633=((-1.0)*r20);
IkReal x7634=x7608;
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7633),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
IkReal x7635=((-1.0)*(x7636.value));
sj11=gconst1;
cj11=gconst2;
j11=x7635;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst0=x7635;
IkReal gconst1=(r21*x7634);
IkReal gconst2=(x7633*x7634);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7637=((-1.0)*r20);
IkReal x7638=x7608;
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7637),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
IkReal x7639=((-1.0)*(x7640.value));
sj11=gconst1;
cj11=gconst2;
j11=x7639;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst0=x7639;
IkReal gconst1=(r21*x7638);
IkReal gconst2=(x7637*x7638);
IkReal x7641=((1.0)*(r22*r22));
CheckValue<IkReal> x7645=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7641))),-1);
if(!x7645.valid){
continue;
}
IkReal x7642=x7645.value;
IkReal x7643=((1.0)*x7642);
IkReal x7644=((((-1.0)*x7641))+(((-1.0)*x7643*(r21*r21*r21*r21)))+(((-2.0)*x7642*(r20*r20)*(r21*r21)))+(((-1.0)*x7643*(r20*r20*r20*r20))));
j10eval[0]=x7644;
j10eval[1]=IKsign(x7644);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7646=((-1.0)*r20);
IkReal x7647=x7608;
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7646),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal x7648=((-1.0)*(x7649.value));
sj11=gconst1;
cj11=gconst2;
j11=x7648;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7648;
IkReal gconst1=(r21*x7647);
IkReal gconst2=(x7646*x7647);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x7650=((-1.0)*r20);
IkReal x7651=x7608;
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7650),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
IkReal x7652=((-1.0)*(x7653.value));
sj11=gconst1;
cj11=gconst2;
j11=x7652;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7652;
IkReal gconst1=(r21*x7651);
IkReal gconst2=(x7650*x7651);
IkReal x7654=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7658=IKPowWithIntegerCheck(x7654,-1);
if(!x7658.valid){
continue;
}
IkReal x7655=x7658.value;
IkReal x7656=((1.0)*x7655);
IkReal x7657=((((-2.0)*r10*r11*r20*r21*x7655))+(((-1.0)*(r12*r12)))+(((-1.0)*x7656*(r11*r11)*(r21*r21)))+(((-1.0)*x7656*(r10*r10)*(r20*r20))));
j10eval[0]=x7657;
j10eval[1]=r12;
j10eval[2]=x7654;
j10eval[3]=IKsign(x7657);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7659=((-1.0)*r20);
IkReal x7660=x7608;
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7659),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal x7661=((-1.0)*(x7662.value));
sj11=gconst1;
cj11=gconst2;
j11=x7661;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7661;
IkReal gconst1=(r21*x7660);
IkReal gconst2=(x7659*x7660);
IkReal x7663=r22*r22;
IkReal x7664=(cj7*cj8*r12);
IkReal x7665=(r12*sj7*sj8);
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(((-1.0)+x7663),-1);
if(!x7669.valid){
continue;
}
IkReal x7666=x7669.value;
if((((1.0)+(((-1.0)*x7663)))) < -0.00001)
continue;
IkReal x7667=IKsqrt(((1.0)+(((-1.0)*x7663))));
IkReal x7668=(r22*x7666*x7667);
j10eval[0]=((IKabs(((((-1.0)*x7665))+x7664)))+(IKabs(((((-1.0)*x7664*x7668))+((x7665*x7668))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7670=(sj7*sj8);
IkReal x7671=(gconst1*r11);
IkReal x7672=(cj7*cj8);
IkReal x7673=(gconst2*r10);
CheckValue<IkReal> x7674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x7674.valid){
continue;
}
CheckValue<IkReal> x7675 = IKatan2WithCheck(IkReal((((x7672*x7673))+(((-1.0)*x7670*x7673))+(((-1.0)*x7671*x7672))+((x7670*x7671)))),IkReal((((r12*x7672))+(((-1.0)*r12*x7670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7675.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7674.value)))+(x7675.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7676=IKcos(j10);
IkReal x7677=IKsin(j10);
IkReal x7678=((1.0)*gconst2);
IkReal x7679=(gconst1*r21);
IkReal x7680=((1.0)*cj7);
IkReal x7681=(gconst1*x7676);
IkReal x7682=((1.0)*x7676);
IkReal x7683=(gconst1*x7677);
evalcond[0]=(((r12*x7677))+((r11*x7681))+(((-1.0)*r10*x7676*x7678)));
evalcond[1]=((((-1.0)*r20*x7677*x7678))+(((-1.0)*r22*x7682))+((x7677*x7679)));
evalcond[2]=(((r01*x7683))+(((-1.0)*r00*x7677*x7678))+(((-1.0)*r02*x7682)));
evalcond[3]=((1.0)+((r11*x7683))+(((-1.0)*r12*x7682))+(((-1.0)*r10*x7677*x7678)));
evalcond[4]=(((r22*x7677))+(((-1.0)*r20*x7676*x7678))+(((-1.0)*cj8*x7680))+((sj7*sj8))+((x7676*x7679)));
evalcond[5]=((((-1.0)*r00*x7676*x7678))+((r02*x7677))+(((-1.0)*cj8*sj7))+((r01*x7681))+(((-1.0)*sj8*x7680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7684=(gconst2*r10);
IkReal x7685=(gconst1*r11);
CheckValue<IkReal> x7686=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7685*x7685)))+(((2.0)*x7684*x7685))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7684*x7684))))),-1);
if(!x7686.valid){
continue;
}
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(((((-1.0)*x7684))+x7685)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7686.value)))+(x7687.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7688=IKcos(j10);
IkReal x7689=IKsin(j10);
IkReal x7690=((1.0)*gconst2);
IkReal x7691=(gconst1*r21);
IkReal x7692=((1.0)*cj7);
IkReal x7693=(gconst1*x7688);
IkReal x7694=((1.0)*x7688);
IkReal x7695=(gconst1*x7689);
evalcond[0]=(((r12*x7689))+((r11*x7693))+(((-1.0)*r10*x7688*x7690)));
evalcond[1]=(((x7689*x7691))+(((-1.0)*r22*x7694))+(((-1.0)*r20*x7689*x7690)));
evalcond[2]=((((-1.0)*r02*x7694))+((r01*x7695))+(((-1.0)*r00*x7689*x7690)));
evalcond[3]=((1.0)+((r11*x7695))+(((-1.0)*r12*x7694))+(((-1.0)*r10*x7689*x7690)));
evalcond[4]=((((-1.0)*cj8*x7692))+(((-1.0)*r20*x7688*x7690))+((sj7*sj8))+((r22*x7689))+((x7688*x7691)));
evalcond[5]=((((-1.0)*r00*x7688*x7690))+(((-1.0)*cj8*sj7))+((r01*x7693))+(((-1.0)*sj8*x7692))+((r02*x7689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7696=((1.0)*gconst2);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7696)))),-1);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x7696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7697.value)))+(x7698.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7699=IKcos(j10);
IkReal x7700=IKsin(j10);
IkReal x7701=((1.0)*gconst2);
IkReal x7702=(gconst1*r21);
IkReal x7703=((1.0)*cj7);
IkReal x7704=(gconst1*x7699);
IkReal x7705=((1.0)*x7699);
IkReal x7706=(gconst1*x7700);
evalcond[0]=(((r12*x7700))+((r11*x7704))+(((-1.0)*r10*x7699*x7701)));
evalcond[1]=((((-1.0)*r20*x7700*x7701))+((x7700*x7702))+(((-1.0)*r22*x7705)));
evalcond[2]=((((-1.0)*r00*x7700*x7701))+((r01*x7706))+(((-1.0)*r02*x7705)));
evalcond[3]=((1.0)+((r11*x7706))+(((-1.0)*r12*x7705))+(((-1.0)*r10*x7700*x7701)));
evalcond[4]=((((-1.0)*cj8*x7703))+(((-1.0)*r20*x7699*x7701))+((r22*x7700))+((sj7*sj8))+((x7699*x7702)));
evalcond[5]=((((-1.0)*r00*x7699*x7701))+(((-1.0)*sj8*x7703))+(((-1.0)*cj8*sj7))+((r02*x7700))+((r01*x7704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7707=((-1.0)*r20);
IkReal x7708=x7608;
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7707),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
IkReal x7709=((-1.0)*(x7710.value));
sj11=gconst1;
cj11=gconst2;
j11=x7709;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x7709;
IkReal gconst1=(r21*x7708);
IkReal gconst2=(x7707*x7708);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7711=((-1.0)*r20);
IkReal x7712=x7608;
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7711),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
IkReal x7713=((-1.0)*(x7714.value));
sj11=gconst1;
cj11=gconst2;
j11=x7713;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x7713;
IkReal gconst1=(r21*x7712);
IkReal gconst2=(x7711*x7712);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7715=((-1.0)*r20);
IkReal x7716=x7608;
CheckValue<IkReal> x7718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7715),IKFAST_ATAN2_MAGTHRESH);
if(!x7718.valid){
continue;
}
IkReal x7717=((-1.0)*(x7718.value));
sj11=gconst1;
cj11=gconst2;
j11=x7717;
sj9=0;
cj9=1.0;
j9=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x7717;
IkReal gconst1=(r21*x7716);
IkReal gconst2=(x7715*x7716);
IkReal x7719=r22*r22;
IkReal x7720=(cj7*cj8*r12);
IkReal x7721=(r12*sj7*sj8);
CheckValue<IkReal> x7725=IKPowWithIntegerCheck(((-1.0)+x7719),-1);
if(!x7725.valid){
continue;
}
IkReal x7722=x7725.value;
if((((1.0)+(((-1.0)*x7719)))) < -0.00001)
continue;
IkReal x7723=IKsqrt(((1.0)+(((-1.0)*x7719))));
IkReal x7724=(r22*x7722*x7723);
j10eval[0]=((IKabs(((((-1.0)*x7720*x7724))+((x7721*x7724)))))+(IKabs(((((-1.0)*x7721))+x7720))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7726=(sj7*sj8);
IkReal x7727=(gconst1*r11);
IkReal x7728=(cj7*cj8);
IkReal x7729=(gconst2*r10);
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x7730.valid){
continue;
}
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(((((-1.0)*x7726*x7729))+((x7728*x7729))+(((-1.0)*x7727*x7728))+((x7726*x7727)))),IkReal((((r12*x7728))+(((-1.0)*r12*x7726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7730.value)))+(x7731.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7732=IKcos(j10);
IkReal x7733=IKsin(j10);
IkReal x7734=((1.0)*gconst2);
IkReal x7735=(gconst1*r21);
IkReal x7736=(gconst1*x7732);
IkReal x7737=((1.0)*x7732);
IkReal x7738=(gconst1*x7733);
evalcond[0]=(((r12*x7733))+((r11*x7736))+(((-1.0)*r10*x7732*x7734)));
evalcond[1]=(((x7733*x7735))+(((-1.0)*r22*x7737))+(((-1.0)*r20*x7733*x7734)));
evalcond[2]=((((-1.0)*r00*x7733*x7734))+(((-1.0)*r02*x7737))+((r01*x7738)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x7733*x7734))+((r11*x7738))+(((-1.0)*r12*x7737)));
evalcond[4]=((((-1.0)*r00*x7732*x7734))+((cj8*sj7))+((r02*x7733))+((cj7*sj8))+((r01*x7736)));
evalcond[5]=((((-1.0)*cj7*cj8))+((x7732*x7735))+(((-1.0)*r20*x7732*x7734))+((r22*x7733))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7739=(gconst1*r11);
IkReal x7740=(gconst2*r10);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign(((x7739*x7739)+(r12*r12)+(x7740*x7740)+(((-2.0)*x7739*x7740)))),-1);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(((((-1.0)*x7740))+x7739)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7741.value)))+(x7742.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7743=IKcos(j10);
IkReal x7744=IKsin(j10);
IkReal x7745=((1.0)*gconst2);
IkReal x7746=(gconst1*r21);
IkReal x7747=(gconst1*x7743);
IkReal x7748=((1.0)*x7743);
IkReal x7749=(gconst1*x7744);
evalcond[0]=(((r12*x7744))+(((-1.0)*r10*x7743*x7745))+((r11*x7747)));
evalcond[1]=((((-1.0)*r22*x7748))+(((-1.0)*r20*x7744*x7745))+((x7744*x7746)));
evalcond[2]=((((-1.0)*r00*x7744*x7745))+((r01*x7749))+(((-1.0)*r02*x7748)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7748))+(((-1.0)*r10*x7744*x7745))+((r11*x7749)));
evalcond[4]=(((cj8*sj7))+((r01*x7747))+(((-1.0)*r00*x7743*x7745))+((r02*x7744))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((x7743*x7746))+(((-1.0)*r20*x7743*x7745))+((sj7*sj8))+((r22*x7744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
CheckValue<IkReal> x7751=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7751.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7750.value)+(((1.5707963267949)*(x7751.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7752=IKcos(j10);
IkReal x7753=IKsin(j10);
IkReal x7754=((1.0)*gconst2);
IkReal x7755=(gconst1*r21);
IkReal x7756=(gconst1*x7752);
IkReal x7757=((1.0)*x7752);
IkReal x7758=(gconst1*x7753);
evalcond[0]=((((-1.0)*r10*x7752*x7754))+((r11*x7756))+((r12*x7753)));
evalcond[1]=((((-1.0)*r22*x7757))+((x7753*x7755))+(((-1.0)*r20*x7753*x7754)));
evalcond[2]=(((r01*x7758))+(((-1.0)*r02*x7757))+(((-1.0)*r00*x7753*x7754)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x7753*x7754))+(((-1.0)*r12*x7757))+((r11*x7758)));
evalcond[4]=((((-1.0)*r00*x7752*x7754))+((r01*x7756))+((cj8*sj7))+((r02*x7753))+((cj7*sj8)));
evalcond[5]=(((x7752*x7755))+(((-1.0)*cj7*cj8))+(((-1.0)*r20*x7752*x7754))+((sj7*sj8))+((r22*x7753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7759=((-1.0)*r20);
IkReal x7760=x7608;
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7759),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
IkReal x7761=((-1.0)*(x7762.value));
sj11=gconst1;
cj11=gconst2;
j11=x7761;
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x7761;
IkReal gconst1=(r21*x7760);
IkReal gconst2=(x7759*x7760);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7763=((-1.0)*r20);
IkReal x7764=x7608;
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7763),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
IkReal x7765=((-1.0)*(x7766.value));
sj11=gconst1;
cj11=gconst2;
j11=x7765;
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x7765;
IkReal gconst1=(r21*x7764);
IkReal gconst2=(x7763*x7764);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7767=((-1.0)*r20);
IkReal x7768=x7608;
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7767),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
IkReal x7769=((-1.0)*(x7770.value));
sj11=gconst1;
cj11=gconst2;
j11=x7769;
sj9=0;
cj9=1.0;
j9=0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x7769;
IkReal gconst1=(r21*x7768);
IkReal gconst2=(x7767*x7768);
IkReal x7771=r22*r22;
IkReal x7772=(r02*sj7*sj8);
IkReal x7773=(cj7*cj8*r02);
CheckValue<IkReal> x7777=IKPowWithIntegerCheck(((-1.0)+x7771),-1);
if(!x7777.valid){
continue;
}
IkReal x7774=x7777.value;
if((((1.0)+(((-1.0)*x7771)))) < -0.00001)
continue;
IkReal x7775=IKsqrt(((1.0)+(((-1.0)*x7771))));
IkReal x7776=(r22*x7774*x7775);
j10eval[0]=((IKabs(((((-1.0)*x7772))+x7773)))+(IKabs(((((-1.0)*x7773*x7776))+((x7772*x7776))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7778=(sj7*sj8);
IkReal x7779=(gconst1*r01);
IkReal x7780=(cj7*cj8);
IkReal x7781=(gconst2*r00);
CheckValue<IkReal> x7782=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7782.valid){
continue;
}
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal((((x7780*x7781))+(((-1.0)*x7778*x7781))+(((-1.0)*x7779*x7780))+((x7778*x7779)))),IkReal((((r02*x7780))+(((-1.0)*r02*x7778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7782.value)))+(x7783.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7784=IKcos(j10);
IkReal x7785=IKsin(j10);
IkReal x7786=((1.0)*gconst2);
IkReal x7787=(gconst1*r21);
IkReal x7788=((1.0)*cj7);
IkReal x7789=(gconst1*x7784);
IkReal x7790=((1.0)*x7784);
IkReal x7791=(gconst1*x7785);
evalcond[0]=(((r01*x7789))+(((-1.0)*r00*x7784*x7786))+((r02*x7785)));
evalcond[1]=((((-1.0)*r22*x7790))+(((-1.0)*r20*x7785*x7786))+((x7785*x7787)));
evalcond[2]=((((-1.0)*r12*x7790))+(((-1.0)*r10*x7785*x7786))+((r11*x7791)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7785*x7786))+((r01*x7791))+(((-1.0)*r02*x7790)));
evalcond[4]=((((-1.0)*cj8*x7788))+(((-1.0)*r20*x7784*x7786))+((x7784*x7787))+((r22*x7785))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x7788))+((r11*x7789))+(((-1.0)*r10*x7784*x7786))+((r12*x7785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7792=(gconst1*r01);
IkReal x7793=(gconst2*r00);
CheckValue<IkReal> x7794=IKPowWithIntegerCheck(IKsign(((x7793*x7793)+(x7792*x7792)+(r02*r02)+(((-2.0)*x7792*x7793)))),-1);
if(!x7794.valid){
continue;
}
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(((((-1.0)*x7793))+x7792)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7794.value)))+(x7795.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7796=IKcos(j10);
IkReal x7797=IKsin(j10);
IkReal x7798=((1.0)*gconst2);
IkReal x7799=(gconst1*r21);
IkReal x7800=((1.0)*cj7);
IkReal x7801=(gconst1*x7796);
IkReal x7802=((1.0)*x7796);
IkReal x7803=(gconst1*x7797);
evalcond[0]=(((r01*x7801))+((r02*x7797))+(((-1.0)*r00*x7796*x7798)));
evalcond[1]=(((x7797*x7799))+(((-1.0)*r22*x7802))+(((-1.0)*r20*x7797*x7798)));
evalcond[2]=(((r11*x7803))+(((-1.0)*r12*x7802))+(((-1.0)*r10*x7797*x7798)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7802))+((r01*x7803))+(((-1.0)*r00*x7797*x7798)));
evalcond[4]=((((-1.0)*cj8*x7800))+((x7796*x7799))+((r22*x7797))+((sj7*sj8))+(((-1.0)*r20*x7796*x7798)));
evalcond[5]=(((r11*x7801))+(((-1.0)*cj8*sj7))+((r12*x7797))+(((-1.0)*r10*x7796*x7798))+(((-1.0)*sj8*x7800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7804=((1.0)*gconst2);
CheckValue<IkReal> x7805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7804))+(((-1.0)*gconst1*r10)))),-1);
if(!x7805.valid){
continue;
}
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7804))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7805.value)))+(x7806.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7807=IKcos(j10);
IkReal x7808=IKsin(j10);
IkReal x7809=((1.0)*gconst2);
IkReal x7810=(gconst1*r21);
IkReal x7811=((1.0)*cj7);
IkReal x7812=(gconst1*x7807);
IkReal x7813=((1.0)*x7807);
IkReal x7814=(gconst1*x7808);
evalcond[0]=(((r02*x7808))+(((-1.0)*r00*x7807*x7809))+((r01*x7812)));
evalcond[1]=((((-1.0)*r20*x7808*x7809))+(((-1.0)*r22*x7813))+((x7808*x7810)));
evalcond[2]=(((r11*x7814))+(((-1.0)*r12*x7813))+(((-1.0)*r10*x7808*x7809)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7808*x7809))+(((-1.0)*r02*x7813))+((r01*x7814)));
evalcond[4]=(((r22*x7808))+(((-1.0)*cj8*x7811))+(((-1.0)*r20*x7807*x7809))+((x7807*x7810))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r11*x7812))+((r12*x7808))+(((-1.0)*sj8*x7811))+(((-1.0)*r10*x7807*x7809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7815=((-1.0)*r20);
IkReal x7816=x7608;
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7815),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
IkReal x7817=((-1.0)*(x7818.value));
sj11=gconst1;
cj11=gconst2;
j11=x7817;
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x7817;
IkReal gconst1=(r21*x7816);
IkReal gconst2=(x7815*x7816);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x7819=((-1.0)*r20);
IkReal x7820=x7608;
CheckValue<IkReal> x7822 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7819),IKFAST_ATAN2_MAGTHRESH);
if(!x7822.valid){
continue;
}
IkReal x7821=((-1.0)*(x7822.value));
sj11=gconst1;
cj11=gconst2;
j11=x7821;
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x7821;
IkReal gconst1=(r21*x7820);
IkReal gconst2=(x7819*x7820);
IkReal x7823=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7827=IKPowWithIntegerCheck(x7823,-1);
if(!x7827.valid){
continue;
}
IkReal x7824=x7827.value;
IkReal x7825=((1.0)*x7824);
IkReal x7826=((((-1.0)*(r02*r02)))+(((-1.0)*x7825*(r00*r00)*(r20*r20)))+(((-1.0)*x7825*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x7824)));
j10eval[0]=x7826;
j10eval[1]=IKsign(x7826);
j10eval[2]=r02;
j10eval[3]=x7823;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7828=((-1.0)*r20);
IkReal x7829=x7608;
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7828),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
IkReal x7830=((-1.0)*(x7831.value));
sj11=gconst1;
cj11=gconst2;
j11=x7830;
sj9=0;
cj9=1.0;
j9=0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x7830;
IkReal gconst1=(r21*x7829);
IkReal gconst2=(x7828*x7829);
IkReal x7832=r22*r22;
IkReal x7833=(r02*sj7*sj8);
IkReal x7834=(cj7*cj8*r02);
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(((-1.0)+x7832),-1);
if(!x7838.valid){
continue;
}
IkReal x7835=x7838.value;
if((((1.0)+(((-1.0)*x7832)))) < -0.00001)
continue;
IkReal x7836=IKsqrt(((1.0)+(((-1.0)*x7832))));
IkReal x7837=(r22*x7835*x7836);
j10eval[0]=((IKabs((((x7833*x7837))+(((-1.0)*x7834*x7837)))))+(IKabs((x7834+(((-1.0)*x7833))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7839=(sj7*sj8);
IkReal x7840=(gconst1*r01);
IkReal x7841=(cj7*cj8);
IkReal x7842=(gconst2*r00);
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(((((-1.0)*x7840*x7841))+((x7839*x7840))+(((-1.0)*x7839*x7842))+((x7841*x7842)))),IkReal(((((-1.0)*r02*x7839))+((r02*x7841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7844.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7843.value)+(((1.5707963267949)*(x7844.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7845=IKcos(j10);
IkReal x7846=IKsin(j10);
IkReal x7847=((1.0)*gconst2);
IkReal x7848=(gconst1*r21);
IkReal x7849=(gconst1*x7845);
IkReal x7850=((1.0)*x7845);
IkReal x7851=(gconst1*x7846);
evalcond[0]=((((-1.0)*r00*x7845*x7847))+((r01*x7849))+((r02*x7846)));
evalcond[1]=((((-1.0)*r20*x7846*x7847))+((x7846*x7848))+(((-1.0)*r22*x7850)));
evalcond[2]=(((r11*x7851))+(((-1.0)*r10*x7846*x7847))+(((-1.0)*r12*x7850)));
evalcond[3]=((1.0)+(((-1.0)*r00*x7846*x7847))+((r01*x7851))+(((-1.0)*r02*x7850)));
evalcond[4]=(((r12*x7846))+((cj8*sj7))+(((-1.0)*r10*x7845*x7847))+((cj7*sj8))+((r11*x7849)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r20*x7845*x7847))+((r22*x7846))+((sj7*sj8))+((x7845*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7852=(gconst1*r01);
IkReal x7853=(gconst2*r00);
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x7852*x7853))+(((-1.0)*(x7852*x7852)))+(((-1.0)*(x7853*x7853))))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal((x7852+(((-1.0)*x7853)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7856=IKcos(j10);
IkReal x7857=IKsin(j10);
IkReal x7858=((1.0)*gconst2);
IkReal x7859=(gconst1*r21);
IkReal x7860=(gconst1*x7856);
IkReal x7861=((1.0)*x7856);
IkReal x7862=(gconst1*x7857);
evalcond[0]=(((r02*x7857))+((r01*x7860))+(((-1.0)*r00*x7856*x7858)));
evalcond[1]=((((-1.0)*r20*x7857*x7858))+((x7857*x7859))+(((-1.0)*r22*x7861)));
evalcond[2]=(((r11*x7862))+(((-1.0)*r10*x7857*x7858))+(((-1.0)*r12*x7861)));
evalcond[3]=((1.0)+((r01*x7862))+(((-1.0)*r02*x7861))+(((-1.0)*r00*x7857*x7858)));
evalcond[4]=(((r12*x7857))+(((-1.0)*r10*x7856*x7858))+((cj8*sj7))+((r11*x7860))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r22*x7857))+((x7856*x7859))+((sj7*sj8))+(((-1.0)*r20*x7856*x7858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7863 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7863.valid){
continue;
}
CheckValue<IkReal> x7864=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7864.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7863.value)+(((1.5707963267949)*(x7864.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7865=IKcos(j10);
IkReal x7866=IKsin(j10);
IkReal x7867=((1.0)*gconst2);
IkReal x7868=(gconst1*r21);
IkReal x7869=(gconst1*x7865);
IkReal x7870=((1.0)*x7865);
IkReal x7871=(gconst1*x7866);
evalcond[0]=((((-1.0)*r00*x7865*x7867))+((r01*x7869))+((r02*x7866)));
evalcond[1]=((((-1.0)*r22*x7870))+((x7866*x7868))+(((-1.0)*r20*x7866*x7867)));
evalcond[2]=((((-1.0)*r10*x7866*x7867))+((r11*x7871))+(((-1.0)*r12*x7870)));
evalcond[3]=((1.0)+(((-1.0)*r00*x7866*x7867))+((r01*x7871))+(((-1.0)*r02*x7870)));
evalcond[4]=(((cj8*sj7))+((r11*x7869))+(((-1.0)*r10*x7865*x7867))+((r12*x7866))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((x7865*x7868))+(((-1.0)*r20*x7865*x7867))+((r22*x7866))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7872=((-1.0)*r20);
IkReal x7873=((-1.0)*px);
CheckValue<IkReal> x7875 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7872),IKFAST_ATAN2_MAGTHRESH);
if(!x7875.valid){
continue;
}
IkReal x7874=((-1.0)*(x7875.value));
sj11=gconst1;
cj11=gconst2;
j11=x7874;
sj9=0;
cj9=1.0;
j9=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7873);
rxp1_1=(px*r21);
rxp1_2=(r11*x7873);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7874;
IkReal gconst1=r21;
IkReal gconst2=x7872;
j10eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x7877=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7877.valid){
continue;
}
IkReal x7876=x7877.value;
cj10array[0]=(((cj7*cj8*x7876))+(((-1.0)*sj7*sj8*x7876)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x7878=IKsin(j10);
IkReal x7879=(gconst1*x7878);
IkReal x7880=((1.0)*gconst2*x7878);
evalcond[0]=(r02*x7878);
evalcond[1]=((((-1.0)*r20*x7880))+((r21*x7879)));
evalcond[2]=(((r11*x7879))+(((-1.0)*r10*x7880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7881=(sj7*sj8);
IkReal x7882=(gconst2*r20);
IkReal x7883=(cj7*cj8);
IkReal x7884=(gconst1*r21);
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7882*x7882)))+(((2.0)*x7882*x7884))+(((-1.0)*(x7884*x7884)))+(((-1.0)*(r22*r22))))),-1);
if(!x7885.valid){
continue;
}
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7883))+((r22*x7881)))),IkReal((((x7881*x7884))+((x7882*x7883))+(((-1.0)*x7883*x7884))+(((-1.0)*x7881*x7882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7885.value)))+(x7886.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7887=IKsin(j10);
IkReal x7888=IKcos(j10);
IkReal x7889=((1.0)*gconst2);
IkReal x7890=(gconst1*r21);
IkReal x7891=((1.0)*cj8);
IkReal x7892=(gconst1*x7888);
IkReal x7893=((1.0)*cj7*sj8);
IkReal x7894=((1.0)*x7888);
IkReal x7895=(gconst1*x7887);
evalcond[0]=((((-1.0)*r22*x7894))+((x7887*x7890))+(((-1.0)*r20*x7887*x7889)));
evalcond[1]=(cj6+(((-1.0)*r12*x7894))+(((-1.0)*r10*x7887*x7889))+((r11*x7895)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x7887*x7889))+((r01*x7895))+(((-1.0)*r02*x7894)));
evalcond[3]=((((-1.0)*r20*x7888*x7889))+((x7888*x7890))+(((-1.0)*cj7*x7891))+((sj7*sj8))+((r22*x7887)));
evalcond[4]=((((-1.0)*cj6*x7893))+((r01*x7892))+(((-1.0)*cj6*sj7*x7891))+((r02*x7887))+(((-1.0)*r00*x7888*x7889)));
evalcond[5]=(((r12*x7887))+(((-1.0)*r10*x7888*x7889))+(((-1.0)*sj6*sj7*x7891))+(((-1.0)*sj6*x7893))+((r11*x7892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7896=((1.0)*gconst2);
CheckValue<IkReal> x7897 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst1*r21*sj6))+(((-1.0)*r20*sj6*x7896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7897.valid){
continue;
}
CheckValue<IkReal> x7898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7896))+(((-1.0)*gconst1*r10)))),-1);
if(!x7898.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7897.value)+(((1.5707963267949)*(x7898.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7899=IKsin(j10);
IkReal x7900=IKcos(j10);
IkReal x7901=((1.0)*gconst2);
IkReal x7902=(gconst1*r21);
IkReal x7903=((1.0)*cj8);
IkReal x7904=(gconst1*x7900);
IkReal x7905=((1.0)*cj7*sj8);
IkReal x7906=((1.0)*x7900);
IkReal x7907=(gconst1*x7899);
evalcond[0]=(((x7899*x7902))+(((-1.0)*r22*x7906))+(((-1.0)*r20*x7899*x7901)));
evalcond[1]=((((-1.0)*r12*x7906))+cj6+((r11*x7907))+(((-1.0)*r10*x7899*x7901)));
evalcond[2]=((((-1.0)*r00*x7899*x7901))+(((-1.0)*sj6))+((r01*x7907))+(((-1.0)*r02*x7906)));
evalcond[3]=(((r22*x7899))+(((-1.0)*r20*x7900*x7901))+(((-1.0)*cj7*x7903))+((sj7*sj8))+((x7900*x7902)));
evalcond[4]=(((r02*x7899))+(((-1.0)*cj6*x7905))+(((-1.0)*cj6*sj7*x7903))+((r01*x7904))+(((-1.0)*r00*x7900*x7901)));
evalcond[5]=((((-1.0)*sj6*x7905))+((r12*x7899))+((r11*x7904))+(((-1.0)*r10*x7900*x7901))+(((-1.0)*sj6*sj7*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7908=((1.0)*gconst2);
CheckValue<IkReal> x7909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7908)))),-1);
if(!x7909.valid){
continue;
}
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x7908))+((cj6*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7909.value)))+(x7910.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7911=IKsin(j10);
IkReal x7912=IKcos(j10);
IkReal x7913=((1.0)*gconst2);
IkReal x7914=(gconst1*r21);
IkReal x7915=((1.0)*cj8);
IkReal x7916=(gconst1*x7912);
IkReal x7917=((1.0)*cj7*sj8);
IkReal x7918=((1.0)*x7912);
IkReal x7919=(gconst1*x7911);
evalcond[0]=(((x7911*x7914))+(((-1.0)*r20*x7911*x7913))+(((-1.0)*r22*x7918)));
evalcond[1]=(cj6+((r11*x7919))+(((-1.0)*r12*x7918))+(((-1.0)*r10*x7911*x7913)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x7918))+((r01*x7919))+(((-1.0)*r00*x7911*x7913)));
evalcond[3]=(((r22*x7911))+(((-1.0)*r20*x7912*x7913))+((x7912*x7914))+(((-1.0)*cj7*x7915))+((sj7*sj8)));
evalcond[4]=(((r02*x7911))+(((-1.0)*r00*x7912*x7913))+((r01*x7916))+(((-1.0)*cj6*sj7*x7915))+(((-1.0)*cj6*x7917)));
evalcond[5]=(((r12*x7911))+((r11*x7916))+(((-1.0)*r10*x7912*x7913))+(((-1.0)*sj6*x7917))+(((-1.0)*sj6*sj7*x7915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7920=((-1.0)*r20);
IkReal x7921=x7608;
CheckValue<IkReal> x7923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7920),IKFAST_ATAN2_MAGTHRESH);
if(!x7923.valid){
continue;
}
IkReal x7922=((-1.0)*(x7923.value));
sj11=gconst1;
cj11=gconst2;
j11=x7922;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst0=x7922;
IkReal gconst1=(r21*x7921);
IkReal gconst2=(x7920*x7921);
j10eval[0]=cj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7924=((-1.0)*r20);
IkReal x7925=x7608;
CheckValue<IkReal> x7927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7924),IKFAST_ATAN2_MAGTHRESH);
if(!x7927.valid){
continue;
}
IkReal x7926=((-1.0)*(x7927.value));
sj11=gconst1;
cj11=gconst2;
j11=x7926;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst0=x7926;
IkReal gconst1=(r21*x7925);
IkReal gconst2=(x7924*x7925);
j10eval[0]=sj6;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7928=((-1.0)*r20);
IkReal x7929=x7608;
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7928),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
IkReal x7930=((-1.0)*(x7931.value));
sj11=gconst1;
cj11=gconst2;
j11=x7930;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst0=x7930;
IkReal gconst1=(r21*x7929);
IkReal gconst2=(x7928*x7929);
IkReal x7932=r22*r22;
CheckValue<IkReal> x7935=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7932))),-1);
if(!x7935.valid){
continue;
}
IkReal x7933=x7935.value;
IkReal x7934=(x7932+((x7933*(r20*r20*r20*r20)))+((x7933*(r21*r21*r21*r21)))+(((2.0)*x7933*(r20*r20)*(r21*r21))));
j10eval[0]=x7934;
j10eval[1]=IKsign(x7934);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x7936=((-1.0)*r20);
IkReal x7937=x7608;
CheckValue<IkReal> x7939 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7936),IKFAST_ATAN2_MAGTHRESH);
if(!x7939.valid){
continue;
}
IkReal x7938=((-1.0)*(x7939.value));
sj11=gconst1;
cj11=gconst2;
j11=x7938;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7938;
IkReal gconst1=(r21*x7937);
IkReal gconst2=(x7936*x7937);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x7940=((-1.0)*r20);
IkReal x7941=x7608;
CheckValue<IkReal> x7943 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7940),IKFAST_ATAN2_MAGTHRESH);
if(!x7943.valid){
continue;
}
IkReal x7942=((-1.0)*(x7943.value));
sj11=gconst1;
cj11=gconst2;
j11=x7942;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7942;
IkReal gconst1=(r21*x7941);
IkReal gconst2=(x7940*x7941);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x7944=((-1.0)*r20);
IkReal x7945=x7608;
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7944),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal x7946=((-1.0)*(x7947.value));
sj11=gconst1;
cj11=gconst2;
j11=x7946;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x7946;
IkReal gconst1=(r21*x7945);
IkReal gconst2=(x7944*x7945);
IkReal x7948=r22*r22;
IkReal x7949=(r12*sj7*sj8);
IkReal x7950=(cj7*cj8*r12);
CheckValue<IkReal> x7954=IKPowWithIntegerCheck(((-1.0)+x7948),-1);
if(!x7954.valid){
continue;
}
IkReal x7951=x7954.value;
if((((1.0)+(((-1.0)*x7948)))) < -0.00001)
continue;
IkReal x7952=IKsqrt(((1.0)+(((-1.0)*x7948))));
IkReal x7953=(r22*x7951*x7952);
j10eval[0]=((IKabs(((((-1.0)*x7950))+x7949)))+(IKabs((((x7950*x7953))+(((-1.0)*x7949*x7953))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7955=((1.0)*gconst1);
IkReal x7956=(cj7*cj8);
IkReal x7957=(gconst2*r10);
IkReal x7958=(sj7*sj8);
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal((((gconst1*r11*x7956))+(((-1.0)*r11*x7955*x7958))+(((-1.0)*x7956*x7957))+((x7957*x7958)))),IkReal((((r12*x7958))+(((-1.0)*r12*x7956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
CheckValue<IkReal> x7960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7955))+(((-1.0)*gconst2*r01)))),-1);
if(!x7960.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7959.value)+(((1.5707963267949)*(x7960.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7961=IKsin(j10);
IkReal x7962=IKcos(j10);
IkReal x7963=(gconst2*r00);
IkReal x7964=(gconst1*r01);
IkReal x7965=(gconst1*r21);
IkReal x7966=((1.0)*cj7);
IkReal x7967=(gconst2*r20);
IkReal x7968=(gconst2*r10);
IkReal x7969=(gconst1*r11);
IkReal x7970=((1.0)*x7961);
IkReal x7971=((1.0)*x7962);
evalcond[0]=((((-1.0)*r22*x7971))+((x7961*x7965))+(((-1.0)*x7967*x7970)));
evalcond[1]=((((-1.0)*x7963*x7970))+((x7961*x7964))+(((-1.0)*r02*x7971)));
evalcond[2]=((((-1.0)*r12*x7970))+(((-1.0)*x7969*x7971))+((x7962*x7968)));
evalcond[3]=((1.0)+(((-1.0)*x7968*x7970))+((x7961*x7969))+(((-1.0)*r12*x7971)));
evalcond[4]=((((-1.0)*cj8*x7966))+(((-1.0)*r22*x7970))+(((-1.0)*x7965*x7971))+((sj7*sj8))+((x7962*x7967)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*x7964*x7971))+(((-1.0)*r02*x7970))+(((-1.0)*sj8*x7966))+((x7962*x7963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7972=(gconst1*r11);
IkReal x7973=(gconst2*r10);
CheckValue<IkReal> x7974 = IKatan2WithCheck(IkReal((x7973+(((-1.0)*x7972)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7974.valid){
continue;
}
CheckValue<IkReal> x7975=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7973*x7973)+(((-2.0)*x7972*x7973))+(x7972*x7972))),-1);
if(!x7975.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7974.value)+(((1.5707963267949)*(x7975.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7976=IKsin(j10);
IkReal x7977=IKcos(j10);
IkReal x7978=(gconst2*r00);
IkReal x7979=(gconst1*r01);
IkReal x7980=(gconst1*r21);
IkReal x7981=((1.0)*cj7);
IkReal x7982=(gconst2*r20);
IkReal x7983=(gconst2*r10);
IkReal x7984=(gconst1*r11);
IkReal x7985=((1.0)*x7976);
IkReal x7986=((1.0)*x7977);
evalcond[0]=((((-1.0)*r22*x7986))+((x7976*x7980))+(((-1.0)*x7982*x7985)));
evalcond[1]=((((-1.0)*x7978*x7985))+((x7976*x7979))+(((-1.0)*r02*x7986)));
evalcond[2]=((((-1.0)*r12*x7985))+((x7977*x7983))+(((-1.0)*x7984*x7986)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7986))+((x7976*x7984))+(((-1.0)*x7983*x7985)));
evalcond[4]=((((-1.0)*r22*x7985))+((x7977*x7982))+(((-1.0)*x7980*x7986))+(((-1.0)*cj8*x7981))+((sj7*sj8)));
evalcond[5]=((((-1.0)*x7979*x7986))+(((-1.0)*cj8*sj7))+((x7977*x7978))+(((-1.0)*sj8*x7981))+(((-1.0)*r02*x7985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7987=((1.0)*gconst2);
CheckValue<IkReal> x7988 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7987))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7988.valid){
continue;
}
CheckValue<IkReal> x7989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7987))+(((-1.0)*gconst1*r00)))),-1);
if(!x7989.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x7988.value)+(((1.5707963267949)*(x7989.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x7990=IKsin(j10);
IkReal x7991=IKcos(j10);
IkReal x7992=(gconst2*r00);
IkReal x7993=(gconst1*r01);
IkReal x7994=(gconst1*r21);
IkReal x7995=((1.0)*cj7);
IkReal x7996=(gconst2*r20);
IkReal x7997=(gconst2*r10);
IkReal x7998=(gconst1*r11);
IkReal x7999=((1.0)*x7990);
IkReal x8000=((1.0)*x7991);
evalcond[0]=(((x7990*x7994))+(((-1.0)*x7996*x7999))+(((-1.0)*r22*x8000)));
evalcond[1]=(((x7990*x7993))+(((-1.0)*x7992*x7999))+(((-1.0)*r02*x8000)));
evalcond[2]=((((-1.0)*r12*x7999))+(((-1.0)*x7998*x8000))+((x7991*x7997)));
evalcond[3]=((1.0)+((x7990*x7998))+(((-1.0)*r12*x8000))+(((-1.0)*x7997*x7999)));
evalcond[4]=((((-1.0)*cj8*x7995))+((sj7*sj8))+((x7991*x7996))+(((-1.0)*r22*x7999))+(((-1.0)*x7994*x8000)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*x7993*x8000))+(((-1.0)*r02*x7999))+(((-1.0)*sj8*x7995))+((x7991*x7992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8001=((-1.0)*r20);
IkReal x8002=x7608;
CheckValue<IkReal> x8004 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8001),IKFAST_ATAN2_MAGTHRESH);
if(!x8004.valid){
continue;
}
IkReal x8003=((-1.0)*(x8004.value));
sj11=gconst1;
cj11=gconst2;
j11=x8003;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x8003;
IkReal gconst1=(r21*x8002);
IkReal gconst2=(x8001*x8002);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x8005=((-1.0)*r20);
IkReal x8006=x7608;
CheckValue<IkReal> x8008 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8005),IKFAST_ATAN2_MAGTHRESH);
if(!x8008.valid){
continue;
}
IkReal x8007=((-1.0)*(x8008.value));
sj11=gconst1;
cj11=gconst2;
j11=x8007;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x8007;
IkReal gconst1=(r21*x8006);
IkReal gconst2=(x8005*x8006);
IkReal x8009=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8013=IKPowWithIntegerCheck(x8009,-1);
if(!x8013.valid){
continue;
}
IkReal x8010=x8013.value;
IkReal x8011=((1.0)*x8010);
IkReal x8012=((((-1.0)*x8011*(r10*r10)*(r20*r20)))+(((-1.0)*x8011*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8010))+(((-1.0)*(r12*r12))));
j10eval[0]=x8012;
j10eval[1]=r12;
j10eval[2]=x8009;
j10eval[3]=IKsign(x8012);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8014=((-1.0)*r20);
IkReal x8015=x7608;
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8014),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8016=((-1.0)*(x8017.value));
sj11=gconst1;
cj11=gconst2;
j11=x8016;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x8016;
IkReal gconst1=(r21*x8015);
IkReal gconst2=(x8014*x8015);
IkReal x8018=r22*r22;
IkReal x8019=(cj7*r02*sj8);
IkReal x8020=(cj8*r02*sj7);
CheckValue<IkReal> x8024=IKPowWithIntegerCheck(((-1.0)+x8018),-1);
if(!x8024.valid){
continue;
}
IkReal x8021=x8024.value;
if((((1.0)+(((-1.0)*x8018)))) < -0.00001)
continue;
IkReal x8022=IKsqrt(((1.0)+(((-1.0)*x8018))));
IkReal x8023=(r22*x8021*x8022);
j10eval[0]=((IKabs((x8019+x8020)))+(IKabs((((x8020*x8023))+((x8019*x8023))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8025=(cj7*sj8);
IkReal x8026=(cj8*sj7);
IkReal x8027=(gconst1*r01);
IkReal x8028=((1.0)*gconst2*r00);
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal((((r02*x8026))+((r02*x8025)))),IkReal(((((-1.0)*x8025*x8028))+((x8026*x8027))+((x8025*x8027))+(((-1.0)*x8026*x8028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r00*x8027))+(x8027*x8027)+(((gconst2*gconst2)*(r00*r00)))+(r02*r02))),-1);
if(!x8030.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8029.value)+(((1.5707963267949)*(x8030.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8031=IKsin(j10);
IkReal x8032=IKcos(j10);
IkReal x8033=(gconst2*r00);
IkReal x8034=(gconst1*r01);
IkReal x8035=(gconst1*r21);
IkReal x8036=(gconst2*r20);
IkReal x8037=(gconst2*r10);
IkReal x8038=(gconst1*r11);
IkReal x8039=((1.0)*x8031);
IkReal x8040=((1.0)*x8032);
evalcond[0]=((((-1.0)*r22*x8040))+(((-1.0)*x8036*x8039))+((x8031*x8035)));
evalcond[1]=((((-1.0)*x8033*x8039))+(((-1.0)*r02*x8040))+((x8031*x8034)));
evalcond[2]=((((-1.0)*r12*x8039))+((x8032*x8037))+(((-1.0)*x8038*x8040)));
evalcond[3]=((-1.0)+(((-1.0)*x8037*x8039))+(((-1.0)*r12*x8040))+((x8031*x8038)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r02*x8039))+(((-1.0)*x8034*x8040))+((x8032*x8033))+((cj7*sj8)));
evalcond[5]=((((-1.0)*x8035*x8040))+(((-1.0)*cj7*cj8))+((x8032*x8036))+(((-1.0)*r22*x8039))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8041=(gconst1*r11);
IkReal x8042=(gconst2*r10);
CheckValue<IkReal> x8043 = IKatan2WithCheck(IkReal(((((-1.0)*x8041))+x8042)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8043.valid){
continue;
}
CheckValue<IkReal> x8044=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8042*x8042)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8041*x8041)))+(((2.0)*x8041*x8042)))),-1);
if(!x8044.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8043.value)+(((1.5707963267949)*(x8044.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8045=IKsin(j10);
IkReal x8046=IKcos(j10);
IkReal x8047=(gconst2*r00);
IkReal x8048=(gconst1*r01);
IkReal x8049=(gconst1*r21);
IkReal x8050=(gconst2*r20);
IkReal x8051=(gconst2*r10);
IkReal x8052=(gconst1*r11);
IkReal x8053=((1.0)*x8045);
IkReal x8054=((1.0)*x8046);
evalcond[0]=(((x8045*x8049))+(((-1.0)*x8050*x8053))+(((-1.0)*r22*x8054)));
evalcond[1]=(((x8045*x8048))+(((-1.0)*x8047*x8053))+(((-1.0)*r02*x8054)));
evalcond[2]=((((-1.0)*r12*x8053))+(((-1.0)*x8052*x8054))+((x8046*x8051)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8054))+((x8045*x8052))+(((-1.0)*x8051*x8053)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*r02*x8053))+((x8046*x8047))+((cj7*sj8))+(((-1.0)*x8048*x8054)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x8053))+((x8046*x8050))+(((-1.0)*x8049*x8054))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8055 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8055.valid){
continue;
}
CheckValue<IkReal> x8056=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8056.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8055.value)+(((1.5707963267949)*(x8056.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8057=IKsin(j10);
IkReal x8058=IKcos(j10);
IkReal x8059=(gconst2*r00);
IkReal x8060=(gconst1*r01);
IkReal x8061=(gconst1*r21);
IkReal x8062=(gconst2*r20);
IkReal x8063=(gconst2*r10);
IkReal x8064=(gconst1*r11);
IkReal x8065=((1.0)*x8057);
IkReal x8066=((1.0)*x8058);
evalcond[0]=(((x8057*x8061))+(((-1.0)*r22*x8066))+(((-1.0)*x8062*x8065)));
evalcond[1]=(((x8057*x8060))+(((-1.0)*x8059*x8065))+(((-1.0)*r02*x8066)));
evalcond[2]=((((-1.0)*x8064*x8066))+(((-1.0)*r12*x8065))+((x8058*x8063)));
evalcond[3]=((-1.0)+((x8057*x8064))+(((-1.0)*r12*x8066))+(((-1.0)*x8063*x8065)));
evalcond[4]=(((cj8*sj7))+((x8058*x8059))+(((-1.0)*x8060*x8066))+((cj7*sj8))+(((-1.0)*r02*x8065)));
evalcond[5]=((((-1.0)*cj7*cj8))+((x8058*x8062))+(((-1.0)*x8061*x8066))+(((-1.0)*r22*x8065))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8067=((-1.0)*r20);
IkReal x8068=x7608;
CheckValue<IkReal> x8070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8067),IKFAST_ATAN2_MAGTHRESH);
if(!x8070.valid){
continue;
}
IkReal x8069=((-1.0)*(x8070.value));
sj11=gconst1;
cj11=gconst2;
j11=x8069;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x8069;
IkReal gconst1=(r21*x8068);
IkReal gconst2=(x8067*x8068);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x8071=((-1.0)*r20);
IkReal x8072=x7608;
CheckValue<IkReal> x8074 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8071),IKFAST_ATAN2_MAGTHRESH);
if(!x8074.valid){
continue;
}
IkReal x8073=((-1.0)*(x8074.value));
sj11=gconst1;
cj11=gconst2;
j11=x8073;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x8073;
IkReal gconst1=(r21*x8072);
IkReal gconst2=(x8071*x8072);
IkReal x8075=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(x8075,-1);
if(!x8079.valid){
continue;
}
IkReal x8076=x8079.value;
IkReal x8077=((1.0)*x8076);
IkReal x8078=((((-1.0)*x8077*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8077*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8076)));
j10eval[0]=x8078;
j10eval[1]=IKsign(x8078);
j10eval[2]=r02;
j10eval[3]=x8075;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8080=((-1.0)*r20);
IkReal x8081=x7608;
CheckValue<IkReal> x8083 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8080),IKFAST_ATAN2_MAGTHRESH);
if(!x8083.valid){
continue;
}
IkReal x8082=((-1.0)*(x8083.value));
sj11=gconst1;
cj11=gconst2;
j11=x8082;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x8082;
IkReal gconst1=(r21*x8081);
IkReal gconst2=(x8080*x8081);
IkReal x8084=r22*r22;
IkReal x8085=(r02*sj7*sj8);
IkReal x8086=(cj7*cj8*r02);
CheckValue<IkReal> x8090=IKPowWithIntegerCheck(((-1.0)+x8084),-1);
if(!x8090.valid){
continue;
}
IkReal x8087=x8090.value;
if((((1.0)+(((-1.0)*x8084)))) < -0.00001)
continue;
IkReal x8088=IKsqrt(((1.0)+(((-1.0)*x8084))));
IkReal x8089=(r22*x8087*x8088);
j10eval[0]=((IKabs(((((-1.0)*x8086))+x8085)))+(IKabs(((((-1.0)*x8085*x8089))+((x8086*x8089))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8091=(cj7*cj8);
IkReal x8092=(gconst1*r01);
IkReal x8093=(sj7*sj8);
IkReal x8094=(gconst2*r00);
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(((((-1.0)*x8092*x8093))+((x8091*x8092))+(((-1.0)*x8091*x8094))+((x8093*x8094)))),IkReal(((((-1.0)*r02*x8091))+((r02*x8093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
CheckValue<IkReal> x8096=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8096.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8095.value)+(((1.5707963267949)*(x8096.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8097=IKsin(j10);
IkReal x8098=IKcos(j10);
IkReal x8099=(gconst2*r00);
IkReal x8100=(gconst1*r01);
IkReal x8101=(gconst1*r21);
IkReal x8102=((1.0)*cj7);
IkReal x8103=(gconst2*r10);
IkReal x8104=(gconst2*r20);
IkReal x8105=(gconst1*r11);
IkReal x8106=((1.0)*x8097);
IkReal x8107=((1.0)*x8098);
evalcond[0]=((((-1.0)*x8104*x8106))+(((-1.0)*r22*x8107))+((x8097*x8101)));
evalcond[1]=((((-1.0)*x8103*x8106))+((x8097*x8105))+(((-1.0)*r12*x8107)));
evalcond[2]=(((x8098*x8099))+(((-1.0)*r02*x8106))+(((-1.0)*x8100*x8107)));
evalcond[3]=((-1.0)+(((-1.0)*x8099*x8106))+((x8097*x8100))+(((-1.0)*r02*x8107)));
evalcond[4]=((((-1.0)*r22*x8106))+(((-1.0)*x8101*x8107))+((x8098*x8104))+(((-1.0)*cj8*x8102))+((sj7*sj8)));
evalcond[5]=((((-1.0)*x8105*x8107))+(((-1.0)*cj8*sj7))+((x8098*x8103))+(((-1.0)*sj8*x8102))+(((-1.0)*r12*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8108=(gconst2*r00);
IkReal x8109=(gconst1*r01);
CheckValue<IkReal> x8110 = IKatan2WithCheck(IkReal(((((-1.0)*x8109))+x8108)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8110.valid){
continue;
}
CheckValue<IkReal> x8111=IKPowWithIntegerCheck(IKsign(((((2.0)*x8108*x8109))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8108*x8108)))+(((-1.0)*(x8109*x8109))))),-1);
if(!x8111.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8110.value)+(((1.5707963267949)*(x8111.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8112=IKsin(j10);
IkReal x8113=IKcos(j10);
IkReal x8114=(gconst2*r00);
IkReal x8115=(gconst1*r01);
IkReal x8116=(gconst1*r21);
IkReal x8117=((1.0)*cj7);
IkReal x8118=(gconst2*r10);
IkReal x8119=(gconst2*r20);
IkReal x8120=(gconst1*r11);
IkReal x8121=((1.0)*x8112);
IkReal x8122=((1.0)*x8113);
evalcond[0]=(((x8112*x8116))+(((-1.0)*r22*x8122))+(((-1.0)*x8119*x8121)));
evalcond[1]=((((-1.0)*r12*x8122))+((x8112*x8120))+(((-1.0)*x8118*x8121)));
evalcond[2]=((((-1.0)*x8115*x8122))+(((-1.0)*r02*x8121))+((x8113*x8114)));
evalcond[3]=((-1.0)+(((-1.0)*x8114*x8121))+((x8112*x8115))+(((-1.0)*r02*x8122)));
evalcond[4]=((((-1.0)*x8116*x8122))+((x8113*x8119))+(((-1.0)*r22*x8121))+((sj7*sj8))+(((-1.0)*cj8*x8117)));
evalcond[5]=((((-1.0)*r12*x8121))+(((-1.0)*sj8*x8117))+(((-1.0)*cj8*sj7))+((x8113*x8118))+(((-1.0)*x8120*x8122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8123=((1.0)*gconst2);
CheckValue<IkReal> x8124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8123))+(((-1.0)*gconst1*r10)))),-1);
if(!x8124.valid){
continue;
}
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8123))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8124.value)))+(x8125.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8126=IKsin(j10);
IkReal x8127=IKcos(j10);
IkReal x8128=(gconst2*r00);
IkReal x8129=(gconst1*r01);
IkReal x8130=(gconst1*r21);
IkReal x8131=((1.0)*cj7);
IkReal x8132=(gconst2*r10);
IkReal x8133=(gconst2*r20);
IkReal x8134=(gconst1*r11);
IkReal x8135=((1.0)*x8126);
IkReal x8136=((1.0)*x8127);
evalcond[0]=((((-1.0)*r22*x8136))+((x8126*x8130))+(((-1.0)*x8133*x8135)));
evalcond[1]=((((-1.0)*x8132*x8135))+(((-1.0)*r12*x8136))+((x8126*x8134)));
evalcond[2]=((((-1.0)*r02*x8135))+(((-1.0)*x8129*x8136))+((x8127*x8128)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8136))+(((-1.0)*x8128*x8135))+((x8126*x8129)));
evalcond[4]=((((-1.0)*cj8*x8131))+(((-1.0)*r22*x8135))+(((-1.0)*x8130*x8136))+((x8127*x8133))+((sj7*sj8)));
evalcond[5]=((((-1.0)*x8134*x8136))+(((-1.0)*cj8*sj7))+(((-1.0)*r12*x8135))+((x8127*x8132))+(((-1.0)*sj8*x8131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8137=((-1.0)*r20);
IkReal x8138=x7608;
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8137),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
IkReal x8139=((-1.0)*(x8140.value));
sj11=gconst1;
cj11=gconst2;
j11=x8139;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x8139;
IkReal gconst1=(r21*x8138);
IkReal gconst2=(x8137*x8138);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x8141=((-1.0)*r20);
IkReal x8142=x7608;
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8141),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
IkReal x8143=((-1.0)*(x8144.value));
sj11=gconst1;
cj11=gconst2;
j11=x8143;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x8143;
IkReal gconst1=(r21*x8142);
IkReal gconst2=(x8141*x8142);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8145=((-1.0)*r20);
IkReal x8146=x7608;
CheckValue<IkReal> x8148 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8145),IKFAST_ATAN2_MAGTHRESH);
if(!x8148.valid){
continue;
}
IkReal x8147=((-1.0)*(x8148.value));
sj11=gconst1;
cj11=gconst2;
j11=x8147;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x8147;
IkReal gconst1=(r21*x8146);
IkReal gconst2=(x8145*x8146);
IkReal x8149=r22*r22;
IkReal x8150=(cj7*r12*sj8);
IkReal x8151=(cj8*r12*sj7);
CheckValue<IkReal> x8155=IKPowWithIntegerCheck(((-1.0)+x8149),-1);
if(!x8155.valid){
continue;
}
IkReal x8152=x8155.value;
if((((1.0)+(((-1.0)*x8149)))) < -0.00001)
continue;
IkReal x8153=IKsqrt(((1.0)+(((-1.0)*x8149))));
IkReal x8154=(r22*x8152*x8153);
j10eval[0]=((IKabs((((x8150*x8154))+((x8151*x8154)))))+(IKabs((x8150+x8151))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8156=(cj8*sj7);
IkReal x8157=(gconst1*r11);
IkReal x8158=(cj7*sj8);
IkReal x8159=((1.0)*gconst2*r10);
CheckValue<IkReal> x8160 = IKatan2WithCheck(IkReal((((r12*x8158))+((r12*x8156)))),IkReal((((x8156*x8157))+(((-1.0)*x8156*x8159))+(((-1.0)*x8158*x8159))+((x8157*x8158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8160.valid){
continue;
}
CheckValue<IkReal> x8161=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8157*x8157)+(((gconst2*gconst2)*(r10*r10)))+(((-2.0)*gconst2*r10*x8157)))),-1);
if(!x8161.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8160.value)+(((1.5707963267949)*(x8161.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8162=IKsin(j10);
IkReal x8163=IKcos(j10);
IkReal x8164=(gconst2*r00);
IkReal x8165=(gconst1*r01);
IkReal x8166=(gconst1*r21);
IkReal x8167=(gconst2*r10);
IkReal x8168=(gconst2*r20);
IkReal x8169=(gconst1*r11);
IkReal x8170=((1.0)*x8162);
IkReal x8171=((1.0)*x8163);
evalcond[0]=((((-1.0)*x8168*x8170))+(((-1.0)*r22*x8171))+((x8162*x8166)));
evalcond[1]=((((-1.0)*r12*x8171))+((x8162*x8169))+(((-1.0)*x8167*x8170)));
evalcond[2]=(((x8163*x8164))+(((-1.0)*x8165*x8171))+(((-1.0)*r02*x8170)));
evalcond[3]=((1.0)+(((-1.0)*x8164*x8170))+((x8162*x8165))+(((-1.0)*r02*x8171)));
evalcond[4]=((((-1.0)*r12*x8170))+((cj8*sj7))+(((-1.0)*x8169*x8171))+((x8163*x8167))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((x8163*x8168))+(((-1.0)*r22*x8170))+(((-1.0)*x8166*x8171))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8172=(gconst1*r01);
IkReal x8173=(gconst2*r00);
CheckValue<IkReal> x8174=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8172*x8173))+(x8173*x8173)+(x8172*x8172)+(r02*r02))),-1);
if(!x8174.valid){
continue;
}
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal(((((-1.0)*x8172))+x8173)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8174.value)))+(x8175.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8176=IKsin(j10);
IkReal x8177=IKcos(j10);
IkReal x8178=(gconst2*r00);
IkReal x8179=(gconst1*r01);
IkReal x8180=(gconst1*r21);
IkReal x8181=(gconst2*r10);
IkReal x8182=(gconst2*r20);
IkReal x8183=(gconst1*r11);
IkReal x8184=((1.0)*x8176);
IkReal x8185=((1.0)*x8177);
evalcond[0]=((((-1.0)*r22*x8185))+(((-1.0)*x8182*x8184))+((x8176*x8180)));
evalcond[1]=((((-1.0)*r12*x8185))+((x8176*x8183))+(((-1.0)*x8181*x8184)));
evalcond[2]=(((x8177*x8178))+(((-1.0)*r02*x8184))+(((-1.0)*x8179*x8185)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8185))+((x8176*x8179))+(((-1.0)*x8178*x8184)));
evalcond[4]=(((cj8*sj7))+((x8177*x8181))+(((-1.0)*x8183*x8185))+(((-1.0)*r12*x8184))+((cj7*sj8)));
evalcond[5]=((((-1.0)*r22*x8184))+(((-1.0)*cj7*cj8))+((x8177*x8182))+((sj7*sj8))+(((-1.0)*x8180*x8185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8187.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8186.value)+(((1.5707963267949)*(x8187.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8188=IKsin(j10);
IkReal x8189=IKcos(j10);
IkReal x8190=(gconst2*r00);
IkReal x8191=(gconst1*r01);
IkReal x8192=(gconst1*r21);
IkReal x8193=(gconst2*r10);
IkReal x8194=(gconst2*r20);
IkReal x8195=(gconst1*r11);
IkReal x8196=((1.0)*x8188);
IkReal x8197=((1.0)*x8189);
evalcond[0]=((((-1.0)*r22*x8197))+(((-1.0)*x8194*x8196))+((x8188*x8192)));
evalcond[1]=((((-1.0)*r12*x8197))+(((-1.0)*x8193*x8196))+((x8188*x8195)));
evalcond[2]=((((-1.0)*r02*x8196))+((x8189*x8190))+(((-1.0)*x8191*x8197)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8197))+((x8188*x8191))+(((-1.0)*x8190*x8196)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x8195*x8197))+(((-1.0)*r12*x8196))+((cj7*sj8))+((x8189*x8193)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x8196))+(((-1.0)*x8192*x8197))+((sj7*sj8))+((x8189*x8194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8198=((-1.0)*r20);
IkReal x8199=((-1.0)*px);
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8198),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
IkReal x8200=((-1.0)*(x8201.value));
sj11=gconst1;
cj11=gconst2;
j11=x8200;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8199);
rxp1_1=(px*r21);
rxp1_2=(r11*x8199);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8200;
IkReal gconst1=r21;
IkReal gconst2=x8198;
j10eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x8203=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8203.valid){
continue;
}
IkReal x8202=x8203.value;
cj10array[0]=(((cj7*cj8*x8202))+(((-1.0)*sj7*sj8*x8202)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x8204=IKsin(j10);
IkReal x8205=(gconst1*x8204);
IkReal x8206=((1.0)*gconst2*x8204);
evalcond[0]=((-1.0)*r02*x8204);
evalcond[1]=(((r21*x8205))+(((-1.0)*r20*x8206)));
evalcond[2]=((((-1.0)*r10*x8206))+((r11*x8205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8207=(sj7*sj8);
IkReal x8208=(gconst2*r20);
IkReal x8209=(cj7*cj8);
IkReal x8210=(gconst1*r21);
CheckValue<IkReal> x8211 = IKatan2WithCheck(IkReal((((r22*x8207))+(((-1.0)*r22*x8209)))),IkReal((((x8208*x8209))+(((-1.0)*x8207*x8208))+(((-1.0)*x8209*x8210))+((x8207*x8210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8211.valid){
continue;
}
CheckValue<IkReal> x8212=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8208*x8208)+(((-2.0)*x8208*x8210))+(x8210*x8210))),-1);
if(!x8212.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8211.value)+(((1.5707963267949)*(x8212.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8213=IKsin(j10);
IkReal x8214=IKcos(j10);
IkReal x8215=(gconst2*r00);
IkReal x8216=(gconst1*r01);
IkReal x8217=(gconst1*r21);
IkReal x8218=(gconst2*r20);
IkReal x8219=((1.0)*cj8);
IkReal x8220=(gconst2*r10);
IkReal x8221=(gconst1*r11);
IkReal x8222=((1.0)*x8213);
IkReal x8223=((1.0)*x8214);
IkReal x8224=((1.0)*cj7*sj8);
evalcond[0]=((((-1.0)*x8218*x8222))+(((-1.0)*r22*x8223))+((x8213*x8217)));
evalcond[1]=((((-1.0)*x8220*x8222))+cj6+((x8213*x8221))+(((-1.0)*r12*x8223)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x8223))+(((-1.0)*x8215*x8222))+((x8213*x8216)));
evalcond[3]=((((-1.0)*r22*x8222))+((x8214*x8218))+((sj7*sj8))+(((-1.0)*cj7*x8219))+(((-1.0)*x8217*x8223)));
evalcond[4]=((((-1.0)*r02*x8222))+(((-1.0)*cj6*sj7*x8219))+(((-1.0)*cj6*x8224))+((x8214*x8215))+(((-1.0)*x8216*x8223)));
evalcond[5]=((((-1.0)*x8221*x8223))+(((-1.0)*sj6*x8224))+(((-1.0)*sj6*sj7*x8219))+(((-1.0)*r12*x8222))+((x8214*x8220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8225=((1.0)*gconst2);
CheckValue<IkReal> x8226 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal((((gconst1*r21*sj6))+(((-1.0)*r20*sj6*x8225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8226.valid){
continue;
}
CheckValue<IkReal> x8227=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8225)))),-1);
if(!x8227.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8226.value)+(((1.5707963267949)*(x8227.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8228=IKsin(j10);
IkReal x8229=IKcos(j10);
IkReal x8230=(gconst2*r00);
IkReal x8231=(gconst1*r01);
IkReal x8232=(gconst1*r21);
IkReal x8233=(gconst2*r20);
IkReal x8234=((1.0)*cj8);
IkReal x8235=(gconst2*r10);
IkReal x8236=(gconst1*r11);
IkReal x8237=((1.0)*x8228);
IkReal x8238=((1.0)*x8229);
IkReal x8239=((1.0)*cj7*sj8);
evalcond[0]=((((-1.0)*x8233*x8237))+((x8228*x8232))+(((-1.0)*r22*x8238)));
evalcond[1]=(((x8228*x8236))+cj6+(((-1.0)*r12*x8238))+(((-1.0)*x8235*x8237)));
evalcond[2]=((((-1.0)*sj6))+((x8228*x8231))+(((-1.0)*r02*x8238))+(((-1.0)*x8230*x8237)));
evalcond[3]=((((-1.0)*cj7*x8234))+((x8229*x8233))+(((-1.0)*r22*x8237))+((sj7*sj8))+(((-1.0)*x8232*x8238)));
evalcond[4]=((((-1.0)*r02*x8237))+(((-1.0)*cj6*sj7*x8234))+((x8229*x8230))+(((-1.0)*cj6*x8239))+(((-1.0)*x8231*x8238)));
evalcond[5]=((((-1.0)*sj6*sj7*x8234))+(((-1.0)*x8236*x8238))+(((-1.0)*sj6*x8239))+((x8229*x8235))+(((-1.0)*r12*x8237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8240=((1.0)*gconst2);
CheckValue<IkReal> x8241 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x8240))+((cj6*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8241.valid){
continue;
}
CheckValue<IkReal> x8242=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8240)))),-1);
if(!x8242.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8241.value)+(((1.5707963267949)*(x8242.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8243=IKsin(j10);
IkReal x8244=IKcos(j10);
IkReal x8245=(gconst2*r00);
IkReal x8246=(gconst1*r01);
IkReal x8247=(gconst1*r21);
IkReal x8248=(gconst2*r20);
IkReal x8249=((1.0)*cj8);
IkReal x8250=(gconst2*r10);
IkReal x8251=(gconst1*r11);
IkReal x8252=((1.0)*x8243);
IkReal x8253=((1.0)*x8244);
IkReal x8254=((1.0)*cj7*sj8);
evalcond[0]=((((-1.0)*x8248*x8252))+((x8243*x8247))+(((-1.0)*r22*x8253)));
evalcond[1]=(cj6+(((-1.0)*r12*x8253))+((x8243*x8251))+(((-1.0)*x8250*x8252)));
evalcond[2]=((((-1.0)*sj6))+((x8243*x8246))+(((-1.0)*x8245*x8252))+(((-1.0)*r02*x8253)));
evalcond[3]=((((-1.0)*cj7*x8249))+(((-1.0)*r22*x8252))+(((-1.0)*x8247*x8253))+((sj7*sj8))+((x8244*x8248)));
evalcond[4]=((((-1.0)*cj6*x8254))+(((-1.0)*x8246*x8253))+(((-1.0)*cj6*sj7*x8249))+((x8244*x8245))+(((-1.0)*r02*x8252)));
evalcond[5]=(((x8244*x8250))+(((-1.0)*r12*x8252))+(((-1.0)*x8251*x8253))+(((-1.0)*sj6*sj7*x8249))+(((-1.0)*sj6*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8255=((-1.0)*r20);
IkReal x8256=x7608;
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8255),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
IkReal x8257=((-1.0)*(x8258.value));
sj11=gconst1;
cj11=gconst2;
j11=x8257;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x8257;
IkReal gconst1=(r21*x8256);
IkReal gconst2=(x8255*x8256);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8259=((-1.0)*r20);
IkReal x8260=x7608;
CheckValue<IkReal> x8262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8259),IKFAST_ATAN2_MAGTHRESH);
if(!x8262.valid){
continue;
}
IkReal x8261=((-1.0)*(x8262.value));
sj11=gconst1;
cj11=gconst2;
j11=x8261;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst0=x8261;
IkReal gconst1=(r21*x8260);
IkReal gconst2=(x8259*x8260);
CheckValue<IkReal> x8270=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8270.valid){
continue;
}
IkReal x8263=x8270.value;
IkReal x8264=(sj9*x8263);
IkReal x8265=(r10*x8264);
IkReal x8266=(r00*x8264);
IkReal x8267=(r01*x8264);
IkReal x8268=(r11*x8264);
IkReal x8269=(r20*r21*x8264);
j10eval[0]=IKsign((((r02*r12*sj9))+((r00*x8265*(r20*r20)))+((r11*r20*r21*x8266))+((r11*x8267*(r21*r21)))+((r01*r20*r21*x8265))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8271=gconst1*gconst1;
IkReal x8272=gconst2*gconst2;
IkReal x8273=(cj9*r11);
IkReal x8274=((1.0)*cj9);
IkReal x8275=(r10*sj9);
IkReal x8276=(gconst1*r01);
IkReal x8277=(gconst1*gconst2*r00);
IkReal x8278=(r01*x8271);
IkReal x8279=(gconst2*r11*sj9);
IkReal x8280=(r00*x8272);
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign((((cj9*gconst2*r10*x8276))+(((-1.0)*x8273*x8278))+(((-1.0)*r02*r12*x8274))+((x8273*x8277))+(((-1.0)*r10*x8274*x8280)))),-1);
if(!x8281.valid){
continue;
}
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal((((r02*x8279))+((gconst1*r02*x8275)))),IkReal((((x8275*x8278))+(((-1.0)*x8275*x8277))+((x8276*x8279))+(((-1.0)*r11*sj9*x8280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8281.value)))+(x8282.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8283=IKsin(j10);
IkReal x8284=IKcos(j10);
IkReal x8285=((1.0)*gconst2);
IkReal x8286=((1.0)*cj8);
IkReal x8287=(gconst2*sj9);
IkReal x8288=((1.0)*sj9);
IkReal x8289=(sj7*sj8);
IkReal x8290=(gconst1*r20);
IkReal x8291=(cj9*gconst2);
IkReal x8292=(gconst1*r00);
IkReal x8293=(gconst1*r11);
IkReal x8294=(gconst1*r10);
IkReal x8295=(sj7*x8286);
IkReal x8296=((1.0)*cj7*sj8);
IkReal x8297=(r02*x8283);
IkReal x8298=(cj9*x8284);
IkReal x8299=(r12*x8283);
IkReal x8300=((1.0)*x8284);
IkReal x8301=(gconst1*x8284);
IkReal x8302=(gconst1*x8283);
IkReal x8303=(r22*x8283);
IkReal x8304=(x8295+x8296);
evalcond[0]=((((-1.0)*r22*x8300))+((r21*x8302))+(((-1.0)*r20*x8283*x8285)));
evalcond[1]=(((r01*x8302))+(((-1.0)*r02*x8300))+(((-1.0)*r00*x8283*x8285)));
evalcond[2]=((1.0)+(((-1.0)*r12*x8300))+(((-1.0)*r10*x8283*x8285))+((x8283*x8293)));
evalcond[3]=(((cj9*x8299))+((x8293*x8298))+((r11*x8287))+((sj9*x8294))+(((-1.0)*r10*x8285*x8298)));
evalcond[4]=(((r10*x8284*x8287))+((cj9*x8294))+(((-1.0)*x8284*x8288*x8293))+((r11*x8291))+(((-1.0)*x8288*x8299)));
evalcond[5]=((((-1.0)*r20*x8285*x8298))+((cj9*x8303))+((r21*x8287))+(((-1.0)*cj7*x8286))+((gconst1*r21*x8298))+((sj9*x8290))+x8289);
evalcond[6]=(((cj9*x8292))+((r00*x8284*x8287))+(((-1.0)*x8289))+((r01*x8291))+(((-1.0)*r01*x8288*x8301))+((cj7*cj8))+(((-1.0)*x8288*x8297)));
evalcond[7]=(((cj9*x8297))+((gconst1*r01*x8298))+((r01*x8287))+(((-1.0)*r00*x8285*x8298))+(((-1.0)*x8304))+((sj9*x8292)));
evalcond[8]=(((r21*x8291))+((r20*x8284*x8287))+((cj9*x8290))+(((-1.0)*x8288*x8303))+(((-1.0)*r21*x8288*x8301))+(((-1.0)*x8304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8305=gconst1*gconst1;
IkReal x8306=gconst2*gconst2;
IkReal x8307=(r00*sj9);
IkReal x8308=(cj9*r01);
IkReal x8309=(cj9*r11);
IkReal x8310=((1.0)*r00);
IkReal x8311=(r01*sj9);
IkReal x8312=(gconst1*gconst2*r11);
IkReal x8313=(gconst1*gconst2*r10);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal((((gconst2*r02*x8309))+((cj9*gconst1*r02*r10)))),IkReal(((((-1.0)*x8306*x8309*x8310))+((x8308*x8312))+((r10*x8305*x8308))+(((-1.0)*cj9*x8310*x8313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(IKsign((((r02*r12*sj9))+(((-1.0)*x8311*x8313))+(((-1.0)*x8307*x8312))+((r10*x8306*x8307))+((r11*x8305*x8311)))),-1);
if(!x8315.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8314.value)+(((1.5707963267949)*(x8315.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8316=IKsin(j10);
IkReal x8317=IKcos(j10);
IkReal x8318=((1.0)*gconst2);
IkReal x8319=((1.0)*cj8);
IkReal x8320=(gconst2*sj9);
IkReal x8321=((1.0)*sj9);
IkReal x8322=(sj7*sj8);
IkReal x8323=(gconst1*r20);
IkReal x8324=(cj9*gconst2);
IkReal x8325=(gconst1*r00);
IkReal x8326=(gconst1*r11);
IkReal x8327=(gconst1*r10);
IkReal x8328=(sj7*x8319);
IkReal x8329=((1.0)*cj7*sj8);
IkReal x8330=(r02*x8316);
IkReal x8331=(cj9*x8317);
IkReal x8332=(r12*x8316);
IkReal x8333=((1.0)*x8317);
IkReal x8334=(gconst1*x8317);
IkReal x8335=(gconst1*x8316);
IkReal x8336=(r22*x8316);
IkReal x8337=(x8329+x8328);
evalcond[0]=(((r21*x8335))+(((-1.0)*r22*x8333))+(((-1.0)*r20*x8316*x8318)));
evalcond[1]=(((r01*x8335))+(((-1.0)*r02*x8333))+(((-1.0)*r00*x8316*x8318)));
evalcond[2]=((1.0)+((x8316*x8326))+(((-1.0)*r12*x8333))+(((-1.0)*r10*x8316*x8318)));
evalcond[3]=(((cj9*x8332))+(((-1.0)*r10*x8318*x8331))+((r11*x8320))+((x8326*x8331))+((sj9*x8327)));
evalcond[4]=(((r10*x8317*x8320))+(((-1.0)*x8321*x8332))+((r11*x8324))+((cj9*x8327))+(((-1.0)*x8317*x8321*x8326)));
evalcond[5]=(x8322+((cj9*x8336))+(((-1.0)*r20*x8318*x8331))+(((-1.0)*cj7*x8319))+((r21*x8320))+((sj9*x8323))+((gconst1*r21*x8331)));
evalcond[6]=(((r00*x8317*x8320))+(((-1.0)*x8321*x8330))+((cj7*cj8))+(((-1.0)*x8322))+((r01*x8324))+((cj9*x8325))+(((-1.0)*r01*x8321*x8334)));
evalcond[7]=(((cj9*x8330))+(((-1.0)*r00*x8318*x8331))+((gconst1*r01*x8331))+((r01*x8320))+(((-1.0)*x8337))+((sj9*x8325)));
evalcond[8]=((((-1.0)*x8321*x8336))+((r21*x8324))+((r20*x8317*x8320))+((cj9*x8323))+(((-1.0)*x8337))+(((-1.0)*r21*x8321*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8338=((1.0)*gconst2);
CheckValue<IkReal> x8339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8338)))),-1);
if(!x8339.valid){
continue;
}
CheckValue<IkReal> x8340 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8338))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8340.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8339.value)))+(x8340.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8341=IKsin(j10);
IkReal x8342=IKcos(j10);
IkReal x8343=((1.0)*gconst2);
IkReal x8344=((1.0)*cj8);
IkReal x8345=(gconst2*sj9);
IkReal x8346=((1.0)*sj9);
IkReal x8347=(sj7*sj8);
IkReal x8348=(gconst1*r20);
IkReal x8349=(cj9*gconst2);
IkReal x8350=(gconst1*r00);
IkReal x8351=(gconst1*r11);
IkReal x8352=(gconst1*r10);
IkReal x8353=(sj7*x8344);
IkReal x8354=((1.0)*cj7*sj8);
IkReal x8355=(r02*x8341);
IkReal x8356=(cj9*x8342);
IkReal x8357=(r12*x8341);
IkReal x8358=((1.0)*x8342);
IkReal x8359=(gconst1*x8342);
IkReal x8360=(gconst1*x8341);
IkReal x8361=(r22*x8341);
IkReal x8362=(x8353+x8354);
evalcond[0]=((((-1.0)*r22*x8358))+(((-1.0)*r20*x8341*x8343))+((r21*x8360)));
evalcond[1]=((((-1.0)*r02*x8358))+(((-1.0)*r00*x8341*x8343))+((r01*x8360)));
evalcond[2]=((1.0)+(((-1.0)*r10*x8341*x8343))+((x8341*x8351))+(((-1.0)*r12*x8358)));
evalcond[3]=(((sj9*x8352))+((x8351*x8356))+(((-1.0)*r10*x8343*x8356))+((r11*x8345))+((cj9*x8357)));
evalcond[4]=(((r10*x8342*x8345))+(((-1.0)*x8346*x8357))+((r11*x8349))+(((-1.0)*x8342*x8346*x8351))+((cj9*x8352)));
evalcond[5]=((((-1.0)*r20*x8343*x8356))+x8347+((cj9*x8361))+((r21*x8345))+((gconst1*r21*x8356))+(((-1.0)*cj7*x8344))+((sj9*x8348)));
evalcond[6]=((((-1.0)*r01*x8346*x8359))+((r00*x8342*x8345))+((r01*x8349))+((cj7*cj8))+(((-1.0)*x8347))+(((-1.0)*x8346*x8355))+((cj9*x8350)));
evalcond[7]=(((sj9*x8350))+((r01*x8345))+((gconst1*r01*x8356))+(((-1.0)*r00*x8343*x8356))+(((-1.0)*x8362))+((cj9*x8355)));
evalcond[8]=(((r20*x8342*x8345))+(((-1.0)*r21*x8346*x8359))+((r21*x8349))+(((-1.0)*x8362))+((cj9*x8348))+(((-1.0)*x8346*x8361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8363=((-1.0)*r20);
IkReal x8364=x7608;
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8363),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
IkReal x8365=((-1.0)*(x8366.value));
sj11=gconst1;
cj11=gconst2;
j11=x8365;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x8365;
IkReal gconst1=(r21*x8364);
IkReal gconst2=(x8363*x8364);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8367=((-1.0)*r20);
IkReal x8368=x7608;
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8367),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal x8369=((-1.0)*(x8370.value));
sj11=gconst1;
cj11=gconst2;
j11=x8369;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst0=x8369;
IkReal gconst1=(r21*x8368);
IkReal gconst2=(x8367*x8368);
CheckValue<IkReal> x8378=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8378.valid){
continue;
}
IkReal x8371=x8378.value;
IkReal x8372=(sj9*x8371);
IkReal x8373=(r10*x8372);
IkReal x8374=(r00*x8372);
IkReal x8375=(r01*x8372);
IkReal x8376=(r11*x8372);
IkReal x8377=(r20*r21*x8372);
j10eval[0]=IKsign((((r02*r12*sj9))+((r11*r20*r21*x8374))+((r01*r20*r21*x8373))+((r00*x8373*(r20*r20)))+((r11*x8375*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8379=gconst1*gconst1;
IkReal x8380=gconst2*gconst2;
IkReal x8381=(cj9*r11);
IkReal x8382=((1.0)*cj9);
IkReal x8383=(r10*sj9);
IkReal x8384=(gconst1*r01);
IkReal x8385=(gconst1*gconst2*r00);
IkReal x8386=(r01*x8379);
IkReal x8387=(gconst2*r11*sj9);
IkReal x8388=(r00*x8380);
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal((((gconst1*r02*x8383))+((r02*x8387)))),IkReal(((((-1.0)*x8383*x8385))+(((-1.0)*r11*sj9*x8388))+((x8384*x8387))+((x8383*x8386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(IKsign((((x8381*x8385))+(((-1.0)*r02*r12*x8382))+(((-1.0)*r10*x8382*x8388))+((cj9*gconst2*r10*x8384))+(((-1.0)*x8381*x8386)))),-1);
if(!x8390.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8389.value)+(((1.5707963267949)*(x8390.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8391=IKsin(j10);
IkReal x8392=IKcos(j10);
IkReal x8393=(sj7*sj8);
IkReal x8394=((1.0)*gconst2);
IkReal x8395=((1.0)*cj8);
IkReal x8396=(gconst1*r21);
IkReal x8397=(gconst1*r20);
IkReal x8398=(cj7*sj8);
IkReal x8399=(gconst1*r00);
IkReal x8400=(gconst2*r11);
IkReal x8401=(gconst1*r11);
IkReal x8402=(gconst1*r01);
IkReal x8403=(gconst2*r01);
IkReal x8404=(gconst2*sj9);
IkReal x8405=(gconst1*r10);
IkReal x8406=(cj7*x8395);
IkReal x8407=(cj9*x8392);
IkReal x8408=((1.0)*x8392);
IkReal x8409=(cj9*x8391);
IkReal x8410=((1.0)*sj9*x8391);
evalcond[0]=((((-1.0)*r20*x8391*x8394))+((x8391*x8396))+(((-1.0)*r22*x8408)));
evalcond[1]=((((-1.0)*r02*x8408))+(((-1.0)*r00*x8391*x8394))+((x8391*x8402)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x8391*x8394))+(((-1.0)*r12*x8408))+((x8391*x8401)));
evalcond[3]=((((-1.0)*r10*x8394*x8407))+((x8401*x8407))+((r12*x8409))+((sj9*x8400))+((sj9*x8405)));
evalcond[4]=((((-1.0)*r12*x8410))+((cj9*x8400))+((cj9*x8405))+(((-1.0)*sj9*x8401*x8408))+((r10*x8392*x8404)));
evalcond[5]=(x8398+((sj9*x8399))+((cj8*sj7))+(((-1.0)*r00*x8394*x8407))+((sj9*x8403))+((r02*x8409))+((x8402*x8407)));
evalcond[6]=(x8393+((sj9*x8397))+(((-1.0)*x8406))+((x8396*x8407))+((r22*x8409))+(((-1.0)*r20*x8394*x8407))+((r21*x8404)));
evalcond[7]=(x8393+(((-1.0)*x8406))+((cj9*x8403))+(((-1.0)*sj9*x8402*x8408))+(((-1.0)*r02*x8410))+((cj9*x8399))+((r00*x8392*x8404)));
evalcond[8]=((((-1.0)*x8398))+((r20*x8392*x8404))+((cj9*x8397))+(((-1.0)*sj7*x8395))+(((-1.0)*sj9*x8396*x8408))+((cj9*gconst2*r21))+(((-1.0)*r22*x8410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8411=gconst1*gconst1;
IkReal x8412=gconst2*gconst2;
IkReal x8413=(r00*sj9);
IkReal x8414=(cj9*r01);
IkReal x8415=(cj9*r11);
IkReal x8416=((1.0)*r00);
IkReal x8417=(r01*sj9);
IkReal x8418=(gconst1*gconst2*r11);
IkReal x8419=(gconst1*gconst2*r10);
CheckValue<IkReal> x8420=IKPowWithIntegerCheck(IKsign((((r02*r12*sj9))+(((-1.0)*x8413*x8418))+((r10*x8412*x8413))+((r11*x8411*x8417))+(((-1.0)*x8417*x8419)))),-1);
if(!x8420.valid){
continue;
}
CheckValue<IkReal> x8421 = IKatan2WithCheck(IkReal((((cj9*gconst1*r02*r10))+((gconst2*r02*x8415)))),IkReal(((((-1.0)*x8412*x8415*x8416))+(((-1.0)*cj9*x8416*x8419))+((r10*x8411*x8414))+((x8414*x8418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8421.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8420.value)))+(x8421.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8422=IKsin(j10);
IkReal x8423=IKcos(j10);
IkReal x8424=(sj7*sj8);
IkReal x8425=((1.0)*gconst2);
IkReal x8426=((1.0)*cj8);
IkReal x8427=(gconst1*r21);
IkReal x8428=(gconst1*r20);
IkReal x8429=(cj7*sj8);
IkReal x8430=(gconst1*r00);
IkReal x8431=(gconst2*r11);
IkReal x8432=(gconst1*r11);
IkReal x8433=(gconst1*r01);
IkReal x8434=(gconst2*r01);
IkReal x8435=(gconst2*sj9);
IkReal x8436=(gconst1*r10);
IkReal x8437=(cj7*x8426);
IkReal x8438=(cj9*x8423);
IkReal x8439=((1.0)*x8423);
IkReal x8440=(cj9*x8422);
IkReal x8441=((1.0)*sj9*x8422);
evalcond[0]=(((x8422*x8427))+(((-1.0)*r22*x8439))+(((-1.0)*r20*x8422*x8425)));
evalcond[1]=((((-1.0)*r00*x8422*x8425))+(((-1.0)*r02*x8439))+((x8422*x8433)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x8439))+(((-1.0)*r10*x8422*x8425))+((x8422*x8432)));
evalcond[3]=(((r12*x8440))+((x8432*x8438))+((sj9*x8431))+((sj9*x8436))+(((-1.0)*r10*x8425*x8438)));
evalcond[4]=((((-1.0)*r12*x8441))+((cj9*x8431))+((cj9*x8436))+(((-1.0)*sj9*x8432*x8439))+((r10*x8423*x8435)));
evalcond[5]=(x8429+((cj8*sj7))+((r02*x8440))+((x8433*x8438))+((sj9*x8430))+((sj9*x8434))+(((-1.0)*r00*x8425*x8438)));
evalcond[6]=(((r21*x8435))+((sj9*x8428))+x8424+((r22*x8440))+(((-1.0)*x8437))+((x8427*x8438))+(((-1.0)*r20*x8425*x8438)));
evalcond[7]=(((r00*x8423*x8435))+x8424+(((-1.0)*x8437))+((cj9*x8430))+((cj9*x8434))+(((-1.0)*sj9*x8433*x8439))+(((-1.0)*r02*x8441)));
evalcond[8]=(((r20*x8423*x8435))+(((-1.0)*sj7*x8426))+((cj9*x8428))+(((-1.0)*r22*x8441))+((cj9*gconst2*r21))+(((-1.0)*x8429))+(((-1.0)*sj9*x8427*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8442 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8442.valid){
continue;
}
CheckValue<IkReal> x8443=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8443.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8442.value)+(((1.5707963267949)*(x8443.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8444=IKsin(j10);
IkReal x8445=IKcos(j10);
IkReal x8446=(sj7*sj8);
IkReal x8447=((1.0)*gconst2);
IkReal x8448=((1.0)*cj8);
IkReal x8449=(gconst1*r21);
IkReal x8450=(gconst1*r20);
IkReal x8451=(cj7*sj8);
IkReal x8452=(gconst1*r00);
IkReal x8453=(gconst2*r11);
IkReal x8454=(gconst1*r11);
IkReal x8455=(gconst1*r01);
IkReal x8456=(gconst2*r01);
IkReal x8457=(gconst2*sj9);
IkReal x8458=(gconst1*r10);
IkReal x8459=(cj7*x8448);
IkReal x8460=(cj9*x8445);
IkReal x8461=((1.0)*x8445);
IkReal x8462=(cj9*x8444);
IkReal x8463=((1.0)*sj9*x8444);
evalcond[0]=(((x8444*x8449))+(((-1.0)*r20*x8444*x8447))+(((-1.0)*r22*x8461)));
evalcond[1]=((((-1.0)*r02*x8461))+(((-1.0)*r00*x8444*x8447))+((x8444*x8455)));
evalcond[2]=((-1.0)+((x8444*x8454))+(((-1.0)*r10*x8444*x8447))+(((-1.0)*r12*x8461)));
evalcond[3]=(((sj9*x8453))+((sj9*x8458))+((r12*x8462))+(((-1.0)*r10*x8447*x8460))+((x8454*x8460)));
evalcond[4]=(((cj9*x8453))+((cj9*x8458))+((r10*x8445*x8457))+(((-1.0)*sj9*x8454*x8461))+(((-1.0)*r12*x8463)));
evalcond[5]=(((sj9*x8456))+((sj9*x8452))+x8451+((cj8*sj7))+(((-1.0)*r00*x8447*x8460))+((x8455*x8460))+((r02*x8462)));
evalcond[6]=(((sj9*x8450))+x8446+((r21*x8457))+((x8449*x8460))+((r22*x8462))+(((-1.0)*x8459))+(((-1.0)*r20*x8447*x8460)));
evalcond[7]=(x8446+(((-1.0)*r02*x8463))+((cj9*x8456))+((cj9*x8452))+(((-1.0)*sj9*x8455*x8461))+(((-1.0)*x8459))+((r00*x8445*x8457)));
evalcond[8]=(((cj9*x8450))+(((-1.0)*sj9*x8449*x8461))+(((-1.0)*x8451))+((r20*x8445*x8457))+((cj9*gconst2*r21))+(((-1.0)*r22*x8463))+(((-1.0)*sj7*x8448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8464=((-1.0)*r20);
IkReal x8465=x7608;
CheckValue<IkReal> x8467 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8464),IKFAST_ATAN2_MAGTHRESH);
if(!x8467.valid){
continue;
}
IkReal x8466=((-1.0)*(x8467.value));
sj11=gconst1;
cj11=gconst2;
j11=x8466;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x8466;
IkReal gconst1=(r21*x8465);
IkReal gconst2=(x8464*x8465);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8468=((-1.0)*r20);
IkReal x8469=x7608;
CheckValue<IkReal> x8471 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8468),IKFAST_ATAN2_MAGTHRESH);
if(!x8471.valid){
continue;
}
IkReal x8470=((-1.0)*(x8471.value));
sj11=gconst1;
cj11=gconst2;
j11=x8470;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst0=x8470;
IkReal gconst1=(r21*x8469);
IkReal gconst2=(x8468*x8469);
CheckValue<IkReal> x8479=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8479.valid){
continue;
}
IkReal x8472=x8479.value;
IkReal x8473=(sj9*x8472);
IkReal x8474=(r10*x8473);
IkReal x8475=(r00*x8473);
IkReal x8476=(r01*x8473);
IkReal x8477=(r11*x8473);
IkReal x8478=(r20*r21*x8473);
j10eval[0]=IKsign((((r02*r12*sj9))+((r01*r20*r21*x8474))+((r11*x8476*(r21*r21)))+((r11*r20*r21*x8475))+((r00*x8474*(r20*r20)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8480=gconst1*gconst1;
IkReal x8481=gconst2*gconst2;
IkReal x8482=((1.0)*cj9);
IkReal x8483=((1.0)*r10);
IkReal x8484=(r01*r11);
IkReal x8485=(gconst2*sj9);
IkReal x8486=(r00*r11);
IkReal x8487=(gconst1*r00*sj9);
IkReal x8488=(cj9*gconst1*gconst2);
CheckValue<IkReal> x8489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x8481*x8482))+((r01*r10*x8488))+(((-1.0)*x8480*x8482*x8484))+((x8486*x8488))+(((-1.0)*r02*r12*x8482)))),-1);
if(!x8489.valid){
continue;
}
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal((((r01*r12*x8485))+((r12*x8487)))),IkReal(((((-1.0)*r01*sj9*x8481*x8483))+((sj9*x8480*x8486))+(((-1.0)*gconst1*r00*x8483*x8485))+((gconst1*x8484*x8485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8489.value)))+(x8490.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8491=IKsin(j10);
IkReal x8492=IKcos(j10);
IkReal x8493=((1.0)*gconst2);
IkReal x8494=((1.0)*cj8);
IkReal x8495=(gconst1*r21);
IkReal x8496=(gconst1*r11);
IkReal x8497=(sj7*sj8);
IkReal x8498=(gconst1*r20);
IkReal x8499=(gconst2*r11);
IkReal x8500=(gconst1*sj9);
IkReal x8501=(gconst1*r01);
IkReal x8502=(gconst2*r01);
IkReal x8503=(gconst2*sj9);
IkReal x8504=(cj9*gconst1);
IkReal x8505=(sj7*x8494);
IkReal x8506=((1.0)*cj7*sj8);
IkReal x8507=(cj9*x8492);
IkReal x8508=((1.0)*x8492);
IkReal x8509=(cj9*x8491);
IkReal x8510=((1.0)*sj9*x8491);
IkReal x8511=(x8505+x8506);
evalcond[0]=(((x8491*x8495))+(((-1.0)*r22*x8508))+(((-1.0)*r20*x8491*x8493)));
evalcond[1]=(((x8491*x8496))+(((-1.0)*r12*x8508))+(((-1.0)*r10*x8491*x8493)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x8491*x8493))+(((-1.0)*r02*x8508))+((x8491*x8501)));
evalcond[3]=(((r02*x8509))+(((-1.0)*r00*x8493*x8507))+((sj9*x8502))+((x8501*x8507))+((r00*x8500)));
evalcond[4]=(((cj9*x8502))+((r00*x8492*x8503))+(((-1.0)*r02*x8510))+(((-1.0)*r01*x8500*x8508))+((r00*x8504)));
evalcond[5]=(x8497+(((-1.0)*cj7*x8494))+((r22*x8509))+(((-1.0)*r20*x8493*x8507))+((r21*x8503))+((sj9*x8498))+((x8495*x8507)));
evalcond[6]=(((r10*x8504))+((r10*x8492*x8503))+(((-1.0)*sj9*x8496*x8508))+((cj7*cj8))+((cj9*x8499))+(((-1.0)*r12*x8510))+(((-1.0)*x8497)));
evalcond[7]=(((r10*x8500))+((x8496*x8507))+((r12*x8509))+(((-1.0)*r10*x8493*x8507))+(((-1.0)*x8511))+((sj9*x8499)));
evalcond[8]=((((-1.0)*sj9*x8495*x8508))+(((-1.0)*x8511))+((cj9*x8498))+(((-1.0)*r22*x8510))+((cj9*gconst2*r21))+((r20*x8492*x8503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8512=gconst1*gconst1;
IkReal x8513=gconst2*gconst2;
IkReal x8514=(r00*r11);
IkReal x8515=(gconst1*gconst2);
IkReal x8516=((1.0)*sj9);
IkReal x8517=(cj9*r01);
IkReal x8518=(r00*r10);
CheckValue<IkReal> x8519 = IKatan2WithCheck(IkReal((((cj9*gconst1*r00*r12))+((gconst2*r12*x8517)))),IkReal((((r11*x8515*x8517))+(((-1.0)*r10*x8513*x8517))+((cj9*x8512*x8514))+(((-1.0)*cj9*x8515*x8518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8519.valid){
continue;
}
CheckValue<IkReal> x8520=IKPowWithIntegerCheck(IKsign((((r02*r12*sj9))+((sj9*x8513*x8518))+(((-1.0)*x8514*x8515*x8516))+((r01*r11*sj9*x8512))+(((-1.0)*r01*r10*x8515*x8516)))),-1);
if(!x8520.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8519.value)+(((1.5707963267949)*(x8520.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8521=IKsin(j10);
IkReal x8522=IKcos(j10);
IkReal x8523=((1.0)*gconst2);
IkReal x8524=((1.0)*cj8);
IkReal x8525=(gconst1*r21);
IkReal x8526=(gconst1*r11);
IkReal x8527=(sj7*sj8);
IkReal x8528=(gconst1*r20);
IkReal x8529=(gconst2*r11);
IkReal x8530=(gconst1*sj9);
IkReal x8531=(gconst1*r01);
IkReal x8532=(gconst2*r01);
IkReal x8533=(gconst2*sj9);
IkReal x8534=(cj9*gconst1);
IkReal x8535=(sj7*x8524);
IkReal x8536=((1.0)*cj7*sj8);
IkReal x8537=(cj9*x8522);
IkReal x8538=((1.0)*x8522);
IkReal x8539=(cj9*x8521);
IkReal x8540=((1.0)*sj9*x8521);
IkReal x8541=(x8535+x8536);
evalcond[0]=((((-1.0)*r22*x8538))+((x8521*x8525))+(((-1.0)*r20*x8521*x8523)));
evalcond[1]=(((x8521*x8526))+(((-1.0)*r12*x8538))+(((-1.0)*r10*x8521*x8523)));
evalcond[2]=((-1.0)+((x8521*x8531))+(((-1.0)*r02*x8538))+(((-1.0)*r00*x8521*x8523)));
evalcond[3]=(((r00*x8530))+((sj9*x8532))+((x8531*x8537))+((r02*x8539))+(((-1.0)*r00*x8523*x8537)));
evalcond[4]=((((-1.0)*r02*x8540))+((r00*x8534))+(((-1.0)*r01*x8530*x8538))+((r00*x8522*x8533))+((cj9*x8532)));
evalcond[5]=(((r22*x8539))+(((-1.0)*r20*x8523*x8537))+x8527+((r21*x8533))+(((-1.0)*cj7*x8524))+((x8525*x8537))+((sj9*x8528)));
evalcond[6]=((((-1.0)*sj9*x8526*x8538))+((cj9*x8529))+((r10*x8534))+(((-1.0)*r12*x8540))+(((-1.0)*x8527))+((cj7*cj8))+((r10*x8522*x8533)));
evalcond[7]=((((-1.0)*x8541))+((r10*x8530))+(((-1.0)*r10*x8523*x8537))+((r12*x8539))+((sj9*x8529))+((x8526*x8537)));
evalcond[8]=((((-1.0)*sj9*x8525*x8538))+(((-1.0)*x8541))+((r20*x8522*x8533))+((cj9*x8528))+(((-1.0)*r22*x8540))+((cj9*gconst2*r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8542=((1.0)*gconst2);
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
CheckValue<IkReal> x8544=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8542)))),-1);
if(!x8544.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8543.value)+(((1.5707963267949)*(x8544.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8545=IKsin(j10);
IkReal x8546=IKcos(j10);
IkReal x8547=((1.0)*gconst2);
IkReal x8548=((1.0)*cj8);
IkReal x8549=(gconst1*r21);
IkReal x8550=(gconst1*r11);
IkReal x8551=(sj7*sj8);
IkReal x8552=(gconst1*r20);
IkReal x8553=(gconst2*r11);
IkReal x8554=(gconst1*sj9);
IkReal x8555=(gconst1*r01);
IkReal x8556=(gconst2*r01);
IkReal x8557=(gconst2*sj9);
IkReal x8558=(cj9*gconst1);
IkReal x8559=(sj7*x8548);
IkReal x8560=((1.0)*cj7*sj8);
IkReal x8561=(cj9*x8546);
IkReal x8562=((1.0)*x8546);
IkReal x8563=(cj9*x8545);
IkReal x8564=((1.0)*sj9*x8545);
IkReal x8565=(x8560+x8559);
evalcond[0]=((((-1.0)*r22*x8562))+(((-1.0)*r20*x8545*x8547))+((x8545*x8549)));
evalcond[1]=((((-1.0)*r12*x8562))+(((-1.0)*r10*x8545*x8547))+((x8545*x8550)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x8545*x8547))+(((-1.0)*r02*x8562))+((x8545*x8555)));
evalcond[3]=(((x8555*x8561))+(((-1.0)*r00*x8547*x8561))+((r00*x8554))+((r02*x8563))+((sj9*x8556)));
evalcond[4]=(((r00*x8546*x8557))+((r00*x8558))+((cj9*x8556))+(((-1.0)*r02*x8564))+(((-1.0)*r01*x8554*x8562)));
evalcond[5]=(((r21*x8557))+x8551+(((-1.0)*cj7*x8548))+((x8549*x8561))+((r22*x8563))+((sj9*x8552))+(((-1.0)*r20*x8547*x8561)));
evalcond[6]=((((-1.0)*sj9*x8550*x8562))+(((-1.0)*r12*x8564))+((r10*x8558))+((cj7*cj8))+((cj9*x8553))+((r10*x8546*x8557))+(((-1.0)*x8551)));
evalcond[7]=((((-1.0)*r10*x8547*x8561))+((r10*x8554))+((sj9*x8553))+(((-1.0)*x8565))+((r12*x8563))+((x8550*x8561)));
evalcond[8]=((((-1.0)*r22*x8564))+((r20*x8546*x8557))+((cj9*x8552))+(((-1.0)*sj9*x8549*x8562))+((cj9*gconst2*r21))+(((-1.0)*x8565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8566=((-1.0)*r20);
IkReal x8567=x7608;
CheckValue<IkReal> x8569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8566),IKFAST_ATAN2_MAGTHRESH);
if(!x8569.valid){
continue;
}
IkReal x8568=((-1.0)*(x8569.value));
sj11=gconst1;
cj11=gconst2;
j11=x8568;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x8568;
IkReal gconst1=(r21*x8567);
IkReal gconst2=(x8566*x8567);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8570=((-1.0)*r20);
IkReal x8571=x7608;
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8570),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
IkReal x8572=((-1.0)*(x8573.value));
sj11=gconst1;
cj11=gconst2;
j11=x8572;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst0=x8572;
IkReal gconst1=(r21*x8571);
IkReal gconst2=(x8570*x8571);
CheckValue<IkReal> x8581=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8581.valid){
continue;
}
IkReal x8574=x8581.value;
IkReal x8575=(sj9*x8574);
IkReal x8576=(r10*x8575);
IkReal x8577=(r00*x8575);
IkReal x8578=(r01*x8575);
IkReal x8579=(r11*x8575);
IkReal x8580=(r20*r21*x8575);
j10eval[0]=IKsign((((r02*r12*sj9))+((r11*x8578*(r21*r21)))+((r11*r20*r21*x8577))+((r01*r20*r21*x8576))+((r00*x8576*(r20*r20)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8582=gconst1*gconst1;
IkReal x8583=gconst2*gconst2;
IkReal x8584=((1.0)*cj9);
IkReal x8585=((1.0)*r10);
IkReal x8586=(r01*r11);
IkReal x8587=(gconst2*sj9);
IkReal x8588=(r00*r11);
IkReal x8589=(gconst1*r00*sj9);
IkReal x8590=(cj9*gconst1*gconst2);
CheckValue<IkReal> x8591 = IKatan2WithCheck(IkReal((((r01*r12*x8587))+((r12*x8589)))),IkReal(((((-1.0)*r01*sj9*x8583*x8585))+((gconst1*x8586*x8587))+(((-1.0)*gconst1*r00*x8585*x8587))+((sj9*x8582*x8588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8591.valid){
continue;
}
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(IKsign((((r01*r10*x8590))+(((-1.0)*r02*r12*x8584))+(((-1.0)*r00*r10*x8583*x8584))+((x8588*x8590))+(((-1.0)*x8582*x8584*x8586)))),-1);
if(!x8592.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8591.value)+(((1.5707963267949)*(x8592.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8593=IKsin(j10);
IkReal x8594=IKcos(j10);
IkReal x8595=(sj7*sj8);
IkReal x8596=((1.0)*gconst2);
IkReal x8597=((1.0)*cj8);
IkReal x8598=(gconst1*r21);
IkReal x8599=(gconst1*r20);
IkReal x8600=(cj7*sj8);
IkReal x8601=(gconst2*r11);
IkReal x8602=(gconst1*r11);
IkReal x8603=(gconst1*sj9);
IkReal x8604=(gconst1*r01);
IkReal x8605=(gconst2*r01);
IkReal x8606=(gconst2*sj9);
IkReal x8607=(cj9*gconst1);
IkReal x8608=(cj7*x8597);
IkReal x8609=(cj9*x8594);
IkReal x8610=((1.0)*x8594);
IkReal x8611=(cj9*x8593);
IkReal x8612=((1.0)*sj9*x8593);
evalcond[0]=((((-1.0)*r22*x8610))+((x8593*x8598))+(((-1.0)*r20*x8593*x8596)));
evalcond[1]=((((-1.0)*r12*x8610))+((x8593*x8602))+(((-1.0)*r10*x8593*x8596)));
evalcond[2]=((1.0)+(((-1.0)*r02*x8610))+(((-1.0)*r00*x8593*x8596))+((x8593*x8604)));
evalcond[3]=((((-1.0)*r00*x8596*x8609))+((r00*x8603))+((x8604*x8609))+((sj9*x8605))+((r02*x8611)));
evalcond[4]=((((-1.0)*r02*x8612))+((r00*x8607))+((cj9*x8605))+(((-1.0)*r01*x8603*x8610))+((r00*x8594*x8606)));
evalcond[5]=(x8600+((cj8*sj7))+((r12*x8611))+((x8602*x8609))+((r10*x8603))+(((-1.0)*r10*x8596*x8609))+((sj9*x8601)));
evalcond[6]=(((x8598*x8609))+x8595+((sj9*x8599))+((r22*x8611))+(((-1.0)*r20*x8596*x8609))+(((-1.0)*x8608))+((r21*x8606)));
evalcond[7]=(x8595+((cj9*x8601))+((r10*x8607))+(((-1.0)*r12*x8612))+((r10*x8594*x8606))+(((-1.0)*x8608))+(((-1.0)*sj9*x8602*x8610)));
evalcond[8]=(((r20*x8594*x8606))+(((-1.0)*r22*x8612))+(((-1.0)*x8600))+((cj9*gconst2*r21))+(((-1.0)*sj9*x8598*x8610))+(((-1.0)*sj7*x8597))+((cj9*x8599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8613=gconst1*gconst1;
IkReal x8614=gconst2*gconst2;
IkReal x8615=(r00*r11);
IkReal x8616=(gconst1*gconst2);
IkReal x8617=((1.0)*sj9);
IkReal x8618=(cj9*r01);
IkReal x8619=(r00*r10);
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal((((gconst2*r12*x8618))+((cj9*gconst1*r00*r12)))),IkReal((((r11*x8616*x8618))+(((-1.0)*r10*x8614*x8618))+(((-1.0)*cj9*x8616*x8619))+((cj9*x8613*x8615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
CheckValue<IkReal> x8621=IKPowWithIntegerCheck(IKsign((((r02*r12*sj9))+((r01*r11*sj9*x8613))+((sj9*x8614*x8619))+(((-1.0)*x8615*x8616*x8617))+(((-1.0)*r01*r10*x8616*x8617)))),-1);
if(!x8621.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8620.value)+(((1.5707963267949)*(x8621.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8622=IKsin(j10);
IkReal x8623=IKcos(j10);
IkReal x8624=(sj7*sj8);
IkReal x8625=((1.0)*gconst2);
IkReal x8626=((1.0)*cj8);
IkReal x8627=(gconst1*r21);
IkReal x8628=(gconst1*r20);
IkReal x8629=(cj7*sj8);
IkReal x8630=(gconst2*r11);
IkReal x8631=(gconst1*r11);
IkReal x8632=(gconst1*sj9);
IkReal x8633=(gconst1*r01);
IkReal x8634=(gconst2*r01);
IkReal x8635=(gconst2*sj9);
IkReal x8636=(cj9*gconst1);
IkReal x8637=(cj7*x8626);
IkReal x8638=(cj9*x8623);
IkReal x8639=((1.0)*x8623);
IkReal x8640=(cj9*x8622);
IkReal x8641=((1.0)*sj9*x8622);
evalcond[0]=((((-1.0)*r22*x8639))+((x8622*x8627))+(((-1.0)*r20*x8622*x8625)));
evalcond[1]=((((-1.0)*r12*x8639))+(((-1.0)*r10*x8622*x8625))+((x8622*x8631)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8622*x8625))+((x8622*x8633))+(((-1.0)*r02*x8639)));
evalcond[3]=(((r02*x8640))+((x8633*x8638))+(((-1.0)*r00*x8625*x8638))+((sj9*x8634))+((r00*x8632)));
evalcond[4]=(((r00*x8623*x8635))+(((-1.0)*r02*x8641))+((cj9*x8634))+(((-1.0)*r01*x8632*x8639))+((r00*x8636)));
evalcond[5]=(((r12*x8640))+x8629+((cj8*sj7))+((x8631*x8638))+((sj9*x8630))+(((-1.0)*r10*x8625*x8638))+((r10*x8632)));
evalcond[6]=((((-1.0)*x8637))+((x8627*x8638))+x8624+((r21*x8635))+(((-1.0)*r20*x8625*x8638))+((r22*x8640))+((sj9*x8628)));
evalcond[7]=((((-1.0)*x8637))+x8624+((r10*x8623*x8635))+((cj9*x8630))+(((-1.0)*r12*x8641))+(((-1.0)*sj9*x8631*x8639))+((r10*x8636)));
evalcond[8]=((((-1.0)*sj7*x8626))+(((-1.0)*x8629))+((r20*x8623*x8635))+(((-1.0)*r22*x8641))+((cj9*gconst2*r21))+((cj9*x8628))+(((-1.0)*sj9*x8627*x8639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
CheckValue<IkReal> x8643=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8643.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8642.value)+(((1.5707963267949)*(x8643.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8644=IKsin(j10);
IkReal x8645=IKcos(j10);
IkReal x8646=(sj7*sj8);
IkReal x8647=((1.0)*gconst2);
IkReal x8648=((1.0)*cj8);
IkReal x8649=(gconst1*r21);
IkReal x8650=(gconst1*r20);
IkReal x8651=(cj7*sj8);
IkReal x8652=(gconst2*r11);
IkReal x8653=(gconst1*r11);
IkReal x8654=(gconst1*sj9);
IkReal x8655=(gconst1*r01);
IkReal x8656=(gconst2*r01);
IkReal x8657=(gconst2*sj9);
IkReal x8658=(cj9*gconst1);
IkReal x8659=(cj7*x8648);
IkReal x8660=(cj9*x8645);
IkReal x8661=((1.0)*x8645);
IkReal x8662=(cj9*x8644);
IkReal x8663=((1.0)*sj9*x8644);
evalcond[0]=((((-1.0)*r20*x8644*x8647))+(((-1.0)*r22*x8661))+((x8644*x8649)));
evalcond[1]=(((x8644*x8653))+(((-1.0)*r12*x8661))+(((-1.0)*r10*x8644*x8647)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8644*x8647))+((x8644*x8655))+(((-1.0)*r02*x8661)));
evalcond[3]=(((r00*x8654))+((x8655*x8660))+(((-1.0)*r00*x8647*x8660))+((r02*x8662))+((sj9*x8656)));
evalcond[4]=(((r00*x8658))+((r00*x8645*x8657))+(((-1.0)*r02*x8663))+(((-1.0)*r01*x8654*x8661))+((cj9*x8656)));
evalcond[5]=(((r10*x8654))+x8651+((cj8*sj7))+((r12*x8662))+(((-1.0)*r10*x8647*x8660))+((x8653*x8660))+((sj9*x8652)));
evalcond[6]=(((r21*x8657))+x8646+((x8649*x8660))+((r22*x8662))+(((-1.0)*x8659))+((sj9*x8650))+(((-1.0)*r20*x8647*x8660)));
evalcond[7]=(((r10*x8658))+x8646+(((-1.0)*r12*x8663))+(((-1.0)*x8659))+((r10*x8645*x8657))+(((-1.0)*sj9*x8653*x8661))+((cj9*x8652)));
evalcond[8]=((((-1.0)*sj7*x8648))+(((-1.0)*r22*x8663))+(((-1.0)*x8651))+(((-1.0)*sj9*x8649*x8661))+((cj9*gconst2*r21))+((r20*x8645*x8657))+((cj9*x8650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x8664=((-1.0)*r20);
IkReal x8665=((-1.0)*px);
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8664),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
IkReal x8666=((-1.0)*(x8667.value));
sj11=gconst1;
cj11=gconst2;
j11=x8666;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8665);
rxp1_1=(px*r21);
rxp1_2=(r11*x8665);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8666;
IkReal gconst1=r21;
IkReal gconst2=x8664;
j10eval[0]=(((r11*r21))+((r10*r20)));
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x8668=((-1.0)*r20);
IkReal x8669=((-1.0)*px);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8668),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
IkReal x8670=((-1.0)*(x8671.value));
sj11=gconst1;
cj11=gconst2;
j11=x8670;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8669);
rxp1_1=(px*r21);
rxp1_2=(r11*x8669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8670;
IkReal gconst1=r21;
IkReal gconst2=x8668;
j10eval[0]=(((r11*r21))+((r10*r20)));
j10eval[1]=(cj9+(((-1.0)*cj9*(r10*r10)))+((cj9*(r21*r21))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x8672=((-1.0)*r20);
IkReal x8673=((-1.0)*px);
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8672),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
IkReal x8674=((-1.0)*(x8675.value));
sj11=gconst1;
cj11=gconst2;
j11=x8674;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8673);
rxp1_1=(px*r21);
rxp1_2=(r11*x8673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8674;
IkReal gconst1=r21;
IkReal gconst2=x8672;
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8676=((-1.0)*r20);
IkReal x8677=((-1.0)*px);
CheckValue<IkReal> x8679 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8676),IKFAST_ATAN2_MAGTHRESH);
if(!x8679.valid){
continue;
}
IkReal x8678=((-1.0)*(x8679.value));
sj11=gconst1;
cj11=gconst2;
j11=x8678;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8677);
rxp1_1=(px*r21);
rxp1_2=(r11*x8677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst0=x8678;
IkReal gconst1=r21;
IkReal gconst2=x8676;
j10eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x8681=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8681.valid){
continue;
}
IkReal x8680=x8681.value;
cj10array[0]=(((cj8*sj7*x8680))+((cj7*sj8*x8680)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x8682=IKsin(j10);
IkReal x8683=(gconst1*x8682);
IkReal x8684=((1.0)*gconst2*x8682);
evalcond[0]=((-1.0)*r02*x8682);
evalcond[1]=((((-1.0)*r20*x8684))+((r21*x8683)));
evalcond[2]=(((r11*x8683))+(((-1.0)*r10*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8685=((-1.0)*r20);
IkReal x8686=((-1.0)*px);
CheckValue<IkReal> x8688 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8685),IKFAST_ATAN2_MAGTHRESH);
if(!x8688.valid){
continue;
}
IkReal x8687=((-1.0)*(x8688.value));
sj11=gconst1;
cj11=gconst2;
j11=x8687;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8686);
rxp1_1=(px*r21);
rxp1_2=(r11*x8686);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst0=x8687;
IkReal gconst1=r21;
IkReal gconst2=x8685;
j10eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x8690=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8690.valid){
continue;
}
IkReal x8689=x8690.value;
cj10array[0]=(((cj8*sj7*x8689))+((cj7*sj8*x8689)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x8691=IKsin(j10);
IkReal x8692=(gconst1*x8691);
IkReal x8693=((1.0)*gconst2*x8691);
evalcond[0]=(r02*x8691);
evalcond[1]=(((r21*x8692))+(((-1.0)*r20*x8693)));
evalcond[2]=((((-1.0)*r10*x8693))+((r11*x8692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8695=IKPowWithIntegerCheck(r02,-1);
if(!x8695.valid){
continue;
}
IkReal x8694=x8695.value;
CheckValue<IkReal> x8696=IKPowWithIntegerCheck(cj9,-1);
if(!x8696.valid){
continue;
}
if( IKabs((x8694*(x8696.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x8694)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8694*(x8696.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x8694))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x8694*(x8696.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x8694));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8697=IKsin(j10);
IkReal x8698=IKcos(j10);
IkReal x8699=(gconst1*r21);
IkReal x8700=((1.0)*cj9);
IkReal x8701=(cj9*gconst1);
IkReal x8702=((1.0)*sj9);
IkReal x8703=(sj7*sj8);
IkReal x8704=((1.0)*cj6);
IkReal x8705=(r20*sj9);
IkReal x8706=(cj7*cj8);
IkReal x8707=(gconst2*r11);
IkReal x8708=(gconst2*r20);
IkReal x8709=(gconst2*r21);
IkReal x8710=(cj8*sj7);
IkReal x8711=((1.0)*sj6);
IkReal x8712=(r11*x8698);
IkReal x8713=(r02*x8697);
IkReal x8714=((1.0)*cj7*sj8);
IkReal x8715=((1.0)*x8697);
IkReal x8716=(gconst2*r10*x8698);
evalcond[0]=((((-1.0)*x8711))+(((-1.0)*r02*x8698)));
evalcond[1]=((((-1.0)*x8708*x8715))+((x8697*x8699)));
evalcond[2]=(((gconst1*r11*x8697))+cj6+(((-1.0)*gconst2*r10*x8715)));
evalcond[3]=((((-1.0)*x8702*x8713))+((cj6*x8706))+(((-1.0)*x8703*x8704)));
evalcond[4]=((((-1.0)*cj7*sj8*x8704))+((cj9*x8713))+(((-1.0)*x8704*x8710)));
evalcond[5]=(((gconst1*x8705))+x8703+(((-1.0)*x8706))+((sj9*x8709))+((cj9*x8698*x8699))+(((-1.0)*x8698*x8700*x8708)));
evalcond[6]=(((cj9*x8709))+(((-1.0)*x8714))+((gconst2*x8698*x8705))+(((-1.0)*x8710))+((r20*x8701))+(((-1.0)*x8698*x8699*x8702)));
evalcond[7]=(((cj9*x8707))+((sj9*x8716))+(((-1.0)*x8703*x8711))+((r10*x8701))+((sj6*x8706))+(((-1.0)*gconst1*x8702*x8712)));
evalcond[8]=(((x8701*x8712))+(((-1.0)*cj7*sj8*x8711))+((sj9*x8707))+(((-1.0)*x8710*x8711))+(((-1.0)*x8700*x8716))+((gconst1*r10*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8717=((1.0)*sj9);
IkReal x8718=((1.0)*gconst2);
CheckValue<IkReal> x8719=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x8718))),-1);
if(!x8719.valid){
continue;
}
CheckValue<IkReal> x8720=IKPowWithIntegerCheck(((((-1.0)*cj9*r20*x8718))+((cj9*gconst1*r21))),-1);
if(!x8720.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x8719.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8720.value)*((((cj7*cj8))+(((-1.0)*gconst2*r21*x8717))+(((-1.0)*gconst1*r20*x8717))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x8719.value)))+IKsqr(((x8720.value)*((((cj7*cj8))+(((-1.0)*gconst2*r21*x8717))+(((-1.0)*gconst1*r20*x8717))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x8719.value)), ((x8720.value)*((((cj7*cj8))+(((-1.0)*gconst2*r21*x8717))+(((-1.0)*gconst1*r20*x8717))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8721=IKsin(j10);
IkReal x8722=IKcos(j10);
IkReal x8723=(gconst1*r21);
IkReal x8724=((1.0)*cj9);
IkReal x8725=(cj9*gconst1);
IkReal x8726=((1.0)*sj9);
IkReal x8727=(sj7*sj8);
IkReal x8728=((1.0)*cj6);
IkReal x8729=(r20*sj9);
IkReal x8730=(cj7*cj8);
IkReal x8731=(gconst2*r11);
IkReal x8732=(gconst2*r20);
IkReal x8733=(gconst2*r21);
IkReal x8734=(cj8*sj7);
IkReal x8735=((1.0)*sj6);
IkReal x8736=(r11*x8722);
IkReal x8737=(r02*x8721);
IkReal x8738=((1.0)*cj7*sj8);
IkReal x8739=((1.0)*x8721);
IkReal x8740=(gconst2*r10*x8722);
evalcond[0]=((((-1.0)*r02*x8722))+(((-1.0)*x8735)));
evalcond[1]=((((-1.0)*x8732*x8739))+((x8721*x8723)));
evalcond[2]=(cj6+(((-1.0)*gconst2*r10*x8739))+((gconst1*r11*x8721)));
evalcond[3]=((((-1.0)*x8726*x8737))+(((-1.0)*x8727*x8728))+((cj6*x8730)));
evalcond[4]=(((cj9*x8737))+(((-1.0)*cj7*sj8*x8728))+(((-1.0)*x8728*x8734)));
evalcond[5]=(((gconst1*x8729))+x8727+((cj9*x8722*x8723))+(((-1.0)*x8730))+((sj9*x8733))+(((-1.0)*x8722*x8724*x8732)));
evalcond[6]=(((cj9*x8733))+(((-1.0)*x8734))+(((-1.0)*x8738))+((r20*x8725))+(((-1.0)*x8722*x8723*x8726))+((gconst2*x8722*x8729)));
evalcond[7]=(((sj9*x8740))+((cj9*x8731))+((sj6*x8730))+((r10*x8725))+(((-1.0)*gconst1*x8726*x8736))+(((-1.0)*x8727*x8735)));
evalcond[8]=((((-1.0)*cj7*sj8*x8735))+((sj9*x8731))+((x8725*x8736))+(((-1.0)*x8734*x8735))+(((-1.0)*x8724*x8740))+((gconst1*r10*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x8741=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8741.valid){
continue;
}
CheckValue<IkReal> x8742=IKPowWithIntegerCheck(r02,-1);
if(!x8742.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x8741.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*(x8742.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x8741.value)))+IKsqr(((-1.0)*sj6*(x8742.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x8741.value)), ((-1.0)*sj6*(x8742.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8743=IKsin(j10);
IkReal x8744=IKcos(j10);
IkReal x8745=(gconst1*r21);
IkReal x8746=((1.0)*cj9);
IkReal x8747=(cj9*gconst1);
IkReal x8748=((1.0)*sj9);
IkReal x8749=(sj7*sj8);
IkReal x8750=((1.0)*cj6);
IkReal x8751=(r20*sj9);
IkReal x8752=(cj7*cj8);
IkReal x8753=(gconst2*r11);
IkReal x8754=(gconst2*r20);
IkReal x8755=(gconst2*r21);
IkReal x8756=(cj8*sj7);
IkReal x8757=((1.0)*sj6);
IkReal x8758=(r11*x8744);
IkReal x8759=(r02*x8743);
IkReal x8760=((1.0)*cj7*sj8);
IkReal x8761=((1.0)*x8743);
IkReal x8762=(gconst2*r10*x8744);
evalcond[0]=((((-1.0)*x8757))+(((-1.0)*r02*x8744)));
evalcond[1]=((((-1.0)*x8754*x8761))+((x8743*x8745)));
evalcond[2]=(((gconst1*r11*x8743))+(((-1.0)*gconst2*r10*x8761))+cj6);
evalcond[3]=(((cj6*x8752))+(((-1.0)*x8748*x8759))+(((-1.0)*x8749*x8750)));
evalcond[4]=((((-1.0)*x8750*x8756))+((cj9*x8759))+(((-1.0)*cj7*sj8*x8750)));
evalcond[5]=(x8749+((gconst1*x8751))+((cj9*x8744*x8745))+(((-1.0)*x8744*x8746*x8754))+((sj9*x8755))+(((-1.0)*x8752)));
evalcond[6]=(((r20*x8747))+((gconst2*x8744*x8751))+(((-1.0)*x8744*x8745*x8748))+(((-1.0)*x8760))+((cj9*x8755))+(((-1.0)*x8756)));
evalcond[7]=((((-1.0)*gconst1*x8748*x8758))+((sj6*x8752))+((r10*x8747))+((cj9*x8753))+(((-1.0)*x8749*x8757))+((sj9*x8762)));
evalcond[8]=(((x8747*x8758))+(((-1.0)*x8756*x8757))+((gconst1*r10*sj9))+((sj9*x8753))+(((-1.0)*x8746*x8762))+(((-1.0)*cj7*sj8*x8757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8763=r21*r21;
IkReal x8764=gconst1*gconst1;
IkReal x8765=r20*r20;
IkReal x8766=gconst2*gconst2;
IkReal x8767=(cj9*gconst1);
IkReal x8768=((1.0)*r21);
IkReal x8769=(cj7*sj8);
IkReal x8770=(cj9*r20);
IkReal x8771=(cj8*sj7);
IkReal x8772=((1.0)*r22);
IkReal x8773=(gconst2*r20);
CheckValue<IkReal> x8774 = IKatan2WithCheck(IkReal((((r20*r22*x8767))+(((-1.0)*x8769*x8772))+((cj9*gconst2*r21*r22))+(((-1.0)*x8771*x8772)))),IkReal((((gconst2*x8763*x8767))+((r21*x8764*x8770))+(((-1.0)*gconst1*x8768*x8769))+((x8771*x8773))+(((-1.0)*gconst1*x8768*x8771))+(((-1.0)*gconst2*x8765*x8767))+((x8769*x8773))+(((-1.0)*x8766*x8768*x8770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8774.valid){
continue;
}
CheckValue<IkReal> x8775=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst1*r21*sj9*x8773))+((sj9*x8763*x8764))+((sj9*x8765*x8766))+((sj9*(r22*r22))))),-1);
if(!x8775.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8774.value)+(((1.5707963267949)*(x8775.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8776=IKsin(j10);
IkReal x8777=IKcos(j10);
IkReal x8778=((1.0)*gconst2);
IkReal x8779=(gconst2*sj9);
IkReal x8780=(cj9*gconst1);
IkReal x8781=((1.0)*sj9);
IkReal x8782=(sj7*sj8);
IkReal x8783=((1.0)*cj6);
IkReal x8784=(gconst1*sj9);
IkReal x8785=(cj7*cj8);
IkReal x8786=(cj9*gconst2);
IkReal x8787=(cj8*sj7);
IkReal x8788=((1.0)*sj6);
IkReal x8789=(r02*x8776);
IkReal x8790=(r10*x8777);
IkReal x8791=(r11*x8777);
IkReal x8792=((1.0)*cj7*sj8);
IkReal x8793=((1.0)*x8777);
IkReal x8794=(gconst1*x8777);
IkReal x8795=(cj9*x8777);
IkReal x8796=(gconst1*x8776);
IkReal x8797=(r12*x8776);
IkReal x8798=(r22*x8776);
evalcond[0]=(((r21*x8796))+(((-1.0)*r20*x8776*x8778))+(((-1.0)*r22*x8793)));
evalcond[1]=((((-1.0)*r12*x8793))+cj6+((r11*x8796))+(((-1.0)*r10*x8776*x8778)));
evalcond[2]=((((-1.0)*r00*x8776*x8778))+(((-1.0)*r02*x8793))+(((-1.0)*x8788))+((r01*x8796)));
evalcond[3]=((((-1.0)*r20*x8778*x8795))+x8782+(((-1.0)*x8785))+((r21*x8777*x8780))+((r21*x8779))+((r20*x8784))+((cj9*x8798)));
evalcond[4]=(((r20*x8777*x8779))+((r21*x8786))+(((-1.0)*x8787))+(((-1.0)*r21*x8781*x8794))+(((-1.0)*x8781*x8798))+(((-1.0)*x8792))+((r20*x8780)));
evalcond[5]=(((r00*x8777*x8779))+(((-1.0)*r01*x8781*x8794))+(((-1.0)*x8781*x8789))+((cj6*x8785))+(((-1.0)*x8782*x8783))+((r00*x8780))+((r01*x8786)));
evalcond[6]=(((cj9*x8789))+(((-1.0)*cj7*sj8*x8783))+((r01*x8779))+(((-1.0)*x8783*x8787))+((r00*x8784))+((r01*x8777*x8780))+(((-1.0)*r00*x8778*x8795)));
evalcond[7]=(((r10*x8780))+((r11*x8786))+((sj6*x8785))+(((-1.0)*x8781*x8797))+(((-1.0)*gconst1*x8781*x8791))+(((-1.0)*x8782*x8788))+((x8779*x8790)));
evalcond[8]=(((r10*x8784))+(((-1.0)*cj7*sj8*x8788))+(((-1.0)*cj9*x8778*x8790))+(((-1.0)*x8787*x8788))+((r11*x8779))+((x8780*x8791))+((cj9*x8797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8799=((1.0)*gconst2);
CheckValue<IkReal> x8800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8799))+(((-1.0)*gconst1*r10)))),-1);
if(!x8800.valid){
continue;
}
CheckValue<IkReal> x8801 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x8799))+((gconst1*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8801.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8800.value)))+(x8801.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8802=IKsin(j10);
IkReal x8803=IKcos(j10);
IkReal x8804=((1.0)*gconst2);
IkReal x8805=(gconst2*sj9);
IkReal x8806=(cj9*gconst1);
IkReal x8807=((1.0)*sj9);
IkReal x8808=(sj7*sj8);
IkReal x8809=((1.0)*cj6);
IkReal x8810=(gconst1*sj9);
IkReal x8811=(cj7*cj8);
IkReal x8812=(cj9*gconst2);
IkReal x8813=(cj8*sj7);
IkReal x8814=((1.0)*sj6);
IkReal x8815=(r02*x8802);
IkReal x8816=(r10*x8803);
IkReal x8817=(r11*x8803);
IkReal x8818=((1.0)*cj7*sj8);
IkReal x8819=((1.0)*x8803);
IkReal x8820=(gconst1*x8803);
IkReal x8821=(cj9*x8803);
IkReal x8822=(gconst1*x8802);
IkReal x8823=(r12*x8802);
IkReal x8824=(r22*x8802);
evalcond[0]=((((-1.0)*r22*x8819))+((r21*x8822))+(((-1.0)*r20*x8802*x8804)));
evalcond[1]=((((-1.0)*r12*x8819))+cj6+((r11*x8822))+(((-1.0)*r10*x8802*x8804)));
evalcond[2]=((((-1.0)*r02*x8819))+((r01*x8822))+(((-1.0)*x8814))+(((-1.0)*r00*x8802*x8804)));
evalcond[3]=(((r21*x8805))+(((-1.0)*x8811))+x8808+((r20*x8810))+(((-1.0)*r20*x8804*x8821))+((cj9*x8824))+((r21*x8803*x8806)));
evalcond[4]=(((r20*x8803*x8805))+((r21*x8812))+(((-1.0)*r21*x8807*x8820))+(((-1.0)*x8807*x8824))+(((-1.0)*x8813))+((r20*x8806))+(((-1.0)*x8818)));
evalcond[5]=((((-1.0)*x8807*x8815))+((r00*x8803*x8805))+((r00*x8806))+(((-1.0)*r01*x8807*x8820))+((r01*x8812))+(((-1.0)*x8808*x8809))+((cj6*x8811)));
evalcond[6]=(((r01*x8803*x8806))+(((-1.0)*x8809*x8813))+((r00*x8810))+((r01*x8805))+((cj9*x8815))+(((-1.0)*r00*x8804*x8821))+(((-1.0)*cj7*sj8*x8809)));
evalcond[7]=((((-1.0)*x8807*x8823))+((r10*x8806))+((sj6*x8811))+(((-1.0)*gconst1*x8807*x8817))+((r11*x8812))+(((-1.0)*x8808*x8814))+((x8805*x8816)));
evalcond[8]=(((x8806*x8817))+((r10*x8810))+((r11*x8805))+(((-1.0)*x8813*x8814))+((cj9*x8823))+(((-1.0)*cj9*x8804*x8816))+(((-1.0)*cj7*sj8*x8814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8825=((1.0)*gconst2);
CheckValue<IkReal> x8826 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x8825))+((cj6*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8826.valid){
continue;
}
CheckValue<IkReal> x8827=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8825)))),-1);
if(!x8827.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8826.value)+(((1.5707963267949)*(x8827.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x8828=IKsin(j10);
IkReal x8829=IKcos(j10);
IkReal x8830=((1.0)*gconst2);
IkReal x8831=(gconst2*sj9);
IkReal x8832=(cj9*gconst1);
IkReal x8833=((1.0)*sj9);
IkReal x8834=(sj7*sj8);
IkReal x8835=((1.0)*cj6);
IkReal x8836=(gconst1*sj9);
IkReal x8837=(cj7*cj8);
IkReal x8838=(cj9*gconst2);
IkReal x8839=(cj8*sj7);
IkReal x8840=((1.0)*sj6);
IkReal x8841=(r02*x8828);
IkReal x8842=(r10*x8829);
IkReal x8843=(r11*x8829);
IkReal x8844=((1.0)*cj7*sj8);
IkReal x8845=((1.0)*x8829);
IkReal x8846=(gconst1*x8829);
IkReal x8847=(cj9*x8829);
IkReal x8848=(gconst1*x8828);
IkReal x8849=(r12*x8828);
IkReal x8850=(r22*x8828);
evalcond[0]=(((r21*x8848))+(((-1.0)*r20*x8828*x8830))+(((-1.0)*r22*x8845)));
evalcond[1]=(cj6+((r11*x8848))+(((-1.0)*r10*x8828*x8830))+(((-1.0)*r12*x8845)));
evalcond[2]=((((-1.0)*r00*x8828*x8830))+(((-1.0)*r02*x8845))+(((-1.0)*x8840))+((r01*x8848)));
evalcond[3]=((((-1.0)*r20*x8830*x8847))+((r21*x8829*x8832))+((cj9*x8850))+((r21*x8831))+x8834+(((-1.0)*x8837))+((r20*x8836)));
evalcond[4]=(((r20*x8829*x8831))+((r21*x8838))+(((-1.0)*x8839))+((r20*x8832))+(((-1.0)*x8844))+(((-1.0)*x8833*x8850))+(((-1.0)*r21*x8833*x8846)));
evalcond[5]=(((r00*x8829*x8831))+(((-1.0)*x8833*x8841))+(((-1.0)*x8834*x8835))+((r00*x8832))+((r01*x8838))+(((-1.0)*r01*x8833*x8846))+((cj6*x8837)));
evalcond[6]=(((r01*x8829*x8832))+(((-1.0)*x8835*x8839))+(((-1.0)*r00*x8830*x8847))+(((-1.0)*cj7*sj8*x8835))+((r00*x8836))+((r01*x8831))+((cj9*x8841)));
evalcond[7]=(((x8831*x8842))+(((-1.0)*x8834*x8840))+((r11*x8838))+(((-1.0)*x8833*x8849))+((sj6*x8837))+((r10*x8832))+(((-1.0)*gconst1*x8833*x8843)));
evalcond[8]=(((r11*x8831))+((x8832*x8843))+((r10*x8836))+(((-1.0)*cj7*sj8*x8840))+((cj9*x8849))+(((-1.0)*cj9*x8830*x8842))+(((-1.0)*x8839*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8851=((-1.0)*r21);
IkReal x8853 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8853)==0){
continue;
}
IkReal x8852=pow(x8853,-0.5);
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(x8851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8854.value))));
IkReal gconst4=(x8851*x8852);
IkReal gconst5=((1.0)*r20*x8852);
CheckValue<IkReal> x8855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8855.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x8855.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8856=((-1.0)*r21);
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal(x8856),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
IkReal x8857=((1.0)*(x8859.value));
IkReal x8858=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8857)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8857)));
IkReal gconst4=(x8856*x8858);
IkReal gconst5=((1.0)*r20*x8858);
IkReal x8860=r22*r22;
IkReal x8861=((1.0)*x8860);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(((-1.0)+x8860),-1);
if(!x8865.valid){
continue;
}
IkReal x8862=x8865.value;
if((((1.0)+(((-1.0)*x8861)))) < -0.00001)
continue;
IkReal x8863=IKsqrt(((1.0)+(((-1.0)*x8861))));
IkReal x8864=(cj6*x8862*x8863);
j10eval[0]=((IKabs((x8864+(((-1.0)*x8861*x8864)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8866=((-1.0)*r21);
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal(x8866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
IkReal x8867=((1.0)*(x8869.value));
IkReal x8868=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8867)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8867)));
IkReal gconst4=(x8866*x8868);
IkReal gconst5=((1.0)*r20*x8868);
IkReal x8870=r22*r22;
IkReal x8871=((1.0)*x8870);
CheckValue<IkReal> x8875=IKPowWithIntegerCheck(((-1.0)+x8870),-1);
if(!x8875.valid){
continue;
}
IkReal x8872=x8875.value;
if((((1.0)+(((-1.0)*x8871)))) < -0.00001)
continue;
IkReal x8873=IKsqrt(((1.0)+(((-1.0)*x8871))));
IkReal x8874=(sj6*x8872*x8873);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*x8871*x8874))+x8874))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x8876=((-1.0)*r21);
CheckValue<IkReal> x8879 = IKatan2WithCheck(IkReal(x8876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8879.valid){
continue;
}
IkReal x8877=((1.0)*(x8879.value));
IkReal x8878=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8877)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8877)));
IkReal gconst4=(x8876*x8878);
IkReal gconst5=((1.0)*r20*x8878);
IkReal x8880=r22*r22;
IkReal x8881=((1.0)*cj9);
CheckValue<IkReal> x8886=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8880))),-1);
if(!x8886.valid){
continue;
}
IkReal x8882=x8886.value;
IkReal x8883=(cj9*x8882);
IkReal x8884=(x8881*x8882);
IkReal x8885=((((-1.0)*x8884*(r20*r20*r20*r20)))+(((-2.0)*x8883*(r20*r20)*(r21*r21)))+(((-1.0)*x8884*(r21*r21*r21*r21)))+(((-1.0)*x8880*x8881)));
j10eval[0]=x8885;
j10eval[1]=IKsign(x8885);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8887=((-1.0)*r21);
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(x8887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
IkReal x8888=((1.0)*(x8890.value));
IkReal x8889=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8888)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8888)));
IkReal gconst4=(x8887*x8889);
IkReal gconst5=((1.0)*r20*x8889);
IkReal x8891=r22*r22;
IkReal x8892=((1.0)*x8891);
CheckValue<IkReal> x8896=IKPowWithIntegerCheck(((-1.0)+x8891),-1);
if(!x8896.valid){
continue;
}
IkReal x8893=x8896.value;
if((((1.0)+(((-1.0)*x8892)))) < -0.00001)
continue;
IkReal x8894=IKsqrt(((1.0)+(((-1.0)*x8892))));
IkReal x8895=(cj6*x8893*x8894);
j10eval[0]=((IKabs((x8895+(((-1.0)*x8892*x8895)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8897=((-1.0)*r21);
CheckValue<IkReal> x8900 = IKatan2WithCheck(IkReal(x8897),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8900.valid){
continue;
}
IkReal x8898=((1.0)*(x8900.value));
IkReal x8899=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8898)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8898)));
IkReal gconst4=(x8897*x8899);
IkReal gconst5=((1.0)*r20*x8899);
IkReal x8901=r22*r22;
IkReal x8902=((1.0)*x8901);
CheckValue<IkReal> x8906=IKPowWithIntegerCheck(((-1.0)+x8901),-1);
if(!x8906.valid){
continue;
}
IkReal x8903=x8906.value;
if((((1.0)+(((-1.0)*x8902)))) < -0.00001)
continue;
IkReal x8904=IKsqrt(((1.0)+(((-1.0)*x8902))));
IkReal x8905=(sj6*x8903*x8904);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*x8902*x8905))+x8905))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8907=((-1.0)*r21);
CheckValue<IkReal> x8910 = IKatan2WithCheck(IkReal(x8907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8910.valid){
continue;
}
IkReal x8908=((1.0)*(x8910.value));
IkReal x8909=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8908)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8908)));
IkReal gconst4=(x8907*x8909);
IkReal gconst5=((1.0)*r20*x8909);
IkReal x8911=r22*r22;
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8911))),-1);
if(!x8914.valid){
continue;
}
IkReal x8912=x8914.value;
IkReal x8913=((1.0)*x8912);
j10eval[0]=IKsign(((((2.0)*x8912*(r20*r20)*(r21*r21)))+x8911+((x8913*(r20*r20*r20*r20)))+((x8913*(r21*r21*r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8915=((-1.0)*r21);
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(x8915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
IkReal x8916=((1.0)*(x8918.value));
IkReal x8917=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8916)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8916)));
IkReal gconst4=(x8915*x8917);
IkReal gconst5=((1.0)*r20*x8917);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x8919=((-1.0)*r21);
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal(x8919),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
IkReal x8920=((1.0)*(x8922.value));
IkReal x8921=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8920)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8920)));
IkReal gconst4=(x8919*x8921);
IkReal gconst5=((1.0)*r20*x8921);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8923=((-1.0)*r21);
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(x8923),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
IkReal x8924=((1.0)*(x8926.value));
IkReal x8925=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8924)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8924)));
IkReal gconst4=(x8923*x8925);
IkReal gconst5=((1.0)*r20*x8925);
IkReal x8927=r22*r22;
IkReal x8928=(r02*sj7*sj8);
IkReal x8929=(cj7*cj8*r02);
CheckValue<IkReal> x8933=IKPowWithIntegerCheck(((-1.0)+x8927),-1);
if(!x8933.valid){
continue;
}
IkReal x8930=x8933.value;
if((((1.0)+(((-1.0)*x8927)))) < -0.00001)
continue;
IkReal x8931=IKsqrt(((1.0)+(((-1.0)*x8927))));
IkReal x8932=(r22*x8930*x8931);
j10eval[0]=((IKabs((x8929+(((-1.0)*x8928)))))+(IKabs(((((-1.0)*x8929*x8932))+((x8928*x8932))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8934=(sj7*sj8);
IkReal x8935=(cj7*cj8);
IkReal x8936=(gconst5*r00);
IkReal x8937=(gconst4*r01);
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8934))+((r02*x8935)))),IkReal((((x8935*x8937))+(((-1.0)*x8935*x8936))+(((-1.0)*x8934*x8937))+((x8934*x8936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
CheckValue<IkReal> x8939=IKPowWithIntegerCheck(IKsign(((r02*r02)+(x8937*x8937)+(x8936*x8936)+(((-2.0)*x8936*x8937)))),-1);
if(!x8939.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8938.value)+(((1.5707963267949)*(x8939.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8940=IKsin(j10);
IkReal x8941=IKcos(j10);
IkReal x8942=(gconst4*r21);
IkReal x8943=(gconst4*r11);
IkReal x8944=((1.0)*sj8);
IkReal x8945=(gconst4*r01);
IkReal x8946=((1.0)*x8941);
IkReal x8947=(gconst5*x8941);
IkReal x8948=((1.0)*x8940);
evalcond[0]=((((-1.0)*r22*x8946))+((x8940*x8942))+(((-1.0)*gconst5*r20*x8948)));
evalcond[1]=((((-1.0)*gconst5*r00*x8948))+((x8940*x8945))+(((-1.0)*r02*x8946)));
evalcond[2]=((((-1.0)*r12*x8948))+(((-1.0)*x8943*x8946))+((r10*x8947)));
evalcond[3]=((1.0)+(((-1.0)*gconst5*r10*x8948))+(((-1.0)*r12*x8946))+((x8940*x8943)));
evalcond[4]=(((cj7*cj8))+(((-1.0)*sj7*x8944))+(((-1.0)*r02*x8948))+((r00*x8947))+(((-1.0)*x8945*x8946)));
evalcond[5]=((((-1.0)*cj7*x8944))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x8948))+(((-1.0)*x8942*x8946))+((r20*x8947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8949=(gconst5*r10);
IkReal x8950=(gconst4*r11);
CheckValue<IkReal> x8951=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8949*x8949)+(x8950*x8950)+(((-2.0)*x8949*x8950)))),-1);
if(!x8951.valid){
continue;
}
CheckValue<IkReal> x8952 = IKatan2WithCheck(IkReal((x8949+(((-1.0)*x8950)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8952.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8951.value)))+(x8952.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8953=IKsin(j10);
IkReal x8954=IKcos(j10);
IkReal x8955=(gconst4*r21);
IkReal x8956=(gconst4*r11);
IkReal x8957=((1.0)*sj8);
IkReal x8958=(gconst4*r01);
IkReal x8959=((1.0)*x8954);
IkReal x8960=(gconst5*x8954);
IkReal x8961=((1.0)*x8953);
evalcond[0]=(((x8953*x8955))+(((-1.0)*r22*x8959))+(((-1.0)*gconst5*r20*x8961)));
evalcond[1]=(((x8953*x8958))+(((-1.0)*r02*x8959))+(((-1.0)*gconst5*r00*x8961)));
evalcond[2]=((((-1.0)*r12*x8961))+((r10*x8960))+(((-1.0)*x8956*x8959)));
evalcond[3]=((1.0)+((x8953*x8956))+(((-1.0)*gconst5*r10*x8961))+(((-1.0)*r12*x8959)));
evalcond[4]=((((-1.0)*x8958*x8959))+((cj7*cj8))+((r00*x8960))+(((-1.0)*r02*x8961))+(((-1.0)*sj7*x8957)));
evalcond[5]=((((-1.0)*cj7*x8957))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x8961))+(((-1.0)*x8955*x8959))+((r20*x8960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8962=((1.0)*gconst5);
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x8962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
CheckValue<IkReal> x8964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x8962)))),-1);
if(!x8964.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8963.value)+(((1.5707963267949)*(x8964.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8965=IKsin(j10);
IkReal x8966=IKcos(j10);
IkReal x8967=(gconst4*r21);
IkReal x8968=(gconst4*r11);
IkReal x8969=((1.0)*sj8);
IkReal x8970=(gconst4*r01);
IkReal x8971=((1.0)*x8966);
IkReal x8972=(gconst5*x8966);
IkReal x8973=((1.0)*x8965);
evalcond[0]=((((-1.0)*r22*x8971))+(((-1.0)*gconst5*r20*x8973))+((x8965*x8967)));
evalcond[1]=((((-1.0)*r02*x8971))+((x8965*x8970))+(((-1.0)*gconst5*r00*x8973)));
evalcond[2]=(((r10*x8972))+(((-1.0)*x8968*x8971))+(((-1.0)*r12*x8973)));
evalcond[3]=((1.0)+((x8965*x8968))+(((-1.0)*r12*x8971))+(((-1.0)*gconst5*r10*x8973)));
evalcond[4]=(((r00*x8972))+(((-1.0)*r02*x8973))+((cj7*cj8))+(((-1.0)*sj7*x8969))+(((-1.0)*x8970*x8971)));
evalcond[5]=((((-1.0)*cj7*x8969))+(((-1.0)*cj8*sj7))+((r20*x8972))+(((-1.0)*r22*x8973))+(((-1.0)*x8967*x8971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x8974=((-1.0)*r21);
CheckValue<IkReal> x8977 = IKatan2WithCheck(IkReal(x8974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8977.valid){
continue;
}
IkReal x8975=((1.0)*(x8977.value));
IkReal x8976=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8975)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8975)));
IkReal gconst4=(x8974*x8976);
IkReal gconst5=((1.0)*r20*x8976);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x8978=((-1.0)*r21);
CheckValue<IkReal> x8981 = IKatan2WithCheck(IkReal(x8978),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8981.valid){
continue;
}
IkReal x8979=((1.0)*(x8981.value));
IkReal x8980=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8979)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8979)));
IkReal gconst4=(x8978*x8980);
IkReal gconst5=((1.0)*r20*x8980);
IkReal x8982=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(x8982,-1);
if(!x8986.valid){
continue;
}
IkReal x8983=x8986.value;
IkReal x8984=((1.0)*x8983);
IkReal x8985=((((-2.0)*r10*r11*r20*r21*x8983))+(((-1.0)*(r12*r12)))+(((-1.0)*x8984*(r10*r10)*(r20*r20)))+(((-1.0)*x8984*(r11*r11)*(r21*r21))));
j10eval[0]=x8985;
j10eval[1]=r12;
j10eval[2]=x8982;
j10eval[3]=IKsign(x8985);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x8987=((-1.0)*r21);
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal(x8987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
IkReal x8988=((1.0)*(x8990.value));
IkReal x8989=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x8988)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8988)));
IkReal gconst4=(x8987*x8989);
IkReal gconst5=((1.0)*r20*x8989);
IkReal x8991=r22*r22;
IkReal x8992=(r02*sj7*sj8);
IkReal x8993=(cj7*cj8*r02);
CheckValue<IkReal> x8997=IKPowWithIntegerCheck(((-1.0)+x8991),-1);
if(!x8997.valid){
continue;
}
IkReal x8994=x8997.value;
if((((1.0)+(((-1.0)*x8991)))) < -0.00001)
continue;
IkReal x8995=IKsqrt(((1.0)+(((-1.0)*x8991))));
IkReal x8996=(r22*x8994*x8995);
j10eval[0]=((IKabs(((((-1.0)*x8992*x8996))+((x8993*x8996)))))+(IKabs((x8992+(((-1.0)*x8993))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8998=(gconst5*r00);
IkReal x8999=(cj7*cj8);
IkReal x9000=(gconst4*r01);
IkReal x9001=(sj7*sj8);
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8998*x9000))+(x8998*x8998)+(x9000*x9000)+(r02*r02))),-1);
if(!x9002.valid){
continue;
}
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8999))+((r02*x9001)))),IkReal((((x8998*x8999))+(((-1.0)*x8998*x9001))+((x9000*x9001))+(((-1.0)*x8999*x9000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9002.value)))+(x9003.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9004=IKsin(j10);
IkReal x9005=IKcos(j10);
IkReal x9006=(gconst4*r21);
IkReal x9007=(gconst4*r11);
IkReal x9008=((1.0)*cj7);
IkReal x9009=(gconst4*r01);
IkReal x9010=((1.0)*x9005);
IkReal x9011=(gconst5*x9005);
IkReal x9012=((1.0)*x9004);
evalcond[0]=((((-1.0)*gconst5*r20*x9012))+(((-1.0)*r22*x9010))+((x9004*x9006)));
evalcond[1]=((((-1.0)*gconst5*r00*x9012))+(((-1.0)*r02*x9010))+((x9004*x9009)));
evalcond[2]=((((-1.0)*r12*x9012))+((r10*x9011))+(((-1.0)*x9007*x9010)));
evalcond[3]=((-1.0)+(((-1.0)*gconst5*r10*x9012))+(((-1.0)*r12*x9010))+((x9004*x9007)));
evalcond[4]=((((-1.0)*cj8*x9008))+(((-1.0)*x9009*x9010))+(((-1.0)*r02*x9012))+((r00*x9011))+((sj7*sj8)));
evalcond[5]=((((-1.0)*sj8*x9008))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x9012))+((r20*x9011))+(((-1.0)*x9006*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9013=(gconst5*r10);
IkReal x9014=(gconst4*r11);
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(((((-1.0)*x9014))+x9013)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(((((2.0)*x9013*x9014))+(((-1.0)*(x9013*x9013)))+(((-1.0)*(x9014*x9014)))+(((-1.0)*(r12*r12))))),-1);
if(!x9016.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9015.value)+(((1.5707963267949)*(x9016.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9017=IKsin(j10);
IkReal x9018=IKcos(j10);
IkReal x9019=(gconst4*r21);
IkReal x9020=(gconst4*r11);
IkReal x9021=((1.0)*cj7);
IkReal x9022=(gconst4*r01);
IkReal x9023=((1.0)*x9018);
IkReal x9024=(gconst5*x9018);
IkReal x9025=((1.0)*x9017);
evalcond[0]=(((x9017*x9019))+(((-1.0)*gconst5*r20*x9025))+(((-1.0)*r22*x9023)));
evalcond[1]=((((-1.0)*gconst5*r00*x9025))+((x9017*x9022))+(((-1.0)*r02*x9023)));
evalcond[2]=((((-1.0)*r12*x9025))+(((-1.0)*x9020*x9023))+((r10*x9024)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9023))+(((-1.0)*gconst5*r10*x9025))+((x9017*x9020)));
evalcond[4]=((((-1.0)*x9022*x9023))+((r00*x9024))+(((-1.0)*cj8*x9021))+((sj7*sj8))+(((-1.0)*r02*x9025)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x9021))+(((-1.0)*r22*x9025))+((r20*x9024))+(((-1.0)*x9019*x9023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9026.valid){
continue;
}
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9026.value)))+(x9027.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9028=IKsin(j10);
IkReal x9029=IKcos(j10);
IkReal x9030=(gconst4*r21);
IkReal x9031=(gconst4*r11);
IkReal x9032=((1.0)*cj7);
IkReal x9033=(gconst4*r01);
IkReal x9034=((1.0)*x9029);
IkReal x9035=(gconst5*x9029);
IkReal x9036=((1.0)*x9028);
evalcond[0]=(((x9028*x9030))+(((-1.0)*gconst5*r20*x9036))+(((-1.0)*r22*x9034)));
evalcond[1]=((((-1.0)*gconst5*r00*x9036))+((x9028*x9033))+(((-1.0)*r02*x9034)));
evalcond[2]=((((-1.0)*r12*x9036))+(((-1.0)*x9031*x9034))+((r10*x9035)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9034))+((x9028*x9031))+(((-1.0)*gconst5*r10*x9036)));
evalcond[4]=(((r00*x9035))+(((-1.0)*x9033*x9034))+(((-1.0)*cj8*x9032))+((sj7*sj8))+(((-1.0)*r02*x9036)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*x9030*x9034))+(((-1.0)*sj8*x9032))+(((-1.0)*r22*x9036))+((r20*x9035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9037=((-1.0)*r21);
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(x9037),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
IkReal x9038=((1.0)*(x9040.value));
IkReal x9039=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9038)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9038)));
IkReal gconst4=(x9037*x9039);
IkReal gconst5=((1.0)*r20*x9039);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x9041=((-1.0)*r21);
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(x9041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
IkReal x9042=((1.0)*(x9044.value));
IkReal x9043=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9042)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9042)));
IkReal gconst4=(x9041*x9043);
IkReal gconst5=((1.0)*r20*x9043);
IkReal x9045=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9049=IKPowWithIntegerCheck(x9045,-1);
if(!x9049.valid){
continue;
}
IkReal x9046=x9049.value;
IkReal x9047=((1.0)*x9046);
IkReal x9048=((((-1.0)*x9047*(r00*r00)*(r20*r20)))+(((-1.0)*x9047*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9046)));
j10eval[0]=x9048;
j10eval[1]=r02;
j10eval[2]=x9045;
j10eval[3]=IKsign(x9048);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9050=((-1.0)*r21);
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal(x9050),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
IkReal x9051=((1.0)*(x9053.value));
IkReal x9052=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9051)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9051)));
IkReal gconst4=(x9050*x9052);
IkReal gconst5=((1.0)*r20*x9052);
IkReal x9054=r22*r22;
IkReal x9055=(cj7*cj8*r12);
IkReal x9056=(r12*sj7*sj8);
CheckValue<IkReal> x9060=IKPowWithIntegerCheck(((-1.0)+x9054),-1);
if(!x9060.valid){
continue;
}
IkReal x9057=x9060.value;
if((((1.0)+(((-1.0)*x9054)))) < -0.00001)
continue;
IkReal x9058=IKsqrt(((1.0)+(((-1.0)*x9054))));
IkReal x9059=(r22*x9057*x9058);
j10eval[0]=((IKabs(((((-1.0)*x9055*x9059))+((x9056*x9059)))))+(IKabs((x9055+(((-1.0)*x9056))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9061=(cj7*cj8);
IkReal x9062=(gconst4*r11);
IkReal x9063=(gconst5*r10);
IkReal x9064=((1.0)*sj7*sj8);
CheckValue<IkReal> x9065 = IKatan2WithCheck(IkReal((((r12*x9061))+(((-1.0)*r12*x9064)))),IkReal((((x9061*x9062))+(((-1.0)*x9062*x9064))+(((-1.0)*x9061*x9063))+((sj7*sj8*x9063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9065.valid){
continue;
}
CheckValue<IkReal> x9066=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9062*x9063))+(x9062*x9062)+(x9063*x9063))),-1);
if(!x9066.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9065.value)+(((1.5707963267949)*(x9066.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9067=IKsin(j10);
IkReal x9068=IKcos(j10);
IkReal x9069=(gconst4*r21);
IkReal x9070=(gconst4*r11);
IkReal x9071=((1.0)*sj8);
IkReal x9072=(gconst4*r01);
IkReal x9073=((1.0)*x9068);
IkReal x9074=(gconst5*x9068);
IkReal x9075=((1.0)*x9067);
evalcond[0]=((((-1.0)*gconst5*r20*x9075))+(((-1.0)*r22*x9073))+((x9067*x9069)));
evalcond[1]=((((-1.0)*gconst5*r10*x9075))+((x9067*x9070))+(((-1.0)*r12*x9073)));
evalcond[2]=((((-1.0)*x9072*x9073))+(((-1.0)*r02*x9075))+((r00*x9074)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9073))+((x9067*x9072))+(((-1.0)*gconst5*r00*x9075)));
evalcond[4]=((((-1.0)*sj7*x9071))+(((-1.0)*r12*x9075))+((cj7*cj8))+((r10*x9074))+(((-1.0)*x9070*x9073)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r20*x9074))+(((-1.0)*cj7*x9071))+(((-1.0)*r22*x9075))+(((-1.0)*x9069*x9073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9076=(gconst5*r00);
IkReal x9077=(gconst4*r01);
CheckValue<IkReal> x9078 = IKatan2WithCheck(IkReal(((((-1.0)*x9077))+x9076)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9078.valid){
continue;
}
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(IKsign(((((2.0)*x9076*x9077))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9077*x9077)))+(((-1.0)*(x9076*x9076))))),-1);
if(!x9079.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9078.value)+(((1.5707963267949)*(x9079.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9080=IKsin(j10);
IkReal x9081=IKcos(j10);
IkReal x9082=(gconst4*r21);
IkReal x9083=(gconst4*r11);
IkReal x9084=((1.0)*sj8);
IkReal x9085=(gconst4*r01);
IkReal x9086=((1.0)*x9081);
IkReal x9087=(gconst5*x9081);
IkReal x9088=((1.0)*x9080);
evalcond[0]=(((x9080*x9082))+(((-1.0)*r22*x9086))+(((-1.0)*gconst5*r20*x9088)));
evalcond[1]=(((x9080*x9083))+(((-1.0)*gconst5*r10*x9088))+(((-1.0)*r12*x9086)));
evalcond[2]=(((r00*x9087))+(((-1.0)*r02*x9088))+(((-1.0)*x9085*x9086)));
evalcond[3]=((-1.0)+((x9080*x9085))+(((-1.0)*r02*x9086))+(((-1.0)*gconst5*r00*x9088)));
evalcond[4]=((((-1.0)*sj7*x9084))+((r10*x9087))+((cj7*cj8))+(((-1.0)*x9083*x9086))+(((-1.0)*r12*x9088)));
evalcond[5]=(((r20*x9087))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x9084))+(((-1.0)*x9082*x9086))+(((-1.0)*r22*x9088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9089=((1.0)*gconst5);
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9089))+(((-1.0)*gconst4*r10)))),-1);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9089))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9091.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9090.value)))+(x9091.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9092=IKsin(j10);
IkReal x9093=IKcos(j10);
IkReal x9094=(gconst4*r21);
IkReal x9095=(gconst4*r11);
IkReal x9096=((1.0)*sj8);
IkReal x9097=(gconst4*r01);
IkReal x9098=((1.0)*x9093);
IkReal x9099=(gconst5*x9093);
IkReal x9100=((1.0)*x9092);
evalcond[0]=(((x9092*x9094))+(((-1.0)*gconst5*r20*x9100))+(((-1.0)*r22*x9098)));
evalcond[1]=(((x9092*x9095))+(((-1.0)*r12*x9098))+(((-1.0)*gconst5*r10*x9100)));
evalcond[2]=((((-1.0)*r02*x9100))+((r00*x9099))+(((-1.0)*x9097*x9098)));
evalcond[3]=((-1.0)+(((-1.0)*gconst5*r00*x9100))+((x9092*x9097))+(((-1.0)*r02*x9098)));
evalcond[4]=(((r10*x9099))+(((-1.0)*sj7*x9096))+(((-1.0)*r12*x9100))+((cj7*cj8))+(((-1.0)*x9095*x9098)));
evalcond[5]=(((r20*x9099))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x9100))+(((-1.0)*cj7*x9096))+(((-1.0)*x9094*x9098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9101=((-1.0)*r21);
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(x9101),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9102=((1.0)*(x9104.value));
IkReal x9103=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9102)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9102)));
IkReal gconst4=(x9101*x9103);
IkReal gconst5=((1.0)*r20*x9103);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9105=((-1.0)*r21);
CheckValue<IkReal> x9108 = IKatan2WithCheck(IkReal(x9105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9108.valid){
continue;
}
IkReal x9106=((1.0)*(x9108.value));
IkReal x9107=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9106)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9106)));
IkReal gconst4=(x9105*x9107);
IkReal gconst5=((1.0)*r20*x9107);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9109=((-1.0)*r21);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(x9109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
IkReal x9110=((1.0)*(x9112.value));
IkReal x9111=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9110)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9110)));
IkReal gconst4=(x9109*x9111);
IkReal gconst5=((1.0)*r20*x9111);
IkReal x9113=r22*r22;
IkReal x9114=(r12*sj7*sj8);
IkReal x9115=(cj7*cj8*r12);
CheckValue<IkReal> x9119=IKPowWithIntegerCheck(((-1.0)+x9113),-1);
if(!x9119.valid){
continue;
}
IkReal x9116=x9119.value;
if((((1.0)+(((-1.0)*x9113)))) < -0.00001)
continue;
IkReal x9117=IKsqrt(((1.0)+(((-1.0)*x9113))));
IkReal x9118=(r22*x9116*x9117);
j10eval[0]=((IKabs((((x9115*x9118))+(((-1.0)*x9114*x9118)))))+(IKabs((x9114+(((-1.0)*x9115))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9120=(gconst5*r10);
IkReal x9121=(cj7*cj8);
IkReal x9122=(gconst4*r11);
IkReal x9123=(sj7*sj8);
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x9121))+((r12*x9123)))),IkReal((((x9122*x9123))+(((-1.0)*x9121*x9122))+(((-1.0)*x9120*x9123))+((x9120*x9121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
CheckValue<IkReal> x9125=IKPowWithIntegerCheck(IKsign(((x9120*x9120)+(r12*r12)+(x9122*x9122)+(((-2.0)*x9120*x9122)))),-1);
if(!x9125.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9124.value)+(((1.5707963267949)*(x9125.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9126=IKsin(j10);
IkReal x9127=IKcos(j10);
IkReal x9128=(gconst4*r21);
IkReal x9129=(gconst4*r11);
IkReal x9130=((1.0)*cj7);
IkReal x9131=(gconst4*r01);
IkReal x9132=((1.0)*x9127);
IkReal x9133=(gconst5*x9127);
IkReal x9134=((1.0)*x9126);
evalcond[0]=(((x9126*x9128))+(((-1.0)*r22*x9132))+(((-1.0)*gconst5*r20*x9134)));
evalcond[1]=((((-1.0)*gconst5*r10*x9134))+((x9126*x9129))+(((-1.0)*r12*x9132)));
evalcond[2]=((((-1.0)*x9131*x9132))+(((-1.0)*r02*x9134))+((r00*x9133)));
evalcond[3]=((1.0)+(((-1.0)*gconst5*r00*x9134))+(((-1.0)*r02*x9132))+((x9126*x9131)));
evalcond[4]=((((-1.0)*cj8*x9130))+((r10*x9133))+(((-1.0)*r12*x9134))+(((-1.0)*x9129*x9132))+((sj7*sj8)));
evalcond[5]=(((r20*x9133))+(((-1.0)*x9128*x9132))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x9134))+(((-1.0)*sj8*x9130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9135=(gconst5*r00);
IkReal x9136=(gconst4*r01);
CheckValue<IkReal> x9137=IKPowWithIntegerCheck(IKsign(((x9136*x9136)+(((-2.0)*x9135*x9136))+(r02*r02)+(x9135*x9135))),-1);
if(!x9137.valid){
continue;
}
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal(((((-1.0)*x9136))+x9135)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9137.value)))+(x9138.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9139=IKsin(j10);
IkReal x9140=IKcos(j10);
IkReal x9141=(gconst4*r21);
IkReal x9142=(gconst4*r11);
IkReal x9143=((1.0)*cj7);
IkReal x9144=(gconst4*r01);
IkReal x9145=((1.0)*x9140);
IkReal x9146=(gconst5*x9140);
IkReal x9147=((1.0)*x9139);
evalcond[0]=((((-1.0)*r22*x9145))+((x9139*x9141))+(((-1.0)*gconst5*r20*x9147)));
evalcond[1]=(((x9139*x9142))+(((-1.0)*r12*x9145))+(((-1.0)*gconst5*r10*x9147)));
evalcond[2]=(((r00*x9146))+(((-1.0)*r02*x9147))+(((-1.0)*x9144*x9145)));
evalcond[3]=((1.0)+(((-1.0)*gconst5*r00*x9147))+((x9139*x9144))+(((-1.0)*r02*x9145)));
evalcond[4]=((((-1.0)*x9142*x9145))+((r10*x9146))+(((-1.0)*r12*x9147))+((sj7*sj8))+(((-1.0)*cj8*x9143)));
evalcond[5]=((((-1.0)*sj8*x9143))+(((-1.0)*cj8*sj7))+(((-1.0)*x9141*x9145))+((r20*x9146))+(((-1.0)*r22*x9147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9148.value)))+(x9149.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9150=IKsin(j10);
IkReal x9151=IKcos(j10);
IkReal x9152=(gconst4*r21);
IkReal x9153=(gconst4*r11);
IkReal x9154=((1.0)*cj7);
IkReal x9155=(gconst4*r01);
IkReal x9156=((1.0)*x9151);
IkReal x9157=(gconst5*x9151);
IkReal x9158=((1.0)*x9150);
evalcond[0]=(((x9150*x9152))+(((-1.0)*r22*x9156))+(((-1.0)*gconst5*r20*x9158)));
evalcond[1]=(((x9150*x9153))+(((-1.0)*r12*x9156))+(((-1.0)*gconst5*r10*x9158)));
evalcond[2]=((((-1.0)*r02*x9158))+((r00*x9157))+(((-1.0)*x9155*x9156)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9156))+((x9150*x9155))+(((-1.0)*gconst5*r00*x9158)));
evalcond[4]=((((-1.0)*x9153*x9156))+(((-1.0)*r12*x9158))+(((-1.0)*cj8*x9154))+((sj7*sj8))+((r10*x9157)));
evalcond[5]=((((-1.0)*sj8*x9154))+(((-1.0)*cj8*sj7))+(((-1.0)*x9152*x9156))+((r20*x9157))+(((-1.0)*r22*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9159=((-1.0)*r21);
IkReal x9160=((-1.0)*px);
CheckValue<IkReal> x9162 = IKatan2WithCheck(IkReal(x9159),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9162.valid){
continue;
}
IkReal x9161=((1.0)*(x9162.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9161)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9160);
rxp1_1=(px*r21);
rxp1_2=(r11*x9160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9161)));
IkReal gconst4=x9159;
IkReal gconst5=((1.0)*r20);
j10eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x9164=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x9164.valid){
continue;
}
IkReal x9163=x9164.value;
cj10array[0]=(((cj7*sj8*x9163))+((cj8*sj7*x9163)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x9165=IKsin(j10);
IkReal x9166=(gconst4*x9165);
IkReal x9167=((1.0)*gconst5*x9165);
evalcond[0]=((-1.0)*r02*x9165);
evalcond[1]=(((r21*x9166))+(((-1.0)*r20*x9167)));
evalcond[2]=((((-1.0)*r10*x9167))+((r11*x9166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9168=(gconst4*r21);
IkReal x9169=(cj7*sj8);
IkReal x9170=(gconst5*r20);
IkReal x9171=(cj8*sj7);
IkReal x9172=((1.0)*r22);
CheckValue<IkReal> x9173=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9170*x9170)+(x9168*x9168)+(((-2.0)*x9168*x9170)))),-1);
if(!x9173.valid){
continue;
}
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal(((((-1.0)*x9169*x9172))+(((-1.0)*x9171*x9172)))),IkReal((((x9170*x9171))+((x9169*x9170))+(((-1.0)*x9168*x9169))+(((-1.0)*x9168*x9171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9173.value)))+(x9174.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9175=IKsin(j10);
IkReal x9176=IKcos(j10);
IkReal x9177=(gconst4*r21);
IkReal x9178=(gconst4*r11);
IkReal x9179=((1.0)*sj8);
IkReal x9180=(cj7*cj8);
IkReal x9181=(gconst4*r01);
IkReal x9182=((1.0)*x9176);
IkReal x9183=(gconst5*x9176);
IkReal x9184=((1.0)*x9175);
evalcond[0]=((((-1.0)*r22*x9182))+((x9175*x9177))+(((-1.0)*gconst5*r20*x9184)));
evalcond[1]=((((-1.0)*r12*x9182))+cj6+((x9175*x9178))+(((-1.0)*gconst5*r10*x9184)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r02*x9182))+((x9175*x9181))+(((-1.0)*gconst5*r00*x9184)));
evalcond[3]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x9179))+(((-1.0)*r22*x9184))+((r20*x9183))+(((-1.0)*x9177*x9182)));
evalcond[4]=(((r00*x9183))+(((-1.0)*r02*x9184))+(((-1.0)*x9181*x9182))+(((-1.0)*cj6*sj7*x9179))+((cj6*x9180)));
evalcond[5]=((((-1.0)*r12*x9184))+((r10*x9183))+(((-1.0)*sj6*sj7*x9179))+((sj6*x9180))+(((-1.0)*x9178*x9182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9185=((1.0)*gconst5);
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x9185))+((gconst4*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x9185)))),-1);
if(!x9187.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9186.value)+(((1.5707963267949)*(x9187.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9188=IKsin(j10);
IkReal x9189=IKcos(j10);
IkReal x9190=(gconst4*r21);
IkReal x9191=(gconst4*r11);
IkReal x9192=((1.0)*sj8);
IkReal x9193=(cj7*cj8);
IkReal x9194=(gconst4*r01);
IkReal x9195=((1.0)*x9189);
IkReal x9196=(gconst5*x9189);
IkReal x9197=((1.0)*x9188);
evalcond[0]=((((-1.0)*r22*x9195))+(((-1.0)*gconst5*r20*x9197))+((x9188*x9190)));
evalcond[1]=(cj6+(((-1.0)*r12*x9195))+(((-1.0)*gconst5*r10*x9197))+((x9188*x9191)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*gconst5*r00*x9197))+(((-1.0)*r02*x9195))+((x9188*x9194)));
evalcond[3]=((((-1.0)*r22*x9197))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x9192))+(((-1.0)*x9190*x9195))+((r20*x9196)));
evalcond[4]=((((-1.0)*cj6*sj7*x9192))+((r00*x9196))+(((-1.0)*r02*x9197))+((cj6*x9193))+(((-1.0)*x9194*x9195)));
evalcond[5]=((((-1.0)*x9191*x9195))+(((-1.0)*sj6*sj7*x9192))+((r10*x9196))+((sj6*x9193))+(((-1.0)*r12*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9198=((1.0)*gconst5);
CheckValue<IkReal> x9199 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst4*r21))+(((-1.0)*cj6*r20*x9198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9199.valid){
continue;
}
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9198)))),-1);
if(!x9200.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9199.value)+(((1.5707963267949)*(x9200.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9201=IKsin(j10);
IkReal x9202=IKcos(j10);
IkReal x9203=(gconst4*r21);
IkReal x9204=(gconst4*r11);
IkReal x9205=((1.0)*sj8);
IkReal x9206=(cj7*cj8);
IkReal x9207=(gconst4*r01);
IkReal x9208=((1.0)*x9202);
IkReal x9209=(gconst5*x9202);
IkReal x9210=((1.0)*x9201);
evalcond[0]=(((x9201*x9203))+(((-1.0)*gconst5*r20*x9210))+(((-1.0)*r22*x9208)));
evalcond[1]=((((-1.0)*gconst5*r10*x9210))+cj6+((x9201*x9204))+(((-1.0)*r12*x9208)));
evalcond[2]=((((-1.0)*sj6))+((x9201*x9207))+(((-1.0)*r02*x9208))+(((-1.0)*gconst5*r00*x9210)));
evalcond[3]=(((r20*x9209))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x9205))+(((-1.0)*r22*x9210))+(((-1.0)*x9203*x9208)));
evalcond[4]=((((-1.0)*r02*x9210))+((r00*x9209))+(((-1.0)*cj6*sj7*x9205))+(((-1.0)*x9207*x9208))+((cj6*x9206)));
evalcond[5]=(((r10*x9209))+(((-1.0)*x9204*x9208))+((sj6*x9206))+(((-1.0)*r12*x9210))+(((-1.0)*sj6*sj7*x9205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9211=((-1.0)*r21);
CheckValue<IkReal> x9214 = IKatan2WithCheck(IkReal(x9211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9214.valid){
continue;
}
IkReal x9212=((1.0)*(x9214.value));
IkReal x9213=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9212)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9212)));
IkReal gconst4=(x9211*x9213);
IkReal gconst5=((1.0)*r20*x9213);
IkReal x9215=r22*r22;
IkReal x9216=((1.0)*x9215);
CheckValue<IkReal> x9220=IKPowWithIntegerCheck(((-1.0)+x9215),-1);
if(!x9220.valid){
continue;
}
IkReal x9217=x9220.value;
if((((1.0)+(((-1.0)*x9216)))) < -0.00001)
continue;
IkReal x9218=IKsqrt(((1.0)+(((-1.0)*x9216))));
IkReal x9219=(cj6*x9217*x9218);
j10eval[0]=((IKabs((x9219+(((-1.0)*x9216*x9219)))))+(IKabs((cj6*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9221=((-1.0)*r21);
CheckValue<IkReal> x9224 = IKatan2WithCheck(IkReal(x9221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9224.valid){
continue;
}
IkReal x9222=((1.0)*(x9224.value));
IkReal x9223=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9222)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9222)));
IkReal gconst4=(x9221*x9223);
IkReal gconst5=((1.0)*r20*x9223);
IkReal x9225=r22*r22;
IkReal x9226=((1.0)*x9225);
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(((-1.0)+x9225),-1);
if(!x9230.valid){
continue;
}
IkReal x9227=x9230.value;
if((((1.0)+(((-1.0)*x9226)))) < -0.00001)
continue;
IkReal x9228=IKsqrt(((1.0)+(((-1.0)*x9226))));
IkReal x9229=(sj6*x9227*x9228);
j10eval[0]=((IKabs((r22*sj6)))+(IKabs((x9229+(((-1.0)*x9226*x9229))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9231=((-1.0)*r21);
CheckValue<IkReal> x9234 = IKatan2WithCheck(IkReal(x9231),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9234.valid){
continue;
}
IkReal x9232=((1.0)*(x9234.value));
IkReal x9233=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9232)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9232)));
IkReal gconst4=(x9231*x9233);
IkReal gconst5=((1.0)*r20*x9233);
IkReal x9235=((1.0)*(r22*r22));
CheckValue<IkReal> x9239=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9235))),-1);
if(!x9239.valid){
continue;
}
IkReal x9236=x9239.value;
IkReal x9237=((1.0)*x9236);
IkReal x9238=((((-1.0)*x9235))+(((-1.0)*x9237*(r21*r21*r21*r21)))+(((-1.0)*x9237*(r20*r20*r20*r20)))+(((-2.0)*x9236*(r20*r20)*(r21*r21))));
j10eval[0]=x9238;
j10eval[1]=IKsign(x9238);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9240=((-1.0)*r21);
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal(x9240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
IkReal x9241=((1.0)*(x9243.value));
IkReal x9242=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9241)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9241)));
IkReal gconst4=(x9240*x9242);
IkReal gconst5=((1.0)*r20*x9242);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x9244=((-1.0)*r21);
CheckValue<IkReal> x9247 = IKatan2WithCheck(IkReal(x9244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9247.valid){
continue;
}
IkReal x9245=((1.0)*(x9247.value));
IkReal x9246=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9245)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9245)));
IkReal gconst4=(x9244*x9246);
IkReal gconst5=((1.0)*r20*x9246);
IkReal x9248=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9252=IKPowWithIntegerCheck(x9248,-1);
if(!x9252.valid){
continue;
}
IkReal x9249=x9252.value;
IkReal x9250=((1.0)*x9249);
IkReal x9251=((((-2.0)*r10*r11*r20*r21*x9249))+(((-1.0)*(r12*r12)))+(((-1.0)*x9250*(r10*r10)*(r20*r20)))+(((-1.0)*x9250*(r11*r11)*(r21*r21))));
j10eval[0]=x9251;
j10eval[1]=r12;
j10eval[2]=x9248;
j10eval[3]=IKsign(x9251);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9253=((-1.0)*r21);
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(x9253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9254=((1.0)*(x9256.value));
IkReal x9255=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9254)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9254)));
IkReal gconst4=(x9253*x9255);
IkReal gconst5=((1.0)*r20*x9255);
IkReal x9257=r22*r22;
IkReal x9258=(cj7*r12*sj8);
IkReal x9259=(cj8*r12*sj7);
CheckValue<IkReal> x9263=IKPowWithIntegerCheck(((-1.0)+x9257),-1);
if(!x9263.valid){
continue;
}
IkReal x9260=x9263.value;
if((((1.0)+(((-1.0)*x9257)))) < -0.00001)
continue;
IkReal x9261=IKsqrt(((1.0)+(((-1.0)*x9257))));
IkReal x9262=(r22*x9260*x9261);
j10eval[0]=((IKabs((x9258+x9259)))+(IKabs((((x9259*x9262))+((x9258*x9262))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9264=((1.0)*gconst4);
IkReal x9265=(cj7*sj8);
IkReal x9266=(gconst5*r10);
IkReal x9267=(cj8*sj7);
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal((((x9265*x9266))+((x9266*x9267))+(((-1.0)*r11*x9264*x9265))+(((-1.0)*r11*x9264*x9267)))),IkReal((((r12*x9267))+((r12*x9265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9264))+(((-1.0)*gconst5*r01)))),-1);
if(!x9269.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9268.value)+(((1.5707963267949)*(x9269.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9270=IKcos(j10);
IkReal x9271=IKsin(j10);
IkReal x9272=((1.0)*sj8);
IkReal x9273=((1.0)*gconst5);
IkReal x9274=(gconst4*x9271);
IkReal x9275=((1.0)*x9270);
IkReal x9276=(gconst4*x9270);
evalcond[0]=(((r12*x9271))+(((-1.0)*r10*x9270*x9273))+((r11*x9276)));
evalcond[1]=((((-1.0)*r22*x9275))+(((-1.0)*r20*x9271*x9273))+((r21*x9274)));
evalcond[2]=(((r01*x9274))+(((-1.0)*r00*x9271*x9273))+(((-1.0)*r02*x9275)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9271*x9273))+((r11*x9274))+(((-1.0)*r12*x9275)));
evalcond[4]=(((r02*x9271))+((cj7*cj8))+((r01*x9276))+(((-1.0)*r00*x9270*x9273))+(((-1.0)*sj7*x9272)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r20*x9270*x9273))+(((-1.0)*cj7*x9272))+((r21*x9276))+((r22*x9271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9277=(gconst5*r10);
IkReal x9278=(gconst4*r11);
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal((x9278+(((-1.0)*x9277)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
CheckValue<IkReal> x9280=IKPowWithIntegerCheck(IKsign(((((2.0)*x9277*x9278))+(((-1.0)*(x9278*x9278)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9277*x9277))))),-1);
if(!x9280.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9279.value)+(((1.5707963267949)*(x9280.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9281=IKcos(j10);
IkReal x9282=IKsin(j10);
IkReal x9283=((1.0)*sj8);
IkReal x9284=((1.0)*gconst5);
IkReal x9285=(gconst4*x9282);
IkReal x9286=((1.0)*x9281);
IkReal x9287=(gconst4*x9281);
evalcond[0]=(((r11*x9287))+(((-1.0)*r10*x9281*x9284))+((r12*x9282)));
evalcond[1]=((((-1.0)*r20*x9282*x9284))+(((-1.0)*r22*x9286))+((r21*x9285)));
evalcond[2]=(((r01*x9285))+(((-1.0)*r02*x9286))+(((-1.0)*r00*x9282*x9284)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9286))+(((-1.0)*r10*x9282*x9284))+((r11*x9285)));
evalcond[4]=(((r02*x9282))+((r01*x9287))+((cj7*cj8))+(((-1.0)*r00*x9281*x9284))+(((-1.0)*sj7*x9283)));
evalcond[5]=(((r22*x9282))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x9281*x9284))+((r21*x9287))+(((-1.0)*cj7*x9283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9288=((1.0)*gconst5);
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
CheckValue<IkReal> x9290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9288)))),-1);
if(!x9290.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9289.value)+(((1.5707963267949)*(x9290.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9291=IKcos(j10);
IkReal x9292=IKsin(j10);
IkReal x9293=((1.0)*sj8);
IkReal x9294=((1.0)*gconst5);
IkReal x9295=(gconst4*x9292);
IkReal x9296=((1.0)*x9291);
IkReal x9297=(gconst4*x9291);
evalcond[0]=(((r11*x9297))+(((-1.0)*r10*x9291*x9294))+((r12*x9292)));
evalcond[1]=((((-1.0)*r20*x9292*x9294))+(((-1.0)*r22*x9296))+((r21*x9295)));
evalcond[2]=(((r01*x9295))+(((-1.0)*r00*x9292*x9294))+(((-1.0)*r02*x9296)));
evalcond[3]=((1.0)+((r11*x9295))+(((-1.0)*r10*x9292*x9294))+(((-1.0)*r12*x9296)));
evalcond[4]=(((r02*x9292))+((r01*x9297))+(((-1.0)*r00*x9291*x9294))+((cj7*cj8))+(((-1.0)*sj7*x9293)));
evalcond[5]=(((r22*x9292))+(((-1.0)*cj8*sj7))+((r21*x9297))+(((-1.0)*r20*x9291*x9294))+(((-1.0)*cj7*x9293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9298=((-1.0)*r21);
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal(x9298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
IkReal x9299=((1.0)*(x9301.value));
IkReal x9300=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9299)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9299)));
IkReal gconst4=(x9298*x9300);
IkReal gconst5=((1.0)*r20*x9300);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9302=((-1.0)*r21);
CheckValue<IkReal> x9305 = IKatan2WithCheck(IkReal(x9302),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9305.valid){
continue;
}
IkReal x9303=((1.0)*(x9305.value));
IkReal x9304=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9303)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9303)));
IkReal gconst4=(x9302*x9304);
IkReal gconst5=((1.0)*r20*x9304);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9306=((-1.0)*r21);
CheckValue<IkReal> x9309 = IKatan2WithCheck(IkReal(x9306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9309.valid){
continue;
}
IkReal x9307=((1.0)*(x9309.value));
IkReal x9308=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9307)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9307)));
IkReal gconst4=(x9306*x9308);
IkReal gconst5=((1.0)*r20*x9308);
IkReal x9310=r22*r22;
IkReal x9311=(cj7*r12*sj8);
IkReal x9312=(cj8*r12*sj7);
CheckValue<IkReal> x9316=IKPowWithIntegerCheck(((-1.0)+x9310),-1);
if(!x9316.valid){
continue;
}
IkReal x9313=x9316.value;
if((((1.0)+(((-1.0)*x9310)))) < -0.00001)
continue;
IkReal x9314=IKsqrt(((1.0)+(((-1.0)*x9310))));
IkReal x9315=(r22*x9313*x9314);
j10eval[0]=((IKabs((((x9311*x9315))+((x9312*x9315)))))+(IKabs((x9312+x9311))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9317=((1.0)*gconst4);
IkReal x9318=(cj7*sj8);
IkReal x9319=(gconst5*r10);
IkReal x9320=(cj8*sj7);
CheckValue<IkReal> x9321 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9317*x9318))+((x9319*x9320))+((x9318*x9319))+(((-1.0)*r11*x9317*x9320)))),IkReal((((r12*x9320))+((r12*x9318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9321.valid){
continue;
}
CheckValue<IkReal> x9322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9317))+(((-1.0)*gconst5*r01)))),-1);
if(!x9322.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9321.value)+(((1.5707963267949)*(x9322.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9323=IKcos(j10);
IkReal x9324=IKsin(j10);
IkReal x9325=((1.0)*cj7);
IkReal x9326=((1.0)*gconst5);
IkReal x9327=(gconst4*x9324);
IkReal x9328=((1.0)*x9323);
IkReal x9329=(gconst4*x9323);
evalcond[0]=(((r11*x9329))+(((-1.0)*r10*x9323*x9326))+((r12*x9324)));
evalcond[1]=((((-1.0)*r22*x9328))+(((-1.0)*r20*x9324*x9326))+((r21*x9327)));
evalcond[2]=((((-1.0)*r02*x9328))+((r01*x9327))+(((-1.0)*r00*x9324*x9326)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9328))+((r11*x9327))+(((-1.0)*r10*x9324*x9326)));
evalcond[4]=(((r01*x9329))+(((-1.0)*r00*x9323*x9326))+((r02*x9324))+(((-1.0)*cj8*x9325))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x9324))+(((-1.0)*r20*x9323*x9326))+(((-1.0)*sj8*x9325))+((r21*x9329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9330=(gconst5*r10);
IkReal x9331=(gconst4*r11);
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal((x9331+(((-1.0)*x9330)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9330*x9331))+(x9331*x9331)+(x9330*x9330))),-1);
if(!x9333.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9332.value)+(((1.5707963267949)*(x9333.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9334=IKcos(j10);
IkReal x9335=IKsin(j10);
IkReal x9336=((1.0)*cj7);
IkReal x9337=((1.0)*gconst5);
IkReal x9338=(gconst4*x9335);
IkReal x9339=((1.0)*x9334);
IkReal x9340=(gconst4*x9334);
evalcond[0]=(((r11*x9340))+((r12*x9335))+(((-1.0)*r10*x9334*x9337)));
evalcond[1]=((((-1.0)*r22*x9339))+(((-1.0)*r20*x9335*x9337))+((r21*x9338)));
evalcond[2]=((((-1.0)*r02*x9339))+(((-1.0)*r00*x9335*x9337))+((r01*x9338)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9339))+((r11*x9338))+(((-1.0)*r10*x9335*x9337)));
evalcond[4]=((((-1.0)*r00*x9334*x9337))+((r01*x9340))+((r02*x9335))+(((-1.0)*cj8*x9336))+((sj7*sj8)));
evalcond[5]=((((-1.0)*r20*x9334*x9337))+(((-1.0)*cj8*sj7))+((r22*x9335))+((r21*x9340))+(((-1.0)*sj8*x9336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9341=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9341.valid){
continue;
}
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9341.value)))+(x9342.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9343=IKcos(j10);
IkReal x9344=IKsin(j10);
IkReal x9345=((1.0)*cj7);
IkReal x9346=((1.0)*gconst5);
IkReal x9347=(gconst4*x9344);
IkReal x9348=((1.0)*x9343);
IkReal x9349=(gconst4*x9343);
evalcond[0]=(((r12*x9344))+((r11*x9349))+(((-1.0)*r10*x9343*x9346)));
evalcond[1]=((((-1.0)*r22*x9348))+(((-1.0)*r20*x9344*x9346))+((r21*x9347)));
evalcond[2]=((((-1.0)*r02*x9348))+((r01*x9347))+(((-1.0)*r00*x9344*x9346)));
evalcond[3]=((-1.0)+((r11*x9347))+(((-1.0)*r10*x9344*x9346))+(((-1.0)*r12*x9348)));
evalcond[4]=(((r01*x9349))+(((-1.0)*r00*x9343*x9346))+((sj7*sj8))+(((-1.0)*cj8*x9345))+((r02*x9344)));
evalcond[5]=((((-1.0)*r20*x9343*x9346))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x9345))+((r21*x9349))+((r22*x9344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9350=((-1.0)*r21);
CheckValue<IkReal> x9353 = IKatan2WithCheck(IkReal(x9350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9353.valid){
continue;
}
IkReal x9351=((1.0)*(x9353.value));
IkReal x9352=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9351)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9351)));
IkReal gconst4=(x9350*x9352);
IkReal gconst5=((1.0)*r20*x9352);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9354=((-1.0)*r21);
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal(x9354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
IkReal x9355=((1.0)*(x9357.value));
IkReal x9356=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9355)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9355)));
IkReal gconst4=(x9354*x9356);
IkReal gconst5=((1.0)*r20*x9356);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9358=((-1.0)*r21);
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal(x9358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
IkReal x9359=((1.0)*(x9361.value));
IkReal x9360=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9359)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9359)));
IkReal gconst4=(x9358*x9360);
IkReal gconst5=((1.0)*r20*x9360);
IkReal x9362=r22*r22;
IkReal x9363=(cj7*r02*sj8);
IkReal x9364=(cj8*r02*sj7);
CheckValue<IkReal> x9368=IKPowWithIntegerCheck(((-1.0)+x9362),-1);
if(!x9368.valid){
continue;
}
IkReal x9365=x9368.value;
if((((1.0)+(((-1.0)*x9362)))) < -0.00001)
continue;
IkReal x9366=IKsqrt(((1.0)+(((-1.0)*x9362))));
IkReal x9367=(r22*x9365*x9366);
j10eval[0]=((IKabs((((x9364*x9367))+((x9363*x9367)))))+(IKabs((x9364+x9363))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9369=(cj7*sj8);
IkReal x9370=(gconst5*r00);
IkReal x9371=(cj8*sj7);
IkReal x9372=((1.0)*gconst4*r01);
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9373.valid){
continue;
}
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(((((-1.0)*x9369*x9372))+(((-1.0)*x9371*x9372))+((x9369*x9370))+((x9370*x9371)))),IkReal((((r02*x9371))+((r02*x9369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9373.value)))+(x9374.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9375=IKcos(j10);
IkReal x9376=IKsin(j10);
IkReal x9377=((1.0)*sj8);
IkReal x9378=((1.0)*gconst5);
IkReal x9379=(gconst4*x9376);
IkReal x9380=((1.0)*x9375);
IkReal x9381=(gconst4*x9375);
evalcond[0]=((((-1.0)*r00*x9375*x9378))+((r02*x9376))+((r01*x9381)));
evalcond[1]=(((r21*x9379))+(((-1.0)*r22*x9380))+(((-1.0)*r20*x9376*x9378)));
evalcond[2]=(((r11*x9379))+(((-1.0)*r12*x9380))+(((-1.0)*r10*x9376*x9378)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9380))+((r01*x9379))+(((-1.0)*r00*x9376*x9378)));
evalcond[4]=(((r11*x9381))+(((-1.0)*sj7*x9377))+((r12*x9376))+((cj7*cj8))+(((-1.0)*r10*x9375*x9378)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x9381))+((r22*x9376))+(((-1.0)*cj7*x9377))+(((-1.0)*r20*x9375*x9378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9382=(gconst4*r01);
IkReal x9383=(gconst5*r00);
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal((x9382+(((-1.0)*x9383)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
CheckValue<IkReal> x9385=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9382*x9383))+(r02*r02)+(x9383*x9383)+(x9382*x9382))),-1);
if(!x9385.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9384.value)+(((1.5707963267949)*(x9385.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9386=IKcos(j10);
IkReal x9387=IKsin(j10);
IkReal x9388=((1.0)*sj8);
IkReal x9389=((1.0)*gconst5);
IkReal x9390=(gconst4*x9387);
IkReal x9391=((1.0)*x9386);
IkReal x9392=(gconst4*x9386);
evalcond[0]=(((r01*x9392))+((r02*x9387))+(((-1.0)*r00*x9386*x9389)));
evalcond[1]=((((-1.0)*r20*x9387*x9389))+(((-1.0)*r22*x9391))+((r21*x9390)));
evalcond[2]=((((-1.0)*r12*x9391))+((r11*x9390))+(((-1.0)*r10*x9387*x9389)));
evalcond[3]=((-1.0)+((r01*x9390))+(((-1.0)*r00*x9387*x9389))+(((-1.0)*r02*x9391)));
evalcond[4]=(((r11*x9392))+(((-1.0)*sj7*x9388))+((r12*x9387))+((cj7*cj8))+(((-1.0)*r10*x9386*x9389)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x9387))+(((-1.0)*r20*x9386*x9389))+(((-1.0)*cj7*x9388))+((r21*x9392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9393=((1.0)*gconst5);
CheckValue<IkReal> x9394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9393))+(((-1.0)*gconst4*r10)))),-1);
if(!x9394.valid){
continue;
}
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9393))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9394.value)))+(x9395.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9396=IKcos(j10);
IkReal x9397=IKsin(j10);
IkReal x9398=((1.0)*sj8);
IkReal x9399=((1.0)*gconst5);
IkReal x9400=(gconst4*x9397);
IkReal x9401=((1.0)*x9396);
IkReal x9402=(gconst4*x9396);
evalcond[0]=(((r01*x9402))+(((-1.0)*r00*x9396*x9399))+((r02*x9397)));
evalcond[1]=((((-1.0)*r22*x9401))+(((-1.0)*r20*x9397*x9399))+((r21*x9400)));
evalcond[2]=(((r11*x9400))+(((-1.0)*r12*x9401))+(((-1.0)*r10*x9397*x9399)));
evalcond[3]=((-1.0)+((r01*x9400))+(((-1.0)*r00*x9397*x9399))+(((-1.0)*r02*x9401)));
evalcond[4]=((((-1.0)*r10*x9396*x9399))+((r11*x9402))+((r12*x9397))+((cj7*cj8))+(((-1.0)*sj7*x9398)));
evalcond[5]=((((-1.0)*cj7*x9398))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x9396*x9399))+((r22*x9397))+((r21*x9402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9403=((-1.0)*r21);
CheckValue<IkReal> x9406 = IKatan2WithCheck(IkReal(x9403),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9406.valid){
continue;
}
IkReal x9404=((1.0)*(x9406.value));
IkReal x9405=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9404)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9404)));
IkReal gconst4=(x9403*x9405);
IkReal gconst5=((1.0)*r20*x9405);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x9407=((-1.0)*r21);
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(x9407),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
IkReal x9408=((1.0)*(x9410.value));
IkReal x9409=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9408)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9408)));
IkReal gconst4=(x9407*x9409);
IkReal gconst5=((1.0)*r20*x9409);
IkReal x9411=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9415=IKPowWithIntegerCheck(x9411,-1);
if(!x9415.valid){
continue;
}
IkReal x9412=x9415.value;
IkReal x9413=((1.0)*x9412);
IkReal x9414=((((-1.0)*x9413*(r00*r00)*(r20*r20)))+(((-1.0)*x9413*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9412)));
j10eval[0]=x9414;
j10eval[1]=IKsign(x9414);
j10eval[2]=r02;
j10eval[3]=x9411;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9416=((-1.0)*r21);
CheckValue<IkReal> x9419 = IKatan2WithCheck(IkReal(x9416),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9419.valid){
continue;
}
IkReal x9417=((1.0)*(x9419.value));
IkReal x9418=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9417)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9417)));
IkReal gconst4=(x9416*x9418);
IkReal gconst5=((1.0)*r20*x9418);
IkReal x9420=r22*r22;
IkReal x9421=(cj7*r02*sj8);
IkReal x9422=(cj8*r02*sj7);
CheckValue<IkReal> x9426=IKPowWithIntegerCheck(((-1.0)+x9420),-1);
if(!x9426.valid){
continue;
}
IkReal x9423=x9426.value;
if((((1.0)+(((-1.0)*x9420)))) < -0.00001)
continue;
IkReal x9424=IKsqrt(((1.0)+(((-1.0)*x9420))));
IkReal x9425=(r22*x9423*x9424);
j10eval[0]=((IKabs((x9421+x9422)))+(IKabs((((x9422*x9425))+((x9421*x9425))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9427=(cj7*sj8);
IkReal x9428=(gconst5*r00);
IkReal x9429=(cj8*sj7);
IkReal x9430=((1.0)*gconst4*r01);
CheckValue<IkReal> x9431=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9431.valid){
continue;
}
CheckValue<IkReal> x9432 = IKatan2WithCheck(IkReal(((((-1.0)*x9427*x9430))+((x9427*x9428))+((x9428*x9429))+(((-1.0)*x9429*x9430)))),IkReal((((r02*x9429))+((r02*x9427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9432.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9431.value)))+(x9432.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9433=IKcos(j10);
IkReal x9434=IKsin(j10);
IkReal x9435=((1.0)*cj7);
IkReal x9436=((1.0)*gconst5);
IkReal x9437=(gconst4*x9434);
IkReal x9438=((1.0)*x9433);
IkReal x9439=(gconst4*x9433);
evalcond[0]=((((-1.0)*r00*x9433*x9436))+((r02*x9434))+((r01*x9439)));
evalcond[1]=(((r21*x9437))+(((-1.0)*r20*x9434*x9436))+(((-1.0)*r22*x9438)));
evalcond[2]=(((r11*x9437))+(((-1.0)*r10*x9434*x9436))+(((-1.0)*r12*x9438)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9438))+(((-1.0)*r00*x9434*x9436))+((r01*x9437)));
evalcond[4]=(((r11*x9439))+(((-1.0)*r10*x9433*x9436))+((sj7*sj8))+((r12*x9434))+(((-1.0)*cj8*x9435)));
evalcond[5]=(((r22*x9434))+(((-1.0)*r20*x9433*x9436))+(((-1.0)*cj8*sj7))+((r21*x9439))+(((-1.0)*sj8*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9440=(gconst4*r01);
IkReal x9441=(gconst5*r00);
CheckValue<IkReal> x9442=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9440*x9441))+(((-1.0)*(x9441*x9441)))+(((-1.0)*(x9440*x9440))))),-1);
if(!x9442.valid){
continue;
}
CheckValue<IkReal> x9443 = IKatan2WithCheck(IkReal(((((-1.0)*x9441))+x9440)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9443.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9442.value)))+(x9443.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9444=IKcos(j10);
IkReal x9445=IKsin(j10);
IkReal x9446=((1.0)*cj7);
IkReal x9447=((1.0)*gconst5);
IkReal x9448=(gconst4*x9445);
IkReal x9449=((1.0)*x9444);
IkReal x9450=(gconst4*x9444);
evalcond[0]=(((r01*x9450))+(((-1.0)*r00*x9444*x9447))+((r02*x9445)));
evalcond[1]=(((r21*x9448))+(((-1.0)*r22*x9449))+(((-1.0)*r20*x9445*x9447)));
evalcond[2]=((((-1.0)*r10*x9445*x9447))+((r11*x9448))+(((-1.0)*r12*x9449)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9445*x9447))+((r01*x9448))+(((-1.0)*r02*x9449)));
evalcond[4]=((((-1.0)*cj8*x9446))+(((-1.0)*r10*x9444*x9447))+((r12*x9445))+((r11*x9450))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x9446))+((r22*x9445))+(((-1.0)*r20*x9444*x9447))+((r21*x9450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9451=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9451.valid){
continue;
}
CheckValue<IkReal> x9452 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9452.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9451.value)))+(x9452.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9453=IKcos(j10);
IkReal x9454=IKsin(j10);
IkReal x9455=((1.0)*cj7);
IkReal x9456=((1.0)*gconst5);
IkReal x9457=(gconst4*x9454);
IkReal x9458=((1.0)*x9453);
IkReal x9459=(gconst4*x9453);
evalcond[0]=(((r01*x9459))+(((-1.0)*r00*x9453*x9456))+((r02*x9454)));
evalcond[1]=(((r21*x9457))+(((-1.0)*r22*x9458))+(((-1.0)*r20*x9454*x9456)));
evalcond[2]=(((r11*x9457))+(((-1.0)*r10*x9454*x9456))+(((-1.0)*r12*x9458)));
evalcond[3]=((1.0)+((r01*x9457))+(((-1.0)*r00*x9454*x9456))+(((-1.0)*r02*x9458)));
evalcond[4]=((((-1.0)*r10*x9453*x9456))+(((-1.0)*cj8*x9455))+((r12*x9454))+((r11*x9459))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x9455))+((r22*x9454))+((r21*x9459))+(((-1.0)*r20*x9453*x9456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9460=((-1.0)*r21);
IkReal x9461=((-1.0)*px);
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(x9460),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
IkReal x9462=((1.0)*(x9463.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9462)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9461);
rxp1_1=(px*r21);
rxp1_2=(r11*x9461);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9462)));
IkReal gconst4=x9460;
IkReal gconst5=((1.0)*r20);
j10eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x9465=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x9465.valid){
continue;
}
IkReal x9464=x9465.value;
cj10array[0]=(((cj8*sj7*x9464))+((cj7*sj8*x9464)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x9466=IKsin(j10);
IkReal x9467=(gconst4*x9466);
IkReal x9468=((1.0)*gconst5*x9466);
evalcond[0]=(r02*x9466);
evalcond[1]=(((r21*x9467))+(((-1.0)*r20*x9468)));
evalcond[2]=((((-1.0)*r10*x9468))+((r11*x9467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9469=(gconst4*r21);
IkReal x9470=(cj7*sj8);
IkReal x9471=(gconst5*r20);
IkReal x9472=(cj8*sj7);
IkReal x9473=((1.0)*r22);
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((((2.0)*x9469*x9471))+(((-1.0)*(x9469*x9469)))+(((-1.0)*r22*x9473))+(((-1.0)*(x9471*x9471))))),-1);
if(!x9474.valid){
continue;
}
CheckValue<IkReal> x9475 = IKatan2WithCheck(IkReal(((((-1.0)*x9470*x9473))+(((-1.0)*x9472*x9473)))),IkReal((((x9470*x9471))+(((-1.0)*x9469*x9470))+(((-1.0)*x9469*x9472))+((x9471*x9472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9475.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9474.value)))+(x9475.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9476=IKsin(j10);
IkReal x9477=IKcos(j10);
IkReal x9478=((1.0)*sj8);
IkReal x9479=((1.0)*gconst5);
IkReal x9480=(cj7*cj8);
IkReal x9481=(gconst4*x9476);
IkReal x9482=((1.0)*x9477);
IkReal x9483=(gconst4*x9477);
evalcond[0]=((((-1.0)*r20*x9476*x9479))+((r21*x9481))+(((-1.0)*r22*x9482)));
evalcond[1]=(cj6+((r11*x9481))+(((-1.0)*r12*x9482))+(((-1.0)*r10*x9476*x9479)));
evalcond[2]=((((-1.0)*sj6))+((r01*x9481))+(((-1.0)*r02*x9482))+(((-1.0)*r00*x9476*x9479)));
evalcond[3]=(((r22*x9476))+(((-1.0)*cj8*sj7))+(((-1.0)*r20*x9477*x9479))+((r21*x9483))+(((-1.0)*cj7*x9478)));
evalcond[4]=(((r01*x9483))+(((-1.0)*cj6*sj7*x9478))+((cj6*x9480))+(((-1.0)*r00*x9477*x9479))+((r02*x9476)));
evalcond[5]=((((-1.0)*r10*x9477*x9479))+(((-1.0)*sj6*sj7*x9478))+((r11*x9483))+((sj6*x9480))+((r12*x9476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9484=((1.0)*gconst5);
CheckValue<IkReal> x9485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9484))+(((-1.0)*gconst4*r10)))),-1);
if(!x9485.valid){
continue;
}
CheckValue<IkReal> x9486 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x9484))+((gconst4*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9486.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9485.value)))+(x9486.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9487=IKsin(j10);
IkReal x9488=IKcos(j10);
IkReal x9489=((1.0)*sj8);
IkReal x9490=((1.0)*gconst5);
IkReal x9491=(cj7*cj8);
IkReal x9492=(gconst4*x9487);
IkReal x9493=((1.0)*x9488);
IkReal x9494=(gconst4*x9488);
evalcond[0]=((((-1.0)*r22*x9493))+((r21*x9492))+(((-1.0)*r20*x9487*x9490)));
evalcond[1]=((((-1.0)*r10*x9487*x9490))+cj6+(((-1.0)*r12*x9493))+((r11*x9492)));
evalcond[2]=((((-1.0)*r02*x9493))+(((-1.0)*sj6))+((r01*x9492))+(((-1.0)*r00*x9487*x9490)));
evalcond[3]=((((-1.0)*cj7*x9489))+(((-1.0)*cj8*sj7))+((r21*x9494))+(((-1.0)*r20*x9488*x9490))+((r22*x9487)));
evalcond[4]=((((-1.0)*cj6*sj7*x9489))+((r02*x9487))+((r01*x9494))+((cj6*x9491))+(((-1.0)*r00*x9488*x9490)));
evalcond[5]=(((sj6*x9491))+(((-1.0)*sj6*sj7*x9489))+((r12*x9487))+((r11*x9494))+(((-1.0)*r10*x9488*x9490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9495=((1.0)*gconst5);
CheckValue<IkReal> x9496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9495)))),-1);
if(!x9496.valid){
continue;
}
CheckValue<IkReal> x9497 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst4*r21))+(((-1.0)*cj6*r20*x9495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9497.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9496.value)))+(x9497.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9498=IKsin(j10);
IkReal x9499=IKcos(j10);
IkReal x9500=((1.0)*sj8);
IkReal x9501=((1.0)*gconst5);
IkReal x9502=(cj7*cj8);
IkReal x9503=(gconst4*x9498);
IkReal x9504=((1.0)*x9499);
IkReal x9505=(gconst4*x9499);
evalcond[0]=(((r21*x9503))+(((-1.0)*r22*x9504))+(((-1.0)*r20*x9498*x9501)));
evalcond[1]=(cj6+(((-1.0)*r12*x9504))+((r11*x9503))+(((-1.0)*r10*x9498*x9501)));
evalcond[2]=((((-1.0)*r00*x9498*x9501))+(((-1.0)*sj6))+(((-1.0)*r02*x9504))+((r01*x9503)));
evalcond[3]=((((-1.0)*cj8*sj7))+((r21*x9505))+(((-1.0)*cj7*x9500))+((r22*x9498))+(((-1.0)*r20*x9499*x9501)));
evalcond[4]=(((r02*x9498))+((cj6*x9502))+(((-1.0)*r00*x9499*x9501))+(((-1.0)*cj6*sj7*x9500))+((r01*x9505)));
evalcond[5]=(((r12*x9498))+(((-1.0)*sj6*sj7*x9500))+(((-1.0)*r10*x9499*x9501))+((r11*x9505))+((sj6*x9502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9506=((-1.0)*r21);
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal(x9506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
IkReal x9507=((1.0)*(x9509.value));
IkReal x9508=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9507)));
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9507)));
IkReal gconst4=(x9506*x9508);
IkReal gconst5=((1.0)*r20*x9508);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9510=((-1.0)*r21);
CheckValue<IkReal> x9513 = IKatan2WithCheck(IkReal(x9510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9513.valid){
continue;
}
IkReal x9511=((1.0)*(x9513.value));
IkReal x9512=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9511)));
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9511)));
IkReal gconst4=(x9510*x9512);
IkReal gconst5=((1.0)*r20*x9512);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9514=((-1.0)*r21);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal(x9514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
IkReal x9515=((1.0)*(x9517.value));
IkReal x9516=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9515)));
sj6=0;
cj6=1.0;
j6=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9515)));
IkReal gconst4=(x9514*x9516);
IkReal gconst5=((1.0)*r20*x9516);
j10eval[0]=r02;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9518=((-1.0)*r21);
CheckValue<IkReal> x9521 = IKatan2WithCheck(IkReal(x9518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9521.valid){
continue;
}
IkReal x9519=((1.0)*(x9521.value));
IkReal x9520=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9519)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9519)));
IkReal gconst4=(x9518*x9520);
IkReal gconst5=((1.0)*r20*x9520);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x9522=((-1.0)*r21);
CheckValue<IkReal> x9525 = IKatan2WithCheck(IkReal(x9522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9525.valid){
continue;
}
IkReal x9523=((1.0)*(x9525.value));
IkReal x9524=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9523)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9523)));
IkReal gconst4=(x9522*x9524);
IkReal gconst5=((1.0)*r20*x9524);
IkReal x9526=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9530=IKPowWithIntegerCheck(x9526,-1);
if(!x9530.valid){
continue;
}
IkReal x9527=x9530.value;
IkReal x9528=((1.0)*x9527);
IkReal x9529=((((-1.0)*x9528*(r10*r10)*(r20*r20)))+(((-1.0)*x9528*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9527))+(((-1.0)*(r12*r12))));
j10eval[0]=x9529;
j10eval[1]=r12;
j10eval[2]=x9526;
j10eval[3]=IKsign(x9529);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9531=((-1.0)*r21);
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal(x9531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
IkReal x9532=((1.0)*(x9534.value));
IkReal x9533=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9532)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9532)));
IkReal gconst4=(x9531*x9533);
IkReal gconst5=((1.0)*r20*x9533);
IkReal x9535=r22*r22;
IkReal x9536=(cj7*cj8*r12);
CheckValue<IkReal> x9541=IKPowWithIntegerCheck(((-1.0)+x9535),-1);
if(!x9541.valid){
continue;
}
IkReal x9537=x9541.value;
IkReal x9538=((1.0)*r12*sj7*sj8);
if((((1.0)+(((-1.0)*x9535)))) < -0.00001)
continue;
IkReal x9539=IKsqrt(((1.0)+(((-1.0)*x9535))));
IkReal x9540=(r22*x9537*x9539);
j10eval[0]=((IKabs(((((-1.0)*x9538))+x9536)))+(IKabs((((x9536*x9540))+(((-1.0)*x9538*x9540))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9542=((1.0)*gconst4);
IkReal x9543=(cj7*cj8);
IkReal x9544=(gconst5*r10);
IkReal x9545=((1.0)*sj7*sj8);
CheckValue<IkReal> x9546 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9542*x9543))+(((-1.0)*x9544*x9545))+((x9543*x9544))+((gconst4*r11*sj7*sj8)))),IkReal((((r12*x9543))+(((-1.0)*r12*x9545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9546.valid){
continue;
}
CheckValue<IkReal> x9547=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9542))+(((-1.0)*gconst5*r01)))),-1);
if(!x9547.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9546.value)+(((1.5707963267949)*(x9547.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9548=IKcos(j10);
IkReal x9549=IKsin(j10);
IkReal x9550=((1.0)*cj7);
IkReal x9551=((1.0)*gconst5);
IkReal x9552=(gconst4*x9549);
IkReal x9553=((1.0)*x9548);
IkReal x9554=(gconst4*x9548);
evalcond[0]=(((r11*x9554))+((r12*x9549))+(((-1.0)*r10*x9548*x9551)));
evalcond[1]=((((-1.0)*r20*x9549*x9551))+(((-1.0)*r22*x9553))+((r21*x9552)));
evalcond[2]=((((-1.0)*r00*x9549*x9551))+(((-1.0)*r02*x9553))+((r01*x9552)));
evalcond[3]=((1.0)+((r11*x9552))+(((-1.0)*r10*x9549*x9551))+(((-1.0)*r12*x9553)));
evalcond[4]=(((r22*x9549))+(((-1.0)*cj8*x9550))+((r21*x9554))+((sj7*sj8))+(((-1.0)*r20*x9548*x9551)));
evalcond[5]=((((-1.0)*sj8*x9550))+(((-1.0)*cj8*sj7))+((r02*x9549))+((r01*x9554))+(((-1.0)*r00*x9548*x9551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9555=(gconst5*r10);
IkReal x9556=(gconst4*r11);
CheckValue<IkReal> x9557=IKPowWithIntegerCheck(IKsign(((((2.0)*x9555*x9556))+(((-1.0)*(x9555*x9555)))+(((-1.0)*(x9556*x9556)))+(((-1.0)*(r12*r12))))),-1);
if(!x9557.valid){
continue;
}
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal((x9556+(((-1.0)*x9555)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9557.value)))+(x9558.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9559=IKcos(j10);
IkReal x9560=IKsin(j10);
IkReal x9561=((1.0)*cj7);
IkReal x9562=((1.0)*gconst5);
IkReal x9563=(gconst4*x9560);
IkReal x9564=((1.0)*x9559);
IkReal x9565=(gconst4*x9559);
evalcond[0]=((((-1.0)*r10*x9559*x9562))+((r12*x9560))+((r11*x9565)));
evalcond[1]=(((r21*x9563))+(((-1.0)*r22*x9564))+(((-1.0)*r20*x9560*x9562)));
evalcond[2]=((((-1.0)*r00*x9560*x9562))+((r01*x9563))+(((-1.0)*r02*x9564)));
evalcond[3]=((1.0)+((r11*x9563))+(((-1.0)*r12*x9564))+(((-1.0)*r10*x9560*x9562)));
evalcond[4]=(((r21*x9565))+(((-1.0)*r20*x9559*x9562))+((r22*x9560))+(((-1.0)*cj8*x9561))+((sj7*sj8)));
evalcond[5]=((((-1.0)*sj8*x9561))+(((-1.0)*cj8*sj7))+((r01*x9565))+(((-1.0)*r00*x9559*x9562))+((r02*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9566=((1.0)*gconst5);
CheckValue<IkReal> x9567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9566)))),-1);
if(!x9567.valid){
continue;
}
CheckValue<IkReal> x9568 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9566))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9568.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9567.value)))+(x9568.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9569=IKcos(j10);
IkReal x9570=IKsin(j10);
IkReal x9571=((1.0)*cj7);
IkReal x9572=((1.0)*gconst5);
IkReal x9573=(gconst4*x9570);
IkReal x9574=((1.0)*x9569);
IkReal x9575=(gconst4*x9569);
evalcond[0]=((((-1.0)*r10*x9569*x9572))+((r11*x9575))+((r12*x9570)));
evalcond[1]=(((r21*x9573))+(((-1.0)*r20*x9570*x9572))+(((-1.0)*r22*x9574)));
evalcond[2]=((((-1.0)*r02*x9574))+(((-1.0)*r00*x9570*x9572))+((r01*x9573)));
evalcond[3]=((1.0)+((r11*x9573))+(((-1.0)*r12*x9574))+(((-1.0)*r10*x9570*x9572)));
evalcond[4]=(((r21*x9575))+((r22*x9570))+(((-1.0)*cj8*x9571))+((sj7*sj8))+(((-1.0)*r20*x9569*x9572)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r01*x9575))+(((-1.0)*r00*x9569*x9572))+((r02*x9570))+(((-1.0)*sj8*x9571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9576=((-1.0)*r21);
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal(x9576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
IkReal x9577=((1.0)*(x9579.value));
IkReal x9578=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9577)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9577)));
IkReal gconst4=(x9576*x9578);
IkReal gconst5=((1.0)*r20*x9578);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9580=((-1.0)*r21);
CheckValue<IkReal> x9583 = IKatan2WithCheck(IkReal(x9580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9583.valid){
continue;
}
IkReal x9581=((1.0)*(x9583.value));
IkReal x9582=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9581)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9581)));
IkReal gconst4=(x9580*x9582);
IkReal gconst5=((1.0)*r20*x9582);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9584=((-1.0)*r21);
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal(x9584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
IkReal x9585=((1.0)*(x9587.value));
IkReal x9586=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9585)));
sj6=0;
cj6=1.0;
j6=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9585)));
IkReal gconst4=(x9584*x9586);
IkReal gconst5=((1.0)*r20*x9586);
IkReal x9588=r22*r22;
CheckValue<IkReal> x9591=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9588))),-1);
if(!x9591.valid){
continue;
}
IkReal x9589=x9591.value;
IkReal x9590=((1.0)*x9589);
j10eval[0]=IKsign((((x9590*(r20*r20*r20*r20)))+((x9590*(r21*r21*r21*r21)))+(((2.0)*x9589*(r20*r20)*(r21*r21)))+x9588));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9592=(gconst5*r20);
IkReal x9593=(sj7*sj8);
IkReal x9594=(gconst4*r21);
IkReal x9595=((1.0)*cj7*cj8);
CheckValue<IkReal> x9596 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9595))+((r22*x9593)))),IkReal((((x9593*x9594))+(((-1.0)*x9594*x9595))+((cj7*cj8*x9592))+(((-1.0)*x9592*x9593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9596.valid){
continue;
}
CheckValue<IkReal> x9597=IKPowWithIntegerCheck(IKsign(((x9592*x9592)+(x9594*x9594)+(r22*r22)+(((-2.0)*x9592*x9594)))),-1);
if(!x9597.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9596.value)+(((1.5707963267949)*(x9597.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9598=IKsin(j10);
IkReal x9599=IKcos(j10);
IkReal x9600=(gconst4*r21);
IkReal x9601=(gconst4*r11);
IkReal x9602=((1.0)*cj7);
IkReal x9603=(gconst4*r01);
IkReal x9604=((1.0)*x9599);
IkReal x9605=(gconst5*x9599);
IkReal x9606=((1.0)*x9598);
evalcond[0]=((((-1.0)*r22*x9604))+((x9598*x9600))+(((-1.0)*gconst5*r20*x9606)));
evalcond[1]=(((x9598*x9603))+(((-1.0)*r02*x9604))+(((-1.0)*gconst5*r00*x9606)));
evalcond[2]=(((r10*x9605))+(((-1.0)*r12*x9606))+(((-1.0)*x9601*x9604)));
evalcond[3]=((1.0)+(((-1.0)*gconst5*r10*x9606))+((x9598*x9601))+(((-1.0)*r12*x9604)));
evalcond[4]=((((-1.0)*r22*x9606))+(((-1.0)*cj8*x9602))+((r20*x9605))+(((-1.0)*x9600*x9604))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r00*x9605))+(((-1.0)*r02*x9606))+(((-1.0)*sj8*x9602))+(((-1.0)*x9603*x9604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9607=(gconst5*r10);
IkReal x9608=(gconst4*r11);
CheckValue<IkReal> x9609 = IKatan2WithCheck(IkReal(((((-1.0)*x9608))+x9607)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9609.valid){
continue;
}
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9607*x9607)+(x9608*x9608)+(((-2.0)*x9607*x9608)))),-1);
if(!x9610.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9609.value)+(((1.5707963267949)*(x9610.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9611=IKsin(j10);
IkReal x9612=IKcos(j10);
IkReal x9613=(gconst4*r21);
IkReal x9614=(gconst4*r11);
IkReal x9615=((1.0)*cj7);
IkReal x9616=(gconst4*r01);
IkReal x9617=((1.0)*x9612);
IkReal x9618=(gconst5*x9612);
IkReal x9619=((1.0)*x9611);
evalcond[0]=(((x9611*x9613))+(((-1.0)*r22*x9617))+(((-1.0)*gconst5*r20*x9619)));
evalcond[1]=(((x9611*x9616))+(((-1.0)*gconst5*r00*x9619))+(((-1.0)*r02*x9617)));
evalcond[2]=(((r10*x9618))+(((-1.0)*r12*x9619))+(((-1.0)*x9614*x9617)));
evalcond[3]=((1.0)+((x9611*x9614))+(((-1.0)*gconst5*r10*x9619))+(((-1.0)*r12*x9617)));
evalcond[4]=(((r20*x9618))+(((-1.0)*r22*x9619))+(((-1.0)*x9613*x9617))+(((-1.0)*cj8*x9615))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r00*x9618))+(((-1.0)*r02*x9619))+(((-1.0)*x9616*x9617))+(((-1.0)*sj8*x9615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9620=((1.0)*gconst5);
CheckValue<IkReal> x9621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9620)))),-1);
if(!x9621.valid){
continue;
}
CheckValue<IkReal> x9622 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9622.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9621.value)))+(x9622.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9623=IKsin(j10);
IkReal x9624=IKcos(j10);
IkReal x9625=(gconst4*r21);
IkReal x9626=(gconst4*r11);
IkReal x9627=((1.0)*cj7);
IkReal x9628=(gconst4*r01);
IkReal x9629=((1.0)*x9624);
IkReal x9630=(gconst5*x9624);
IkReal x9631=((1.0)*x9623);
evalcond[0]=((((-1.0)*gconst5*r20*x9631))+(((-1.0)*r22*x9629))+((x9623*x9625)));
evalcond[1]=((((-1.0)*r02*x9629))+(((-1.0)*gconst5*r00*x9631))+((x9623*x9628)));
evalcond[2]=((((-1.0)*x9626*x9629))+((r10*x9630))+(((-1.0)*r12*x9631)));
evalcond[3]=((1.0)+(((-1.0)*gconst5*r10*x9631))+(((-1.0)*r12*x9629))+((x9623*x9626)));
evalcond[4]=(((r20*x9630))+(((-1.0)*r22*x9631))+(((-1.0)*x9625*x9629))+((sj7*sj8))+(((-1.0)*cj8*x9627)));
evalcond[5]=(((r00*x9630))+(((-1.0)*cj8*sj7))+(((-1.0)*x9628*x9629))+(((-1.0)*sj8*x9627))+(((-1.0)*r02*x9631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x9632=((-1.0)*r21);
IkReal x9633=((-1.0)*px);
CheckValue<IkReal> x9635 = IKatan2WithCheck(IkReal(x9632),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9635.valid){
continue;
}
IkReal x9634=((1.0)*(x9635.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9634)));
sj6=0;
cj6=1.0;
j6=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9633);
rxp1_1=(px*r21);
rxp1_2=(r11*x9633);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9634)));
IkReal gconst4=x9632;
IkReal gconst5=((1.0)*r20);
IkReal x9636=((1.0)*r11*r21);
IkReal x9637=((1.0)*r10*r20);
j10eval[0]=((((-1.0)*x9637))+(((-1.0)*x9636)));
j10eval[1]=(((sj9*x9636))+((sj9*x9637)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9638=((-1.0)*r21);
IkReal x9639=((-1.0)*px);
CheckValue<IkReal> x9641 = IKatan2WithCheck(IkReal(x9638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9641.valid){
continue;
}
IkReal x9640=((1.0)*(x9641.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9640)));
sj6=0;
cj6=1.0;
j6=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9639);
rxp1_1=(px*r21);
rxp1_2=(r11*x9639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9640)));
IkReal gconst4=x9638;
IkReal gconst5=((1.0)*r20);
IkReal x9642=((1.0)*r11*r21);
IkReal x9643=((1.0)*r10*r20);
j10eval[0]=((((-1.0)*x9642))+(((-1.0)*x9643)));
j10eval[1]=((((-1.0)*cj9*x9643))+(((-1.0)*cj9*x9642)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9644=((-1.0)*r21);
IkReal x9645=((-1.0)*px);
CheckValue<IkReal> x9647 = IKatan2WithCheck(IkReal(x9644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9647.valid){
continue;
}
IkReal x9646=((1.0)*(x9647.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9646)));
sj6=0;
cj6=1.0;
j6=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9645);
rxp1_1=(px*r21);
rxp1_2=(r11*x9645);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9646)));
IkReal gconst4=x9644;
IkReal gconst5=((1.0)*r20);
IkReal x9648=((1.0)*sj9);
j10eval[0]=r02;
j10eval[1]=sj9;
j10eval[2]=(((r11*r21*x9648))+((r10*r20*x9648)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9649=((1.0)*gconst4);
CheckValue<IkReal> x9650=IKPowWithIntegerCheck(r02,-1);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(sj9,-1);
if(!x9651.valid){
continue;
}
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(((((-1.0)*r11*sj9*x9649))+((gconst5*r10*sj9))),-1);
if(!x9652.valid){
continue;
}
if( IKabs(((x9650.value)*(x9651.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9652.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9650.value)*(x9651.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x9652.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9649))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9650.value)*(x9651.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x9652.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9649))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9653=IKsin(j10);
IkReal x9654=IKcos(j10);
IkReal x9655=(gconst4*sj9);
IkReal x9656=(gconst4*r21);
IkReal x9657=(gconst5*sj9);
IkReal x9658=(sj7*sj8);
IkReal x9659=(cj9*gconst4);
IkReal x9660=((1.0)*cj7);
IkReal x9661=(gconst5*r10);
IkReal x9662=(cj9*gconst5);
IkReal x9663=(gconst4*r11);
IkReal x9664=(gconst5*r20);
IkReal x9665=((1.0)*cj8*sj7);
IkReal x9666=(sj8*x9660);
IkReal x9667=(cj9*x9654);
IkReal x9668=((1.0)*x9653);
IkReal x9669=((1.0)*x9654);
IkReal x9670=(x9666+x9665);
evalcond[0]=((-1.0)*r02*x9654);
evalcond[1]=((((-1.0)*x9664*x9668))+((x9653*x9656)));
evalcond[2]=((1.0)+(((-1.0)*x9661*x9668))+((x9653*x9663)));
evalcond[3]=(((cj7*cj8))+(((-1.0)*x9658))+(((-1.0)*r02*sj9*x9668)));
evalcond[4]=((((-1.0)*x9670))+((cj9*r02*x9653)));
evalcond[5]=(((r11*x9662))+(((-1.0)*r11*x9655*x9669))+((r10*x9659))+((r10*x9654*x9657)));
evalcond[6]=(((r11*x9657))+((r10*x9655))+(((-1.0)*x9661*x9667))+((r11*x9654*x9659)));
evalcond[7]=((((-1.0)*cj8*x9660))+((r21*x9657))+((r20*x9655))+x9658+((x9656*x9667))+(((-1.0)*r20*x9662*x9669)));
evalcond[8]=((((-1.0)*x9670))+((r21*x9662))+((r20*x9659))+(((-1.0)*r21*x9655*x9669))+((r20*x9654*x9657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9671=(gconst4*r11);
IkReal x9672=((1.0)*sj9);
IkReal x9673=((1.0)*gconst5*r10);
CheckValue<IkReal> x9674=IKPowWithIntegerCheck(((((-1.0)*x9673))+x9671),-1);
if(!x9674.valid){
continue;
}
CheckValue<IkReal> x9675=IKPowWithIntegerCheck((((cj9*x9671))+(((-1.0)*cj9*x9673))),-1);
if(!x9675.valid){
continue;
}
if( IKabs(((-1.0)*(x9674.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9675.value)*(((((-1.0)*gconst5*r11*x9672))+(((-1.0)*gconst4*r10*x9672)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9674.value)))+IKsqr(((x9675.value)*(((((-1.0)*gconst5*r11*x9672))+(((-1.0)*gconst4*r10*x9672))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x9674.value)), ((x9675.value)*(((((-1.0)*gconst5*r11*x9672))+(((-1.0)*gconst4*r10*x9672))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9676=IKsin(j10);
IkReal x9677=IKcos(j10);
IkReal x9678=(gconst4*sj9);
IkReal x9679=(gconst4*r21);
IkReal x9680=(gconst5*sj9);
IkReal x9681=(sj7*sj8);
IkReal x9682=(cj9*gconst4);
IkReal x9683=((1.0)*cj7);
IkReal x9684=(gconst5*r10);
IkReal x9685=(cj9*gconst5);
IkReal x9686=(gconst4*r11);
IkReal x9687=(gconst5*r20);
IkReal x9688=((1.0)*cj8*sj7);
IkReal x9689=(sj8*x9683);
IkReal x9690=(cj9*x9677);
IkReal x9691=((1.0)*x9676);
IkReal x9692=((1.0)*x9677);
IkReal x9693=(x9689+x9688);
evalcond[0]=((-1.0)*r02*x9677);
evalcond[1]=((((-1.0)*x9687*x9691))+((x9676*x9679)));
evalcond[2]=((1.0)+((x9676*x9686))+(((-1.0)*x9684*x9691)));
evalcond[3]=((((-1.0)*x9681))+((cj7*cj8))+(((-1.0)*r02*sj9*x9691)));
evalcond[4]=(((cj9*r02*x9676))+(((-1.0)*x9693)));
evalcond[5]=(((r10*x9677*x9680))+(((-1.0)*r11*x9678*x9692))+((r11*x9685))+((r10*x9682)));
evalcond[6]=(((r10*x9678))+(((-1.0)*x9684*x9690))+((r11*x9680))+((r11*x9677*x9682)));
evalcond[7]=(((x9679*x9690))+((r20*x9678))+(((-1.0)*r20*x9685*x9692))+((r21*x9680))+x9681+(((-1.0)*cj8*x9683)));
evalcond[8]=((((-1.0)*r21*x9678*x9692))+((r20*x9677*x9680))+((r21*x9685))+(((-1.0)*x9693))+((r20*x9682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9694=((1.0)*gconst4);
IkReal x9695=(gconst5*r10);
CheckValue<IkReal> x9696=IKPowWithIntegerCheck(((((-1.0)*x9695))+((gconst4*r11))),-1);
if(!x9696.valid){
continue;
}
CheckValue<IkReal> x9697=IKPowWithIntegerCheck(((((-1.0)*r11*sj9*x9694))+((sj9*x9695))),-1);
if(!x9697.valid){
continue;
}
if( IKabs(((-1.0)*(x9696.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9697.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9694)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9696.value)))+IKsqr(((x9697.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9694))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x9696.value)), ((x9697.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9694))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9698=IKsin(j10);
IkReal x9699=IKcos(j10);
IkReal x9700=(gconst4*sj9);
IkReal x9701=(gconst4*r21);
IkReal x9702=(gconst5*sj9);
IkReal x9703=(sj7*sj8);
IkReal x9704=(cj9*gconst4);
IkReal x9705=((1.0)*cj7);
IkReal x9706=(gconst5*r10);
IkReal x9707=(cj9*gconst5);
IkReal x9708=(gconst4*r11);
IkReal x9709=(gconst5*r20);
IkReal x9710=((1.0)*cj8*sj7);
IkReal x9711=(sj8*x9705);
IkReal x9712=(cj9*x9699);
IkReal x9713=((1.0)*x9698);
IkReal x9714=((1.0)*x9699);
IkReal x9715=(x9711+x9710);
evalcond[0]=((-1.0)*r02*x9699);
evalcond[1]=((((-1.0)*x9709*x9713))+((x9698*x9701)));
evalcond[2]=((1.0)+((x9698*x9708))+(((-1.0)*x9706*x9713)));
evalcond[3]=((((-1.0)*x9703))+((cj7*cj8))+(((-1.0)*r02*sj9*x9713)));
evalcond[4]=(((cj9*r02*x9698))+(((-1.0)*x9715)));
evalcond[5]=(((r10*x9704))+((r11*x9707))+((r10*x9699*x9702))+(((-1.0)*r11*x9700*x9714)));
evalcond[6]=(((r10*x9700))+((r11*x9702))+((r11*x9699*x9704))+(((-1.0)*x9706*x9712)));
evalcond[7]=(((x9701*x9712))+((r20*x9700))+(((-1.0)*cj8*x9705))+((r21*x9702))+x9703+(((-1.0)*r20*x9707*x9714)));
evalcond[8]=(((r20*x9699*x9702))+((r20*x9704))+((r21*x9707))+(((-1.0)*x9715))+(((-1.0)*r21*x9700*x9714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9716=gconst4*gconst4;
IkReal x9717=gconst5*gconst5;
IkReal x9718=(r22*sj9);
IkReal x9719=(gconst5*r11);
IkReal x9720=(gconst4*r10);
IkReal x9721=((1.0)*cj9);
IkReal x9722=((1.0)*sj9);
IkReal x9723=(r21*x9716);
IkReal x9724=(r20*x9717);
CheckValue<IkReal> x9725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9721*x9723))+((cj9*gconst5*r21*x9720))+(((-1.0)*r12*r22*x9721))+(((-1.0)*r10*x9721*x9724))+((cj9*gconst4*r20*x9719)))),-1);
if(!x9725.valid){
continue;
}
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal((((x9718*x9719))+((x9718*x9720)))),IkReal(((((-1.0)*gconst5*r20*x9720*x9722))+((gconst4*r21*sj9*x9719))+((r10*sj9*x9723))+(((-1.0)*r11*x9722*x9724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9725.value)))+(x9726.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9727=IKsin(j10);
IkReal x9728=IKcos(j10);
IkReal x9729=(gconst4*sj9);
IkReal x9730=(gconst4*r21);
IkReal x9731=((1.0)*gconst5);
IkReal x9732=(gconst5*sj9);
IkReal x9733=(sj7*sj8);
IkReal x9734=(cj9*gconst4);
IkReal x9735=((1.0)*cj7);
IkReal x9736=(gconst4*r11);
IkReal x9737=(gconst4*r01);
IkReal x9738=(cj9*gconst5);
IkReal x9739=((1.0)*cj8*sj7);
IkReal x9740=(sj8*x9735);
IkReal x9741=(cj9*x9728);
IkReal x9742=((1.0)*x9728);
IkReal x9743=(cj9*x9727);
IkReal x9744=((1.0)*sj9*x9727);
IkReal x9745=(x9739+x9740);
evalcond[0]=((((-1.0)*r20*x9727*x9731))+(((-1.0)*r22*x9742))+((x9727*x9730)));
evalcond[1]=((((-1.0)*r02*x9742))+(((-1.0)*r00*x9727*x9731))+((x9727*x9737)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9727*x9731))+((x9727*x9736))+(((-1.0)*r12*x9742)));
evalcond[3]=((((-1.0)*r10*x9731*x9741))+((r11*x9732))+((r11*x9728*x9734))+((r10*x9729))+((r12*x9743)));
evalcond[4]=(((r11*x9738))+((r10*x9728*x9732))+(((-1.0)*r11*x9729*x9742))+((r10*x9734))+(((-1.0)*r12*x9744)));
evalcond[5]=((((-1.0)*cj8*x9735))+((x9730*x9741))+((r22*x9743))+(((-1.0)*r20*x9731*x9741))+x9733+((r20*x9729))+((r21*x9732)));
evalcond[6]=((((-1.0)*r02*x9744))+((cj7*cj8))+((r00*x9728*x9732))+(((-1.0)*r01*x9729*x9742))+((r01*x9738))+(((-1.0)*x9733))+((r00*x9734)));
evalcond[7]=(((r02*x9743))+((r01*x9728*x9734))+(((-1.0)*x9745))+((r00*x9729))+((r01*x9732))+(((-1.0)*r00*x9731*x9741)));
evalcond[8]=(((r20*x9734))+(((-1.0)*r21*x9729*x9742))+(((-1.0)*x9745))+(((-1.0)*r22*x9744))+((r20*x9728*x9732))+((r21*x9738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9746=gconst4*gconst4;
IkReal x9747=gconst5*gconst5;
IkReal x9748=(cj9*gconst4);
IkReal x9749=(cj9*r11);
IkReal x9750=(r11*r21);
IkReal x9751=(r10*sj9);
IkReal x9752=(r20*x9747);
IkReal x9753=((1.0)*gconst5*r20);
CheckValue<IkReal> x9754=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*gconst5*r21*x9751))+((x9751*x9752))+((sj9*x9746*x9750))+(((-1.0)*gconst4*r11*sj9*x9753))+((r12*r22*sj9)))),-1);
if(!x9754.valid){
continue;
}
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal((((r10*r22*x9748))+((gconst5*r22*x9749)))),IkReal((((cj9*r10*r21*x9746))+(((-1.0)*r10*x9748*x9753))+((gconst5*x9748*x9750))+(((-1.0)*x9749*x9752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9754.value)))+(x9755.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9756=IKsin(j10);
IkReal x9757=IKcos(j10);
IkReal x9758=(gconst4*sj9);
IkReal x9759=(gconst4*r21);
IkReal x9760=((1.0)*gconst5);
IkReal x9761=(gconst5*sj9);
IkReal x9762=(sj7*sj8);
IkReal x9763=(cj9*gconst4);
IkReal x9764=((1.0)*cj7);
IkReal x9765=(gconst4*r11);
IkReal x9766=(gconst4*r01);
IkReal x9767=(cj9*gconst5);
IkReal x9768=((1.0)*cj8*sj7);
IkReal x9769=(sj8*x9764);
IkReal x9770=(cj9*x9757);
IkReal x9771=((1.0)*x9757);
IkReal x9772=(cj9*x9756);
IkReal x9773=((1.0)*sj9*x9756);
IkReal x9774=(x9768+x9769);
evalcond[0]=((((-1.0)*r22*x9771))+(((-1.0)*r20*x9756*x9760))+((x9756*x9759)));
evalcond[1]=((((-1.0)*r02*x9771))+(((-1.0)*r00*x9756*x9760))+((x9756*x9766)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9756*x9760))+(((-1.0)*r12*x9771))+((x9756*x9765)));
evalcond[3]=(((r12*x9772))+((r10*x9758))+(((-1.0)*r10*x9760*x9770))+((r11*x9757*x9763))+((r11*x9761)));
evalcond[4]=(((r10*x9763))+((r10*x9757*x9761))+(((-1.0)*r12*x9773))+((r11*x9767))+(((-1.0)*r11*x9758*x9771)));
evalcond[5]=((((-1.0)*r20*x9760*x9770))+((r22*x9772))+(((-1.0)*cj8*x9764))+x9762+((r21*x9761))+((x9759*x9770))+((r20*x9758)));
evalcond[6]=((((-1.0)*x9762))+((r00*x9763))+((r01*x9767))+(((-1.0)*r01*x9758*x9771))+(((-1.0)*r02*x9773))+((cj7*cj8))+((r00*x9757*x9761)));
evalcond[7]=(((r00*x9758))+((r01*x9757*x9763))+((r01*x9761))+(((-1.0)*r00*x9760*x9770))+((r02*x9772))+(((-1.0)*x9774)));
evalcond[8]=((((-1.0)*r21*x9758*x9771))+((r20*x9757*x9761))+(((-1.0)*r22*x9773))+((r21*x9767))+((r20*x9763))+(((-1.0)*x9774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9775=((1.0)*gconst5);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9775)))),-1);
if(!x9776.valid){
continue;
}
CheckValue<IkReal> x9777 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x9775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9777.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9776.value)))+(x9777.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9778=IKsin(j10);
IkReal x9779=IKcos(j10);
IkReal x9780=(gconst4*sj9);
IkReal x9781=(gconst4*r21);
IkReal x9782=((1.0)*gconst5);
IkReal x9783=(gconst5*sj9);
IkReal x9784=(sj7*sj8);
IkReal x9785=(cj9*gconst4);
IkReal x9786=((1.0)*cj7);
IkReal x9787=(gconst4*r11);
IkReal x9788=(gconst4*r01);
IkReal x9789=(cj9*gconst5);
IkReal x9790=((1.0)*cj8*sj7);
IkReal x9791=(sj8*x9786);
IkReal x9792=(cj9*x9779);
IkReal x9793=((1.0)*x9779);
IkReal x9794=(cj9*x9778);
IkReal x9795=((1.0)*sj9*x9778);
IkReal x9796=(x9791+x9790);
evalcond[0]=((((-1.0)*r20*x9778*x9782))+((x9778*x9781))+(((-1.0)*r22*x9793)));
evalcond[1]=(((x9778*x9788))+(((-1.0)*r02*x9793))+(((-1.0)*r00*x9778*x9782)));
evalcond[2]=((1.0)+((x9778*x9787))+(((-1.0)*r12*x9793))+(((-1.0)*r10*x9778*x9782)));
evalcond[3]=(((r12*x9794))+(((-1.0)*r10*x9782*x9792))+((r11*x9779*x9785))+((r10*x9780))+((r11*x9783)));
evalcond[4]=(((r10*x9779*x9783))+(((-1.0)*r12*x9795))+((r10*x9785))+((r11*x9789))+(((-1.0)*r11*x9780*x9793)));
evalcond[5]=(((r21*x9783))+x9784+(((-1.0)*cj8*x9786))+((r20*x9780))+((r22*x9794))+((x9781*x9792))+(((-1.0)*r20*x9782*x9792)));
evalcond[6]=(((r00*x9785))+((r00*x9779*x9783))+((r01*x9789))+(((-1.0)*r02*x9795))+(((-1.0)*r01*x9780*x9793))+((cj7*cj8))+(((-1.0)*x9784)));
evalcond[7]=(((r00*x9780))+((r02*x9794))+((r01*x9783))+((r01*x9779*x9785))+(((-1.0)*r00*x9782*x9792))+(((-1.0)*x9796)));
evalcond[8]=(((r20*x9779*x9783))+(((-1.0)*r21*x9780*x9793))+((r21*x9789))+(((-1.0)*x9796))+((r20*x9785))+(((-1.0)*r22*x9795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9797=((-1.0)*r21);
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(x9797),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
IkReal x9798=((1.0)*(x9800.value));
IkReal x9799=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9798)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9798)));
IkReal gconst4=(x9797*x9799);
IkReal gconst5=((1.0)*r20*x9799);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9801=((-1.0)*r21);
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(x9801),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
IkReal x9802=((1.0)*(x9804.value));
IkReal x9803=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9802)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9802)));
IkReal gconst4=(x9801*x9803);
IkReal gconst5=((1.0)*r20*x9803);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9805=((-1.0)*r21);
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal(x9805),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
IkReal x9806=((1.0)*(x9808.value));
IkReal x9807=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9806)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9806)));
IkReal gconst4=(x9805*x9807);
IkReal gconst5=((1.0)*r20*x9807);
j10eval[0]=r02;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9809=((-1.0)*r21);
CheckValue<IkReal> x9812 = IKatan2WithCheck(IkReal(x9809),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9812.valid){
continue;
}
IkReal x9810=((1.0)*(x9812.value));
IkReal x9811=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9810)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9810)));
IkReal gconst4=(x9809*x9811);
IkReal gconst5=((1.0)*r20*x9811);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9813=((-1.0)*r21);
CheckValue<IkReal> x9816 = IKatan2WithCheck(IkReal(x9813),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9816.valid){
continue;
}
IkReal x9814=((1.0)*(x9816.value));
IkReal x9815=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9814)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9814)));
IkReal gconst4=(x9813*x9815);
IkReal gconst5=((1.0)*r20*x9815);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9817=((-1.0)*r21);
CheckValue<IkReal> x9820 = IKatan2WithCheck(IkReal(x9817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9820.valid){
continue;
}
IkReal x9818=((1.0)*(x9820.value));
IkReal x9819=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9818)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9818)));
IkReal gconst4=(x9817*x9819);
IkReal gconst5=((1.0)*r20*x9819);
IkReal x9821=r22*r22;
IkReal x9822=(cj7*cj8*r12);
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(((-1.0)+x9821),-1);
if(!x9827.valid){
continue;
}
IkReal x9823=x9827.value;
IkReal x9824=((1.0)*r12*sj7*sj8);
if((((1.0)+(((-1.0)*x9821)))) < -0.00001)
continue;
IkReal x9825=IKsqrt(((1.0)+(((-1.0)*x9821))));
IkReal x9826=(r22*x9823*x9825);
j10eval[0]=((IKabs(((((-1.0)*x9824))+x9822)))+(IKabs(((((-1.0)*x9824*x9826))+((x9822*x9826))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9828=((1.0)*gconst4);
IkReal x9829=(cj7*cj8);
IkReal x9830=(gconst5*r10);
IkReal x9831=((1.0)*sj7*sj8);
CheckValue<IkReal> x9832 = IKatan2WithCheck(IkReal((((x9829*x9830))+(((-1.0)*x9830*x9831))+(((-1.0)*r11*x9828*x9829))+((gconst4*r11*sj7*sj8)))),IkReal((((r12*x9829))+(((-1.0)*r12*x9831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9832.valid){
continue;
}
CheckValue<IkReal> x9833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9828))+(((-1.0)*gconst5*r01)))),-1);
if(!x9833.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9832.value)+(((1.5707963267949)*(x9833.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9834=IKcos(j10);
IkReal x9835=IKsin(j10);
IkReal x9836=(gconst5*r20);
IkReal x9837=(gconst5*r00);
IkReal x9838=(gconst4*x9835);
IkReal x9839=((1.0)*gconst5*r10);
IkReal x9840=((1.0)*x9834);
IkReal x9841=(gconst4*x9834);
IkReal x9842=((1.0)*x9835);
evalcond[0]=(((r11*x9841))+(((-1.0)*x9834*x9839))+((r12*x9835)));
evalcond[1]=(((r21*x9838))+(((-1.0)*r22*x9840))+(((-1.0)*x9836*x9842)));
evalcond[2]=(((r01*x9838))+(((-1.0)*r02*x9840))+(((-1.0)*x9837*x9842)));
evalcond[3]=((-1.0)+((r11*x9838))+(((-1.0)*r12*x9840))+(((-1.0)*x9835*x9839)));
evalcond[4]=(((cj8*sj7))+((r01*x9841))+((r02*x9835))+(((-1.0)*x9837*x9840))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r22*x9835))+(((-1.0)*x9836*x9840))+((sj7*sj8))+((r21*x9841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9843=(gconst5*r10);
IkReal x9844=(gconst4*r11);
CheckValue<IkReal> x9845=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9843*x9843)+(((-2.0)*x9843*x9844))+(x9844*x9844))),-1);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal(((((-1.0)*x9843))+x9844)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9845.value)))+(x9846.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9847=IKcos(j10);
IkReal x9848=IKsin(j10);
IkReal x9849=(gconst5*r20);
IkReal x9850=(gconst5*r00);
IkReal x9851=(gconst4*x9848);
IkReal x9852=((1.0)*gconst5*r10);
IkReal x9853=((1.0)*x9847);
IkReal x9854=(gconst4*x9847);
IkReal x9855=((1.0)*x9848);
evalcond[0]=(((r11*x9854))+(((-1.0)*x9847*x9852))+((r12*x9848)));
evalcond[1]=(((r21*x9851))+(((-1.0)*x9849*x9855))+(((-1.0)*r22*x9853)));
evalcond[2]=((((-1.0)*r02*x9853))+(((-1.0)*x9850*x9855))+((r01*x9851)));
evalcond[3]=((-1.0)+((r11*x9851))+(((-1.0)*x9848*x9852))+(((-1.0)*r12*x9853)));
evalcond[4]=(((r02*x9848))+((cj8*sj7))+(((-1.0)*x9850*x9853))+((r01*x9854))+((cj7*sj8)));
evalcond[5]=(((r21*x9854))+(((-1.0)*cj7*cj8))+(((-1.0)*x9849*x9853))+((sj7*sj8))+((r22*x9848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9856=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9856.valid){
continue;
}
CheckValue<IkReal> x9857 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9857.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9856.value)))+(x9857.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9858=IKcos(j10);
IkReal x9859=IKsin(j10);
IkReal x9860=(gconst5*r20);
IkReal x9861=(gconst5*r00);
IkReal x9862=(gconst4*x9859);
IkReal x9863=((1.0)*gconst5*r10);
IkReal x9864=((1.0)*x9858);
IkReal x9865=(gconst4*x9858);
IkReal x9866=((1.0)*x9859);
evalcond[0]=((((-1.0)*x9858*x9863))+((r11*x9865))+((r12*x9859)));
evalcond[1]=((((-1.0)*r22*x9864))+(((-1.0)*x9860*x9866))+((r21*x9862)));
evalcond[2]=(((r01*x9862))+(((-1.0)*x9861*x9866))+(((-1.0)*r02*x9864)));
evalcond[3]=((-1.0)+(((-1.0)*x9859*x9863))+(((-1.0)*r12*x9864))+((r11*x9862)));
evalcond[4]=(((cj8*sj7))+((r02*x9859))+((r01*x9865))+(((-1.0)*x9861*x9864))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x9860*x9864))+((r21*x9865))+((sj7*sj8))+((r22*x9859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x9867=((-1.0)*r21);
CheckValue<IkReal> x9870 = IKatan2WithCheck(IkReal(x9867),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9870.valid){
continue;
}
IkReal x9868=((1.0)*(x9870.value));
IkReal x9869=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9868)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9868)));
IkReal gconst4=(x9867*x9869);
IkReal gconst5=((1.0)*r20*x9869);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x9871=((-1.0)*r21);
CheckValue<IkReal> x9874 = IKatan2WithCheck(IkReal(x9871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9874.valid){
continue;
}
IkReal x9872=((1.0)*(x9874.value));
IkReal x9873=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9872)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9872)));
IkReal gconst4=(x9871*x9873);
IkReal gconst5=((1.0)*r20*x9873);
IkReal x9875=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9879=IKPowWithIntegerCheck(x9875,-1);
if(!x9879.valid){
continue;
}
IkReal x9876=x9879.value;
IkReal x9877=((1.0)*x9876);
IkReal x9878=((((-2.0)*r10*r11*r20*r21*x9876))+(((-1.0)*x9877*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9877*(r10*r10)*(r20*r20))));
j10eval[0]=x9878;
j10eval[1]=r12;
j10eval[2]=x9875;
j10eval[3]=IKsign(x9878);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x9880=((-1.0)*r21);
CheckValue<IkReal> x9883 = IKatan2WithCheck(IkReal(x9880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9883.valid){
continue;
}
IkReal x9881=((1.0)*(x9883.value));
IkReal x9882=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9881)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst4=(x9880*x9882);
IkReal gconst5=((1.0)*r20*x9882);
IkReal x9884=r22*r22;
IkReal x9885=(cj7*r02*sj8);
IkReal x9886=(cj8*r02*sj7);
CheckValue<IkReal> x9890=IKPowWithIntegerCheck(((-1.0)+x9884),-1);
if(!x9890.valid){
continue;
}
IkReal x9887=x9890.value;
if((((1.0)+(((-1.0)*x9884)))) < -0.00001)
continue;
IkReal x9888=IKsqrt(((1.0)+(((-1.0)*x9884))));
IkReal x9889=((1.0)*r22*x9887*x9888);
j10eval[0]=((IKabs(((((-1.0)*x9885*x9889))+(((-1.0)*x9886*x9889)))))+(IKabs((x9886+x9885))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9891=(gconst4*r01);
IkReal x9892=(cj7*sj8);
IkReal x9893=(gconst5*r00);
IkReal x9894=(cj8*sj7);
CheckValue<IkReal> x9895 = IKatan2WithCheck(IkReal((((r02*x9894))+((r02*x9892)))),IkReal(((((-1.0)*x9892*x9893))+(((-1.0)*x9893*x9894))+((x9891*x9892))+((x9891*x9894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9895.valid){
continue;
}
CheckValue<IkReal> x9896=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9891*x9893))+(x9893*x9893)+(x9891*x9891)+(r02*r02))),-1);
if(!x9896.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9895.value)+(((1.5707963267949)*(x9896.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9897=IKsin(j10);
IkReal x9898=IKcos(j10);
IkReal x9899=(gconst4*r21);
IkReal x9900=(gconst4*r11);
IkReal x9901=(gconst4*r01);
IkReal x9902=((1.0)*x9898);
IkReal x9903=(gconst5*x9898);
IkReal x9904=((1.0)*x9897);
evalcond[0]=((((-1.0)*r22*x9902))+(((-1.0)*gconst5*r20*x9904))+((x9897*x9899)));
evalcond[1]=((((-1.0)*gconst5*r00*x9904))+(((-1.0)*r02*x9902))+((x9897*x9901)));
evalcond[2]=((((-1.0)*r12*x9904))+((r10*x9903))+(((-1.0)*x9900*x9902)));
evalcond[3]=((-1.0)+(((-1.0)*gconst5*r10*x9904))+(((-1.0)*r12*x9902))+((x9897*x9900)));
evalcond[4]=((((-1.0)*x9901*x9902))+((cj8*sj7))+((r00*x9903))+(((-1.0)*r02*x9904))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+((r20*x9903))+(((-1.0)*r22*x9904))+(((-1.0)*x9899*x9902))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9905=(gconst5*r10);
IkReal x9906=(gconst4*r11);
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(((((-1.0)*x9906))+x9905)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9905*x9905)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9906*x9906)))+(((2.0)*x9905*x9906)))),-1);
if(!x9908.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9907.value)+(((1.5707963267949)*(x9908.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9909=IKsin(j10);
IkReal x9910=IKcos(j10);
IkReal x9911=(gconst4*r21);
IkReal x9912=(gconst4*r11);
IkReal x9913=(gconst4*r01);
IkReal x9914=((1.0)*x9910);
IkReal x9915=(gconst5*x9910);
IkReal x9916=((1.0)*x9909);
evalcond[0]=((((-1.0)*r22*x9914))+(((-1.0)*gconst5*r20*x9916))+((x9909*x9911)));
evalcond[1]=((((-1.0)*r02*x9914))+(((-1.0)*gconst5*r00*x9916))+((x9909*x9913)));
evalcond[2]=((((-1.0)*r12*x9916))+(((-1.0)*x9912*x9914))+((r10*x9915)));
evalcond[3]=((-1.0)+(((-1.0)*gconst5*r10*x9916))+(((-1.0)*r12*x9914))+((x9909*x9912)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x9913*x9914))+((r00*x9915))+(((-1.0)*r02*x9916))+((cj7*sj8)));
evalcond[5]=(((r20*x9915))+(((-1.0)*cj7*cj8))+(((-1.0)*r22*x9916))+((sj7*sj8))+(((-1.0)*x9911*x9914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9917=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9917.valid){
continue;
}
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9917.value)))+(x9918.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9919=IKsin(j10);
IkReal x9920=IKcos(j10);
IkReal x9921=(gconst4*r21);
IkReal x9922=(gconst4*r11);
IkReal x9923=(gconst4*r01);
IkReal x9924=((1.0)*x9920);
IkReal x9925=(gconst5*x9920);
IkReal x9926=((1.0)*x9919);
evalcond[0]=((((-1.0)*gconst5*r20*x9926))+(((-1.0)*r22*x9924))+((x9919*x9921)));
evalcond[1]=((((-1.0)*r02*x9924))+(((-1.0)*gconst5*r00*x9926))+((x9919*x9923)));
evalcond[2]=(((r10*x9925))+(((-1.0)*r12*x9926))+(((-1.0)*x9922*x9924)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9924))+((x9919*x9922))+(((-1.0)*gconst5*r10*x9926)));
evalcond[4]=((((-1.0)*r02*x9926))+((cj8*sj7))+((cj7*sj8))+(((-1.0)*x9923*x9924))+((r00*x9925)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x9921*x9924))+((r20*x9925))+(((-1.0)*r22*x9926))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x9927=((-1.0)*r21);
IkReal x9928=((-1.0)*px);
CheckValue<IkReal> x9930 = IKatan2WithCheck(IkReal(x9927),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9930.valid){
continue;
}
IkReal x9929=((1.0)*(x9930.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9929)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9928);
rxp1_1=(px*r21);
rxp1_2=(r11*x9928);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9929)));
IkReal gconst4=x9927;
IkReal gconst5=((1.0)*r20);
IkReal x9931=((1.0)*r11*r21);
IkReal x9932=((1.0)*r10*r20);
j10eval[0]=((((-1.0)*x9931))+(((-1.0)*x9932)));
j10eval[1]=(((sj9*x9931))+((sj9*x9932)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x9933=((-1.0)*r21);
IkReal x9934=((-1.0)*px);
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(x9933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
IkReal x9935=((1.0)*(x9936.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9935)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9934);
rxp1_1=(px*r21);
rxp1_2=(r11*x9934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9935)));
IkReal gconst4=x9933;
IkReal gconst5=((1.0)*r20);
IkReal x9937=((1.0)*r11*r21);
IkReal x9938=((1.0)*r10*r20);
j10eval[0]=((((-1.0)*x9938))+(((-1.0)*x9937)));
j10eval[1]=((((-1.0)*cj9*x9937))+(((-1.0)*cj9*x9938)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x9939=((-1.0)*r21);
IkReal x9940=((-1.0)*px);
CheckValue<IkReal> x9942 = IKatan2WithCheck(IkReal(x9939),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9942.valid){
continue;
}
IkReal x9941=((1.0)*(x9942.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x9941)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9940);
rxp1_1=(px*r21);
rxp1_2=(r11*x9940);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9941)));
IkReal gconst4=x9939;
IkReal gconst5=((1.0)*r20);
IkReal x9943=((1.0)*sj9);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=(((r11*r21*x9943))+((r10*r20*x9943)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9944=((1.0)*gconst4);
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(cj9,-1);
if(!x9945.valid){
continue;
}
CheckValue<IkReal> x9946=IKPowWithIntegerCheck(r02,-1);
if(!x9946.valid){
continue;
}
CheckValue<IkReal> x9947=IKPowWithIntegerCheck(((((-1.0)*r11*sj9*x9944))+((gconst5*r10*sj9))),-1);
if(!x9947.valid){
continue;
}
if( IKabs(((x9945.value)*(x9946.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9947.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9944)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9945.value)*(x9946.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))))+IKsqr(((x9947.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9944))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9945.value)*(x9946.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))), ((x9947.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9944))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9948=IKsin(j10);
IkReal x9949=IKcos(j10);
IkReal x9950=(sj7*sj8);
IkReal x9951=(gconst4*sj9);
IkReal x9952=(gconst4*r21);
IkReal x9953=(gconst5*sj9);
IkReal x9954=(cj9*gconst4);
IkReal x9955=(cj7*sj8);
IkReal x9956=(gconst5*r10);
IkReal x9957=(cj9*gconst5);
IkReal x9958=((1.0)*cj8);
IkReal x9959=(gconst4*r11);
IkReal x9960=(gconst5*r20);
IkReal x9961=(cj7*x9958);
IkReal x9962=(cj9*x9949);
IkReal x9963=((1.0)*x9948);
IkReal x9964=((1.0)*x9949);
evalcond[0]=((-1.0)*r02*x9949);
evalcond[1]=(((cj8*sj7))+((cj9*r02*x9948))+x9955);
evalcond[2]=((((-1.0)*x9960*x9963))+((x9948*x9952)));
evalcond[3]=((-1.0)+(((-1.0)*x9956*x9963))+((x9948*x9959)));
evalcond[4]=((((-1.0)*x9961))+(((-1.0)*r02*sj9*x9963))+x9950);
evalcond[5]=((((-1.0)*r11*x9951*x9964))+((r11*x9957))+((r10*x9954))+((r10*x9949*x9953)));
evalcond[6]=((((-1.0)*x9956*x9962))+((r11*x9953))+((r11*x9949*x9954))+((r10*x9951)));
evalcond[7]=((((-1.0)*x9961))+(((-1.0)*r20*x9957*x9964))+((r20*x9951))+x9950+((x9952*x9962))+((r21*x9953)));
evalcond[8]=(((r20*x9954))+(((-1.0)*x9955))+(((-1.0)*sj7*x9958))+((r20*x9949*x9953))+((r21*x9957))+(((-1.0)*r21*x9951*x9964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9965=(gconst4*r11);
IkReal x9966=((1.0)*sj9);
IkReal x9967=((1.0)*gconst5*r10);
CheckValue<IkReal> x9968=IKPowWithIntegerCheck(((((-1.0)*x9967))+x9965),-1);
if(!x9968.valid){
continue;
}
CheckValue<IkReal> x9969=IKPowWithIntegerCheck((((cj9*x9965))+(((-1.0)*cj9*x9967))),-1);
if(!x9969.valid){
continue;
}
if( IKabs(x9968.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9969.value)*(((((-1.0)*gconst5*r11*x9966))+(((-1.0)*gconst4*r10*x9966)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9968.value)+IKsqr(((x9969.value)*(((((-1.0)*gconst5*r11*x9966))+(((-1.0)*gconst4*r10*x9966))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x9968.value, ((x9969.value)*(((((-1.0)*gconst5*r11*x9966))+(((-1.0)*gconst4*r10*x9966))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9970=IKsin(j10);
IkReal x9971=IKcos(j10);
IkReal x9972=(sj7*sj8);
IkReal x9973=(gconst4*sj9);
IkReal x9974=(gconst4*r21);
IkReal x9975=(gconst5*sj9);
IkReal x9976=(cj9*gconst4);
IkReal x9977=(cj7*sj8);
IkReal x9978=(gconst5*r10);
IkReal x9979=(cj9*gconst5);
IkReal x9980=((1.0)*cj8);
IkReal x9981=(gconst4*r11);
IkReal x9982=(gconst5*r20);
IkReal x9983=(cj7*x9980);
IkReal x9984=(cj9*x9971);
IkReal x9985=((1.0)*x9970);
IkReal x9986=((1.0)*x9971);
evalcond[0]=((-1.0)*r02*x9971);
evalcond[1]=(((cj8*sj7))+((cj9*r02*x9970))+x9977);
evalcond[2]=(((x9970*x9974))+(((-1.0)*x9982*x9985)));
evalcond[3]=((-1.0)+(((-1.0)*x9978*x9985))+((x9970*x9981)));
evalcond[4]=((((-1.0)*r02*sj9*x9985))+x9972+(((-1.0)*x9983)));
evalcond[5]=((((-1.0)*r11*x9973*x9986))+((r10*x9971*x9975))+((r11*x9979))+((r10*x9976)));
evalcond[6]=(((r11*x9975))+(((-1.0)*x9978*x9984))+((r10*x9973))+((r11*x9971*x9976)));
evalcond[7]=((((-1.0)*r20*x9979*x9986))+((r20*x9973))+((x9974*x9984))+((r21*x9975))+x9972+(((-1.0)*x9983)));
evalcond[8]=((((-1.0)*sj7*x9980))+(((-1.0)*x9977))+(((-1.0)*r21*x9973*x9986))+((r20*x9971*x9975))+((r20*x9976))+((r21*x9979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9987=((1.0)*gconst4);
IkReal x9988=(gconst5*r10);
CheckValue<IkReal> x9989=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*x9988))),-1);
if(!x9989.valid){
continue;
}
CheckValue<IkReal> x9990=IKPowWithIntegerCheck(((((-1.0)*r11*sj9*x9987))+((sj9*x9988))),-1);
if(!x9990.valid){
continue;
}
if( IKabs(x9989.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9990.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9989.value)+IKsqr(((x9990.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x9989.value, ((x9990.value)*(((((-1.0)*cj9*gconst5*r11))+(((-1.0)*cj9*r10*x9987))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x9991=IKsin(j10);
IkReal x9992=IKcos(j10);
IkReal x9993=(sj7*sj8);
IkReal x9994=(gconst4*sj9);
IkReal x9995=(gconst4*r21);
IkReal x9996=(gconst5*sj9);
IkReal x9997=(cj9*gconst4);
IkReal x9998=(cj7*sj8);
IkReal x9999=(gconst5*r10);
IkReal x10000=(cj9*gconst5);
IkReal x10001=((1.0)*cj8);
IkReal x10002=(gconst4*r11);
IkReal x10003=(gconst5*r20);
IkReal x10004=(cj7*x10001);
IkReal x10005=(cj9*x9992);
IkReal x10006=((1.0)*x9991);
IkReal x10007=((1.0)*x9992);
evalcond[0]=((-1.0)*r02*x9992);
evalcond[1]=(((cj9*r02*x9991))+((cj8*sj7))+x9998);
evalcond[2]=((((-1.0)*x10003*x10006))+((x9991*x9995)));
evalcond[3]=((-1.0)+((x10002*x9991))+(((-1.0)*x10006*x9999)));
evalcond[4]=((((-1.0)*r02*sj9*x10006))+x9993+(((-1.0)*x10004)));
evalcond[5]=((((-1.0)*r11*x10007*x9994))+((r10*x9997))+((r11*x10000))+((r10*x9992*x9996)));
evalcond[6]=(((r11*x9996))+((r10*x9994))+((r11*x9992*x9997))+(((-1.0)*x10005*x9999)));
evalcond[7]=(((x10005*x9995))+(((-1.0)*r20*x10000*x10007))+((r21*x9996))+((r20*x9994))+x9993+(((-1.0)*x10004)));
evalcond[8]=(((r20*x9992*x9996))+(((-1.0)*r21*x10007*x9994))+((r20*x9997))+(((-1.0)*x9998))+(((-1.0)*sj7*x10001))+((r21*x10000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10008=gconst4*gconst4;
IkReal x10009=gconst5*gconst5;
IkReal x10010=(r22*sj9);
IkReal x10011=(gconst5*r11);
IkReal x10012=(gconst4*r10);
IkReal x10013=((1.0)*cj9);
IkReal x10014=((1.0)*sj9);
IkReal x10015=(r21*x10008);
IkReal x10016=(r20*x10009);
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal((((x10010*x10012))+((x10010*x10011)))),IkReal((((gconst4*r21*sj9*x10011))+((r10*sj9*x10015))+(((-1.0)*r11*x10014*x10016))+(((-1.0)*gconst5*r20*x10012*x10014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(IKsign((((cj9*gconst4*r20*x10011))+(((-1.0)*r12*r22*x10013))+(((-1.0)*r11*x10013*x10015))+(((-1.0)*r10*x10013*x10016))+((cj9*gconst5*r21*x10012)))),-1);
if(!x10018.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10017.value)+(((1.5707963267949)*(x10018.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10019=IKsin(j10);
IkReal x10020=IKcos(j10);
IkReal x10021=(sj7*sj8);
IkReal x10022=(gconst4*sj9);
IkReal x10023=(gconst4*r21);
IkReal x10024=((1.0)*gconst5);
IkReal x10025=(cj9*gconst4);
IkReal x10026=(gconst5*sj9);
IkReal x10027=(cj7*sj8);
IkReal x10028=(gconst4*r11);
IkReal x10029=((1.0)*cj8);
IkReal x10030=(gconst4*r01);
IkReal x10031=(cj9*gconst5);
IkReal x10032=(cj7*x10029);
IkReal x10033=(cj9*x10020);
IkReal x10034=((1.0)*x10020);
IkReal x10035=(cj9*x10019);
IkReal x10036=((1.0)*sj9*x10019);
evalcond[0]=((((-1.0)*r22*x10034))+((x10019*x10023))+(((-1.0)*r20*x10019*x10024)));
evalcond[1]=((((-1.0)*r02*x10034))+(((-1.0)*r00*x10019*x10024))+((x10019*x10030)));
evalcond[2]=((-1.0)+((x10019*x10028))+(((-1.0)*r10*x10019*x10024))+(((-1.0)*r12*x10034)));
evalcond[3]=((((-1.0)*r10*x10024*x10033))+((r11*x10020*x10025))+((r10*x10022))+((r11*x10026))+((r12*x10035)));
evalcond[4]=((((-1.0)*r11*x10022*x10034))+((r10*x10020*x10026))+((r10*x10025))+((r11*x10031))+(((-1.0)*r12*x10036)));
evalcond[5]=(((r01*x10020*x10025))+((cj8*sj7))+((r01*x10026))+x10027+(((-1.0)*r00*x10024*x10033))+((r00*x10022))+((r02*x10035)));
evalcond[6]=(((r21*x10026))+((r20*x10022))+x10021+(((-1.0)*r20*x10024*x10033))+(((-1.0)*x10032))+((x10023*x10033))+((r22*x10035)));
evalcond[7]=((((-1.0)*r02*x10036))+((r00*x10020*x10026))+x10021+((r01*x10031))+((r00*x10025))+(((-1.0)*x10032))+(((-1.0)*r01*x10022*x10034)));
evalcond[8]=((((-1.0)*sj7*x10029))+(((-1.0)*x10027))+((r21*x10031))+((r20*x10025))+(((-1.0)*r22*x10036))+((r20*x10020*x10026))+(((-1.0)*r21*x10022*x10034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10037=gconst4*gconst4;
IkReal x10038=gconst5*gconst5;
IkReal x10039=(cj9*gconst4);
IkReal x10040=(cj9*r11);
IkReal x10041=(r11*r21);
IkReal x10042=(r10*sj9);
IkReal x10043=(r20*x10038);
IkReal x10044=((1.0)*gconst5*r20);
CheckValue<IkReal> x10045=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*gconst5*r21*x10042))+((sj9*x10037*x10041))+((r12*r22*sj9))+((x10042*x10043))+(((-1.0)*gconst4*r11*sj9*x10044)))),-1);
if(!x10045.valid){
continue;
}
CheckValue<IkReal> x10046 = IKatan2WithCheck(IkReal((((r10*r22*x10039))+((gconst5*r22*x10040)))),IkReal(((((-1.0)*x10040*x10043))+((gconst5*x10039*x10041))+(((-1.0)*r10*x10039*x10044))+((cj9*r10*r21*x10037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10046.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10045.value)))+(x10046.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10047=IKsin(j10);
IkReal x10048=IKcos(j10);
IkReal x10049=(sj7*sj8);
IkReal x10050=(gconst4*sj9);
IkReal x10051=(gconst4*r21);
IkReal x10052=((1.0)*gconst5);
IkReal x10053=(cj9*gconst4);
IkReal x10054=(gconst5*sj9);
IkReal x10055=(cj7*sj8);
IkReal x10056=(gconst4*r11);
IkReal x10057=((1.0)*cj8);
IkReal x10058=(gconst4*r01);
IkReal x10059=(cj9*gconst5);
IkReal x10060=(cj7*x10057);
IkReal x10061=(cj9*x10048);
IkReal x10062=((1.0)*x10048);
IkReal x10063=(cj9*x10047);
IkReal x10064=((1.0)*sj9*x10047);
evalcond[0]=((((-1.0)*r20*x10047*x10052))+(((-1.0)*r22*x10062))+((x10047*x10051)));
evalcond[1]=((((-1.0)*r00*x10047*x10052))+(((-1.0)*r02*x10062))+((x10047*x10058)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x10047*x10052))+(((-1.0)*r12*x10062))+((x10047*x10056)));
evalcond[3]=(((r12*x10063))+((r10*x10050))+(((-1.0)*r10*x10052*x10061))+((r11*x10048*x10053))+((r11*x10054)));
evalcond[4]=(((r10*x10053))+((r10*x10048*x10054))+(((-1.0)*r11*x10050*x10062))+(((-1.0)*r12*x10064))+((r11*x10059)));
evalcond[5]=(((cj8*sj7))+((r01*x10048*x10053))+((r01*x10054))+((r00*x10050))+((r02*x10063))+x10055+(((-1.0)*r00*x10052*x10061)));
evalcond[6]=(((r20*x10050))+(((-1.0)*r20*x10052*x10061))+(((-1.0)*x10060))+((r22*x10063))+x10049+((r21*x10054))+((x10051*x10061)));
evalcond[7]=(((r01*x10059))+(((-1.0)*r01*x10050*x10062))+(((-1.0)*x10060))+((r00*x10053))+x10049+(((-1.0)*r02*x10064))+((r00*x10048*x10054)));
evalcond[8]=((((-1.0)*r21*x10050*x10062))+((r20*x10048*x10054))+(((-1.0)*x10055))+((r20*x10053))+(((-1.0)*sj7*x10057))+((r21*x10059))+(((-1.0)*r22*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10065=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10065.valid){
continue;
}
CheckValue<IkReal> x10066 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10066.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10065.value)))+(x10066.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10067=IKsin(j10);
IkReal x10068=IKcos(j10);
IkReal x10069=(sj7*sj8);
IkReal x10070=(gconst4*sj9);
IkReal x10071=(gconst4*r21);
IkReal x10072=((1.0)*gconst5);
IkReal x10073=(cj9*gconst4);
IkReal x10074=(gconst5*sj9);
IkReal x10075=(cj7*sj8);
IkReal x10076=(gconst4*r11);
IkReal x10077=((1.0)*cj8);
IkReal x10078=(gconst4*r01);
IkReal x10079=(cj9*gconst5);
IkReal x10080=(cj7*x10077);
IkReal x10081=(cj9*x10068);
IkReal x10082=((1.0)*x10068);
IkReal x10083=(cj9*x10067);
IkReal x10084=((1.0)*sj9*x10067);
evalcond[0]=((((-1.0)*r20*x10067*x10072))+((x10067*x10071))+(((-1.0)*r22*x10082)));
evalcond[1]=(((x10067*x10078))+(((-1.0)*r00*x10067*x10072))+(((-1.0)*r02*x10082)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x10067*x10072))+((x10067*x10076))+(((-1.0)*r12*x10082)));
evalcond[3]=(((r10*x10070))+(((-1.0)*r10*x10072*x10081))+((r11*x10068*x10073))+((r11*x10074))+((r12*x10083)));
evalcond[4]=(((r10*x10073))+((r10*x10068*x10074))+(((-1.0)*r11*x10070*x10082))+(((-1.0)*r12*x10084))+((r11*x10079)));
evalcond[5]=(((r01*x10068*x10073))+(((-1.0)*r00*x10072*x10081))+((cj8*sj7))+((r00*x10070))+((r01*x10074))+x10075+((r02*x10083)));
evalcond[6]=(((x10071*x10081))+((r20*x10070))+(((-1.0)*r20*x10072*x10081))+(((-1.0)*x10080))+x10069+((r21*x10074))+((r22*x10083)));
evalcond[7]=((((-1.0)*r01*x10070*x10082))+((r00*x10073))+((r01*x10079))+(((-1.0)*x10080))+x10069+(((-1.0)*r02*x10084))+((r00*x10068*x10074)));
evalcond[8]=(((r20*x10068*x10074))+(((-1.0)*r21*x10070*x10082))+((r20*x10073))+(((-1.0)*sj7*x10077))+((r21*x10079))+(((-1.0)*r22*x10084))+(((-1.0)*x10075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10085=((-1.0)*r21);
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(x10085),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
IkReal x10086=((1.0)*(x10088.value));
IkReal x10087=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10086)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10086)));
IkReal gconst4=(x10085*x10087);
IkReal gconst5=((1.0)*r20*x10087);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10089=((-1.0)*r21);
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(x10089),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
IkReal x10090=((1.0)*(x10092.value));
IkReal x10091=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10090)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10090)));
IkReal gconst4=(x10089*x10091);
IkReal gconst5=((1.0)*r20*x10091);
j10eval[0]=cj9;
j10eval[1]=r12;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10093=((-1.0)*r21);
CheckValue<IkReal> x10096 = IKatan2WithCheck(IkReal(x10093),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10096.valid){
continue;
}
IkReal x10094=((1.0)*(x10096.value));
IkReal x10095=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10094)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10094)));
IkReal gconst4=(x10093*x10095);
IkReal gconst5=((1.0)*r20*x10095);
j10eval[0]=r12;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10097=((-1.0)*r21);
CheckValue<IkReal> x10100 = IKatan2WithCheck(IkReal(x10097),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10100.valid){
continue;
}
IkReal x10098=((1.0)*(x10100.value));
IkReal x10099=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10098)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10098)));
IkReal gconst4=(x10097*x10099);
IkReal gconst5=((1.0)*r20*x10099);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10101=((-1.0)*r21);
CheckValue<IkReal> x10104 = IKatan2WithCheck(IkReal(x10101),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10104.valid){
continue;
}
IkReal x10102=((1.0)*(x10104.value));
IkReal x10103=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10102)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10102)));
IkReal gconst4=(x10101*x10103);
IkReal gconst5=((1.0)*r20*x10103);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10105=((-1.0)*r21);
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal(x10105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
IkReal x10106=((1.0)*(x10108.value));
IkReal x10107=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10106)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10106)));
IkReal gconst4=(x10105*x10107);
IkReal gconst5=((1.0)*r20*x10107);
IkReal x10109=r22*r22;
IkReal x10110=(cj7*cj8*r02);
CheckValue<IkReal> x10115=IKPowWithIntegerCheck(((-1.0)+x10109),-1);
if(!x10115.valid){
continue;
}
IkReal x10111=x10115.value;
IkReal x10112=((1.0)*r02*sj7*sj8);
if((((1.0)+(((-1.0)*x10109)))) < -0.00001)
continue;
IkReal x10113=IKsqrt(((1.0)+(((-1.0)*x10109))));
IkReal x10114=(r22*x10111*x10113);
j10eval[0]=((IKabs((((x10110*x10114))+(((-1.0)*x10112*x10114)))))+(IKabs((x10110+(((-1.0)*x10112))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10116=(cj7*cj8);
IkReal x10117=(gconst5*r00);
IkReal x10118=(gconst4*r01);
IkReal x10119=((1.0)*sj7*sj8);
CheckValue<IkReal> x10120=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10120.valid){
continue;
}
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal(((((-1.0)*x10117*x10119))+((x10116*x10117))+(((-1.0)*x10116*x10118))+((sj7*sj8*x10118)))),IkReal((((r02*x10116))+(((-1.0)*r02*x10119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10120.value)))+(x10121.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10122=IKcos(j10);
IkReal x10123=IKsin(j10);
IkReal x10124=((1.0)*cj7);
IkReal x10125=((1.0)*gconst5);
IkReal x10126=(gconst4*x10123);
IkReal x10127=((1.0)*x10122);
IkReal x10128=(gconst4*x10122);
evalcond[0]=(((r02*x10123))+(((-1.0)*r00*x10122*x10125))+((r01*x10128)));
evalcond[1]=(((r21*x10126))+(((-1.0)*r20*x10123*x10125))+(((-1.0)*r22*x10127)));
evalcond[2]=((((-1.0)*r12*x10127))+(((-1.0)*r10*x10123*x10125))+((r11*x10126)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10127))+((r01*x10126))+(((-1.0)*r00*x10123*x10125)));
evalcond[4]=((((-1.0)*r20*x10122*x10125))+((r21*x10128))+(((-1.0)*cj8*x10124))+((r22*x10123))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r10*x10122*x10125))+(((-1.0)*sj8*x10124))+((r12*x10123))+((r11*x10128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10129=(gconst4*r01);
IkReal x10130=(gconst5*r00);
CheckValue<IkReal> x10131=IKPowWithIntegerCheck(IKsign(((x10130*x10130)+(((-2.0)*x10129*x10130))+(x10129*x10129)+(r02*r02))),-1);
if(!x10131.valid){
continue;
}
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal((x10129+(((-1.0)*x10130)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10131.value)))+(x10132.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10133=IKcos(j10);
IkReal x10134=IKsin(j10);
IkReal x10135=((1.0)*cj7);
IkReal x10136=((1.0)*gconst5);
IkReal x10137=(gconst4*x10134);
IkReal x10138=((1.0)*x10133);
IkReal x10139=(gconst4*x10133);
evalcond[0]=(((r02*x10134))+((r01*x10139))+(((-1.0)*r00*x10133*x10136)));
evalcond[1]=(((r21*x10137))+(((-1.0)*r20*x10134*x10136))+(((-1.0)*r22*x10138)));
evalcond[2]=(((r11*x10137))+(((-1.0)*r10*x10134*x10136))+(((-1.0)*r12*x10138)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10138))+((r01*x10137))+(((-1.0)*r00*x10134*x10136)));
evalcond[4]=(((r21*x10139))+(((-1.0)*cj8*x10135))+((r22*x10134))+((sj7*sj8))+(((-1.0)*r20*x10133*x10136)));
evalcond[5]=((((-1.0)*r10*x10133*x10136))+((r11*x10139))+(((-1.0)*cj8*sj7))+((r12*x10134))+(((-1.0)*sj8*x10135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10140=((1.0)*gconst5);
CheckValue<IkReal> x10141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10140))+(((-1.0)*gconst4*r10)))),-1);
if(!x10141.valid){
continue;
}
CheckValue<IkReal> x10142 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10140))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10142.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10141.value)))+(x10142.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10143=IKcos(j10);
IkReal x10144=IKsin(j10);
IkReal x10145=((1.0)*cj7);
IkReal x10146=((1.0)*gconst5);
IkReal x10147=(gconst4*x10144);
IkReal x10148=((1.0)*x10143);
IkReal x10149=(gconst4*x10143);
evalcond[0]=(((r02*x10144))+(((-1.0)*r00*x10143*x10146))+((r01*x10149)));
evalcond[1]=(((r21*x10147))+(((-1.0)*r20*x10144*x10146))+(((-1.0)*r22*x10148)));
evalcond[2]=((((-1.0)*r10*x10144*x10146))+(((-1.0)*r12*x10148))+((r11*x10147)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10148))+(((-1.0)*r00*x10144*x10146))+((r01*x10147)));
evalcond[4]=((((-1.0)*cj8*x10145))+((r21*x10149))+((r22*x10144))+(((-1.0)*r20*x10143*x10146))+((sj7*sj8)));
evalcond[5]=((((-1.0)*r10*x10143*x10146))+((r12*x10144))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x10145))+((r11*x10149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10151)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10155)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
IkReal x10158=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10162=IKPowWithIntegerCheck(x10158,-1);
if(!x10162.valid){
continue;
}
IkReal x10159=x10162.value;
IkReal x10160=((1.0)*x10159);
IkReal x10161=((((-1.0)*x10160*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10160*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10159)));
j10eval[0]=x10161;
j10eval[1]=r02;
j10eval[2]=x10158;
j10eval[3]=IKsign(x10161);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10163=((-1.0)*r21);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(x10163),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
IkReal x10164=((1.0)*(x10166.value));
IkReal x10165=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10164)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10164)));
IkReal gconst4=(x10163*x10165);
IkReal gconst5=((1.0)*r20*x10165);
IkReal x10167=r22*r22;
CheckValue<IkReal> x10170=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x10167))),-1);
if(!x10170.valid){
continue;
}
IkReal x10168=x10170.value;
IkReal x10169=((1.0)*x10168);
j10eval[0]=IKsign((((x10169*(r20*r20*r20*r20)))+(((2.0)*x10168*(r20*r20)*(r21*r21)))+x10167+((x10169*(r21*r21*r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10171=(gconst5*r20);
IkReal x10172=(sj7*sj8);
IkReal x10173=(gconst4*r21);
IkReal x10174=((1.0)*cj7*cj8);
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10174))+((r22*x10172)))),IkReal(((((-1.0)*x10173*x10174))+((cj7*cj8*x10171))+((x10172*x10173))+(((-1.0)*x10171*x10172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10171*x10173))+(r22*r22)+(x10173*x10173)+(x10171*x10171))),-1);
if(!x10176.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10175.value)+(((1.5707963267949)*(x10176.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10177=IKsin(j10);
IkReal x10178=IKcos(j10);
IkReal x10179=(gconst4*r21);
IkReal x10180=(gconst4*r11);
IkReal x10181=((1.0)*cj7);
IkReal x10182=(gconst4*r01);
IkReal x10183=((1.0)*x10178);
IkReal x10184=(gconst5*x10178);
IkReal x10185=((1.0)*x10177);
evalcond[0]=(((x10177*x10179))+(((-1.0)*r22*x10183))+(((-1.0)*gconst5*r20*x10185)));
evalcond[1]=((((-1.0)*r12*x10183))+(((-1.0)*gconst5*r10*x10185))+((x10177*x10180)));
evalcond[2]=((((-1.0)*r02*x10185))+(((-1.0)*x10182*x10183))+((r00*x10184)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10183))+(((-1.0)*gconst5*r00*x10185))+((x10177*x10182)));
evalcond[4]=((((-1.0)*x10179*x10183))+(((-1.0)*cj8*x10181))+((r20*x10184))+((sj7*sj8))+(((-1.0)*r22*x10185)));
evalcond[5]=((((-1.0)*sj8*x10181))+((r10*x10184))+(((-1.0)*cj8*sj7))+(((-1.0)*r12*x10185))+(((-1.0)*x10180*x10183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10186=(gconst5*r00);
IkReal x10187=(gconst4*r01);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(((((-1.0)*x10187))+x10186)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(IKsign(((((2.0)*x10186*x10187))+(((-1.0)*(x10187*x10187)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10186*x10186))))),-1);
if(!x10189.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10188.value)+(((1.5707963267949)*(x10189.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10190=IKsin(j10);
IkReal x10191=IKcos(j10);
IkReal x10192=(gconst4*r21);
IkReal x10193=(gconst4*r11);
IkReal x10194=((1.0)*cj7);
IkReal x10195=(gconst4*r01);
IkReal x10196=((1.0)*x10191);
IkReal x10197=(gconst5*x10191);
IkReal x10198=((1.0)*x10190);
evalcond[0]=((((-1.0)*r22*x10196))+(((-1.0)*gconst5*r20*x10198))+((x10190*x10192)));
evalcond[1]=((((-1.0)*gconst5*r10*x10198))+(((-1.0)*r12*x10196))+((x10190*x10193)));
evalcond[2]=((((-1.0)*r02*x10198))+(((-1.0)*x10195*x10196))+((r00*x10197)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10196))+(((-1.0)*gconst5*r00*x10198))+((x10190*x10195)));
evalcond[4]=((((-1.0)*cj8*x10194))+((r20*x10197))+((sj7*sj8))+(((-1.0)*r22*x10198))+(((-1.0)*x10192*x10196)));
evalcond[5]=((((-1.0)*sj8*x10194))+(((-1.0)*cj8*sj7))+((r10*x10197))+(((-1.0)*r12*x10198))+(((-1.0)*x10193*x10196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10199=((1.0)*gconst5);
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10199))+(((-1.0)*gconst4*r10)))),-1);
if(!x10200.valid){
continue;
}
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10199))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10200.value)))+(x10201.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10202=IKsin(j10);
IkReal x10203=IKcos(j10);
IkReal x10204=(gconst4*r21);
IkReal x10205=(gconst4*r11);
IkReal x10206=((1.0)*cj7);
IkReal x10207=(gconst4*r01);
IkReal x10208=((1.0)*x10203);
IkReal x10209=(gconst5*x10203);
IkReal x10210=((1.0)*x10202);
evalcond[0]=((((-1.0)*r22*x10208))+((x10202*x10204))+(((-1.0)*gconst5*r20*x10210)));
evalcond[1]=(((x10202*x10205))+(((-1.0)*gconst5*r10*x10210))+(((-1.0)*r12*x10208)));
evalcond[2]=(((r00*x10209))+(((-1.0)*r02*x10210))+(((-1.0)*x10207*x10208)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10208))+((x10202*x10207))+(((-1.0)*gconst5*r00*x10210)));
evalcond[4]=((((-1.0)*cj8*x10206))+(((-1.0)*r22*x10210))+((r20*x10209))+((sj7*sj8))+(((-1.0)*x10204*x10208)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r10*x10209))+(((-1.0)*x10205*x10208))+(((-1.0)*sj8*x10206))+(((-1.0)*r12*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x10211=((-1.0)*r21);
IkReal x10212=((-1.0)*r20);
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(x10211),IkReal(x10212),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
IkReal x10213=((1.0)*(x10214.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10213)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10212);
rxp0_2=(py*r00);
rxp1_0=(py*x10211);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10213)));
IkReal gconst4=x10211;
IkReal gconst5=((1.0)*r20);
IkReal x10215=((1.0)*r01*r21);
IkReal x10216=((1.0)*r00*r20);
j10eval[0]=((((-1.0)*x10215))+(((-1.0)*x10216)));
j10eval[1]=(((sj9*x10215))+((sj9*x10216)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10217=((-1.0)*r21);
IkReal x10218=((-1.0)*r20);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(x10217),IkReal(x10218),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10219=((1.0)*(x10220.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10219)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10218);
rxp0_2=(py*r00);
rxp1_0=(py*x10217);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10219)));
IkReal gconst4=x10217;
IkReal gconst5=((1.0)*r20);
IkReal x10221=((1.0)*r01*r21);
IkReal x10222=((1.0)*r00*r20);
j10eval[0]=((((-1.0)*x10221))+(((-1.0)*x10222)));
j10eval[1]=((((-1.0)*cj9*x10222))+(((-1.0)*cj9*x10221)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10223=((-1.0)*r21);
IkReal x10224=((-1.0)*r20);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(x10223),IkReal(x10224),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
IkReal x10225=((1.0)*(x10226.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10225)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10224);
rxp0_2=(py*r00);
rxp1_0=(py*x10223);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10225)));
IkReal gconst4=x10223;
IkReal gconst5=((1.0)*r20);
IkReal x10227=((1.0)*sj9);
j10eval[0]=r12;
j10eval[1]=sj9;
j10eval[2]=(((r01*r21*x10227))+((r00*r20*x10227)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10228=((1.0)*gconst4);
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(r12,-1);
if(!x10229.valid){
continue;
}
CheckValue<IkReal> x10230=IKPowWithIntegerCheck(sj9,-1);
if(!x10230.valid){
continue;
}
CheckValue<IkReal> x10231=IKPowWithIntegerCheck((((gconst5*r00*sj9))+(((-1.0)*r01*sj9*x10228))),-1);
if(!x10231.valid){
continue;
}
if( IKabs(((x10229.value)*(x10230.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10231.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10229.value)*(x10230.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x10231.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10228))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x10229.value)*(x10230.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x10231.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10228))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10232=IKsin(j10);
IkReal x10233=IKcos(j10);
IkReal x10234=(cj9*gconst4);
IkReal x10235=(gconst5*sj9);
IkReal x10236=(sj7*sj8);
IkReal x10237=(cj9*gconst5);
IkReal x10238=((1.0)*cj7);
IkReal x10239=((1.0)*sj9);
IkReal x10240=(gconst4*sj9);
IkReal x10241=((1.0)*cj8*sj7);
IkReal x10242=(sj8*x10238);
IkReal x10243=(r21*x10233);
IkReal x10244=(gconst4*x10232);
IkReal x10245=((1.0)*x10233);
IkReal x10246=(r12*x10232);
IkReal x10247=((1.0)*gconst5*x10232);
IkReal x10248=(x10241+x10242);
evalcond[0]=((-1.0)*r12*x10233);
evalcond[1]=((((-1.0)*r20*x10247))+((r21*x10244)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x10247))+((r01*x10244)));
evalcond[3]=(((cj7*cj8))+(((-1.0)*x10236))+(((-1.0)*x10239*x10246)));
evalcond[4]=(((cj9*x10246))+(((-1.0)*x10248)));
evalcond[5]=((((-1.0)*gconst4*r01*x10233*x10239))+((r00*x10233*x10235))+((r00*x10234))+((r01*x10237)));
evalcond[6]=(((r01*x10233*x10234))+(((-1.0)*r00*x10237*x10245))+((r01*x10235))+((r00*x10240)));
evalcond[7]=((((-1.0)*cj8*x10238))+((x10234*x10243))+(((-1.0)*r20*x10237*x10245))+((r21*x10235))+x10236+((r20*x10240)));
evalcond[8]=((((-1.0)*gconst4*x10239*x10243))+((r21*x10237))+(((-1.0)*x10248))+((r20*x10233*x10235))+((r20*x10234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10249=((1.0)*sj9);
IkReal x10250=(gconst4*r01);
IkReal x10251=((1.0)*gconst5*r00);
CheckValue<IkReal> x10252=IKPowWithIntegerCheck(((((-1.0)*x10251))+x10250),-1);
if(!x10252.valid){
continue;
}
CheckValue<IkReal> x10253=IKPowWithIntegerCheck(((((-1.0)*cj9*x10251))+((cj9*x10250))),-1);
if(!x10253.valid){
continue;
}
if( IKabs(x10252.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10253.value)*(((((-1.0)*gconst4*r00*x10249))+(((-1.0)*gconst5*r01*x10249)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10252.value)+IKsqr(((x10253.value)*(((((-1.0)*gconst4*r00*x10249))+(((-1.0)*gconst5*r01*x10249))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x10252.value, ((x10253.value)*(((((-1.0)*gconst4*r00*x10249))+(((-1.0)*gconst5*r01*x10249))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10254=IKsin(j10);
IkReal x10255=IKcos(j10);
IkReal x10256=(cj9*gconst4);
IkReal x10257=(gconst5*sj9);
IkReal x10258=(sj7*sj8);
IkReal x10259=(cj9*gconst5);
IkReal x10260=((1.0)*cj7);
IkReal x10261=((1.0)*sj9);
IkReal x10262=(gconst4*sj9);
IkReal x10263=((1.0)*cj8*sj7);
IkReal x10264=(sj8*x10260);
IkReal x10265=(r21*x10255);
IkReal x10266=(gconst4*x10254);
IkReal x10267=((1.0)*x10255);
IkReal x10268=(r12*x10254);
IkReal x10269=((1.0)*gconst5*x10254);
IkReal x10270=(x10263+x10264);
evalcond[0]=((-1.0)*r12*x10255);
evalcond[1]=((((-1.0)*r20*x10269))+((r21*x10266)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x10269))+((r01*x10266)));
evalcond[3]=((((-1.0)*x10261*x10268))+((cj7*cj8))+(((-1.0)*x10258)));
evalcond[4]=(((cj9*x10268))+(((-1.0)*x10270)));
evalcond[5]=(((r00*x10255*x10257))+(((-1.0)*gconst4*r01*x10255*x10261))+((r00*x10256))+((r01*x10259)));
evalcond[6]=(((r01*x10255*x10256))+((r00*x10262))+(((-1.0)*r00*x10259*x10267))+((r01*x10257)));
evalcond[7]=((((-1.0)*r20*x10259*x10267))+((x10256*x10265))+((r20*x10262))+((r21*x10257))+x10258+(((-1.0)*cj8*x10260)));
evalcond[8]=(((r20*x10255*x10257))+(((-1.0)*x10270))+((r21*x10259))+(((-1.0)*gconst4*x10261*x10265))+((r20*x10256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10271=((1.0)*gconst4);
IkReal x10272=((1.0)*gconst5);
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(((((-1.0)*r00*x10272))+((gconst4*r01))),-1);
if(!x10273.valid){
continue;
}
CheckValue<IkReal> x10274=IKPowWithIntegerCheck((((gconst5*r00*sj9))+(((-1.0)*r01*sj9*x10271))),-1);
if(!x10274.valid){
continue;
}
if( IKabs(x10273.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10274.value)*(((((-1.0)*cj9*r00*x10271))+(((-1.0)*cj9*r01*x10272)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10273.value)+IKsqr(((x10274.value)*(((((-1.0)*cj9*r00*x10271))+(((-1.0)*cj9*r01*x10272))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x10273.value, ((x10274.value)*(((((-1.0)*cj9*r00*x10271))+(((-1.0)*cj9*r01*x10272))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10275=IKsin(j10);
IkReal x10276=IKcos(j10);
IkReal x10277=(cj9*gconst4);
IkReal x10278=(gconst5*sj9);
IkReal x10279=(sj7*sj8);
IkReal x10280=(cj9*gconst5);
IkReal x10281=((1.0)*cj7);
IkReal x10282=((1.0)*sj9);
IkReal x10283=(gconst4*sj9);
IkReal x10284=((1.0)*cj8*sj7);
IkReal x10285=(sj8*x10281);
IkReal x10286=(r21*x10276);
IkReal x10287=(gconst4*x10275);
IkReal x10288=((1.0)*x10276);
IkReal x10289=(r12*x10275);
IkReal x10290=((1.0)*gconst5*x10275);
IkReal x10291=(x10284+x10285);
evalcond[0]=((-1.0)*r12*x10276);
evalcond[1]=(((r21*x10287))+(((-1.0)*r20*x10290)));
evalcond[2]=((-1.0)+((r01*x10287))+(((-1.0)*r00*x10290)));
evalcond[3]=((((-1.0)*x10282*x10289))+((cj7*cj8))+(((-1.0)*x10279)));
evalcond[4]=(((cj9*x10289))+(((-1.0)*x10291)));
evalcond[5]=(((r01*x10280))+((r00*x10277))+((r00*x10276*x10278))+(((-1.0)*gconst4*r01*x10276*x10282)));
evalcond[6]=(((r01*x10278))+(((-1.0)*r00*x10280*x10288))+((r01*x10276*x10277))+((r00*x10283)));
evalcond[7]=(((r20*x10283))+(((-1.0)*cj8*x10281))+((r21*x10278))+x10279+((x10277*x10286))+(((-1.0)*r20*x10280*x10288)));
evalcond[8]=(((r20*x10277))+((r21*x10280))+(((-1.0)*gconst4*x10282*x10286))+(((-1.0)*x10291))+((r20*x10276*x10278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10292=gconst5*gconst5;
IkReal x10293=gconst4*gconst4;
IkReal x10294=((1.0)*cj9);
IkReal x10295=(gconst5*r20);
IkReal x10296=(cj9*gconst4);
IkReal x10297=(r01*sj9);
IkReal x10298=(gconst5*r21);
IkReal x10299=(gconst4*r00*sj9);
IkReal x10300=(r20*x10292);
IkReal x10301=(r21*x10293);
CheckValue<IkReal> x10302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10294*x10300))+(((-1.0)*r01*x10294*x10301))+((r00*x10296*x10298))+(((-1.0)*r02*r22*x10294))+((r01*x10295*x10296)))),-1);
if(!x10302.valid){
continue;
}
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal((((gconst5*r22*x10297))+((r22*x10299)))),IkReal((((r00*sj9*x10301))+(((-1.0)*x10295*x10299))+((gconst4*x10297*x10298))+(((-1.0)*x10297*x10300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10302.value)))+(x10303.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10304=IKsin(j10);
IkReal x10305=IKcos(j10);
IkReal x10306=(gconst4*sj9);
IkReal x10307=(cj9*gconst4);
IkReal x10308=(gconst5*sj9);
IkReal x10309=(sj7*sj8);
IkReal x10310=((1.0)*cj7);
IkReal x10311=(cj9*gconst5);
IkReal x10312=((1.0)*cj8*sj7);
IkReal x10313=(sj8*x10310);
IkReal x10314=(r21*x10305);
IkReal x10315=(gconst4*x10304);
IkReal x10316=((1.0)*x10304);
IkReal x10317=((1.0)*x10305);
IkReal x10318=(cj9*x10304);
IkReal x10319=(x10311*x10317);
IkReal x10320=(x10312+x10313);
evalcond[0]=(((r21*x10315))+(((-1.0)*gconst5*r20*x10316))+(((-1.0)*r22*x10317)));
evalcond[1]=(((r11*x10315))+(((-1.0)*gconst5*r10*x10316))+(((-1.0)*r12*x10317)));
evalcond[2]=((-1.0)+((r01*x10315))+(((-1.0)*r02*x10317))+(((-1.0)*gconst5*r00*x10316)));
evalcond[3]=(((r01*x10305*x10307))+((r00*x10306))+((r02*x10318))+((r01*x10308))+(((-1.0)*r00*x10319)));
evalcond[4]=((((-1.0)*r01*x10306*x10317))+((r01*x10311))+((r00*x10307))+(((-1.0)*r02*sj9*x10316))+((r00*x10305*x10308)));
evalcond[5]=(((r20*x10306))+((r22*x10318))+(((-1.0)*r20*x10319))+x10309+((r21*x10308))+(((-1.0)*cj8*x10310))+((x10307*x10314)));
evalcond[6]=(((r10*x10307))+((r11*x10311))+(((-1.0)*x10309))+((cj7*cj8))+(((-1.0)*r11*x10306*x10317))+((r10*x10305*x10308))+(((-1.0)*r12*sj9*x10316)));
evalcond[7]=(((r10*x10306))+((r12*x10318))+((r11*x10308))+(((-1.0)*r10*x10319))+(((-1.0)*x10320))+((r11*x10305*x10307)));
evalcond[8]=((((-1.0)*r22*sj9*x10316))+((r21*x10311))+((r20*x10307))+((r20*x10305*x10308))+(((-1.0)*x10306*x10314))+(((-1.0)*x10320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10321=gconst4*gconst4;
IkReal x10322=gconst5*gconst5;
IkReal x10323=(r01*sj9);
IkReal x10324=(cj9*r00);
IkReal x10325=(gconst4*r21);
IkReal x10326=(r00*sj9);
IkReal x10327=(r21*x10321);
IkReal x10328=(cj9*gconst5*r01);
IkReal x10329=(r20*x10322);
IkReal x10330=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal((((r22*x10328))+((gconst4*r22*x10324)))),IkReal(((((-1.0)*x10324*x10330))+((x10325*x10328))+((x10324*x10327))+(((-1.0)*cj9*r01*x10329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign((((x10323*x10327))+((x10326*x10329))+(((-1.0)*gconst5*x10325*x10326))+(((-1.0)*x10323*x10330))+((r02*r22*sj9)))),-1);
if(!x10332.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10331.value)+(((1.5707963267949)*(x10332.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10333=IKsin(j10);
IkReal x10334=IKcos(j10);
IkReal x10335=(gconst4*sj9);
IkReal x10336=(cj9*gconst4);
IkReal x10337=(gconst5*sj9);
IkReal x10338=(sj7*sj8);
IkReal x10339=((1.0)*cj7);
IkReal x10340=(cj9*gconst5);
IkReal x10341=((1.0)*cj8*sj7);
IkReal x10342=(sj8*x10339);
IkReal x10343=(r21*x10334);
IkReal x10344=(gconst4*x10333);
IkReal x10345=((1.0)*x10333);
IkReal x10346=((1.0)*x10334);
IkReal x10347=(cj9*x10333);
IkReal x10348=(x10340*x10346);
IkReal x10349=(x10341+x10342);
evalcond[0]=(((r21*x10344))+(((-1.0)*gconst5*r20*x10345))+(((-1.0)*r22*x10346)));
evalcond[1]=((((-1.0)*gconst5*r10*x10345))+(((-1.0)*r12*x10346))+((r11*x10344)));
evalcond[2]=((-1.0)+((r01*x10344))+(((-1.0)*gconst5*r00*x10345))+(((-1.0)*r02*x10346)));
evalcond[3]=(((r01*x10334*x10336))+((r01*x10337))+((r00*x10335))+(((-1.0)*r00*x10348))+((r02*x10347)));
evalcond[4]=(((r01*x10340))+((r00*x10336))+((r00*x10334*x10337))+(((-1.0)*r02*sj9*x10345))+(((-1.0)*r01*x10335*x10346)));
evalcond[5]=(((r20*x10335))+((r22*x10347))+(((-1.0)*cj8*x10339))+((x10336*x10343))+((r21*x10337))+x10338+(((-1.0)*r20*x10348)));
evalcond[6]=((((-1.0)*x10338))+(((-1.0)*r11*x10335*x10346))+((r10*x10334*x10337))+(((-1.0)*r12*sj9*x10345))+((cj7*cj8))+((r11*x10340))+((r10*x10336)));
evalcond[7]=((((-1.0)*x10349))+(((-1.0)*r10*x10348))+((r11*x10334*x10336))+((r12*x10347))+((r11*x10337))+((r10*x10335)));
evalcond[8]=((((-1.0)*x10349))+((r20*x10336))+(((-1.0)*r22*sj9*x10345))+((r20*x10334*x10337))+((r21*x10340))+(((-1.0)*x10335*x10343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10350=((1.0)*gconst5);
CheckValue<IkReal> x10351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10350))+(((-1.0)*gconst4*r10)))),-1);
if(!x10351.valid){
continue;
}
CheckValue<IkReal> x10352 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10352.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10351.value)))+(x10352.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10353=IKsin(j10);
IkReal x10354=IKcos(j10);
IkReal x10355=(gconst4*sj9);
IkReal x10356=(cj9*gconst4);
IkReal x10357=(gconst5*sj9);
IkReal x10358=(sj7*sj8);
IkReal x10359=((1.0)*cj7);
IkReal x10360=(cj9*gconst5);
IkReal x10361=((1.0)*cj8*sj7);
IkReal x10362=(sj8*x10359);
IkReal x10363=(r21*x10354);
IkReal x10364=(gconst4*x10353);
IkReal x10365=((1.0)*x10353);
IkReal x10366=((1.0)*x10354);
IkReal x10367=(cj9*x10353);
IkReal x10368=(x10360*x10366);
IkReal x10369=(x10362+x10361);
evalcond[0]=(((r21*x10364))+(((-1.0)*gconst5*r20*x10365))+(((-1.0)*r22*x10366)));
evalcond[1]=((((-1.0)*gconst5*r10*x10365))+((r11*x10364))+(((-1.0)*r12*x10366)));
evalcond[2]=((-1.0)+((r01*x10364))+(((-1.0)*r02*x10366))+(((-1.0)*gconst5*r00*x10365)));
evalcond[3]=(((r01*x10354*x10356))+((r00*x10355))+((r01*x10357))+(((-1.0)*r00*x10368))+((r02*x10367)));
evalcond[4]=(((r01*x10360))+(((-1.0)*r01*x10355*x10366))+((r00*x10356))+(((-1.0)*r02*sj9*x10365))+((r00*x10354*x10357)));
evalcond[5]=(((r21*x10357))+((r22*x10367))+(((-1.0)*cj8*x10359))+((r20*x10355))+((x10356*x10363))+x10358+(((-1.0)*r20*x10368)));
evalcond[6]=(((r10*x10354*x10357))+(((-1.0)*r11*x10355*x10366))+(((-1.0)*r12*sj9*x10365))+((cj7*cj8))+((r11*x10360))+((r10*x10356))+(((-1.0)*x10358)));
evalcond[7]=(((r11*x10354*x10356))+(((-1.0)*r10*x10368))+((r11*x10357))+(((-1.0)*x10369))+((r10*x10355))+((r12*x10367)));
evalcond[8]=(((r21*x10360))+((r20*x10356))+(((-1.0)*r22*sj9*x10365))+(((-1.0)*x10369))+(((-1.0)*x10355*x10363))+((r20*x10354*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10370=((-1.0)*r21);
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(x10370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
IkReal x10371=((1.0)*(x10373.value));
IkReal x10372=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10371)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10371)));
IkReal gconst4=(x10370*x10372);
IkReal gconst5=((1.0)*r20*x10372);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10374=((-1.0)*r21);
CheckValue<IkReal> x10377 = IKatan2WithCheck(IkReal(x10374),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10377.valid){
continue;
}
IkReal x10375=((1.0)*(x10377.value));
IkReal x10376=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10375)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10375)));
IkReal gconst4=(x10374*x10376);
IkReal gconst5=((1.0)*r20*x10376);
j10eval[0]=cj9;
j10eval[1]=r12;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10378=((-1.0)*r21);
CheckValue<IkReal> x10381 = IKatan2WithCheck(IkReal(x10378),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10381.valid){
continue;
}
IkReal x10379=((1.0)*(x10381.value));
IkReal x10380=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10379)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10379)));
IkReal gconst4=(x10378*x10380);
IkReal gconst5=((1.0)*r20*x10380);
j10eval[0]=r12;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10382=((-1.0)*r21);
CheckValue<IkReal> x10385 = IKatan2WithCheck(IkReal(x10382),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10385.valid){
continue;
}
IkReal x10383=((1.0)*(x10385.value));
IkReal x10384=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10383)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10383)));
IkReal gconst4=(x10382*x10384);
IkReal gconst5=((1.0)*r20*x10384);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x10386=((-1.0)*r21);
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(x10386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
IkReal x10387=((1.0)*(x10389.value));
IkReal x10388=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10387)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10387)));
IkReal gconst4=(x10386*x10388);
IkReal gconst5=((1.0)*r20*x10388);
IkReal x10390=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10394=IKPowWithIntegerCheck(x10390,-1);
if(!x10394.valid){
continue;
}
IkReal x10391=x10394.value;
IkReal x10392=((1.0)*x10391);
IkReal x10393=((((-1.0)*x10392*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10392*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10391)));
j10eval[0]=x10393;
j10eval[1]=IKsign(x10393);
j10eval[2]=r02;
j10eval[3]=x10390;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10395=((-1.0)*r21);
CheckValue<IkReal> x10398 = IKatan2WithCheck(IkReal(x10395),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10398.valid){
continue;
}
IkReal x10396=((1.0)*(x10398.value));
IkReal x10397=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10396)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10396)));
IkReal gconst4=(x10395*x10397);
IkReal gconst5=((1.0)*r20*x10397);
IkReal x10399=r22*r22;
IkReal x10400=(cj7*cj8*r02);
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(((-1.0)+x10399),-1);
if(!x10405.valid){
continue;
}
IkReal x10401=x10405.value;
IkReal x10402=((1.0)*r02*sj7*sj8);
if((((1.0)+(((-1.0)*x10399)))) < -0.00001)
continue;
IkReal x10403=IKsqrt(((1.0)+(((-1.0)*x10399))));
IkReal x10404=(r22*x10401*x10403);
j10eval[0]=((IKabs(((((-1.0)*x10402*x10404))+((x10400*x10404)))))+(IKabs(((((-1.0)*x10402))+x10400))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10406=(cj7*cj8);
IkReal x10407=(gconst5*r00);
IkReal x10408=(gconst4*r01);
IkReal x10409=((1.0)*sj7*sj8);
CheckValue<IkReal> x10410=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10410.valid){
continue;
}
CheckValue<IkReal> x10411 = IKatan2WithCheck(IkReal((((x10406*x10407))+(((-1.0)*x10406*x10408))+((sj7*sj8*x10408))+(((-1.0)*x10407*x10409)))),IkReal((((r02*x10406))+(((-1.0)*r02*x10409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10411.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10410.value)))+(x10411.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10412=IKcos(j10);
IkReal x10413=IKsin(j10);
IkReal x10414=(gconst5*r20);
IkReal x10415=(gconst5*r00);
IkReal x10416=(gconst4*x10413);
IkReal x10417=((1.0)*gconst5*r10);
IkReal x10418=((1.0)*x10412);
IkReal x10419=(gconst4*x10412);
IkReal x10420=((1.0)*x10413);
evalcond[0]=(((r01*x10419))+((r02*x10413))+(((-1.0)*x10415*x10418)));
evalcond[1]=(((r21*x10416))+(((-1.0)*r22*x10418))+(((-1.0)*x10414*x10420)));
evalcond[2]=((((-1.0)*x10413*x10417))+(((-1.0)*r12*x10418))+((r11*x10416)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10418))+((r01*x10416))+(((-1.0)*x10415*x10420)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x10412*x10417))+((r11*x10419))+((r12*x10413))+((cj7*sj8)));
evalcond[5]=(((r22*x10413))+(((-1.0)*cj7*cj8))+((r21*x10419))+(((-1.0)*x10414*x10418))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10421=(gconst4*r01);
IkReal x10422=(gconst5*r00);
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal((x10421+(((-1.0)*x10422)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
CheckValue<IkReal> x10424=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10421*x10421)))+(((-1.0)*(x10422*x10422)))+(((2.0)*x10421*x10422)))),-1);
if(!x10424.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10423.value)+(((1.5707963267949)*(x10424.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10425=IKcos(j10);
IkReal x10426=IKsin(j10);
IkReal x10427=(gconst5*r20);
IkReal x10428=(gconst5*r00);
IkReal x10429=(gconst4*x10426);
IkReal x10430=((1.0)*gconst5*r10);
IkReal x10431=((1.0)*x10425);
IkReal x10432=(gconst4*x10425);
IkReal x10433=((1.0)*x10426);
evalcond[0]=(((r01*x10432))+(((-1.0)*x10428*x10431))+((r02*x10426)));
evalcond[1]=((((-1.0)*x10427*x10433))+(((-1.0)*r22*x10431))+((r21*x10429)));
evalcond[2]=((((-1.0)*x10426*x10430))+(((-1.0)*r12*x10431))+((r11*x10429)));
evalcond[3]=((1.0)+((r01*x10429))+(((-1.0)*x10428*x10433))+(((-1.0)*r02*x10431)));
evalcond[4]=(((cj8*sj7))+((r12*x10426))+((r11*x10432))+((cj7*sj8))+(((-1.0)*x10425*x10430)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x10427*x10431))+((r22*x10426))+((sj7*sj8))+((r21*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10434=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10434.valid){
continue;
}
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10434.value)))+(x10435.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10436=IKcos(j10);
IkReal x10437=IKsin(j10);
IkReal x10438=(gconst5*r20);
IkReal x10439=(gconst5*r00);
IkReal x10440=(gconst4*x10437);
IkReal x10441=((1.0)*gconst5*r10);
IkReal x10442=((1.0)*x10436);
IkReal x10443=(gconst4*x10436);
IkReal x10444=((1.0)*x10437);
evalcond[0]=(((r02*x10437))+((r01*x10443))+(((-1.0)*x10439*x10442)));
evalcond[1]=((((-1.0)*x10438*x10444))+((r21*x10440))+(((-1.0)*r22*x10442)));
evalcond[2]=((((-1.0)*r12*x10442))+(((-1.0)*x10437*x10441))+((r11*x10440)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10442))+((r01*x10440))+(((-1.0)*x10439*x10444)));
evalcond[4]=(((cj8*sj7))+(((-1.0)*x10436*x10441))+((r11*x10443))+((r12*x10437))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*x10438*x10442))+((r22*x10437))+((r21*x10443))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10445=((-1.0)*r21);
CheckValue<IkReal> x10448 = IKatan2WithCheck(IkReal(x10445),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10448.valid){
continue;
}
IkReal x10446=((1.0)*(x10448.value));
IkReal x10447=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10446)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10446)));
IkReal gconst4=(x10445*x10447);
IkReal gconst5=((1.0)*r20*x10447);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10449=((-1.0)*r21);
CheckValue<IkReal> x10452 = IKatan2WithCheck(IkReal(x10449),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10452.valid){
continue;
}
IkReal x10450=((1.0)*(x10452.value));
IkReal x10451=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10450)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10450)));
IkReal gconst4=(x10449*x10451);
IkReal gconst5=((1.0)*r20*x10451);
j10eval[0]=r02;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10453=((-1.0)*r21);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(x10453),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal x10454=((1.0)*(x10456.value));
IkReal x10455=x8852;
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10454)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10454)));
IkReal gconst4=(x10453*x10455);
IkReal gconst5=((1.0)*r20*x10455);
IkReal x10457=r22*r22;
IkReal x10458=(cj7*r12*sj8);
IkReal x10459=(cj8*r12*sj7);
CheckValue<IkReal> x10463=IKPowWithIntegerCheck(((-1.0)+x10457),-1);
if(!x10463.valid){
continue;
}
IkReal x10460=x10463.value;
if((((1.0)+(((-1.0)*x10457)))) < -0.00001)
continue;
IkReal x10461=IKsqrt(((1.0)+(((-1.0)*x10457))));
IkReal x10462=((1.0)*r22*x10460*x10461);
j10eval[0]=((IKabs(((((-1.0)*x10459*x10462))+(((-1.0)*x10458*x10462)))))+(IKabs((x10459+x10458))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10464=(gconst4*r11);
IkReal x10465=(cj7*sj8);
IkReal x10466=(gconst5*r10);
IkReal x10467=(cj8*sj7);
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal((((r12*x10467))+((r12*x10465)))),IkReal(((((-1.0)*x10466*x10467))+(((-1.0)*x10465*x10466))+((x10464*x10467))+((x10464*x10465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
CheckValue<IkReal> x10469=IKPowWithIntegerCheck(IKsign(((x10466*x10466)+(r12*r12)+(((-2.0)*x10464*x10466))+(x10464*x10464))),-1);
if(!x10469.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10468.value)+(((1.5707963267949)*(x10469.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10470=IKsin(j10);
IkReal x10471=IKcos(j10);
IkReal x10472=(gconst4*r21);
IkReal x10473=(gconst4*r11);
IkReal x10474=(gconst4*r01);
IkReal x10475=((1.0)*x10471);
IkReal x10476=(gconst5*x10471);
IkReal x10477=((1.0)*x10470);
evalcond[0]=((((-1.0)*gconst5*r20*x10477))+(((-1.0)*r22*x10475))+((x10470*x10472)));
evalcond[1]=((((-1.0)*gconst5*r10*x10477))+((x10470*x10473))+(((-1.0)*r12*x10475)));
evalcond[2]=((((-1.0)*r02*x10477))+((r00*x10476))+(((-1.0)*x10474*x10475)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10475))+(((-1.0)*gconst5*r00*x10477))+((x10470*x10474)));
evalcond[4]=(((cj8*sj7))+((cj7*sj8))+(((-1.0)*x10473*x10475))+((r10*x10476))+(((-1.0)*r12*x10477)));
evalcond[5]=(((r20*x10476))+(((-1.0)*cj7*cj8))+(((-1.0)*x10472*x10475))+(((-1.0)*r22*x10477))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10478=(gconst5*r00);
IkReal x10479=(gconst4*r01);
CheckValue<IkReal> x10480 = IKatan2WithCheck(IkReal(((((-1.0)*x10479))+x10478)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10480.valid){
continue;
}
CheckValue<IkReal> x10481=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10478*x10479))+(r02*r02)+(x10479*x10479)+(x10478*x10478))),-1);
if(!x10481.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10480.value)+(((1.5707963267949)*(x10481.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10482=IKsin(j10);
IkReal x10483=IKcos(j10);
IkReal x10484=(gconst4*r21);
IkReal x10485=(gconst4*r11);
IkReal x10486=(gconst4*r01);
IkReal x10487=((1.0)*x10483);
IkReal x10488=(gconst5*x10483);
IkReal x10489=((1.0)*x10482);
evalcond[0]=((((-1.0)*r22*x10487))+((x10482*x10484))+(((-1.0)*gconst5*r20*x10489)));
evalcond[1]=(((x10482*x10485))+(((-1.0)*gconst5*r10*x10489))+(((-1.0)*r12*x10487)));
evalcond[2]=(((r00*x10488))+(((-1.0)*x10486*x10487))+(((-1.0)*r02*x10489)));
evalcond[3]=((1.0)+((x10482*x10486))+(((-1.0)*r02*x10487))+(((-1.0)*gconst5*r00*x10489)));
evalcond[4]=(((r10*x10488))+((cj8*sj7))+(((-1.0)*x10485*x10487))+(((-1.0)*r12*x10489))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x10489))+(((-1.0)*x10484*x10487))+((r20*x10488))+((sj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10490.valid){
continue;
}
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10490.value)))+(x10491.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x10492=IKsin(j10);
IkReal x10493=IKcos(j10);
IkReal x10494=(gconst4*r21);
IkReal x10495=(gconst4*r11);
IkReal x10496=(gconst4*r01);
IkReal x10497=((1.0)*x10493);
IkReal x10498=(gconst5*x10493);
IkReal x10499=((1.0)*x10492);
evalcond[0]=((((-1.0)*gconst5*r20*x10499))+(((-1.0)*r22*x10497))+((x10492*x10494)));
evalcond[1]=((((-1.0)*r12*x10497))+(((-1.0)*gconst5*r10*x10499))+((x10492*x10495)));
evalcond[2]=((((-1.0)*r02*x10499))+((r00*x10498))+(((-1.0)*x10496*x10497)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10497))+(((-1.0)*gconst5*r00*x10499))+((x10492*x10496)));
evalcond[4]=(((r10*x10498))+((cj8*sj7))+(((-1.0)*x10495*x10497))+(((-1.0)*r12*x10499))+((cj7*sj8)));
evalcond[5]=((((-1.0)*cj7*cj8))+(((-1.0)*r22*x10499))+(((-1.0)*x10494*x10497))+((sj7*sj8))+((r20*x10498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x10500=((-1.0)*r21);
IkReal x10501=((-1.0)*r20);
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(x10500),IkReal(x10501),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
IkReal x10502=((1.0)*(x10503.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10502)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10501);
rxp0_2=(py*r00);
rxp1_0=(py*x10500);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10502)));
IkReal gconst4=x10500;
IkReal gconst5=((1.0)*r20);
IkReal x10504=((1.0)*r01*r21);
IkReal x10505=((1.0)*r00*r20);
j10eval[0]=((((-1.0)*x10504))+(((-1.0)*x10505)));
j10eval[1]=(((sj9*x10504))+((sj9*x10505)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10506=((-1.0)*r21);
IkReal x10507=((-1.0)*r20);
CheckValue<IkReal> x10509 = IKatan2WithCheck(IkReal(x10506),IkReal(x10507),IKFAST_ATAN2_MAGTHRESH);
if(!x10509.valid){
continue;
}
IkReal x10508=((1.0)*(x10509.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10508)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10507);
rxp0_2=(py*r00);
rxp1_0=(py*x10506);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10508)));
IkReal gconst4=x10506;
IkReal gconst5=((1.0)*r20);
IkReal x10510=((1.0)*r01*r21);
IkReal x10511=((1.0)*r00*r20);
j10eval[0]=((((-1.0)*x10511))+(((-1.0)*x10510)));
j10eval[1]=((((-1.0)*cj9*x10510))+(((-1.0)*cj9*x10511)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x10512=((-1.0)*r21);
IkReal x10513=((-1.0)*r20);
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal(x10512),IkReal(x10513),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
IkReal x10514=((1.0)*(x10515.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10514)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10513);
rxp0_2=(py*r00);
rxp1_0=(py*x10512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10514)));
IkReal gconst4=x10512;
IkReal gconst5=((1.0)*r20);
IkReal x10516=((1.0)*sj9);
j10eval[0]=cj9;
j10eval[1]=r12;
j10eval[2]=(((r01*r21*x10516))+((r00*r20*x10516)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10517=((1.0)*gconst4);
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(cj9,-1);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519=IKPowWithIntegerCheck(r12,-1);
if(!x10519.valid){
continue;
}
CheckValue<IkReal> x10520=IKPowWithIntegerCheck((((gconst5*r00*sj9))+(((-1.0)*r01*sj9*x10517))),-1);
if(!x10520.valid){
continue;
}
if( IKabs(((x10518.value)*(x10519.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10520.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10518.value)*(x10519.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))))+IKsqr(((x10520.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10517))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x10518.value)*(x10519.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))), ((x10520.value)*(((((-1.0)*cj9*gconst5*r01))+(((-1.0)*cj9*r00*x10517))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10521=IKsin(j10);
IkReal x10522=IKcos(j10);
IkReal x10523=(sj7*sj8);
IkReal x10524=(cj9*gconst4);
IkReal x10525=(gconst5*sj9);
IkReal x10526=(cj9*gconst5);
IkReal x10527=(cj7*sj8);
IkReal x10528=((1.0)*sj9);
IkReal x10529=(gconst4*sj9);
IkReal x10530=((1.0)*cj8);
IkReal x10531=(cj7*x10530);
IkReal x10532=(r21*x10522);
IkReal x10533=(gconst4*x10521);
IkReal x10534=((1.0)*x10522);
IkReal x10535=(r12*x10521);
IkReal x10536=((1.0)*gconst5*x10521);
evalcond[0]=((-1.0)*r12*x10522);
evalcond[1]=(((cj8*sj7))+x10527+((cj9*x10535)));
evalcond[2]=((((-1.0)*r20*x10536))+((r21*x10533)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10536))+((r01*x10533)));
evalcond[4]=((((-1.0)*x10531))+x10523+(((-1.0)*x10528*x10535)));
evalcond[5]=(((r00*x10524))+((r01*x10526))+(((-1.0)*gconst4*r01*x10522*x10528))+((r00*x10522*x10525)));
evalcond[6]=(((r01*x10522*x10524))+((r00*x10529))+((r01*x10525))+(((-1.0)*r00*x10526*x10534)));
evalcond[7]=((((-1.0)*x10531))+((x10524*x10532))+((r21*x10525))+(((-1.0)*r20*x10526*x10534))+x10523+((r20*x10529)));
evalcond[8]=(((r20*x10522*x10525))+(((-1.0)*sj7*x10530))+((r21*x10526))+(((-1.0)*x10527))+((r20*x10524))+(((-1.0)*gconst4*x10528*x10532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10537=((1.0)*sj9);
IkReal x10538=(gconst4*r01);
IkReal x10539=((1.0)*gconst5*r00);
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(((((-1.0)*x10539))+x10538),-1);
if(!x10540.valid){
continue;
}
CheckValue<IkReal> x10541=IKPowWithIntegerCheck((((cj9*x10538))+(((-1.0)*cj9*x10539))),-1);
if(!x10541.valid){
continue;
}
if( IKabs(((-1.0)*(x10540.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10541.value)*(((((-1.0)*gconst4*r00*x10537))+(((-1.0)*gconst5*r01*x10537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10540.value)))+IKsqr(((x10541.value)*(((((-1.0)*gconst4*r00*x10537))+(((-1.0)*gconst5*r01*x10537))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x10540.value)), ((x10541.value)*(((((-1.0)*gconst4*r00*x10537))+(((-1.0)*gconst5*r01*x10537))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10542=IKsin(j10);
IkReal x10543=IKcos(j10);
IkReal x10544=(sj7*sj8);
IkReal x10545=(cj9*gconst4);
IkReal x10546=(gconst5*sj9);
IkReal x10547=(cj9*gconst5);
IkReal x10548=(cj7*sj8);
IkReal x10549=((1.0)*sj9);
IkReal x10550=(gconst4*sj9);
IkReal x10551=((1.0)*cj8);
IkReal x10552=(cj7*x10551);
IkReal x10553=(r21*x10543);
IkReal x10554=(gconst4*x10542);
IkReal x10555=((1.0)*x10543);
IkReal x10556=(r12*x10542);
IkReal x10557=((1.0)*gconst5*x10542);
evalcond[0]=((-1.0)*r12*x10543);
evalcond[1]=(((cj8*sj7))+x10548+((cj9*x10556)));
evalcond[2]=((((-1.0)*r20*x10557))+((r21*x10554)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10557))+((r01*x10554)));
evalcond[4]=(x10544+(((-1.0)*x10552))+(((-1.0)*x10549*x10556)));
evalcond[5]=(((r00*x10543*x10546))+(((-1.0)*gconst4*r01*x10543*x10549))+((r00*x10545))+((r01*x10547)));
evalcond[6]=(((r01*x10543*x10545))+((r01*x10546))+((r00*x10550))+(((-1.0)*r00*x10547*x10555)));
evalcond[7]=(((x10545*x10553))+((r20*x10550))+x10544+(((-1.0)*r20*x10547*x10555))+((r21*x10546))+(((-1.0)*x10552)));
evalcond[8]=((((-1.0)*gconst4*x10549*x10553))+(((-1.0)*x10548))+(((-1.0)*sj7*x10551))+((r20*x10543*x10546))+((r20*x10545))+((r21*x10547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10558=((1.0)*gconst4);
IkReal x10559=((1.0)*gconst5);
CheckValue<IkReal> x10560=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*r00*x10559))),-1);
if(!x10560.valid){
continue;
}
CheckValue<IkReal> x10561=IKPowWithIntegerCheck((((gconst5*r00*sj9))+(((-1.0)*r01*sj9*x10558))),-1);
if(!x10561.valid){
continue;
}
if( IKabs(((-1.0)*(x10560.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10561.value)*(((((-1.0)*cj9*r01*x10559))+(((-1.0)*cj9*r00*x10558)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10560.value)))+IKsqr(((x10561.value)*(((((-1.0)*cj9*r01*x10559))+(((-1.0)*cj9*r00*x10558))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x10560.value)), ((x10561.value)*(((((-1.0)*cj9*r01*x10559))+(((-1.0)*cj9*r00*x10558))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10562=IKsin(j10);
IkReal x10563=IKcos(j10);
IkReal x10564=(sj7*sj8);
IkReal x10565=(cj9*gconst4);
IkReal x10566=(gconst5*sj9);
IkReal x10567=(cj9*gconst5);
IkReal x10568=(cj7*sj8);
IkReal x10569=((1.0)*sj9);
IkReal x10570=(gconst4*sj9);
IkReal x10571=((1.0)*cj8);
IkReal x10572=(cj7*x10571);
IkReal x10573=(r21*x10563);
IkReal x10574=(gconst4*x10562);
IkReal x10575=((1.0)*x10563);
IkReal x10576=(r12*x10562);
IkReal x10577=((1.0)*gconst5*x10562);
evalcond[0]=((-1.0)*r12*x10563);
evalcond[1]=(((cj9*x10576))+((cj8*sj7))+x10568);
evalcond[2]=(((r21*x10574))+(((-1.0)*r20*x10577)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10577))+((r01*x10574)));
evalcond[4]=((((-1.0)*x10569*x10576))+(((-1.0)*x10572))+x10564);
evalcond[5]=(((r00*x10565))+((r01*x10567))+(((-1.0)*gconst4*r01*x10563*x10569))+((r00*x10563*x10566)));
evalcond[6]=(((r01*x10566))+((r00*x10570))+((r01*x10563*x10565))+(((-1.0)*r00*x10567*x10575)));
evalcond[7]=(((x10565*x10573))+((r20*x10570))+(((-1.0)*x10572))+((r21*x10566))+x10564+(((-1.0)*r20*x10567*x10575)));
evalcond[8]=(((r20*x10563*x10566))+((r20*x10565))+(((-1.0)*gconst4*x10569*x10573))+((r21*x10567))+(((-1.0)*x10568))+(((-1.0)*sj7*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10578=gconst5*gconst5;
IkReal x10579=gconst4*gconst4;
IkReal x10580=((1.0)*cj9);
IkReal x10581=(gconst5*r20);
IkReal x10582=(cj9*gconst4);
IkReal x10583=(r01*sj9);
IkReal x10584=(gconst5*r21);
IkReal x10585=(gconst4*r00*sj9);
IkReal x10586=(r20*x10578);
IkReal x10587=(r21*x10579);
CheckValue<IkReal> x10588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10580*x10587))+(((-1.0)*r00*x10580*x10586))+((r00*x10582*x10584))+(((-1.0)*r02*r22*x10580))+((r01*x10581*x10582)))),-1);
if(!x10588.valid){
continue;
}
CheckValue<IkReal> x10589 = IKatan2WithCheck(IkReal((((gconst5*r22*x10583))+((r22*x10585)))),IkReal(((((-1.0)*x10583*x10586))+((gconst4*x10583*x10584))+((r00*sj9*x10587))+(((-1.0)*x10581*x10585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10589.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10588.value)))+(x10589.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10590=IKsin(j10);
IkReal x10591=IKcos(j10);
IkReal x10592=(sj7*sj8);
IkReal x10593=(gconst4*sj9);
IkReal x10594=(cj9*gconst4);
IkReal x10595=(gconst5*sj9);
IkReal x10596=((1.0)*cj7);
IkReal x10597=(cj9*gconst5);
IkReal x10598=(cj8*sj7);
IkReal x10599=(cj8*x10596);
IkReal x10600=(r21*x10591);
IkReal x10601=(gconst4*x10590);
IkReal x10602=((1.0)*x10590);
IkReal x10603=((1.0)*x10591);
IkReal x10604=(cj9*x10590);
IkReal x10605=(x10597*x10603);
evalcond[0]=(((r21*x10601))+(((-1.0)*gconst5*r20*x10602))+(((-1.0)*r22*x10603)));
evalcond[1]=(((r11*x10601))+(((-1.0)*r12*x10603))+(((-1.0)*gconst5*r10*x10602)));
evalcond[2]=((1.0)+((r01*x10601))+(((-1.0)*r02*x10603))+(((-1.0)*gconst5*r00*x10602)));
evalcond[3]=(((r01*x10591*x10594))+((r00*x10593))+((r02*x10604))+((r01*x10595))+(((-1.0)*r00*x10605)));
evalcond[4]=((((-1.0)*r02*sj9*x10602))+((r00*x10594))+((r01*x10597))+(((-1.0)*r01*x10593*x10603))+((r00*x10591*x10595)));
evalcond[5]=(((r12*x10604))+((r11*x10595))+((r11*x10591*x10594))+x10598+((r10*x10593))+((cj7*sj8))+(((-1.0)*r10*x10605)));
evalcond[6]=(((r21*x10595))+(((-1.0)*x10599))+((x10594*x10600))+((r20*x10593))+((r22*x10604))+(((-1.0)*r20*x10605))+x10592);
evalcond[7]=((((-1.0)*x10599))+((r11*x10597))+x10592+((r10*x10591*x10595))+(((-1.0)*r11*x10593*x10603))+((r10*x10594))+(((-1.0)*r12*sj9*x10602)));
evalcond[8]=(((r21*x10597))+(((-1.0)*x10593*x10600))+((r20*x10591*x10595))+(((-1.0)*r22*sj9*x10602))+(((-1.0)*x10598))+((r20*x10594))+(((-1.0)*sj8*x10596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10606=gconst4*gconst4;
IkReal x10607=gconst5*gconst5;
IkReal x10608=(r01*sj9);
IkReal x10609=(cj9*r00);
IkReal x10610=(gconst4*r21);
IkReal x10611=(r00*sj9);
IkReal x10612=(r21*x10606);
IkReal x10613=(cj9*gconst5*r01);
IkReal x10614=(r20*x10607);
IkReal x10615=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x10616=IKPowWithIntegerCheck(IKsign((((x10608*x10612))+((x10611*x10614))+(((-1.0)*gconst5*x10610*x10611))+(((-1.0)*x10608*x10615))+((r02*r22*sj9)))),-1);
if(!x10616.valid){
continue;
}
CheckValue<IkReal> x10617 = IKatan2WithCheck(IkReal((((r22*x10613))+((gconst4*r22*x10609)))),IkReal(((((-1.0)*x10609*x10615))+((x10609*x10612))+(((-1.0)*cj9*r01*x10614))+((x10610*x10613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10617.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10616.value)))+(x10617.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10618=IKsin(j10);
IkReal x10619=IKcos(j10);
IkReal x10620=(sj7*sj8);
IkReal x10621=(gconst4*sj9);
IkReal x10622=(cj9*gconst4);
IkReal x10623=(gconst5*sj9);
IkReal x10624=((1.0)*cj7);
IkReal x10625=(cj9*gconst5);
IkReal x10626=(cj8*sj7);
IkReal x10627=(cj8*x10624);
IkReal x10628=(r21*x10619);
IkReal x10629=(gconst4*x10618);
IkReal x10630=((1.0)*x10618);
IkReal x10631=((1.0)*x10619);
IkReal x10632=(cj9*x10618);
IkReal x10633=(x10625*x10631);
evalcond[0]=(((r21*x10629))+(((-1.0)*gconst5*r20*x10630))+(((-1.0)*r22*x10631)));
evalcond[1]=((((-1.0)*gconst5*r10*x10630))+(((-1.0)*r12*x10631))+((r11*x10629)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10631))+(((-1.0)*gconst5*r00*x10630))+((r01*x10629)));
evalcond[3]=((((-1.0)*r00*x10633))+((r00*x10621))+((r01*x10623))+((r01*x10619*x10622))+((r02*x10632)));
evalcond[4]=(((r00*x10622))+((r01*x10625))+(((-1.0)*r01*x10621*x10631))+(((-1.0)*r02*sj9*x10630))+((r00*x10619*x10623)));
evalcond[5]=(((r11*x10619*x10622))+((r10*x10621))+(((-1.0)*r10*x10633))+((r11*x10623))+((r12*x10632))+((cj7*sj8))+x10626);
evalcond[6]=(((r21*x10623))+((x10622*x10628))+((r20*x10621))+(((-1.0)*x10627))+((r22*x10632))+(((-1.0)*r20*x10633))+x10620);
evalcond[7]=((((-1.0)*x10627))+((r10*x10622))+((r11*x10625))+(((-1.0)*r12*sj9*x10630))+((r10*x10619*x10623))+x10620+(((-1.0)*r11*x10621*x10631)));
evalcond[8]=(((r21*x10625))+(((-1.0)*r22*sj9*x10630))+((r20*x10622))+(((-1.0)*x10621*x10628))+(((-1.0)*x10626))+(((-1.0)*sj8*x10624))+((r20*x10619*x10623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10634=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10634.valid){
continue;
}
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10634.value)))+(x10635.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10636=IKsin(j10);
IkReal x10637=IKcos(j10);
IkReal x10638=(sj7*sj8);
IkReal x10639=(gconst4*sj9);
IkReal x10640=(cj9*gconst4);
IkReal x10641=(gconst5*sj9);
IkReal x10642=((1.0)*cj7);
IkReal x10643=(cj9*gconst5);
IkReal x10644=(cj8*sj7);
IkReal x10645=(cj8*x10642);
IkReal x10646=(r21*x10637);
IkReal x10647=(gconst4*x10636);
IkReal x10648=((1.0)*x10636);
IkReal x10649=((1.0)*x10637);
IkReal x10650=(cj9*x10636);
IkReal x10651=(x10643*x10649);
evalcond[0]=(((r21*x10647))+(((-1.0)*gconst5*r20*x10648))+(((-1.0)*r22*x10649)));
evalcond[1]=((((-1.0)*gconst5*r10*x10648))+(((-1.0)*r12*x10649))+((r11*x10647)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10649))+(((-1.0)*gconst5*r00*x10648))+((r01*x10647)));
evalcond[3]=(((r00*x10639))+((r01*x10637*x10640))+((r01*x10641))+((r02*x10650))+(((-1.0)*r00*x10651)));
evalcond[4]=((((-1.0)*r01*x10639*x10649))+((r00*x10637*x10641))+((r01*x10643))+((r00*x10640))+(((-1.0)*r02*sj9*x10648)));
evalcond[5]=(((r11*x10637*x10640))+((r10*x10639))+(((-1.0)*r10*x10651))+((r12*x10650))+((r11*x10641))+((cj7*sj8))+x10644);
evalcond[6]=(((r21*x10641))+((x10640*x10646))+((r20*x10639))+(((-1.0)*x10645))+((r22*x10650))+(((-1.0)*r20*x10651))+x10638);
evalcond[7]=((((-1.0)*x10645))+(((-1.0)*r12*sj9*x10648))+((r10*x10640))+((r11*x10643))+(((-1.0)*r11*x10639*x10649))+x10638+((r10*x10637*x10641)));
evalcond[8]=(((r21*x10643))+(((-1.0)*r22*sj9*x10648))+((r20*x10640))+(((-1.0)*x10644))+(((-1.0)*sj8*x10642))+((r20*x10637*x10641))+(((-1.0)*x10639*x10646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x10652=((-1.0)*r21);
IkReal x10653=((-1.0)*px);
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(x10652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10654=((1.0)*(x10655.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10654)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10653);
rxp1_1=(px*r21);
rxp1_2=(r11*x10653);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10654)));
IkReal gconst4=x10652;
IkReal gconst5=((1.0)*r20);
j10eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10656=((-1.0)*r21);
IkReal x10657=((-1.0)*px);
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(x10656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
IkReal x10658=((1.0)*(x10659.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10658)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10657);
rxp1_1=(px*r21);
rxp1_2=(r11*x10657);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10658)));
IkReal gconst4=x10656;
IkReal gconst5=((1.0)*r20);
IkReal x10660=((1.0)*cj9);
j10eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j10eval[1]=(((x10660*(r10*r10)))+(((-1.0)*x10660*(r21*r21)))+(((-1.0)*x10660)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x10661=((-1.0)*r21);
IkReal x10662=((-1.0)*px);
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(x10661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
IkReal x10663=((1.0)*(x10664.value));
sj11=gconst4;
cj11=gconst5;
j11=((3.14159265)+(((-1.0)*x10663)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10662);
rxp1_1=(px*r21);
rxp1_2=(r11*x10662);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10663)));
IkReal gconst4=x10661;
IkReal gconst5=((1.0)*r20);
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(r02,-1);
if(!x10666.valid){
continue;
}
IkReal x10665=x10666.value;
CheckValue<IkReal> x10667=IKPowWithIntegerCheck(cj9,-1);
if(!x10667.valid){
continue;
}
if( IKabs((x10665*(x10667.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x10665)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10665*(x10667.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x10665))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x10665*(x10667.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x10665));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10668=IKsin(j10);
IkReal x10669=IKcos(j10);
IkReal x10670=(gconst5*sj9);
IkReal x10671=(gconst4*sj9);
IkReal x10672=(cj9*gconst4);
IkReal x10673=((1.0)*sj7);
IkReal x10674=(cj6*sj8);
IkReal x10675=(gconst5*r10);
IkReal x10676=(cj7*cj8);
IkReal x10677=(cj9*gconst5);
IkReal x10678=(r21*x10669);
IkReal x10679=(gconst4*x10668);
IkReal x10680=((1.0)*x10668);
IkReal x10681=((1.0)*cj7*sj8);
IkReal x10682=((1.0)*x10669);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x10682)));
evalcond[1]=((((-1.0)*gconst5*r20*x10680))+((r21*x10679)));
evalcond[2]=(((r11*x10679))+cj6+(((-1.0)*x10675*x10680)));
evalcond[3]=(((cj6*x10676))+(((-1.0)*x10673*x10674))+(((-1.0)*r02*sj9*x10680)));
evalcond[4]=(((cj9*r02*x10668))+(((-1.0)*cj7*x10674))+(((-1.0)*cj6*cj8*x10673)));
evalcond[5]=((((-1.0)*r20*x10677*x10682))+((x10672*x10678))+(((-1.0)*x10676))+((r20*x10671))+((r21*x10670))+((sj7*sj8)));
evalcond[6]=(((r20*x10669*x10670))+(((-1.0)*x10681))+((r20*x10672))+(((-1.0)*cj8*x10673))+((r21*x10677))+(((-1.0)*x10671*x10678)));
evalcond[7]=(((r11*x10677))+(((-1.0)*r11*x10671*x10682))+((sj6*x10676))+((r10*x10672))+((r10*x10669*x10670))+(((-1.0)*sj6*sj8*x10673)));
evalcond[8]=((((-1.0)*sj6*x10681))+((r11*x10670))+((r10*x10671))+(((-1.0)*cj8*sj6*x10673))+(((-1.0)*cj9*x10675*x10682))+((r11*x10669*x10672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10683=((1.0)*gconst5);
CheckValue<IkReal> x10684=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x10683))),-1);
if(!x10684.valid){
continue;
}
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(((((-1.0)*cj9*r20*x10683))+((cj9*gconst4*r21))),-1);
if(!x10685.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x10684.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10685.value)*(((((-1.0)*r21*sj9*x10683))+((cj7*cj8))+(((-1.0)*gconst4*r20*sj9))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x10684.value)))+IKsqr(((x10685.value)*(((((-1.0)*r21*sj9*x10683))+((cj7*cj8))+(((-1.0)*gconst4*r20*sj9))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x10684.value)), ((x10685.value)*(((((-1.0)*r21*sj9*x10683))+((cj7*cj8))+(((-1.0)*gconst4*r20*sj9))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10686=IKsin(j10);
IkReal x10687=IKcos(j10);
IkReal x10688=(gconst5*sj9);
IkReal x10689=(gconst4*sj9);
IkReal x10690=(cj9*gconst4);
IkReal x10691=((1.0)*sj7);
IkReal x10692=(cj6*sj8);
IkReal x10693=(gconst5*r10);
IkReal x10694=(cj7*cj8);
IkReal x10695=(cj9*gconst5);
IkReal x10696=(r21*x10687);
IkReal x10697=(gconst4*x10686);
IkReal x10698=((1.0)*x10686);
IkReal x10699=((1.0)*cj7*sj8);
IkReal x10700=((1.0)*x10687);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x10700)));
evalcond[1]=(((r21*x10697))+(((-1.0)*gconst5*r20*x10698)));
evalcond[2]=((((-1.0)*x10693*x10698))+cj6+((r11*x10697)));
evalcond[3]=(((cj6*x10694))+(((-1.0)*x10691*x10692))+(((-1.0)*r02*sj9*x10698)));
evalcond[4]=((((-1.0)*cj7*x10692))+((cj9*r02*x10686))+(((-1.0)*cj6*cj8*x10691)));
evalcond[5]=((((-1.0)*x10694))+(((-1.0)*r20*x10695*x10700))+((r20*x10689))+((x10690*x10696))+((sj7*sj8))+((r21*x10688)));
evalcond[6]=(((r21*x10695))+(((-1.0)*x10699))+(((-1.0)*x10689*x10696))+((r20*x10687*x10688))+(((-1.0)*cj8*x10691))+((r20*x10690)));
evalcond[7]=(((r10*x10690))+((r11*x10695))+(((-1.0)*r11*x10689*x10700))+((r10*x10687*x10688))+(((-1.0)*sj6*sj8*x10691))+((sj6*x10694)));
evalcond[8]=((((-1.0)*cj8*sj6*x10691))+(((-1.0)*cj9*x10693*x10700))+((r11*x10688))+((r10*x10689))+((r11*x10687*x10690))+(((-1.0)*sj6*x10699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10701=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10701.valid){
continue;
}
CheckValue<IkReal> x10702=IKPowWithIntegerCheck(r02,-1);
if(!x10702.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x10701.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*(x10702.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x10701.value)))+IKsqr(((-1.0)*sj6*(x10702.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x10701.value)), ((-1.0)*sj6*(x10702.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10703=IKsin(j10);
IkReal x10704=IKcos(j10);
IkReal x10705=(gconst5*sj9);
IkReal x10706=(gconst4*sj9);
IkReal x10707=(cj9*gconst4);
IkReal x10708=((1.0)*sj7);
IkReal x10709=(cj6*sj8);
IkReal x10710=(gconst5*r10);
IkReal x10711=(cj7*cj8);
IkReal x10712=(cj9*gconst5);
IkReal x10713=(r21*x10704);
IkReal x10714=(gconst4*x10703);
IkReal x10715=((1.0)*x10703);
IkReal x10716=((1.0)*cj7*sj8);
IkReal x10717=((1.0)*x10704);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x10717)));
evalcond[1]=((((-1.0)*gconst5*r20*x10715))+((r21*x10714)));
evalcond[2]=((((-1.0)*x10710*x10715))+cj6+((r11*x10714)));
evalcond[3]=(((cj6*x10711))+(((-1.0)*r02*sj9*x10715))+(((-1.0)*x10708*x10709)));
evalcond[4]=((((-1.0)*cj7*x10709))+(((-1.0)*cj6*cj8*x10708))+((cj9*r02*x10703)));
evalcond[5]=((((-1.0)*x10711))+(((-1.0)*r20*x10712*x10717))+((r21*x10705))+((sj7*sj8))+((r20*x10706))+((x10707*x10713)));
evalcond[6]=(((r20*x10704*x10705))+(((-1.0)*x10716))+((r21*x10712))+(((-1.0)*cj8*x10708))+(((-1.0)*x10706*x10713))+((r20*x10707)));
evalcond[7]=((((-1.0)*r11*x10706*x10717))+((r11*x10712))+((r10*x10707))+(((-1.0)*sj6*sj8*x10708))+((sj6*x10711))+((r10*x10704*x10705)));
evalcond[8]=((((-1.0)*sj6*x10716))+((r11*x10704*x10707))+(((-1.0)*cj8*sj6*x10708))+((r11*x10705))+((r10*x10706))+(((-1.0)*cj9*x10710*x10717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10718=gconst4*gconst4;
IkReal x10719=r21*r21;
IkReal x10720=r20*r20;
IkReal x10721=gconst5*gconst5;
IkReal x10722=((1.0)*r21);
IkReal x10723=(r20*sj9);
IkReal x10724=(cj7*cj8);
IkReal x10725=(sj7*sj8);
IkReal x10726=(gconst4*r21);
IkReal x10727=(gconst5*r20);
IkReal x10728=((1.0)*cj9);
IkReal x10729=(gconst4*gconst5*sj9);
IkReal x10730=((1.0)*x10720);
CheckValue<IkReal> x10731=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10718*x10719*x10728))+(((2.0)*cj9*x10726*x10727))+(((-1.0)*x10728*(r22*r22)))+(((-1.0)*x10720*x10721*x10728)))),-1);
if(!x10731.valid){
continue;
}
CheckValue<IkReal> x10732 = IKatan2WithCheck(IkReal((((r22*x10725))+(((-1.0)*r22*x10724))+((gconst5*r21*r22*sj9))+((gconst4*r22*x10723)))),IkReal(((((-1.0)*x10725*x10727))+((x10719*x10729))+((x10724*x10727))+((x10725*x10726))+(((-1.0)*gconst4*x10722*x10724))+((r21*x10718*x10723))+(((-1.0)*x10721*x10722*x10723))+(((-1.0)*x10729*x10730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10732.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10731.value)))+(x10732.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10733=IKsin(j10);
IkReal x10734=IKcos(j10);
IkReal x10735=(gconst4*r10);
IkReal x10736=(gconst4*r21);
IkReal x10737=((1.0)*sj7);
IkReal x10738=((1.0)*sj9);
IkReal x10739=(gconst5*sj9);
IkReal x10740=(cj6*sj8);
IkReal x10741=(gconst4*r20);
IkReal x10742=((1.0)*gconst5);
IkReal x10743=(cj9*gconst5);
IkReal x10744=(gconst4*r01);
IkReal x10745=(gconst4*r11);
IkReal x10746=(cj7*cj8);
IkReal x10747=(gconst4*r00);
IkReal x10748=(r02*x10733);
IkReal x10749=(cj9*x10734);
IkReal x10750=((1.0)*cj7*sj8);
IkReal x10751=((1.0)*x10734);
IkReal x10752=(r12*x10733);
IkReal x10753=(r22*x10733);
evalcond[0]=(((x10733*x10736))+(((-1.0)*r20*x10733*x10742))+(((-1.0)*r22*x10751)));
evalcond[1]=(cj6+((x10733*x10745))+(((-1.0)*r10*x10733*x10742))+(((-1.0)*r12*x10751)));
evalcond[2]=((((-1.0)*sj6))+((x10733*x10744))+(((-1.0)*r02*x10751))+(((-1.0)*r00*x10733*x10742)));
evalcond[3]=((((-1.0)*x10746))+(((-1.0)*r20*x10742*x10749))+((r21*x10739))+((x10736*x10749))+((sj7*sj8))+((sj9*x10741))+((cj9*x10753)));
evalcond[4]=((((-1.0)*x10738*x10753))+((r20*x10734*x10739))+(((-1.0)*cj8*x10737))+(((-1.0)*x10750))+(((-1.0)*x10734*x10736*x10738))+((cj9*x10741))+((r21*x10743)));
evalcond[5]=((((-1.0)*x10738*x10748))+(((-1.0)*x10737*x10740))+(((-1.0)*x10734*x10738*x10744))+((cj6*x10746))+((r00*x10734*x10739))+((cj9*x10747))+((r01*x10743)));
evalcond[6]=((((-1.0)*cj6*cj8*x10737))+(((-1.0)*cj7*x10740))+(((-1.0)*r00*x10742*x10749))+((sj9*x10747))+((r01*x10739))+((cj9*x10748))+((x10744*x10749)));
evalcond[7]=(((sj6*x10746))+(((-1.0)*x10738*x10752))+((cj9*x10735))+(((-1.0)*x10734*x10738*x10745))+((r10*x10734*x10739))+((r11*x10743))+(((-1.0)*sj6*sj8*x10737)));
evalcond[8]=(((x10745*x10749))+((sj9*x10735))+(((-1.0)*cj8*sj6*x10737))+(((-1.0)*r10*x10742*x10749))+(((-1.0)*sj6*x10750))+((r11*x10739))+((cj9*x10752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10754=((1.0)*gconst5);
CheckValue<IkReal> x10755=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10754))+(((-1.0)*gconst4*r10)))),-1);
if(!x10755.valid){
continue;
}
CheckValue<IkReal> x10756 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x10754))+((gconst4*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10756.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10755.value)))+(x10756.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10757=IKsin(j10);
IkReal x10758=IKcos(j10);
IkReal x10759=(gconst4*r10);
IkReal x10760=(gconst4*r21);
IkReal x10761=((1.0)*sj7);
IkReal x10762=((1.0)*sj9);
IkReal x10763=(gconst5*sj9);
IkReal x10764=(cj6*sj8);
IkReal x10765=(gconst4*r20);
IkReal x10766=((1.0)*gconst5);
IkReal x10767=(cj9*gconst5);
IkReal x10768=(gconst4*r01);
IkReal x10769=(gconst4*r11);
IkReal x10770=(cj7*cj8);
IkReal x10771=(gconst4*r00);
IkReal x10772=(r02*x10757);
IkReal x10773=(cj9*x10758);
IkReal x10774=((1.0)*cj7*sj8);
IkReal x10775=((1.0)*x10758);
IkReal x10776=(r12*x10757);
IkReal x10777=(r22*x10757);
evalcond[0]=((((-1.0)*r20*x10757*x10766))+(((-1.0)*r22*x10775))+((x10757*x10760)));
evalcond[1]=(cj6+(((-1.0)*r10*x10757*x10766))+(((-1.0)*r12*x10775))+((x10757*x10769)));
evalcond[2]=((((-1.0)*r02*x10775))+(((-1.0)*sj6))+(((-1.0)*r00*x10757*x10766))+((x10757*x10768)));
evalcond[3]=(((cj9*x10777))+(((-1.0)*x10770))+((x10760*x10773))+((sj9*x10765))+((r21*x10763))+(((-1.0)*r20*x10766*x10773))+((sj7*sj8)));
evalcond[4]=(((cj9*x10765))+((r20*x10758*x10763))+(((-1.0)*x10762*x10777))+(((-1.0)*cj8*x10761))+(((-1.0)*x10774))+((r21*x10767))+(((-1.0)*x10758*x10760*x10762)));
evalcond[5]=(((r00*x10758*x10763))+((cj6*x10770))+((cj9*x10771))+(((-1.0)*x10762*x10772))+((r01*x10767))+(((-1.0)*x10761*x10764))+(((-1.0)*x10758*x10762*x10768)));
evalcond[6]=((((-1.0)*cj7*x10764))+((cj9*x10772))+(((-1.0)*r00*x10766*x10773))+((r01*x10763))+(((-1.0)*cj6*cj8*x10761))+((sj9*x10771))+((x10768*x10773)));
evalcond[7]=(((r10*x10758*x10763))+((r11*x10767))+(((-1.0)*sj6*sj8*x10761))+(((-1.0)*x10762*x10776))+((sj6*x10770))+(((-1.0)*x10758*x10762*x10769))+((cj9*x10759)));
evalcond[8]=(((r11*x10763))+((cj9*x10776))+(((-1.0)*cj8*sj6*x10761))+(((-1.0)*r10*x10766*x10773))+((sj9*x10759))+((x10769*x10773))+(((-1.0)*sj6*x10774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10778=((1.0)*gconst5);
CheckValue<IkReal> x10779=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10778)))),-1);
if(!x10779.valid){
continue;
}
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x10778))+((cj6*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10779.value)))+(x10780.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10781=IKsin(j10);
IkReal x10782=IKcos(j10);
IkReal x10783=(gconst4*r10);
IkReal x10784=(gconst4*r21);
IkReal x10785=((1.0)*sj7);
IkReal x10786=((1.0)*sj9);
IkReal x10787=(gconst5*sj9);
IkReal x10788=(cj6*sj8);
IkReal x10789=(gconst4*r20);
IkReal x10790=((1.0)*gconst5);
IkReal x10791=(cj9*gconst5);
IkReal x10792=(gconst4*r01);
IkReal x10793=(gconst4*r11);
IkReal x10794=(cj7*cj8);
IkReal x10795=(gconst4*r00);
IkReal x10796=(r02*x10781);
IkReal x10797=(cj9*x10782);
IkReal x10798=((1.0)*cj7*sj8);
IkReal x10799=((1.0)*x10782);
IkReal x10800=(r12*x10781);
IkReal x10801=(r22*x10781);
evalcond[0]=((((-1.0)*r20*x10781*x10790))+((x10781*x10784))+(((-1.0)*r22*x10799)));
evalcond[1]=(cj6+(((-1.0)*r12*x10799))+((x10781*x10793))+(((-1.0)*r10*x10781*x10790)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*x10781*x10790))+(((-1.0)*r02*x10799))+((x10781*x10792)));
evalcond[3]=(((sj9*x10789))+((r21*x10787))+((cj9*x10801))+((x10784*x10797))+(((-1.0)*r20*x10790*x10797))+(((-1.0)*x10794))+((sj7*sj8)));
evalcond[4]=((((-1.0)*x10786*x10801))+((r21*x10791))+(((-1.0)*x10782*x10784*x10786))+(((-1.0)*cj8*x10785))+((cj9*x10789))+(((-1.0)*x10798))+((r20*x10782*x10787)));
evalcond[5]=((((-1.0)*x10782*x10786*x10792))+((r00*x10782*x10787))+(((-1.0)*x10785*x10788))+((cj9*x10795))+((cj6*x10794))+(((-1.0)*x10786*x10796))+((r01*x10791)));
evalcond[6]=((((-1.0)*cj6*cj8*x10785))+((x10792*x10797))+((sj9*x10795))+(((-1.0)*cj7*x10788))+((r01*x10787))+((cj9*x10796))+(((-1.0)*r00*x10790*x10797)));
evalcond[7]=((((-1.0)*x10786*x10800))+(((-1.0)*x10782*x10786*x10793))+((cj9*x10783))+((sj6*x10794))+((r10*x10782*x10787))+(((-1.0)*sj6*sj8*x10785))+((r11*x10791)));
evalcond[8]=(((sj9*x10783))+((r11*x10787))+((cj9*x10800))+(((-1.0)*cj8*sj6*x10785))+(((-1.0)*sj6*x10798))+(((-1.0)*r10*x10790*x10797))+((x10793*x10797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10802=((-1.0)*r10);
IkReal x10804 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10804)==0){
continue;
}
IkReal x10803=pow(x10804,-0.5);
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x10802),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10805.value));
IkReal gconst7=(r11*x10803);
IkReal gconst8=(x10802*x10803);
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x10806.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x10807=((-1.0)*r10);
IkReal x10808=x10803;
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x10807),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
IkReal x10809=((-1.0)*(x10810.value));
sj11=gconst7;
cj11=gconst8;
j11=x10809;
IkReal gconst6=x10809;
IkReal gconst7=(r11*x10808);
IkReal gconst8=(x10807*x10808);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10811=((1.0)*gconst7);
CheckValue<IkReal> x10812 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((gconst8*r10*sj6))+(((-1.0)*cj6*r01*x10811))+((cj6*gconst8*r00))+(((-1.0)*r11*sj6*x10811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10812.valid){
continue;
}
CheckValue<IkReal> x10813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10811))+(((-1.0)*gconst8*r21)))),-1);
if(!x10813.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10812.value)+(((1.5707963267949)*(x10813.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10814=IKsin(j10);
IkReal x10815=IKcos(j10);
IkReal x10816=(gconst7*sj9);
IkReal x10817=(cj9*gconst7);
IkReal x10818=((1.0)*cj9);
IkReal x10819=(sj7*sj8);
IkReal x10820=((1.0)*cj6);
IkReal x10821=(cj7*cj8);
IkReal x10822=(gconst8*r11);
IkReal x10823=(cj8*sj7);
IkReal x10824=(gconst8*r21);
IkReal x10825=(gconst8*r01);
IkReal x10826=((1.0)*sj6);
IkReal x10827=(r11*x10815);
IkReal x10828=(gconst8*x10815);
IkReal x10829=(gconst7*x10814);
IkReal x10830=((1.0)*cj7*sj8);
IkReal x10831=((1.0)*x10815);
IkReal x10832=(cj9*x10814);
IkReal x10833=((1.0)*gconst8*x10814);
IkReal x10834=((1.0)*sj9*x10814);
evalcond[0]=(((r21*x10829))+(((-1.0)*r20*x10833))+(((-1.0)*r22*x10831)));
evalcond[1]=((((-1.0)*r10*x10833))+cj6+(((-1.0)*r12*x10831))+((r11*x10829)));
evalcond[2]=((((-1.0)*r00*x10833))+(((-1.0)*r02*x10831))+(((-1.0)*x10826))+((r01*x10829)));
evalcond[3]=((((-1.0)*x10821))+((r22*x10832))+((r21*x10815*x10817))+(((-1.0)*r20*x10818*x10828))+((r20*x10816))+((sj9*x10824))+x10819);
evalcond[4]=(((cj9*x10824))+(((-1.0)*x10823))+((r20*x10817))+((r20*sj9*x10828))+(((-1.0)*r22*x10834))+(((-1.0)*x10830))+(((-1.0)*r21*x10816*x10831)));
evalcond[5]=(((cj9*x10825))+((r00*sj9*x10828))+(((-1.0)*r01*x10816*x10831))+((cj6*x10821))+(((-1.0)*x10819*x10820))+(((-1.0)*r02*x10834))+((r00*x10817)));
evalcond[6]=(((r02*x10832))+((r01*x10815*x10817))+(((-1.0)*x10820*x10823))+((sj9*x10825))+((r00*x10816))+(((-1.0)*cj7*sj8*x10820))+(((-1.0)*r00*x10818*x10828)));
evalcond[7]=(((cj9*x10822))+((sj6*x10821))+(((-1.0)*r12*x10834))+((r10*x10817))+((r10*sj9*x10828))+(((-1.0)*x10819*x10826))+(((-1.0)*x10816*x10827)));
evalcond[8]=(((x10817*x10827))+(((-1.0)*r10*x10818*x10828))+(((-1.0)*x10823*x10826))+((sj9*x10822))+((r10*x10816))+((r12*x10832))+(((-1.0)*cj7*sj8*x10826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10835=((1.0)*gconst8);
CheckValue<IkReal> x10836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10835))+(((-1.0)*gconst7*r00)))),-1);
if(!x10836.valid){
continue;
}
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*gconst7*r21))+(((-1.0)*cj6*r20*x10835)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10836.value)))+(x10837.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10838=IKsin(j10);
IkReal x10839=IKcos(j10);
IkReal x10840=(gconst7*sj9);
IkReal x10841=(cj9*gconst7);
IkReal x10842=((1.0)*cj9);
IkReal x10843=(sj7*sj8);
IkReal x10844=((1.0)*cj6);
IkReal x10845=(cj7*cj8);
IkReal x10846=(gconst8*r11);
IkReal x10847=(cj8*sj7);
IkReal x10848=(gconst8*r21);
IkReal x10849=(gconst8*r01);
IkReal x10850=((1.0)*sj6);
IkReal x10851=(r11*x10839);
IkReal x10852=(gconst8*x10839);
IkReal x10853=(gconst7*x10838);
IkReal x10854=((1.0)*cj7*sj8);
IkReal x10855=((1.0)*x10839);
IkReal x10856=(cj9*x10838);
IkReal x10857=((1.0)*gconst8*x10838);
IkReal x10858=((1.0)*sj9*x10838);
evalcond[0]=(((r21*x10853))+(((-1.0)*r20*x10857))+(((-1.0)*r22*x10855)));
evalcond[1]=(((r11*x10853))+(((-1.0)*r12*x10855))+cj6+(((-1.0)*r10*x10857)));
evalcond[2]=((((-1.0)*x10850))+((r01*x10853))+(((-1.0)*r00*x10857))+(((-1.0)*r02*x10855)));
evalcond[3]=(((sj9*x10848))+(((-1.0)*r20*x10842*x10852))+(((-1.0)*x10845))+((r20*x10840))+((r21*x10839*x10841))+((r22*x10856))+x10843);
evalcond[4]=(((r20*sj9*x10852))+((cj9*x10848))+(((-1.0)*x10847))+(((-1.0)*r21*x10840*x10855))+(((-1.0)*x10854))+((r20*x10841))+(((-1.0)*r22*x10858)));
evalcond[5]=(((r00*x10841))+((r00*sj9*x10852))+(((-1.0)*x10843*x10844))+((cj9*x10849))+((cj6*x10845))+(((-1.0)*r02*x10858))+(((-1.0)*r01*x10840*x10855)));
evalcond[6]=(((r00*x10840))+((sj9*x10849))+(((-1.0)*x10844*x10847))+(((-1.0)*cj7*sj8*x10844))+((r01*x10839*x10841))+(((-1.0)*r00*x10842*x10852))+((r02*x10856)));
evalcond[7]=(((r10*sj9*x10852))+(((-1.0)*r12*x10858))+((sj6*x10845))+((cj9*x10846))+(((-1.0)*x10843*x10850))+(((-1.0)*x10840*x10851))+((r10*x10841)));
evalcond[8]=(((sj9*x10846))+((r12*x10856))+(((-1.0)*cj7*sj8*x10850))+((x10841*x10851))+(((-1.0)*r10*x10842*x10852))+((r10*x10840))+(((-1.0)*x10847*x10850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10859=((-1.0)*r11);
IkReal x10861 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10861)==0){
continue;
}
IkReal x10860=pow(x10861,-0.5);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(x10859),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10862.value))));
IkReal gconst10=(x10859*x10860);
IkReal gconst11=((1.0)*r10*x10860);
CheckValue<IkReal> x10863 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10863.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x10863.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x10864=((-1.0)*r11);
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal(x10864),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
IkReal x10865=((1.0)*(x10867.value));
IkReal x10866=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10865)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10865)));
IkReal gconst10=(x10864*x10866);
IkReal gconst11=((1.0)*r10*x10866);
j10eval[0]=cj6;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[5];
IkReal x10868=((-1.0)*r11);
CheckValue<IkReal> x10871 = IKatan2WithCheck(IkReal(x10868),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10871.valid){
continue;
}
IkReal x10869=((1.0)*(x10871.value));
IkReal x10870=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10869)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10869)));
IkReal gconst10=(x10868*x10870);
IkReal gconst11=((1.0)*r10*x10870);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=sj6;
j10eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10872=((-1.0)*r11);
CheckValue<IkReal> x10875 = IKatan2WithCheck(IkReal(x10872),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10875.valid){
continue;
}
IkReal x10873=((1.0)*(x10875.value));
IkReal x10874=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10873)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10873)));
IkReal gconst10=(x10872*x10874);
IkReal gconst11=((1.0)*r10*x10874);
IkReal x10876=r12*r12;
IkReal x10877=(cj6*r02);
IkReal x10878=x10860;
IkReal x10879=(sj6*x10878);
j10eval[0]=((IKabs(((((-1.0)*x10877))+(((-1.0)*r12*sj6)))))+(IKabs((((x10876*x10879))+((r12*x10877*x10878))+(((-1.0)*x10879))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst10*r21))+(((-2.0)*gconst11*r20)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst10*r21))+(((-2.0)*gconst11*r20)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[2]={true,true};
_nj10 = 2;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x10880=((-1.0)*r11);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10881)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst10=(x10880*x10882);
IkReal gconst11=((1.0)*r10*x10882);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x10884=((-1.0)*r11);
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(x10884),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10885)));
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst10=(x10884*x10886);
IkReal gconst11=((1.0)*r10*x10886);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10888=gconst10*gconst10;
IkReal x10889=gconst11*gconst11;
IkReal x10890=(r01*r20);
IkReal x10891=((1.0)*sj9);
IkReal x10892=(r00*sj9);
IkReal x10893=(gconst10*gconst11);
IkReal x10894=((1.0)*cj9);
IkReal x10895=(r00*r20);
IkReal x10896=(r01*sj9);
IkReal x10897=(r21*x10888);
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10894*x10897))+((cj9*r00*r21*x10893))+(((-1.0)*r02*r22*x10894))+((cj9*x10890*x10893))+(((-1.0)*x10889*x10894*x10895)))),-1);
if(!x10898.valid){
continue;
}
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal((((gconst11*r22*x10896))+((gconst10*r22*x10892)))),IkReal(((((-1.0)*x10889*x10890*x10891))+(((-1.0)*x10891*x10893*x10895))+((x10892*x10897))+((r21*x10893*x10896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10898.value)))+(x10899.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10900=IKsin(j10);
IkReal x10901=IKcos(j10);
IkReal x10902=(cj9*gconst11);
IkReal x10903=(gconst10*sj9);
IkReal x10904=((1.0)*cj8);
IkReal x10905=(gconst11*r00);
IkReal x10906=(sj7*sj8);
IkReal x10907=(cj9*gconst10);
IkReal x10908=(gconst11*sj9);
IkReal x10909=(sj7*x10904);
IkReal x10910=((1.0)*cj7*sj8);
IkReal x10911=((1.0)*x10900);
IkReal x10912=((1.0)*x10901);
IkReal x10913=(cj9*x10900);
IkReal x10914=(gconst10*x10900);
IkReal x10915=(x10901*x10908);
IkReal x10916=(x10901*x10907);
IkReal x10917=(x10909+x10910);
evalcond[0]=((((-1.0)*gconst11*r20*x10911))+(((-1.0)*r22*x10912))+((r21*x10914)));
evalcond[1]=((((-1.0)*r12*x10912))+(((-1.0)*gconst11*r10*x10911))+((r11*x10914)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10912))+(((-1.0)*x10905*x10911))+((r01*x10914)));
evalcond[3]=(((r01*x10908))+((r02*x10913))+((r00*x10903))+((r01*x10916))+(((-1.0)*r00*x10902*x10912)));
evalcond[4]=(((sj9*x10901*x10905))+((r01*x10902))+(((-1.0)*r02*sj9*x10911))+((r00*x10907))+(((-1.0)*r01*x10903*x10912)));
evalcond[5]=(((r20*x10903))+((r21*x10916))+(((-1.0)*r20*x10902*x10912))+((r22*x10913))+(((-1.0)*cj7*x10904))+((r21*x10908))+x10906);
evalcond[6]=((((-1.0)*r11*x10903*x10912))+(((-1.0)*r12*sj9*x10911))+((cj7*cj8))+((r10*x10907))+(((-1.0)*x10906))+((r11*x10902))+((r10*x10915)));
evalcond[7]=((((-1.0)*r10*x10902*x10912))+(((-1.0)*x10917))+((r12*x10913))+((r11*x10916))+((r10*x10903))+((r11*x10908)));
evalcond[8]=((((-1.0)*x10917))+(((-1.0)*r21*x10903*x10912))+(((-1.0)*r22*sj9*x10911))+((r20*x10907))+((r21*x10902))+((r20*x10915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10918=((1.0)*gconst11);
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x10918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x10918)))),-1);
if(!x10920.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10919.value)+(((1.5707963267949)*(x10920.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10921=IKsin(j10);
IkReal x10922=IKcos(j10);
IkReal x10923=(cj9*gconst11);
IkReal x10924=(gconst10*sj9);
IkReal x10925=((1.0)*cj8);
IkReal x10926=(gconst11*r00);
IkReal x10927=(sj7*sj8);
IkReal x10928=(cj9*gconst10);
IkReal x10929=(gconst11*sj9);
IkReal x10930=(sj7*x10925);
IkReal x10931=((1.0)*cj7*sj8);
IkReal x10932=((1.0)*x10921);
IkReal x10933=((1.0)*x10922);
IkReal x10934=(cj9*x10921);
IkReal x10935=(gconst10*x10921);
IkReal x10936=(x10922*x10929);
IkReal x10937=(x10922*x10928);
IkReal x10938=(x10930+x10931);
evalcond[0]=((((-1.0)*gconst11*r20*x10932))+(((-1.0)*r22*x10933))+((r21*x10935)));
evalcond[1]=((((-1.0)*r12*x10933))+(((-1.0)*gconst11*r10*x10932))+((r11*x10935)));
evalcond[2]=((-1.0)+(((-1.0)*x10926*x10932))+(((-1.0)*r02*x10933))+((r01*x10935)));
evalcond[3]=(((r02*x10934))+(((-1.0)*r00*x10923*x10933))+((r01*x10929))+((r00*x10924))+((r01*x10937)));
evalcond[4]=(((sj9*x10922*x10926))+(((-1.0)*r02*sj9*x10932))+((r01*x10923))+((r00*x10928))+(((-1.0)*r01*x10924*x10933)));
evalcond[5]=((((-1.0)*cj7*x10925))+((r21*x10929))+((r22*x10934))+((r21*x10937))+((r20*x10924))+(((-1.0)*r20*x10923*x10933))+x10927);
evalcond[6]=((((-1.0)*x10927))+((r10*x10928))+((r10*x10936))+(((-1.0)*r12*sj9*x10932))+((cj7*cj8))+(((-1.0)*r11*x10924*x10933))+((r11*x10923)));
evalcond[7]=(((r10*x10924))+(((-1.0)*r10*x10923*x10933))+((r11*x10937))+((r12*x10934))+((r11*x10929))+(((-1.0)*x10938)));
evalcond[8]=((((-1.0)*r22*sj9*x10932))+((r21*x10923))+((r20*x10936))+((r20*x10928))+(((-1.0)*x10938))+(((-1.0)*r21*x10924*x10933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
CheckValue<IkReal> x10940=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x10940.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10939.value)+(((1.5707963267949)*(x10940.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10941=IKsin(j10);
IkReal x10942=IKcos(j10);
IkReal x10943=(cj9*gconst11);
IkReal x10944=(gconst10*sj9);
IkReal x10945=((1.0)*cj8);
IkReal x10946=(gconst11*r00);
IkReal x10947=(sj7*sj8);
IkReal x10948=(cj9*gconst10);
IkReal x10949=(gconst11*sj9);
IkReal x10950=(sj7*x10945);
IkReal x10951=((1.0)*cj7*sj8);
IkReal x10952=((1.0)*x10941);
IkReal x10953=((1.0)*x10942);
IkReal x10954=(cj9*x10941);
IkReal x10955=(gconst10*x10941);
IkReal x10956=(x10942*x10949);
IkReal x10957=(x10942*x10948);
IkReal x10958=(x10950+x10951);
evalcond[0]=((((-1.0)*gconst11*r20*x10952))+(((-1.0)*r22*x10953))+((r21*x10955)));
evalcond[1]=((((-1.0)*r12*x10953))+(((-1.0)*gconst11*r10*x10952))+((r11*x10955)));
evalcond[2]=((-1.0)+(((-1.0)*x10946*x10952))+((r01*x10955))+(((-1.0)*r02*x10953)));
evalcond[3]=(((r02*x10954))+(((-1.0)*r00*x10943*x10953))+((r01*x10949))+((r00*x10944))+((r01*x10957)));
evalcond[4]=((((-1.0)*r02*sj9*x10952))+(((-1.0)*r01*x10944*x10953))+((r01*x10943))+((r00*x10948))+((sj9*x10942*x10946)));
evalcond[5]=(((r21*x10949))+(((-1.0)*cj7*x10945))+((r22*x10954))+((r20*x10944))+(((-1.0)*r20*x10943*x10953))+((r21*x10957))+x10947);
evalcond[6]=(((r11*x10943))+((cj7*cj8))+(((-1.0)*x10947))+((r10*x10956))+((r10*x10948))+(((-1.0)*r12*sj9*x10952))+(((-1.0)*r11*x10944*x10953)));
evalcond[7]=((((-1.0)*r10*x10943*x10953))+((r11*x10949))+((r10*x10944))+(((-1.0)*x10958))+((r12*x10954))+((r11*x10957)));
evalcond[8]=(((r21*x10943))+((r20*x10948))+(((-1.0)*r21*x10944*x10953))+((r20*x10956))+(((-1.0)*r22*sj9*x10952))+(((-1.0)*x10958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
IkReal x10959=((-1.0)*r11);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(x10959),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10960=((1.0)*(x10962.value));
IkReal x10961=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10960)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst10=(x10959*x10961);
IkReal gconst11=((1.0)*r10*x10961);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[3]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x10963=((-1.0)*r11);
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(x10963),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10964=((1.0)*(x10966.value));
IkReal x10965=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x10964)));
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10964)));
IkReal gconst10=(x10963*x10965);
IkReal gconst11=((1.0)*r10*x10965);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10967=gconst10*gconst10;
IkReal x10968=gconst11*gconst11;
IkReal x10969=(r01*r20);
IkReal x10970=((1.0)*sj9);
IkReal x10971=(r00*sj9);
IkReal x10972=(gconst10*gconst11);
IkReal x10973=((1.0)*cj9);
IkReal x10974=(r00*r20);
IkReal x10975=(r01*sj9);
IkReal x10976=(r21*x10967);
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal((((gconst11*r22*x10975))+((gconst10*r22*x10971)))),IkReal(((((-1.0)*x10968*x10969*x10970))+((r21*x10972*x10975))+(((-1.0)*x10970*x10972*x10974))+((x10971*x10976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
CheckValue<IkReal> x10978=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*x10972))+(((-1.0)*r02*r22*x10973))+((cj9*x10969*x10972))+(((-1.0)*r01*x10973*x10976))+(((-1.0)*x10968*x10973*x10974)))),-1);
if(!x10978.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x10977.value)+(((1.5707963267949)*(x10978.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x10979=IKsin(j10);
IkReal x10980=IKcos(j10);
IkReal x10981=(sj7*sj8);
IkReal x10982=(cj9*gconst11);
IkReal x10983=((1.0)*cj8);
IkReal x10984=(gconst11*r00);
IkReal x10985=((1.0)*gconst10);
IkReal x10986=(gconst11*r10);
IkReal x10987=(cj7*sj8);
IkReal x10988=(gconst11*r20);
IkReal x10989=(gconst10*sj9);
IkReal x10990=(cj9*gconst10);
IkReal x10991=(gconst11*sj9);
IkReal x10992=(cj7*x10983);
IkReal x10993=((1.0)*x10979);
IkReal x10994=(sj9*x10980);
IkReal x10995=((1.0)*x10980);
IkReal x10996=(cj9*x10979);
IkReal x10997=(gconst10*x10979);
IkReal x10998=(x10980*x10990);
evalcond[0]=(((r21*x10997))+(((-1.0)*r22*x10995))+(((-1.0)*x10988*x10993)));
evalcond[1]=(((r11*x10997))+(((-1.0)*x10986*x10993))+(((-1.0)*r12*x10995)));
evalcond[2]=((1.0)+((r01*x10997))+(((-1.0)*r02*x10995))+(((-1.0)*x10984*x10993)));
evalcond[3]=(((r00*x10989))+((r01*x10991))+((r01*x10998))+(((-1.0)*r00*x10982*x10995))+((r02*x10996)));
evalcond[4]=((((-1.0)*r01*x10985*x10994))+((r00*x10990))+((r01*x10982))+(((-1.0)*r02*sj9*x10993))+((x10984*x10994)));
evalcond[5]=(((r12*x10996))+((cj8*sj7))+((r11*x10998))+((r11*x10991))+(((-1.0)*r10*x10982*x10995))+((r10*x10989))+x10987);
evalcond[6]=(((r22*x10996))+((r21*x10991))+((r21*x10998))+((r20*x10989))+(((-1.0)*x10992))+x10981+(((-1.0)*r20*x10982*x10995)));
evalcond[7]=(((r11*x10982))+(((-1.0)*r11*x10985*x10994))+((x10986*x10994))+((r10*x10990))+(((-1.0)*x10992))+(((-1.0)*r12*sj9*x10993))+x10981);
evalcond[8]=(((r21*x10982))+(((-1.0)*r21*x10985*x10994))+(((-1.0)*sj7*x10983))+(((-1.0)*x10987))+((r20*x10990))+(((-1.0)*r22*sj9*x10993))+((x10988*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x10999=((1.0)*gconst11);
CheckValue<IkReal> x11000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10999))+(((-1.0)*gconst10*r20)))),-1);
if(!x11000.valid){
continue;
}
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x10999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11000.value)))+(x11001.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11002=IKsin(j10);
IkReal x11003=IKcos(j10);
IkReal x11004=(sj7*sj8);
IkReal x11005=(cj9*gconst11);
IkReal x11006=((1.0)*cj8);
IkReal x11007=(gconst11*r00);
IkReal x11008=((1.0)*gconst10);
IkReal x11009=(gconst11*r10);
IkReal x11010=(cj7*sj8);
IkReal x11011=(gconst11*r20);
IkReal x11012=(gconst10*sj9);
IkReal x11013=(cj9*gconst10);
IkReal x11014=(gconst11*sj9);
IkReal x11015=(cj7*x11006);
IkReal x11016=((1.0)*x11002);
IkReal x11017=(sj9*x11003);
IkReal x11018=((1.0)*x11003);
IkReal x11019=(cj9*x11002);
IkReal x11020=(gconst10*x11002);
IkReal x11021=(x11003*x11013);
evalcond[0]=((((-1.0)*r22*x11018))+((r21*x11020))+(((-1.0)*x11011*x11016)));
evalcond[1]=((((-1.0)*r12*x11018))+((r11*x11020))+(((-1.0)*x11009*x11016)));
evalcond[2]=((1.0)+((r01*x11020))+(((-1.0)*r02*x11018))+(((-1.0)*x11007*x11016)));
evalcond[3]=(((r01*x11021))+(((-1.0)*r00*x11005*x11018))+((r00*x11012))+((r01*x11014))+((r02*x11019)));
evalcond[4]=(((x11007*x11017))+((r01*x11005))+(((-1.0)*r02*sj9*x11016))+((r00*x11013))+(((-1.0)*r01*x11008*x11017)));
evalcond[5]=(((cj8*sj7))+((r10*x11012))+x11010+(((-1.0)*r10*x11005*x11018))+((r11*x11014))+((r12*x11019))+((r11*x11021)));
evalcond[6]=((((-1.0)*x11015))+((r21*x11021))+((r20*x11012))+x11004+((r22*x11019))+((r21*x11014))+(((-1.0)*r20*x11005*x11018)));
evalcond[7]=((((-1.0)*x11015))+((r10*x11013))+(((-1.0)*r12*sj9*x11016))+x11004+(((-1.0)*r11*x11008*x11017))+((x11009*x11017))+((r11*x11005)));
evalcond[8]=((((-1.0)*r21*x11008*x11017))+((r20*x11013))+(((-1.0)*sj7*x11006))+((r21*x11005))+((x11011*x11017))+(((-1.0)*r22*sj9*x11016))+(((-1.0)*x11010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
CheckValue<IkReal> x11023=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11023.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11022.value)+(((1.5707963267949)*(x11023.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11024=IKsin(j10);
IkReal x11025=IKcos(j10);
IkReal x11026=(sj7*sj8);
IkReal x11027=(cj9*gconst11);
IkReal x11028=((1.0)*cj8);
IkReal x11029=(gconst11*r00);
IkReal x11030=((1.0)*gconst10);
IkReal x11031=(gconst11*r10);
IkReal x11032=(cj7*sj8);
IkReal x11033=(gconst11*r20);
IkReal x11034=(gconst10*sj9);
IkReal x11035=(cj9*gconst10);
IkReal x11036=(gconst11*sj9);
IkReal x11037=(cj7*x11028);
IkReal x11038=((1.0)*x11024);
IkReal x11039=(sj9*x11025);
IkReal x11040=((1.0)*x11025);
IkReal x11041=(cj9*x11024);
IkReal x11042=(gconst10*x11024);
IkReal x11043=(x11025*x11035);
evalcond[0]=((((-1.0)*r22*x11040))+(((-1.0)*x11033*x11038))+((r21*x11042)));
evalcond[1]=(((r11*x11042))+(((-1.0)*r12*x11040))+(((-1.0)*x11031*x11038)));
evalcond[2]=((1.0)+((r01*x11042))+(((-1.0)*x11029*x11038))+(((-1.0)*r02*x11040)));
evalcond[3]=(((r01*x11036))+((r00*x11034))+((r01*x11043))+(((-1.0)*r00*x11027*x11040))+((r02*x11041)));
evalcond[4]=(((r01*x11027))+((r00*x11035))+((x11029*x11039))+(((-1.0)*r02*sj9*x11038))+(((-1.0)*r01*x11030*x11039)));
evalcond[5]=(((r11*x11043))+((cj8*sj7))+x11032+((r10*x11034))+((r11*x11036))+((r12*x11041))+(((-1.0)*r10*x11027*x11040)));
evalcond[6]=(((r20*x11034))+((r21*x11036))+(((-1.0)*r20*x11027*x11040))+x11026+((r22*x11041))+((r21*x11043))+(((-1.0)*x11037)));
evalcond[7]=((((-1.0)*r11*x11030*x11039))+(((-1.0)*r12*sj9*x11038))+x11026+((r10*x11035))+((r11*x11027))+((x11031*x11039))+(((-1.0)*x11037)));
evalcond[8]=(((r20*x11035))+(((-1.0)*x11032))+((r21*x11027))+((x11033*x11039))+(((-1.0)*r22*sj9*x11038))+(((-1.0)*sj7*x11028))+(((-1.0)*r21*x11030*x11039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x11044=((-1.0)*r11);
IkReal x11045=((-1.0)*r10);
CheckValue<IkReal> x11047 = IKatan2WithCheck(IkReal(x11044),IkReal(x11045),IKFAST_ATAN2_MAGTHRESH);
if(!x11047.valid){
continue;
}
IkReal x11046=((1.0)*(x11047.value));
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11046)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11045);
rxp1_1=(px*r21);
rxp1_2=(px*x11044);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11046)));
IkReal gconst10=x11044;
IkReal gconst11=((1.0)*r10);
j10eval[0]=-1.0;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x11048=((-1.0)*r11);
IkReal x11049=((-1.0)*r10);
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal(x11048),IkReal(x11049),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
IkReal x11050=((1.0)*(x11051.value));
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11050)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11049);
rxp1_1=(px*r21);
rxp1_2=(px*x11048);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11050)));
IkReal gconst10=x11048;
IkReal gconst11=((1.0)*r10);
IkReal x11052=((1.0)*cj9);
j10eval[0]=-1.0;
j10eval[1]=((((-1.0)*r11*r21*x11052))+(((-1.0)*r10*r20*x11052)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x11053=((-1.0)*r11);
IkReal x11054=((-1.0)*r10);
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(x11053),IkReal(x11054),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
IkReal x11055=((1.0)*(x11056.value));
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11055)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11054);
rxp1_1=(px*r21);
rxp1_2=(px*x11053);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11055)));
IkReal gconst10=x11053;
IkReal gconst11=((1.0)*r10);
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x11057=((-1.0)*r11);
IkReal x11058=((-1.0)*r10);
CheckValue<IkReal> x11060 = IKatan2WithCheck(IkReal(x11057),IkReal(x11058),IKFAST_ATAN2_MAGTHRESH);
if(!x11060.valid){
continue;
}
IkReal x11059=((1.0)*(x11060.value));
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11059)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11058);
rxp1_1=(px*r21);
rxp1_2=(px*x11057);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11059)));
IkReal gconst10=x11057;
IkReal gconst11=((1.0)*r10);
j10eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x11062=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11062.valid){
continue;
}
IkReal x11061=x11062.value;
cj10array[0]=(((cj8*sj7*x11061))+((cj7*sj8*x11061)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x11063=IKsin(j10);
IkReal x11064=(gconst10*x11063);
IkReal x11065=((1.0)*gconst11*x11063);
evalcond[0]=((-1.0)*r02*x11063);
evalcond[1]=(((r21*x11064))+(((-1.0)*r20*x11065)));
evalcond[2]=((((-1.0)*r10*x11065))+((r11*x11064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x11066=((-1.0)*r11);
IkReal x11067=((-1.0)*r10);
CheckValue<IkReal> x11069 = IKatan2WithCheck(IkReal(x11066),IkReal(x11067),IKFAST_ATAN2_MAGTHRESH);
if(!x11069.valid){
continue;
}
IkReal x11068=((1.0)*(x11069.value));
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11068)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11067);
rxp1_1=(px*r21);
rxp1_2=(px*x11066);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11068)));
IkReal gconst10=x11066;
IkReal gconst11=((1.0)*r10);
j10eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x11071=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11071.valid){
continue;
}
IkReal x11070=x11071.value;
cj10array[0]=(((cj7*sj8*x11070))+((cj8*sj7*x11070)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x11072=IKsin(j10);
IkReal x11073=(gconst10*x11072);
IkReal x11074=((1.0)*gconst11*x11072);
evalcond[0]=(r02*x11072);
evalcond[1]=((((-1.0)*r20*x11074))+((r21*x11073)));
evalcond[2]=(((r11*x11073))+(((-1.0)*r10*x11074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11076=IKPowWithIntegerCheck(r02,-1);
if(!x11076.valid){
continue;
}
IkReal x11075=x11076.value;
CheckValue<IkReal> x11077=IKPowWithIntegerCheck(cj9,-1);
if(!x11077.valid){
continue;
}
if( IKabs((x11075*(x11077.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x11075)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11075*(x11077.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x11075))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x11075*(x11077.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x11075));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11078=IKsin(j10);
IkReal x11079=IKcos(j10);
IkReal x11080=(gconst10*sj9);
IkReal x11081=(sj7*sj8);
IkReal x11082=((1.0)*cj6);
IkReal x11083=(cj7*cj8);
IkReal x11084=(cj9*gconst10);
IkReal x11085=(gconst11*r20);
IkReal x11086=(cj9*gconst11);
IkReal x11087=(cj8*sj7);
IkReal x11088=(gconst11*sj9);
IkReal x11089=((1.0)*sj6);
IkReal x11090=((1.0)*x11079);
IkReal x11091=(r02*x11078);
IkReal x11092=((1.0)*cj7*sj8);
IkReal x11093=((1.0)*x11078);
IkReal x11094=(gconst10*x11078);
IkReal x11095=(x11079*x11088);
evalcond[0]=((((-1.0)*r02*x11090))+(((-1.0)*x11089)));
evalcond[1]=((((-1.0)*x11085*x11093))+((r21*x11094)));
evalcond[2]=((((-1.0)*gconst11*r10*x11093))+cj6+((r11*x11094)));
evalcond[3]=((((-1.0)*sj9*x11091))+(((-1.0)*x11081*x11082))+((cj6*x11083)));
evalcond[4]=((((-1.0)*x11082*x11087))+(((-1.0)*cj7*sj8*x11082))+((cj9*x11091)));
evalcond[5]=(((r21*x11079*x11084))+(((-1.0)*x11083))+((r21*x11088))+x11081+(((-1.0)*cj9*x11085*x11090))+((r20*x11080)));
evalcond[6]=((((-1.0)*x11087))+((r21*x11086))+(((-1.0)*x11092))+((sj9*x11079*x11085))+(((-1.0)*r21*x11080*x11090))+((r20*x11084)));
evalcond[7]=((((-1.0)*x11081*x11089))+((r10*x11084))+((r11*x11086))+((r10*x11095))+(((-1.0)*r11*x11080*x11090))+((sj6*x11083)));
evalcond[8]=((((-1.0)*r10*x11086*x11090))+((r11*x11079*x11084))+(((-1.0)*cj7*sj8*x11089))+((r10*x11080))+(((-1.0)*x11087*x11089))+((r11*x11088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11096=((1.0)*r20);
IkReal x11097=((1.0)*gconst11);
CheckValue<IkReal> x11098=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x11097))),-1);
if(!x11098.valid){
continue;
}
CheckValue<IkReal> x11099=IKPowWithIntegerCheck(((((-1.0)*cj9*gconst11*x11096))+((cj9*gconst10*r21))),-1);
if(!x11099.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x11098.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11099.value)*(((((-1.0)*gconst10*sj9*x11096))+((cj7*cj8))+(((-1.0)*r21*sj9*x11097))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x11098.value)))+IKsqr(((x11099.value)*(((((-1.0)*gconst10*sj9*x11096))+((cj7*cj8))+(((-1.0)*r21*sj9*x11097))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x11098.value)), ((x11099.value)*(((((-1.0)*gconst10*sj9*x11096))+((cj7*cj8))+(((-1.0)*r21*sj9*x11097))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11100=IKsin(j10);
IkReal x11101=IKcos(j10);
IkReal x11102=(gconst10*sj9);
IkReal x11103=(sj7*sj8);
IkReal x11104=((1.0)*cj6);
IkReal x11105=(cj7*cj8);
IkReal x11106=(cj9*gconst10);
IkReal x11107=(gconst11*r20);
IkReal x11108=(cj9*gconst11);
IkReal x11109=(cj8*sj7);
IkReal x11110=(gconst11*sj9);
IkReal x11111=((1.0)*sj6);
IkReal x11112=((1.0)*x11101);
IkReal x11113=(r02*x11100);
IkReal x11114=((1.0)*cj7*sj8);
IkReal x11115=((1.0)*x11100);
IkReal x11116=(gconst10*x11100);
IkReal x11117=(x11101*x11110);
evalcond[0]=((((-1.0)*r02*x11112))+(((-1.0)*x11111)));
evalcond[1]=((((-1.0)*x11107*x11115))+((r21*x11116)));
evalcond[2]=(cj6+((r11*x11116))+(((-1.0)*gconst11*r10*x11115)));
evalcond[3]=((((-1.0)*sj9*x11113))+(((-1.0)*x11103*x11104))+((cj6*x11105)));
evalcond[4]=((((-1.0)*x11104*x11109))+(((-1.0)*cj7*sj8*x11104))+((cj9*x11113)));
evalcond[5]=((((-1.0)*x11105))+(((-1.0)*cj9*x11107*x11112))+((r21*x11101*x11106))+x11103+((r21*x11110))+((r20*x11102)));
evalcond[6]=((((-1.0)*x11109))+((sj9*x11101*x11107))+((r21*x11108))+(((-1.0)*r21*x11102*x11112))+((r20*x11106))+(((-1.0)*x11114)));
evalcond[7]=((((-1.0)*x11103*x11111))+((r10*x11117))+((r10*x11106))+((sj6*x11105))+(((-1.0)*r11*x11102*x11112))+((r11*x11108)));
evalcond[8]=(((r11*x11101*x11106))+(((-1.0)*cj7*sj8*x11111))+((r10*x11102))+(((-1.0)*r10*x11108*x11112))+((r11*x11110))+(((-1.0)*x11109*x11111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11118=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11118.valid){
continue;
}
CheckValue<IkReal> x11119=IKPowWithIntegerCheck(r02,-1);
if(!x11119.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x11118.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*(x11119.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x11118.value)))+IKsqr(((-1.0)*sj6*(x11119.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x11118.value)), ((-1.0)*sj6*(x11119.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11120=IKsin(j10);
IkReal x11121=IKcos(j10);
IkReal x11122=(gconst10*sj9);
IkReal x11123=(sj7*sj8);
IkReal x11124=((1.0)*cj6);
IkReal x11125=(cj7*cj8);
IkReal x11126=(cj9*gconst10);
IkReal x11127=(gconst11*r20);
IkReal x11128=(cj9*gconst11);
IkReal x11129=(cj8*sj7);
IkReal x11130=(gconst11*sj9);
IkReal x11131=((1.0)*sj6);
IkReal x11132=((1.0)*x11121);
IkReal x11133=(r02*x11120);
IkReal x11134=((1.0)*cj7*sj8);
IkReal x11135=((1.0)*x11120);
IkReal x11136=(gconst10*x11120);
IkReal x11137=(x11121*x11130);
evalcond[0]=((((-1.0)*r02*x11132))+(((-1.0)*x11131)));
evalcond[1]=((((-1.0)*x11127*x11135))+((r21*x11136)));
evalcond[2]=((((-1.0)*gconst11*r10*x11135))+cj6+((r11*x11136)));
evalcond[3]=(((cj6*x11125))+(((-1.0)*x11123*x11124))+(((-1.0)*sj9*x11133)));
evalcond[4]=((((-1.0)*cj7*sj8*x11124))+((cj9*x11133))+(((-1.0)*x11124*x11129)));
evalcond[5]=(((r21*x11121*x11126))+(((-1.0)*cj9*x11127*x11132))+(((-1.0)*x11125))+((r21*x11130))+x11123+((r20*x11122)));
evalcond[6]=(((r21*x11128))+(((-1.0)*x11129))+(((-1.0)*r21*x11122*x11132))+((sj9*x11121*x11127))+(((-1.0)*x11134))+((r20*x11126)));
evalcond[7]=((((-1.0)*r11*x11122*x11132))+((sj6*x11125))+((r10*x11126))+((r10*x11137))+((r11*x11128))+(((-1.0)*x11123*x11131)));
evalcond[8]=((((-1.0)*x11129*x11131))+(((-1.0)*r10*x11128*x11132))+((r11*x11121*x11126))+(((-1.0)*cj7*sj8*x11131))+((r10*x11122))+((r11*x11130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x11138=((-1.0)*r11);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(x11138),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
IkReal x11139=((1.0)*(x11141.value));
IkReal x11140=x10860;
sj11=gconst10;
cj11=gconst11;
j11=((3.14159265)+(((-1.0)*x11139)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11139)));
IkReal gconst10=(x11138*x11140);
IkReal gconst11=((1.0)*r10*x11140);
IkReal x11142=r12*r12;
IkReal x11143=(cj6*r02);
IkReal x11144=x10860;
IkReal x11145=(sj6*x11144);
j10eval[0]=((IKabs(((((-1.0)*x11145))+((r12*x11143*x11144))+((x11142*x11145)))))+(IKabs(((((-1.0)*x11143))+(((-1.0)*r12*sj6))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11146=((1.0)*cj9);
IkReal x11147=(gconst10*r20);
IkReal x11148=(gconst11*r21);
IkReal x11149=(gconst10*sj9);
IkReal x11150=((1.0)*r21);
IkReal x11151=(r11*sj9);
IkReal x11152=(cj8*sj7);
IkReal x11153=(cj7*sj8);
IkReal x11154=(gconst11*r20*sj9);
CheckValue<IkReal> x11155=IKPowWithIntegerCheck((((gconst11*x11147*x11151))+(((-1.0)*gconst10*r11*x11149*x11150))+(((-1.0)*gconst11*r10*x11154))+((r10*x11148*x11149))),-1);
if(!x11155.valid){
continue;
}
CheckValue<IkReal> x11156=IKPowWithIntegerCheck((x11154+(((-1.0)*x11149*x11150))),-1);
if(!x11156.valid){
continue;
}
if( IKabs(((x11155.value)*(((((-1.0)*r12*x11146*x11147))+(((-1.0)*r12*x11146*x11148))+(((-1.0)*cj6*x11154))+((cj6*r21*x11149))+((r12*x11153))+((r12*x11152)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11156.value)*((x11153+x11152+(((-1.0)*x11146*x11147))+(((-1.0)*x11146*x11148)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11155.value)*(((((-1.0)*r12*x11146*x11147))+(((-1.0)*r12*x11146*x11148))+(((-1.0)*cj6*x11154))+((cj6*r21*x11149))+((r12*x11153))+((r12*x11152))))))+IKsqr(((x11156.value)*((x11153+x11152+(((-1.0)*x11146*x11147))+(((-1.0)*x11146*x11148))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x11155.value)*(((((-1.0)*r12*x11146*x11147))+(((-1.0)*r12*x11146*x11148))+(((-1.0)*cj6*x11154))+((cj6*r21*x11149))+((r12*x11153))+((r12*x11152))))), ((x11156.value)*((x11153+x11152+(((-1.0)*x11146*x11147))+(((-1.0)*x11146*x11148))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11157=IKsin(j10);
IkReal x11158=IKcos(j10);
IkReal x11159=(cj9*r01);
IkReal x11160=(gconst10*sj9);
IkReal x11161=(gconst11*r00);
IkReal x11162=(sj7*sj8);
IkReal x11163=(gconst11*r10);
IkReal x11164=((1.0)*cj6);
IkReal x11165=(cj7*sj8);
IkReal x11166=(cj7*cj8);
IkReal x11167=(cj9*gconst10);
IkReal x11168=(gconst11*r20);
IkReal x11169=(cj9*gconst11);
IkReal x11170=((1.0)*sj6);
IkReal x11171=(cj8*sj7);
IkReal x11172=(gconst11*sj9);
IkReal x11173=((1.0)*x11158);
IkReal x11174=((1.0)*x11157);
IkReal x11175=(gconst10*x11158);
IkReal x11176=(cj9*x11157);
IkReal x11177=(sj9*x11158);
IkReal x11178=(gconst10*x11157);
evalcond[0]=((((-1.0)*x11168*x11174))+((r21*x11178)));
evalcond[1]=((((-1.0)*x11163*x11174))+cj6+((r11*x11178))+(((-1.0)*r12*x11173)));
evalcond[2]=((((-1.0)*x11161*x11174))+((r01*x11178))+(((-1.0)*x11170))+(((-1.0)*r02*x11173)));
evalcond[3]=(((r20*x11160))+x11162+(((-1.0)*x11166))+(((-1.0)*cj9*x11168*x11173))+((r21*x11172))+((r21*x11158*x11167)));
evalcond[4]=(((x11168*x11177))+((r20*x11167))+(((-1.0)*x11171))+(((-1.0)*x11165))+((r21*x11169))+(((-1.0)*r21*x11160*x11173)));
evalcond[5]=(((x11161*x11177))+((r00*x11167))+((cj6*x11166))+((gconst11*x11159))+(((-1.0)*r02*sj9*x11174))+(((-1.0)*r01*x11160*x11173))+(((-1.0)*x11162*x11164)));
evalcond[6]=(((r01*x11172))+((r00*x11160))+(((-1.0)*cj9*x11161*x11173))+((x11159*x11175))+((r02*x11176))+(((-1.0)*x11164*x11171))+(((-1.0)*x11164*x11165)));
evalcond[7]=(((sj6*x11166))+((r11*x11169))+(((-1.0)*r11*x11160*x11173))+((x11163*x11177))+(((-1.0)*r12*sj9*x11174))+((r10*x11167))+(((-1.0)*x11162*x11170)));
evalcond[8]=(((r12*x11176))+((r11*x11172))+((r11*x11158*x11167))+(((-1.0)*x11170*x11171))+((r10*x11160))+(((-1.0)*cj9*x11163*x11173))+(((-1.0)*x11165*x11170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11179=((1.0)*gconst10);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst11*r00))+(((-1.0)*r11*sj6*x11179))+((gconst11*r10*sj6))+(((-1.0)*cj6*r01*x11179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
CheckValue<IkReal> x11181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11179))+(((-1.0)*gconst11*r21)))),-1);
if(!x11181.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11180.value)+(((1.5707963267949)*(x11181.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11182=IKsin(j10);
IkReal x11183=IKcos(j10);
IkReal x11184=(cj9*r01);
IkReal x11185=(gconst10*sj9);
IkReal x11186=(gconst11*r00);
IkReal x11187=(sj7*sj8);
IkReal x11188=(gconst11*r10);
IkReal x11189=((1.0)*cj6);
IkReal x11190=(cj7*sj8);
IkReal x11191=(cj7*cj8);
IkReal x11192=(cj9*gconst10);
IkReal x11193=(gconst11*r20);
IkReal x11194=(cj9*gconst11);
IkReal x11195=((1.0)*sj6);
IkReal x11196=(cj8*sj7);
IkReal x11197=(gconst11*sj9);
IkReal x11198=((1.0)*x11183);
IkReal x11199=((1.0)*x11182);
IkReal x11200=(gconst10*x11183);
IkReal x11201=(cj9*x11182);
IkReal x11202=(sj9*x11183);
IkReal x11203=(gconst10*x11182);
evalcond[0]=(((r21*x11203))+(((-1.0)*x11193*x11199)));
evalcond[1]=((((-1.0)*r12*x11198))+cj6+(((-1.0)*x11188*x11199))+((r11*x11203)));
evalcond[2]=((((-1.0)*x11186*x11199))+(((-1.0)*r02*x11198))+(((-1.0)*x11195))+((r01*x11203)));
evalcond[3]=(((r21*x11197))+((r20*x11185))+(((-1.0)*cj9*x11193*x11198))+x11187+((r21*x11183*x11192))+(((-1.0)*x11191)));
evalcond[4]=(((r21*x11194))+((r20*x11192))+(((-1.0)*r21*x11185*x11198))+((x11193*x11202))+(((-1.0)*x11196))+(((-1.0)*x11190)));
evalcond[5]=((((-1.0)*r02*sj9*x11199))+((r00*x11192))+((cj6*x11191))+(((-1.0)*r01*x11185*x11198))+(((-1.0)*x11187*x11189))+((gconst11*x11184))+((x11186*x11202)));
evalcond[6]=(((r02*x11201))+(((-1.0)*cj9*x11186*x11198))+((r01*x11197))+((r00*x11185))+(((-1.0)*x11189*x11196))+(((-1.0)*x11189*x11190))+((x11184*x11200)));
evalcond[7]=(((x11188*x11202))+((r11*x11194))+(((-1.0)*r12*sj9*x11199))+(((-1.0)*r11*x11185*x11198))+(((-1.0)*x11187*x11195))+((sj6*x11191))+((r10*x11192)));
evalcond[8]=((((-1.0)*x11195*x11196))+(((-1.0)*cj9*x11188*x11198))+((r11*x11197))+((r11*x11183*x11192))+(((-1.0)*x11190*x11195))+((r12*x11201))+((r10*x11185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11204=((1.0)*gconst10);
CheckValue<IkReal> x11205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11204))+(((-1.0)*gconst11*r21)))),-1);
if(!x11205.valid){
continue;
}
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x11204))+((cj6*gconst11*r00))+((gconst11*r10*sj6))+(((-1.0)*r11*sj6*x11204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11205.value)))+(x11206.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11207=IKsin(j10);
IkReal x11208=IKcos(j10);
IkReal x11209=(cj9*r01);
IkReal x11210=(gconst10*sj9);
IkReal x11211=(gconst11*r00);
IkReal x11212=(sj7*sj8);
IkReal x11213=(gconst11*r10);
IkReal x11214=((1.0)*cj6);
IkReal x11215=(cj7*sj8);
IkReal x11216=(cj7*cj8);
IkReal x11217=(cj9*r21);
IkReal x11218=(gconst11*r20);
IkReal x11219=(cj9*r11);
IkReal x11220=(cj9*gconst10);
IkReal x11221=((1.0)*sj6);
IkReal x11222=(cj8*sj7);
IkReal x11223=(gconst11*sj9);
IkReal x11224=((1.0)*x11207);
IkReal x11225=((1.0)*x11208);
IkReal x11226=(gconst10*x11208);
IkReal x11227=(cj9*x11207);
IkReal x11228=(sj9*x11208);
IkReal x11229=(gconst10*x11207);
evalcond[0]=((((-1.0)*x11218*x11224))+((r21*x11229))+(((-1.0)*r22*x11225)));
evalcond[1]=(cj6+(((-1.0)*x11213*x11224))+((r11*x11229))+(((-1.0)*r12*x11225)));
evalcond[2]=((((-1.0)*x11211*x11224))+(((-1.0)*x11221))+((r01*x11229))+(((-1.0)*r02*x11225)));
evalcond[3]=(((r22*x11227))+((r20*x11210))+x11212+((r21*x11223))+((x11217*x11226))+(((-1.0)*x11216))+(((-1.0)*cj9*x11218*x11225)));
evalcond[4]=((((-1.0)*r21*x11210*x11225))+((gconst11*x11217))+((r20*x11220))+(((-1.0)*r22*sj9*x11224))+((x11218*x11228))+(((-1.0)*x11215))+(((-1.0)*x11222)));
evalcond[5]=((((-1.0)*r01*x11210*x11225))+((cj6*x11216))+((gconst11*x11209))+(((-1.0)*r02*sj9*x11224))+(((-1.0)*x11212*x11214))+((r00*x11220))+((x11211*x11228)));
evalcond[6]=((((-1.0)*x11214*x11222))+((x11209*x11226))+((r02*x11227))+((r00*x11210))+((r01*x11223))+(((-1.0)*x11214*x11215))+(((-1.0)*cj9*x11211*x11225)));
evalcond[7]=((((-1.0)*r11*x11210*x11225))+((gconst11*x11219))+(((-1.0)*x11212*x11221))+((sj6*x11216))+(((-1.0)*r12*sj9*x11224))+((x11213*x11228))+((r10*x11220)));
evalcond[8]=(((r12*x11227))+(((-1.0)*x11215*x11221))+((r11*x11223))+((r10*x11210))+((x11219*x11226))+(((-1.0)*x11221*x11222))+(((-1.0)*cj9*x11213*x11225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11230=((1.0)*gconst11);
CheckValue<IkReal> x11231 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x11230))+((gconst10*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11231.valid){
continue;
}
CheckValue<IkReal> x11232=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x11230)))),-1);
if(!x11232.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11231.value)+(((1.5707963267949)*(x11232.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11233=IKsin(j10);
IkReal x11234=IKcos(j10);
IkReal x11235=(cj9*r01);
IkReal x11236=(gconst10*sj9);
IkReal x11237=(gconst11*r00);
IkReal x11238=(sj7*sj8);
IkReal x11239=(gconst11*r10);
IkReal x11240=((1.0)*cj6);
IkReal x11241=(cj7*sj8);
IkReal x11242=(cj7*cj8);
IkReal x11243=(cj9*r21);
IkReal x11244=(gconst11*r20);
IkReal x11245=(cj9*r11);
IkReal x11246=(cj9*gconst10);
IkReal x11247=((1.0)*sj6);
IkReal x11248=(cj8*sj7);
IkReal x11249=(gconst11*sj9);
IkReal x11250=((1.0)*x11233);
IkReal x11251=((1.0)*x11234);
IkReal x11252=(gconst10*x11234);
IkReal x11253=(cj9*x11233);
IkReal x11254=(sj9*x11234);
IkReal x11255=(gconst10*x11233);
evalcond[0]=((((-1.0)*x11244*x11250))+((r21*x11255))+(((-1.0)*r22*x11251)));
evalcond[1]=(cj6+((r11*x11255))+(((-1.0)*x11239*x11250))+(((-1.0)*r12*x11251)));
evalcond[2]=((((-1.0)*r02*x11251))+(((-1.0)*x11247))+((r01*x11255))+(((-1.0)*x11237*x11250)));
evalcond[3]=(((r22*x11253))+(((-1.0)*x11242))+(((-1.0)*cj9*x11244*x11251))+((x11243*x11252))+x11238+((r20*x11236))+((r21*x11249)));
evalcond[4]=((((-1.0)*x11241))+(((-1.0)*x11248))+((x11244*x11254))+((r20*x11246))+(((-1.0)*r22*sj9*x11250))+((gconst11*x11243))+(((-1.0)*r21*x11236*x11251)));
evalcond[5]=((((-1.0)*r01*x11236*x11251))+((x11237*x11254))+(((-1.0)*r02*sj9*x11250))+((gconst11*x11235))+(((-1.0)*x11238*x11240))+((cj6*x11242))+((r00*x11246)));
evalcond[6]=(((r02*x11253))+((x11235*x11252))+(((-1.0)*cj9*x11237*x11251))+((r01*x11249))+((r00*x11236))+(((-1.0)*x11240*x11241))+(((-1.0)*x11240*x11248)));
evalcond[7]=(((x11239*x11254))+((sj6*x11242))+(((-1.0)*r12*sj9*x11250))+((gconst11*x11245))+(((-1.0)*r11*x11236*x11251))+(((-1.0)*x11238*x11247))+((r10*x11246)));
evalcond[8]=(((r11*x11249))+((r12*x11253))+(((-1.0)*cj9*x11239*x11251))+(((-1.0)*x11247*x11248))+(((-1.0)*x11241*x11247))+((r10*x11236))+((x11245*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11256=((1.0)*gconst11);
CheckValue<IkReal> x11257 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x11256))+((cj6*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11257.valid){
continue;
}
CheckValue<IkReal> x11258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11256)))),-1);
if(!x11258.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11257.value)+(((1.5707963267949)*(x11258.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11259=IKsin(j10);
IkReal x11260=IKcos(j10);
IkReal x11261=(cj9*r01);
IkReal x11262=(gconst10*sj9);
IkReal x11263=(gconst11*r00);
IkReal x11264=(sj7*sj8);
IkReal x11265=(gconst11*r10);
IkReal x11266=((1.0)*cj6);
IkReal x11267=(cj7*sj8);
IkReal x11268=(cj7*cj8);
IkReal x11269=(cj9*r21);
IkReal x11270=(gconst11*r20);
IkReal x11271=(cj9*r11);
IkReal x11272=(cj9*gconst10);
IkReal x11273=((1.0)*sj6);
IkReal x11274=(cj8*sj7);
IkReal x11275=(gconst11*sj9);
IkReal x11276=((1.0)*x11259);
IkReal x11277=((1.0)*x11260);
IkReal x11278=(gconst10*x11260);
IkReal x11279=(cj9*x11259);
IkReal x11280=(sj9*x11260);
IkReal x11281=(gconst10*x11259);
evalcond[0]=(((r21*x11281))+(((-1.0)*r22*x11277))+(((-1.0)*x11270*x11276)));
evalcond[1]=((((-1.0)*x11265*x11276))+(((-1.0)*r12*x11277))+cj6+((r11*x11281)));
evalcond[2]=((((-1.0)*x11263*x11276))+(((-1.0)*r02*x11277))+(((-1.0)*x11273))+((r01*x11281)));
evalcond[3]=((((-1.0)*x11268))+x11264+((r22*x11279))+(((-1.0)*cj9*x11270*x11277))+((r21*x11275))+((r20*x11262))+((x11269*x11278)));
evalcond[4]=((((-1.0)*r22*sj9*x11276))+(((-1.0)*x11267))+(((-1.0)*x11274))+(((-1.0)*r21*x11262*x11277))+((x11270*x11280))+((gconst11*x11269))+((r20*x11272)));
evalcond[5]=(((r00*x11272))+((cj6*x11268))+(((-1.0)*r01*x11262*x11277))+((x11263*x11280))+(((-1.0)*r02*sj9*x11276))+((gconst11*x11261))+(((-1.0)*x11264*x11266)));
evalcond[6]=(((x11261*x11278))+((r01*x11275))+((r02*x11279))+(((-1.0)*cj9*x11263*x11277))+(((-1.0)*x11266*x11274))+(((-1.0)*x11266*x11267))+((r00*x11262)));
evalcond[7]=(((r10*x11272))+(((-1.0)*r11*x11262*x11277))+((gconst11*x11271))+((x11265*x11280))+(((-1.0)*x11264*x11273))+(((-1.0)*r12*sj9*x11276))+((sj6*x11268)));
evalcond[8]=(((r12*x11279))+(((-1.0)*cj9*x11265*x11277))+(((-1.0)*x11273*x11274))+(((-1.0)*x11267*x11273))+((r10*x11262))+((x11271*x11278))+((r11*x11275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x11282=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x11282;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x11282);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x11283=((1.0)*cj11);
IkReal x11284=((((-1.0)*r01*x11283))+(((-1.0)*r00*sj11)));
j10eval[0]=x11284;
j10eval[1]=((IKabs(((((-1.0)*r20*x11283))+((r21*sj11)))))+(IKabs(r22)));
j10eval[2]=IKsign(x11284);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj6=0;
cj6=1.0;
j6=0;
IkReal x11285=cj11*cj11;
IkReal x11286=(cj9*r21);
IkReal x11287=(cj11*sj11);
IkReal x11288=(cj9*r20);
IkReal x11289=((((-1.0)*cj9*r12*r22))+((r11*x11287*x11288))+(((-1.0)*r10*x11285*x11288))+(((-1.0)*r11*x11286))+((r11*x11285*x11286))+((r10*x11286*x11287)));
j10eval[0]=x11289;
j10eval[1]=IKsign(x11289);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x11290=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x11290;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x11290);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x11291=((1.0)*cj11);
IkReal x11292=((((-1.0)*r01*x11291))+(((-1.0)*r00*sj11)));
j10eval[0]=x11292;
j10eval[1]=((IKabs(((((-1.0)*r20*x11291))+((r21*sj11)))))+(IKabs(r22)));
j10eval[2]=IKsign(x11292);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x11293=cj11*cj11;
IkReal x11294=r11*r11;
IkReal x11295=(r11*sj11);
IkReal x11296=(cj11*r10);
IkReal x11297=((r12*r12)+x11294+(((-2.0)*x11295*x11296))+(((-1.0)*x11293*x11294))+((x11293*(r10*r10))));
j10eval[0]=x11297;
j10eval[1]=((IKabs(r12))+(IKabs((x11296+(((-1.0)*x11295))))));
j10eval[2]=IKsign(x11297);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x11298=((-1.0)*px);
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11298);
rxp1_1=(px*r21);
rxp1_2=(r11*x11298);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
j10eval[1]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x11299=((-1.0)*px);
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11299);
rxp1_1=(px*r21);
rxp1_2=(r11*x11299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=r02;
j10eval[1]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(r02,-1);
if(!x11300.valid){
continue;
}
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x11301.valid){
continue;
}
if( IKabs(((x11300.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11301.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11300.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x11301.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x11300.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x11301.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11302=IKsin(j10);
IkReal x11303=IKcos(j10);
IkReal x11304=((1.0)*sj8);
IkReal x11305=(cj11*r20);
IkReal x11306=(cj11*r10);
IkReal x11307=(sj11*x11302);
IkReal x11308=((1.0)*x11302);
IkReal x11309=((1.0)*sj11*x11303);
evalcond[0]=((-1.0)*r02*x11303);
evalcond[1]=((((-1.0)*x11305*x11308))+((r21*x11307)));
evalcond[2]=((((-1.0)*r02*x11308))+((cj7*cj8))+(((-1.0)*sj7*x11304)));
evalcond[3]=((((-1.0)*r11*x11309))+((x11303*x11306)));
evalcond[4]=((1.0)+((r11*x11307))+(((-1.0)*x11306*x11308)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*cj7*x11304))+(((-1.0)*r21*x11309))+((x11303*x11305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x11311.valid){
continue;
}
if( IKabs(((-1.0)*(x11310.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11311.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11310.value)))+IKsqr(((x11311.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x11310.value)), ((x11311.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11312=IKsin(j10);
IkReal x11313=IKcos(j10);
IkReal x11314=((1.0)*sj8);
IkReal x11315=(cj11*r20);
IkReal x11316=(cj11*r10);
IkReal x11317=(sj11*x11312);
IkReal x11318=((1.0)*x11312);
IkReal x11319=((1.0)*sj11*x11313);
evalcond[0]=((-1.0)*r02*x11313);
evalcond[1]=(((r21*x11317))+(((-1.0)*x11315*x11318)));
evalcond[2]=((((-1.0)*r02*x11318))+((cj7*cj8))+(((-1.0)*sj7*x11314)));
evalcond[3]=((((-1.0)*r11*x11319))+((x11313*x11316)));
evalcond[4]=((1.0)+((r11*x11317))+(((-1.0)*x11316*x11318)));
evalcond[5]=((((-1.0)*cj7*x11314))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*x11319))+((x11313*x11315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x11320=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11320);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11320);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
j10eval[1]=(((cj11*r00))+(((-1.0)*r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x11321=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11321);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11321);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=r22;
j10eval[1]=(((cj11*r00))+(((-1.0)*r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11322=((1.0)*cj8);
CheckValue<IkReal> x11323=IKPowWithIntegerCheck(r22,-1);
if(!x11323.valid){
continue;
}
CheckValue<IkReal> x11324=IKPowWithIntegerCheck((((cj11*r00))+(((-1.0)*r01*sj11))),-1);
if(!x11324.valid){
continue;
}
if( IKabs(((x11323.value)*(((((-1.0)*cj7*sj8))+(((-1.0)*sj7*x11322)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11324.value)*(((((-1.0)*cj7*x11322))+((sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11323.value)*(((((-1.0)*cj7*sj8))+(((-1.0)*sj7*x11322))))))+IKsqr(((x11324.value)*(((((-1.0)*cj7*x11322))+((sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x11323.value)*(((((-1.0)*cj7*sj8))+(((-1.0)*sj7*x11322))))), ((x11324.value)*(((((-1.0)*cj7*x11322))+((sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11325=IKsin(j10);
IkReal x11326=IKcos(j10);
IkReal x11327=((1.0)*sj7);
IkReal x11328=(r11*sj11);
IkReal x11329=(r01*sj11);
IkReal x11330=((1.0)*x11326);
IkReal x11331=((1.0)*x11325);
IkReal x11332=(cj11*x11326);
evalcond[0]=((-1.0)*r22*x11326);
evalcond[1]=(((x11325*x11329))+(((-1.0)*cj11*r00*x11331)));
evalcond[2]=(((r10*x11332))+(((-1.0)*x11328*x11330)));
evalcond[3]=((1.0)+((x11325*x11328))+(((-1.0)*cj11*r10*x11331)));
evalcond[4]=((((-1.0)*r22*x11331))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x11327)));
evalcond[5]=(((cj7*cj8))+(((-1.0)*sj8*x11327))+((r00*x11332))+(((-1.0)*x11329*x11330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11333=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x11333.valid){
continue;
}
CheckValue<IkReal> x11334=IKPowWithIntegerCheck((((cj11*r00))+(((-1.0)*r01*sj11))),-1);
if(!x11334.valid){
continue;
}
if( IKabs(((-1.0)*(x11333.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11334.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11333.value)))+IKsqr(((x11334.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x11333.value)), ((x11334.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11335=IKsin(j10);
IkReal x11336=IKcos(j10);
IkReal x11337=((1.0)*sj7);
IkReal x11338=(r11*sj11);
IkReal x11339=(r01*sj11);
IkReal x11340=((1.0)*x11336);
IkReal x11341=((1.0)*x11335);
IkReal x11342=(cj11*x11336);
evalcond[0]=((-1.0)*r22*x11336);
evalcond[1]=((((-1.0)*cj11*r00*x11341))+((x11335*x11339)));
evalcond[2]=(((r10*x11342))+(((-1.0)*x11338*x11340)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x11341))+((x11335*x11338)));
evalcond[4]=((((-1.0)*cj8*x11337))+(((-1.0)*r22*x11341))+(((-1.0)*cj7*sj8)));
evalcond[5]=((((-1.0)*x11339*x11340))+((cj7*cj8))+((r00*x11342))+(((-1.0)*sj8*x11337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11343=cj11*cj11;
IkReal x11344=r11*r11;
IkReal x11345=(cj11*r10);
IkReal x11346=(r11*sj11);
CheckValue<IkReal> x11347=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11345*x11346))+((x11343*(r10*r10)))+x11344+(((-1.0)*x11343*x11344)))),-1);
if(!x11347.valid){
continue;
}
CheckValue<IkReal> x11348 = IKatan2WithCheck(IkReal((x11345+(((-1.0)*x11346)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11348.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11347.value)))+(x11348.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11349=IKsin(j10);
IkReal x11350=IKcos(j10);
IkReal x11351=((1.0)*sj8);
IkReal x11352=(sj11*x11349);
IkReal x11353=((1.0)*x11350);
IkReal x11354=((1.0)*x11349);
IkReal x11355=(cj11*x11350);
evalcond[0]=((((-1.0)*cj11*r20*x11354))+(((-1.0)*r22*x11353))+((r21*x11352)));
evalcond[1]=((((-1.0)*cj11*r00*x11354))+((r01*x11352))+(((-1.0)*r02*x11353)));
evalcond[2]=((((-1.0)*r12*x11354))+((r10*x11355))+(((-1.0)*r11*sj11*x11353)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x11354))+(((-1.0)*r12*x11353))+((r11*x11352)));
evalcond[4]=((((-1.0)*sj7*x11351))+((cj7*cj8))+((r00*x11355))+(((-1.0)*r02*x11354))+(((-1.0)*r01*sj11*x11353)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r20*x11355))+(((-1.0)*r22*x11354))+(((-1.0)*r21*sj11*x11353))+(((-1.0)*cj7*x11351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11356=((1.0)*cj11);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11356))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x11356)))),-1);
if(!x11358.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11357.value)+(((1.5707963267949)*(x11358.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11359=IKsin(j10);
IkReal x11360=IKcos(j10);
IkReal x11361=((1.0)*sj8);
IkReal x11362=(sj11*x11359);
IkReal x11363=((1.0)*x11360);
IkReal x11364=((1.0)*x11359);
IkReal x11365=(cj11*x11360);
evalcond[0]=(((r21*x11362))+(((-1.0)*r22*x11363))+(((-1.0)*cj11*r20*x11364)));
evalcond[1]=(((r01*x11362))+(((-1.0)*r02*x11363))+(((-1.0)*cj11*r00*x11364)));
evalcond[2]=((((-1.0)*r11*sj11*x11363))+((r10*x11365))+(((-1.0)*r12*x11364)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x11364))+(((-1.0)*r12*x11363))+((r11*x11362)));
evalcond[4]=(((r00*x11365))+(((-1.0)*r01*sj11*x11363))+(((-1.0)*r02*x11364))+((cj7*cj8))+(((-1.0)*sj7*x11361)));
evalcond[5]=((((-1.0)*r22*x11364))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x11361))+(((-1.0)*r21*sj11*x11363))+((r20*x11365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11366=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x11366.valid){
continue;
}
CheckValue<IkReal> x11367 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11367.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11366.value)))+(x11367.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11368=IKsin(j10);
IkReal x11369=IKcos(j10);
IkReal x11370=((1.0)*sj8);
IkReal x11371=(sj11*x11368);
IkReal x11372=((1.0)*x11369);
IkReal x11373=((1.0)*x11368);
IkReal x11374=(cj11*x11369);
evalcond[0]=(((r21*x11371))+(((-1.0)*r22*x11372))+(((-1.0)*cj11*r20*x11373)));
evalcond[1]=(((r01*x11371))+(((-1.0)*r02*x11372))+(((-1.0)*cj11*r00*x11373)));
evalcond[2]=((((-1.0)*r11*sj11*x11372))+((r10*x11374))+(((-1.0)*r12*x11373)));
evalcond[3]=((1.0)+(((-1.0)*cj11*r10*x11373))+((r11*x11371))+(((-1.0)*r12*x11372)));
evalcond[4]=(((r00*x11374))+(((-1.0)*r01*sj11*x11372))+(((-1.0)*r02*x11373))+((cj7*cj8))+(((-1.0)*sj7*x11370)));
evalcond[5]=(((r20*x11374))+(((-1.0)*r22*x11373))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x11372))+(((-1.0)*cj7*x11370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x11375=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x11375;
j10eval[1]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x11375);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x11376=((1.0)*cj11);
IkReal x11377=((((-1.0)*r00*sj11))+(((-1.0)*r01*x11376)));
j10eval[0]=x11377;
j10eval[1]=((IKabs(r22))+(IKabs((((r21*sj11))+(((-1.0)*r20*x11376))))));
j10eval[2]=IKsign(x11377);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x11378=(sj7*sj8);
IkReal x11379=(cj11*r10);
IkReal x11380=(r11*sj11);
IkReal x11381=((1.0)*cj7*cj8);
IkReal x11382=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x11382;
j10eval[1]=((IKabs((((r12*x11378))+(((-1.0)*r12*x11381)))))+(IKabs(((((-1.0)*x11379*x11381))+((cj7*cj8*x11380))+((x11378*x11379))+(((-1.0)*x11378*x11380))))));
j10eval[2]=IKsign(x11382);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x11383=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11383);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11383);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=r22;
j10eval[1]=((((-1.0)*cj11*r00))+((r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x11384=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11384);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11384);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11385=((1.0)*cj11);
j10eval[0]=(((r11*sj11))+(((-1.0)*r10*x11385)));
j10eval[1]=(((r01*sj11))+(((-1.0)*r00*x11385)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11386=((1.0)*cj11);
CheckValue<IkReal> x11387=IKPowWithIntegerCheck((((r11*sj11))+(((-1.0)*r10*x11386))),-1);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388=IKPowWithIntegerCheck((((r01*sj11))+(((-1.0)*r00*x11386))),-1);
if(!x11388.valid){
continue;
}
if( IKabs(((-1.0)*(x11387.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11388.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11387.value)))+IKsqr(((x11388.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x11387.value)), ((x11388.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11389=IKsin(j10);
IkReal x11390=IKcos(j10);
IkReal x11391=((1.0)*sj7);
IkReal x11392=(sj11*x11390);
IkReal x11393=(sj11*x11389);
IkReal x11394=((1.0)*cj11*x11390);
IkReal x11395=((1.0)*cj11*x11389);
evalcond[0]=((-1.0)*r22*x11390);
evalcond[1]=(((r01*x11393))+(((-1.0)*r00*x11395)));
evalcond[2]=((((-1.0)*cj7*sj8))+((r22*x11389))+(((-1.0)*cj8*x11391)));
evalcond[3]=(((r11*x11392))+(((-1.0)*r10*x11394)));
evalcond[4]=((1.0)+((r11*x11393))+(((-1.0)*r10*x11395)));
evalcond[5]=((((-1.0)*sj8*x11391))+((r01*x11392))+(((-1.0)*r00*x11394))+((cj7*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11396=IKPowWithIntegerCheck(r22,-1);
if(!x11396.valid){
continue;
}
CheckValue<IkReal> x11397=IKPowWithIntegerCheck(((((-1.0)*cj11*r00))+((r01*sj11))),-1);
if(!x11397.valid){
continue;
}
if( IKabs(((x11396.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11397.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11396.value)*((((cj8*sj7))+((cj7*sj8))))))+IKsqr(((x11397.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x11396.value)*((((cj8*sj7))+((cj7*sj8))))), ((x11397.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11398=IKsin(j10);
IkReal x11399=IKcos(j10);
IkReal x11400=((1.0)*sj7);
IkReal x11401=(sj11*x11399);
IkReal x11402=(sj11*x11398);
IkReal x11403=((1.0)*cj11*x11399);
IkReal x11404=((1.0)*cj11*x11398);
evalcond[0]=((-1.0)*r22*x11399);
evalcond[1]=((((-1.0)*r00*x11404))+((r01*x11402)));
evalcond[2]=((((-1.0)*cj8*x11400))+(((-1.0)*cj7*sj8))+((r22*x11398)));
evalcond[3]=(((r11*x11401))+(((-1.0)*r10*x11403)));
evalcond[4]=((1.0)+((r11*x11402))+(((-1.0)*r10*x11404)));
evalcond[5]=((((-1.0)*sj8*x11400))+((cj7*cj8))+(((-1.0)*r00*x11403))+((r01*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11405=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x11405;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11405);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11406=((1.0)*cj11);
IkReal x11407=((((-1.0)*r11*x11406))+(((-1.0)*r10*sj11)));
j10eval[0]=x11407;
j10eval[1]=IKsign(x11407);
j10eval[2]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x11406))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11408=cj11*cj11;
IkReal x11409=(r01*r11);
IkReal x11410=((1.0)*r00);
IkReal x11411=(r01*sj11);
IkReal x11412=(((x11408*x11409))+((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*r10*x11408*x11410))+((cj11*r10*x11411))+(((-1.0)*x11409)));
j10eval[0]=x11412;
j10eval[1]=IKsign(x11412);
j10eval[2]=((IKabs(r02))+(IKabs((x11411+(((-1.0)*cj11*x11410))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11413=cj11*cj11;
IkReal x11414=(r01*r11);
IkReal x11415=((1.0)*r00);
IkReal x11416=(r01*sj11);
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+((cj11*r10*x11416))+(((-1.0)*x11414))+(((-1.0)*r10*x11413*x11415))+((x11413*x11414)))),-1);
if(!x11417.valid){
continue;
}
CheckValue<IkReal> x11418 = IKatan2WithCheck(IkReal((x11416+(((-1.0)*cj11*x11415)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11418.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11417.value)))+(x11418.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11419=IKcos(j10);
IkReal x11420=IKsin(j10);
IkReal x11421=(cj11*r10);
IkReal x11422=(cj11*r20);
IkReal x11423=(cj11*r00);
IkReal x11424=((1.0)*x11419);
IkReal x11425=(sj11*x11419);
IkReal x11426=(sj11*x11420);
IkReal x11427=((1.0)*x11420);
evalcond[0]=(((r02*x11420))+((r01*x11425))+(((-1.0)*x11423*x11424)));
evalcond[1]=((((-1.0)*x11421*x11424))+((r11*x11425))+((r12*x11420)));
evalcond[2]=(((r21*x11426))+(((-1.0)*r22*x11424))+(((-1.0)*x11422*x11427)));
evalcond[3]=((((-1.0)*r02*x11424))+((r01*x11426))+(((-1.0)*x11423*x11427)));
evalcond[4]=((-1.0)+((r21*x11425))+((r22*x11420))+(((-1.0)*x11422*x11424)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11424))+(((-1.0)*x11421*x11427))+((r11*x11426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11428=((1.0)*cj11);
CheckValue<IkReal> x11429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11428))+(((-1.0)*r10*sj11)))),-1);
if(!x11429.valid){
continue;
}
CheckValue<IkReal> x11430 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11428))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11430.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11429.value)))+(x11430.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11431=IKcos(j10);
IkReal x11432=IKsin(j10);
IkReal x11433=(cj11*r10);
IkReal x11434=(cj11*r20);
IkReal x11435=(cj11*r00);
IkReal x11436=((1.0)*x11431);
IkReal x11437=(sj11*x11431);
IkReal x11438=(sj11*x11432);
IkReal x11439=((1.0)*x11432);
evalcond[0]=(((r02*x11432))+(((-1.0)*x11435*x11436))+((r01*x11437)));
evalcond[1]=((((-1.0)*x11433*x11436))+((r11*x11437))+((r12*x11432)));
evalcond[2]=((((-1.0)*x11434*x11439))+((r21*x11438))+(((-1.0)*r22*x11436)));
evalcond[3]=((((-1.0)*r02*x11436))+(((-1.0)*x11435*x11439))+((r01*x11438)));
evalcond[4]=((-1.0)+(((-1.0)*x11434*x11436))+((r21*x11437))+((r22*x11432)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11436))+(((-1.0)*x11433*x11439))+((r11*x11438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11440=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x11440.valid){
continue;
}
CheckValue<IkReal> x11441 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11441.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11440.value)))+(x11441.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11442=IKcos(j10);
IkReal x11443=IKsin(j10);
IkReal x11444=(cj11*r10);
IkReal x11445=(cj11*r20);
IkReal x11446=(cj11*r00);
IkReal x11447=((1.0)*x11442);
IkReal x11448=(sj11*x11442);
IkReal x11449=(sj11*x11443);
IkReal x11450=((1.0)*x11443);
evalcond[0]=((((-1.0)*x11446*x11447))+((r02*x11443))+((r01*x11448)));
evalcond[1]=(((r12*x11443))+((r11*x11448))+(((-1.0)*x11444*x11447)));
evalcond[2]=((((-1.0)*r22*x11447))+(((-1.0)*x11445*x11450))+((r21*x11449)));
evalcond[3]=((((-1.0)*r02*x11447))+(((-1.0)*x11446*x11450))+((r01*x11449)));
evalcond[4]=((-1.0)+(((-1.0)*x11445*x11447))+((r22*x11443))+((r21*x11448)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11447))+((r11*x11449))+(((-1.0)*x11444*x11450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11451=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x11451;
j10eval[1]=IKsign(x11451);
j10eval[2]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11452=((1.0)*cj11);
IkReal x11453=((((-1.0)*r00*sj11))+(((-1.0)*r01*x11452)));
j10eval[0]=x11453;
j10eval[1]=((IKabs(((((-1.0)*r10*x11452))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11453);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=0;
sj7=0;
cj7=1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11454=cj11*cj11;
IkReal x11455=(r01*r11);
IkReal x11456=((1.0)*r00);
IkReal x11457=(r01*sj11);
IkReal x11458=(((cj11*r10*x11457))+((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*r10*x11454*x11456))+(((-1.0)*x11455))+((x11454*x11455)));
j10eval[0]=x11458;
j10eval[1]=IKsign(x11458);
j10eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj11*x11456))+x11457))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11459=cj11*cj11;
IkReal x11460=(r01*r11);
IkReal x11461=((1.0)*r00);
IkReal x11462=(r01*sj11);
CheckValue<IkReal> x11463=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+((cj11*r10*x11462))+((x11459*x11460))+(((-1.0)*r10*x11459*x11461))+(((-1.0)*x11460)))),-1);
if(!x11463.valid){
continue;
}
CheckValue<IkReal> x11464 = IKatan2WithCheck(IkReal((x11462+(((-1.0)*cj11*x11461)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11464.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11463.value)))+(x11464.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11465=IKcos(j10);
IkReal x11466=IKsin(j10);
IkReal x11467=(cj11*r10);
IkReal x11468=(cj11*r20);
IkReal x11469=(cj11*r00);
IkReal x11470=((1.0)*x11465);
IkReal x11471=(sj11*x11465);
IkReal x11472=(sj11*x11466);
IkReal x11473=((1.0)*x11466);
evalcond[0]=((((-1.0)*x11469*x11470))+((r02*x11466))+((r01*x11471)));
evalcond[1]=(((r12*x11466))+((r11*x11471))+(((-1.0)*x11467*x11470)));
evalcond[2]=((((-1.0)*x11468*x11473))+(((-1.0)*r22*x11470))+((r21*x11472)));
evalcond[3]=((((-1.0)*x11469*x11473))+(((-1.0)*r02*x11470))+((r01*x11472)));
evalcond[4]=((1.0)+((r22*x11466))+(((-1.0)*x11468*x11470))+((r21*x11471)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11470))+((r11*x11472))+(((-1.0)*x11467*x11473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11474=((1.0)*cj11);
CheckValue<IkReal> x11475 = IKatan2WithCheck(IkReal((((r11*sj11))+(((-1.0)*r10*x11474)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11475.valid){
continue;
}
CheckValue<IkReal> x11476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11474))+(((-1.0)*r00*sj11)))),-1);
if(!x11476.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11475.value)+(((1.5707963267949)*(x11476.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11477=IKcos(j10);
IkReal x11478=IKsin(j10);
IkReal x11479=(cj11*r10);
IkReal x11480=(cj11*r20);
IkReal x11481=(cj11*r00);
IkReal x11482=((1.0)*x11477);
IkReal x11483=(sj11*x11477);
IkReal x11484=(sj11*x11478);
IkReal x11485=((1.0)*x11478);
evalcond[0]=(((r01*x11483))+((r02*x11478))+(((-1.0)*x11481*x11482)));
evalcond[1]=(((r12*x11478))+(((-1.0)*x11479*x11482))+((r11*x11483)));
evalcond[2]=((((-1.0)*x11480*x11485))+(((-1.0)*r22*x11482))+((r21*x11484)));
evalcond[3]=((((-1.0)*r02*x11482))+((r01*x11484))+(((-1.0)*x11481*x11485)));
evalcond[4]=((1.0)+(((-1.0)*x11480*x11482))+((r22*x11478))+((r21*x11483)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11482))+(((-1.0)*x11479*x11485))+((r11*x11484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11486=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x11486.valid){
continue;
}
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11486.value)))+(x11487.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11488=IKcos(j10);
IkReal x11489=IKsin(j10);
IkReal x11490=(cj11*r10);
IkReal x11491=(cj11*r20);
IkReal x11492=(cj11*r00);
IkReal x11493=((1.0)*x11488);
IkReal x11494=(sj11*x11488);
IkReal x11495=(sj11*x11489);
IkReal x11496=((1.0)*x11489);
evalcond[0]=(((r02*x11489))+(((-1.0)*x11492*x11493))+((r01*x11494)));
evalcond[1]=((((-1.0)*x11490*x11493))+((r11*x11494))+((r12*x11489)));
evalcond[2]=((((-1.0)*x11491*x11496))+((r21*x11495))+(((-1.0)*r22*x11493)));
evalcond[3]=((((-1.0)*r02*x11493))+(((-1.0)*x11492*x11496))+((r01*x11495)));
evalcond[4]=((1.0)+(((-1.0)*x11491*x11493))+((r21*x11494))+((r22*x11489)));
evalcond[5]=((1.0)+(((-1.0)*x11490*x11496))+((r11*x11495))+(((-1.0)*r12*x11493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11497=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x11497;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11497);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11498=((1.0)*cj11);
IkReal x11499=((((-1.0)*r11*x11498))+(((-1.0)*r10*sj11)));
j10eval[0]=x11499;
j10eval[1]=IKsign(x11499);
j10eval[2]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x11498))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11500=cj11*cj11;
IkReal x11501=(r01*r11);
IkReal x11502=((1.0)*r00);
IkReal x11503=(r01*sj11);
IkReal x11504=(((cj11*r00*r11*sj11))+((x11500*x11501))+(((-1.0)*r02*r12))+(((-1.0)*x11501))+(((-1.0)*r10*x11500*x11502))+((cj11*r10*x11503)));
j10eval[0]=x11504;
j10eval[1]=IKsign(x11504);
j10eval[2]=((IKabs(r02))+(IKabs((x11503+(((-1.0)*cj11*x11502))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11505=cj11*cj11;
IkReal x11506=(r01*r11);
IkReal x11507=((1.0)*r00);
IkReal x11508=(r01*sj11);
CheckValue<IkReal> x11509=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+((x11505*x11506))+(((-1.0)*r02*r12))+(((-1.0)*r10*x11505*x11507))+(((-1.0)*x11506))+((cj11*r10*x11508)))),-1);
if(!x11509.valid){
continue;
}
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal((x11508+(((-1.0)*cj11*x11507)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11509.value)))+(x11510.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11511=IKcos(j10);
IkReal x11512=IKsin(j10);
IkReal x11513=(cj11*r10);
IkReal x11514=(cj11*r20);
IkReal x11515=(cj11*r00);
IkReal x11516=((1.0)*x11511);
IkReal x11517=(sj11*x11511);
IkReal x11518=(sj11*x11512);
IkReal x11519=((1.0)*x11512);
evalcond[0]=(((r01*x11517))+((r02*x11512))+(((-1.0)*x11515*x11516)));
evalcond[1]=((((-1.0)*x11513*x11516))+((r12*x11512))+((r11*x11517)));
evalcond[2]=((((-1.0)*r22*x11516))+((r21*x11518))+(((-1.0)*x11514*x11519)));
evalcond[3]=(((r01*x11518))+(((-1.0)*r02*x11516))+(((-1.0)*x11515*x11519)));
evalcond[4]=((-1.0)+((r22*x11512))+((r21*x11517))+(((-1.0)*x11514*x11516)));
evalcond[5]=((1.0)+(((-1.0)*x11513*x11519))+(((-1.0)*r12*x11516))+((r11*x11518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11520=((1.0)*cj11);
CheckValue<IkReal> x11521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x11520)))),-1);
if(!x11521.valid){
continue;
}
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11520))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11521.value)))+(x11522.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11523=IKcos(j10);
IkReal x11524=IKsin(j10);
IkReal x11525=(cj11*r10);
IkReal x11526=(cj11*r20);
IkReal x11527=(cj11*r00);
IkReal x11528=((1.0)*x11523);
IkReal x11529=(sj11*x11523);
IkReal x11530=(sj11*x11524);
IkReal x11531=((1.0)*x11524);
evalcond[0]=((((-1.0)*x11527*x11528))+((r01*x11529))+((r02*x11524)));
evalcond[1]=(((r11*x11529))+((r12*x11524))+(((-1.0)*x11525*x11528)));
evalcond[2]=(((r21*x11530))+(((-1.0)*r22*x11528))+(((-1.0)*x11526*x11531)));
evalcond[3]=((((-1.0)*r02*x11528))+(((-1.0)*x11527*x11531))+((r01*x11530)));
evalcond[4]=((-1.0)+(((-1.0)*x11526*x11528))+((r21*x11529))+((r22*x11524)));
evalcond[5]=((1.0)+((r11*x11530))+(((-1.0)*x11525*x11531))+(((-1.0)*r12*x11528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11532=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x11532.valid){
continue;
}
CheckValue<IkReal> x11533 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11533.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11532.value)))+(x11533.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11534=IKcos(j10);
IkReal x11535=IKsin(j10);
IkReal x11536=(cj11*r10);
IkReal x11537=(cj11*r20);
IkReal x11538=(cj11*r00);
IkReal x11539=((1.0)*x11534);
IkReal x11540=(sj11*x11534);
IkReal x11541=(sj11*x11535);
IkReal x11542=((1.0)*x11535);
evalcond[0]=((((-1.0)*x11538*x11539))+((r01*x11540))+((r02*x11535)));
evalcond[1]=(((r12*x11535))+((r11*x11540))+(((-1.0)*x11536*x11539)));
evalcond[2]=((((-1.0)*x11537*x11542))+((r21*x11541))+(((-1.0)*r22*x11539)));
evalcond[3]=(((r01*x11541))+(((-1.0)*x11538*x11542))+(((-1.0)*r02*x11539)));
evalcond[4]=((-1.0)+((r22*x11535))+((r21*x11540))+(((-1.0)*x11537*x11539)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11539))+(((-1.0)*x11536*x11542))+((r11*x11541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11543=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x11543;
j10eval[1]=IKsign(x11543);
j10eval[2]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11544=((1.0)*cj11);
IkReal x11545=((((-1.0)*r01*x11544))+(((-1.0)*r00*sj11)));
j10eval[0]=x11545;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x11544))))));
j10eval[2]=IKsign(x11545);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11546=cj11*cj11;
IkReal x11547=(r01*r11);
IkReal x11548=((1.0)*r00);
IkReal x11549=(r01*sj11);
IkReal x11550=(((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*x11547))+((x11546*x11547))+((cj11*r10*x11549))+(((-1.0)*r10*x11546*x11548)));
j10eval[0]=x11550;
j10eval[1]=IKsign(x11550);
j10eval[2]=((IKabs(r02))+(IKabs((x11549+(((-1.0)*cj11*x11548))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11551=cj11*cj11;
IkReal x11552=(r01*r11);
IkReal x11553=((1.0)*r00);
IkReal x11554=(r01*sj11);
CheckValue<IkReal> x11555=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+((x11551*x11552))+((cj11*r10*x11554))+(((-1.0)*r10*x11551*x11553))+(((-1.0)*x11552)))),-1);
if(!x11555.valid){
continue;
}
CheckValue<IkReal> x11556 = IKatan2WithCheck(IkReal((x11554+(((-1.0)*cj11*x11553)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11556.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11555.value)))+(x11556.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11557=IKcos(j10);
IkReal x11558=IKsin(j10);
IkReal x11559=(cj11*r10);
IkReal x11560=(cj11*r20);
IkReal x11561=(cj11*r00);
IkReal x11562=((1.0)*x11557);
IkReal x11563=(sj11*x11557);
IkReal x11564=(sj11*x11558);
IkReal x11565=((1.0)*x11558);
evalcond[0]=(((r02*x11558))+((r01*x11563))+(((-1.0)*x11561*x11562)));
evalcond[1]=(((r12*x11558))+(((-1.0)*x11559*x11562))+((r11*x11563)));
evalcond[2]=((((-1.0)*x11560*x11565))+((r21*x11564))+(((-1.0)*r22*x11562)));
evalcond[3]=(((r01*x11564))+(((-1.0)*x11561*x11565))+(((-1.0)*r02*x11562)));
evalcond[4]=((1.0)+((r22*x11558))+(((-1.0)*x11560*x11562))+((r21*x11563)));
evalcond[5]=((1.0)+(((-1.0)*x11559*x11565))+((r11*x11564))+(((-1.0)*r12*x11562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11566=((1.0)*cj11);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal((((r11*sj11))+(((-1.0)*r10*x11566)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
CheckValue<IkReal> x11568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11566))+(((-1.0)*r00*sj11)))),-1);
if(!x11568.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11567.value)+(((1.5707963267949)*(x11568.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11569=IKcos(j10);
IkReal x11570=IKsin(j10);
IkReal x11571=(cj11*r10);
IkReal x11572=(cj11*r20);
IkReal x11573=(cj11*r00);
IkReal x11574=((1.0)*x11569);
IkReal x11575=(sj11*x11569);
IkReal x11576=(sj11*x11570);
IkReal x11577=((1.0)*x11570);
evalcond[0]=(((r01*x11575))+(((-1.0)*x11573*x11574))+((r02*x11570)));
evalcond[1]=((((-1.0)*x11571*x11574))+((r12*x11570))+((r11*x11575)));
evalcond[2]=((((-1.0)*x11572*x11577))+((r21*x11576))+(((-1.0)*r22*x11574)));
evalcond[3]=(((r01*x11576))+(((-1.0)*x11573*x11577))+(((-1.0)*r02*x11574)));
evalcond[4]=((1.0)+(((-1.0)*x11572*x11574))+((r21*x11575))+((r22*x11570)));
evalcond[5]=((1.0)+(((-1.0)*x11571*x11577))+((r11*x11576))+(((-1.0)*r12*x11574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11578=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11579.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11578.value)))+(x11579.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11580=IKcos(j10);
IkReal x11581=IKsin(j10);
IkReal x11582=(cj11*r10);
IkReal x11583=(cj11*r20);
IkReal x11584=(cj11*r00);
IkReal x11585=((1.0)*x11580);
IkReal x11586=(sj11*x11580);
IkReal x11587=(sj11*x11581);
IkReal x11588=((1.0)*x11581);
evalcond[0]=(((r01*x11586))+(((-1.0)*x11584*x11585))+((r02*x11581)));
evalcond[1]=((((-1.0)*x11582*x11585))+((r12*x11581))+((r11*x11586)));
evalcond[2]=((((-1.0)*x11583*x11588))+((r21*x11587))+(((-1.0)*r22*x11585)));
evalcond[3]=(((r01*x11587))+(((-1.0)*x11584*x11588))+(((-1.0)*r02*x11585)));
evalcond[4]=((1.0)+(((-1.0)*x11583*x11585))+((r22*x11581))+((r21*x11586)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11585))+(((-1.0)*x11582*x11588))+((r11*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11589=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x11589;
j10eval[1]=IKsign(x11589);
j10eval[2]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11590=((1.0)*cj11);
IkReal x11591=((((-1.0)*r01*x11590))+(((-1.0)*r00*sj11)));
j10eval[0]=x11591;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x11590))))));
j10eval[2]=IKsign(x11591);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
IkReal x11592=cj11*cj11;
IkReal x11593=(r01*r11);
IkReal x11594=((1.0)*r00);
IkReal x11595=(r01*sj11);
IkReal x11596=(((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+((x11592*x11593))+(((-1.0)*x11593))+((cj11*r10*x11595))+(((-1.0)*r10*x11592*x11594)));
j10eval[0]=x11596;
j10eval[1]=IKsign(x11596);
j10eval[2]=((IKabs(r02))+(IKabs((x11595+(((-1.0)*cj11*x11594))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11597=cj11*cj11;
IkReal x11598=(r01*r11);
IkReal x11599=((1.0)*r00);
IkReal x11600=(r01*sj11);
CheckValue<IkReal> x11601 = IKatan2WithCheck(IkReal((x11600+(((-1.0)*cj11*x11599)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11601.valid){
continue;
}
CheckValue<IkReal> x11602=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*x11598))+(((-1.0)*r10*x11597*x11599))+((cj11*r10*x11600))+((x11597*x11598)))),-1);
if(!x11602.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11601.value)+(((1.5707963267949)*(x11602.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11603=IKcos(j10);
IkReal x11604=IKsin(j10);
IkReal x11605=(cj11*r10);
IkReal x11606=(cj11*r20);
IkReal x11607=(cj11*r00);
IkReal x11608=((1.0)*x11603);
IkReal x11609=(sj11*x11603);
IkReal x11610=(sj11*x11604);
IkReal x11611=((1.0)*x11604);
evalcond[0]=(((r01*x11609))+((r02*x11604))+(((-1.0)*x11607*x11608)));
evalcond[1]=((((-1.0)*x11605*x11608))+((r11*x11609))+((r12*x11604)));
evalcond[2]=((((-1.0)*r22*x11608))+((r21*x11610))+(((-1.0)*x11606*x11611)));
evalcond[3]=((((-1.0)*r02*x11608))+(((-1.0)*x11607*x11611))+((r01*x11610)));
evalcond[4]=((1.0)+((r22*x11604))+((r21*x11609))+(((-1.0)*x11606*x11608)));
evalcond[5]=((1.0)+((r11*x11610))+(((-1.0)*r12*x11608))+(((-1.0)*x11605*x11611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11612=((1.0)*cj11);
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x11612))+((r11*sj11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
CheckValue<IkReal> x11614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x11612)))),-1);
if(!x11614.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11613.value)+(((1.5707963267949)*(x11614.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11615=IKcos(j10);
IkReal x11616=IKsin(j10);
IkReal x11617=(cj11*r10);
IkReal x11618=(cj11*r20);
IkReal x11619=(cj11*r00);
IkReal x11620=((1.0)*x11615);
IkReal x11621=(sj11*x11615);
IkReal x11622=(sj11*x11616);
IkReal x11623=((1.0)*x11616);
evalcond[0]=((((-1.0)*x11619*x11620))+((r02*x11616))+((r01*x11621)));
evalcond[1]=(((r12*x11616))+((r11*x11621))+(((-1.0)*x11617*x11620)));
evalcond[2]=(((r21*x11622))+(((-1.0)*r22*x11620))+(((-1.0)*x11618*x11623)));
evalcond[3]=((((-1.0)*x11619*x11623))+((r01*x11622))+(((-1.0)*r02*x11620)));
evalcond[4]=((1.0)+((r21*x11621))+((r22*x11616))+(((-1.0)*x11618*x11620)));
evalcond[5]=((1.0)+((r11*x11622))+(((-1.0)*r12*x11620))+(((-1.0)*x11617*x11623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x11624.valid){
continue;
}
CheckValue<IkReal> x11625 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11625.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11624.value)))+(x11625.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11626=IKcos(j10);
IkReal x11627=IKsin(j10);
IkReal x11628=(cj11*r10);
IkReal x11629=(cj11*r20);
IkReal x11630=(cj11*r00);
IkReal x11631=((1.0)*x11626);
IkReal x11632=(sj11*x11626);
IkReal x11633=(sj11*x11627);
IkReal x11634=((1.0)*x11627);
evalcond[0]=(((r02*x11627))+(((-1.0)*x11630*x11631))+((r01*x11632)));
evalcond[1]=(((r11*x11632))+((r12*x11627))+(((-1.0)*x11628*x11631)));
evalcond[2]=((((-1.0)*r22*x11631))+((r21*x11633))+(((-1.0)*x11629*x11634)));
evalcond[3]=((((-1.0)*r02*x11631))+(((-1.0)*x11630*x11634))+((r01*x11633)));
evalcond[4]=((1.0)+((r22*x11627))+((r21*x11632))+(((-1.0)*x11629*x11631)));
evalcond[5]=((1.0)+((r11*x11633))+(((-1.0)*x11628*x11634))+(((-1.0)*r12*x11631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11635=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x11635;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11635);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11636=((1.0)*cj11);
IkReal x11637=((((-1.0)*r11*x11636))+(((-1.0)*r10*sj11)));
j10eval[0]=x11637;
j10eval[1]=IKsign(x11637);
j10eval[2]=((IKabs(r02))+(IKabs((((r01*sj11))+(((-1.0)*r00*x11636))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
IkReal x11638=cj11*cj11;
IkReal x11639=(r01*r11);
IkReal x11640=((1.0)*r00);
IkReal x11641=(r01*sj11);
IkReal x11642=(((cj11*r10*x11641))+((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*x11639))+(((-1.0)*r10*x11638*x11640))+((x11638*x11639)));
j10eval[0]=x11642;
j10eval[1]=IKsign(x11642);
j10eval[2]=((IKabs(r02))+(IKabs((x11641+(((-1.0)*cj11*x11640))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11643=cj11*cj11;
IkReal x11644=(r01*r11);
IkReal x11645=((1.0)*r00);
IkReal x11646=(r01*sj11);
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal((x11646+(((-1.0)*cj11*x11645)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
CheckValue<IkReal> x11648=IKPowWithIntegerCheck(IKsign((((cj11*r10*x11646))+((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+((x11643*x11644))+(((-1.0)*x11644))+(((-1.0)*r10*x11643*x11645)))),-1);
if(!x11648.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11647.value)+(((1.5707963267949)*(x11648.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11649=IKcos(j10);
IkReal x11650=IKsin(j10);
IkReal x11651=(cj11*r10);
IkReal x11652=(cj11*r20);
IkReal x11653=(cj11*r00);
IkReal x11654=((1.0)*x11649);
IkReal x11655=(sj11*x11649);
IkReal x11656=(sj11*x11650);
IkReal x11657=((1.0)*x11650);
evalcond[0]=(((r02*x11650))+(((-1.0)*x11653*x11654))+((r01*x11655)));
evalcond[1]=(((r11*x11655))+((r12*x11650))+(((-1.0)*x11651*x11654)));
evalcond[2]=((((-1.0)*r22*x11654))+((r21*x11656))+(((-1.0)*x11652*x11657)));
evalcond[3]=((((-1.0)*r02*x11654))+(((-1.0)*x11653*x11657))+((r01*x11656)));
evalcond[4]=((-1.0)+((r22*x11650))+((r21*x11655))+(((-1.0)*x11652*x11654)));
evalcond[5]=((1.0)+((r11*x11656))+(((-1.0)*r12*x11654))+(((-1.0)*x11651*x11657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11658=((1.0)*cj11);
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal((((r01*sj11))+(((-1.0)*r00*x11658)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
CheckValue<IkReal> x11660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x11658)))),-1);
if(!x11660.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11659.value)+(((1.5707963267949)*(x11660.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11661=IKcos(j10);
IkReal x11662=IKsin(j10);
IkReal x11663=(cj11*r10);
IkReal x11664=(cj11*r20);
IkReal x11665=(cj11*r00);
IkReal x11666=((1.0)*x11661);
IkReal x11667=(sj11*x11661);
IkReal x11668=(sj11*x11662);
IkReal x11669=((1.0)*x11662);
evalcond[0]=(((r01*x11667))+(((-1.0)*x11665*x11666))+((r02*x11662)));
evalcond[1]=(((r11*x11667))+((r12*x11662))+(((-1.0)*x11663*x11666)));
evalcond[2]=(((r21*x11668))+(((-1.0)*x11664*x11669))+(((-1.0)*r22*x11666)));
evalcond[3]=(((r01*x11668))+(((-1.0)*r02*x11666))+(((-1.0)*x11665*x11669)));
evalcond[4]=((-1.0)+((r21*x11667))+(((-1.0)*x11664*x11666))+((r22*x11662)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11666))+((r11*x11668))+(((-1.0)*x11663*x11669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11670=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x11670.valid){
continue;
}
CheckValue<IkReal> x11671 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11671.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11670.value)))+(x11671.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11672=IKcos(j10);
IkReal x11673=IKsin(j10);
IkReal x11674=(cj11*r10);
IkReal x11675=(cj11*r20);
IkReal x11676=(cj11*r00);
IkReal x11677=((1.0)*x11672);
IkReal x11678=(sj11*x11672);
IkReal x11679=(sj11*x11673);
IkReal x11680=((1.0)*x11673);
evalcond[0]=((((-1.0)*x11676*x11677))+((r02*x11673))+((r01*x11678)));
evalcond[1]=((((-1.0)*x11674*x11677))+((r12*x11673))+((r11*x11678)));
evalcond[2]=((((-1.0)*x11675*x11680))+((r21*x11679))+(((-1.0)*r22*x11677)));
evalcond[3]=(((r01*x11679))+(((-1.0)*r02*x11677))+(((-1.0)*x11676*x11680)));
evalcond[4]=((-1.0)+((r22*x11673))+(((-1.0)*x11675*x11677))+((r21*x11678)));
evalcond[5]=((1.0)+((r11*x11679))+(((-1.0)*x11674*x11680))+(((-1.0)*r12*x11677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11681=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x11681;
j10eval[1]=IKsign(x11681);
j10eval[2]=((IKabs(((((-1.0)*cj11*r00))+((r01*sj11)))))+(IKabs(r02)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11682=((1.0)*cj11);
IkReal x11683=((((-1.0)*r01*x11682))+(((-1.0)*r00*sj11)));
j10eval[0]=x11683;
j10eval[1]=((IKabs((((r11*sj11))+(((-1.0)*r10*x11682)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11683);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=0;
sj8=0;
cj8=1.0;
IkReal x11684=cj11*cj11;
IkReal x11685=(r01*r11);
IkReal x11686=((1.0)*r00);
IkReal x11687=(r01*sj11);
IkReal x11688=((((-1.0)*x11685))+((cj11*r10*x11687))+((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*r10*x11684*x11686))+((x11684*x11685)));
j10eval[0]=x11688;
j10eval[1]=IKsign(x11688);
j10eval[2]=((IKabs(r02))+(IKabs((x11687+(((-1.0)*cj11*x11686))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11689=cj11*cj11;
IkReal x11690=(r01*r11);
IkReal x11691=((1.0)*r00);
IkReal x11692=(r01*sj11);
CheckValue<IkReal> x11693 = IKatan2WithCheck(IkReal((x11692+(((-1.0)*cj11*x11691)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11693.valid){
continue;
}
CheckValue<IkReal> x11694=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+(((-1.0)*r10*x11689*x11691))+((x11689*x11690))+(((-1.0)*r02*r12))+((cj11*r10*x11692))+(((-1.0)*x11690)))),-1);
if(!x11694.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11693.value)+(((1.5707963267949)*(x11694.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11695=IKcos(j10);
IkReal x11696=IKsin(j10);
IkReal x11697=(cj11*r10);
IkReal x11698=(cj11*r20);
IkReal x11699=(cj11*r00);
IkReal x11700=((1.0)*x11695);
IkReal x11701=(sj11*x11695);
IkReal x11702=(sj11*x11696);
IkReal x11703=((1.0)*x11696);
evalcond[0]=(((r01*x11701))+(((-1.0)*x11699*x11700))+((r02*x11696)));
evalcond[1]=((((-1.0)*x11697*x11700))+((r12*x11696))+((r11*x11701)));
evalcond[2]=((((-1.0)*r22*x11700))+(((-1.0)*x11698*x11703))+((r21*x11702)));
evalcond[3]=(((r01*x11702))+(((-1.0)*x11699*x11703))+(((-1.0)*r02*x11700)));
evalcond[4]=((1.0)+(((-1.0)*x11698*x11700))+((r21*x11701))+((r22*x11696)));
evalcond[5]=((1.0)+(((-1.0)*x11697*x11703))+((r11*x11702))+(((-1.0)*r12*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11704=((1.0)*cj11);
CheckValue<IkReal> x11705 = IKatan2WithCheck(IkReal((((r11*sj11))+(((-1.0)*r10*x11704)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11705.valid){
continue;
}
CheckValue<IkReal> x11706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x11704)))),-1);
if(!x11706.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11705.value)+(((1.5707963267949)*(x11706.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11707=IKcos(j10);
IkReal x11708=IKsin(j10);
IkReal x11709=(cj11*r10);
IkReal x11710=(cj11*r20);
IkReal x11711=(cj11*r00);
IkReal x11712=((1.0)*x11707);
IkReal x11713=(sj11*x11707);
IkReal x11714=(sj11*x11708);
IkReal x11715=((1.0)*x11708);
evalcond[0]=(((r01*x11713))+(((-1.0)*x11711*x11712))+((r02*x11708)));
evalcond[1]=((((-1.0)*x11709*x11712))+((r12*x11708))+((r11*x11713)));
evalcond[2]=((((-1.0)*r22*x11712))+(((-1.0)*x11710*x11715))+((r21*x11714)));
evalcond[3]=(((r01*x11714))+(((-1.0)*x11711*x11715))+(((-1.0)*r02*x11712)));
evalcond[4]=((1.0)+((r22*x11708))+(((-1.0)*x11710*x11712))+((r21*x11713)));
evalcond[5]=((1.0)+(((-1.0)*x11709*x11715))+(((-1.0)*r12*x11712))+((r11*x11714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11716=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x11716.valid){
continue;
}
CheckValue<IkReal> x11717 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11717.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11716.value)))+(x11717.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11718=IKcos(j10);
IkReal x11719=IKsin(j10);
IkReal x11720=(cj11*r10);
IkReal x11721=(cj11*r20);
IkReal x11722=(cj11*r00);
IkReal x11723=((1.0)*x11718);
IkReal x11724=(sj11*x11718);
IkReal x11725=(sj11*x11719);
IkReal x11726=((1.0)*x11719);
evalcond[0]=(((r01*x11724))+((r02*x11719))+(((-1.0)*x11722*x11723)));
evalcond[1]=((((-1.0)*x11720*x11723))+((r11*x11724))+((r12*x11719)));
evalcond[2]=((((-1.0)*r22*x11723))+(((-1.0)*x11721*x11726))+((r21*x11725)));
evalcond[3]=(((r01*x11725))+(((-1.0)*x11722*x11726))+(((-1.0)*r02*x11723)));
evalcond[4]=((1.0)+(((-1.0)*x11721*x11723))+((r22*x11719))+((r21*x11724)));
evalcond[5]=((1.0)+(((-1.0)*x11720*x11726))+(((-1.0)*r12*x11723))+((r11*x11725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11727=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x11727;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x11727);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11728=((1.0)*cj11);
IkReal x11729=((((-1.0)*r11*x11728))+(((-1.0)*r10*sj11)));
j10eval[0]=x11729;
j10eval[1]=IKsign(x11729);
j10eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x11728))+((r01*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=1.0;
j6=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
IkReal x11730=cj11*cj11;
IkReal x11731=(r01*r11);
IkReal x11732=((1.0)*r00);
IkReal x11733=(r01*sj11);
IkReal x11734=(((cj11*r00*r11*sj11))+(((-1.0)*r02*r12))+(((-1.0)*r10*x11730*x11732))+(((-1.0)*x11731))+((x11730*x11731))+((cj11*r10*x11733)));
j10eval[0]=x11734;
j10eval[1]=IKsign(x11734);
j10eval[2]=((IKabs(r02))+(IKabs((x11733+(((-1.0)*cj11*x11732))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11735=cj11*cj11;
IkReal x11736=(r01*r11);
IkReal x11737=((1.0)*r00);
IkReal x11738=(r01*sj11);
CheckValue<IkReal> x11739 = IKatan2WithCheck(IkReal((x11738+(((-1.0)*cj11*x11737)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11739.valid){
continue;
}
CheckValue<IkReal> x11740=IKPowWithIntegerCheck(IKsign((((cj11*r00*r11*sj11))+((x11735*x11736))+(((-1.0)*r02*r12))+(((-1.0)*x11736))+(((-1.0)*r10*x11735*x11737))+((cj11*r10*x11738)))),-1);
if(!x11740.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11739.value)+(((1.5707963267949)*(x11740.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11741=IKcos(j10);
IkReal x11742=IKsin(j10);
IkReal x11743=(cj11*r10);
IkReal x11744=(cj11*r20);
IkReal x11745=(cj11*r00);
IkReal x11746=((1.0)*x11741);
IkReal x11747=(sj11*x11741);
IkReal x11748=(sj11*x11742);
IkReal x11749=((1.0)*x11742);
evalcond[0]=(((r01*x11747))+((r02*x11742))+(((-1.0)*x11745*x11746)));
evalcond[1]=((((-1.0)*x11743*x11746))+((r12*x11742))+((r11*x11747)));
evalcond[2]=((((-1.0)*x11744*x11749))+(((-1.0)*r22*x11746))+((r21*x11748)));
evalcond[3]=(((r01*x11748))+(((-1.0)*r02*x11746))+(((-1.0)*x11745*x11749)));
evalcond[4]=((-1.0)+(((-1.0)*x11744*x11746))+((r21*x11747))+((r22*x11742)));
evalcond[5]=((1.0)+(((-1.0)*x11743*x11749))+(((-1.0)*r12*x11746))+((r11*x11748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11750=((1.0)*cj11);
CheckValue<IkReal> x11751 = IKatan2WithCheck(IkReal((((r01*sj11))+(((-1.0)*r00*x11750)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11751.valid){
continue;
}
CheckValue<IkReal> x11752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11750))+(((-1.0)*r10*sj11)))),-1);
if(!x11752.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11751.value)+(((1.5707963267949)*(x11752.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11753=IKcos(j10);
IkReal x11754=IKsin(j10);
IkReal x11755=(cj11*r10);
IkReal x11756=(cj11*r20);
IkReal x11757=(cj11*r00);
IkReal x11758=((1.0)*x11753);
IkReal x11759=(sj11*x11753);
IkReal x11760=(sj11*x11754);
IkReal x11761=((1.0)*x11754);
evalcond[0]=(((r02*x11754))+(((-1.0)*x11757*x11758))+((r01*x11759)));
evalcond[1]=((((-1.0)*x11755*x11758))+((r11*x11759))+((r12*x11754)));
evalcond[2]=((((-1.0)*r22*x11758))+(((-1.0)*x11756*x11761))+((r21*x11760)));
evalcond[3]=((((-1.0)*r02*x11758))+(((-1.0)*x11757*x11761))+((r01*x11760)));
evalcond[4]=((-1.0)+(((-1.0)*x11756*x11758))+((r22*x11754))+((r21*x11759)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11758))+((r11*x11760))+(((-1.0)*x11755*x11761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11762=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x11762.valid){
continue;
}
CheckValue<IkReal> x11763 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11763.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11762.value)))+(x11763.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11764=IKcos(j10);
IkReal x11765=IKsin(j10);
IkReal x11766=(cj11*r10);
IkReal x11767=(cj11*r20);
IkReal x11768=(cj11*r00);
IkReal x11769=((1.0)*x11764);
IkReal x11770=(sj11*x11764);
IkReal x11771=(sj11*x11765);
IkReal x11772=((1.0)*x11765);
evalcond[0]=((((-1.0)*x11768*x11769))+((r02*x11765))+((r01*x11770)));
evalcond[1]=((((-1.0)*x11766*x11769))+((r12*x11765))+((r11*x11770)));
evalcond[2]=((((-1.0)*x11767*x11772))+(((-1.0)*r22*x11769))+((r21*x11771)));
evalcond[3]=((((-1.0)*x11768*x11772))+(((-1.0)*r02*x11769))+((r01*x11771)));
evalcond[4]=((-1.0)+((r22*x11765))+((r21*x11770))+(((-1.0)*x11767*x11769)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11769))+((r11*x11771))+(((-1.0)*x11766*x11772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11773=(sj7*sj8);
IkReal x11774=(cj11*r10);
IkReal x11775=(r11*sj11);
IkReal x11776=((1.0)*cj7*cj8);
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x11777.valid){
continue;
}
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal((((cj7*cj8*x11775))+(((-1.0)*x11773*x11775))+(((-1.0)*x11774*x11776))+((x11773*x11774)))),IkReal((((r12*x11773))+(((-1.0)*r12*x11776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11777.value)))+(x11778.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11779=IKcos(j10);
IkReal x11780=IKsin(j10);
IkReal x11781=(r11*sj11);
IkReal x11782=((1.0)*sj8);
IkReal x11783=(cj11*r10);
IkReal x11784=(cj11*r00);
IkReal x11785=(cj11*r20);
IkReal x11786=((1.0)*x11779);
IkReal x11787=(sj11*x11779);
IkReal x11788=((1.0)*x11780);
IkReal x11789=(sj11*x11780);
evalcond[0]=(((r12*x11780))+(((-1.0)*x11783*x11786))+((x11779*x11781)));
evalcond[1]=(((r21*x11789))+(((-1.0)*x11785*x11788))+(((-1.0)*r22*x11786)));
evalcond[2]=((((-1.0)*x11784*x11788))+(((-1.0)*r02*x11786))+((r01*x11789)));
evalcond[3]=((1.0)+((x11780*x11781))+(((-1.0)*r12*x11786))+(((-1.0)*x11783*x11788)));
evalcond[4]=(((r02*x11780))+(((-1.0)*x11784*x11786))+((cj7*cj8))+(((-1.0)*sj7*x11782))+((r01*x11787)));
evalcond[5]=(((r21*x11787))+(((-1.0)*cj8*sj7))+(((-1.0)*x11785*x11786))+((r22*x11780))+(((-1.0)*cj7*x11782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11790=((1.0)*cj11);
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11790))+(((-1.0)*r00*sj11)))),-1);
if(!x11791.valid){
continue;
}
CheckValue<IkReal> x11792 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11790))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11792.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11791.value)))+(x11792.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11793=IKcos(j10);
IkReal x11794=IKsin(j10);
IkReal x11795=(r11*sj11);
IkReal x11796=((1.0)*sj8);
IkReal x11797=(cj11*r10);
IkReal x11798=(cj11*r00);
IkReal x11799=(cj11*r20);
IkReal x11800=((1.0)*x11793);
IkReal x11801=(sj11*x11793);
IkReal x11802=((1.0)*x11794);
IkReal x11803=(sj11*x11794);
evalcond[0]=(((r12*x11794))+(((-1.0)*x11797*x11800))+((x11793*x11795)));
evalcond[1]=(((r21*x11803))+(((-1.0)*r22*x11800))+(((-1.0)*x11799*x11802)));
evalcond[2]=((((-1.0)*x11798*x11802))+(((-1.0)*r02*x11800))+((r01*x11803)));
evalcond[3]=((1.0)+(((-1.0)*x11797*x11802))+(((-1.0)*r12*x11800))+((x11794*x11795)));
evalcond[4]=((((-1.0)*x11798*x11800))+(((-1.0)*sj7*x11796))+((r02*x11794))+((cj7*cj8))+((r01*x11801)));
evalcond[5]=(((r21*x11801))+(((-1.0)*cj8*sj7))+((r22*x11794))+(((-1.0)*cj7*x11796))+(((-1.0)*x11799*x11800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11804=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x11804.valid){
continue;
}
CheckValue<IkReal> x11805 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11805.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11804.value)))+(x11805.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x11806=IKcos(j10);
IkReal x11807=IKsin(j10);
IkReal x11808=(r11*sj11);
IkReal x11809=((1.0)*sj8);
IkReal x11810=(cj11*r10);
IkReal x11811=(cj11*r00);
IkReal x11812=(cj11*r20);
IkReal x11813=((1.0)*x11806);
IkReal x11814=(sj11*x11806);
IkReal x11815=((1.0)*x11807);
IkReal x11816=(sj11*x11807);
evalcond[0]=((((-1.0)*x11810*x11813))+((r12*x11807))+((x11806*x11808)));
evalcond[1]=((((-1.0)*x11812*x11815))+(((-1.0)*r22*x11813))+((r21*x11816)));
evalcond[2]=(((r01*x11816))+(((-1.0)*r02*x11813))+(((-1.0)*x11811*x11815)));
evalcond[3]=((1.0)+((x11807*x11808))+(((-1.0)*x11810*x11815))+(((-1.0)*r12*x11813)));
evalcond[4]=(((r01*x11814))+(((-1.0)*sj7*x11809))+((r02*x11807))+((cj7*cj8))+(((-1.0)*x11811*x11813)));
evalcond[5]=((((-1.0)*x11812*x11813))+(((-1.0)*cj8*sj7))+((r22*x11807))+((r21*x11814))+(((-1.0)*cj7*x11809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11817=((-1.0)*r00);
IkReal x11819 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11819)==0){
continue;
}
IkReal x11818=pow(x11819,-0.5);
CheckValue<IkReal> x11820 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11817),IKFAST_ATAN2_MAGTHRESH);
if(!x11820.valid){
continue;
}
IkReal gconst18=((-1.0)*(x11820.value));
IkReal gconst19=(r01*x11818);
IkReal gconst20=(x11817*x11818);
CheckValue<IkReal> x11821 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11821.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x11821.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x11822=((-1.0)*r00);
IkReal x11823=x11818;
CheckValue<IkReal> x11825 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11822),IKFAST_ATAN2_MAGTHRESH);
if(!x11825.valid){
continue;
}
IkReal x11824=((-1.0)*(x11825.value));
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst19;
cj11=gconst20;
j11=x11824;
IkReal gconst18=x11824;
IkReal gconst19=(r01*x11823);
IkReal gconst20=(x11822*x11823);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x11826=((-1.0)*r00);
IkReal x11827=x11818;
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11826),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal x11828=((-1.0)*(x11829.value));
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst19;
cj11=gconst20;
j11=x11828;
IkReal gconst18=x11828;
IkReal gconst19=(r01*x11827);
IkReal gconst20=(x11826*x11827);
CheckValue<IkReal> x11837=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11837.valid){
continue;
}
IkReal x11830=x11837.value;
IkReal x11831=(sj9*x11830);
IkReal x11832=(r21*x11831);
IkReal x11833=(r11*x11831);
IkReal x11834=(r10*x11831);
IkReal x11835=(r20*x11831);
IkReal x11836=(r00*r01*x11831);
j10eval[0]=IKsign((((r11*x11832*(r01*r01)))+((r00*r01*r10*x11832))+((r00*r01*r20*x11833))+((r20*x11834*(r00*r00)))+((r12*r22*sj9))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11838=gconst19*gconst19;
IkReal x11839=gconst20*gconst20;
IkReal x11840=(cj9*r20);
IkReal x11841=((1.0)*r10);
IkReal x11842=(gconst19*gconst20);
IkReal x11843=(r10*r21);
IkReal x11844=(r22*sj9);
IkReal x11845=((1.0)*cj9);
IkReal x11846=(r11*r21);
IkReal x11847=(r20*sj9);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal((((gconst19*r10*x11844))+((gconst20*r11*x11844)))),IkReal(((((-1.0)*x11841*x11842*x11847))+((sj9*x11842*x11846))+(((-1.0)*r11*x11839*x11847))+((sj9*x11838*x11843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
CheckValue<IkReal> x11849=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11838*x11845*x11846))+(((-1.0)*x11839*x11840*x11841))+(((-1.0)*r12*r22*x11845))+((cj9*x11842*x11843))+((r11*x11840*x11842)))),-1);
if(!x11849.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11848.value)+(((1.5707963267949)*(x11849.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11850=IKsin(j10);
IkReal x11851=IKcos(j10);
IkReal x11852=((1.0)*sj9);
IkReal x11853=((1.0)*gconst20);
IkReal x11854=(sj7*sj8);
IkReal x11855=((1.0)*cj7);
IkReal x11856=(gconst20*sj9);
IkReal x11857=(cj9*r11);
IkReal x11858=(gconst19*r00);
IkReal x11859=(cj9*gconst20);
IkReal x11860=(gconst19*sj9);
IkReal x11861=(cj9*gconst19);
IkReal x11862=((1.0)*cj8*sj7);
IkReal x11863=(sj8*x11855);
IkReal x11864=(r02*x11850);
IkReal x11865=(gconst19*x11851);
IkReal x11866=(gconst19*x11850);
IkReal x11867=(r00*x11851);
IkReal x11868=(r12*x11850);
IkReal x11869=((1.0)*x11851);
IkReal x11870=(r10*x11851);
IkReal x11871=(r22*x11850);
IkReal x11872=(r20*x11851);
IkReal x11873=(x11863+x11862);
evalcond[0]=((((-1.0)*r22*x11869))+(((-1.0)*r20*x11850*x11853))+((r21*x11866)));
evalcond[1]=(((r01*x11866))+(((-1.0)*r00*x11850*x11853))+(((-1.0)*r02*x11869)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11850*x11853))+((r11*x11866))+(((-1.0)*r12*x11869)));
evalcond[3]=((((-1.0)*cj9*x11853*x11870))+((cj9*x11868))+((r11*x11856))+((r10*x11860))+((x11857*x11865)));
evalcond[4]=(((gconst20*x11857))+(((-1.0)*x11852*x11868))+((x11856*x11870))+((r10*x11861))+(((-1.0)*r11*x11852*x11865)));
evalcond[5]=(((r21*x11856))+(((-1.0)*cj9*x11853*x11872))+(((-1.0)*cj8*x11855))+((r20*x11860))+((cj9*x11871))+((r21*x11851*x11861))+x11854);
evalcond[6]=(((cj9*x11858))+((r01*x11859))+(((-1.0)*x11854))+((cj7*cj8))+(((-1.0)*x11852*x11864))+((x11856*x11867))+(((-1.0)*r01*x11852*x11865)));
evalcond[7]=(((r01*x11851*x11861))+(((-1.0)*x11873))+((sj9*x11858))+((cj9*x11864))+((r01*x11856))+(((-1.0)*cj9*x11853*x11867)));
evalcond[8]=(((r21*x11859))+(((-1.0)*x11873))+((r20*x11861))+(((-1.0)*r21*x11852*x11865))+((x11856*x11872))+(((-1.0)*x11852*x11871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11874=gconst19*gconst19;
IkReal x11875=gconst20*gconst20;
IkReal x11876=(gconst19*r10);
IkReal x11877=(cj9*r22);
IkReal x11878=(gconst19*r11);
IkReal x11879=(cj9*gconst20);
IkReal x11880=((1.0)*r20);
IkReal x11881=((1.0)*gconst20*sj9);
IkReal x11882=(r21*x11874);
CheckValue<IkReal> x11883 = IKatan2WithCheck(IkReal((((gconst20*r11*x11877))+((x11876*x11877)))),IkReal((((cj9*r10*x11882))+(((-1.0)*cj9*r11*x11875*x11880))+((r21*x11878*x11879))+(((-1.0)*x11876*x11879*x11880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11883.valid){
continue;
}
CheckValue<IkReal> x11884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11876*x11881))+(((-1.0)*gconst20*sj9*x11878*x11880))+((r10*r20*sj9*x11875))+((r12*r22*sj9))+((r11*sj9*x11882)))),-1);
if(!x11884.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11883.value)+(((1.5707963267949)*(x11884.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11885=IKsin(j10);
IkReal x11886=IKcos(j10);
IkReal x11887=((1.0)*sj9);
IkReal x11888=((1.0)*gconst20);
IkReal x11889=(sj7*sj8);
IkReal x11890=((1.0)*cj7);
IkReal x11891=(gconst20*sj9);
IkReal x11892=(cj9*r11);
IkReal x11893=(gconst19*r00);
IkReal x11894=(cj9*gconst20);
IkReal x11895=(gconst19*sj9);
IkReal x11896=(cj9*gconst19);
IkReal x11897=((1.0)*cj8*sj7);
IkReal x11898=(sj8*x11890);
IkReal x11899=(r02*x11885);
IkReal x11900=(gconst19*x11886);
IkReal x11901=(gconst19*x11885);
IkReal x11902=(r00*x11886);
IkReal x11903=(r12*x11885);
IkReal x11904=((1.0)*x11886);
IkReal x11905=(r10*x11886);
IkReal x11906=(r22*x11885);
IkReal x11907=(r20*x11886);
IkReal x11908=(x11898+x11897);
evalcond[0]=((((-1.0)*r22*x11904))+((r21*x11901))+(((-1.0)*r20*x11885*x11888)));
evalcond[1]=((((-1.0)*r02*x11904))+(((-1.0)*r00*x11885*x11888))+((r01*x11901)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11904))+(((-1.0)*r10*x11885*x11888))+((r11*x11901)));
evalcond[3]=(((cj9*x11903))+((r10*x11895))+(((-1.0)*cj9*x11888*x11905))+((x11892*x11900))+((r11*x11891)));
evalcond[4]=(((x11891*x11905))+((r10*x11896))+(((-1.0)*x11887*x11903))+((gconst20*x11892))+(((-1.0)*r11*x11887*x11900)));
evalcond[5]=(((cj9*x11906))+((r21*x11891))+(((-1.0)*cj9*x11888*x11907))+((r20*x11895))+(((-1.0)*cj8*x11890))+x11889+((r21*x11886*x11896)));
evalcond[6]=((((-1.0)*x11887*x11899))+(((-1.0)*x11889))+((cj9*x11893))+((r01*x11894))+((x11891*x11902))+((cj7*cj8))+(((-1.0)*r01*x11887*x11900)));
evalcond[7]=(((cj9*x11899))+((r01*x11891))+((r01*x11886*x11896))+((sj9*x11893))+(((-1.0)*cj9*x11888*x11902))+(((-1.0)*x11908)));
evalcond[8]=(((r21*x11894))+((x11891*x11907))+(((-1.0)*r21*x11887*x11900))+(((-1.0)*x11908))+(((-1.0)*x11887*x11906))+((r20*x11896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x11910.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11909.value)+(((1.5707963267949)*(x11910.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11911=IKsin(j10);
IkReal x11912=IKcos(j10);
IkReal x11913=((1.0)*sj9);
IkReal x11914=((1.0)*gconst20);
IkReal x11915=(sj7*sj8);
IkReal x11916=((1.0)*cj7);
IkReal x11917=(gconst20*sj9);
IkReal x11918=(cj9*r11);
IkReal x11919=(gconst19*r00);
IkReal x11920=(cj9*gconst20);
IkReal x11921=(gconst19*sj9);
IkReal x11922=(cj9*gconst19);
IkReal x11923=((1.0)*cj8*sj7);
IkReal x11924=(sj8*x11916);
IkReal x11925=(r02*x11911);
IkReal x11926=(gconst19*x11912);
IkReal x11927=(gconst19*x11911);
IkReal x11928=(r00*x11912);
IkReal x11929=(r12*x11911);
IkReal x11930=((1.0)*x11912);
IkReal x11931=(r10*x11912);
IkReal x11932=(r22*x11911);
IkReal x11933=(r20*x11912);
IkReal x11934=(x11923+x11924);
evalcond[0]=(((r21*x11927))+(((-1.0)*r20*x11911*x11914))+(((-1.0)*r22*x11930)));
evalcond[1]=((((-1.0)*r00*x11911*x11914))+(((-1.0)*r02*x11930))+((r01*x11927)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11911*x11914))+((r11*x11927))+(((-1.0)*r12*x11930)));
evalcond[3]=(((r11*x11917))+((r10*x11921))+((x11918*x11926))+((cj9*x11929))+(((-1.0)*cj9*x11914*x11931)));
evalcond[4]=(((gconst20*x11918))+((x11917*x11931))+((r10*x11922))+(((-1.0)*x11913*x11929))+(((-1.0)*r11*x11913*x11926)));
evalcond[5]=(x11915+((r20*x11921))+(((-1.0)*cj8*x11916))+((cj9*x11932))+((r21*x11917))+((r21*x11912*x11922))+(((-1.0)*cj9*x11914*x11933)));
evalcond[6]=(((x11917*x11928))+(((-1.0)*x11915))+(((-1.0)*r01*x11913*x11926))+((cj7*cj8))+(((-1.0)*x11913*x11925))+((cj9*x11919))+((r01*x11920)));
evalcond[7]=(((r01*x11917))+(((-1.0)*x11934))+((cj9*x11925))+((sj9*x11919))+(((-1.0)*cj9*x11914*x11928))+((r01*x11912*x11922)));
evalcond[8]=(((r21*x11920))+((x11917*x11933))+((r20*x11922))+(((-1.0)*x11934))+(((-1.0)*x11913*x11932))+(((-1.0)*r21*x11913*x11926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11935=((-1.0)*r01);
IkReal x11937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11937)==0){
continue;
}
IkReal x11936=pow(x11937,-0.5);
CheckValue<IkReal> x11938 = IKatan2WithCheck(IkReal(x11935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11938.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x11938.value))));
IkReal gconst22=(x11935*x11936);
IkReal gconst23=((1.0)*r00*x11936);
CheckValue<IkReal> x11939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x11939.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x11940=((-1.0)*r01);
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(x11940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
IkReal x11941=((1.0)*(x11943.value));
IkReal x11942=x11936;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst22;
cj11=gconst23;
j11=((3.14159265)+(((-1.0)*x11941)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11941)));
IkReal gconst22=(x11940*x11942);
IkReal gconst23=((1.0)*r00*x11942);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
IkReal x11944=((-1.0)*r01);
CheckValue<IkReal> x11947 = IKatan2WithCheck(IkReal(x11944),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11947.valid){
continue;
}
IkReal x11945=((1.0)*(x11947.value));
IkReal x11946=x11936;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst22;
cj11=gconst23;
j11=((3.14159265)+(((-1.0)*x11945)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11945)));
IkReal gconst22=(x11944*x11946);
IkReal gconst23=((1.0)*r00*x11946);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11948=gconst23*gconst23;
IkReal x11949=gconst22*gconst22;
IkReal x11950=(gconst23*r11);
IkReal x11951=(r22*sj9);
IkReal x11952=(cj9*gconst22);
IkReal x11953=(r10*r21);
IkReal x11954=((1.0)*cj9);
IkReal x11955=(gconst22*sj9);
IkReal x11956=(r10*r20);
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal((((gconst22*r10*x11951))+((x11950*x11951)))),IkReal(((((-1.0)*r11*r20*sj9*x11948))+(((-1.0)*gconst23*x11955*x11956))+((r21*x11950*x11955))+((sj9*x11949*x11953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
CheckValue<IkReal> x11958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11954))+((r20*x11950*x11952))+(((-1.0)*r11*r21*x11949*x11954))+((gconst23*x11952*x11953))+(((-1.0)*x11948*x11954*x11956)))),-1);
if(!x11958.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11957.value)+(((1.5707963267949)*(x11958.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11959=IKsin(j10);
IkReal x11960=IKcos(j10);
IkReal x11961=(gconst23*sj9);
IkReal x11962=((1.0)*gconst23);
IkReal x11963=(cj9*gconst22);
IkReal x11964=((1.0)*sj9);
IkReal x11965=(gconst22*sj9);
IkReal x11966=(sj7*sj8);
IkReal x11967=(cj9*gconst23);
IkReal x11968=((1.0)*cj8);
IkReal x11969=(sj7*x11968);
IkReal x11970=((1.0)*cj7*sj8);
IkReal x11971=(r20*x11960);
IkReal x11972=(r11*x11960);
IkReal x11973=(r02*x11959);
IkReal x11974=(gconst22*x11959);
IkReal x11975=(r01*x11960);
IkReal x11976=(r12*x11959);
IkReal x11977=((1.0)*x11960);
IkReal x11978=(r10*x11960);
IkReal x11979=(r21*x11960);
IkReal x11980=(r22*x11959);
IkReal x11981=(r00*x11960);
IkReal x11982=(x11970+x11969);
evalcond[0]=((((-1.0)*r22*x11977))+((r21*x11974))+(((-1.0)*r20*x11959*x11962)));
evalcond[1]=(((r01*x11974))+(((-1.0)*r00*x11959*x11962))+(((-1.0)*r02*x11977)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11977))+((r11*x11974))+(((-1.0)*r10*x11959*x11962)));
evalcond[3]=(((r11*x11961))+((x11963*x11972))+((r10*x11965))+((cj9*x11976))+(((-1.0)*cj9*x11962*x11978)));
evalcond[4]=(((x11961*x11978))+(((-1.0)*gconst22*x11964*x11972))+((r11*x11967))+(((-1.0)*x11964*x11976))+((r10*x11963)));
evalcond[5]=(x11966+((x11963*x11979))+((cj9*x11980))+((r20*x11965))+(((-1.0)*cj7*x11968))+((r21*x11961))+(((-1.0)*cj9*x11962*x11971)));
evalcond[6]=(((r01*x11967))+((r00*x11963))+(((-1.0)*x11966))+(((-1.0)*gconst22*x11964*x11975))+(((-1.0)*x11964*x11973))+((x11961*x11981))+((cj7*cj8)));
evalcond[7]=(((r01*x11961))+((r00*x11965))+((x11963*x11975))+(((-1.0)*x11982))+(((-1.0)*cj9*x11962*x11981))+((cj9*x11973)));
evalcond[8]=(((x11961*x11971))+(((-1.0)*gconst22*x11964*x11979))+(((-1.0)*x11982))+((r20*x11963))+(((-1.0)*x11964*x11980))+((r21*x11967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11983=((1.0)*gconst23);
CheckValue<IkReal> x11984 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x11983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x11983)))),-1);
if(!x11985.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x11984.value)+(((1.5707963267949)*(x11985.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x11986=IKsin(j10);
IkReal x11987=IKcos(j10);
IkReal x11988=(gconst23*sj9);
IkReal x11989=((1.0)*gconst23);
IkReal x11990=(cj9*gconst22);
IkReal x11991=((1.0)*sj9);
IkReal x11992=(gconst22*sj9);
IkReal x11993=(sj7*sj8);
IkReal x11994=(cj9*gconst23);
IkReal x11995=((1.0)*cj8);
IkReal x11996=(sj7*x11995);
IkReal x11997=((1.0)*cj7*sj8);
IkReal x11998=(r20*x11987);
IkReal x11999=(r11*x11987);
IkReal x12000=(r02*x11986);
IkReal x12001=(gconst22*x11986);
IkReal x12002=(r01*x11987);
IkReal x12003=(r12*x11986);
IkReal x12004=((1.0)*x11987);
IkReal x12005=(r10*x11987);
IkReal x12006=(r21*x11987);
IkReal x12007=(r22*x11986);
IkReal x12008=(r00*x11987);
IkReal x12009=(x11997+x11996);
evalcond[0]=((((-1.0)*r20*x11986*x11989))+((r21*x12001))+(((-1.0)*r22*x12004)));
evalcond[1]=(((r01*x12001))+(((-1.0)*r00*x11986*x11989))+(((-1.0)*r02*x12004)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12004))+((r11*x12001))+(((-1.0)*r10*x11986*x11989)));
evalcond[3]=(((x11990*x11999))+((cj9*x12003))+((r11*x11988))+(((-1.0)*cj9*x11989*x12005))+((r10*x11992)));
evalcond[4]=((((-1.0)*x11991*x12003))+((x11988*x12005))+(((-1.0)*gconst22*x11991*x11999))+((r11*x11994))+((r10*x11990)));
evalcond[5]=(((r20*x11992))+x11993+((r21*x11988))+((x11990*x12006))+((cj9*x12007))+(((-1.0)*cj9*x11989*x11998))+(((-1.0)*cj7*x11995)));
evalcond[6]=((((-1.0)*x11991*x12000))+((cj7*cj8))+((r01*x11994))+(((-1.0)*x11993))+((r00*x11990))+((x11988*x12008))+(((-1.0)*gconst22*x11991*x12002)));
evalcond[7]=(((x11990*x12002))+(((-1.0)*x12009))+((cj9*x12000))+((r00*x11992))+(((-1.0)*cj9*x11989*x12008))+((r01*x11988)));
evalcond[8]=(((r20*x11990))+(((-1.0)*x11991*x12007))+((x11988*x11998))+(((-1.0)*x12009))+((r21*x11994))+(((-1.0)*gconst22*x11991*x12006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12010=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12010.valid){
continue;
}
CheckValue<IkReal> x12011 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12011.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12010.value)))+(x12011.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12012=IKsin(j10);
IkReal x12013=IKcos(j10);
IkReal x12014=(gconst23*sj9);
IkReal x12015=((1.0)*gconst23);
IkReal x12016=(cj9*gconst22);
IkReal x12017=((1.0)*sj9);
IkReal x12018=(gconst22*sj9);
IkReal x12019=(sj7*sj8);
IkReal x12020=(cj9*gconst23);
IkReal x12021=((1.0)*cj8);
IkReal x12022=(sj7*x12021);
IkReal x12023=((1.0)*cj7*sj8);
IkReal x12024=(r20*x12013);
IkReal x12025=(r11*x12013);
IkReal x12026=(r02*x12012);
IkReal x12027=(gconst22*x12012);
IkReal x12028=(r01*x12013);
IkReal x12029=(r12*x12012);
IkReal x12030=((1.0)*x12013);
IkReal x12031=(r10*x12013);
IkReal x12032=(r21*x12013);
IkReal x12033=(r22*x12012);
IkReal x12034=(r00*x12013);
IkReal x12035=(x12022+x12023);
evalcond[0]=(((r21*x12027))+(((-1.0)*r22*x12030))+(((-1.0)*r20*x12012*x12015)));
evalcond[1]=(((r01*x12027))+(((-1.0)*r02*x12030))+(((-1.0)*r00*x12012*x12015)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12012*x12015))+(((-1.0)*r12*x12030))+((r11*x12027)));
evalcond[3]=(((x12016*x12025))+(((-1.0)*cj9*x12015*x12031))+((r10*x12018))+((r11*x12014))+((cj9*x12029)));
evalcond[4]=(((r10*x12016))+(((-1.0)*gconst22*x12017*x12025))+(((-1.0)*x12017*x12029))+((r11*x12020))+((x12014*x12031)));
evalcond[5]=(((x12016*x12032))+(((-1.0)*cj9*x12015*x12024))+((r21*x12014))+((cj9*x12033))+x12019+(((-1.0)*cj7*x12021))+((r20*x12018)));
evalcond[6]=(((r01*x12020))+((cj7*cj8))+(((-1.0)*x12019))+(((-1.0)*gconst22*x12017*x12028))+((r00*x12016))+(((-1.0)*x12017*x12026))+((x12014*x12034)));
evalcond[7]=(((x12016*x12028))+(((-1.0)*cj9*x12015*x12034))+(((-1.0)*x12035))+((cj9*x12026))+((r00*x12018))+((r01*x12014)));
evalcond[8]=((((-1.0)*x12035))+((r20*x12016))+(((-1.0)*gconst22*x12017*x12032))+((r21*x12020))+(((-1.0)*x12017*x12033))+((x12014*x12024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12037 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12037)==0){
continue;
}
IkReal x12036=pow(x12037,-0.5);
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12038.value));
IkReal gconst25=((-1.0)*r21*x12036);
IkReal gconst26=(r20*x12036);
CheckValue<IkReal> x12039 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x12039.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12042.valid){
continue;
}
IkReal x12040=((-1.0)*(x12042.value));
IkReal x12041=x12036;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst25;
cj11=gconst26;
j11=x12040;
IkReal gconst24=x12040;
IkReal gconst25=((-1.0)*r21*x12041);
IkReal gconst26=(r20*x12041);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
IkReal x12043=((-1.0)*(x12045.value));
IkReal x12044=x12036;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst25;
cj11=gconst26;
j11=x12043;
IkReal gconst24=x12043;
IkReal gconst25=((-1.0)*r21*x12044);
IkReal gconst26=(r20*x12044);
CheckValue<IkReal> x12053=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12053.valid){
continue;
}
IkReal x12046=x12053.value;
IkReal x12047=(sj9*x12046);
IkReal x12048=(r10*x12047);
IkReal x12049=(r00*x12047);
IkReal x12050=(r01*x12047);
IkReal x12051=(r11*x12047);
IkReal x12052=(r20*r21*x12047);
j10eval[0]=IKsign((((r02*r12*sj9))+((r00*x12048*(r20*r20)))+((r01*r20*r21*x12048))+((r11*r20*r21*x12049))+((r11*x12050*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12054=gconst26*gconst26;
IkReal x12055=gconst25*gconst25;
IkReal x12056=(r00*r11);
IkReal x12057=(r01*sj9);
IkReal x12058=((1.0)*cj9);
IkReal x12059=(gconst25*gconst26);
IkReal x12060=(r02*sj9);
IkReal x12061=(r00*r10);
IkReal x12062=((1.0)*x12054);
CheckValue<IkReal> x12063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x12055*x12058))+(((-1.0)*r02*r12*x12058))+((cj9*r01*r10*x12059))+(((-1.0)*x12054*x12058*x12061))+((cj9*x12056*x12059)))),-1);
if(!x12063.valid){
continue;
}
CheckValue<IkReal> x12064 = IKatan2WithCheck(IkReal((((gconst25*r10*x12060))+((gconst26*r11*x12060)))),IkReal((((r10*x12055*x12057))+(((-1.0)*sj9*x12059*x12061))+(((-1.0)*sj9*x12056*x12062))+((r11*x12057*x12059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12064.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12063.value)))+(x12064.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12065=IKsin(j10);
IkReal x12066=IKcos(j10);
IkReal x12067=(cj9*gconst26);
IkReal x12068=(gconst26*sj9);
IkReal x12069=(cj9*gconst25);
IkReal x12070=(gconst25*sj9);
IkReal x12071=((1.0)*cj8);
IkReal x12072=((1.0)*sj8);
IkReal x12073=(sj7*x12071);
IkReal x12074=(cj7*x12072);
IkReal x12075=((1.0)*x12065);
IkReal x12076=(r11*x12066);
IkReal x12077=(gconst25*x12065);
IkReal x12078=((1.0)*x12066);
IkReal x12079=(cj9*x12065);
IkReal x12080=(x12074+x12073);
evalcond[0]=((((-1.0)*gconst26*r20*x12075))+(((-1.0)*r22*x12078))+((r21*x12077)));
evalcond[1]=((((-1.0)*gconst26*r00*x12075))+(((-1.0)*r02*x12078))+((r01*x12077)));
evalcond[2]=((1.0)+((r11*x12077))+(((-1.0)*gconst26*r10*x12075))+(((-1.0)*r12*x12078)));
evalcond[3]=(((r10*x12070))+((x12069*x12076))+(((-1.0)*r10*x12067*x12078))+((r11*x12068))+((r12*x12079)));
evalcond[4]=((((-1.0)*x12070*x12076))+((r10*x12069))+(((-1.0)*r12*sj9*x12075))+((r10*x12066*x12068))+((r11*x12067)));
evalcond[5]=(((r21*x12068))+((r21*x12066*x12069))+(((-1.0)*r20*x12067*x12078))+(((-1.0)*cj7*x12071))+((r22*x12079))+((r20*x12070))+((sj7*sj8)));
evalcond[6]=(((r00*x12069))+((r01*x12067))+(((-1.0)*sj7*x12072))+((cj7*cj8))+(((-1.0)*r02*sj9*x12075))+(((-1.0)*r01*x12070*x12078))+((r00*x12066*x12068)));
evalcond[7]=((((-1.0)*x12080))+((r01*x12068))+((r01*x12066*x12069))+(((-1.0)*r00*x12067*x12078))+((r02*x12079))+((r00*x12070)));
evalcond[8]=(((r21*x12067))+((r20*x12066*x12068))+(((-1.0)*r22*sj9*x12075))+(((-1.0)*r21*x12070*x12078))+(((-1.0)*x12080))+((r20*x12069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12081=gconst26*gconst26;
IkReal x12082=gconst25*gconst25;
IkReal x12083=(r01*r10);
IkReal x12084=(gconst25*gconst26);
IkReal x12085=((1.0)*sj9);
IkReal x12086=(cj9*r11);
IkReal x12087=(cj9*r10);
IkReal x12088=(r00*x12081);
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal((((gconst26*r02*x12086))+((gconst25*r02*x12087)))),IkReal((((cj9*x12082*x12083))+((r01*x12084*x12086))+(((-1.0)*x12086*x12088))+(((-1.0)*r00*x12084*x12087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
CheckValue<IkReal> x12090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r11*x12084*x12085))+((r02*r12*sj9))+(((-1.0)*x12083*x12084*x12085))+((r10*sj9*x12088))+((r01*r11*sj9*x12082)))),-1);
if(!x12090.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12089.value)+(((1.5707963267949)*(x12090.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12091=IKsin(j10);
IkReal x12092=IKcos(j10);
IkReal x12093=(cj9*gconst26);
IkReal x12094=(gconst26*sj9);
IkReal x12095=(cj9*gconst25);
IkReal x12096=(gconst25*sj9);
IkReal x12097=((1.0)*cj8);
IkReal x12098=((1.0)*sj8);
IkReal x12099=(sj7*x12097);
IkReal x12100=(cj7*x12098);
IkReal x12101=((1.0)*x12091);
IkReal x12102=(r11*x12092);
IkReal x12103=(gconst25*x12091);
IkReal x12104=((1.0)*x12092);
IkReal x12105=(cj9*x12091);
IkReal x12106=(x12100+x12099);
evalcond[0]=((((-1.0)*r22*x12104))+(((-1.0)*gconst26*r20*x12101))+((r21*x12103)));
evalcond[1]=(((r01*x12103))+(((-1.0)*gconst26*r00*x12101))+(((-1.0)*r02*x12104)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12104))+((r11*x12103))+(((-1.0)*gconst26*r10*x12101)));
evalcond[3]=(((r11*x12094))+((x12095*x12102))+((r10*x12096))+((r12*x12105))+(((-1.0)*r10*x12093*x12104)));
evalcond[4]=(((r11*x12093))+(((-1.0)*x12096*x12102))+((r10*x12092*x12094))+((r10*x12095))+(((-1.0)*r12*sj9*x12101)));
evalcond[5]=(((r21*x12092*x12095))+(((-1.0)*cj7*x12097))+(((-1.0)*r20*x12093*x12104))+((r20*x12096))+((sj7*sj8))+((r22*x12105))+((r21*x12094)));
evalcond[6]=(((r01*x12093))+(((-1.0)*r01*x12096*x12104))+((r00*x12095))+(((-1.0)*sj7*x12098))+((cj7*cj8))+((r00*x12092*x12094))+(((-1.0)*r02*sj9*x12101)));
evalcond[7]=(((r01*x12094))+((r02*x12105))+((r00*x12096))+(((-1.0)*x12106))+(((-1.0)*r00*x12093*x12104))+((r01*x12092*x12095)));
evalcond[8]=(((r20*x12092*x12094))+((r20*x12095))+(((-1.0)*x12106))+(((-1.0)*r21*x12096*x12104))+(((-1.0)*r22*sj9*x12101))+((r21*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12107=((1.0)*gconst26);
CheckValue<IkReal> x12108 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12107))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12108.valid){
continue;
}
CheckValue<IkReal> x12109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12107))+(((-1.0)*gconst25*r00)))),-1);
if(!x12109.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12108.value)+(((1.5707963267949)*(x12109.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12110=IKsin(j10);
IkReal x12111=IKcos(j10);
IkReal x12112=(cj9*gconst26);
IkReal x12113=(gconst26*sj9);
IkReal x12114=(cj9*gconst25);
IkReal x12115=(gconst25*sj9);
IkReal x12116=((1.0)*cj8);
IkReal x12117=((1.0)*sj8);
IkReal x12118=(sj7*x12116);
IkReal x12119=(cj7*x12117);
IkReal x12120=((1.0)*x12110);
IkReal x12121=(r11*x12111);
IkReal x12122=(gconst25*x12110);
IkReal x12123=((1.0)*x12111);
IkReal x12124=(cj9*x12110);
IkReal x12125=(x12118+x12119);
evalcond[0]=(((r21*x12122))+(((-1.0)*gconst26*r20*x12120))+(((-1.0)*r22*x12123)));
evalcond[1]=(((r01*x12122))+(((-1.0)*gconst26*r00*x12120))+(((-1.0)*r02*x12123)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12123))+(((-1.0)*gconst26*r10*x12120))+((r11*x12122)));
evalcond[3]=(((r10*x12115))+((x12114*x12121))+((r12*x12124))+(((-1.0)*r10*x12112*x12123))+((r11*x12113)));
evalcond[4]=((((-1.0)*r12*sj9*x12120))+((r10*x12114))+(((-1.0)*x12115*x12121))+((r10*x12111*x12113))+((r11*x12112)));
evalcond[5]=((((-1.0)*cj7*x12116))+((r21*x12111*x12114))+((r20*x12115))+((r22*x12124))+(((-1.0)*r20*x12112*x12123))+((sj7*sj8))+((r21*x12113)));
evalcond[6]=(((r00*x12111*x12113))+(((-1.0)*r02*sj9*x12120))+(((-1.0)*sj7*x12117))+((r01*x12112))+((r00*x12114))+((cj7*cj8))+(((-1.0)*r01*x12115*x12123)));
evalcond[7]=((((-1.0)*x12125))+(((-1.0)*r00*x12112*x12123))+((r01*x12113))+((r00*x12115))+((r01*x12111*x12114))+((r02*x12124)));
evalcond[8]=((((-1.0)*x12125))+((r20*x12114))+(((-1.0)*r21*x12115*x12123))+((r21*x12112))+(((-1.0)*r22*sj9*x12120))+((r20*x12111*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12127 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12127)==0){
continue;
}
IkReal x12126=pow(x12127,-0.5);
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12128.value))));
IkReal gconst28=((1.0)*r21*x12126);
IkReal gconst29=((-1.0)*r20*x12126);
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x12129.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12132.valid){
continue;
}
IkReal x12130=((1.0)*(x12132.value));
IkReal x12131=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12130)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12130)));
IkReal gconst28=((1.0)*r21*x12131);
IkReal gconst29=((-1.0)*r20*x12131);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
CheckValue<IkReal> x12135 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12135.valid){
continue;
}
IkReal x12133=((1.0)*(x12135.value));
IkReal x12134=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12133)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12133)));
IkReal gconst28=((1.0)*r21*x12134);
IkReal gconst29=((-1.0)*r20*x12134);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
IkReal x12136=((1.0)*(x12138.value));
IkReal x12137=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12136)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12136)));
IkReal gconst28=((1.0)*r21*x12137);
IkReal gconst29=((-1.0)*r20*x12137);
j10eval[0]=r02;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
IkReal x12139=((1.0)*(x12141.value));
IkReal x12140=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12139)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12139)));
IkReal gconst28=((1.0)*r21*x12140);
IkReal gconst29=((-1.0)*r20*x12140);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
IkReal x12142=((1.0)*(x12144.value));
IkReal x12143=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12142)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12142)));
IkReal gconst28=((1.0)*r21*x12143);
IkReal gconst29=((-1.0)*r20*x12143);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12147.valid){
continue;
}
IkReal x12145=((1.0)*(x12147.value));
IkReal x12146=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12145)));
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12145)));
IkReal gconst28=((1.0)*r21*x12146);
IkReal gconst29=((-1.0)*r20*x12146);
IkReal x12148=r22*r22;
IkReal x12149=(cj7*cj8*r02);
CheckValue<IkReal> x12154=IKPowWithIntegerCheck(((-1.0)+x12148),-1);
if(!x12154.valid){
continue;
}
IkReal x12150=x12154.value;
IkReal x12151=((1.0)*r02*sj7*sj8);
if((((1.0)+(((-1.0)*x12148)))) < -0.00001)
continue;
IkReal x12152=IKsqrt(((1.0)+(((-1.0)*x12148))));
IkReal x12153=(r22*x12150*x12152);
j10eval[0]=((IKabs((((x12149*x12153))+(((-1.0)*x12151*x12153)))))+(IKabs((x12149+(((-1.0)*x12151))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12155=(sj7*sj8);
IkReal x12156=(gconst29*r00);
IkReal x12157=(cj7*cj8);
IkReal x12158=(gconst28*r01);
CheckValue<IkReal> x12159 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12155))+((r02*x12157)))),IkReal(((((-1.0)*x12155*x12158))+(((-1.0)*x12156*x12157))+((x12157*x12158))+((x12155*x12156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12159.valid){
continue;
}
CheckValue<IkReal> x12160=IKPowWithIntegerCheck(IKsign(((x12158*x12158)+(x12156*x12156)+(((-2.0)*x12156*x12158))+(r02*r02))),-1);
if(!x12160.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12159.value)+(((1.5707963267949)*(x12160.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12161=IKsin(j10);
IkReal x12162=IKcos(j10);
IkReal x12163=(gconst29*r10);
IkReal x12164=(gconst28*r11);
IkReal x12165=((1.0)*sj8);
IkReal x12166=(gconst29*r20);
IkReal x12167=(gconst29*r00);
IkReal x12168=((1.0)*x12162);
IkReal x12169=(gconst28*x12161);
IkReal x12170=((1.0)*x12161);
evalcond[0]=(((r21*x12169))+(((-1.0)*r22*x12168))+(((-1.0)*x12166*x12170)));
evalcond[1]=(((r01*x12169))+(((-1.0)*x12167*x12170))+(((-1.0)*r02*x12168)));
evalcond[2]=((((-1.0)*x12164*x12168))+((x12162*x12163))+(((-1.0)*r12*x12170)));
evalcond[3]=((1.0)+(((-1.0)*x12163*x12170))+((x12161*x12164))+(((-1.0)*r12*x12168)));
evalcond[4]=(((cj7*cj8))+(((-1.0)*sj7*x12165))+((x12162*x12167))+(((-1.0)*gconst28*r01*x12168))+(((-1.0)*r02*x12170)));
evalcond[5]=((((-1.0)*r22*x12170))+(((-1.0)*gconst28*r21*x12168))+(((-1.0)*cj8*sj7))+((x12162*x12166))+(((-1.0)*cj7*x12165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12171=(gconst29*r10);
IkReal x12172=(gconst28*r11);
CheckValue<IkReal> x12173=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12172*x12172)+(x12171*x12171)+(((-2.0)*x12171*x12172)))),-1);
if(!x12173.valid){
continue;
}
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(((((-1.0)*x12172))+x12171)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12173.value)))+(x12174.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12175=IKsin(j10);
IkReal x12176=IKcos(j10);
IkReal x12177=(gconst29*r10);
IkReal x12178=(gconst28*r11);
IkReal x12179=((1.0)*sj8);
IkReal x12180=(gconst29*r20);
IkReal x12181=(gconst29*r00);
IkReal x12182=((1.0)*x12176);
IkReal x12183=(gconst28*x12175);
IkReal x12184=((1.0)*x12175);
evalcond[0]=(((r21*x12183))+(((-1.0)*r22*x12182))+(((-1.0)*x12180*x12184)));
evalcond[1]=((((-1.0)*r02*x12182))+(((-1.0)*x12181*x12184))+((r01*x12183)));
evalcond[2]=(((x12176*x12177))+(((-1.0)*r12*x12184))+(((-1.0)*x12178*x12182)));
evalcond[3]=((1.0)+((x12175*x12178))+(((-1.0)*x12177*x12184))+(((-1.0)*r12*x12182)));
evalcond[4]=((((-1.0)*r02*x12184))+(((-1.0)*sj7*x12179))+((cj7*cj8))+(((-1.0)*gconst28*r01*x12182))+((x12176*x12181)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst28*r21*x12182))+((x12176*x12180))+(((-1.0)*r22*x12184))+(((-1.0)*cj7*x12179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12185=((1.0)*gconst29);
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x12185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x12185)))),-1);
if(!x12187.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12186.value)+(((1.5707963267949)*(x12187.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12188=IKsin(j10);
IkReal x12189=IKcos(j10);
IkReal x12190=(gconst29*r10);
IkReal x12191=(gconst28*r11);
IkReal x12192=((1.0)*sj8);
IkReal x12193=(gconst29*r20);
IkReal x12194=(gconst29*r00);
IkReal x12195=((1.0)*x12189);
IkReal x12196=(gconst28*x12188);
IkReal x12197=((1.0)*x12188);
evalcond[0]=(((r21*x12196))+(((-1.0)*x12193*x12197))+(((-1.0)*r22*x12195)));
evalcond[1]=((((-1.0)*x12194*x12197))+(((-1.0)*r02*x12195))+((r01*x12196)));
evalcond[2]=(((x12189*x12190))+(((-1.0)*r12*x12197))+(((-1.0)*x12191*x12195)));
evalcond[3]=((1.0)+((x12188*x12191))+(((-1.0)*x12190*x12197))+(((-1.0)*r12*x12195)));
evalcond[4]=((((-1.0)*r02*x12197))+((x12189*x12194))+((cj7*cj8))+(((-1.0)*gconst28*r01*x12195))+(((-1.0)*sj7*x12192)));
evalcond[5]=((((-1.0)*cj8*sj7))+((x12189*x12193))+(((-1.0)*gconst28*r21*x12195))+(((-1.0)*cj7*x12192))+(((-1.0)*r22*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12200 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12200.valid){
continue;
}
IkReal x12198=((1.0)*(x12200.value));
IkReal x12199=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12198)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12198)));
IkReal gconst28=((1.0)*r21*x12199);
IkReal gconst29=((-1.0)*r20*x12199);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
CheckValue<IkReal> x12203 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12203.valid){
continue;
}
IkReal x12201=((1.0)*(x12203.value));
IkReal x12202=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12201)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12201)));
IkReal gconst28=((1.0)*r21*x12202);
IkReal gconst29=((-1.0)*r20*x12202);
IkReal x12204=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12208=IKPowWithIntegerCheck(x12204,-1);
if(!x12208.valid){
continue;
}
IkReal x12205=x12208.value;
IkReal x12206=((1.0)*x12205);
IkReal x12207=((((-1.0)*(r12*r12)))+(((-1.0)*x12206*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12205))+(((-1.0)*x12206*(r11*r11)*(r21*r21))));
j10eval[0]=x12207;
j10eval[1]=r12;
j10eval[2]=x12204;
j10eval[3]=IKsign(x12207);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12211 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12211.valid){
continue;
}
IkReal x12209=((1.0)*(x12211.value));
IkReal x12210=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12209)));
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12209)));
IkReal gconst28=((1.0)*r21*x12210);
IkReal gconst29=((-1.0)*r20*x12210);
IkReal x12212=r22*r22;
IkReal x12213=(cj7*r12*sj8);
IkReal x12214=(cj8*r12*sj7);
CheckValue<IkReal> x12218=IKPowWithIntegerCheck(((-1.0)+x12212),-1);
if(!x12218.valid){
continue;
}
IkReal x12215=x12218.value;
if((((1.0)+(((-1.0)*x12212)))) < -0.00001)
continue;
IkReal x12216=IKsqrt(((1.0)+(((-1.0)*x12212))));
IkReal x12217=((1.0)*r22*x12215*x12216);
j10eval[0]=((IKabs((x12213+x12214)))+(IKabs(((((-1.0)*x12213*x12217))+(((-1.0)*x12214*x12217))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12219=((1.0)*gconst28);
IkReal x12220=(gconst29*r10);
IkReal x12221=(cj8*sj7);
IkReal x12222=(cj7*sj8);
CheckValue<IkReal> x12223 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x12219*x12221))+(((-1.0)*r11*x12219*x12222))+((x12220*x12221))+((x12220*x12222)))),IkReal((((r12*x12221))+((r12*x12222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12223.valid){
continue;
}
CheckValue<IkReal> x12224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x12219))+(((-1.0)*gconst29*r01)))),-1);
if(!x12224.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12223.value)+(((1.5707963267949)*(x12224.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12225=IKcos(j10);
IkReal x12226=IKsin(j10);
IkReal x12227=((1.0)*gconst29);
IkReal x12228=((1.0)*sj7);
IkReal x12229=(gconst28*x12225);
IkReal x12230=(gconst28*x12226);
IkReal x12231=((1.0)*x12225);
evalcond[0]=((((-1.0)*r10*x12225*x12227))+((r11*x12229))+((r12*x12226)));
evalcond[1]=((((-1.0)*r22*x12231))+(((-1.0)*r20*x12226*x12227))+((r21*x12230)));
evalcond[2]=(((r01*x12230))+(((-1.0)*r02*x12231))+(((-1.0)*r00*x12226*x12227)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12231))+(((-1.0)*r10*x12226*x12227))+((r11*x12230)));
evalcond[4]=(((r02*x12226))+((cj7*cj8))+(((-1.0)*r00*x12225*x12227))+((r01*x12229))+(((-1.0)*sj8*x12228)));
evalcond[5]=(((r22*x12226))+(((-1.0)*cj8*x12228))+((r21*x12229))+(((-1.0)*r20*x12225*x12227))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12232=(gconst28*r11);
IkReal x12233=(gconst29*r10);
CheckValue<IkReal> x12234 = IKatan2WithCheck(IkReal((x12232+(((-1.0)*x12233)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12234.valid){
continue;
}
CheckValue<IkReal> x12235=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12232*x12232)))+(((2.0)*x12232*x12233))+(((-1.0)*(r12*r12)))+(((-1.0)*(x12233*x12233))))),-1);
if(!x12235.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12234.value)+(((1.5707963267949)*(x12235.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12236=IKcos(j10);
IkReal x12237=IKsin(j10);
IkReal x12238=((1.0)*gconst29);
IkReal x12239=((1.0)*sj7);
IkReal x12240=(gconst28*x12236);
IkReal x12241=(gconst28*x12237);
IkReal x12242=((1.0)*x12236);
evalcond[0]=(((r11*x12240))+(((-1.0)*r10*x12236*x12238))+((r12*x12237)));
evalcond[1]=((((-1.0)*r20*x12237*x12238))+(((-1.0)*r22*x12242))+((r21*x12241)));
evalcond[2]=((((-1.0)*r00*x12237*x12238))+((r01*x12241))+(((-1.0)*r02*x12242)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12242))+((r11*x12241))+(((-1.0)*r10*x12237*x12238)));
evalcond[4]=((((-1.0)*sj8*x12239))+((cj7*cj8))+((r01*x12240))+(((-1.0)*r00*x12236*x12238))+((r02*x12237)));
evalcond[5]=((((-1.0)*r20*x12236*x12238))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x12239))+((r22*x12237))+((r21*x12240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12243=((1.0)*gconst29);
CheckValue<IkReal> x12244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12243))+(((-1.0)*gconst28*r00)))),-1);
if(!x12244.valid){
continue;
}
CheckValue<IkReal> x12245 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12243))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12245.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12244.value)))+(x12245.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12246=IKcos(j10);
IkReal x12247=IKsin(j10);
IkReal x12248=((1.0)*gconst29);
IkReal x12249=((1.0)*sj7);
IkReal x12250=(gconst28*x12246);
IkReal x12251=(gconst28*x12247);
IkReal x12252=((1.0)*x12246);
evalcond[0]=((((-1.0)*r10*x12246*x12248))+((r11*x12250))+((r12*x12247)));
evalcond[1]=((((-1.0)*r20*x12247*x12248))+((r21*x12251))+(((-1.0)*r22*x12252)));
evalcond[2]=((((-1.0)*r00*x12247*x12248))+((r01*x12251))+(((-1.0)*r02*x12252)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12247*x12248))+(((-1.0)*r12*x12252))+((r11*x12251)));
evalcond[4]=((((-1.0)*r00*x12246*x12248))+((r01*x12250))+((cj7*cj8))+((r02*x12247))+(((-1.0)*sj8*x12249)));
evalcond[5]=((((-1.0)*cj7*sj8))+((r21*x12250))+((r22*x12247))+(((-1.0)*cj8*x12249))+(((-1.0)*r20*x12246*x12248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
IkReal x12253=((1.0)*(x12255.value));
IkReal x12254=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12253)));
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12253)));
IkReal gconst28=((1.0)*r21*x12254);
IkReal gconst29=((-1.0)*r20*x12254);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[4];
CheckValue<IkReal> x12258 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12258.valid){
continue;
}
IkReal x12256=((1.0)*(x12258.value));
IkReal x12257=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12256)));
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12256)));
IkReal gconst28=((1.0)*r21*x12257);
IkReal gconst29=((-1.0)*r20*x12257);
IkReal x12259=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x12263=IKPowWithIntegerCheck(x12259,-1);
if(!x12263.valid){
continue;
}
IkReal x12260=x12263.value;
IkReal x12261=((1.0)*x12260);
IkReal x12262=((((-1.0)*x12261*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x12260))+(((-1.0)*(r12*r12)))+(((-1.0)*x12261*(r10*r10)*(r20*r20))));
j10eval[0]=x12262;
j10eval[1]=r12;
j10eval[2]=x12259;
j10eval[3]=IKsign(x12262);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12266 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12266.valid){
continue;
}
IkReal x12264=((1.0)*(x12266.value));
IkReal x12265=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12264)));
sj9=0;
cj9=1.0;
j9=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12264)));
IkReal gconst28=((1.0)*r21*x12265);
IkReal gconst29=((-1.0)*r20*x12265);
IkReal x12267=r22*r22;
IkReal x12268=(cj7*cj8*r12);
IkReal x12269=(r12*sj7*sj8);
CheckValue<IkReal> x12273=IKPowWithIntegerCheck(((-1.0)+x12267),-1);
if(!x12273.valid){
continue;
}
IkReal x12270=x12273.value;
if((((1.0)+(((-1.0)*x12267)))) < -0.00001)
continue;
IkReal x12271=IKsqrt(((1.0)+(((-1.0)*x12267))));
IkReal x12272=(r22*x12270*x12271);
j10eval[0]=((IKabs((((x12269*x12272))+(((-1.0)*x12268*x12272)))))+(IKabs((x12268+(((-1.0)*x12269))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12274=(gconst28*r11);
IkReal x12275=(sj7*sj8);
IkReal x12276=(cj7*cj8);
IkReal x12277=(gconst29*r10);
CheckValue<IkReal> x12278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*gconst29*r01)))),-1);
if(!x12278.valid){
continue;
}
CheckValue<IkReal> x12279 = IKatan2WithCheck(IkReal(((((-1.0)*x12274*x12276))+((x12276*x12277))+(((-1.0)*x12275*x12277))+((x12274*x12275)))),IkReal((((r12*x12276))+(((-1.0)*r12*x12275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12279.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12278.value)))+(x12279.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12280=IKcos(j10);
IkReal x12281=IKsin(j10);
IkReal x12282=((1.0)*gconst29);
IkReal x12283=((1.0)*cj8);
IkReal x12284=(gconst28*x12280);
IkReal x12285=(gconst28*x12281);
IkReal x12286=((1.0)*x12280);
evalcond[0]=((((-1.0)*r10*x12280*x12282))+((r12*x12281))+((r11*x12284)));
evalcond[1]=((((-1.0)*r22*x12286))+(((-1.0)*r20*x12281*x12282))+((r21*x12285)));
evalcond[2]=((((-1.0)*r00*x12281*x12282))+((r01*x12285))+(((-1.0)*r02*x12286)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12286))+(((-1.0)*r10*x12281*x12282))+((r11*x12285)));
evalcond[4]=((((-1.0)*cj7*x12283))+((r22*x12281))+(((-1.0)*r20*x12280*x12282))+((sj7*sj8))+((r21*x12284)));
evalcond[5]=((((-1.0)*sj7*x12283))+((r02*x12281))+(((-1.0)*r00*x12280*x12282))+((r01*x12284))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12287=(gconst28*r11);
IkReal x12288=(gconst29*r10);
CheckValue<IkReal> x12289=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12288*x12288)))+(((2.0)*x12287*x12288))+(((-1.0)*(r12*r12)))+(((-1.0)*(x12287*x12287))))),-1);
if(!x12289.valid){
continue;
}
CheckValue<IkReal> x12290 = IKatan2WithCheck(IkReal((x12287+(((-1.0)*x12288)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12290.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12289.value)))+(x12290.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12291=IKcos(j10);
IkReal x12292=IKsin(j10);
IkReal x12293=((1.0)*gconst29);
IkReal x12294=((1.0)*cj8);
IkReal x12295=(gconst28*x12291);
IkReal x12296=(gconst28*x12292);
IkReal x12297=((1.0)*x12291);
evalcond[0]=((((-1.0)*r10*x12291*x12293))+((r11*x12295))+((r12*x12292)));
evalcond[1]=(((r21*x12296))+(((-1.0)*r22*x12297))+(((-1.0)*r20*x12292*x12293)));
evalcond[2]=(((r01*x12296))+(((-1.0)*r00*x12292*x12293))+(((-1.0)*r02*x12297)));
evalcond[3]=((1.0)+((r11*x12296))+(((-1.0)*r10*x12292*x12293))+(((-1.0)*r12*x12297)));
evalcond[4]=(((r21*x12295))+(((-1.0)*cj7*x12294))+((r22*x12292))+((sj7*sj8))+(((-1.0)*r20*x12291*x12293)));
evalcond[5]=(((r01*x12295))+((r02*x12292))+(((-1.0)*r00*x12291*x12293))+(((-1.0)*cj7*sj8))+(((-1.0)*sj7*x12294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12298=((1.0)*gconst29);
CheckValue<IkReal> x12299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12298))+(((-1.0)*gconst28*r00)))),-1);
if(!x12299.valid){
continue;
}
CheckValue<IkReal> x12300 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12298))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12300.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12299.value)))+(x12300.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12301=IKcos(j10);
IkReal x12302=IKsin(j10);
IkReal x12303=((1.0)*gconst29);
IkReal x12304=((1.0)*cj8);
IkReal x12305=(gconst28*x12301);
IkReal x12306=(gconst28*x12302);
IkReal x12307=((1.0)*x12301);
evalcond[0]=((((-1.0)*r10*x12301*x12303))+((r11*x12305))+((r12*x12302)));
evalcond[1]=(((r21*x12306))+(((-1.0)*r22*x12307))+(((-1.0)*r20*x12302*x12303)));
evalcond[2]=((((-1.0)*r02*x12307))+((r01*x12306))+(((-1.0)*r00*x12302*x12303)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12302*x12303))+((r11*x12306))+(((-1.0)*r12*x12307)));
evalcond[4]=(((r21*x12305))+(((-1.0)*cj7*x12304))+((r22*x12302))+((sj7*sj8))+(((-1.0)*r20*x12301*x12303)));
evalcond[5]=((((-1.0)*sj7*x12304))+(((-1.0)*r00*x12301*x12303))+(((-1.0)*cj7*sj8))+((r01*x12305))+((r02*x12302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12310 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12310.valid){
continue;
}
IkReal x12308=((1.0)*(x12310.value));
IkReal x12309=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12308)));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12308)));
IkReal gconst28=((1.0)*r21*x12309);
IkReal gconst29=((-1.0)*r20*x12309);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
CheckValue<IkReal> x12313 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12313.valid){
continue;
}
IkReal x12311=((1.0)*(x12313.value));
IkReal x12312=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12311)));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12311)));
IkReal gconst28=((1.0)*r21*x12312);
IkReal gconst29=((-1.0)*r20*x12312);
j10eval[0]=r12;
j10eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
IkReal x12314=((1.0)*(x12316.value));
IkReal x12315=x12126;
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12314)));
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12314)));
IkReal gconst28=((1.0)*r21*x12315);
IkReal gconst29=((-1.0)*r20*x12315);
IkReal x12317=r22*r22;
CheckValue<IkReal> x12320=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x12317))),-1);
if(!x12320.valid){
continue;
}
IkReal x12318=x12320.value;
IkReal x12319=((1.0)*x12318);
j10eval[0]=IKsign((x12317+((x12319*(r20*r20*r20*r20)))+((x12319*(r21*r21*r21*r21)))+(((2.0)*x12318*(r20*r20)*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12321=(cj7*cj8);
IkReal x12322=(gconst29*r20);
IkReal x12323=(sj7*sj8);
IkReal x12324=(gconst28*r21);
CheckValue<IkReal> x12325=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12322*x12322)+(x12324*x12324)+(((-2.0)*x12322*x12324)))),-1);
if(!x12325.valid){
continue;
}
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal((((r22*x12323))+(((-1.0)*r22*x12321)))),IkReal(((((-1.0)*x12322*x12323))+((x12323*x12324))+(((-1.0)*x12321*x12324))+((x12321*x12322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12325.value)))+(x12326.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12327=IKsin(j10);
IkReal x12328=IKcos(j10);
IkReal x12329=(gconst29*r10);
IkReal x12330=(gconst28*r11);
IkReal x12331=((1.0)*cj7);
IkReal x12332=(gconst29*r20);
IkReal x12333=(gconst29*r00);
IkReal x12334=((1.0)*x12328);
IkReal x12335=(gconst28*x12327);
IkReal x12336=((1.0)*x12327);
evalcond[0]=((((-1.0)*r22*x12334))+((r21*x12335))+(((-1.0)*x12332*x12336)));
evalcond[1]=(((r01*x12335))+(((-1.0)*x12333*x12336))+(((-1.0)*r02*x12334)));
evalcond[2]=(((x12328*x12329))+(((-1.0)*x12330*x12334))+(((-1.0)*r12*x12336)));
evalcond[3]=((1.0)+((x12327*x12330))+(((-1.0)*x12329*x12336))+(((-1.0)*r12*x12334)));
evalcond[4]=((((-1.0)*r22*x12336))+(((-1.0)*gconst28*r21*x12334))+((sj7*sj8))+((x12328*x12332))+(((-1.0)*cj8*x12331)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst28*r01*x12334))+(((-1.0)*r02*x12336))+((x12328*x12333))+(((-1.0)*sj8*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12337=(gconst29*r10);
IkReal x12338=(gconst28*r11);
CheckValue<IkReal> x12339 = IKatan2WithCheck(IkReal((x12337+(((-1.0)*x12338)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12339.valid){
continue;
}
CheckValue<IkReal> x12340=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12337*x12338))+(x12338*x12338)+(x12337*x12337))),-1);
if(!x12340.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12339.value)+(((1.5707963267949)*(x12340.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12341=IKsin(j10);
IkReal x12342=IKcos(j10);
IkReal x12343=(gconst29*r10);
IkReal x12344=(gconst28*r11);
IkReal x12345=((1.0)*cj7);
IkReal x12346=(gconst29*r20);
IkReal x12347=(gconst29*r00);
IkReal x12348=((1.0)*x12342);
IkReal x12349=(gconst28*x12341);
IkReal x12350=((1.0)*x12341);
evalcond[0]=((((-1.0)*x12346*x12350))+((r21*x12349))+(((-1.0)*r22*x12348)));
evalcond[1]=((((-1.0)*r02*x12348))+(((-1.0)*x12347*x12350))+((r01*x12349)));
evalcond[2]=((((-1.0)*x12344*x12348))+(((-1.0)*r12*x12350))+((x12342*x12343)));
evalcond[3]=((1.0)+((x12341*x12344))+(((-1.0)*x12343*x12350))+(((-1.0)*r12*x12348)));
evalcond[4]=((((-1.0)*gconst28*r21*x12348))+(((-1.0)*cj8*x12345))+((sj7*sj8))+(((-1.0)*r22*x12350))+((x12342*x12346)));
evalcond[5]=((((-1.0)*r02*x12350))+(((-1.0)*gconst28*r01*x12348))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x12345))+((x12342*x12347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12351=((1.0)*gconst29);
CheckValue<IkReal> x12352=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x12351)))),-1);
if(!x12352.valid){
continue;
}
CheckValue<IkReal> x12353 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x12351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12353.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12352.value)))+(x12353.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12354=IKsin(j10);
IkReal x12355=IKcos(j10);
IkReal x12356=(gconst29*r10);
IkReal x12357=(gconst28*r11);
IkReal x12358=((1.0)*cj7);
IkReal x12359=(gconst29*r20);
IkReal x12360=(gconst29*r00);
IkReal x12361=((1.0)*x12355);
IkReal x12362=(gconst28*x12354);
IkReal x12363=((1.0)*x12354);
evalcond[0]=((((-1.0)*r22*x12361))+(((-1.0)*x12359*x12363))+((r21*x12362)));
evalcond[1]=((((-1.0)*r02*x12361))+(((-1.0)*x12360*x12363))+((r01*x12362)));
evalcond[2]=(((x12355*x12356))+(((-1.0)*x12357*x12361))+(((-1.0)*r12*x12363)));
evalcond[3]=((1.0)+((x12354*x12357))+(((-1.0)*r12*x12361))+(((-1.0)*x12356*x12363)));
evalcond[4]=(((x12355*x12359))+(((-1.0)*r22*x12363))+(((-1.0)*cj8*x12358))+((sj7*sj8))+(((-1.0)*gconst28*r21*x12361)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*gconst28*r01*x12361))+(((-1.0)*r02*x12363))+(((-1.0)*sj8*x12358))+((x12355*x12360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
CheckValue<IkReal> x12366 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12366.valid){
continue;
}
IkReal x12364=((1.0)*(x12366.value));
IkReal x12365=((-1.0)*px);
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12364)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12365);
rxp1_1=(px*r21);
rxp1_2=(r11*x12365);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12364)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x12367=((1.0)*r11*r21);
IkReal x12368=((1.0)*r10*r20);
j10eval[0]=(x12367+x12368);
j10eval[1]=((((-1.0)*sj9*x12367))+(((-1.0)*sj9*x12368)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
CheckValue<IkReal> x12371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12371.valid){
continue;
}
IkReal x12369=((1.0)*(x12371.value));
IkReal x12370=((-1.0)*px);
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12369)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12370);
rxp1_1=(px*r21);
rxp1_2=(r11*x12370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12369)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x12372=((1.0)*r11*r21);
IkReal x12373=((1.0)*r10*r20);
j10eval[0]=(x12372+x12373);
j10eval[1]=(((cj9*x12373))+((cj9*x12372)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
CheckValue<IkReal> x12376 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12376.valid){
continue;
}
IkReal x12374=((1.0)*(x12376.value));
IkReal x12375=((-1.0)*px);
sj6=0;
cj6=1.0;
j6=0;
sj11=gconst28;
cj11=gconst29;
j11=((3.14159265)+(((-1.0)*x12374)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12375);
rxp1_1=(px*r21);
rxp1_2=(r11*x12375);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12374)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x12377=((1.0)*sj9);
j10eval[0]=r02;
j10eval[1]=sj9;
j10eval[2]=((((-1.0)*r11*r21*x12377))+(((-1.0)*r10*r20*x12377)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12378=((1.0)*cj9);
CheckValue<IkReal> x12379=IKPowWithIntegerCheck(r02,-1);
if(!x12379.valid){
continue;
}
CheckValue<IkReal> x12380=IKPowWithIntegerCheck(sj9,-1);
if(!x12380.valid){
continue;
}
CheckValue<IkReal> x12381=IKPowWithIntegerCheck((((gconst29*r10*sj9))+(((-1.0)*gconst28*r11*sj9))),-1);
if(!x12381.valid){
continue;
}
if( IKabs(((x12379.value)*(x12380.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12381.value)*(((((-1.0)*gconst29*r11*x12378))+(((-1.0)*gconst28*r10*x12378)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12379.value)*(x12380.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x12381.value)*(((((-1.0)*gconst29*r11*x12378))+(((-1.0)*gconst28*r10*x12378))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x12379.value)*(x12380.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x12381.value)*(((((-1.0)*gconst29*r11*x12378))+(((-1.0)*gconst28*r10*x12378))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12382=IKsin(j10);
IkReal x12383=IKcos(j10);
IkReal x12384=(gconst28*sj9);
IkReal x12385=(cj9*gconst28);
IkReal x12386=(sj7*sj8);
IkReal x12387=((1.0)*cj7);
IkReal x12388=(gconst29*r20);
IkReal x12389=(gconst29*r10);
IkReal x12390=(gconst29*r11);
IkReal x12391=(gconst29*r21);
IkReal x12392=((1.0)*cj8*sj7);
IkReal x12393=(sj8*x12387);
IkReal x12394=(r21*x12383);
IkReal x12395=(r11*x12383);
IkReal x12396=((1.0)*x12382);
IkReal x12397=(gconst28*x12382);
IkReal x12398=(sj9*x12383);
IkReal x12399=((1.0)*cj9*x12383);
IkReal x12400=(x12392+x12393);
evalcond[0]=((-1.0)*r02*x12383);
evalcond[1]=(((r21*x12397))+(((-1.0)*x12388*x12396)));
evalcond[2]=((1.0)+((r11*x12397))+(((-1.0)*x12389*x12396)));
evalcond[3]=(((cj7*cj8))+(((-1.0)*x12386))+(((-1.0)*r02*sj9*x12396)));
evalcond[4]=((((-1.0)*x12400))+((cj9*r02*x12382)));
evalcond[5]=(((x12389*x12398))+(((-1.0)*x12384*x12395))+((r10*x12385))+((cj9*x12390)));
evalcond[6]=(((r10*x12384))+(((-1.0)*x12389*x12399))+((sj9*x12390))+((x12385*x12395)));
evalcond[7]=((((-1.0)*cj8*x12387))+x12386+((sj9*x12391))+((x12385*x12394))+((r20*x12384))+(((-1.0)*x12388*x12399)));
evalcond[8]=((((-1.0)*x12400))+(((-1.0)*x12384*x12394))+((cj9*x12391))+((x12388*x12398))+((r20*x12385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12401=(gconst28*r11);
IkReal x12402=((1.0)*gconst29);
CheckValue<IkReal> x12403=IKPowWithIntegerCheck(((((-1.0)*r10*x12402))+x12401),-1);
if(!x12403.valid){
continue;
}
CheckValue<IkReal> x12404=IKPowWithIntegerCheck((((cj9*x12401))+(((-1.0)*cj9*r10*x12402))),-1);
if(!x12404.valid){
continue;
}
if( IKabs(((-1.0)*(x12403.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12404.value)*(((((-1.0)*r11*sj9*x12402))+(((-1.0)*gconst28*r10*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12403.value)))+IKsqr(((x12404.value)*(((((-1.0)*r11*sj9*x12402))+(((-1.0)*gconst28*r10*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12403.value)), ((x12404.value)*(((((-1.0)*r11*sj9*x12402))+(((-1.0)*gconst28*r10*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12405=IKsin(j10);
IkReal x12406=IKcos(j10);
IkReal x12407=(gconst28*sj9);
IkReal x12408=(cj9*gconst28);
IkReal x12409=(sj7*sj8);
IkReal x12410=((1.0)*cj7);
IkReal x12411=(gconst29*r20);
IkReal x12412=(gconst29*r10);
IkReal x12413=(gconst29*r11);
IkReal x12414=(gconst29*r21);
IkReal x12415=((1.0)*cj8*sj7);
IkReal x12416=(sj8*x12410);
IkReal x12417=(r21*x12406);
IkReal x12418=(r11*x12406);
IkReal x12419=((1.0)*x12405);
IkReal x12420=(gconst28*x12405);
IkReal x12421=(sj9*x12406);
IkReal x12422=((1.0)*cj9*x12406);
IkReal x12423=(x12416+x12415);
evalcond[0]=((-1.0)*r02*x12406);
evalcond[1]=(((r21*x12420))+(((-1.0)*x12411*x12419)));
evalcond[2]=((1.0)+(((-1.0)*x12412*x12419))+((r11*x12420)));
evalcond[3]=(((cj7*cj8))+(((-1.0)*r02*sj9*x12419))+(((-1.0)*x12409)));
evalcond[4]=((((-1.0)*x12423))+((cj9*r02*x12405)));
evalcond[5]=(((r10*x12408))+(((-1.0)*x12407*x12418))+((cj9*x12413))+((x12412*x12421)));
evalcond[6]=((((-1.0)*x12412*x12422))+((sj9*x12413))+((x12408*x12418))+((r10*x12407)));
evalcond[7]=(((sj9*x12414))+((x12408*x12417))+(((-1.0)*x12411*x12422))+((r20*x12407))+(((-1.0)*cj8*x12410))+x12409);
evalcond[8]=((((-1.0)*x12423))+((x12411*x12421))+((r20*x12408))+(((-1.0)*x12407*x12417))+((cj9*x12414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12424=(gconst29*r10);
IkReal x12425=(gconst28*r11);
IkReal x12426=((1.0)*cj9);
CheckValue<IkReal> x12427=IKPowWithIntegerCheck(((((-1.0)*x12424))+x12425),-1);
if(!x12427.valid){
continue;
}
CheckValue<IkReal> x12428=IKPowWithIntegerCheck((((sj9*x12424))+(((-1.0)*sj9*x12425))),-1);
if(!x12428.valid){
continue;
}
if( IKabs(((-1.0)*(x12427.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12428.value)*(((((-1.0)*gconst28*r10*x12426))+(((-1.0)*gconst29*r11*x12426)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12427.value)))+IKsqr(((x12428.value)*(((((-1.0)*gconst28*r10*x12426))+(((-1.0)*gconst29*r11*x12426))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12427.value)), ((x12428.value)*(((((-1.0)*gconst28*r10*x12426))+(((-1.0)*gconst29*r11*x12426))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12429=IKsin(j10);
IkReal x12430=IKcos(j10);
IkReal x12431=(gconst28*sj9);
IkReal x12432=(cj9*gconst28);
IkReal x12433=(sj7*sj8);
IkReal x12434=((1.0)*cj7);
IkReal x12435=(gconst29*r20);
IkReal x12436=(gconst29*r10);
IkReal x12437=(gconst29*r11);
IkReal x12438=(gconst29*r21);
IkReal x12439=((1.0)*cj8*sj7);
IkReal x12440=(sj8*x12434);
IkReal x12441=(r21*x12430);
IkReal x12442=(r11*x12430);
IkReal x12443=((1.0)*x12429);
IkReal x12444=(gconst28*x12429);
IkReal x12445=(sj9*x12430);
IkReal x12446=((1.0)*cj9*x12430);
IkReal x12447=(x12439+x12440);
evalcond[0]=((-1.0)*r02*x12430);
evalcond[1]=((((-1.0)*x12435*x12443))+((r21*x12444)));
evalcond[2]=((1.0)+(((-1.0)*x12436*x12443))+((r11*x12444)));
evalcond[3]=(((cj7*cj8))+(((-1.0)*r02*sj9*x12443))+(((-1.0)*x12433)));
evalcond[4]=((((-1.0)*x12447))+((cj9*r02*x12429)));
evalcond[5]=((((-1.0)*x12431*x12442))+((cj9*x12437))+((r10*x12432))+((x12436*x12445)));
evalcond[6]=((((-1.0)*x12436*x12446))+((sj9*x12437))+((r10*x12431))+((x12432*x12442)));
evalcond[7]=((((-1.0)*x12435*x12446))+((r20*x12431))+((sj9*x12438))+(((-1.0)*cj8*x12434))+x12433+((x12432*x12441)));
evalcond[8]=(((r20*x12432))+(((-1.0)*x12447))+(((-1.0)*x12431*x12441))+((cj9*x12438))+((x12435*x12445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12448=gconst28*gconst28;
IkReal x12449=gconst29*gconst29;
IkReal x12450=(gconst28*sj9);
IkReal x12451=(gconst29*r21);
IkReal x12452=((1.0)*cj9);
IkReal x12453=(cj9*gconst28);
IkReal x12454=(gconst29*r11);
IkReal x12455=(r10*r20);
IkReal x12456=(r21*x12448);
CheckValue<IkReal> x12457 = IKatan2WithCheck(IkReal((((r10*r22*x12450))+((r22*sj9*x12454)))),IkReal(((((-1.0)*gconst29*x12450*x12455))+((r11*x12450*x12451))+((r10*sj9*x12456))+(((-1.0)*r11*r20*sj9*x12449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12457.valid){
continue;
}
CheckValue<IkReal> x12458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12452*x12456))+((r10*x12451*x12453))+(((-1.0)*r12*r22*x12452))+((r20*x12453*x12454))+(((-1.0)*x12449*x12452*x12455)))),-1);
if(!x12458.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12457.value)+(((1.5707963267949)*(x12458.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12459=IKsin(j10);
IkReal x12460=IKcos(j10);
IkReal x12461=(gconst28*sj9);
IkReal x12462=(cj9*gconst28);
IkReal x12463=(sj7*sj8);
IkReal x12464=(gconst29*r01);
IkReal x12465=(gconst29*r10);
IkReal x12466=(gconst29*sj9);
IkReal x12467=((1.0)*cj7);
IkReal x12468=(gconst29*r20);
IkReal x12469=(cj9*gconst29);
IkReal x12470=((1.0)*cj8*sj7);
IkReal x12471=(sj8*x12467);
IkReal x12472=(r21*x12460);
IkReal x12473=(r11*x12460);
IkReal x12474=((1.0)*x12459);
IkReal x12475=(gconst28*x12459);
IkReal x12476=(r01*x12460);
IkReal x12477=((1.0)*x12460);
IkReal x12478=(cj9*x12459);
IkReal x12479=(x12471+x12470);
evalcond[0]=((((-1.0)*r22*x12477))+(((-1.0)*x12468*x12474))+((r21*x12475)));
evalcond[1]=(((r01*x12475))+(((-1.0)*r02*x12477))+(((-1.0)*gconst29*r00*x12474)));
evalcond[2]=((1.0)+(((-1.0)*x12465*x12474))+((r11*x12475))+(((-1.0)*r12*x12477)));
evalcond[3]=(((x12462*x12473))+((r12*x12478))+((r11*x12466))+(((-1.0)*cj9*x12465*x12477))+((r10*x12461)));
evalcond[4]=((((-1.0)*x12461*x12473))+((sj9*x12460*x12465))+(((-1.0)*r12*sj9*x12474))+((r11*x12469))+((r10*x12462)));
evalcond[5]=((((-1.0)*cj8*x12467))+((x12462*x12472))+((r20*x12461))+(((-1.0)*cj9*x12468*x12477))+((r22*x12478))+x12463+((r21*x12466)));
evalcond[6]=((((-1.0)*x12461*x12476))+((r00*x12462))+(((-1.0)*x12463))+((cj7*cj8))+((r00*x12460*x12466))+((cj9*x12464))+(((-1.0)*r02*sj9*x12474)));
evalcond[7]=(((x12462*x12476))+((sj9*x12464))+((r00*x12461))+(((-1.0)*r00*x12469*x12477))+(((-1.0)*x12479))+((r02*x12478)));
evalcond[8]=((((-1.0)*x12461*x12472))+((r20*x12462))+(((-1.0)*r22*sj9*x12474))+(((-1.0)*x12479))+((r20*x12460*x12466))+((r21*x12469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12480=gconst29*gconst29;
IkReal x12481=gconst28*gconst28;
IkReal x12482=(cj9*r11);
IkReal x12483=(r10*sj9);
IkReal x12484=(cj9*r10);
IkReal x12485=(gconst28*gconst29);
IkReal x12486=((1.0)*r20);
IkReal x12487=(r11*sj9);
IkReal x12488=(r20*x12480);
IkReal x12489=(r21*x12481);
CheckValue<IkReal> x12490 = IKatan2WithCheck(IkReal((((gconst28*r22*x12484))+((gconst29*r22*x12482)))),IkReal((((x12484*x12489))+(((-1.0)*x12484*x12485*x12486))+((r21*x12482*x12485))+(((-1.0)*x12480*x12482*x12486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12490.valid){
continue;
}
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(IKsign((((x12483*x12488))+(((-1.0)*x12485*x12486*x12487))+((r12*r22*sj9))+((x12487*x12489))+(((-1.0)*r21*x12483*x12485)))),-1);
if(!x12491.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12490.value)+(((1.5707963267949)*(x12491.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12492=IKsin(j10);
IkReal x12493=IKcos(j10);
IkReal x12494=(gconst28*sj9);
IkReal x12495=(cj9*gconst28);
IkReal x12496=(sj7*sj8);
IkReal x12497=(gconst29*r01);
IkReal x12498=(gconst29*r10);
IkReal x12499=(gconst29*sj9);
IkReal x12500=((1.0)*cj7);
IkReal x12501=(gconst29*r20);
IkReal x12502=(cj9*gconst29);
IkReal x12503=((1.0)*cj8*sj7);
IkReal x12504=(sj8*x12500);
IkReal x12505=(r21*x12493);
IkReal x12506=(r11*x12493);
IkReal x12507=((1.0)*x12492);
IkReal x12508=(gconst28*x12492);
IkReal x12509=(r01*x12493);
IkReal x12510=((1.0)*x12493);
IkReal x12511=(cj9*x12492);
IkReal x12512=(x12503+x12504);
evalcond[0]=((((-1.0)*r22*x12510))+((r21*x12508))+(((-1.0)*x12501*x12507)));
evalcond[1]=(((r01*x12508))+(((-1.0)*r02*x12510))+(((-1.0)*gconst29*r00*x12507)));
evalcond[2]=((1.0)+(((-1.0)*x12498*x12507))+(((-1.0)*r12*x12510))+((r11*x12508)));
evalcond[3]=(((r12*x12511))+(((-1.0)*cj9*x12498*x12510))+((r10*x12494))+((x12495*x12506))+((r11*x12499)));
evalcond[4]=(((r11*x12502))+((r10*x12495))+(((-1.0)*x12494*x12506))+((sj9*x12493*x12498))+(((-1.0)*r12*sj9*x12507)));
evalcond[5]=(((r20*x12494))+((r21*x12499))+(((-1.0)*cj9*x12501*x12510))+((x12495*x12505))+((r22*x12511))+x12496+(((-1.0)*cj8*x12500)));
evalcond[6]=(((r00*x12495))+((r00*x12493*x12499))+(((-1.0)*x12494*x12509))+((cj9*x12497))+((cj7*cj8))+(((-1.0)*r02*sj9*x12507))+(((-1.0)*x12496)));
evalcond[7]=((((-1.0)*x12512))+((r00*x12494))+((x12495*x12509))+((sj9*x12497))+(((-1.0)*r00*x12502*x12510))+((r02*x12511)));
evalcond[8]=((((-1.0)*x12512))+((r20*x12495))+(((-1.0)*x12494*x12505))+((r21*x12502))+((r20*x12493*x12499))+(((-1.0)*r22*sj9*x12507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12513=((1.0)*gconst29);
CheckValue<IkReal> x12514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12513))+(((-1.0)*gconst28*r00)))),-1);
if(!x12514.valid){
continue;
}
CheckValue<IkReal> x12515 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x12513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12515.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12514.value)))+(x12515.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12516=IKsin(j10);
IkReal x12517=IKcos(j10);
IkReal x12518=(gconst28*sj9);
IkReal x12519=(cj9*gconst28);
IkReal x12520=(sj7*sj8);
IkReal x12521=(gconst29*r01);
IkReal x12522=(gconst29*r10);
IkReal x12523=(gconst29*sj9);
IkReal x12524=((1.0)*cj7);
IkReal x12525=(gconst29*r20);
IkReal x12526=(cj9*gconst29);
IkReal x12527=((1.0)*cj8*sj7);
IkReal x12528=(sj8*x12524);
IkReal x12529=(r21*x12517);
IkReal x12530=(r11*x12517);
IkReal x12531=((1.0)*x12516);
IkReal x12532=(gconst28*x12516);
IkReal x12533=(r01*x12517);
IkReal x12534=((1.0)*x12517);
IkReal x12535=(cj9*x12516);
IkReal x12536=(x12527+x12528);
evalcond[0]=(((r21*x12532))+(((-1.0)*x12525*x12531))+(((-1.0)*r22*x12534)));
evalcond[1]=((((-1.0)*gconst29*r00*x12531))+(((-1.0)*r02*x12534))+((r01*x12532)));
evalcond[2]=((1.0)+((r11*x12532))+(((-1.0)*r12*x12534))+(((-1.0)*x12522*x12531)));
evalcond[3]=(((x12519*x12530))+(((-1.0)*cj9*x12522*x12534))+((r10*x12518))+((r11*x12523))+((r12*x12535)));
evalcond[4]=((((-1.0)*x12518*x12530))+((r10*x12519))+((r11*x12526))+((sj9*x12517*x12522))+(((-1.0)*r12*sj9*x12531)));
evalcond[5]=(((r20*x12518))+(((-1.0)*cj9*x12525*x12534))+((r21*x12523))+((r22*x12535))+x12520+(((-1.0)*cj8*x12524))+((x12519*x12529)));
evalcond[6]=((((-1.0)*x12518*x12533))+((r00*x12519))+((cj7*cj8))+((cj9*x12521))+(((-1.0)*x12520))+((r00*x12517*x12523))+(((-1.0)*r02*sj9*x12531)));
evalcond[7]=(((x12519*x12533))+((r00*x12518))+((sj9*x12521))+((r02*x12535))+(((-1.0)*r00*x12526*x12534))+(((-1.0)*x12536)));
evalcond[8]=(((r20*x12519))+((r21*x12526))+(((-1.0)*r22*sj9*x12531))+(((-1.0)*x12518*x12529))+((r20*x12517*x12523))+(((-1.0)*x12536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x12537=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12537);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12537);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12538=(cj11*r10);
IkReal x12539=(r11*sj11);
j10eval[0]=((((-1.0)*x12538))+x12539);
j10eval[1]=(((sj9*x12538))+(((-1.0)*sj9*x12539)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x12540=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12540);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12540);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12541=(r11*sj11);
IkReal x12542=((1.0)*cj11*r10);
j10eval[0]=(x12541+(((-1.0)*x12542)));
j10eval[1]=((((-1.0)*cj9*x12542))+((cj9*x12541)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x12543=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12543);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12543);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=cj9;
j10eval[1]=r22;
j10eval[2]=(((cj11*r10*sj9))+(((-1.0)*r11*sj11*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x12544=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12544);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12544);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=1.0;
j9=0;
j10eval[0]=r22;
j10eval[1]=((((-1.0)*cj11*r00))+((r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x12545=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12545);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12545);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x12546=((1.0)*cj11);
j10eval[0]=((((-1.0)*r10*x12546))+((r11*sj11)));
j10eval[1]=((((-1.0)*r00*x12546))+((r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12547=((1.0)*cj11);
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(((((-1.0)*r10*x12547))+((r11*sj11))),-1);
if(!x12548.valid){
continue;
}
CheckValue<IkReal> x12549=IKPowWithIntegerCheck(((((-1.0)*r00*x12547))+((r01*sj11))),-1);
if(!x12549.valid){
continue;
}
if( IKabs(((-1.0)*(x12548.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12549.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12548.value)))+IKsqr(((x12549.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12548.value)), ((x12549.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12550=IKsin(j10);
IkReal x12551=IKcos(j10);
IkReal x12552=((1.0)*cj8);
IkReal x12553=(sj11*x12551);
IkReal x12554=(sj11*x12550);
IkReal x12555=((1.0)*cj11*x12551);
IkReal x12556=((1.0)*cj11*x12550);
evalcond[0]=((-1.0)*r22*x12551);
evalcond[1]=((((-1.0)*cj7*x12552))+((r22*x12550))+((sj7*sj8)));
evalcond[2]=(((r01*x12554))+(((-1.0)*r00*x12556)));
evalcond[3]=((((-1.0)*r10*x12555))+((r11*x12553)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12556))+((r11*x12554)));
evalcond[5]=(((r01*x12553))+(((-1.0)*r00*x12555))+(((-1.0)*sj7*x12552))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12557=IKPowWithIntegerCheck(r22,-1);
if(!x12557.valid){
continue;
}
CheckValue<IkReal> x12558=IKPowWithIntegerCheck(((((-1.0)*cj11*r00))+((r01*sj11))),-1);
if(!x12558.valid){
continue;
}
if( IKabs(((x12557.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12558.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12557.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x12558.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x12557.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x12558.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12559=IKsin(j10);
IkReal x12560=IKcos(j10);
IkReal x12561=((1.0)*cj8);
IkReal x12562=(sj11*x12560);
IkReal x12563=(sj11*x12559);
IkReal x12564=((1.0)*cj11*x12560);
IkReal x12565=((1.0)*cj11*x12559);
evalcond[0]=((-1.0)*r22*x12560);
evalcond[1]=((((-1.0)*cj7*x12561))+((r22*x12559))+((sj7*sj8)));
evalcond[2]=((((-1.0)*r00*x12565))+((r01*x12563)));
evalcond[3]=(((r11*x12562))+(((-1.0)*r10*x12564)));
evalcond[4]=((1.0)+((r11*x12563))+(((-1.0)*r10*x12565)));
evalcond[5]=((((-1.0)*r00*x12564))+((r01*x12562))+(((-1.0)*sj7*x12561))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x12566=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
j10eval[1]=(((cj11*r00))+(((-1.0)*r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x12567=((-1.0)*pz);
sj6=0;
cj6=1.0;
j6=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12567);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12567);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j10eval[0]=r22;
j10eval[1]=(((cj11*r00))+(((-1.0)*r01*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12568=IKPowWithIntegerCheck(r22,-1);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck((((cj11*r00))+(((-1.0)*r01*sj11))),-1);
if(!x12569.valid){
continue;
}
if( IKabs(((x12568.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12569.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12568.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))))+IKsqr(((x12569.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x12568.value)*(((((-1.0)*cj7*cj8))+((sj7*sj8))))), ((x12569.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12570=IKsin(j10);
IkReal x12571=IKcos(j10);
IkReal x12572=(r11*sj11);
IkReal x12573=(r01*sj11);
IkReal x12574=((1.0)*cj8);
IkReal x12575=((1.0)*x12571);
IkReal x12576=(cj11*x12571);
IkReal x12577=((1.0)*x12570);
evalcond[0]=((-1.0)*r22*x12571);
evalcond[1]=(((x12570*x12573))+(((-1.0)*cj11*r00*x12577)));
evalcond[2]=((((-1.0)*cj7*x12574))+((sj7*sj8))+(((-1.0)*r22*x12577)));
evalcond[3]=((((-1.0)*x12572*x12575))+((r10*x12576)));
evalcond[4]=((1.0)+(((-1.0)*cj11*r10*x12577))+((x12570*x12572)));
evalcond[5]=((((-1.0)*sj7*x12574))+(((-1.0)*x12573*x12575))+((r00*x12576))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12578=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x12578.valid){
continue;
}
CheckValue<IkReal> x12579=IKPowWithIntegerCheck((((cj11*r00))+(((-1.0)*r01*sj11))),-1);
if(!x12579.valid){
continue;
}
if( IKabs(((-1.0)*(x12578.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12579.value)*((((cj8*sj7))+((cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12578.value)))+IKsqr(((x12579.value)*((((cj8*sj7))+((cj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12578.value)), ((x12579.value)*((((cj8*sj7))+((cj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12580=IKsin(j10);
IkReal x12581=IKcos(j10);
IkReal x12582=(r11*sj11);
IkReal x12583=(r01*sj11);
IkReal x12584=((1.0)*cj8);
IkReal x12585=((1.0)*x12581);
IkReal x12586=(cj11*x12581);
IkReal x12587=((1.0)*x12580);
evalcond[0]=((-1.0)*r22*x12581);
evalcond[1]=((((-1.0)*cj11*r00*x12587))+((x12580*x12583)));
evalcond[2]=((((-1.0)*cj7*x12584))+(((-1.0)*r22*x12587))+((sj7*sj8)));
evalcond[3]=((((-1.0)*x12582*x12585))+((r10*x12586)));
evalcond[4]=((1.0)+(((-1.0)*cj11*r10*x12587))+((x12580*x12582)));
evalcond[5]=(((r00*x12586))+(((-1.0)*sj7*x12584))+(((-1.0)*cj7*sj8))+(((-1.0)*x12583*x12585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12588=((1.0)*cj9);
CheckValue<IkReal> x12589=IKPowWithIntegerCheck(cj9,-1);
if(!x12589.valid){
continue;
}
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(r22,-1);
if(!x12590.valid){
continue;
}
CheckValue<IkReal> x12591=IKPowWithIntegerCheck((((cj11*r10*sj9))+(((-1.0)*r11*sj11*sj9))),-1);
if(!x12591.valid){
continue;
}
if( IKabs(((x12589.value)*(x12590.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12591.value)*(((((-1.0)*r10*sj11*x12588))+(((-1.0)*cj11*r11*x12588)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12589.value)*(x12590.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x12591.value)*(((((-1.0)*r10*sj11*x12588))+(((-1.0)*cj11*r11*x12588))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x12589.value)*(x12590.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x12591.value)*(((((-1.0)*r10*sj11*x12588))+(((-1.0)*cj11*r11*x12588))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12592=IKsin(j10);
IkReal x12593=IKcos(j10);
IkReal x12594=(r11*sj11);
IkReal x12595=(sj7*sj8);
IkReal x12596=((1.0)*cj7);
IkReal x12597=(r01*sj11);
IkReal x12598=(cj11*r00);
IkReal x12599=(r10*sj11);
IkReal x12600=(cj11*r10);
IkReal x12601=(r00*sj11);
IkReal x12602=(cj11*r11);
IkReal x12603=(cj11*r01);
IkReal x12604=((1.0)*cj8*sj7);
IkReal x12605=(sj8*x12596);
IkReal x12606=(sj9*x12593);
IkReal x12607=(cj9*x12593);
IkReal x12608=((1.0)*x12592);
IkReal x12609=(x12604+x12605);
evalcond[0]=((-1.0)*r22*x12593);
evalcond[1]=((((-1.0)*x12598*x12608))+((x12592*x12597)));
evalcond[2]=((((-1.0)*cj8*x12596))+((cj9*r22*x12592))+x12595);
evalcond[3]=((1.0)+(((-1.0)*x12600*x12608))+((x12592*x12594)));
evalcond[4]=((((-1.0)*r22*sj9*x12608))+(((-1.0)*x12609)));
evalcond[5]=(((x12600*x12606))+((cj9*x12599))+(((-1.0)*x12594*x12606))+((cj9*x12602)));
evalcond[6]=(((sj9*x12602))+((sj9*x12599))+(((-1.0)*x12600*x12607))+((x12594*x12607)));
evalcond[7]=(((x12598*x12606))+((cj7*cj8))+((cj9*x12603))+((cj9*x12601))+(((-1.0)*x12597*x12606))+(((-1.0)*x12595)));
evalcond[8]=(((sj9*x12603))+((sj9*x12601))+(((-1.0)*x12609))+(((-1.0)*x12598*x12607))+((x12597*x12607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12610=((1.0)*cj11);
IkReal x12611=(r11*sj11);
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(((((-1.0)*r10*x12610))+x12611),-1);
if(!x12612.valid){
continue;
}
CheckValue<IkReal> x12613=IKPowWithIntegerCheck((((cj9*x12611))+(((-1.0)*cj9*r10*x12610))),-1);
if(!x12613.valid){
continue;
}
if( IKabs(((-1.0)*(x12612.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12613.value)*(((((-1.0)*r11*sj9*x12610))+(((-1.0)*r10*sj11*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12612.value)))+IKsqr(((x12613.value)*(((((-1.0)*r11*sj9*x12610))+(((-1.0)*r10*sj11*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12612.value)), ((x12613.value)*(((((-1.0)*r11*sj9*x12610))+(((-1.0)*r10*sj11*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12614=IKsin(j10);
IkReal x12615=IKcos(j10);
IkReal x12616=(r11*sj11);
IkReal x12617=(sj7*sj8);
IkReal x12618=((1.0)*cj7);
IkReal x12619=(r01*sj11);
IkReal x12620=(cj11*r00);
IkReal x12621=(r10*sj11);
IkReal x12622=(cj11*r10);
IkReal x12623=(r00*sj11);
IkReal x12624=(cj11*r11);
IkReal x12625=(cj11*r01);
IkReal x12626=((1.0)*cj8*sj7);
IkReal x12627=(sj8*x12618);
IkReal x12628=(sj9*x12615);
IkReal x12629=(cj9*x12615);
IkReal x12630=((1.0)*x12614);
IkReal x12631=(x12626+x12627);
evalcond[0]=((-1.0)*r22*x12615);
evalcond[1]=((((-1.0)*x12620*x12630))+((x12614*x12619)));
evalcond[2]=(((cj9*r22*x12614))+x12617+(((-1.0)*cj8*x12618)));
evalcond[3]=((1.0)+((x12614*x12616))+(((-1.0)*x12622*x12630)));
evalcond[4]=((((-1.0)*r22*sj9*x12630))+(((-1.0)*x12631)));
evalcond[5]=((((-1.0)*x12616*x12628))+((x12622*x12628))+((cj9*x12621))+((cj9*x12624)));
evalcond[6]=((((-1.0)*x12622*x12629))+((x12616*x12629))+((sj9*x12624))+((sj9*x12621)));
evalcond[7]=((((-1.0)*x12619*x12628))+(((-1.0)*x12617))+((x12620*x12628))+((cj7*cj8))+((cj9*x12623))+((cj9*x12625)));
evalcond[8]=(((x12619*x12629))+(((-1.0)*x12620*x12629))+(((-1.0)*x12631))+((sj9*x12625))+((sj9*x12623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12632=((1.0)*cj9);
IkReal x12633=(r11*sj11);
IkReal x12634=(cj11*r10);
CheckValue<IkReal> x12635=IKPowWithIntegerCheck(((((-1.0)*x12634))+x12633),-1);
if(!x12635.valid){
continue;
}
CheckValue<IkReal> x12636=IKPowWithIntegerCheck((((sj9*x12634))+(((-1.0)*sj9*x12633))),-1);
if(!x12636.valid){
continue;
}
if( IKabs(((-1.0)*(x12635.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12636.value)*(((((-1.0)*cj11*r11*x12632))+(((-1.0)*r10*sj11*x12632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12635.value)))+IKsqr(((x12636.value)*(((((-1.0)*cj11*r11*x12632))+(((-1.0)*r10*sj11*x12632))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x12635.value)), ((x12636.value)*(((((-1.0)*cj11*r11*x12632))+(((-1.0)*r10*sj11*x12632))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12637=IKsin(j10);
IkReal x12638=IKcos(j10);
IkReal x12639=(r11*sj11);
IkReal x12640=(sj7*sj8);
IkReal x12641=((1.0)*cj7);
IkReal x12642=(r01*sj11);
IkReal x12643=(cj11*r00);
IkReal x12644=(r10*sj11);
IkReal x12645=(cj11*r10);
IkReal x12646=(r00*sj11);
IkReal x12647=(cj11*r11);
IkReal x12648=(cj11*r01);
IkReal x12649=((1.0)*cj8*sj7);
IkReal x12650=(sj8*x12641);
IkReal x12651=(sj9*x12638);
IkReal x12652=(cj9*x12638);
IkReal x12653=((1.0)*x12637);
IkReal x12654=(x12649+x12650);
evalcond[0]=((-1.0)*r22*x12638);
evalcond[1]=((((-1.0)*x12643*x12653))+((x12637*x12642)));
evalcond[2]=(((cj9*r22*x12637))+(((-1.0)*cj8*x12641))+x12640);
evalcond[3]=((1.0)+(((-1.0)*x12645*x12653))+((x12637*x12639)));
evalcond[4]=((((-1.0)*x12654))+(((-1.0)*r22*sj9*x12653)));
evalcond[5]=(((x12645*x12651))+((cj9*x12647))+((cj9*x12644))+(((-1.0)*x12639*x12651)));
evalcond[6]=(((sj9*x12647))+((sj9*x12644))+(((-1.0)*x12645*x12652))+((x12639*x12652)));
evalcond[7]=((((-1.0)*x12640))+(((-1.0)*x12642*x12651))+((cj7*cj8))+((x12643*x12651))+((cj9*x12646))+((cj9*x12648)));
evalcond[8]=((((-1.0)*x12654))+((sj9*x12646))+((sj9*x12648))+(((-1.0)*x12643*x12652))+((x12642*x12652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12655=cj11*cj11;
IkReal x12656=(cj9*r21);
IkReal x12657=(cj11*sj11);
IkReal x12658=((1.0)*r11);
IkReal x12659=(cj9*r20);
IkReal x12660=(r22*sj9);
IkReal x12661=(r21*sj9);
IkReal x12662=(r20*sj9);
IkReal x12663=((1.0)*r10*x12655);
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r12*r22))+(((-1.0)*x12656*x12658))+((r11*x12655*x12656))+(((-1.0)*x12659*x12663))+((r10*x12656*x12657))+((r11*x12657*x12659)))),-1);
if(!x12664.valid){
continue;
}
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal((((r10*sj11*x12660))+((cj11*r11*x12660)))),IkReal((((r11*x12657*x12661))+(((-1.0)*x12661*x12663))+((r10*x12661))+(((-1.0)*x12655*x12658*x12662))+(((-1.0)*r10*x12657*x12662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12664.value)))+(x12665.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12666=IKsin(j10);
IkReal x12667=IKcos(j10);
IkReal x12668=((1.0)*cj8);
IkReal x12669=(cj9*sj11);
IkReal x12670=(sj7*sj8);
IkReal x12671=(cj11*sj9);
IkReal x12672=(cj11*r00);
IkReal x12673=(sj11*sj9);
IkReal x12674=(cj11*cj9);
IkReal x12675=(sj7*x12668);
IkReal x12676=((1.0)*cj7*sj8);
IkReal x12677=(sj11*x12666);
IkReal x12678=((1.0)*x12667);
IkReal x12679=(cj9*x12666);
IkReal x12680=((1.0)*x12666);
IkReal x12681=(sj9*x12680);
IkReal x12682=(x12673*x12678);
IkReal x12683=(x12676+x12675);
evalcond[0]=(((r21*x12677))+(((-1.0)*r22*x12678))+(((-1.0)*cj11*r20*x12680)));
evalcond[1]=((((-1.0)*x12672*x12680))+(((-1.0)*r02*x12678))+((r01*x12677)));
evalcond[2]=((1.0)+(((-1.0)*cj11*r10*x12680))+(((-1.0)*r12*x12678))+((r11*x12677)));
evalcond[3]=(((r10*x12673))+(((-1.0)*r10*x12674*x12678))+((r12*x12679))+((r11*x12671))+((r11*x12667*x12669)));
evalcond[4]=(((r10*x12669))+((r10*x12667*x12671))+(((-1.0)*r12*x12681))+((r11*x12674))+(((-1.0)*r11*x12682)));
evalcond[5]=(((r20*x12673))+((r21*x12671))+((r21*x12667*x12669))+((r22*x12679))+x12670+(((-1.0)*cj7*x12668))+(((-1.0)*r20*x12674*x12678)));
evalcond[6]=(((r00*x12667*x12671))+(((-1.0)*r01*x12682))+(((-1.0)*r02*x12681))+((cj7*cj8))+(((-1.0)*x12670))+((r00*x12669))+((r01*x12674)));
evalcond[7]=(((r01*x12667*x12669))+((r02*x12679))+(((-1.0)*x12683))+((r00*x12673))+(((-1.0)*cj9*x12672*x12678))+((r01*x12671)));
evalcond[8]=(((r21*x12674))+(((-1.0)*r21*x12682))+((r20*x12667*x12671))+(((-1.0)*x12683))+((r20*x12669))+(((-1.0)*r22*x12681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12684=((1.0)*cj11);
CheckValue<IkReal> x12685 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12684))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12685.valid){
continue;
}
CheckValue<IkReal> x12686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12684))+(((-1.0)*r00*sj11)))),-1);
if(!x12686.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12685.value)+(((1.5707963267949)*(x12686.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12687=IKsin(j10);
IkReal x12688=IKcos(j10);
IkReal x12689=((1.0)*cj8);
IkReal x12690=(cj9*sj11);
IkReal x12691=(sj7*sj8);
IkReal x12692=(cj11*sj9);
IkReal x12693=(cj11*r00);
IkReal x12694=(sj11*sj9);
IkReal x12695=(cj11*cj9);
IkReal x12696=(sj7*x12689);
IkReal x12697=((1.0)*cj7*sj8);
IkReal x12698=(sj11*x12687);
IkReal x12699=((1.0)*x12688);
IkReal x12700=(cj9*x12687);
IkReal x12701=((1.0)*x12687);
IkReal x12702=(sj9*x12701);
IkReal x12703=(x12694*x12699);
IkReal x12704=(x12697+x12696);
evalcond[0]=((((-1.0)*r22*x12699))+((r21*x12698))+(((-1.0)*cj11*r20*x12701)));
evalcond[1]=((((-1.0)*r02*x12699))+(((-1.0)*x12693*x12701))+((r01*x12698)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12699))+(((-1.0)*cj11*r10*x12701))+((r11*x12698)));
evalcond[3]=((((-1.0)*r10*x12695*x12699))+((r12*x12700))+((r10*x12694))+((r11*x12692))+((r11*x12688*x12690)));
evalcond[4]=((((-1.0)*r11*x12703))+((r10*x12688*x12692))+((r10*x12690))+((r11*x12695))+(((-1.0)*r12*x12702)));
evalcond[5]=((((-1.0)*r20*x12695*x12699))+((r22*x12700))+((r21*x12692))+x12691+(((-1.0)*cj7*x12689))+((r20*x12694))+((r21*x12688*x12690)));
evalcond[6]=(((r00*x12690))+(((-1.0)*r01*x12703))+((cj7*cj8))+((r00*x12688*x12692))+(((-1.0)*x12691))+((r01*x12695))+(((-1.0)*r02*x12702)));
evalcond[7]=(((r00*x12694))+((r02*x12700))+(((-1.0)*x12704))+(((-1.0)*cj9*x12693*x12699))+((r01*x12688*x12690))+((r01*x12692)));
evalcond[8]=(((r21*x12695))+(((-1.0)*x12704))+(((-1.0)*r22*x12702))+(((-1.0)*r21*x12703))+((r20*x12688*x12692))+((r20*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj11*r00))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12706.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12705.value)))+(x12706.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12707=IKsin(j10);
IkReal x12708=IKcos(j10);
IkReal x12709=((1.0)*cj8);
IkReal x12710=(cj9*sj11);
IkReal x12711=(sj7*sj8);
IkReal x12712=(cj11*sj9);
IkReal x12713=(cj11*r00);
IkReal x12714=(sj11*sj9);
IkReal x12715=(cj11*cj9);
IkReal x12716=(sj7*x12709);
IkReal x12717=((1.0)*cj7*sj8);
IkReal x12718=(sj11*x12707);
IkReal x12719=((1.0)*x12708);
IkReal x12720=(cj9*x12707);
IkReal x12721=((1.0)*x12707);
IkReal x12722=(sj9*x12721);
IkReal x12723=(x12714*x12719);
IkReal x12724=(x12716+x12717);
evalcond[0]=(((r21*x12718))+(((-1.0)*cj11*r20*x12721))+(((-1.0)*r22*x12719)));
evalcond[1]=((((-1.0)*x12713*x12721))+((r01*x12718))+(((-1.0)*r02*x12719)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12719))+((r11*x12718))+(((-1.0)*cj11*r10*x12721)));
evalcond[3]=(((r11*x12708*x12710))+((r11*x12712))+((r12*x12720))+((r10*x12714))+(((-1.0)*r10*x12715*x12719)));
evalcond[4]=(((r11*x12715))+((r10*x12710))+(((-1.0)*r12*x12722))+((r10*x12708*x12712))+(((-1.0)*r11*x12723)));
evalcond[5]=(((r21*x12712))+((r21*x12708*x12710))+(((-1.0)*r20*x12715*x12719))+(((-1.0)*cj7*x12709))+((r20*x12714))+x12711+((r22*x12720)));
evalcond[6]=((((-1.0)*x12711))+(((-1.0)*r02*x12722))+(((-1.0)*r01*x12723))+((cj7*cj8))+((r01*x12715))+((r00*x12710))+((r00*x12708*x12712)));
evalcond[7]=(((r02*x12720))+((r01*x12708*x12710))+(((-1.0)*x12724))+((r01*x12712))+((r00*x12714))+(((-1.0)*cj9*x12713*x12719)));
evalcond[8]=(((r21*x12715))+(((-1.0)*x12724))+(((-1.0)*r22*x12722))+((r20*x12710))+(((-1.0)*r21*x12723))+((r20*x12708*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12725=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x12725;
j10eval[1]=IKsign(x12725);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12726=((1.0)*cj11);
IkReal x12727=((((-1.0)*r20*sj11))+(((-1.0)*r21*x12726)));
j10eval[0]=x12727;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12726))+((r01*sj11))))));
j10eval[2]=IKsign(x12727);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12728=cj11*cj11;
IkReal x12729=(cj9*r21);
IkReal x12730=(cj11*sj11);
IkReal x12731=(cj9*r20);
IkReal x12732=((((-1.0)*cj9*r12*r22))+((r11*x12728*x12729))+(((-1.0)*r11*x12729))+((r10*x12729*x12730))+(((-1.0)*r10*x12728*x12731))+((r11*x12730*x12731)));
j10eval[0]=x12732;
j10eval[1]=IKsign(x12732);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x12733=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x12733;
j10eval[1]=IKsign(x12733);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x12734=((1.0)*cj11);
IkReal x12735=((((-1.0)*r20*sj11))+(((-1.0)*r21*x12734)));
j10eval[0]=x12735;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x12734))+((r01*sj11))))));
j10eval[2]=IKsign(x12735);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x12736=r11*r11;
IkReal x12737=cj11*cj11;
IkReal x12738=(cj11*r10);
IkReal x12739=(r11*sj11);
IkReal x12740=((((-1.0)*x12736))+(((2.0)*x12738*x12739))+(((-1.0)*x12737*(r10*r10)))+((x12736*x12737))+(((-1.0)*(r12*r12))));
j10eval[0]=x12740;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x12739))+x12738))));
j10eval[2]=IKsign(x12740);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12741=r11*r11;
IkReal x12742=cj11*cj11;
IkReal x12743=(cj11*r10);
IkReal x12744=(r11*sj11);
CheckValue<IkReal> x12745 = IKatan2WithCheck(IkReal(((((-1.0)*x12744))+x12743)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12745.valid){
continue;
}
CheckValue<IkReal> x12746=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12741))+(((2.0)*x12743*x12744))+(((-1.0)*(r12*r12)))+(((-1.0)*x12742*(r10*r10)))+((x12741*x12742)))),-1);
if(!x12746.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12745.value)+(((1.5707963267949)*(x12746.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12747=IKsin(j10);
IkReal x12748=IKcos(j10);
IkReal x12749=((1.0)*cj7);
IkReal x12750=(sj11*x12747);
IkReal x12751=((1.0)*x12748);
IkReal x12752=((1.0)*x12747);
IkReal x12753=(cj11*x12748);
evalcond[0]=((((-1.0)*r22*x12751))+(((-1.0)*cj11*r20*x12752))+((r21*x12750)));
evalcond[1]=((((-1.0)*cj11*r00*x12752))+(((-1.0)*r02*x12751))+((r01*x12750)));
evalcond[2]=((((-1.0)*r11*sj11*x12751))+(((-1.0)*r12*x12752))+((r10*x12753)));
evalcond[3]=((-1.0)+((r11*x12750))+(((-1.0)*r12*x12751))+(((-1.0)*cj11*r10*x12752)));
evalcond[4]=((((-1.0)*cj8*x12749))+(((-1.0)*r01*sj11*x12751))+(((-1.0)*r02*x12752))+((r00*x12753))+((sj7*sj8)));
evalcond[5]=((((-1.0)*r21*sj11*x12751))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x12752))+(((-1.0)*sj8*x12749))+((r20*x12753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12754=((1.0)*cj11);
CheckValue<IkReal> x12755 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x12754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12755.valid){
continue;
}
CheckValue<IkReal> x12756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x12754)))),-1);
if(!x12756.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12755.value)+(((1.5707963267949)*(x12756.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12757=IKsin(j10);
IkReal x12758=IKcos(j10);
IkReal x12759=((1.0)*cj7);
IkReal x12760=(sj11*x12757);
IkReal x12761=((1.0)*x12758);
IkReal x12762=((1.0)*x12757);
IkReal x12763=(cj11*x12758);
evalcond[0]=(((r21*x12760))+(((-1.0)*r22*x12761))+(((-1.0)*cj11*r20*x12762)));
evalcond[1]=((((-1.0)*r02*x12761))+((r01*x12760))+(((-1.0)*cj11*r00*x12762)));
evalcond[2]=((((-1.0)*r11*sj11*x12761))+(((-1.0)*r12*x12762))+((r10*x12763)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x12761))+(((-1.0)*cj11*r10*x12762))+((r11*x12760)));
evalcond[4]=((((-1.0)*r01*sj11*x12761))+(((-1.0)*cj8*x12759))+(((-1.0)*r02*x12762))+((sj7*sj8))+((r00*x12763)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*r22*x12762))+(((-1.0)*r21*sj11*x12761))+((r20*x12763))+(((-1.0)*sj8*x12759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12764 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12764.valid){
continue;
}
CheckValue<IkReal> x12765=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x12765.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12764.value)+(((1.5707963267949)*(x12765.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12766=IKsin(j10);
IkReal x12767=IKcos(j10);
IkReal x12768=((1.0)*cj7);
IkReal x12769=(sj11*x12766);
IkReal x12770=((1.0)*x12767);
IkReal x12771=((1.0)*x12766);
IkReal x12772=(cj11*x12767);
evalcond[0]=(((r21*x12769))+(((-1.0)*r22*x12770))+(((-1.0)*cj11*r20*x12771)));
evalcond[1]=((((-1.0)*cj11*r00*x12771))+(((-1.0)*r02*x12770))+((r01*x12769)));
evalcond[2]=((((-1.0)*r11*sj11*x12770))+(((-1.0)*r12*x12771))+((r10*x12772)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x12770))+((r11*x12769))+(((-1.0)*cj11*r10*x12771)));
evalcond[4]=((((-1.0)*r02*x12771))+((sj7*sj8))+(((-1.0)*cj8*x12768))+(((-1.0)*r01*sj11*x12770))+((r00*x12772)));
evalcond[5]=(((r20*x12772))+(((-1.0)*r22*x12771))+(((-1.0)*cj8*sj7))+(((-1.0)*sj8*x12768))+(((-1.0)*r21*sj11*x12770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x12773=(((r00*sj11))+((cj11*r01)));
j10eval[0]=x12773;
j10eval[1]=IKsign(x12773);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x12774=((1.0)*cj11);
IkReal x12775=((((-1.0)*r21*x12774))+(((-1.0)*r20*sj11)));
j10eval[0]=x12775;
j10eval[1]=((IKabs(((((-1.0)*r00*x12774))+((r01*sj11)))))+(IKabs(r02)));
j10eval[2]=IKsign(x12775);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x12776=cj11*cj11;
IkReal x12777=r11*r11;
IkReal x12778=(cj11*r10);
IkReal x12779=(r11*sj11);
IkReal x12780=((r12*r12)+(((-1.0)*x12776*x12777))+((x12776*(r10*r10)))+(((-2.0)*x12778*x12779))+x12777);
j10eval[0]=x12780;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x12778))+x12779))));
j10eval[2]=IKsign(x12780);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12781=cj11*cj11;
IkReal x12782=r11*r11;
IkReal x12783=(r11*sj11);
IkReal x12784=(cj11*r10);
CheckValue<IkReal> x12785=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12781*(r10*r10)))+x12782+(((-1.0)*x12781*x12782))+(((-2.0)*x12783*x12784)))),-1);
if(!x12785.valid){
continue;
}
CheckValue<IkReal> x12786 = IKatan2WithCheck(IkReal((x12783+(((-1.0)*x12784)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12786.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12785.value)))+(x12786.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12787=IKcos(j10);
IkReal x12788=IKsin(j10);
IkReal x12789=(r11*sj11);
IkReal x12790=((1.0)*cj7);
IkReal x12791=(cj11*r10);
IkReal x12792=(cj11*r00);
IkReal x12793=(cj11*r20);
IkReal x12794=((1.0)*x12787);
IkReal x12795=(sj11*x12787);
IkReal x12796=((1.0)*x12788);
IkReal x12797=(sj11*x12788);
evalcond[0]=(((x12787*x12789))+(((-1.0)*x12791*x12794))+((r12*x12788)));
evalcond[1]=((((-1.0)*r22*x12794))+(((-1.0)*x12793*x12796))+((r21*x12797)));
evalcond[2]=((((-1.0)*x12792*x12796))+(((-1.0)*r02*x12794))+((r01*x12797)));
evalcond[3]=((-1.0)+((x12788*x12789))+(((-1.0)*x12791*x12796))+(((-1.0)*r12*x12794)));
evalcond[4]=((((-1.0)*x12792*x12794))+(((-1.0)*cj8*x12790))+((r01*x12795))+((r02*x12788))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x12790))+((r22*x12788))+(((-1.0)*x12793*x12794))+((r21*x12795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12798=((1.0)*cj11);
CheckValue<IkReal> x12799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12798))+(((-1.0)*r20*sj11)))),-1);
if(!x12799.valid){
continue;
}
CheckValue<IkReal> x12800 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj11))+(((-1.0)*r00*x12798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12800.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12799.value)))+(x12800.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12801=IKcos(j10);
IkReal x12802=IKsin(j10);
IkReal x12803=(r11*sj11);
IkReal x12804=((1.0)*cj7);
IkReal x12805=(cj11*r10);
IkReal x12806=(cj11*r00);
IkReal x12807=(cj11*r20);
IkReal x12808=((1.0)*x12801);
IkReal x12809=(sj11*x12801);
IkReal x12810=((1.0)*x12802);
IkReal x12811=(sj11*x12802);
evalcond[0]=(((x12801*x12803))+(((-1.0)*x12805*x12808))+((r12*x12802)));
evalcond[1]=(((r21*x12811))+(((-1.0)*r22*x12808))+(((-1.0)*x12807*x12810)));
evalcond[2]=(((r01*x12811))+(((-1.0)*r02*x12808))+(((-1.0)*x12806*x12810)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x12808))+((x12802*x12803))+(((-1.0)*x12805*x12810)));
evalcond[4]=(((r02*x12802))+((r01*x12809))+(((-1.0)*cj8*x12804))+((sj7*sj8))+(((-1.0)*x12806*x12808)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x12804))+((r21*x12809))+(((-1.0)*x12807*x12808))+((r22*x12802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12812 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12812.valid){
continue;
}
CheckValue<IkReal> x12813=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x12813.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12812.value)+(((1.5707963267949)*(x12813.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x12814=IKcos(j10);
IkReal x12815=IKsin(j10);
IkReal x12816=(r11*sj11);
IkReal x12817=((1.0)*cj7);
IkReal x12818=(cj11*r10);
IkReal x12819=(cj11*r00);
IkReal x12820=(cj11*r20);
IkReal x12821=((1.0)*x12814);
IkReal x12822=(sj11*x12814);
IkReal x12823=((1.0)*x12815);
IkReal x12824=(sj11*x12815);
evalcond[0]=(((x12814*x12816))+((r12*x12815))+(((-1.0)*x12818*x12821)));
evalcond[1]=((((-1.0)*r22*x12821))+((r21*x12824))+(((-1.0)*x12820*x12823)));
evalcond[2]=((((-1.0)*r02*x12821))+((r01*x12824))+(((-1.0)*x12819*x12823)));
evalcond[3]=((-1.0)+((x12815*x12816))+(((-1.0)*r12*x12821))+(((-1.0)*x12818*x12823)));
evalcond[4]=(((r01*x12822))+((r02*x12815))+(((-1.0)*cj8*x12817))+((sj7*sj8))+(((-1.0)*x12819*x12821)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x12822))+(((-1.0)*sj8*x12817))+(((-1.0)*x12820*x12821))+((r22*x12815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12826 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12826)==0){
continue;
}
IkReal x12825=pow(x12826,-0.5);
CheckValue<IkReal> x12827 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12827.valid){
continue;
}
IkReal gconst36=((-1.0)*(x12827.value));
IkReal gconst37=((-1.0)*r01*x12825);
IkReal gconst38=(r00*x12825);
CheckValue<IkReal> x12828 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12828.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12828.value)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x12831 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12831.valid){
continue;
}
IkReal x12829=((-1.0)*(x12831.value));
IkReal x12830=x12825;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj11=gconst37;
cj11=gconst38;
j11=x12829;
IkReal gconst36=x12829;
IkReal gconst37=((-1.0)*r01*x12830);
IkReal gconst38=(r00*x12830);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12834 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12834.valid){
continue;
}
IkReal x12832=((-1.0)*(x12834.value));
IkReal x12833=x12825;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj11=gconst37;
cj11=gconst38;
j11=x12832;
IkReal gconst36=x12832;
IkReal gconst37=((-1.0)*r01*x12833);
IkReal gconst38=(r00*x12833);
CheckValue<IkReal> x12842=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12842.valid){
continue;
}
IkReal x12835=x12842.value;
IkReal x12836=(sj9*x12835);
IkReal x12837=(r21*x12836);
IkReal x12838=(r11*x12836);
IkReal x12839=(r10*x12836);
IkReal x12840=(r20*x12836);
IkReal x12841=(r00*r01*x12836);
j10eval[0]=IKsign((((r20*x12839*(r00*r00)))+((r11*x12837*(r01*r01)))+((r00*r01*r20*x12838))+((r12*r22*sj9))+((r00*r01*r10*x12837))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12843=gconst37*gconst37;
IkReal x12844=gconst38*gconst38;
IkReal x12845=(r10*r21);
IkReal x12846=(gconst38*r11);
IkReal x12847=(r22*sj9);
IkReal x12848=((1.0)*cj9);
IkReal x12849=(cj9*gconst37);
IkReal x12850=(gconst37*r10);
IkReal x12851=((1.0)*sj9);
IkReal x12852=(r20*x12844);
CheckValue<IkReal> x12853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12848*x12852))+((gconst38*x12845*x12849))+(((-1.0)*r12*r22*x12848))+((r20*x12846*x12849))+(((-1.0)*r11*r21*x12843*x12848)))),-1);
if(!x12853.valid){
continue;
}
CheckValue<IkReal> x12854 = IKatan2WithCheck(IkReal((((x12847*x12850))+((x12846*x12847)))),IkReal(((((-1.0)*gconst38*r20*x12850*x12851))+((gconst37*r21*sj9*x12846))+(((-1.0)*r11*x12851*x12852))+((sj9*x12843*x12845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12854.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12853.value)))+(x12854.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12855=IKsin(j10);
IkReal x12856=IKcos(j10);
IkReal x12857=(sj7*sj8);
IkReal x12858=((1.0)*gconst37);
IkReal x12859=(cj9*gconst38);
IkReal x12860=(cj9*gconst37);
IkReal x12861=((1.0)*cj8);
IkReal x12862=((1.0)*r20);
IkReal x12863=(gconst37*sj9);
IkReal x12864=(cj7*sj8);
IkReal x12865=((1.0)*r12);
IkReal x12866=(gconst38*sj9);
IkReal x12867=(cj7*x12861);
IkReal x12868=(sj9*x12856);
IkReal x12869=(gconst38*x12855);
IkReal x12870=(gconst37*x12855);
IkReal x12871=(sj9*x12855);
IkReal x12872=((1.0)*x12856);
IkReal x12873=(cj9*x12855);
evalcond[0]=((((-1.0)*r22*x12872))+(((-1.0)*x12862*x12869))+((r21*x12870)));
evalcond[1]=(((r01*x12870))+(((-1.0)*r02*x12872))+(((-1.0)*r00*x12869)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12869))+((r11*x12870))+(((-1.0)*x12856*x12865)));
evalcond[3]=(((r11*x12866))+((r12*x12873))+(((-1.0)*r10*x12859*x12872))+((r11*x12856*x12860))+((r10*x12863)));
evalcond[4]=((((-1.0)*r11*x12858*x12868))+((r11*x12859))+((r10*x12860))+((r10*x12856*x12866))+(((-1.0)*x12865*x12871)));
evalcond[5]=(x12864+((cj8*sj7))+(((-1.0)*r00*x12859*x12872))+((r01*x12856*x12860))+((r02*x12873))+((r01*x12866))+((r00*x12863)));
evalcond[6]=(x12857+((r21*x12866))+((r22*x12873))+((r20*x12863))+((r21*x12856*x12860))+(((-1.0)*x12867))+(((-1.0)*x12856*x12859*x12862)));
evalcond[7]=((((-1.0)*r01*x12858*x12868))+x12857+(((-1.0)*x12867))+((r01*x12859))+(((-1.0)*r02*x12871))+((r00*x12860))+((r00*x12856*x12866)));
evalcond[8]=((((-1.0)*x12864))+((r20*x12860))+(((-1.0)*r21*x12858*x12868))+(((-1.0)*sj7*x12861))+(((-1.0)*r22*x12871))+((r20*x12856*x12866))+((r21*x12859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12874=gconst37*gconst37;
IkReal x12875=gconst38*gconst38;
IkReal x12876=(cj9*r22);
IkReal x12877=(gconst38*r11);
IkReal x12878=(r10*sj9);
IkReal x12879=(gconst37*r10);
IkReal x12880=((1.0)*gconst38);
IkReal x12881=(gconst37*r21);
IkReal x12882=(r20*x12875);
IkReal x12883=(r21*x12874);
CheckValue<IkReal> x12884=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12878*x12880*x12881))+(((-1.0)*gconst37*r20*sj9*x12877))+((r12*r22*sj9))+((x12878*x12882))+((r11*sj9*x12883)))),-1);
if(!x12884.valid){
continue;
}
CheckValue<IkReal> x12885 = IKatan2WithCheck(IkReal((((x12876*x12877))+((x12876*x12879)))),IkReal((((cj9*r10*x12883))+((cj9*x12877*x12881))+(((-1.0)*cj9*r20*x12879*x12880))+(((-1.0)*cj9*r11*x12882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12885.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12884.value)))+(x12885.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12886=IKsin(j10);
IkReal x12887=IKcos(j10);
IkReal x12888=(sj7*sj8);
IkReal x12889=((1.0)*gconst37);
IkReal x12890=(cj9*gconst38);
IkReal x12891=(cj9*gconst37);
IkReal x12892=((1.0)*cj8);
IkReal x12893=((1.0)*r20);
IkReal x12894=(gconst37*sj9);
IkReal x12895=(cj7*sj8);
IkReal x12896=((1.0)*r12);
IkReal x12897=(gconst38*sj9);
IkReal x12898=(cj7*x12892);
IkReal x12899=(sj9*x12887);
IkReal x12900=(gconst38*x12886);
IkReal x12901=(gconst37*x12886);
IkReal x12902=(sj9*x12886);
IkReal x12903=((1.0)*x12887);
IkReal x12904=(cj9*x12886);
evalcond[0]=((((-1.0)*x12893*x12900))+((r21*x12901))+(((-1.0)*r22*x12903)));
evalcond[1]=(((r01*x12901))+(((-1.0)*r02*x12903))+(((-1.0)*r00*x12900)));
evalcond[2]=((-1.0)+(((-1.0)*x12887*x12896))+((r11*x12901))+(((-1.0)*r10*x12900)));
evalcond[3]=(((r11*x12887*x12891))+((r10*x12894))+((r12*x12904))+(((-1.0)*r10*x12890*x12903))+((r11*x12897)));
evalcond[4]=(((r10*x12887*x12897))+(((-1.0)*x12896*x12902))+(((-1.0)*r11*x12889*x12899))+((r10*x12891))+((r11*x12890)));
evalcond[5]=(x12895+((r01*x12887*x12891))+((cj8*sj7))+((r01*x12897))+((r00*x12894))+((r02*x12904))+(((-1.0)*r00*x12890*x12903)));
evalcond[6]=((((-1.0)*x12887*x12890*x12893))+x12888+((r21*x12897))+((r21*x12887*x12891))+(((-1.0)*x12898))+((r20*x12894))+((r22*x12904)));
evalcond[7]=(x12888+((r01*x12890))+((r00*x12891))+((r00*x12887*x12897))+(((-1.0)*r01*x12889*x12899))+(((-1.0)*r02*x12902))+(((-1.0)*x12898)));
evalcond[8]=((((-1.0)*x12895))+((r21*x12890))+((r20*x12887*x12897))+(((-1.0)*sj7*x12892))+(((-1.0)*r22*x12902))+((r20*x12891))+(((-1.0)*r21*x12889*x12899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12905=((1.0)*gconst38);
CheckValue<IkReal> x12906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x12905)))),-1);
if(!x12906.valid){
continue;
}
CheckValue<IkReal> x12907 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12905))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12907.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12906.value)))+(x12907.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12908=IKsin(j10);
IkReal x12909=IKcos(j10);
IkReal x12910=(sj7*sj8);
IkReal x12911=((1.0)*gconst37);
IkReal x12912=(cj9*gconst38);
IkReal x12913=(cj9*gconst37);
IkReal x12914=((1.0)*cj8);
IkReal x12915=((1.0)*r20);
IkReal x12916=(gconst37*sj9);
IkReal x12917=(cj7*sj8);
IkReal x12918=((1.0)*r12);
IkReal x12919=(gconst38*sj9);
IkReal x12920=(cj7*x12914);
IkReal x12921=(sj9*x12909);
IkReal x12922=(gconst38*x12908);
IkReal x12923=(gconst37*x12908);
IkReal x12924=(sj9*x12908);
IkReal x12925=((1.0)*x12909);
IkReal x12926=(cj9*x12908);
evalcond[0]=((((-1.0)*x12915*x12922))+((r21*x12923))+(((-1.0)*r22*x12925)));
evalcond[1]=((((-1.0)*r02*x12925))+((r01*x12923))+(((-1.0)*r00*x12922)));
evalcond[2]=((-1.0)+((r11*x12923))+(((-1.0)*x12909*x12918))+(((-1.0)*r10*x12922)));
evalcond[3]=((((-1.0)*r10*x12912*x12925))+((r11*x12909*x12913))+((r10*x12916))+((r11*x12919))+((r12*x12926)));
evalcond[4]=((((-1.0)*x12918*x12924))+(((-1.0)*r11*x12911*x12921))+((r10*x12909*x12919))+((r10*x12913))+((r11*x12912)));
evalcond[5]=(x12917+((r00*x12916))+((cj8*sj7))+((r02*x12926))+(((-1.0)*r00*x12912*x12925))+((r01*x12909*x12913))+((r01*x12919)));
evalcond[6]=(x12910+((r20*x12916))+((r21*x12919))+((r21*x12909*x12913))+(((-1.0)*x12909*x12912*x12915))+((r22*x12926))+(((-1.0)*x12920)));
evalcond[7]=(x12910+((r00*x12913))+((r00*x12909*x12919))+(((-1.0)*r01*x12911*x12921))+(((-1.0)*r02*x12924))+(((-1.0)*x12920))+((r01*x12912)));
evalcond[8]=((((-1.0)*sj7*x12914))+(((-1.0)*x12917))+(((-1.0)*r22*x12924))+((r20*x12913))+((r21*x12912))+(((-1.0)*r21*x12911*x12921))+((r20*x12909*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12928 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12928)==0){
continue;
}
IkReal x12927=pow(x12928,-0.5);
CheckValue<IkReal> x12929 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12929.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x12929.value))));
IkReal gconst40=((1.0)*r01*x12927);
IkReal gconst41=((-1.0)*r00*x12927);
CheckValue<IkReal> x12930 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12930.value)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
IkReal x12931=((1.0)*(x12933.value));
IkReal x12932=x12927;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj11=gconst40;
cj11=gconst41;
j11=((3.14159265)+(((-1.0)*x12931)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12931)));
IkReal gconst40=((1.0)*r01*x12932);
IkReal gconst41=((-1.0)*r00*x12932);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j10eval[3]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
IkReal x12934=((1.0)*(x12936.value));
IkReal x12935=x12927;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj11=gconst40;
cj11=gconst41;
j11=((3.14159265)+(((-1.0)*x12934)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x12934)));
IkReal gconst40=((1.0)*r01*x12935);
IkReal gconst41=((-1.0)*r00*x12935);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12937=gconst40*gconst40;
IkReal x12938=gconst41*gconst41;
IkReal x12939=(r10*r21);
IkReal x12940=(r11*r20);
IkReal x12941=(gconst40*sj9);
IkReal x12942=((1.0)*cj9);
IkReal x12943=(r10*r20);
IkReal x12944=(gconst41*r11);
IkReal x12945=(cj9*gconst40*gconst41);
CheckValue<IkReal> x12946 = IKatan2WithCheck(IkReal((((r22*sj9*x12944))+((r10*r22*x12941)))),IkReal(((((-1.0)*gconst41*x12941*x12943))+((r21*x12941*x12944))+(((-1.0)*sj9*x12938*x12940))+((sj9*x12937*x12939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12946.valid){
continue;
}
CheckValue<IkReal> x12947=IKPowWithIntegerCheck(IKsign((((x12940*x12945))+((x12939*x12945))+(((-1.0)*r12*r22*x12942))+(((-1.0)*r11*r21*x12937*x12942))+(((-1.0)*x12938*x12942*x12943)))),-1);
if(!x12947.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12946.value)+(((1.5707963267949)*(x12947.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12948=IKsin(j10);
IkReal x12949=IKcos(j10);
IkReal x12950=(sj7*sj8);
IkReal x12951=(cj9*gconst40);
IkReal x12952=((1.0)*cj8);
IkReal x12953=(gconst41*sj9);
IkReal x12954=(gconst41*r10);
IkReal x12955=(cj7*sj8);
IkReal x12956=(cj9*gconst41);
IkReal x12957=(gconst40*sj9);
IkReal x12958=(cj7*x12952);
IkReal x12959=(gconst40*x12948);
IkReal x12960=(r20*x12949);
IkReal x12961=((1.0)*x12948);
IkReal x12962=((1.0)*x12949);
IkReal x12963=(cj9*x12948);
IkReal x12964=(x12957*x12962);
evalcond[0]=(((r21*x12959))+(((-1.0)*gconst41*r20*x12961))+(((-1.0)*r22*x12962)));
evalcond[1]=((((-1.0)*gconst41*r00*x12961))+((r01*x12959))+(((-1.0)*r02*x12962)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x12962))+(((-1.0)*x12954*x12961))+((r11*x12959)));
evalcond[3]=(((r10*x12957))+((r11*x12949*x12951))+(((-1.0)*cj9*x12954*x12962))+((r11*x12953))+((r12*x12963)));
evalcond[4]=(((r10*x12951))+(((-1.0)*r11*x12964))+(((-1.0)*r12*sj9*x12961))+((r11*x12956))+((r10*x12949*x12953)));
evalcond[5]=(x12955+((cj8*sj7))+((r01*x12949*x12951))+((r01*x12953))+((r00*x12957))+((r02*x12963))+(((-1.0)*r00*x12956*x12962)));
evalcond[6]=(x12950+((r21*x12953))+(((-1.0)*x12958))+((r21*x12949*x12951))+(((-1.0)*x12956*x12960))+((r22*x12963))+((r20*x12957)));
evalcond[7]=(x12950+((r01*x12956))+(((-1.0)*r01*x12964))+((r00*x12951))+(((-1.0)*x12958))+((r00*x12949*x12953))+(((-1.0)*r02*sj9*x12961)));
evalcond[8]=((((-1.0)*r22*sj9*x12961))+((r21*x12956))+(((-1.0)*r21*x12964))+((x12953*x12960))+(((-1.0)*x12955))+((r20*x12951))+(((-1.0)*sj7*x12952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12965=((1.0)*gconst41);
CheckValue<IkReal> x12966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12965))+(((-1.0)*gconst40*r20)))),-1);
if(!x12966.valid){
continue;
}
CheckValue<IkReal> x12967 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12965))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12967.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12966.value)))+(x12967.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12968=IKsin(j10);
IkReal x12969=IKcos(j10);
IkReal x12970=(sj7*sj8);
IkReal x12971=(cj9*gconst40);
IkReal x12972=((1.0)*cj8);
IkReal x12973=(gconst41*sj9);
IkReal x12974=(gconst41*r10);
IkReal x12975=(cj7*sj8);
IkReal x12976=(cj9*gconst41);
IkReal x12977=(gconst40*sj9);
IkReal x12978=(cj7*x12972);
IkReal x12979=(gconst40*x12968);
IkReal x12980=(r20*x12969);
IkReal x12981=((1.0)*x12968);
IkReal x12982=((1.0)*x12969);
IkReal x12983=(cj9*x12968);
IkReal x12984=(x12977*x12982);
evalcond[0]=((((-1.0)*r22*x12982))+((r21*x12979))+(((-1.0)*gconst41*r20*x12981)));
evalcond[1]=(((r01*x12979))+(((-1.0)*gconst41*r00*x12981))+(((-1.0)*r02*x12982)));
evalcond[2]=((-1.0)+(((-1.0)*x12974*x12981))+(((-1.0)*r12*x12982))+((r11*x12979)));
evalcond[3]=(((r12*x12983))+((r11*x12973))+((r11*x12969*x12971))+(((-1.0)*cj9*x12974*x12982))+((r10*x12977)));
evalcond[4]=(((r10*x12969*x12973))+(((-1.0)*r11*x12984))+((r11*x12976))+((r10*x12971))+(((-1.0)*r12*sj9*x12981)));
evalcond[5]=(x12975+((r01*x12973))+((cj8*sj7))+((r00*x12977))+((r01*x12969*x12971))+(((-1.0)*r00*x12976*x12982))+((r02*x12983)));
evalcond[6]=(x12970+((r22*x12983))+(((-1.0)*x12978))+(((-1.0)*x12976*x12980))+((r20*x12977))+((r21*x12973))+((r21*x12969*x12971)));
evalcond[7]=(x12970+((r01*x12976))+(((-1.0)*x12978))+(((-1.0)*r01*x12984))+((r00*x12971))+(((-1.0)*r02*sj9*x12981))+((r00*x12969*x12973)));
evalcond[8]=(((x12973*x12980))+(((-1.0)*sj7*x12972))+((r20*x12971))+(((-1.0)*x12975))+(((-1.0)*r21*x12984))+(((-1.0)*r22*sj9*x12981))+((r21*x12976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x12986.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x12985.value)+(((1.5707963267949)*(x12986.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x12987=IKsin(j10);
IkReal x12988=IKcos(j10);
IkReal x12989=(sj7*sj8);
IkReal x12990=(cj9*gconst40);
IkReal x12991=((1.0)*cj8);
IkReal x12992=(gconst41*sj9);
IkReal x12993=(gconst41*r10);
IkReal x12994=(cj7*sj8);
IkReal x12995=(cj9*gconst41);
IkReal x12996=(gconst40*sj9);
IkReal x12997=(cj7*x12991);
IkReal x12998=(gconst40*x12987);
IkReal x12999=(r20*x12988);
IkReal x13000=((1.0)*x12987);
IkReal x13001=((1.0)*x12988);
IkReal x13002=(cj9*x12987);
IkReal x13003=(x12996*x13001);
evalcond[0]=((((-1.0)*gconst41*r20*x13000))+(((-1.0)*r22*x13001))+((r21*x12998)));
evalcond[1]=(((r01*x12998))+(((-1.0)*gconst41*r00*x13000))+(((-1.0)*r02*x13001)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13001))+((r11*x12998))+(((-1.0)*x12993*x13000)));
evalcond[3]=(((r10*x12996))+((r12*x13002))+((r11*x12992))+((r11*x12988*x12990))+(((-1.0)*cj9*x12993*x13001)));
evalcond[4]=((((-1.0)*r11*x13003))+((r10*x12990))+(((-1.0)*r12*sj9*x13000))+((r11*x12995))+((r10*x12988*x12992)));
evalcond[5]=(x12994+((r01*x12988*x12990))+(((-1.0)*r00*x12995*x13001))+((cj8*sj7))+((r01*x12992))+((r00*x12996))+((r02*x13002)));
evalcond[6]=(x12989+((r21*x12988*x12990))+(((-1.0)*x12997))+((r21*x12992))+((r20*x12996))+(((-1.0)*x12995*x12999))+((r22*x13002)));
evalcond[7]=(x12989+(((-1.0)*r02*sj9*x13000))+((r01*x12995))+(((-1.0)*x12997))+((r00*x12990))+(((-1.0)*r01*x13003))+((r00*x12988*x12992)));
evalcond[8]=((((-1.0)*sj7*x12991))+(((-1.0)*r22*sj9*x13000))+(((-1.0)*r21*x13003))+((r21*x12995))+((r20*x12990))+((x12992*x12999))+(((-1.0)*x12994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x13004=((-1.0)*px);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13004);
rxp1_1=(px*r21);
rxp1_2=(r11*x13004);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13005=(cj11*r10);
IkReal x13006=(r11*sj11);
j10eval[0]=((((-1.0)*x13005))+x13006);
j10eval[1]=(((sj9*x13005))+(((-1.0)*sj9*x13006)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x13007=((-1.0)*px);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13007);
rxp1_1=(px*r21);
rxp1_2=(r11*x13007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13008=(r11*sj11);
IkReal x13009=((1.0)*cj11*r10);
j10eval[0]=((((-1.0)*x13009))+x13008);
j10eval[1]=(((cj9*x13008))+(((-1.0)*cj9*x13009)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x13010=((-1.0)*px);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13010);
rxp1_1=(px*r21);
rxp1_2=(r11*x13010);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=(((cj11*r10*sj9))+(((-1.0)*r11*sj11*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13011=((1.0)*cj9);
CheckValue<IkReal> x13012=IKPowWithIntegerCheck(cj9,-1);
if(!x13012.valid){
continue;
}
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(r02,-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014=IKPowWithIntegerCheck((((cj11*r10*sj9))+(((-1.0)*r11*sj11*sj9))),-1);
if(!x13014.valid){
continue;
}
if( IKabs(((x13012.value)*(x13013.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13014.value)*(((((-1.0)*cj11*r11*x13011))+(((-1.0)*r10*sj11*x13011)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13012.value)*(x13013.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))))+IKsqr(((x13014.value)*(((((-1.0)*cj11*r11*x13011))+(((-1.0)*r10*sj11*x13011))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x13012.value)*(x13013.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))), ((x13014.value)*(((((-1.0)*cj11*r11*x13011))+(((-1.0)*r10*sj11*x13011))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13015=IKsin(j10);
IkReal x13016=IKcos(j10);
IkReal x13017=(sj7*sj8);
IkReal x13018=((1.0)*sj9);
IkReal x13019=(r11*sj11);
IkReal x13020=(cj7*sj8);
IkReal x13021=(cj11*sj9);
IkReal x13022=(sj11*sj9);
IkReal x13023=(cj9*r10);
IkReal x13024=((1.0)*cj8);
IkReal x13025=(cj9*r20);
IkReal x13026=(cj11*cj9);
IkReal x13027=(cj7*x13024);
IkReal x13028=(r02*x13015);
IkReal x13029=(r21*sj11*x13016);
IkReal x13030=((1.0)*cj11*x13016);
IkReal x13031=((1.0)*cj11*x13015);
evalcond[0]=((-1.0)*r02*x13016);
evalcond[1]=(((cj8*sj7))+x13020+((cj9*x13028)));
evalcond[2]=((((-1.0)*r20*x13031))+((r21*sj11*x13015)));
evalcond[3]=((-1.0)+((x13015*x13019))+(((-1.0)*r10*x13031)));
evalcond[4]=((((-1.0)*x13018*x13028))+(((-1.0)*x13027))+x13017);
evalcond[5]=(((r10*x13016*x13021))+((sj11*x13023))+((r11*x13026))+(((-1.0)*x13016*x13018*x13019)));
evalcond[6]=((((-1.0)*x13023*x13030))+((r11*x13021))+((cj9*x13016*x13019))+((r10*x13022)));
evalcond[7]=((((-1.0)*x13025*x13030))+((r21*x13021))+(((-1.0)*x13027))+((r20*x13022))+x13017+((cj9*x13029)));
evalcond[8]=((((-1.0)*x13018*x13029))+((sj11*x13025))+((r21*x13026))+(((-1.0)*x13020))+((r20*x13016*x13021))+(((-1.0)*sj7*x13024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13032=((1.0)*cj11);
IkReal x13033=(r11*sj11);
CheckValue<IkReal> x13034=IKPowWithIntegerCheck((x13033+(((-1.0)*r10*x13032))),-1);
if(!x13034.valid){
continue;
}
CheckValue<IkReal> x13035=IKPowWithIntegerCheck((((cj9*x13033))+(((-1.0)*cj9*r10*x13032))),-1);
if(!x13035.valid){
continue;
}
if( IKabs(x13034.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13035.value)*(((((-1.0)*r10*sj11*sj9))+(((-1.0)*r11*sj9*x13032)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13034.value)+IKsqr(((x13035.value)*(((((-1.0)*r10*sj11*sj9))+(((-1.0)*r11*sj9*x13032))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x13034.value, ((x13035.value)*(((((-1.0)*r10*sj11*sj9))+(((-1.0)*r11*sj9*x13032))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13036=IKsin(j10);
IkReal x13037=IKcos(j10);
IkReal x13038=(sj7*sj8);
IkReal x13039=((1.0)*sj9);
IkReal x13040=(r11*sj11);
IkReal x13041=(cj7*sj8);
IkReal x13042=(cj11*sj9);
IkReal x13043=(sj11*sj9);
IkReal x13044=(cj9*r10);
IkReal x13045=((1.0)*cj8);
IkReal x13046=(cj9*r20);
IkReal x13047=(cj11*cj9);
IkReal x13048=(cj7*x13045);
IkReal x13049=(r02*x13036);
IkReal x13050=(r21*sj11*x13037);
IkReal x13051=((1.0)*cj11*x13037);
IkReal x13052=((1.0)*cj11*x13036);
evalcond[0]=((-1.0)*r02*x13037);
evalcond[1]=(((cj8*sj7))+((cj9*x13049))+x13041);
evalcond[2]=((((-1.0)*r20*x13052))+((r21*sj11*x13036)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13052))+((x13036*x13040)));
evalcond[4]=((((-1.0)*x13039*x13049))+x13038+(((-1.0)*x13048)));
evalcond[5]=(((r11*x13047))+(((-1.0)*x13037*x13039*x13040))+((r10*x13037*x13042))+((sj11*x13044)));
evalcond[6]=((((-1.0)*x13044*x13051))+((r11*x13042))+((r10*x13043))+((cj9*x13037*x13040)));
evalcond[7]=((((-1.0)*x13046*x13051))+((r20*x13043))+((r21*x13042))+x13038+((cj9*x13050))+(((-1.0)*x13048)));
evalcond[8]=((((-1.0)*x13039*x13050))+(((-1.0)*x13041))+((r21*x13047))+((r20*x13037*x13042))+((sj11*x13046))+(((-1.0)*sj7*x13045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13053=((1.0)*cj9);
IkReal x13054=(r11*sj11);
IkReal x13055=(cj11*r10);
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(((((-1.0)*x13055))+x13054),-1);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(((((-1.0)*sj9*x13054))+((sj9*x13055))),-1);
if(!x13057.valid){
continue;
}
if( IKabs(x13056.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13057.value)*(((((-1.0)*cj11*r11*x13053))+(((-1.0)*r10*sj11*x13053)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13056.value)+IKsqr(((x13057.value)*(((((-1.0)*cj11*r11*x13053))+(((-1.0)*r10*sj11*x13053))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x13056.value, ((x13057.value)*(((((-1.0)*cj11*r11*x13053))+(((-1.0)*r10*sj11*x13053))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13058=IKsin(j10);
IkReal x13059=IKcos(j10);
IkReal x13060=(sj7*sj8);
IkReal x13061=((1.0)*sj9);
IkReal x13062=(r11*sj11);
IkReal x13063=(cj7*sj8);
IkReal x13064=(cj11*sj9);
IkReal x13065=(sj11*sj9);
IkReal x13066=(cj9*r10);
IkReal x13067=((1.0)*cj8);
IkReal x13068=(cj9*r20);
IkReal x13069=(cj11*cj9);
IkReal x13070=(cj7*x13067);
IkReal x13071=(r02*x13058);
IkReal x13072=(r21*sj11*x13059);
IkReal x13073=((1.0)*cj11*x13059);
IkReal x13074=((1.0)*cj11*x13058);
evalcond[0]=((-1.0)*r02*x13059);
evalcond[1]=(((cj8*sj7))+((cj9*x13071))+x13063);
evalcond[2]=(((r21*sj11*x13058))+(((-1.0)*r20*x13074)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13074))+((x13058*x13062)));
evalcond[4]=((((-1.0)*x13070))+(((-1.0)*x13061*x13071))+x13060);
evalcond[5]=(((sj11*x13066))+((r10*x13059*x13064))+(((-1.0)*x13059*x13061*x13062))+((r11*x13069)));
evalcond[6]=(((cj9*x13059*x13062))+((r10*x13065))+(((-1.0)*x13066*x13073))+((r11*x13064)));
evalcond[7]=(((r20*x13065))+((cj9*x13072))+(((-1.0)*x13068*x13073))+((r21*x13064))+(((-1.0)*x13070))+x13060);
evalcond[8]=((((-1.0)*sj7*x13067))+(((-1.0)*x13063))+((r21*x13069))+((sj11*x13068))+(((-1.0)*x13061*x13072))+((r20*x13059*x13064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13075=cj11*cj11;
IkReal x13076=(cj9*r21);
IkReal x13077=(cj11*sj11);
IkReal x13078=((1.0)*r11);
IkReal x13079=(cj9*r20);
IkReal x13080=(r22*sj9);
IkReal x13081=(r21*sj9);
IkReal x13082=(r20*sj9);
IkReal x13083=((1.0)*r10*x13075);
CheckValue<IkReal> x13084 = IKatan2WithCheck(IkReal((((r10*sj11*x13080))+((cj11*r11*x13080)))),IkReal(((((-1.0)*x13075*x13078*x13082))+(((-1.0)*x13081*x13083))+((r11*x13077*x13081))+(((-1.0)*r10*x13077*x13082))+((r10*x13081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13084.valid){
continue;
}
CheckValue<IkReal> x13085=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r12*r22))+(((-1.0)*x13076*x13078))+((r10*x13076*x13077))+((r11*x13075*x13076))+((r11*x13077*x13079))+(((-1.0)*x13079*x13083)))),-1);
if(!x13085.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13084.value)+(((1.5707963267949)*(x13085.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13086=IKsin(j10);
IkReal x13087=IKcos(j10);
IkReal x13088=(sj7*sj8);
IkReal x13089=((1.0)*sj9);
IkReal x13090=((1.0)*cj8);
IkReal x13091=(cj7*sj8);
IkReal x13092=(cj11*sj9);
IkReal x13093=(cj9*r01);
IkReal x13094=(cj11*r00);
IkReal x13095=(sj11*sj9);
IkReal x13096=(cj9*r10);
IkReal x13097=(cj9*r21);
IkReal x13098=(cj11*cj9);
IkReal x13099=(cj9*sj11);
IkReal x13100=(cj7*x13090);
IkReal x13101=(sj11*x13087);
IkReal x13102=(sj11*x13086);
IkReal x13103=(r02*x13086);
IkReal x13104=(r12*x13086);
IkReal x13105=((1.0)*x13087);
IkReal x13106=((1.0)*x13086);
IkReal x13107=(r22*x13086);
evalcond[0]=(((r21*x13102))+(((-1.0)*cj11*r20*x13106))+(((-1.0)*r22*x13105)));
evalcond[1]=(((r01*x13102))+(((-1.0)*x13094*x13106))+(((-1.0)*r02*x13105)));
evalcond[2]=((-1.0)+(((-1.0)*cj11*r10*x13106))+(((-1.0)*r12*x13105))+((r11*x13102)));
evalcond[3]=(((cj9*x13104))+((r11*x13092))+((r11*x13087*x13099))+(((-1.0)*cj11*x13096*x13105))+((r10*x13095)));
evalcond[4]=(((sj11*x13096))+(((-1.0)*x13089*x13104))+((r11*x13098))+((r10*x13087*x13092))+(((-1.0)*r11*x13089*x13101)));
evalcond[5]=(((cj9*x13103))+((cj8*sj7))+(((-1.0)*cj9*x13094*x13105))+((x13093*x13101))+x13091+((r01*x13092))+((r00*x13095)));
evalcond[6]=(((cj9*x13107))+((x13097*x13101))+(((-1.0)*x13100))+x13088+(((-1.0)*r20*x13098*x13105))+((r21*x13092))+((r20*x13095)));
evalcond[7]=(((cj11*x13093))+(((-1.0)*r01*x13089*x13101))+(((-1.0)*x13089*x13103))+((r00*x13087*x13092))+(((-1.0)*x13100))+x13088+((r00*x13099)));
evalcond[8]=((((-1.0)*sj7*x13090))+((cj11*x13097))+(((-1.0)*x13089*x13107))+(((-1.0)*r21*x13089*x13101))+((r20*x13087*x13092))+(((-1.0)*x13091))+((r20*x13099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13108=((1.0)*cj11);
CheckValue<IkReal> x13109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x13108)))),-1);
if(!x13109.valid){
continue;
}
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13108))+((r01*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13109.value)))+(x13110.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13111=IKsin(j10);
IkReal x13112=IKcos(j10);
IkReal x13113=(sj7*sj8);
IkReal x13114=((1.0)*sj9);
IkReal x13115=((1.0)*cj8);
IkReal x13116=(cj7*sj8);
IkReal x13117=(cj11*sj9);
IkReal x13118=(cj9*r01);
IkReal x13119=(cj11*r00);
IkReal x13120=(sj11*sj9);
IkReal x13121=(cj9*r10);
IkReal x13122=(cj9*r21);
IkReal x13123=(cj11*cj9);
IkReal x13124=(cj9*sj11);
IkReal x13125=(cj7*x13115);
IkReal x13126=(sj11*x13112);
IkReal x13127=(sj11*x13111);
IkReal x13128=(r02*x13111);
IkReal x13129=(r12*x13111);
IkReal x13130=((1.0)*x13112);
IkReal x13131=((1.0)*x13111);
IkReal x13132=(r22*x13111);
evalcond[0]=((((-1.0)*r22*x13130))+(((-1.0)*cj11*r20*x13131))+((r21*x13127)));
evalcond[1]=(((r01*x13127))+(((-1.0)*x13119*x13131))+(((-1.0)*r02*x13130)));
evalcond[2]=((-1.0)+(((-1.0)*cj11*r10*x13131))+((r11*x13127))+(((-1.0)*r12*x13130)));
evalcond[3]=(((r10*x13120))+((cj9*x13129))+(((-1.0)*cj11*x13121*x13130))+((r11*x13117))+((r11*x13112*x13124)));
evalcond[4]=((((-1.0)*x13114*x13129))+((sj11*x13121))+((r11*x13123))+(((-1.0)*r11*x13114*x13126))+((r10*x13112*x13117)));
evalcond[5]=(((cj8*sj7))+((r00*x13120))+((cj9*x13128))+((x13118*x13126))+(((-1.0)*cj9*x13119*x13130))+x13116+((r01*x13117)));
evalcond[6]=((((-1.0)*r20*x13123*x13130))+((r20*x13120))+((cj9*x13132))+((r21*x13117))+((x13122*x13126))+(((-1.0)*x13125))+x13113);
evalcond[7]=((((-1.0)*x13114*x13128))+(((-1.0)*r01*x13114*x13126))+((cj11*x13118))+((r00*x13124))+(((-1.0)*x13125))+x13113+((r00*x13112*x13117)));
evalcond[8]=((((-1.0)*r21*x13114*x13126))+((r20*x13124))+(((-1.0)*x13114*x13132))+((r20*x13112*x13117))+(((-1.0)*x13116))+(((-1.0)*sj7*x13115))+((cj11*x13122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13133 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13133.valid){
continue;
}
CheckValue<IkReal> x13134=IKPowWithIntegerCheck(IKsign((((r00*sj11))+((cj11*r01)))),-1);
if(!x13134.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13133.value)+(((1.5707963267949)*(x13134.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13135=IKsin(j10);
IkReal x13136=IKcos(j10);
IkReal x13137=(sj7*sj8);
IkReal x13138=((1.0)*sj9);
IkReal x13139=((1.0)*cj8);
IkReal x13140=(cj7*sj8);
IkReal x13141=(cj11*sj9);
IkReal x13142=(cj9*r01);
IkReal x13143=(cj11*r00);
IkReal x13144=(sj11*sj9);
IkReal x13145=(cj9*r10);
IkReal x13146=(cj9*r21);
IkReal x13147=(cj11*cj9);
IkReal x13148=(cj9*sj11);
IkReal x13149=(cj7*x13139);
IkReal x13150=(sj11*x13136);
IkReal x13151=(sj11*x13135);
IkReal x13152=(r02*x13135);
IkReal x13153=(r12*x13135);
IkReal x13154=((1.0)*x13136);
IkReal x13155=((1.0)*x13135);
IkReal x13156=(r22*x13135);
evalcond[0]=(((r21*x13151))+(((-1.0)*cj11*r20*x13155))+(((-1.0)*r22*x13154)));
evalcond[1]=((((-1.0)*x13143*x13155))+(((-1.0)*r02*x13154))+((r01*x13151)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13154))+(((-1.0)*cj11*r10*x13155))+((r11*x13151)));
evalcond[3]=((((-1.0)*cj11*x13145*x13154))+((r11*x13141))+((cj9*x13153))+((r10*x13144))+((r11*x13136*x13148)));
evalcond[4]=((((-1.0)*x13138*x13153))+((sj11*x13145))+((r11*x13147))+((r10*x13136*x13141))+(((-1.0)*r11*x13138*x13150)));
evalcond[5]=(((x13142*x13150))+(((-1.0)*cj9*x13143*x13154))+((cj8*sj7))+((cj9*x13152))+x13140+((r00*x13144))+((r01*x13141)));
evalcond[6]=(((cj9*x13156))+((x13146*x13150))+((r20*x13144))+(((-1.0)*x13149))+(((-1.0)*r20*x13147*x13154))+x13137+((r21*x13141)));
evalcond[7]=((((-1.0)*r01*x13138*x13150))+((cj11*x13142))+(((-1.0)*x13138*x13152))+(((-1.0)*x13149))+x13137+((r00*x13148))+((r00*x13136*x13141)));
evalcond[8]=(((cj11*x13146))+(((-1.0)*x13138*x13156))+(((-1.0)*sj7*x13139))+(((-1.0)*r21*x13138*x13150))+((r20*x13148))+((r20*x13136*x13141))+(((-1.0)*x13140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13157=((-1.0)*r00);
IkReal x13159 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13159)==0){
continue;
}
IkReal x13158=pow(x13159,-0.5);
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13157),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13160.value));
IkReal gconst13=(r01*x13158);
IkReal gconst14=(x13157*x13158);
CheckValue<IkReal> x13161 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x13161.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
IkReal x13162=((-1.0)*r00);
IkReal x13163=x13158;
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13162),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
IkReal x13164=((-1.0)*(x13165.value));
sj11=gconst13;
cj11=gconst14;
j11=x13164;
IkReal gconst12=x13164;
IkReal gconst13=(r01*x13163);
IkReal gconst14=(x13162*x13163);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13166=((1.0)*gconst13);
CheckValue<IkReal> x13167 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal((((cj6*gconst14*r00))+((gconst14*r10*sj6))+(((-1.0)*r11*sj6*x13166))+(((-1.0)*cj6*r01*x13166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13166))+(((-1.0)*gconst14*r21)))),-1);
if(!x13168.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13167.value)+(((1.5707963267949)*(x13168.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13169=IKsin(j10);
IkReal x13170=IKcos(j10);
IkReal x13171=(gconst14*sj9);
IkReal x13172=((1.0)*sj9);
IkReal x13173=(cj9*gconst14);
IkReal x13174=((1.0)*r00);
IkReal x13175=(gconst13*sj9);
IkReal x13176=(sj7*sj8);
IkReal x13177=((1.0)*cj6);
IkReal x13178=(cj7*cj8);
IkReal x13179=(cj9*gconst13);
IkReal x13180=(cj8*sj7);
IkReal x13181=((1.0)*sj6);
IkReal x13182=(r02*x13169);
IkReal x13183=(gconst13*x13170);
IkReal x13184=(gconst14*x13169);
IkReal x13185=((1.0)*cj7*sj8);
IkReal x13186=((1.0)*x13170);
IkReal x13187=(gconst13*x13169);
IkReal x13188=(r22*x13169);
IkReal x13189=(r12*x13169);
evalcond[0]=(((r21*x13187))+(((-1.0)*r20*x13184))+(((-1.0)*r22*x13186)));
evalcond[1]=(cj6+(((-1.0)*r12*x13186))+(((-1.0)*r10*x13184))+((r11*x13187)));
evalcond[2]=((((-1.0)*x13181))+(((-1.0)*r02*x13186))+(((-1.0)*x13174*x13184))+((r01*x13187)));
evalcond[3]=(((r20*x13175))+(((-1.0)*r20*x13173*x13186))+((cj9*x13188))+(((-1.0)*x13178))+((r21*x13171))+((r21*x13170*x13179))+x13176);
evalcond[4]=((((-1.0)*x13185))+((r20*x13179))+((r20*x13170*x13171))+(((-1.0)*r21*x13172*x13183))+(((-1.0)*x13180))+(((-1.0)*x13172*x13188))+((r21*x13173)));
evalcond[5]=(((r01*x13173))+((r00*x13179))+((r00*x13170*x13171))+((cj6*x13178))+(((-1.0)*x13172*x13182))+(((-1.0)*r01*x13172*x13183))+(((-1.0)*x13176*x13177)));
evalcond[6]=(((r01*x13171))+((r00*x13175))+(((-1.0)*cj7*sj8*x13177))+(((-1.0)*x13170*x13173*x13174))+((r01*x13170*x13179))+((cj9*x13182))+(((-1.0)*x13177*x13180)));
evalcond[7]=((((-1.0)*x13172*x13189))+(((-1.0)*x13176*x13181))+(((-1.0)*r11*x13172*x13183))+((sj6*x13178))+((r11*x13173))+((r10*x13170*x13171))+((r10*x13179)));
evalcond[8]=((((-1.0)*r10*x13173*x13186))+((r11*x13170*x13179))+((cj9*x13189))+(((-1.0)*cj7*sj8*x13181))+(((-1.0)*x13180*x13181))+((r11*x13171))+((r10*x13175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13190=((1.0)*gconst14);
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13190))+(((-1.0)*gconst13*r10)))),-1);
if(!x13191.valid){
continue;
}
CheckValue<IkReal> x13192 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x13190))+((gconst13*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13192.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13191.value)))+(x13192.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13193=IKsin(j10);
IkReal x13194=IKcos(j10);
IkReal x13195=(gconst14*sj9);
IkReal x13196=((1.0)*sj9);
IkReal x13197=(cj9*gconst14);
IkReal x13198=((1.0)*r00);
IkReal x13199=(gconst13*sj9);
IkReal x13200=(sj7*sj8);
IkReal x13201=((1.0)*cj6);
IkReal x13202=(cj7*cj8);
IkReal x13203=(cj9*gconst13);
IkReal x13204=(cj8*sj7);
IkReal x13205=((1.0)*sj6);
IkReal x13206=(r02*x13193);
IkReal x13207=(gconst13*x13194);
IkReal x13208=(gconst14*x13193);
IkReal x13209=((1.0)*cj7*sj8);
IkReal x13210=((1.0)*x13194);
IkReal x13211=(gconst13*x13193);
IkReal x13212=(r22*x13193);
IkReal x13213=(r12*x13193);
evalcond[0]=(((r21*x13211))+(((-1.0)*r22*x13210))+(((-1.0)*r20*x13208)));
evalcond[1]=(cj6+((r11*x13211))+(((-1.0)*r10*x13208))+(((-1.0)*r12*x13210)));
evalcond[2]=((((-1.0)*x13198*x13208))+((r01*x13211))+(((-1.0)*r02*x13210))+(((-1.0)*x13205)));
evalcond[3]=(((r21*x13194*x13203))+((cj9*x13212))+((r21*x13195))+(((-1.0)*r20*x13197*x13210))+((r20*x13199))+x13200+(((-1.0)*x13202)));
evalcond[4]=(((r21*x13197))+(((-1.0)*r21*x13196*x13207))+(((-1.0)*x13196*x13212))+(((-1.0)*x13209))+(((-1.0)*x13204))+((r20*x13194*x13195))+((r20*x13203)));
evalcond[5]=(((r00*x13203))+(((-1.0)*r01*x13196*x13207))+((r01*x13197))+(((-1.0)*x13200*x13201))+((r00*x13194*x13195))+(((-1.0)*x13196*x13206))+((cj6*x13202)));
evalcond[6]=((((-1.0)*x13194*x13197*x13198))+((cj9*x13206))+((r00*x13199))+((r01*x13195))+(((-1.0)*cj7*sj8*x13201))+(((-1.0)*x13201*x13204))+((r01*x13194*x13203)));
evalcond[7]=(((sj6*x13202))+((r10*x13203))+((r11*x13197))+((r10*x13194*x13195))+(((-1.0)*x13196*x13213))+(((-1.0)*r11*x13196*x13207))+(((-1.0)*x13200*x13205)));
evalcond[8]=(((r11*x13195))+((r11*x13194*x13203))+((cj9*x13213))+((r10*x13199))+(((-1.0)*cj7*sj8*x13205))+(((-1.0)*x13204*x13205))+(((-1.0)*r10*x13197*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13214=((-1.0)*r01);
IkReal x13216 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13216)==0){
continue;
}
IkReal x13215=pow(x13216,-0.5);
CheckValue<IkReal> x13217 = IKatan2WithCheck(IkReal(x13214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13217.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13217.value))));
IkReal gconst16=(x13214*x13215);
IkReal gconst17=((1.0)*r00*x13215);
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x13218.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[5];
IkReal x13219=((-1.0)*r01);
CheckValue<IkReal> x13222 = IKatan2WithCheck(IkReal(x13219),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13222.valid){
continue;
}
IkReal x13220=((1.0)*(x13222.value));
IkReal x13221=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13220)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13220)));
IkReal gconst16=(x13219*x13221);
IkReal gconst17=((1.0)*r00*x13221);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=cj6;
j10eval[3]=r22;
j10eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  || IKabs(j10eval[4]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x13223=((-1.0)*r01);
CheckValue<IkReal> x13226 = IKatan2WithCheck(IkReal(x13223),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13226.valid){
continue;
}
IkReal x13224=((1.0)*(x13226.value));
IkReal x13225=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13224)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13224)));
IkReal gconst16=(x13223*x13225);
IkReal gconst17=((1.0)*r00*x13225);
j10eval[0]=r22;
j10eval[1]=sj6;
j10eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x13227=((-1.0)*r01);
CheckValue<IkReal> x13230 = IKatan2WithCheck(IkReal(x13227),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13230.valid){
continue;
}
IkReal x13228=((1.0)*(x13230.value));
IkReal x13229=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13228)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13228)));
IkReal gconst16=(x13227*x13229);
IkReal gconst17=((1.0)*r00*x13229);
IkReal x13231=r02*r02;
IkReal x13232=(r12*sj6);
IkReal x13233=x13215;
IkReal x13234=(cj6*x13233);
j10eval[0]=((IKabs((((r02*x13232*x13233))+(((-1.0)*x13234))+((x13231*x13234)))))+(IKabs(((((-1.0)*cj6*r02))+(((-1.0)*x13232))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
IkReal x13235=((-1.0)*r01);
CheckValue<IkReal> x13238 = IKatan2WithCheck(IkReal(x13235),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13238.valid){
continue;
}
IkReal x13236=((1.0)*(x13238.value));
IkReal x13237=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13236)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13236)));
IkReal gconst16=(x13235*x13237);
IkReal gconst17=((1.0)*r00*x13237);
j10eval[0]=0;
j10eval[1]=0;
j10eval[2]=r22;
j10eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x13239=((-1.0)*r01);
CheckValue<IkReal> x13242 = IKatan2WithCheck(IkReal(x13239),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13242.valid){
continue;
}
IkReal x13240=((1.0)*(x13242.value));
IkReal x13241=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13240)));
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13240)));
IkReal gconst16=(x13239*x13241);
IkReal gconst17=((1.0)*r00*x13241);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13243=gconst16*gconst16;
IkReal x13244=gconst17*gconst17;
IkReal x13245=(gconst17*sj9);
IkReal x13246=(gconst16*r10);
IkReal x13247=((1.0)*r20);
IkReal x13248=(cj9*gconst17);
IkReal x13249=(gconst16*r11);
IkReal x13250=((1.0)*cj9);
IkReal x13251=(r21*x13243);
CheckValue<IkReal> x13252=IKPowWithIntegerCheck(IKsign((((r20*x13248*x13249))+(((-1.0)*cj9*r10*x13244*x13247))+((r21*x13246*x13248))+(((-1.0)*r12*r22*x13250))+(((-1.0)*r11*x13250*x13251)))),-1);
if(!x13252.valid){
continue;
}
CheckValue<IkReal> x13253 = IKatan2WithCheck(IkReal((((r22*sj9*x13246))+((r11*r22*x13245)))),IkReal((((r21*x13245*x13249))+(((-1.0)*x13245*x13246*x13247))+((r10*sj9*x13251))+(((-1.0)*r11*sj9*x13244*x13247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13253.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13252.value)))+(x13253.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13254=IKsin(j10);
IkReal x13255=IKcos(j10);
IkReal x13256=(sj7*sj8);
IkReal x13257=(gconst17*r10);
IkReal x13258=(gconst16*r01);
IkReal x13259=(gconst16*r11);
IkReal x13260=(gconst16*sj9);
IkReal x13261=(gconst16*r21);
IkReal x13262=(cj7*sj8);
IkReal x13263=(cj9*gconst16);
IkReal x13264=(gconst17*r21);
IkReal x13265=(gconst17*r00);
IkReal x13266=(gconst17*r01);
IkReal x13267=((1.0)*cj8);
IkReal x13268=(gconst17*r11);
IkReal x13269=(cj7*x13267);
IkReal x13270=(cj9*x13255);
IkReal x13271=(sj9*x13255);
IkReal x13272=((1.0)*gconst17*r20);
IkReal x13273=((1.0)*x13255);
IkReal x13274=(cj9*x13254);
IkReal x13275=((1.0)*x13254);
IkReal x13276=(sj9*x13275);
evalcond[0]=(((x13254*x13261))+(((-1.0)*r22*x13273))+(((-1.0)*x13254*x13272)));
evalcond[1]=((((-1.0)*x13265*x13275))+((x13254*x13258))+(((-1.0)*r02*x13273)));
evalcond[2]=((-1.0)+((x13254*x13259))+(((-1.0)*r12*x13273))+(((-1.0)*x13257*x13275)));
evalcond[3]=(((x13259*x13270))+((r12*x13274))+((r10*x13260))+((sj9*x13268))+(((-1.0)*x13257*x13270)));
evalcond[4]=((((-1.0)*x13259*x13271))+((cj9*x13268))+((r10*x13263))+((x13257*x13271))+(((-1.0)*r12*x13276)));
evalcond[5]=(((cj8*sj7))+((x13258*x13270))+((r00*x13260))+((r02*x13274))+(((-1.0)*x13265*x13270))+x13262+((sj9*x13266)));
evalcond[6]=((((-1.0)*x13269))+((r20*x13260))+(((-1.0)*x13270*x13272))+((r22*x13274))+x13256+((x13261*x13270))+((sj9*x13264)));
evalcond[7]=((((-1.0)*x13269))+(((-1.0)*x13258*x13271))+((r00*x13263))+((cj9*x13266))+((x13265*x13271))+(((-1.0)*r02*x13276))+x13256);
evalcond[8]=((((-1.0)*x13262))+((r20*x13263))+((cj9*x13264))+(((-1.0)*r21*x13260*x13273))+(((-1.0)*r22*x13276))+(((-1.0)*sj7*x13267))+((gconst17*r20*x13271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13277=((1.0)*gconst17);
CheckValue<IkReal> x13278 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13277))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13278.valid){
continue;
}
CheckValue<IkReal> x13279=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13277)))),-1);
if(!x13279.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13278.value)+(((1.5707963267949)*(x13279.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13280=IKsin(j10);
IkReal x13281=IKcos(j10);
IkReal x13282=(sj7*sj8);
IkReal x13283=(gconst17*r10);
IkReal x13284=(gconst16*r01);
IkReal x13285=(gconst16*r11);
IkReal x13286=(gconst16*sj9);
IkReal x13287=(gconst16*r21);
IkReal x13288=(cj7*sj8);
IkReal x13289=(cj9*gconst16);
IkReal x13290=(gconst17*r21);
IkReal x13291=(gconst17*r00);
IkReal x13292=(gconst17*r01);
IkReal x13293=((1.0)*cj8);
IkReal x13294=(gconst17*r11);
IkReal x13295=(cj7*x13293);
IkReal x13296=(cj9*x13281);
IkReal x13297=(sj9*x13281);
IkReal x13298=((1.0)*gconst17*r20);
IkReal x13299=((1.0)*x13281);
IkReal x13300=(cj9*x13280);
IkReal x13301=((1.0)*x13280);
IkReal x13302=(sj9*x13301);
evalcond[0]=((((-1.0)*x13280*x13298))+((x13280*x13287))+(((-1.0)*r22*x13299)));
evalcond[1]=((((-1.0)*x13291*x13301))+((x13280*x13284))+(((-1.0)*r02*x13299)));
evalcond[2]=((-1.0)+(((-1.0)*x13283*x13301))+((x13280*x13285))+(((-1.0)*r12*x13299)));
evalcond[3]=(((r12*x13300))+((x13285*x13296))+((r10*x13286))+((sj9*x13294))+(((-1.0)*x13283*x13296)));
evalcond[4]=((((-1.0)*x13285*x13297))+((r10*x13289))+(((-1.0)*r12*x13302))+((cj9*x13294))+((x13283*x13297)));
evalcond[5]=(((cj8*sj7))+((x13284*x13296))+((sj9*x13292))+x13288+((r00*x13286))+((r02*x13300))+(((-1.0)*x13291*x13296)));
evalcond[6]=(((x13287*x13296))+(((-1.0)*x13296*x13298))+((r20*x13286))+((r22*x13300))+((sj9*x13290))+x13282+(((-1.0)*x13295)));
evalcond[7]=((((-1.0)*x13284*x13297))+((x13291*x13297))+(((-1.0)*r02*x13302))+((cj9*x13292))+x13282+((r00*x13289))+(((-1.0)*x13295)));
evalcond[8]=((((-1.0)*r21*x13286*x13299))+((r20*x13289))+(((-1.0)*sj7*x13293))+(((-1.0)*x13288))+((gconst17*r20*x13297))+((cj9*x13290))+(((-1.0)*r22*x13302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13303=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13303.valid){
continue;
}
CheckValue<IkReal> x13304 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13304.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13303.value)))+(x13304.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13305=IKsin(j10);
IkReal x13306=IKcos(j10);
IkReal x13307=(sj7*sj8);
IkReal x13308=(gconst17*r10);
IkReal x13309=(gconst16*r01);
IkReal x13310=(gconst16*r11);
IkReal x13311=(gconst16*sj9);
IkReal x13312=(gconst16*r21);
IkReal x13313=(cj7*sj8);
IkReal x13314=(cj9*gconst16);
IkReal x13315=(gconst17*r21);
IkReal x13316=(gconst17*r00);
IkReal x13317=(gconst17*r01);
IkReal x13318=((1.0)*cj8);
IkReal x13319=(gconst17*r11);
IkReal x13320=(cj7*x13318);
IkReal x13321=(cj9*x13306);
IkReal x13322=(sj9*x13306);
IkReal x13323=((1.0)*gconst17*r20);
IkReal x13324=((1.0)*x13306);
IkReal x13325=(cj9*x13305);
IkReal x13326=((1.0)*x13305);
IkReal x13327=(sj9*x13326);
evalcond[0]=((((-1.0)*r22*x13324))+((x13305*x13312))+(((-1.0)*x13305*x13323)));
evalcond[1]=((((-1.0)*x13316*x13326))+(((-1.0)*r02*x13324))+((x13305*x13309)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13324))+((x13305*x13310))+(((-1.0)*x13308*x13326)));
evalcond[3]=(((r12*x13325))+(((-1.0)*x13308*x13321))+((r10*x13311))+((sj9*x13319))+((x13310*x13321)));
evalcond[4]=((((-1.0)*r12*x13327))+((r10*x13314))+((cj9*x13319))+(((-1.0)*x13310*x13322))+((x13308*x13322)));
evalcond[5]=(((cj8*sj7))+((r02*x13325))+((r00*x13311))+(((-1.0)*x13316*x13321))+((sj9*x13317))+x13313+((x13309*x13321)));
evalcond[6]=((((-1.0)*x13321*x13323))+((r20*x13311))+((x13312*x13321))+((sj9*x13315))+(((-1.0)*x13320))+x13307+((r22*x13325)));
evalcond[7]=((((-1.0)*r02*x13327))+((cj9*x13317))+(((-1.0)*x13309*x13322))+((x13316*x13322))+((r00*x13314))+(((-1.0)*x13320))+x13307);
evalcond[8]=((((-1.0)*r22*x13327))+((cj9*x13315))+(((-1.0)*sj7*x13318))+((r20*x13314))+((gconst17*r20*x13322))+(((-1.0)*r21*x13311*x13324))+(((-1.0)*x13313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
j10array[0]=0;
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
j10array[0]=0;
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x13328=((-1.0)*r01);
CheckValue<IkReal> x13331 = IKatan2WithCheck(IkReal(x13328),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13331.valid){
continue;
}
IkReal x13329=((1.0)*(x13331.value));
IkReal x13330=x13215;
sj11=gconst16;
cj11=gconst17;
j11=((3.14159265)+(((-1.0)*x13329)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13329)));
IkReal gconst16=(x13328*x13330);
IkReal gconst17=((1.0)*r00*x13330);
IkReal x13332=r02*r02;
IkReal x13333=(r12*sj6);
IkReal x13334=x13215;
IkReal x13335=(cj6*x13334);
j10eval[0]=((IKabs(((((-1.0)*x13335))+((x13332*x13335))+((r02*x13333*x13334)))))+(IKabs(((((-1.0)*x13333))+(((-1.0)*cj6*r02))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13336=(r20*sj9);
IkReal x13337=(cj7*sj8);
IkReal x13338=(gconst16*r20);
IkReal x13339=((1.0)*gconst17);
IkReal x13340=(cj8*sj7);
IkReal x13341=(gconst16*r21*sj9);
IkReal x13342=((1.0)*cj9*r12);
CheckValue<IkReal> x13343=IKPowWithIntegerCheck((((gconst16*gconst17*r11*x13336))+((gconst17*r10*x13341))+(((-1.0)*gconst16*r11*x13341))+(((-1.0)*gconst17*r10*x13336*x13339))),-1);
if(!x13343.valid){
continue;
}
CheckValue<IkReal> x13344=IKPowWithIntegerCheck((((gconst17*x13336))+(((-1.0)*x13341))),-1);
if(!x13344.valid){
continue;
}
if( IKabs(((x13343.value)*(((((-1.0)*cj9*r12*r21*x13339))+((r12*x13340))+(((-1.0)*x13338*x13342))+((r12*x13337))+((cj6*x13341))+(((-1.0)*cj6*x13336*x13339)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13344.value)*(((((-1.0)*cj9*r21*x13339))+x13337+x13340+(((-1.0)*cj9*x13338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13343.value)*(((((-1.0)*cj9*r12*r21*x13339))+((r12*x13340))+(((-1.0)*x13338*x13342))+((r12*x13337))+((cj6*x13341))+(((-1.0)*cj6*x13336*x13339))))))+IKsqr(((x13344.value)*(((((-1.0)*cj9*r21*x13339))+x13337+x13340+(((-1.0)*cj9*x13338))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x13343.value)*(((((-1.0)*cj9*r12*r21*x13339))+((r12*x13340))+(((-1.0)*x13338*x13342))+((r12*x13337))+((cj6*x13341))+(((-1.0)*cj6*x13336*x13339))))), ((x13344.value)*(((((-1.0)*cj9*r21*x13339))+x13337+x13340+(((-1.0)*cj9*x13338))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13345=IKsin(j10);
IkReal x13346=IKcos(j10);
IkReal x13347=(gconst17*r10);
IkReal x13348=(gconst16*r01);
IkReal x13349=(gconst16*r11);
IkReal x13350=((1.0)*sj9);
IkReal x13351=(gconst16*sj9);
IkReal x13352=(sj7*sj8);
IkReal x13353=((1.0)*gconst17);
IkReal x13354=((1.0)*cj6);
IkReal x13355=(gconst17*sj9);
IkReal x13356=(cj7*cj8);
IkReal x13357=(gconst16*r21);
IkReal x13358=(cj9*gconst16);
IkReal x13359=((1.0)*sj6);
IkReal x13360=(cj8*sj7);
IkReal x13361=(cj9*gconst17);
IkReal x13362=(cj9*x13346);
IkReal x13363=(sj9*x13346);
IkReal x13364=(r02*x13345);
IkReal x13365=((1.0)*cj7*sj8);
IkReal x13366=((1.0)*x13346);
IkReal x13367=(r12*x13345);
evalcond[0]=((((-1.0)*r20*x13345*x13353))+((x13345*x13357)));
evalcond[1]=((((-1.0)*r12*x13366))+cj6+((x13345*x13349))+(((-1.0)*x13345*x13347)));
evalcond[2]=((((-1.0)*r00*x13345*x13353))+(((-1.0)*r02*x13366))+(((-1.0)*x13359))+((x13345*x13348)));
evalcond[3]=(((x13357*x13362))+(((-1.0)*r20*x13353*x13362))+((r20*x13351))+(((-1.0)*x13356))+((r21*x13355))+x13352);
evalcond[4]=((((-1.0)*x13360))+((r20*x13358))+(((-1.0)*x13346*x13350*x13357))+((r20*x13346*x13355))+(((-1.0)*x13365))+((r21*x13361)));
evalcond[5]=(((r01*x13361))+(((-1.0)*x13352*x13354))+((cj6*x13356))+(((-1.0)*x13346*x13348*x13350))+((r00*x13358))+(((-1.0)*x13350*x13364))+((r00*x13346*x13355)));
evalcond[6]=((((-1.0)*r00*x13353*x13362))+((x13348*x13362))+((cj9*x13364))+(((-1.0)*cj7*sj8*x13354))+((r01*x13355))+((r00*x13351))+(((-1.0)*x13354*x13360)));
evalcond[7]=(((r11*x13361))+(((-1.0)*x13352*x13359))+((r10*x13358))+((x13347*x13363))+(((-1.0)*x13346*x13349*x13350))+((sj6*x13356))+(((-1.0)*x13350*x13367)));
evalcond[8]=(((cj9*x13367))+((r10*x13351))+(((-1.0)*cj7*sj8*x13359))+(((-1.0)*x13347*x13362))+((x13349*x13362))+((r11*x13355))+(((-1.0)*x13359*x13360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13368=((1.0)*gconst16);
CheckValue<IkReal> x13369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x13368)))),-1);
if(!x13369.valid){
continue;
}
CheckValue<IkReal> x13370 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x13368))+(((-1.0)*r11*sj6*x13368))+((gconst17*r10*sj6))+((cj6*gconst17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13370.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13369.value)))+(x13370.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13371=IKsin(j10);
IkReal x13372=IKcos(j10);
IkReal x13373=(gconst17*r10);
IkReal x13374=(gconst16*r01);
IkReal x13375=(gconst16*r11);
IkReal x13376=((1.0)*sj9);
IkReal x13377=(gconst16*sj9);
IkReal x13378=(sj7*sj8);
IkReal x13379=((1.0)*gconst17);
IkReal x13380=((1.0)*cj6);
IkReal x13381=(gconst17*sj9);
IkReal x13382=(cj7*cj8);
IkReal x13383=(gconst16*r21);
IkReal x13384=(cj9*gconst16);
IkReal x13385=((1.0)*sj6);
IkReal x13386=(cj8*sj7);
IkReal x13387=(cj9*gconst17);
IkReal x13388=(cj9*x13372);
IkReal x13389=(sj9*x13372);
IkReal x13390=(r02*x13371);
IkReal x13391=((1.0)*cj7*sj8);
IkReal x13392=((1.0)*x13372);
IkReal x13393=(r12*x13371);
evalcond[0]=((((-1.0)*r20*x13371*x13379))+((x13371*x13383)));
evalcond[1]=(((x13371*x13375))+cj6+(((-1.0)*r12*x13392))+(((-1.0)*x13371*x13373)));
evalcond[2]=(((x13371*x13374))+(((-1.0)*r00*x13371*x13379))+(((-1.0)*x13385))+(((-1.0)*r02*x13392)));
evalcond[3]=((((-1.0)*x13382))+((x13383*x13388))+((r20*x13377))+(((-1.0)*r20*x13379*x13388))+x13378+((r21*x13381)));
evalcond[4]=((((-1.0)*x13386))+((r20*x13384))+(((-1.0)*x13372*x13376*x13383))+((r20*x13372*x13381))+(((-1.0)*x13391))+((r21*x13387)));
evalcond[5]=(((r00*x13372*x13381))+((r01*x13387))+((r00*x13384))+(((-1.0)*x13378*x13380))+((cj6*x13382))+(((-1.0)*x13372*x13374*x13376))+(((-1.0)*x13376*x13390)));
evalcond[6]=(((r00*x13377))+(((-1.0)*r00*x13379*x13388))+((r01*x13381))+((cj9*x13390))+((x13374*x13388))+(((-1.0)*x13380*x13386))+(((-1.0)*cj7*sj8*x13380)));
evalcond[7]=(((r11*x13387))+((r10*x13384))+(((-1.0)*x13372*x13375*x13376))+(((-1.0)*x13378*x13385))+((x13373*x13389))+(((-1.0)*x13376*x13393))+((sj6*x13382)));
evalcond[8]=(((r10*x13377))+((r11*x13381))+(((-1.0)*x13373*x13388))+(((-1.0)*x13385*x13386))+((cj9*x13393))+((x13375*x13388))+(((-1.0)*cj7*sj8*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13394=((1.0)*gconst16);
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x13394))+(((-1.0)*r11*sj6*x13394))+((gconst17*r10*sj6))+((cj6*gconst17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
CheckValue<IkReal> x13396=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x13394)))),-1);
if(!x13396.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13395.value)+(((1.5707963267949)*(x13396.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13397=IKsin(j10);
IkReal x13398=IKcos(j10);
IkReal x13399=(gconst17*r10);
IkReal x13400=(gconst16*r01);
IkReal x13401=(gconst16*r11);
IkReal x13402=((1.0)*sj9);
IkReal x13403=(gconst16*sj9);
IkReal x13404=(sj7*sj8);
IkReal x13405=((1.0)*gconst17);
IkReal x13406=((1.0)*cj6);
IkReal x13407=(gconst17*sj9);
IkReal x13408=(cj7*cj8);
IkReal x13409=(gconst16*r21);
IkReal x13410=(cj9*gconst16);
IkReal x13411=((1.0)*sj6);
IkReal x13412=(cj8*sj7);
IkReal x13413=(cj9*gconst17);
IkReal x13414=(cj9*x13398);
IkReal x13415=(sj9*x13398);
IkReal x13416=(r02*x13397);
IkReal x13417=((1.0)*cj7*sj8);
IkReal x13418=((1.0)*x13398);
IkReal x13419=(r22*x13397);
IkReal x13420=(r12*x13397);
evalcond[0]=((((-1.0)*r22*x13418))+((x13397*x13409))+(((-1.0)*r20*x13397*x13405)));
evalcond[1]=((((-1.0)*r12*x13418))+cj6+(((-1.0)*x13397*x13399))+((x13397*x13401)));
evalcond[2]=((((-1.0)*r00*x13397*x13405))+((x13397*x13400))+(((-1.0)*r02*x13418))+(((-1.0)*x13411)));
evalcond[3]=(x13404+((x13409*x13414))+((r21*x13407))+(((-1.0)*r20*x13405*x13414))+((cj9*x13419))+(((-1.0)*x13408))+((r20*x13403)));
evalcond[4]=((((-1.0)*x13398*x13402*x13409))+(((-1.0)*x13412))+((r20*x13410))+((r21*x13413))+((r20*x13398*x13407))+(((-1.0)*x13402*x13419))+(((-1.0)*x13417)));
evalcond[5]=(((r00*x13398*x13407))+(((-1.0)*x13398*x13400*x13402))+((r01*x13413))+((r00*x13410))+(((-1.0)*x13404*x13406))+((cj6*x13408))+(((-1.0)*x13402*x13416)));
evalcond[6]=((((-1.0)*cj7*sj8*x13406))+((r01*x13407))+((r00*x13403))+(((-1.0)*x13406*x13412))+(((-1.0)*r00*x13405*x13414))+((cj9*x13416))+((x13400*x13414)));
evalcond[7]=((((-1.0)*x13398*x13401*x13402))+((sj6*x13408))+(((-1.0)*x13404*x13411))+((x13399*x13415))+(((-1.0)*x13402*x13420))+((r10*x13410))+((r11*x13413)));
evalcond[8]=(((r11*x13407))+((r10*x13403))+((x13401*x13414))+(((-1.0)*x13411*x13412))+(((-1.0)*cj7*sj8*x13411))+(((-1.0)*x13399*x13414))+((cj9*x13420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13421=((1.0)*gconst17);
CheckValue<IkReal> x13422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x13421)))),-1);
if(!x13422.valid){
continue;
}
CheckValue<IkReal> x13423 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x13421))+((gconst16*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13423.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13422.value)))+(x13423.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13424=IKsin(j10);
IkReal x13425=IKcos(j10);
IkReal x13426=(gconst17*r10);
IkReal x13427=(gconst16*r01);
IkReal x13428=(gconst16*r11);
IkReal x13429=((1.0)*sj9);
IkReal x13430=(gconst16*sj9);
IkReal x13431=(sj7*sj8);
IkReal x13432=((1.0)*gconst17);
IkReal x13433=((1.0)*cj6);
IkReal x13434=(gconst17*sj9);
IkReal x13435=(cj7*cj8);
IkReal x13436=(gconst16*r21);
IkReal x13437=(cj9*gconst16);
IkReal x13438=((1.0)*sj6);
IkReal x13439=(cj8*sj7);
IkReal x13440=(cj9*gconst17);
IkReal x13441=(cj9*x13425);
IkReal x13442=(sj9*x13425);
IkReal x13443=(r02*x13424);
IkReal x13444=((1.0)*cj7*sj8);
IkReal x13445=((1.0)*x13425);
IkReal x13446=(r22*x13424);
IkReal x13447=(r12*x13424);
evalcond[0]=(((x13424*x13436))+(((-1.0)*r22*x13445))+(((-1.0)*r20*x13424*x13432)));
evalcond[1]=(cj6+(((-1.0)*r12*x13445))+((x13424*x13428))+(((-1.0)*x13424*x13426)));
evalcond[2]=((((-1.0)*x13438))+((x13424*x13427))+(((-1.0)*r00*x13424*x13432))+(((-1.0)*r02*x13445)));
evalcond[3]=(x13431+(((-1.0)*x13435))+(((-1.0)*r20*x13432*x13441))+((cj9*x13446))+((x13436*x13441))+((r21*x13434))+((r20*x13430)));
evalcond[4]=((((-1.0)*x13429*x13446))+(((-1.0)*x13425*x13429*x13436))+(((-1.0)*x13444))+(((-1.0)*x13439))+((r20*x13425*x13434))+((r20*x13437))+((r21*x13440)));
evalcond[5]=((((-1.0)*x13429*x13443))+((cj6*x13435))+(((-1.0)*x13431*x13433))+((r01*x13440))+((r00*x13425*x13434))+(((-1.0)*x13425*x13427*x13429))+((r00*x13437)));
evalcond[6]=(((r01*x13434))+(((-1.0)*cj7*sj8*x13433))+((cj9*x13443))+(((-1.0)*x13433*x13439))+(((-1.0)*r00*x13432*x13441))+((x13427*x13441))+((r00*x13430)));
evalcond[7]=((((-1.0)*x13429*x13447))+(((-1.0)*x13425*x13428*x13429))+(((-1.0)*x13431*x13438))+((r11*x13440))+((sj6*x13435))+((x13426*x13442))+((r10*x13437)));
evalcond[8]=((((-1.0)*cj7*sj8*x13438))+((x13428*x13441))+(((-1.0)*x13426*x13441))+((r11*x13434))+((cj9*x13447))+(((-1.0)*x13438*x13439))+((r10*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13448=((1.0)*gconst17);
CheckValue<IkReal> x13449=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x13448)))),-1);
if(!x13449.valid){
continue;
}
CheckValue<IkReal> x13450 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal(((((-1.0)*cj6*r20*x13448))+((cj6*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13450.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13449.value)))+(x13450.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13451=IKsin(j10);
IkReal x13452=IKcos(j10);
IkReal x13453=(gconst17*r10);
IkReal x13454=(gconst16*r01);
IkReal x13455=(gconst16*r11);
IkReal x13456=((1.0)*sj9);
IkReal x13457=(gconst16*sj9);
IkReal x13458=(sj7*sj8);
IkReal x13459=((1.0)*gconst17);
IkReal x13460=((1.0)*cj6);
IkReal x13461=(gconst17*sj9);
IkReal x13462=(cj7*cj8);
IkReal x13463=(gconst16*r21);
IkReal x13464=(cj9*gconst16);
IkReal x13465=((1.0)*sj6);
IkReal x13466=(cj8*sj7);
IkReal x13467=(cj9*gconst17);
IkReal x13468=(cj9*x13452);
IkReal x13469=(sj9*x13452);
IkReal x13470=(r02*x13451);
IkReal x13471=((1.0)*cj7*sj8);
IkReal x13472=((1.0)*x13452);
IkReal x13473=(r22*x13451);
IkReal x13474=(r12*x13451);
evalcond[0]=(((x13451*x13463))+(((-1.0)*r20*x13451*x13459))+(((-1.0)*r22*x13472)));
evalcond[1]=(cj6+(((-1.0)*x13451*x13453))+((x13451*x13455))+(((-1.0)*r12*x13472)));
evalcond[2]=((((-1.0)*r02*x13472))+(((-1.0)*r00*x13451*x13459))+((x13451*x13454))+(((-1.0)*x13465)));
evalcond[3]=(x13458+((r20*x13457))+((r21*x13461))+((cj9*x13473))+((x13463*x13468))+(((-1.0)*x13462))+(((-1.0)*r20*x13459*x13468)));
evalcond[4]=(((r20*x13464))+((r21*x13467))+(((-1.0)*x13456*x13473))+(((-1.0)*x13471))+(((-1.0)*x13466))+(((-1.0)*x13452*x13456*x13463))+((r20*x13452*x13461)));
evalcond[5]=(((r00*x13452*x13461))+(((-1.0)*x13456*x13470))+(((-1.0)*x13458*x13460))+(((-1.0)*x13452*x13454*x13456))+((cj6*x13462))+((r01*x13467))+((r00*x13464)));
evalcond[6]=((((-1.0)*x13460*x13466))+(((-1.0)*cj7*sj8*x13460))+((cj9*x13470))+(((-1.0)*r00*x13459*x13468))+((x13454*x13468))+((r01*x13461))+((r00*x13457)));
evalcond[7]=(((r10*x13464))+(((-1.0)*x13452*x13455*x13456))+((r11*x13467))+(((-1.0)*x13456*x13474))+((x13453*x13469))+((sj6*x13462))+(((-1.0)*x13458*x13465)));
evalcond[8]=(((r10*x13457))+(((-1.0)*x13465*x13466))+(((-1.0)*x13453*x13468))+(((-1.0)*cj7*sj8*x13465))+((cj9*x13474))+((r11*x13461))+((x13455*x13468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13475=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x13475;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x13475);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13476=((1.0)*cj11);
IkReal x13477=((((-1.0)*r11*x13476))+(((-1.0)*r10*sj11)));
j10eval[0]=x13477;
j10eval[1]=IKsign(x13477);
j10eval[2]=((IKabs((((r21*sj11))+(((-1.0)*r20*x13476)))))+(IKabs(r22)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13478=cj11*cj11;
IkReal x13479=(cj9*r21);
IkReal x13480=(cj11*sj11);
IkReal x13481=((1.0)*cj9);
IkReal x13482=((((-1.0)*r00*r20*x13478*x13481))+((r01*x13478*x13479))+((r00*x13479*x13480))+(((-1.0)*r01*x13479))+((cj9*r01*r20*x13480))+(((-1.0)*r02*r22*x13481)));
j10eval[0]=x13482;
j10eval[1]=IKsign(x13482);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13483=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x13483;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x13483);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13484=((1.0)*cj11);
IkReal x13485=((((-1.0)*r11*x13484))+(((-1.0)*r10*sj11)));
j10eval[0]=x13485;
j10eval[1]=IKsign(x13485);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13484))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13486=r01*r01;
IkReal x13487=cj11*cj11;
IkReal x13488=(r01*sj11);
IkReal x13489=(cj11*r00);
IkReal x13490=(((x13486*x13487))+(((-1.0)*x13486))+(((-1.0)*(r02*r02)))+(((-1.0)*x13487*(r00*r00)))+(((2.0)*x13488*x13489)));
j10eval[0]=x13490;
j10eval[1]=((IKabs(r02))+(IKabs((x13489+(((-1.0)*x13488))))));
j10eval[2]=IKsign(x13490);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13491=r01*r01;
IkReal x13492=cj11*cj11;
IkReal x13493=(r01*sj11);
IkReal x13494=(cj11*r00);
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal((x13494+(((-1.0)*x13493)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
CheckValue<IkReal> x13496=IKPowWithIntegerCheck(IKsign((((x13491*x13492))+(((-1.0)*x13492*(r00*r00)))+(((-1.0)*x13491))+(((-1.0)*(r02*r02)))+(((2.0)*x13493*x13494)))),-1);
if(!x13496.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13495.value)+(((1.5707963267949)*(x13496.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13497=IKsin(j10);
IkReal x13498=IKcos(j10);
IkReal x13499=((1.0)*sj8);
IkReal x13500=(cj11*r00);
IkReal x13501=(sj11*x13497);
IkReal x13502=((1.0)*x13498);
IkReal x13503=((1.0)*x13497);
IkReal x13504=(cj11*x13498);
evalcond[0]=((((-1.0)*cj11*r20*x13503))+((r21*x13501))+(((-1.0)*r22*x13502)));
evalcond[1]=((((-1.0)*r12*x13502))+(((-1.0)*cj11*r10*x13503))+((r11*x13501)));
evalcond[2]=(((x13498*x13500))+(((-1.0)*r01*sj11*x13502))+(((-1.0)*r02*x13503)));
evalcond[3]=((-1.0)+(((-1.0)*x13500*x13503))+(((-1.0)*r02*x13502))+((r01*x13501)));
evalcond[4]=(((r10*x13504))+(((-1.0)*r12*x13503))+((cj7*cj8))+(((-1.0)*sj7*x13499))+(((-1.0)*r11*sj11*x13502)));
evalcond[5]=(((r20*x13504))+(((-1.0)*r21*sj11*x13502))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x13499))+(((-1.0)*r22*x13503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13505=((1.0)*cj11);
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13505))+(((-1.0)*r10*sj11)))),-1);
if(!x13506.valid){
continue;
}
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x13505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13506.value)))+(x13507.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13508=IKsin(j10);
IkReal x13509=IKcos(j10);
IkReal x13510=((1.0)*sj8);
IkReal x13511=(cj11*r00);
IkReal x13512=(sj11*x13508);
IkReal x13513=((1.0)*x13509);
IkReal x13514=((1.0)*x13508);
IkReal x13515=(cj11*x13509);
evalcond[0]=(((r21*x13512))+(((-1.0)*r22*x13513))+(((-1.0)*cj11*r20*x13514)));
evalcond[1]=((((-1.0)*r12*x13513))+(((-1.0)*cj11*r10*x13514))+((r11*x13512)));
evalcond[2]=(((x13509*x13511))+(((-1.0)*r01*sj11*x13513))+(((-1.0)*r02*x13514)));
evalcond[3]=((-1.0)+(((-1.0)*x13511*x13514))+((r01*x13512))+(((-1.0)*r02*x13513)));
evalcond[4]=((((-1.0)*r12*x13514))+(((-1.0)*sj7*x13510))+((cj7*cj8))+(((-1.0)*r11*sj11*x13513))+((r10*x13515)));
evalcond[5]=((((-1.0)*r22*x13514))+((r20*x13515))+(((-1.0)*r21*sj11*x13513))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x13510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13516=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13517.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13516.value)))+(x13517.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13518=IKsin(j10);
IkReal x13519=IKcos(j10);
IkReal x13520=((1.0)*sj8);
IkReal x13521=(cj11*r00);
IkReal x13522=(sj11*x13518);
IkReal x13523=((1.0)*x13519);
IkReal x13524=((1.0)*x13518);
IkReal x13525=(cj11*x13519);
evalcond[0]=(((r21*x13522))+(((-1.0)*r22*x13523))+(((-1.0)*cj11*r20*x13524)));
evalcond[1]=((((-1.0)*r12*x13523))+(((-1.0)*cj11*r10*x13524))+((r11*x13522)));
evalcond[2]=(((x13519*x13521))+(((-1.0)*r01*sj11*x13523))+(((-1.0)*r02*x13524)));
evalcond[3]=((-1.0)+((r01*x13522))+(((-1.0)*x13521*x13524))+(((-1.0)*r02*x13523)));
evalcond[4]=((((-1.0)*r12*x13524))+(((-1.0)*sj7*x13520))+((cj7*cj8))+(((-1.0)*r11*sj11*x13523))+((r10*x13525)));
evalcond[5]=((((-1.0)*r22*x13524))+((r20*x13525))+(((-1.0)*cj8*sj7))+(((-1.0)*r21*sj11*x13523))+(((-1.0)*cj7*x13520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13526=(((r20*sj11))+((cj11*r21)));
j10eval[0]=x13526;
j10eval[1]=((IKabs(((((-1.0)*cj11*r10))+((r11*sj11)))))+(IKabs(r12)));
j10eval[2]=IKsign(x13526);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13527=((1.0)*cj11);
IkReal x13528=((((-1.0)*r11*x13527))+(((-1.0)*r10*sj11)));
j10eval[0]=x13528;
j10eval[1]=IKsign(x13528);
j10eval[2]=((IKabs(((((-1.0)*r20*x13527))+((r21*sj11)))))+(IKabs(r22)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13529=cj11*cj11;
IkReal x13530=r01*r01;
IkReal x13531=(cj11*r00);
IkReal x13532=(r01*sj11);
IkReal x13533=(x13530+(((-1.0)*x13529*x13530))+(((-2.0)*x13531*x13532))+(r02*r02)+((x13529*(r00*r00))));
j10eval[0]=x13533;
j10eval[1]=IKsign(x13533);
j10eval[2]=((IKabs(r02))+(IKabs((x13532+(((-1.0)*x13531))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13534=cj11*cj11;
IkReal x13535=r01*r01;
IkReal x13536=(cj11*r00);
IkReal x13537=(r01*sj11);
CheckValue<IkReal> x13538 = IKatan2WithCheck(IkReal((x13537+(((-1.0)*x13536)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13538.valid){
continue;
}
CheckValue<IkReal> x13539=IKPowWithIntegerCheck(IKsign((x13535+(((-1.0)*x13534*x13535))+(((-2.0)*x13536*x13537))+((x13534*(r00*r00)))+(r02*r02))),-1);
if(!x13539.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13538.value)+(((1.5707963267949)*(x13539.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13540=IKcos(j10);
IkReal x13541=IKsin(j10);
IkReal x13542=(r11*sj11);
IkReal x13543=((1.0)*sj8);
IkReal x13544=(cj11*r00);
IkReal x13545=(cj11*r10);
IkReal x13546=(cj11*r20);
IkReal x13547=((1.0)*x13540);
IkReal x13548=(sj11*x13540);
IkReal x13549=((1.0)*x13541);
IkReal x13550=(sj11*x13541);
evalcond[0]=((((-1.0)*x13544*x13547))+((r01*x13548))+((r02*x13541)));
evalcond[1]=(((r21*x13550))+(((-1.0)*x13546*x13549))+(((-1.0)*r22*x13547)));
evalcond[2]=(((x13541*x13542))+(((-1.0)*x13545*x13549))+(((-1.0)*r12*x13547)));
evalcond[3]=((-1.0)+(((-1.0)*x13544*x13549))+((r01*x13550))+(((-1.0)*r02*x13547)));
evalcond[4]=(((r12*x13541))+((cj7*cj8))+(((-1.0)*x13545*x13547))+(((-1.0)*sj7*x13543))+((x13540*x13542)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r22*x13541))+((r21*x13548))+(((-1.0)*cj7*x13543))+(((-1.0)*x13546*x13547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13551=((1.0)*cj11);
CheckValue<IkReal> x13552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj11))+(((-1.0)*r11*x13551)))),-1);
if(!x13552.valid){
continue;
}
CheckValue<IkReal> x13553 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x13551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13553.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13552.value)))+(x13553.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13554=IKcos(j10);
IkReal x13555=IKsin(j10);
IkReal x13556=(r11*sj11);
IkReal x13557=((1.0)*sj8);
IkReal x13558=(cj11*r00);
IkReal x13559=(cj11*r10);
IkReal x13560=(cj11*r20);
IkReal x13561=((1.0)*x13554);
IkReal x13562=(sj11*x13554);
IkReal x13563=((1.0)*x13555);
IkReal x13564=(sj11*x13555);
evalcond[0]=(((r01*x13562))+((r02*x13555))+(((-1.0)*x13558*x13561)));
evalcond[1]=((((-1.0)*x13560*x13563))+((r21*x13564))+(((-1.0)*r22*x13561)));
evalcond[2]=((((-1.0)*r12*x13561))+((x13555*x13556))+(((-1.0)*x13559*x13563)));
evalcond[3]=((-1.0)+((r01*x13564))+(((-1.0)*r02*x13561))+(((-1.0)*x13558*x13563)));
evalcond[4]=(((r12*x13555))+((cj7*cj8))+((x13554*x13556))+(((-1.0)*x13559*x13561))+(((-1.0)*sj7*x13557)));
evalcond[5]=(((r22*x13555))+(((-1.0)*cj8*sj7))+(((-1.0)*cj7*x13557))+(((-1.0)*x13560*x13561))+((r21*x13562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x13565.valid){
continue;
}
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13565.value)))+(x13566.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13567=IKcos(j10);
IkReal x13568=IKsin(j10);
IkReal x13569=(r11*sj11);
IkReal x13570=((1.0)*sj8);
IkReal x13571=(cj11*r00);
IkReal x13572=(cj11*r10);
IkReal x13573=(cj11*r20);
IkReal x13574=((1.0)*x13567);
IkReal x13575=(sj11*x13567);
IkReal x13576=((1.0)*x13568);
IkReal x13577=(sj11*x13568);
evalcond[0]=(((r02*x13568))+(((-1.0)*x13571*x13574))+((r01*x13575)));
evalcond[1]=((((-1.0)*r22*x13574))+(((-1.0)*x13573*x13576))+((r21*x13577)));
evalcond[2]=((((-1.0)*x13572*x13576))+((x13568*x13569))+(((-1.0)*r12*x13574)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13574))+(((-1.0)*x13571*x13576))+((r01*x13577)));
evalcond[4]=((((-1.0)*sj7*x13570))+(((-1.0)*x13572*x13574))+((x13567*x13569))+((cj7*cj8))+((r12*x13568)));
evalcond[5]=((((-1.0)*cj7*x13570))+(((-1.0)*cj8*sj7))+(((-1.0)*x13573*x13574))+((r21*x13575))+((r22*x13568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13579 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13579)==0){
continue;
}
IkReal x13578=pow(x13579,-0.5);
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
IkReal gconst48=((-1.0)*(x13580.value));
IkReal gconst49=((-1.0)*r21*x13578);
IkReal gconst50=(r20*x13578);
CheckValue<IkReal> x13581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13581.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x13581.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
IkReal x13582=((-1.0)*(x13584.value));
IkReal x13583=x13578;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj11=gconst49;
cj11=gconst50;
j11=x13582;
IkReal gconst48=x13582;
IkReal gconst49=((-1.0)*r21*x13583);
IkReal gconst50=(r20*x13583);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
IkReal x13585=((-1.0)*(x13587.value));
IkReal x13586=x13578;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj11=gconst49;
cj11=gconst50;
j11=x13585;
IkReal gconst48=x13585;
IkReal gconst49=((-1.0)*r21*x13586);
IkReal gconst50=(r20*x13586);
CheckValue<IkReal> x13595=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13595.valid){
continue;
}
IkReal x13588=x13595.value;
IkReal x13589=(sj9*x13588);
IkReal x13590=(r10*x13589);
IkReal x13591=(r00*x13589);
IkReal x13592=(r01*x13589);
IkReal x13593=(r11*x13589);
IkReal x13594=(r20*r21*x13589);
j10eval[0]=IKsign((((r02*r12*sj9))+((r01*r20*r21*x13590))+((r00*x13590*(r20*r20)))+((r11*r20*r21*x13591))+((r11*x13592*(r21*r21)))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13596=gconst49*gconst49;
IkReal x13597=gconst50*gconst50;
IkReal x13598=(r00*sj9);
IkReal x13599=((1.0)*cj9);
IkReal x13600=(r01*sj9);
IkReal x13601=(r11*x13596);
IkReal x13602=(r10*x13597);
IkReal x13603=(gconst49*gconst50*r11);
IkReal x13604=(gconst49*gconst50*r10);
CheckValue<IkReal> x13605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13599))+((cj9*r01*x13604))+(((-1.0)*r01*x13599*x13601))+((cj9*r00*x13603))+(((-1.0)*r00*x13599*x13602)))),-1);
if(!x13605.valid){
continue;
}
CheckValue<IkReal> x13606 = IKatan2WithCheck(IkReal((((gconst50*r12*x13600))+((gconst49*r12*x13598)))),IkReal((((x13600*x13603))+((x13598*x13601))+(((-1.0)*x13598*x13604))+(((-1.0)*x13600*x13602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13606.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13605.value)))+(x13606.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13607=IKsin(j10);
IkReal x13608=IKcos(j10);
IkReal x13609=(gconst50*sj9);
IkReal x13610=(cj9*gconst49);
IkReal x13611=(sj7*sj8);
IkReal x13612=((1.0)*cj7);
IkReal x13613=((1.0)*r12);
IkReal x13614=(cj9*gconst50);
IkReal x13615=(gconst49*sj9);
IkReal x13616=((1.0)*cj8*sj7);
IkReal x13617=(sj8*x13612);
IkReal x13618=(r00*x13608);
IkReal x13619=(r10*x13608);
IkReal x13620=(sj9*x13607);
IkReal x13621=((1.0)*x13608);
IkReal x13622=(cj9*x13607);
IkReal x13623=(gconst49*x13607);
IkReal x13624=((1.0)*gconst50*x13607);
IkReal x13625=(x13616+x13617);
evalcond[0]=(((r21*x13623))+(((-1.0)*r22*x13621))+(((-1.0)*r20*x13624)));
evalcond[1]=((((-1.0)*x13608*x13613))+((r11*x13623))+(((-1.0)*r10*x13624)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x13624))+((r01*x13623))+(((-1.0)*r02*x13621)));
evalcond[3]=(((r00*x13615))+((r01*x13608*x13610))+((r02*x13622))+(((-1.0)*x13614*x13618))+((r01*x13609)));
evalcond[4]=(((x13609*x13618))+(((-1.0)*r01*x13615*x13621))+((r01*x13614))+((r00*x13610))+(((-1.0)*r02*x13620)));
evalcond[5]=(x13611+((r20*x13615))+((r21*x13608*x13610))+((r22*x13622))+((r21*x13609))+(((-1.0)*r20*x13614*x13621))+(((-1.0)*cj8*x13612)));
evalcond[6]=(((x13609*x13619))+(((-1.0)*r11*x13615*x13621))+(((-1.0)*x13613*x13620))+((cj7*cj8))+(((-1.0)*x13611))+((r11*x13614))+((r10*x13610)));
evalcond[7]=(((r11*x13609))+((r12*x13622))+((r10*x13615))+(((-1.0)*x13625))+(((-1.0)*x13614*x13619))+((r11*x13608*x13610)));
evalcond[8]=(((r21*x13614))+((r20*x13610))+((r20*x13608*x13609))+(((-1.0)*r21*x13615*x13621))+(((-1.0)*x13625))+(((-1.0)*r22*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13626=gconst49*gconst49;
IkReal x13627=gconst50*gconst50;
IkReal x13628=(r01*sj9);
IkReal x13629=(cj9*r01);
IkReal x13630=(r00*sj9);
IkReal x13631=(cj9*gconst49*r00);
IkReal x13632=((1.0)*gconst50*r10);
IkReal x13633=(r10*x13627);
IkReal x13634=(r11*x13626);
IkReal x13635=(gconst49*gconst50*r11);
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign((((r02*r12*sj9))+(((-1.0)*gconst49*x13628*x13632))+((x13628*x13634))+((x13630*x13633))+(((-1.0)*x13630*x13635)))),-1);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal((((r12*x13631))+((gconst50*r12*x13629)))),IkReal(((((-1.0)*x13629*x13633))+(((-1.0)*x13631*x13632))+((cj9*r00*x13634))+((x13629*x13635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13636.value)))+(x13637.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13638=IKsin(j10);
IkReal x13639=IKcos(j10);
IkReal x13640=(gconst50*sj9);
IkReal x13641=(cj9*gconst49);
IkReal x13642=(sj7*sj8);
IkReal x13643=((1.0)*cj7);
IkReal x13644=((1.0)*r12);
IkReal x13645=(cj9*gconst50);
IkReal x13646=(gconst49*sj9);
IkReal x13647=((1.0)*cj8*sj7);
IkReal x13648=(sj8*x13643);
IkReal x13649=(r00*x13639);
IkReal x13650=(r10*x13639);
IkReal x13651=(sj9*x13638);
IkReal x13652=((1.0)*x13639);
IkReal x13653=(cj9*x13638);
IkReal x13654=(gconst49*x13638);
IkReal x13655=((1.0)*gconst50*x13638);
IkReal x13656=(x13647+x13648);
evalcond[0]=((((-1.0)*r20*x13655))+(((-1.0)*r22*x13652))+((r21*x13654)));
evalcond[1]=((((-1.0)*x13639*x13644))+(((-1.0)*r10*x13655))+((r11*x13654)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x13655))+((r01*x13654))+(((-1.0)*r02*x13652)));
evalcond[3]=((((-1.0)*x13645*x13649))+((r00*x13646))+((r02*x13653))+((r01*x13640))+((r01*x13639*x13641)));
evalcond[4]=(((r00*x13641))+((r01*x13645))+(((-1.0)*r02*x13651))+(((-1.0)*r01*x13646*x13652))+((x13640*x13649)));
evalcond[5]=(((r21*x13639*x13641))+(((-1.0)*r20*x13645*x13652))+x13642+((r20*x13646))+((r22*x13653))+(((-1.0)*cj8*x13643))+((r21*x13640)));
evalcond[6]=((((-1.0)*x13644*x13651))+((r11*x13645))+((x13640*x13650))+((cj7*cj8))+(((-1.0)*x13642))+((r10*x13641))+(((-1.0)*r11*x13646*x13652)));
evalcond[7]=(((r12*x13653))+((r11*x13640))+((r10*x13646))+(((-1.0)*x13645*x13650))+(((-1.0)*x13656))+((r11*x13639*x13641)));
evalcond[8]=(((r20*x13639*x13640))+(((-1.0)*r21*x13646*x13652))+((r20*x13641))+(((-1.0)*r22*x13651))+((r21*x13645))+(((-1.0)*x13656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13657=((1.0)*gconst50);
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13657))+((gconst49*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
CheckValue<IkReal> x13659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x13657)))),-1);
if(!x13659.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13658.value)+(((1.5707963267949)*(x13659.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13660=IKsin(j10);
IkReal x13661=IKcos(j10);
IkReal x13662=(gconst50*sj9);
IkReal x13663=(cj9*gconst49);
IkReal x13664=(sj7*sj8);
IkReal x13665=((1.0)*cj7);
IkReal x13666=((1.0)*r12);
IkReal x13667=(cj9*gconst50);
IkReal x13668=(gconst49*sj9);
IkReal x13669=((1.0)*cj8*sj7);
IkReal x13670=(sj8*x13665);
IkReal x13671=(r00*x13661);
IkReal x13672=(r10*x13661);
IkReal x13673=(sj9*x13660);
IkReal x13674=((1.0)*x13661);
IkReal x13675=(cj9*x13660);
IkReal x13676=(gconst49*x13660);
IkReal x13677=((1.0)*gconst50*x13660);
IkReal x13678=(x13669+x13670);
evalcond[0]=((((-1.0)*r20*x13677))+((r21*x13676))+(((-1.0)*r22*x13674)));
evalcond[1]=(((r11*x13676))+(((-1.0)*x13661*x13666))+(((-1.0)*r10*x13677)));
evalcond[2]=((-1.0)+((r01*x13676))+(((-1.0)*r00*x13677))+(((-1.0)*r02*x13674)));
evalcond[3]=(((r02*x13675))+((r00*x13668))+((r01*x13662))+((r01*x13661*x13663))+(((-1.0)*x13667*x13671)));
evalcond[4]=(((r00*x13663))+((r01*x13667))+(((-1.0)*r02*x13673))+(((-1.0)*r01*x13668*x13674))+((x13662*x13671)));
evalcond[5]=((((-1.0)*cj8*x13665))+((r21*x13661*x13663))+x13664+((r22*x13675))+(((-1.0)*r20*x13667*x13674))+((r20*x13668))+((r21*x13662)));
evalcond[6]=((((-1.0)*r11*x13668*x13674))+((r11*x13667))+((cj7*cj8))+(((-1.0)*x13666*x13673))+(((-1.0)*x13664))+((r10*x13663))+((x13662*x13672)));
evalcond[7]=(((r12*x13675))+((r11*x13661*x13663))+(((-1.0)*x13678))+((r11*x13662))+((r10*x13668))+(((-1.0)*x13667*x13672)));
evalcond[8]=(((r20*x13661*x13662))+(((-1.0)*r21*x13668*x13674))+(((-1.0)*r22*x13673))+(((-1.0)*x13678))+((r20*x13663))+((r21*x13667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13680 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13680)==0){
continue;
}
IkReal x13679=pow(x13680,-0.5);
CheckValue<IkReal> x13681 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13681.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x13681.value))));
IkReal gconst52=((1.0)*r21*x13679);
IkReal gconst53=((-1.0)*r20*x13679);
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x13682.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x13685 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13685.valid){
continue;
}
IkReal x13683=((1.0)*(x13685.value));
IkReal x13684=x13679;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj11=gconst52;
cj11=gconst53;
j11=((3.14159265)+(((-1.0)*x13683)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x13683)));
IkReal gconst52=((1.0)*r21*x13684);
IkReal gconst53=((-1.0)*r20*x13684);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
CheckValue<IkReal> x13688 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13688.valid){
continue;
}
IkReal x13686=((1.0)*(x13688.value));
IkReal x13687=x13679;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj11=gconst52;
cj11=gconst53;
j11=((3.14159265)+(((-1.0)*x13686)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x13686)));
IkReal gconst52=((1.0)*r21*x13687);
IkReal gconst53=((-1.0)*r20*x13687);
j10eval[0]=cj9;
j10eval[1]=r12;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
CheckValue<IkReal> x13691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13691.valid){
continue;
}
IkReal x13689=((1.0)*(x13691.value));
IkReal x13690=x13679;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj11=gconst52;
cj11=gconst53;
j11=((3.14159265)+(((-1.0)*x13689)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x13689)));
IkReal gconst52=((1.0)*r21*x13690);
IkReal gconst53=((-1.0)*r20*x13690);
j10eval[0]=r12;
j10eval[1]=sj9;
j10eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13692=gconst52*gconst52;
IkReal x13693=gconst53*gconst53;
IkReal x13694=((1.0)*cj9);
IkReal x13695=(r00*sj9);
IkReal x13696=(gconst52*gconst53);
IkReal x13697=(r01*sj9);
IkReal x13698=(r21*x13692);
IkReal x13699=(r20*x13693);
CheckValue<IkReal> x13700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x13694))+(((-1.0)*r01*x13694*x13698))+((cj9*r01*r20*x13696))+((cj9*r00*r21*x13696))+(((-1.0)*r00*x13694*x13699)))),-1);
if(!x13700.valid){
continue;
}
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal((((gconst53*r22*x13697))+((gconst52*r22*x13695)))),IkReal((((x13695*x13698))+((r21*x13696*x13697))+(((-1.0)*x13697*x13699))+(((-1.0)*r20*x13695*x13696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13700.value)))+(x13701.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13702=IKsin(j10);
IkReal x13703=IKcos(j10);
IkReal x13704=(cj9*gconst53);
IkReal x13705=(sj7*sj8);
IkReal x13706=((1.0)*cj7);
IkReal x13707=(gconst53*r10);
IkReal x13708=(gconst53*sj9);
IkReal x13709=(gconst52*sj9);
IkReal x13710=(cj9*gconst52);
IkReal x13711=((1.0)*cj8*sj7);
IkReal x13712=(sj8*x13706);
IkReal x13713=((1.0)*x13703);
IkReal x13714=((1.0)*x13702);
IkReal x13715=(cj9*x13702);
IkReal x13716=(gconst52*x13702);
IkReal x13717=(x13712+x13711);
evalcond[0]=(((r21*x13716))+(((-1.0)*r22*x13713))+(((-1.0)*gconst53*r20*x13714)));
evalcond[1]=((((-1.0)*r12*x13713))+(((-1.0)*x13707*x13714))+((r11*x13716)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x13714))+((r01*x13716))+(((-1.0)*r02*x13713)));
evalcond[3]=((((-1.0)*r00*x13704*x13713))+((r00*x13709))+((r01*x13703*x13710))+((r01*x13708))+((r02*x13715)));
evalcond[4]=((((-1.0)*r01*x13709*x13713))+((r00*x13703*x13708))+((r00*x13710))+((r01*x13704))+(((-1.0)*r02*sj9*x13714)));
evalcond[5]=((((-1.0)*cj8*x13706))+((r21*x13708))+((r20*x13709))+x13705+(((-1.0)*r20*x13704*x13713))+((r22*x13715))+((r21*x13703*x13710)));
evalcond[6]=((((-1.0)*x13705))+(((-1.0)*r12*sj9*x13714))+((cj7*cj8))+((sj9*x13703*x13707))+((r10*x13710))+((r11*x13704))+(((-1.0)*r11*x13709*x13713)));
evalcond[7]=(((r12*x13715))+((r11*x13703*x13710))+(((-1.0)*r10*x13704*x13713))+((r10*x13709))+((r11*x13708))+(((-1.0)*x13717)));
evalcond[8]=(((r21*x13704))+((r20*x13703*x13708))+((r20*x13710))+(((-1.0)*r22*sj9*x13714))+(((-1.0)*r21*x13709*x13713))+(((-1.0)*x13717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13718=gconst52*gconst52;
IkReal x13719=gconst53*gconst53;
IkReal x13720=((1.0)*r00);
IkReal x13721=(r01*r21);
IkReal x13722=(cj9*r00);
IkReal x13723=(cj9*gconst52*gconst53);
IkReal x13724=(gconst52*gconst53*sj9);
IkReal x13725=((1.0)*r01*r20);
CheckValue<IkReal> x13726 = IKatan2WithCheck(IkReal((((cj9*gconst53*r01*r22))+((gconst52*r22*x13722)))),IkReal((((r21*x13718*x13722))+((x13721*x13723))+(((-1.0)*r20*x13720*x13723))+(((-1.0)*cj9*x13719*x13725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13726.valid){
continue;
}
CheckValue<IkReal> x13727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13724*x13725))+(((-1.0)*r21*x13720*x13724))+((r00*r20*sj9*x13719))+((sj9*x13718*x13721))+((r02*r22*sj9)))),-1);
if(!x13727.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13726.value)+(((1.5707963267949)*(x13727.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13728=IKsin(j10);
IkReal x13729=IKcos(j10);
IkReal x13730=(cj9*gconst53);
IkReal x13731=(sj7*sj8);
IkReal x13732=((1.0)*cj7);
IkReal x13733=(gconst53*r10);
IkReal x13734=(gconst53*sj9);
IkReal x13735=(gconst52*sj9);
IkReal x13736=(cj9*gconst52);
IkReal x13737=((1.0)*cj8*sj7);
IkReal x13738=(sj8*x13732);
IkReal x13739=((1.0)*x13729);
IkReal x13740=((1.0)*x13728);
IkReal x13741=(cj9*x13728);
IkReal x13742=(gconst52*x13728);
IkReal x13743=(x13737+x13738);
evalcond[0]=((((-1.0)*r22*x13739))+((r21*x13742))+(((-1.0)*gconst53*r20*x13740)));
evalcond[1]=((((-1.0)*r12*x13739))+(((-1.0)*x13733*x13740))+((r11*x13742)));
evalcond[2]=((-1.0)+((r01*x13742))+(((-1.0)*r02*x13739))+(((-1.0)*gconst53*r00*x13740)));
evalcond[3]=(((r00*x13735))+(((-1.0)*r00*x13730*x13739))+((r02*x13741))+((r01*x13734))+((r01*x13729*x13736)));
evalcond[4]=(((r00*x13736))+(((-1.0)*r01*x13735*x13739))+((r00*x13729*x13734))+((r01*x13730))+(((-1.0)*r02*sj9*x13740)));
evalcond[5]=(x13731+((r21*x13734))+((r20*x13735))+((r22*x13741))+(((-1.0)*r20*x13730*x13739))+((r21*x13729*x13736))+(((-1.0)*cj8*x13732)));
evalcond[6]=(((r10*x13736))+((r11*x13730))+(((-1.0)*r12*sj9*x13740))+((cj7*cj8))+((sj9*x13729*x13733))+(((-1.0)*r11*x13735*x13739))+(((-1.0)*x13731)));
evalcond[7]=(((r10*x13735))+(((-1.0)*r10*x13730*x13739))+((r11*x13729*x13736))+((r11*x13734))+(((-1.0)*x13743))+((r12*x13741)));
evalcond[8]=((((-1.0)*r22*sj9*x13740))+(((-1.0)*r21*x13735*x13739))+((r21*x13730))+((r20*x13736))+((r20*x13729*x13734))+(((-1.0)*x13743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13744=((1.0)*gconst53);
CheckValue<IkReal> x13745 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13744))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13745.valid){
continue;
}
CheckValue<IkReal> x13746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13744))+(((-1.0)*gconst52*r10)))),-1);
if(!x13746.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13745.value)+(((1.5707963267949)*(x13746.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13747=IKsin(j10);
IkReal x13748=IKcos(j10);
IkReal x13749=(cj9*gconst53);
IkReal x13750=(sj7*sj8);
IkReal x13751=((1.0)*cj7);
IkReal x13752=(gconst53*r10);
IkReal x13753=(gconst53*sj9);
IkReal x13754=(gconst52*sj9);
IkReal x13755=(cj9*gconst52);
IkReal x13756=((1.0)*cj8*sj7);
IkReal x13757=(sj8*x13751);
IkReal x13758=((1.0)*x13748);
IkReal x13759=((1.0)*x13747);
IkReal x13760=(cj9*x13747);
IkReal x13761=(gconst52*x13747);
IkReal x13762=(x13757+x13756);
evalcond[0]=((((-1.0)*r22*x13758))+(((-1.0)*gconst53*r20*x13759))+((r21*x13761)));
evalcond[1]=(((r11*x13761))+(((-1.0)*x13752*x13759))+(((-1.0)*r12*x13758)));
evalcond[2]=((-1.0)+((r01*x13761))+(((-1.0)*gconst53*r00*x13759))+(((-1.0)*r02*x13758)));
evalcond[3]=((((-1.0)*r00*x13749*x13758))+((r01*x13748*x13755))+((r00*x13754))+((r01*x13753))+((r02*x13760)));
evalcond[4]=(((r01*x13749))+((r00*x13748*x13753))+(((-1.0)*r02*sj9*x13759))+(((-1.0)*r01*x13754*x13758))+((r00*x13755)));
evalcond[5]=(((r21*x13753))+(((-1.0)*r20*x13749*x13758))+x13750+((r21*x13748*x13755))+((r20*x13754))+(((-1.0)*cj8*x13751))+((r22*x13760)));
evalcond[6]=((((-1.0)*x13750))+(((-1.0)*r11*x13754*x13758))+((cj7*cj8))+((r10*x13755))+(((-1.0)*r12*sj9*x13759))+((sj9*x13748*x13752))+((r11*x13749)));
evalcond[7]=(((r11*x13753))+(((-1.0)*r10*x13749*x13758))+((r11*x13748*x13755))+((r10*x13754))+((r12*x13760))+(((-1.0)*x13762)));
evalcond[8]=((((-1.0)*r22*sj9*x13759))+((r20*x13748*x13753))+(((-1.0)*r21*x13754*x13758))+((r21*x13749))+((r20*x13755))+(((-1.0)*x13762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x13763=((-1.0)*pz);
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13763);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13763);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13764=(r01*sj11);
IkReal x13765=(cj11*r00);
j10eval[0]=((((-1.0)*x13765))+x13764);
j10eval[1]=(((sj9*x13765))+(((-1.0)*sj9*x13764)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x13766=((-1.0)*pz);
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13766);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13766);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13767=(r01*sj11);
IkReal x13768=((1.0)*cj11*r00);
j10eval[0]=(x13767+(((-1.0)*x13768)));
j10eval[1]=((((-1.0)*cj9*x13768))+((cj9*x13767)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x13769=((-1.0)*pz);
sj6=1.0;
cj6=0;
j6=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13769);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13769);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j10eval[0]=cj9;
j10eval[1]=r22;
j10eval[2]=(((cj11*r00*sj9))+(((-1.0)*r01*sj11*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13770=((1.0)*r01);
CheckValue<IkReal> x13771=IKPowWithIntegerCheck(cj9,-1);
if(!x13771.valid){
continue;
}
CheckValue<IkReal> x13772=IKPowWithIntegerCheck(r22,-1);
if(!x13772.valid){
continue;
}
CheckValue<IkReal> x13773=IKPowWithIntegerCheck((((cj11*r00*sj9))+(((-1.0)*sj11*sj9*x13770))),-1);
if(!x13773.valid){
continue;
}
if( IKabs(((x13771.value)*(x13772.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13773.value)*(((((-1.0)*cj11*cj9*x13770))+(((-1.0)*cj9*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13771.value)*(x13772.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))))+IKsqr(((x13773.value)*(((((-1.0)*cj11*cj9*x13770))+(((-1.0)*cj9*r00*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x13771.value)*(x13772.value)*((((cj7*cj8))+(((-1.0)*sj7*sj8))))), ((x13773.value)*(((((-1.0)*cj11*cj9*x13770))+(((-1.0)*cj9*r00*sj11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13774=IKsin(j10);
IkReal x13775=IKcos(j10);
IkReal x13776=(r11*sj11);
IkReal x13777=(sj7*sj8);
IkReal x13778=((1.0)*cj7);
IkReal x13779=(cj9*sj11);
IkReal x13780=(cj11*r00);
IkReal x13781=(sj11*sj9);
IkReal x13782=(cj11*cj9);
IkReal x13783=(cj11*sj9);
IkReal x13784=(cj11*r10);
IkReal x13785=(r01*sj11);
IkReal x13786=((1.0)*cj8*sj7);
IkReal x13787=(sj8*x13778);
IkReal x13788=(sj9*x13775);
IkReal x13789=((1.0)*x13774);
IkReal x13790=((1.0)*x13775);
IkReal x13791=(x13786+x13787);
evalcond[0]=((-1.0)*r22*x13775);
evalcond[1]=((((-1.0)*x13784*x13789))+((x13774*x13776)));
evalcond[2]=(x13777+(((-1.0)*cj8*x13778))+((cj9*r22*x13774)));
evalcond[3]=((-1.0)+((x13774*x13785))+(((-1.0)*x13780*x13789)));
evalcond[4]=((((-1.0)*x13791))+(((-1.0)*r22*sj9*x13789)));
evalcond[5]=(((r01*x13782))+((r00*x13779))+((x13780*x13788))+(((-1.0)*r01*x13781*x13790)));
evalcond[6]=(((r01*x13783))+((r00*x13781))+(((-1.0)*cj9*x13780*x13790))+((r01*x13775*x13779)));
evalcond[7]=((((-1.0)*x13777))+((r10*x13779))+((cj7*cj8))+(((-1.0)*x13776*x13788))+((r10*x13775*x13783))+((r11*x13782)));
evalcond[8]=((((-1.0)*x13791))+((cj9*x13775*x13776))+((r11*x13783))+((r10*x13781))+(((-1.0)*r10*x13782*x13790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13792=((1.0)*r00);
IkReal x13793=(r01*sj11);
CheckValue<IkReal> x13794=IKPowWithIntegerCheck((x13793+(((-1.0)*cj11*x13792))),-1);
if(!x13794.valid){
continue;
}
CheckValue<IkReal> x13795=IKPowWithIntegerCheck(((((-1.0)*cj11*cj9*x13792))+((cj9*x13793))),-1);
if(!x13795.valid){
continue;
}
if( IKabs(x13794.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13795.value)*(((((-1.0)*sj11*sj9*x13792))+(((-1.0)*cj11*r01*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13794.value)+IKsqr(((x13795.value)*(((((-1.0)*sj11*sj9*x13792))+(((-1.0)*cj11*r01*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x13794.value, ((x13795.value)*(((((-1.0)*sj11*sj9*x13792))+(((-1.0)*cj11*r01*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13796=IKsin(j10);
IkReal x13797=IKcos(j10);
IkReal x13798=(r11*sj11);
IkReal x13799=(sj7*sj8);
IkReal x13800=((1.0)*cj7);
IkReal x13801=(cj9*sj11);
IkReal x13802=(cj11*r00);
IkReal x13803=(sj11*sj9);
IkReal x13804=(cj11*cj9);
IkReal x13805=(cj11*sj9);
IkReal x13806=(cj11*r10);
IkReal x13807=(r01*sj11);
IkReal x13808=((1.0)*cj8*sj7);
IkReal x13809=(sj8*x13800);
IkReal x13810=(sj9*x13797);
IkReal x13811=((1.0)*x13796);
IkReal x13812=((1.0)*x13797);
IkReal x13813=(x13809+x13808);
evalcond[0]=((-1.0)*r22*x13797);
evalcond[1]=(((x13796*x13798))+(((-1.0)*x13806*x13811)));
evalcond[2]=(x13799+(((-1.0)*cj8*x13800))+((cj9*r22*x13796)));
evalcond[3]=((-1.0)+((x13796*x13807))+(((-1.0)*x13802*x13811)));
evalcond[4]=((((-1.0)*x13813))+(((-1.0)*r22*sj9*x13811)));
evalcond[5]=(((r01*x13804))+((r00*x13801))+((x13802*x13810))+(((-1.0)*r01*x13803*x13812)));
evalcond[6]=(((r01*x13805))+((r00*x13803))+((r01*x13797*x13801))+(((-1.0)*cj9*x13802*x13812)));
evalcond[7]=(((r11*x13804))+(((-1.0)*x13798*x13810))+((cj7*cj8))+((r10*x13797*x13805))+(((-1.0)*x13799))+((r10*x13801)));
evalcond[8]=((((-1.0)*x13813))+((r11*x13805))+((cj9*x13797*x13798))+(((-1.0)*r10*x13804*x13812))+((r10*x13803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13814=((1.0)*cj11);
IkReal x13815=(r01*sj11);
CheckValue<IkReal> x13816=IKPowWithIntegerCheck((x13815+(((-1.0)*r00*x13814))),-1);
if(!x13816.valid){
continue;
}
CheckValue<IkReal> x13817=IKPowWithIntegerCheck((((cj11*r00*sj9))+(((-1.0)*sj9*x13815))),-1);
if(!x13817.valid){
continue;
}
if( IKabs(x13816.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13817.value)*(((((-1.0)*cj9*r01*x13814))+(((-1.0)*cj9*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13816.value)+IKsqr(((x13817.value)*(((((-1.0)*cj9*r01*x13814))+(((-1.0)*cj9*r00*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(x13816.value, ((x13817.value)*(((((-1.0)*cj9*r01*x13814))+(((-1.0)*cj9*r00*sj11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13818=IKsin(j10);
IkReal x13819=IKcos(j10);
IkReal x13820=(r11*sj11);
IkReal x13821=(sj7*sj8);
IkReal x13822=((1.0)*cj7);
IkReal x13823=(cj9*sj11);
IkReal x13824=(cj11*r00);
IkReal x13825=(sj11*sj9);
IkReal x13826=(cj11*cj9);
IkReal x13827=(cj11*sj9);
IkReal x13828=(cj11*r10);
IkReal x13829=(r01*sj11);
IkReal x13830=((1.0)*cj8*sj7);
IkReal x13831=(sj8*x13822);
IkReal x13832=(sj9*x13819);
IkReal x13833=((1.0)*x13818);
IkReal x13834=((1.0)*x13819);
IkReal x13835=(x13830+x13831);
evalcond[0]=((-1.0)*r22*x13819);
evalcond[1]=(((x13818*x13820))+(((-1.0)*x13828*x13833)));
evalcond[2]=(((cj9*r22*x13818))+x13821+(((-1.0)*cj8*x13822)));
evalcond[3]=((-1.0)+(((-1.0)*x13824*x13833))+((x13818*x13829)));
evalcond[4]=((((-1.0)*x13835))+(((-1.0)*r22*sj9*x13833)));
evalcond[5]=(((r01*x13826))+(((-1.0)*r01*x13825*x13834))+((r00*x13823))+((x13824*x13832)));
evalcond[6]=(((r01*x13827))+((r00*x13825))+((r01*x13819*x13823))+(((-1.0)*cj9*x13824*x13834)));
evalcond[7]=(((r10*x13819*x13827))+((r10*x13823))+((r11*x13826))+(((-1.0)*x13821))+((cj7*cj8))+(((-1.0)*x13820*x13832)));
evalcond[8]=((((-1.0)*x13835))+((r10*x13825))+((r11*x13827))+((cj9*x13819*x13820))+(((-1.0)*r10*x13826*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13836=cj11*cj11;
IkReal x13837=((1.0)*sj9);
IkReal x13838=(cj9*r21);
IkReal x13839=(sj11*sj9);
IkReal x13840=(cj11*r01);
IkReal x13841=((1.0)*cj9);
IkReal x13842=(cj11*r00*sj11);
IkReal x13843=(r00*x13836);
IkReal x13844=(r01*x13836);
CheckValue<IkReal> x13845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13838))+(((-1.0)*r20*x13841*x13843))+(((-1.0)*r02*r22*x13841))+((x13838*x13844))+((x13838*x13842))+((cj9*r20*sj11*x13840)))),-1);
if(!x13845.valid){
continue;
}
CheckValue<IkReal> x13846 = IKatan2WithCheck(IkReal((((r22*sj9*x13840))+((r00*r22*x13839)))),IkReal(((((-1.0)*r21*x13837*x13843))+((r21*x13839*x13840))+(((-1.0)*r20*x13837*x13842))+(((-1.0)*r20*x13837*x13844))+((r00*r21*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13846.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13845.value)))+(x13846.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13847=IKsin(j10);
IkReal x13848=IKcos(j10);
IkReal x13849=((1.0)*sj9);
IkReal x13850=((1.0)*cj8);
IkReal x13851=(r20*sj11);
IkReal x13852=(sj7*sj8);
IkReal x13853=(cj11*sj9);
IkReal x13854=(cj9*r01);
IkReal x13855=(cj11*cj9);
IkReal x13856=(r10*sj11);
IkReal x13857=(r00*sj11);
IkReal x13858=(sj7*x13850);
IkReal x13859=((1.0)*cj7*sj8);
IkReal x13860=(sj11*x13848);
IkReal x13861=(sj11*x13847);
IkReal x13862=(r02*x13847);
IkReal x13863=(r12*x13847);
IkReal x13864=((1.0)*x13848);
IkReal x13865=(r22*x13847);
IkReal x13866=((1.0)*cj11*x13847);
IkReal x13867=(x13858+x13859);
evalcond[0]=((((-1.0)*r22*x13864))+((r21*x13861))+(((-1.0)*r20*x13866)));
evalcond[1]=((((-1.0)*r12*x13864))+((r11*x13861))+(((-1.0)*r10*x13866)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x13866))+((r01*x13861))+(((-1.0)*r02*x13864)));
evalcond[3]=(((r01*x13853))+(((-1.0)*r00*x13855*x13864))+((x13854*x13860))+((cj9*x13862))+((sj9*x13857)));
evalcond[4]=((((-1.0)*r01*x13849*x13860))+((r00*x13848*x13853))+((cj11*x13854))+((cj9*x13857))+(((-1.0)*x13849*x13862)));
evalcond[5]=(x13852+((cj9*r21*x13860))+((r21*x13853))+(((-1.0)*r20*x13855*x13864))+((cj9*x13865))+((sj9*x13851))+(((-1.0)*cj7*x13850)));
evalcond[6]=(((r10*x13848*x13853))+(((-1.0)*x13852))+((r11*x13855))+((cj7*cj8))+((cj9*x13856))+(((-1.0)*x13849*x13863))+(((-1.0)*r11*x13849*x13860)));
evalcond[7]=(((r11*x13853))+((cj9*x13863))+((sj9*x13856))+((cj9*r11*x13860))+(((-1.0)*x13867))+(((-1.0)*r10*x13855*x13864)));
evalcond[8]=(((r20*x13848*x13853))+(((-1.0)*r21*x13849*x13860))+((r21*x13855))+((cj9*x13851))+(((-1.0)*x13867))+(((-1.0)*x13849*x13865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13868=((1.0)*cj11);
CheckValue<IkReal> x13869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13868))+(((-1.0)*r10*sj11)))),-1);
if(!x13869.valid){
continue;
}
CheckValue<IkReal> x13870 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj11))+(((-1.0)*r20*x13868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13870.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13869.value)))+(x13870.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13871=IKsin(j10);
IkReal x13872=IKcos(j10);
IkReal x13873=((1.0)*sj9);
IkReal x13874=((1.0)*cj8);
IkReal x13875=(r20*sj11);
IkReal x13876=(sj7*sj8);
IkReal x13877=(cj11*sj9);
IkReal x13878=(cj9*r01);
IkReal x13879=(cj11*cj9);
IkReal x13880=(r10*sj11);
IkReal x13881=(r00*sj11);
IkReal x13882=(sj7*x13874);
IkReal x13883=((1.0)*cj7*sj8);
IkReal x13884=(sj11*x13872);
IkReal x13885=(sj11*x13871);
IkReal x13886=(r02*x13871);
IkReal x13887=(r12*x13871);
IkReal x13888=((1.0)*x13872);
IkReal x13889=(r22*x13871);
IkReal x13890=((1.0)*cj11*x13871);
IkReal x13891=(x13883+x13882);
evalcond[0]=((((-1.0)*r20*x13890))+((r21*x13885))+(((-1.0)*r22*x13888)));
evalcond[1]=((((-1.0)*r10*x13890))+((r11*x13885))+(((-1.0)*r12*x13888)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13888))+(((-1.0)*r00*x13890))+((r01*x13885)));
evalcond[3]=(((x13878*x13884))+((cj9*x13886))+((r01*x13877))+((sj9*x13881))+(((-1.0)*r00*x13879*x13888)));
evalcond[4]=((((-1.0)*x13873*x13886))+((r00*x13872*x13877))+((cj9*x13881))+(((-1.0)*r01*x13873*x13884))+((cj11*x13878)));
evalcond[5]=(x13876+((sj9*x13875))+(((-1.0)*r20*x13879*x13888))+((r21*x13877))+((cj9*x13889))+(((-1.0)*cj7*x13874))+((cj9*r21*x13884)));
evalcond[6]=((((-1.0)*x13873*x13887))+(((-1.0)*x13876))+((r10*x13872*x13877))+((cj9*x13880))+((r11*x13879))+((cj7*cj8))+(((-1.0)*r11*x13873*x13884)));
evalcond[7]=(((cj9*x13887))+((r11*x13877))+((cj9*r11*x13884))+(((-1.0)*x13891))+(((-1.0)*r10*x13879*x13888))+((sj9*x13880)));
evalcond[8]=(((cj9*x13875))+(((-1.0)*x13873*x13889))+((r20*x13872*x13877))+((r21*x13879))+(((-1.0)*x13891))+(((-1.0)*r21*x13873*x13884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13892=IKPowWithIntegerCheck(IKsign((((r20*sj11))+((cj11*r21)))),-1);
if(!x13892.valid){
continue;
}
CheckValue<IkReal> x13893 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj11*r10))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13893.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13892.value)))+(x13893.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x13894=IKsin(j10);
IkReal x13895=IKcos(j10);
IkReal x13896=((1.0)*sj9);
IkReal x13897=((1.0)*cj8);
IkReal x13898=(r20*sj11);
IkReal x13899=(sj7*sj8);
IkReal x13900=(cj11*sj9);
IkReal x13901=(cj9*r01);
IkReal x13902=(cj11*cj9);
IkReal x13903=(r10*sj11);
IkReal x13904=(r00*sj11);
IkReal x13905=(sj7*x13897);
IkReal x13906=((1.0)*cj7*sj8);
IkReal x13907=(sj11*x13895);
IkReal x13908=(sj11*x13894);
IkReal x13909=(r02*x13894);
IkReal x13910=(r12*x13894);
IkReal x13911=((1.0)*x13895);
IkReal x13912=(r22*x13894);
IkReal x13913=((1.0)*cj11*x13894);
IkReal x13914=(x13906+x13905);
evalcond[0]=((((-1.0)*r22*x13911))+((r21*x13908))+(((-1.0)*r20*x13913)));
evalcond[1]=((((-1.0)*r10*x13913))+(((-1.0)*r12*x13911))+((r11*x13908)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x13913))+((r01*x13908))+(((-1.0)*r02*x13911)));
evalcond[3]=(((sj9*x13904))+(((-1.0)*r00*x13902*x13911))+((r01*x13900))+((x13901*x13907))+((cj9*x13909)));
evalcond[4]=((((-1.0)*r01*x13896*x13907))+((r00*x13895*x13900))+(((-1.0)*x13896*x13909))+((cj9*x13904))+((cj11*x13901)));
evalcond[5]=(((cj9*r21*x13907))+x13899+(((-1.0)*r20*x13902*x13911))+(((-1.0)*cj7*x13897))+((r21*x13900))+((cj9*x13912))+((sj9*x13898)));
evalcond[6]=(((cj7*cj8))+(((-1.0)*x13896*x13910))+(((-1.0)*r11*x13896*x13907))+((r11*x13902))+(((-1.0)*x13899))+((cj9*x13903))+((r10*x13895*x13900)));
evalcond[7]=(((sj9*x13903))+(((-1.0)*r10*x13902*x13911))+((r11*x13900))+((cj9*x13910))+(((-1.0)*x13914))+((cj9*r11*x13907)));
evalcond[8]=(((cj9*x13898))+(((-1.0)*x13896*x13912))+(((-1.0)*r21*x13896*x13907))+((r21*x13902))+((r20*x13895*x13900))+(((-1.0)*x13914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13915=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x13915;
j10eval[1]=IKsign(x13915);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13916=((1.0)*cj11);
IkReal x13917=((((-1.0)*r20*sj11))+(((-1.0)*r21*x13916)));
j10eval[0]=x13917;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13916))+((r11*sj11))))));
j10eval[2]=IKsign(x13917);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13918=cj11*cj11;
IkReal x13919=(cj9*r21);
IkReal x13920=(cj11*sj11);
IkReal x13921=((1.0)*cj9);
IkReal x13922=(((cj9*r01*r20*x13920))+((r01*x13918*x13919))+(((-1.0)*r02*r22*x13921))+(((-1.0)*r00*r20*x13918*x13921))+((r00*x13919*x13920))+(((-1.0)*r01*x13919)));
j10eval[0]=x13922;
j10eval[1]=IKsign(x13922);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13923=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x13923;
j10eval[1]=IKsign(x13923);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13924=((1.0)*cj11);
IkReal x13925=((((-1.0)*r20*sj11))+(((-1.0)*r21*x13924)));
j10eval[0]=x13925;
j10eval[1]=((IKabs(r12))+(IKabs((((r11*sj11))+(((-1.0)*r10*x13924))))));
j10eval[2]=IKsign(x13925);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x13926=cj11*cj11;
IkReal x13927=r01*r01;
IkReal x13928=(cj11*r00);
IkReal x13929=(r01*sj11);
IkReal x13930=((((-1.0)*x13926*x13927))+((x13926*(r00*r00)))+x13927+(((-2.0)*x13928*x13929))+(r02*r02));
j10eval[0]=x13930;
j10eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x13929))+x13928))));
j10eval[2]=IKsign(x13930);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13931=cj11*cj11;
IkReal x13932=r01*r01;
IkReal x13933=(r01*sj11);
IkReal x13934=(cj11*r00);
CheckValue<IkReal> x13935=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13933*x13934))+x13932+(((-1.0)*x13931*x13932))+(r02*r02)+((x13931*(r00*r00))))),-1);
if(!x13935.valid){
continue;
}
CheckValue<IkReal> x13936 = IKatan2WithCheck(IkReal((x13934+(((-1.0)*x13933)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13936.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13935.value)))+(x13936.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13937=IKsin(j10);
IkReal x13938=IKcos(j10);
IkReal x13939=((1.0)*cj7);
IkReal x13940=(cj11*r00);
IkReal x13941=(sj11*x13937);
IkReal x13942=((1.0)*x13938);
IkReal x13943=((1.0)*x13937);
IkReal x13944=(cj11*x13938);
evalcond[0]=((((-1.0)*r22*x13942))+(((-1.0)*cj11*r20*x13943))+((r21*x13941)));
evalcond[1]=((((-1.0)*cj11*r10*x13943))+(((-1.0)*r12*x13942))+((r11*x13941)));
evalcond[2]=((((-1.0)*r01*sj11*x13942))+(((-1.0)*r02*x13943))+((x13938*x13940)));
evalcond[3]=((1.0)+(((-1.0)*x13940*x13943))+((r01*x13941))+(((-1.0)*r02*x13942)));
evalcond[4]=((((-1.0)*r12*x13943))+(((-1.0)*cj8*x13939))+(((-1.0)*r11*sj11*x13942))+((sj7*sj8))+((r10*x13944)));
evalcond[5]=((((-1.0)*r21*sj11*x13942))+(((-1.0)*cj8*sj7))+((r20*x13944))+(((-1.0)*sj8*x13939))+(((-1.0)*r22*x13943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13945=((1.0)*cj11);
CheckValue<IkReal> x13946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13945))+(((-1.0)*r20*sj11)))),-1);
if(!x13946.valid){
continue;
}
CheckValue<IkReal> x13947 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x13945))+((r11*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13947.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13946.value)))+(x13947.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13948=IKsin(j10);
IkReal x13949=IKcos(j10);
IkReal x13950=((1.0)*cj7);
IkReal x13951=(cj11*r00);
IkReal x13952=(sj11*x13948);
IkReal x13953=((1.0)*x13949);
IkReal x13954=((1.0)*x13948);
IkReal x13955=(cj11*x13949);
evalcond[0]=(((r21*x13952))+(((-1.0)*r22*x13953))+(((-1.0)*cj11*r20*x13954)));
evalcond[1]=(((r11*x13952))+(((-1.0)*r12*x13953))+(((-1.0)*cj11*r10*x13954)));
evalcond[2]=((((-1.0)*r02*x13954))+(((-1.0)*r01*sj11*x13953))+((x13949*x13951)));
evalcond[3]=((1.0)+((r01*x13952))+(((-1.0)*r02*x13953))+(((-1.0)*x13951*x13954)));
evalcond[4]=((((-1.0)*r11*sj11*x13953))+(((-1.0)*cj8*x13950))+(((-1.0)*r12*x13954))+((sj7*sj8))+((r10*x13955)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x13950))+(((-1.0)*r21*sj11*x13953))+(((-1.0)*r22*x13954))+((r20*x13955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x13956 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13956.valid){
continue;
}
CheckValue<IkReal> x13957=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x13957.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13956.value)+(((1.5707963267949)*(x13957.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13958=IKsin(j10);
IkReal x13959=IKcos(j10);
IkReal x13960=((1.0)*cj7);
IkReal x13961=(cj11*r00);
IkReal x13962=(sj11*x13958);
IkReal x13963=((1.0)*x13959);
IkReal x13964=((1.0)*x13958);
IkReal x13965=(cj11*x13959);
evalcond[0]=((((-1.0)*r22*x13963))+(((-1.0)*cj11*r20*x13964))+((r21*x13962)));
evalcond[1]=((((-1.0)*cj11*r10*x13964))+(((-1.0)*r12*x13963))+((r11*x13962)));
evalcond[2]=((((-1.0)*r02*x13964))+((x13959*x13961))+(((-1.0)*r01*sj11*x13963)));
evalcond[3]=((1.0)+(((-1.0)*r02*x13963))+((r01*x13962))+(((-1.0)*x13961*x13964)));
evalcond[4]=(((r10*x13965))+(((-1.0)*r12*x13964))+(((-1.0)*r11*sj11*x13963))+((sj7*sj8))+(((-1.0)*cj8*x13960)));
evalcond[5]=((((-1.0)*r21*sj11*x13963))+(((-1.0)*cj8*sj7))+(((-1.0)*r22*x13964))+((r20*x13965))+(((-1.0)*sj8*x13960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13966=(((cj11*r11))+((r10*sj11)));
j10eval[0]=x13966;
j10eval[1]=IKsign(x13966);
j10eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj11*r20))+((r21*sj11))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13967=((1.0)*cj11);
IkReal x13968=((((-1.0)*r21*x13967))+(((-1.0)*r20*sj11)));
j10eval[0]=x13968;
j10eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13967))+((r11*sj11))))));
j10eval[2]=IKsign(x13968);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x13969=(sj7*sj8);
IkReal x13970=(cj7*cj8);
IkReal x13971=((1.0)*sj11);
IkReal x13972=((1.0)*cj11);
IkReal x13973=((((-1.0)*r20*x13971))+(((-1.0)*r21*x13972)));
j10eval[0]=x13973;
j10eval[1]=((IKabs(((((-1.0)*r00*x13969*x13972))+((cj11*r00*x13970))+(((-1.0)*r01*x13970*x13971))+((r01*sj11*x13969)))))+(IKabs((((r02*x13970))+(((-1.0)*r02*x13969))))));
j10eval[2]=IKsign(x13973);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13974=(sj7*sj8);
IkReal x13975=(cj7*cj8);
IkReal x13976=((1.0)*sj11);
IkReal x13977=((1.0)*cj11);
CheckValue<IkReal> x13978 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13975*x13976))+((cj11*r00*x13975))+((r01*sj11*x13974))+(((-1.0)*r00*x13974*x13977)))),IkReal(((((-1.0)*r02*x13974))+((r02*x13975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13978.valid){
continue;
}
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13976))+(((-1.0)*r21*x13977)))),-1);
if(!x13979.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13978.value)+(((1.5707963267949)*(x13979.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13980=IKcos(j10);
IkReal x13981=IKsin(j10);
IkReal x13982=(r11*sj11);
IkReal x13983=((1.0)*cj7);
IkReal x13984=(cj11*r00);
IkReal x13985=(cj11*r10);
IkReal x13986=(cj11*r20);
IkReal x13987=((1.0)*x13980);
IkReal x13988=(sj11*x13980);
IkReal x13989=((1.0)*x13981);
IkReal x13990=(sj11*x13981);
evalcond[0]=((((-1.0)*x13984*x13987))+((r01*x13988))+((r02*x13981)));
evalcond[1]=((((-1.0)*x13986*x13989))+((r21*x13990))+(((-1.0)*r22*x13987)));
evalcond[2]=((((-1.0)*x13985*x13989))+((x13981*x13982))+(((-1.0)*r12*x13987)));
evalcond[3]=((1.0)+(((-1.0)*x13984*x13989))+(((-1.0)*r02*x13987))+((r01*x13990)));
evalcond[4]=(((r12*x13981))+(((-1.0)*x13985*x13987))+((x13980*x13982))+(((-1.0)*cj8*x13983))+((sj7*sj8)));
evalcond[5]=((((-1.0)*cj8*sj7))+(((-1.0)*sj8*x13983))+((r21*x13988))+(((-1.0)*x13986*x13987))+((r22*x13981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13991=((1.0)*cj11);
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13991))+(((-1.0)*r20*sj11)))),-1);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x13991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13992.value)))+(x13993.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13994=IKcos(j10);
IkReal x13995=IKsin(j10);
IkReal x13996=(r11*sj11);
IkReal x13997=((1.0)*cj7);
IkReal x13998=(cj11*r00);
IkReal x13999=(cj11*r10);
IkReal x14000=(cj11*r20);
IkReal x14001=((1.0)*x13994);
IkReal x14002=(sj11*x13994);
IkReal x14003=((1.0)*x13995);
IkReal x14004=(sj11*x13995);
evalcond[0]=((((-1.0)*x13998*x14001))+((r02*x13995))+((r01*x14002)));
evalcond[1]=((((-1.0)*x14000*x14003))+((r21*x14004))+(((-1.0)*r22*x14001)));
evalcond[2]=(((x13995*x13996))+(((-1.0)*x13999*x14003))+(((-1.0)*r12*x14001)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14001))+(((-1.0)*x13998*x14003))+((r01*x14004)));
evalcond[4]=(((r12*x13995))+((x13994*x13996))+(((-1.0)*x13999*x14001))+((sj7*sj8))+(((-1.0)*cj8*x13997)));
evalcond[5]=((((-1.0)*x14000*x14001))+(((-1.0)*cj8*sj7))+((r21*x14002))+((r22*x13995))+(((-1.0)*sj8*x13997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
CheckValue<IkReal> x14006=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x14006.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14005.value)+(((1.5707963267949)*(x14006.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14007=IKcos(j10);
IkReal x14008=IKsin(j10);
IkReal x14009=(r11*sj11);
IkReal x14010=((1.0)*cj7);
IkReal x14011=(cj11*r00);
IkReal x14012=(cj11*r10);
IkReal x14013=(cj11*r20);
IkReal x14014=((1.0)*x14007);
IkReal x14015=(sj11*x14007);
IkReal x14016=((1.0)*x14008);
IkReal x14017=(sj11*x14008);
evalcond[0]=(((r02*x14008))+((r01*x14015))+(((-1.0)*x14011*x14014)));
evalcond[1]=(((r21*x14017))+(((-1.0)*x14013*x14016))+(((-1.0)*r22*x14014)));
evalcond[2]=((((-1.0)*x14012*x14016))+(((-1.0)*r12*x14014))+((x14008*x14009)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14014))+((r01*x14017))+(((-1.0)*x14011*x14016)));
evalcond[4]=((((-1.0)*x14012*x14014))+(((-1.0)*cj8*x14010))+((r12*x14008))+((sj7*sj8))+((x14007*x14009)));
evalcond[5]=((((-1.0)*cj8*sj7))+((r21*x14015))+((r22*x14008))+(((-1.0)*sj8*x14010))+(((-1.0)*x14013*x14014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14019 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14019)==0){
continue;
}
IkReal x14018=pow(x14019,-0.5);
CheckValue<IkReal> x14020 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14020.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14020.value));
IkReal gconst61=((-1.0)*r11*x14018);
IkReal gconst62=(r10*x14018);
CheckValue<IkReal> x14021 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14021.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14021.value)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
CheckValue<IkReal> x14024 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14024.valid){
continue;
}
IkReal x14022=((-1.0)*(x14024.value));
IkReal x14023=x14018;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj11=gconst61;
cj11=gconst62;
j11=x14022;
IkReal gconst60=x14022;
IkReal gconst61=((-1.0)*r11*x14023);
IkReal gconst62=(r10*x14023);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
IkReal x14025=((-1.0)*(x14027.value));
IkReal x14026=x14018;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj11=gconst61;
cj11=gconst62;
j11=x14025;
IkReal gconst60=x14025;
IkReal gconst61=((-1.0)*r11*x14026);
IkReal gconst62=(r10*x14026);
CheckValue<IkReal> x14035=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14035.valid){
continue;
}
IkReal x14028=x14035.value;
IkReal x14029=(sj9*x14028);
IkReal x14030=(r21*x14029);
IkReal x14031=(r00*x14029);
IkReal x14032=(r01*x14029);
IkReal x14033=(r20*x14029);
IkReal x14034=(r10*r11*x14029);
j10eval[0]=IKsign((((r20*x14031*(r10*r10)))+((r10*r11*r20*x14032))+((r01*x14030*(r11*r11)))+((r00*r10*r11*x14030))+((r02*r22*sj9))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14036=gconst61*gconst61;
IkReal x14037=gconst62*gconst62;
IkReal x14038=(cj9*r01);
IkReal x14039=(gconst61*gconst62);
IkReal x14040=(r00*sj9);
IkReal x14041=((1.0)*cj9);
IkReal x14042=(r01*sj9);
IkReal x14043=((1.0)*r20);
IkReal x14044=(r21*x14036);
CheckValue<IkReal> x14045 = IKatan2WithCheck(IkReal((((gconst62*r22*x14042))+((gconst61*r22*x14040)))),IkReal((((r21*x14039*x14042))+(((-1.0)*x14037*x14042*x14043))+((x14040*x14044))+(((-1.0)*x14039*x14040*x14043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14045.valid){
continue;
}
CheckValue<IkReal> x14046=IKPowWithIntegerCheck(IKsign((((r20*x14038*x14039))+(((-1.0)*r02*r22*x14041))+(((-1.0)*x14038*x14044))+((cj9*r00*r21*x14039))+(((-1.0)*r00*r20*x14037*x14041)))),-1);
if(!x14046.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14045.value)+(((1.5707963267949)*(x14046.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14047=IKsin(j10);
IkReal x14048=IKcos(j10);
IkReal x14049=(sj7*sj8);
IkReal x14050=(gconst61*r00);
IkReal x14051=(gconst62*r20);
IkReal x14052=(gconst61*r21);
IkReal x14053=(cj9*gconst61);
IkReal x14054=(gconst62*r10);
IkReal x14055=(cj7*sj8);
IkReal x14056=(gconst61*r01);
IkReal x14057=(gconst61*r11);
IkReal x14058=(gconst62*r00);
IkReal x14059=(cj9*gconst62);
IkReal x14060=(gconst61*sj9);
IkReal x14061=((1.0)*cj8);
IkReal x14062=(gconst62*sj9);
IkReal x14063=(cj7*x14061);
IkReal x14064=((1.0)*x14047);
IkReal x14065=(sj9*x14048);
IkReal x14066=((1.0)*x14048);
IkReal x14067=(cj9*x14047);
evalcond[0]=((((-1.0)*r22*x14066))+((x14047*x14052))+(((-1.0)*x14051*x14064)));
evalcond[1]=((((-1.0)*x14054*x14064))+(((-1.0)*r12*x14066))+((x14047*x14057)));
evalcond[2]=((1.0)+(((-1.0)*x14058*x14064))+(((-1.0)*r02*x14066))+((x14047*x14056)));
evalcond[3]=(((r02*x14067))+((sj9*x14050))+((r01*x14048*x14053))+(((-1.0)*cj9*x14058*x14066))+((r01*x14062)));
evalcond[4]=(((cj9*x14050))+((x14058*x14065))+(((-1.0)*x14056*x14065))+(((-1.0)*r02*sj9*x14064))+((r01*x14059)));
evalcond[5]=(((cj8*sj7))+(((-1.0)*cj9*x14054*x14066))+((r11*x14048*x14053))+((r11*x14062))+((r10*x14060))+((r12*x14067))+x14055);
evalcond[6]=(((r22*x14067))+((r21*x14062))+((r20*x14060))+(((-1.0)*cj9*x14051*x14066))+(((-1.0)*x14063))+x14049+((cj9*x14048*x14052)));
evalcond[7]=(((r11*x14059))+(((-1.0)*r12*sj9*x14064))+((r10*x14053))+(((-1.0)*x14063))+x14049+((x14054*x14065))+(((-1.0)*x14057*x14065)));
evalcond[8]=(((r20*x14053))+(((-1.0)*x14055))+(((-1.0)*sj7*x14061))+(((-1.0)*r22*sj9*x14064))+((x14051*x14065))+((r21*x14059))+(((-1.0)*x14052*x14065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14068=gconst61*gconst61;
IkReal x14069=gconst62*gconst62;
IkReal x14070=(r20*sj9);
IkReal x14071=(gconst62*r01);
IkReal x14072=(cj9*r22);
IkReal x14073=((1.0)*gconst61);
IkReal x14074=(cj9*r00);
IkReal x14075=(r21*x14068);
CheckValue<IkReal> x14076=IKPowWithIntegerCheck(IKsign((((r00*x14069*x14070))+(((-1.0)*gconst62*r00*r21*sj9*x14073))+(((-1.0)*x14070*x14071*x14073))+((r01*sj9*x14075))+((r02*r22*sj9)))),-1);
if(!x14076.valid){
continue;
}
CheckValue<IkReal> x14077 = IKatan2WithCheck(IkReal((((gconst61*r00*x14072))+((x14071*x14072)))),IkReal((((cj9*gconst61*r21*x14071))+((x14074*x14075))+(((-1.0)*gconst62*r20*x14073*x14074))+(((-1.0)*cj9*r01*r20*x14069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14077.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14076.value)))+(x14077.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14078=IKsin(j10);
IkReal x14079=IKcos(j10);
IkReal x14080=(sj7*sj8);
IkReal x14081=(gconst61*r00);
IkReal x14082=(gconst62*r20);
IkReal x14083=(gconst61*r21);
IkReal x14084=(cj9*gconst61);
IkReal x14085=(gconst62*r10);
IkReal x14086=(cj7*sj8);
IkReal x14087=(gconst61*r01);
IkReal x14088=(gconst61*r11);
IkReal x14089=(gconst62*r00);
IkReal x14090=(cj9*gconst62);
IkReal x14091=(gconst61*sj9);
IkReal x14092=((1.0)*cj8);
IkReal x14093=(gconst62*sj9);
IkReal x14094=(cj7*x14092);
IkReal x14095=((1.0)*x14078);
IkReal x14096=(sj9*x14079);
IkReal x14097=((1.0)*x14079);
IkReal x14098=(cj9*x14078);
evalcond[0]=((((-1.0)*r22*x14097))+(((-1.0)*x14082*x14095))+((x14078*x14083)));
evalcond[1]=((((-1.0)*x14085*x14095))+(((-1.0)*r12*x14097))+((x14078*x14088)));
evalcond[2]=((1.0)+(((-1.0)*x14089*x14095))+(((-1.0)*r02*x14097))+((x14078*x14087)));
evalcond[3]=((((-1.0)*cj9*x14089*x14097))+((r01*x14079*x14084))+((r02*x14098))+((sj9*x14081))+((r01*x14093)));
evalcond[4]=((((-1.0)*x14087*x14096))+((x14089*x14096))+(((-1.0)*r02*sj9*x14095))+((cj9*x14081))+((r01*x14090)));
evalcond[5]=((((-1.0)*cj9*x14085*x14097))+((cj8*sj7))+((r11*x14079*x14084))+((r12*x14098))+((r10*x14091))+((r11*x14093))+x14086);
evalcond[6]=(((r20*x14091))+((r21*x14093))+(((-1.0)*x14094))+(((-1.0)*cj9*x14082*x14097))+((cj9*x14079*x14083))+x14080+((r22*x14098)));
evalcond[7]=((((-1.0)*x14088*x14096))+(((-1.0)*x14094))+(((-1.0)*r12*sj9*x14095))+((r10*x14084))+((r11*x14090))+((x14085*x14096))+x14080);
evalcond[8]=((((-1.0)*sj7*x14092))+(((-1.0)*x14083*x14096))+((r20*x14084))+((x14082*x14096))+((r21*x14090))+(((-1.0)*x14086))+(((-1.0)*r22*sj9*x14095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14099=((1.0)*gconst62);
CheckValue<IkReal> x14100=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x14099)))),-1);
if(!x14100.valid){
continue;
}
CheckValue<IkReal> x14101 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x14099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14101.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14100.value)))+(x14101.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14102=IKsin(j10);
IkReal x14103=IKcos(j10);
IkReal x14104=(sj7*sj8);
IkReal x14105=(gconst61*r00);
IkReal x14106=(gconst62*r20);
IkReal x14107=(gconst61*r21);
IkReal x14108=(cj9*gconst61);
IkReal x14109=(gconst62*r10);
IkReal x14110=(cj7*sj8);
IkReal x14111=(gconst61*r01);
IkReal x14112=(gconst61*r11);
IkReal x14113=(gconst62*r00);
IkReal x14114=(cj9*gconst62);
IkReal x14115=(gconst61*sj9);
IkReal x14116=((1.0)*cj8);
IkReal x14117=(gconst62*sj9);
IkReal x14118=(cj7*x14116);
IkReal x14119=((1.0)*x14102);
IkReal x14120=(sj9*x14103);
IkReal x14121=((1.0)*x14103);
IkReal x14122=(cj9*x14102);
evalcond[0]=(((x14102*x14107))+(((-1.0)*r22*x14121))+(((-1.0)*x14106*x14119)));
evalcond[1]=((((-1.0)*r12*x14121))+((x14102*x14112))+(((-1.0)*x14109*x14119)));
evalcond[2]=((1.0)+((x14102*x14111))+(((-1.0)*r02*x14121))+(((-1.0)*x14113*x14119)));
evalcond[3]=(((r01*x14103*x14108))+((r01*x14117))+(((-1.0)*cj9*x14113*x14121))+((sj9*x14105))+((r02*x14122)));
evalcond[4]=(((r01*x14114))+((x14113*x14120))+(((-1.0)*x14111*x14120))+((cj9*x14105))+(((-1.0)*r02*sj9*x14119)));
evalcond[5]=(((r11*x14117))+((r12*x14122))+((cj8*sj7))+((r11*x14103*x14108))+((r10*x14115))+x14110+(((-1.0)*cj9*x14109*x14121)));
evalcond[6]=(((r22*x14122))+(((-1.0)*x14118))+((cj9*x14103*x14107))+(((-1.0)*cj9*x14106*x14121))+((r20*x14115))+x14104+((r21*x14117)));
evalcond[7]=(((r11*x14114))+(((-1.0)*x14112*x14120))+(((-1.0)*r12*sj9*x14119))+(((-1.0)*x14118))+((x14109*x14120))+((r10*x14108))+x14104);
evalcond[8]=((((-1.0)*x14107*x14120))+(((-1.0)*r22*sj9*x14119))+(((-1.0)*sj7*x14116))+(((-1.0)*x14110))+((r20*x14108))+((r21*x14114))+((x14106*x14120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14124 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14124)==0){
continue;
}
IkReal x14123=pow(x14124,-0.5);
CheckValue<IkReal> x14125 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14125.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14125.value))));
IkReal gconst64=((1.0)*r11*x14123);
IkReal gconst65=((-1.0)*r10*x14123);
CheckValue<IkReal> x14126 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14126.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14126.value)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
CheckValue<IkReal> x14129 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14129.valid){
continue;
}
IkReal x14127=((1.0)*(x14129.value));
IkReal x14128=x14123;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj11=gconst64;
cj11=gconst65;
j11=((3.14159265)+(((-1.0)*x14127)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14127)));
IkReal gconst64=((1.0)*r11*x14128);
IkReal gconst65=((-1.0)*r10*x14128);
j10eval[0]=0;
j10eval[1]=r22;
j10eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j10eval[3]=0;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
CheckValue<IkReal> x14132 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14132.valid){
continue;
}
IkReal x14130=((1.0)*(x14132.value));
IkReal x14131=x14123;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj11=gconst64;
cj11=gconst65;
j11=((3.14159265)+(((-1.0)*x14130)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14130)));
IkReal gconst64=((1.0)*r11*x14131);
IkReal gconst65=((-1.0)*r10*x14131);
j10eval[0]=1.0;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14133=gconst64*gconst64;
IkReal x14134=gconst65*gconst65;
IkReal x14135=(r00*r21);
IkReal x14136=(gconst64*gconst65);
IkReal x14137=((1.0)*cj9);
IkReal x14138=(r22*sj9);
IkReal x14139=(r01*r21);
IkReal x14140=((1.0)*r20*sj9);
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal((((gconst65*r01*x14138))+((gconst64*r00*x14138)))),IkReal(((((-1.0)*r01*x14134*x14140))+((sj9*x14133*x14135))+((sj9*x14136*x14139))+(((-1.0)*r00*x14136*x14140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14133*x14137*x14139))+((cj9*x14135*x14136))+((cj9*r01*r20*x14136))+(((-1.0)*r00*r20*x14134*x14137))+(((-1.0)*r02*r22*x14137)))),-1);
if(!x14142.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14141.value)+(((1.5707963267949)*(x14142.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14143=IKsin(j10);
IkReal x14144=IKcos(j10);
IkReal x14145=(sj7*sj8);
IkReal x14146=(cj9*gconst65);
IkReal x14147=(gconst65*r10);
IkReal x14148=((1.0)*gconst64);
IkReal x14149=(cj9*gconst64);
IkReal x14150=(cj7*sj8);
IkReal x14151=(gconst65*sj9);
IkReal x14152=(gconst65*r00);
IkReal x14153=(gconst65*r20);
IkReal x14154=(gconst64*sj9);
IkReal x14155=((1.0)*cj8);
IkReal x14156=(cj7*x14155);
IkReal x14157=(sj9*x14144);
IkReal x14158=((1.0)*x14144);
IkReal x14159=(cj9*x14143);
IkReal x14160=(gconst64*x14143);
IkReal x14161=((1.0)*x14143);
IkReal x14162=(sj9*x14161);
evalcond[0]=((((-1.0)*r22*x14158))+(((-1.0)*x14153*x14161))+((r21*x14160)));
evalcond[1]=((((-1.0)*r12*x14158))+((r11*x14160))+(((-1.0)*x14147*x14161)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14158))+(((-1.0)*x14152*x14161))+((r01*x14160)));
evalcond[3]=((((-1.0)*r00*x14146*x14158))+((r02*x14159))+((r01*x14144*x14149))+((r00*x14154))+((r01*x14151)));
evalcond[4]=((((-1.0)*r02*x14162))+((r01*x14146))+((r00*x14149))+(((-1.0)*r01*x14148*x14157))+((r00*x14144*x14151)));
evalcond[5]=(((r10*x14154))+((cj8*sj7))+(((-1.0)*r10*x14146*x14158))+((r11*x14151))+x14150+((r12*x14159))+((r11*x14144*x14149)));
evalcond[6]=(((r21*x14144*x14149))+((r22*x14159))+(((-1.0)*x14156))+x14145+((r21*x14151))+(((-1.0)*r20*x14146*x14158))+((r20*x14154)));
evalcond[7]=(((r10*x14149))+((x14147*x14157))+(((-1.0)*r12*x14162))+(((-1.0)*x14156))+(((-1.0)*r11*x14148*x14157))+x14145+((r11*x14146)));
evalcond[8]=((((-1.0)*r22*x14162))+(((-1.0)*sj7*x14155))+((r21*x14146))+(((-1.0)*r21*x14148*x14157))+((r20*x14144*x14151))+((r20*x14149))+(((-1.0)*x14150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14163=((1.0)*gconst65);
CheckValue<IkReal> x14164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14163))+(((-1.0)*gconst64*r20)))),-1);
if(!x14164.valid){
continue;
}
CheckValue<IkReal> x14165 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x14163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14165.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14164.value)))+(x14165.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14166=IKsin(j10);
IkReal x14167=IKcos(j10);
IkReal x14168=(sj7*sj8);
IkReal x14169=(cj9*gconst65);
IkReal x14170=(gconst65*r10);
IkReal x14171=((1.0)*gconst64);
IkReal x14172=(cj9*gconst64);
IkReal x14173=(cj7*sj8);
IkReal x14174=(gconst65*sj9);
IkReal x14175=(gconst65*r00);
IkReal x14176=(gconst65*r20);
IkReal x14177=(gconst64*sj9);
IkReal x14178=((1.0)*cj8);
IkReal x14179=(cj7*x14178);
IkReal x14180=(sj9*x14167);
IkReal x14181=((1.0)*x14167);
IkReal x14182=(cj9*x14166);
IkReal x14183=(gconst64*x14166);
IkReal x14184=((1.0)*x14166);
IkReal x14185=(sj9*x14184);
evalcond[0]=((((-1.0)*r22*x14181))+(((-1.0)*x14176*x14184))+((r21*x14183)));
evalcond[1]=((((-1.0)*x14170*x14184))+(((-1.0)*r12*x14181))+((r11*x14183)));
evalcond[2]=((1.0)+(((-1.0)*x14175*x14184))+((r01*x14183))+(((-1.0)*r02*x14181)));
evalcond[3]=(((r01*x14167*x14172))+((r02*x14182))+((r01*x14174))+((r00*x14177))+(((-1.0)*r00*x14169*x14181)));
evalcond[4]=((((-1.0)*r01*x14171*x14180))+((r00*x14172))+((r00*x14167*x14174))+(((-1.0)*r02*x14185))+((r01*x14169)));
evalcond[5]=(((cj8*sj7))+((r11*x14174))+((r11*x14167*x14172))+((r12*x14182))+((r10*x14177))+x14173+(((-1.0)*r10*x14169*x14181)));
evalcond[6]=((((-1.0)*x14179))+((r21*x14174))+((r20*x14177))+((r21*x14167*x14172))+((r22*x14182))+x14168+(((-1.0)*r20*x14169*x14181)));
evalcond[7]=((((-1.0)*x14179))+(((-1.0)*r12*x14185))+((x14170*x14180))+((r11*x14169))+((r10*x14172))+x14168+(((-1.0)*r11*x14171*x14180)));
evalcond[8]=(((r20*x14172))+(((-1.0)*r22*x14185))+(((-1.0)*r21*x14171*x14180))+(((-1.0)*x14173))+(((-1.0)*sj7*x14178))+((r21*x14169))+((r20*x14167*x14174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14186=IKPowWithIntegerCheck(IKsign((((gconst64*r10))+((gconst65*r11)))),-1);
if(!x14186.valid){
continue;
}
CheckValue<IkReal> x14187 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst65*r20))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14187.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14186.value)))+(x14187.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14188=IKsin(j10);
IkReal x14189=IKcos(j10);
IkReal x14190=(sj7*sj8);
IkReal x14191=(cj9*gconst65);
IkReal x14192=(gconst65*r10);
IkReal x14193=((1.0)*gconst64);
IkReal x14194=(cj9*gconst64);
IkReal x14195=(cj7*sj8);
IkReal x14196=(gconst65*sj9);
IkReal x14197=(gconst65*r00);
IkReal x14198=(gconst65*r20);
IkReal x14199=(gconst64*sj9);
IkReal x14200=((1.0)*cj8);
IkReal x14201=(cj7*x14200);
IkReal x14202=(sj9*x14189);
IkReal x14203=((1.0)*x14189);
IkReal x14204=(cj9*x14188);
IkReal x14205=(gconst64*x14188);
IkReal x14206=((1.0)*x14188);
IkReal x14207=(sj9*x14206);
evalcond[0]=((((-1.0)*x14198*x14206))+((r21*x14205))+(((-1.0)*r22*x14203)));
evalcond[1]=((((-1.0)*x14192*x14206))+(((-1.0)*r12*x14203))+((r11*x14205)));
evalcond[2]=((1.0)+(((-1.0)*x14197*x14206))+(((-1.0)*r02*x14203))+((r01*x14205)));
evalcond[3]=(((r01*x14189*x14194))+((r02*x14204))+((r01*x14196))+((r00*x14199))+(((-1.0)*r00*x14191*x14203)));
evalcond[4]=((((-1.0)*r01*x14193*x14202))+(((-1.0)*r02*x14207))+((r00*x14189*x14196))+((r01*x14191))+((r00*x14194)));
evalcond[5]=(((r10*x14199))+((cj8*sj7))+((r11*x14196))+(((-1.0)*r10*x14191*x14203))+x14195+((r12*x14204))+((r11*x14189*x14194)));
evalcond[6]=(((r21*x14189*x14194))+(((-1.0)*x14201))+(((-1.0)*r20*x14191*x14203))+((r22*x14204))+x14190+((r21*x14196))+((r20*x14199)));
evalcond[7]=(((r10*x14194))+(((-1.0)*x14201))+(((-1.0)*r12*x14207))+(((-1.0)*r11*x14193*x14202))+((r11*x14191))+x14190+((x14192*x14202)));
evalcond[8]=((((-1.0)*x14195))+(((-1.0)*r21*x14193*x14202))+((r20*x14189*x14196))+((r21*x14191))+(((-1.0)*r22*x14207))+(((-1.0)*sj7*x14200))+((r20*x14194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x14208=((-1.0)*py);
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14208);
rxp0_2=(py*r00);
rxp1_0=(r21*x14208);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14209=(r01*sj11);
IkReal x14210=(cj11*r00);
j10eval[0]=((((-1.0)*x14210))+x14209);
j10eval[1]=((((-1.0)*sj9*x14209))+((sj9*x14210)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x14211=((-1.0)*py);
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14211);
rxp0_2=(py*r00);
rxp1_0=(r21*x14211);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14212=(r01*sj11);
IkReal x14213=((1.0)*cj11*r00);
j10eval[0]=((((-1.0)*x14213))+x14212);
j10eval[1]=(((cj9*x14212))+(((-1.0)*cj9*x14213)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x14214=((-1.0)*py);
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14214);
rxp0_2=(py*r00);
rxp1_0=(r21*x14214);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j10eval[0]=cj9;
j10eval[1]=r12;
j10eval[2]=(((cj11*r00*sj9))+(((-1.0)*r01*sj11*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14215=((1.0)*r01);
CheckValue<IkReal> x14216=IKPowWithIntegerCheck(cj9,-1);
if(!x14216.valid){
continue;
}
CheckValue<IkReal> x14217=IKPowWithIntegerCheck(r12,-1);
if(!x14217.valid){
continue;
}
CheckValue<IkReal> x14218=IKPowWithIntegerCheck((((cj11*r00*sj9))+(((-1.0)*sj11*sj9*x14215))),-1);
if(!x14218.valid){
continue;
}
if( IKabs(((x14216.value)*(x14217.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14218.value)*(((((-1.0)*cj11*cj9*x14215))+(((-1.0)*cj9*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14216.value)*(x14217.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))))+IKsqr(((x14218.value)*(((((-1.0)*cj11*cj9*x14215))+(((-1.0)*cj9*r00*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14216.value)*(x14217.value)*(((((-1.0)*cj8*sj7))+(((-1.0)*cj7*sj8))))), ((x14218.value)*(((((-1.0)*cj11*cj9*x14215))+(((-1.0)*cj9*r00*sj11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14219=IKsin(j10);
IkReal x14220=IKcos(j10);
IkReal x14221=(sj7*sj8);
IkReal x14222=((1.0)*sj9);
IkReal x14223=(cj7*sj8);
IkReal x14224=(cj11*sj9);
IkReal x14225=(cj9*r01);
IkReal x14226=((1.0)*cj11);
IkReal x14227=(sj11*sj9);
IkReal x14228=((1.0)*cj8);
IkReal x14229=(cj9*r21);
IkReal x14230=(cj9*sj11);
IkReal x14231=(cj7*x14228);
IkReal x14232=(sj11*x14220);
IkReal x14233=(r12*x14219);
IkReal x14234=(r00*x14220);
IkReal x14235=(r20*x14220);
IkReal x14236=(sj11*x14219);
evalcond[0]=((-1.0)*r12*x14220);
evalcond[1]=(((cj8*sj7))+((cj9*x14233))+x14223);
evalcond[2]=((((-1.0)*r20*x14219*x14226))+((r21*x14236)));
evalcond[3]=((1.0)+((r01*x14236))+(((-1.0)*r00*x14219*x14226)));
evalcond[4]=((((-1.0)*x14231))+(((-1.0)*x14222*x14233))+x14221);
evalcond[5]=(((x14224*x14234))+((r00*x14230))+((cj11*x14225))+(((-1.0)*r01*x14222*x14232)));
evalcond[6]=((((-1.0)*cj9*x14226*x14234))+((x14225*x14232))+((r00*x14227))+((r01*x14224)));
evalcond[7]=((((-1.0)*x14231))+((r20*x14227))+(((-1.0)*cj9*x14226*x14235))+((x14229*x14232))+((r21*x14224))+x14221);
evalcond[8]=((((-1.0)*sj7*x14228))+((r20*x14230))+((x14224*x14235))+((cj11*x14229))+(((-1.0)*r21*x14222*x14232))+(((-1.0)*x14223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14237=(r01*sj11);
IkReal x14238=((1.0)*r00);
CheckValue<IkReal> x14239=IKPowWithIntegerCheck(((((-1.0)*cj11*x14238))+x14237),-1);
if(!x14239.valid){
continue;
}
CheckValue<IkReal> x14240=IKPowWithIntegerCheck(((((-1.0)*cj11*cj9*x14238))+((cj9*x14237))),-1);
if(!x14240.valid){
continue;
}
if( IKabs(((-1.0)*(x14239.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14240.value)*(((((-1.0)*cj11*r01*sj9))+(((-1.0)*sj11*sj9*x14238)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14239.value)))+IKsqr(((x14240.value)*(((((-1.0)*cj11*r01*sj9))+(((-1.0)*sj11*sj9*x14238))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x14239.value)), ((x14240.value)*(((((-1.0)*cj11*r01*sj9))+(((-1.0)*sj11*sj9*x14238))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14241=IKsin(j10);
IkReal x14242=IKcos(j10);
IkReal x14243=(sj7*sj8);
IkReal x14244=((1.0)*sj9);
IkReal x14245=(cj7*sj8);
IkReal x14246=(cj11*sj9);
IkReal x14247=(cj9*r01);
IkReal x14248=((1.0)*cj11);
IkReal x14249=(sj11*sj9);
IkReal x14250=((1.0)*cj8);
IkReal x14251=(cj9*r21);
IkReal x14252=(cj9*sj11);
IkReal x14253=(cj7*x14250);
IkReal x14254=(sj11*x14242);
IkReal x14255=(r12*x14241);
IkReal x14256=(r00*x14242);
IkReal x14257=(r20*x14242);
IkReal x14258=(sj11*x14241);
evalcond[0]=((-1.0)*r12*x14242);
evalcond[1]=(((cj9*x14255))+((cj8*sj7))+x14245);
evalcond[2]=((((-1.0)*r20*x14241*x14248))+((r21*x14258)));
evalcond[3]=((1.0)+(((-1.0)*r00*x14241*x14248))+((r01*x14258)));
evalcond[4]=((((-1.0)*x14253))+(((-1.0)*x14244*x14255))+x14243);
evalcond[5]=(((x14246*x14256))+(((-1.0)*r01*x14244*x14254))+((cj11*x14247))+((r00*x14252)));
evalcond[6]=(((x14247*x14254))+(((-1.0)*cj9*x14248*x14256))+((r01*x14246))+((r00*x14249)));
evalcond[7]=(((r21*x14246))+(((-1.0)*x14253))+((r20*x14249))+((x14251*x14254))+(((-1.0)*cj9*x14248*x14257))+x14243);
evalcond[8]=(((x14246*x14257))+(((-1.0)*x14245))+(((-1.0)*r21*x14244*x14254))+((r20*x14252))+((cj11*x14251))+(((-1.0)*sj7*x14250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14259=((1.0)*cj11);
IkReal x14260=(r01*sj11);
CheckValue<IkReal> x14261=IKPowWithIntegerCheck(((((-1.0)*r00*x14259))+x14260),-1);
if(!x14261.valid){
continue;
}
CheckValue<IkReal> x14262=IKPowWithIntegerCheck((((cj11*r00*sj9))+(((-1.0)*sj9*x14260))),-1);
if(!x14262.valid){
continue;
}
if( IKabs(((-1.0)*(x14261.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14262.value)*(((((-1.0)*cj9*r01*x14259))+(((-1.0)*cj9*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14261.value)))+IKsqr(((x14262.value)*(((((-1.0)*cj9*r01*x14259))+(((-1.0)*cj9*r00*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*(x14261.value)), ((x14262.value)*(((((-1.0)*cj9*r01*x14259))+(((-1.0)*cj9*r00*sj11))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14263=IKsin(j10);
IkReal x14264=IKcos(j10);
IkReal x14265=(sj7*sj8);
IkReal x14266=((1.0)*sj9);
IkReal x14267=(cj7*sj8);
IkReal x14268=(cj11*sj9);
IkReal x14269=(cj9*r01);
IkReal x14270=((1.0)*cj11);
IkReal x14271=(sj11*sj9);
IkReal x14272=((1.0)*cj8);
IkReal x14273=(cj9*r21);
IkReal x14274=(cj9*sj11);
IkReal x14275=(cj7*x14272);
IkReal x14276=(sj11*x14264);
IkReal x14277=(r12*x14263);
IkReal x14278=(r00*x14264);
IkReal x14279=(r20*x14264);
IkReal x14280=(sj11*x14263);
evalcond[0]=((-1.0)*r12*x14264);
evalcond[1]=(((cj8*sj7))+((cj9*x14277))+x14267);
evalcond[2]=(((r21*x14280))+(((-1.0)*r20*x14263*x14270)));
evalcond[3]=((1.0)+((r01*x14280))+(((-1.0)*r00*x14263*x14270)));
evalcond[4]=((((-1.0)*x14275))+(((-1.0)*x14266*x14277))+x14265);
evalcond[5]=(((x14268*x14278))+(((-1.0)*r01*x14266*x14276))+((cj11*x14269))+((r00*x14274)));
evalcond[6]=(((x14269*x14276))+(((-1.0)*cj9*x14270*x14278))+((r01*x14268))+((r00*x14271)));
evalcond[7]=(((r21*x14268))+(((-1.0)*x14275))+((r20*x14271))+((x14273*x14276))+x14265+(((-1.0)*cj9*x14270*x14279)));
evalcond[8]=((((-1.0)*x14267))+((x14268*x14279))+((r20*x14274))+((cj11*x14273))+(((-1.0)*sj7*x14272))+(((-1.0)*r21*x14266*x14276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14281=cj11*cj11;
IkReal x14282=((1.0)*sj9);
IkReal x14283=(cj9*r21);
IkReal x14284=(sj11*sj9);
IkReal x14285=(cj11*r01);
IkReal x14286=((1.0)*cj9);
IkReal x14287=(cj11*r00*sj11);
IkReal x14288=(r00*x14281);
IkReal x14289=(r01*x14281);
CheckValue<IkReal> x14290 = IKatan2WithCheck(IkReal((((r00*r22*x14284))+((r22*sj9*x14285)))),IkReal(((((-1.0)*r20*x14282*x14287))+(((-1.0)*r20*x14282*x14289))+(((-1.0)*r21*x14282*x14288))+((r21*x14284*x14285))+((r00*r21*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14286*x14288))+(((-1.0)*r02*r22*x14286))+(((-1.0)*r01*x14283))+((x14283*x14287))+((x14283*x14289))+((cj9*r20*sj11*x14285)))),-1);
if(!x14291.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14290.value)+(((1.5707963267949)*(x14291.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14292=IKsin(j10);
IkReal x14293=IKcos(j10);
IkReal x14294=(sj7*sj8);
IkReal x14295=((1.0)*sj9);
IkReal x14296=((1.0)*cj8);
IkReal x14297=(cj7*sj8);
IkReal x14298=(cj11*sj9);
IkReal x14299=(cj9*r01);
IkReal x14300=(cj11*r00);
IkReal x14301=(sj11*sj9);
IkReal x14302=(cj9*r10);
IkReal x14303=(cj9*r21);
IkReal x14304=(cj11*cj9);
IkReal x14305=(cj9*sj11);
IkReal x14306=(cj7*x14296);
IkReal x14307=(sj11*x14293);
IkReal x14308=(sj11*x14292);
IkReal x14309=(r02*x14292);
IkReal x14310=(r12*x14292);
IkReal x14311=((1.0)*x14293);
IkReal x14312=((1.0)*x14292);
IkReal x14313=(r22*x14292);
evalcond[0]=((((-1.0)*r22*x14311))+(((-1.0)*cj11*r20*x14312))+((r21*x14308)));
evalcond[1]=(((r11*x14308))+(((-1.0)*cj11*r10*x14312))+(((-1.0)*r12*x14311)));
evalcond[2]=((1.0)+(((-1.0)*x14300*x14312))+(((-1.0)*r02*x14311))+((r01*x14308)));
evalcond[3]=(((cj9*x14309))+(((-1.0)*cj9*x14300*x14311))+((x14299*x14307))+((r01*x14298))+((r00*x14301)));
evalcond[4]=((((-1.0)*r01*x14295*x14307))+(((-1.0)*x14295*x14309))+((cj11*x14299))+((r00*x14305))+((r00*x14293*x14298)));
evalcond[5]=(((cj8*sj7))+((r11*x14293*x14305))+(((-1.0)*cj11*x14302*x14311))+((r11*x14298))+((r10*x14301))+x14297+((cj9*x14310)));
evalcond[6]=(((r20*x14301))+((r21*x14298))+(((-1.0)*r20*x14304*x14311))+((x14303*x14307))+x14294+((cj9*x14313))+(((-1.0)*x14306)));
evalcond[7]=(((sj11*x14302))+((r11*x14304))+(((-1.0)*x14295*x14310))+((r10*x14293*x14298))+x14294+(((-1.0)*r11*x14295*x14307))+(((-1.0)*x14306)));
evalcond[8]=(((r20*x14305))+(((-1.0)*x14295*x14313))+(((-1.0)*sj7*x14296))+(((-1.0)*r21*x14295*x14307))+(((-1.0)*x14297))+((r20*x14293*x14298))+((cj11*x14303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14314=((1.0)*cj11);
CheckValue<IkReal> x14315 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj11))+(((-1.0)*r10*x14314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14315.valid){
continue;
}
CheckValue<IkReal> x14316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj11))+(((-1.0)*r21*x14314)))),-1);
if(!x14316.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14315.value)+(((1.5707963267949)*(x14316.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14317=IKsin(j10);
IkReal x14318=IKcos(j10);
IkReal x14319=(sj7*sj8);
IkReal x14320=((1.0)*sj9);
IkReal x14321=((1.0)*cj8);
IkReal x14322=(cj7*sj8);
IkReal x14323=(cj11*sj9);
IkReal x14324=(cj9*r01);
IkReal x14325=(cj11*r00);
IkReal x14326=(sj11*sj9);
IkReal x14327=(cj9*r10);
IkReal x14328=(cj9*r21);
IkReal x14329=(cj11*cj9);
IkReal x14330=(cj9*sj11);
IkReal x14331=(cj7*x14321);
IkReal x14332=(sj11*x14318);
IkReal x14333=(sj11*x14317);
IkReal x14334=(r02*x14317);
IkReal x14335=(r12*x14317);
IkReal x14336=((1.0)*x14318);
IkReal x14337=((1.0)*x14317);
IkReal x14338=(r22*x14317);
evalcond[0]=((((-1.0)*r22*x14336))+(((-1.0)*cj11*r20*x14337))+((r21*x14333)));
evalcond[1]=(((r11*x14333))+(((-1.0)*r12*x14336))+(((-1.0)*cj11*r10*x14337)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14336))+((r01*x14333))+(((-1.0)*x14325*x14337)));
evalcond[3]=(((cj9*x14334))+((r00*x14326))+((r01*x14323))+((x14324*x14332))+(((-1.0)*cj9*x14325*x14336)));
evalcond[4]=(((r00*x14318*x14323))+((cj11*x14324))+((r00*x14330))+(((-1.0)*r01*x14320*x14332))+(((-1.0)*x14320*x14334)));
evalcond[5]=(((cj9*x14335))+((cj8*sj7))+((r10*x14326))+((r11*x14323))+(((-1.0)*cj11*x14327*x14336))+((r11*x14318*x14330))+x14322);
evalcond[6]=((((-1.0)*x14331))+((cj9*x14338))+(((-1.0)*r20*x14329*x14336))+((r21*x14323))+((r20*x14326))+x14319+((x14328*x14332)));
evalcond[7]=((((-1.0)*x14331))+(((-1.0)*r11*x14320*x14332))+((sj11*x14327))+((r11*x14329))+((r10*x14318*x14323))+x14319+(((-1.0)*x14320*x14335)));
evalcond[8]=(((r20*x14318*x14323))+((r20*x14330))+((cj11*x14328))+(((-1.0)*r21*x14320*x14332))+(((-1.0)*sj7*x14321))+(((-1.0)*x14322))+(((-1.0)*x14320*x14338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14339 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj11*r20))+((r21*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14339.valid){
continue;
}
CheckValue<IkReal> x14340=IKPowWithIntegerCheck(IKsign((((cj11*r11))+((r10*sj11)))),-1);
if(!x14340.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14339.value)+(((1.5707963267949)*(x14340.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14341=IKsin(j10);
IkReal x14342=IKcos(j10);
IkReal x14343=(sj7*sj8);
IkReal x14344=((1.0)*sj9);
IkReal x14345=((1.0)*cj8);
IkReal x14346=(cj7*sj8);
IkReal x14347=(cj11*sj9);
IkReal x14348=(cj9*r01);
IkReal x14349=(cj11*r00);
IkReal x14350=(sj11*sj9);
IkReal x14351=(cj9*r10);
IkReal x14352=(cj9*r21);
IkReal x14353=(cj11*cj9);
IkReal x14354=(cj9*sj11);
IkReal x14355=(cj7*x14345);
IkReal x14356=(sj11*x14342);
IkReal x14357=(sj11*x14341);
IkReal x14358=(r02*x14341);
IkReal x14359=(r12*x14341);
IkReal x14360=((1.0)*x14342);
IkReal x14361=((1.0)*x14341);
IkReal x14362=(r22*x14341);
evalcond[0]=((((-1.0)*r22*x14360))+(((-1.0)*cj11*r20*x14361))+((r21*x14357)));
evalcond[1]=(((r11*x14357))+(((-1.0)*cj11*r10*x14361))+(((-1.0)*r12*x14360)));
evalcond[2]=((1.0)+(((-1.0)*x14349*x14361))+(((-1.0)*r02*x14360))+((r01*x14357)));
evalcond[3]=(((r01*x14347))+((x14348*x14356))+((r00*x14350))+(((-1.0)*cj9*x14349*x14360))+((cj9*x14358)));
evalcond[4]=((((-1.0)*x14344*x14358))+((cj11*x14348))+((r00*x14342*x14347))+((r00*x14354))+(((-1.0)*r01*x14344*x14356)));
evalcond[5]=(((r11*x14342*x14354))+((cj8*sj7))+((r11*x14347))+((r10*x14350))+(((-1.0)*cj11*x14351*x14360))+x14346+((cj9*x14359)));
evalcond[6]=(((x14352*x14356))+(((-1.0)*x14355))+((r20*x14350))+((r21*x14347))+(((-1.0)*r20*x14353*x14360))+x14343+((cj9*x14362)));
evalcond[7]=((((-1.0)*x14344*x14359))+(((-1.0)*x14355))+(((-1.0)*r11*x14344*x14356))+((sj11*x14351))+((r11*x14353))+((r10*x14342*x14347))+x14343);
evalcond[8]=((((-1.0)*x14344*x14362))+((cj11*x14352))+((r20*x14354))+(((-1.0)*x14346))+((r20*x14342*x14347))+(((-1.0)*r21*x14344*x14356))+(((-1.0)*sj7*x14345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x14363=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14363);
rxp1_1=(px*r21);
rxp1_2=(r11*x14363);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x14364=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14364);
rxp1_1=(px*r21);
rxp1_2=(r11*x14364);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14365=((1.0)*cj11);
j10eval[0]=(((r11*sj11))+(((-1.0)*r10*x14365)));
j10eval[1]=((((-1.0)*cj9*r20*x14365))+((cj9*r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x14366=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14366);
rxp1_1=(px*r21);
rxp1_2=(r11*x14366);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x14367=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14367);
rxp1_1=(px*r21);
rxp1_2=(r11*x14367);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x14368=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14368);
rxp1_1=(px*r21);
rxp1_2=(r11*x14368);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j10eval[0]=((((-1.0)*r21*sj11))+((cj11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x14369=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14369);
rxp1_1=(px*r21);
rxp1_2=(r11*x14369);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j10eval[0]=(((cj11*r10))+(((-1.0)*r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14372=IKPowWithIntegerCheck((((cj11*r10))+(((-1.0)*r11*sj11))),-1);
if(!x14372.valid){
continue;
}
IkReal x14370=x14372.value;
IkReal x14371=(sj6*x14370);
cj10array[0]=(((sj7*sj8*x14371))+(((-1.0)*cj7*cj8*x14371)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14373=IKsin(j10);
IkReal x14374=IKcos(j10);
IkReal x14375=(cj11*r20);
IkReal x14376=(sj11*x14373);
IkReal x14377=((1.0)*x14374);
IkReal x14378=((1.0)*x14373);
evalcond[0]=((-1.0)*r02*x14373);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x14377)));
evalcond[2]=(((r21*x14376))+(((-1.0)*x14375*x14378)));
evalcond[3]=((((-1.0)*cj11*r10*x14378))+((r11*x14376)));
evalcond[4]=((((-1.0)*r21*sj11*x14377))+(((-1.0)*cj8*sj7))+((x14374*x14375))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14380=IKPowWithIntegerCheck(((((-1.0)*r21*sj11))+((cj11*r20))),-1);
if(!x14380.valid){
continue;
}
IkReal x14379=x14380.value;
cj10array[0]=(((cj8*sj7*x14379))+((cj7*sj8*x14379)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14381=IKsin(j10);
IkReal x14382=IKcos(j10);
IkReal x14383=(r11*sj11);
IkReal x14384=((1.0)*sj6);
IkReal x14385=((1.0)*x14382);
IkReal x14386=((1.0)*cj11*x14381);
evalcond[0]=((-1.0)*r02*x14381);
evalcond[1]=((((-1.0)*x14384))+(((-1.0)*r02*x14385)));
evalcond[2]=((((-1.0)*r20*x14386))+((r21*sj11*x14381)));
evalcond[3]=(((x14381*x14383))+(((-1.0)*r10*x14386)));
evalcond[4]=(((cj7*cj8*sj6))+(((-1.0)*x14383*x14385))+((cj11*r10*x14382))+(((-1.0)*sj7*sj8*x14384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(r02,-1);
if(!x14387.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x14387.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14388=IKsin(j10);
IkReal x14389=IKcos(j10);
IkReal x14390=(cj11*r20);
IkReal x14391=((1.0)*sj7);
IkReal x14392=(cj11*r10);
IkReal x14393=(sj11*x14388);
IkReal x14394=((1.0)*x14388);
IkReal x14395=((1.0)*sj11*x14389);
evalcond[0]=((-1.0)*r02*x14388);
evalcond[1]=((((-1.0)*x14390*x14394))+((r21*x14393)));
evalcond[2]=((((-1.0)*x14392*x14394))+((r11*x14393)));
evalcond[3]=((((-1.0)*r21*x14395))+((x14389*x14390))+(((-1.0)*cj7*sj8))+(((-1.0)*cj8*x14391)));
evalcond[4]=((((-1.0)*sj6*sj8*x14391))+((cj7*cj8*sj6))+(((-1.0)*r11*x14395))+((x14389*x14392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
IkReal x14396=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14396);
rxp1_1=(px*r21);
rxp1_2=(r11*x14396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j10eval[0]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x14397=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14397);
rxp1_1=(px*r21);
rxp1_2=(r11*x14397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j10eval[0]=((((-1.0)*cj11*r20))+((r21*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
IkReal x14398=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14398);
rxp1_1=(px*r21);
rxp1_2=(r11*x14398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j10eval[0]=((((-1.0)*cj11*r10))+((r11*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14401=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x14401.valid){
continue;
}
IkReal x14399=x14401.value;
IkReal x14400=(sj6*x14399);
cj10array[0]=(((sj7*sj8*x14400))+(((-1.0)*cj7*cj8*x14400)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14402=IKsin(j10);
IkReal x14403=IKcos(j10);
IkReal x14404=(r21*sj11);
IkReal x14405=(cj11*r20);
IkReal x14406=((1.0)*x14403);
IkReal x14407=((1.0)*x14402);
evalcond[0]=(r02*x14402);
evalcond[1]=((((-1.0)*sj6))+(((-1.0)*r02*x14406)));
evalcond[2]=(((x14402*x14404))+(((-1.0)*x14405*x14407)));
evalcond[3]=(((r11*sj11*x14402))+(((-1.0)*cj11*r10*x14407)));
evalcond[4]=((((-1.0)*cj8*sj7))+((x14403*x14404))+(((-1.0)*x14405*x14406))+(((-1.0)*cj7*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14409=IKPowWithIntegerCheck(((((-1.0)*cj11*r20))+((r21*sj11))),-1);
if(!x14409.valid){
continue;
}
IkReal x14408=x14409.value;
cj10array[0]=(((cj8*sj7*x14408))+((cj7*sj8*x14408)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14410=IKsin(j10);
IkReal x14411=IKcos(j10);
IkReal x14412=(cj11*r10);
IkReal x14413=((1.0)*sj6);
IkReal x14414=((1.0)*x14411);
IkReal x14415=(sj11*x14410);
IkReal x14416=((1.0)*x14410);
evalcond[0]=(r02*x14410);
evalcond[1]=((((-1.0)*x14413))+(((-1.0)*r02*x14414)));
evalcond[2]=(((r21*x14415))+(((-1.0)*cj11*r20*x14416)));
evalcond[3]=(((r11*x14415))+(((-1.0)*x14412*x14416)));
evalcond[4]=(((cj7*cj8*sj6))+(((-1.0)*x14412*x14414))+((r11*sj11*x14411))+(((-1.0)*sj7*sj8*x14413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x14417=IKPowWithIntegerCheck(r02,-1);
if(!x14417.valid){
continue;
}
cj10array[0]=((-1.0)*sj6*(x14417.value));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x14418=IKsin(j10);
IkReal x14419=IKcos(j10);
IkReal x14420=(r21*sj11);
IkReal x14421=(r11*sj11);
IkReal x14422=((1.0)*sj7);
IkReal x14423=((1.0)*cj11*r20);
IkReal x14424=((1.0)*cj11*r10);
evalcond[0]=(r02*x14418);
evalcond[1]=((((-1.0)*x14418*x14423))+((x14418*x14420)));
evalcond[2]=((((-1.0)*x14418*x14424))+((x14418*x14421)));
evalcond[3]=((((-1.0)*x14419*x14423))+(((-1.0)*cj8*x14422))+((x14419*x14420))+(((-1.0)*cj7*sj8)));
evalcond[4]=((((-1.0)*x14419*x14424))+((cj7*cj8*sj6))+(((-1.0)*sj6*sj8*x14422))+((x14419*x14421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14425.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j11+(x14426.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x14427=((-1.0)*r10);
CheckValue<IkReal> x14429 = IKatan2WithCheck(IkReal(x14427),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14429.valid){
continue;
}
IkReal x14428=((-1.0)*(x14429.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14427);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst67;
cj11=gconst68;
j11=x14428;
IkReal gconst66=x14428;
IkReal gconst67=r10;
IkReal gconst68=r11;
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x14430=((-1.0)*r10);
CheckValue<IkReal> x14432 = IKatan2WithCheck(IkReal(x14430),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14432.valid){
continue;
}
IkReal x14431=((-1.0)*(x14432.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14430);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst67;
cj11=gconst68;
j11=x14431;
IkReal gconst66=x14431;
IkReal gconst67=r10;
IkReal gconst68=r11;
j10eval[0]=r02;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x14433=((-1.0)*r10);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal(x14433),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
IkReal x14434=((-1.0)*(x14435.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14433);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst67;
cj11=gconst68;
j11=x14434;
IkReal gconst66=x14434;
IkReal gconst67=r10;
IkReal gconst68=r11;
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=(((cj9*r10*r21))+(((-1.0)*cj9*r11*r20)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14436=((1.0)*r20);
CheckValue<IkReal> x14437=IKPowWithIntegerCheck(cj9,-1);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438=IKPowWithIntegerCheck(r02,-1);
if(!x14438.valid){
continue;
}
CheckValue<IkReal> x14439=IKPowWithIntegerCheck(((((-1.0)*cj9*gconst68*x14436))+((cj9*gconst67*r21))),-1);
if(!x14439.valid){
continue;
}
if( IKabs(((x14437.value)*(x14438.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14439.value)*(((((-1.0)*gconst67*sj9*x14436))+(((-1.0)*gconst68*r21*sj9))+((cj7*cj8))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14437.value)*(x14438.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((x14439.value)*(((((-1.0)*gconst67*sj9*x14436))+(((-1.0)*gconst68*r21*sj9))+((cj7*cj8))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14437.value)*(x14438.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((x14439.value)*(((((-1.0)*gconst67*sj9*x14436))+(((-1.0)*gconst68*r21*sj9))+((cj7*cj8))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14440=IKsin(j10);
IkReal x14441=IKcos(j10);
IkReal x14442=((1.0)*sj9);
IkReal x14443=(gconst67*r20);
IkReal x14444=(sj7*sj8);
IkReal x14445=(cj9*gconst68);
IkReal x14446=((1.0)*cj6);
IkReal x14447=(cj7*cj8);
IkReal x14448=(gconst68*sj9);
IkReal x14449=(gconst67*r10);
IkReal x14450=(cj8*sj7);
IkReal x14451=((1.0)*sj6);
IkReal x14452=((1.0)*cj7*sj8);
IkReal x14453=((1.0)*x14441);
IkReal x14454=(gconst67*x14440);
IkReal x14455=(r02*x14440);
IkReal x14456=((1.0)*gconst68*x14440);
IkReal x14457=(gconst67*r11*x14441);
IkReal x14458=(gconst67*r21*x14441);
evalcond[0]=((((-1.0)*x14451))+(((-1.0)*r02*x14453)));
evalcond[1]=((((-1.0)*r20*x14456))+((r21*x14454)));
evalcond[2]=(cj6+((r11*x14454))+(((-1.0)*r10*x14456)));
evalcond[3]=((((-1.0)*x14442*x14455))+((cj6*x14447))+(((-1.0)*x14444*x14446)));
evalcond[4]=((((-1.0)*x14446*x14450))+((cj9*x14455))+(((-1.0)*cj7*sj8*x14446)));
evalcond[5]=((((-1.0)*r20*x14445*x14453))+((cj9*x14458))+(((-1.0)*x14447))+x14444+((sj9*x14443))+((r21*x14448)));
evalcond[6]=((((-1.0)*x14452))+((cj9*x14443))+(((-1.0)*x14442*x14458))+(((-1.0)*x14450))+((r21*x14445))+((r20*x14441*x14448)));
evalcond[7]=(((r10*x14441*x14448))+((r11*x14445))+((cj9*x14449))+(((-1.0)*x14442*x14457))+((sj6*x14447))+(((-1.0)*x14444*x14451)));
evalcond[8]=(((r11*x14448))+((cj9*x14457))+(((-1.0)*cj7*sj8*x14451))+((sj9*x14449))+(((-1.0)*r10*x14445*x14453))+(((-1.0)*x14450*x14451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14460=IKPowWithIntegerCheck(r02,-1);
if(!x14460.valid){
continue;
}
IkReal x14459=x14460.value;
CheckValue<IkReal> x14461=IKPowWithIntegerCheck(sj9,-1);
if(!x14461.valid){
continue;
}
if( IKabs((x14459*(x14461.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x14459)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14459*(x14461.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8))))))+IKsqr(((-1.0)*sj6*x14459))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14459*(x14461.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8))))), ((-1.0)*sj6*x14459));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14462=IKsin(j10);
IkReal x14463=IKcos(j10);
IkReal x14464=((1.0)*sj9);
IkReal x14465=(gconst67*r20);
IkReal x14466=(sj7*sj8);
IkReal x14467=(cj9*gconst68);
IkReal x14468=((1.0)*cj6);
IkReal x14469=(cj7*cj8);
IkReal x14470=(gconst68*sj9);
IkReal x14471=(gconst67*r10);
IkReal x14472=(cj8*sj7);
IkReal x14473=((1.0)*sj6);
IkReal x14474=((1.0)*cj7*sj8);
IkReal x14475=((1.0)*x14463);
IkReal x14476=(gconst67*x14462);
IkReal x14477=(r02*x14462);
IkReal x14478=((1.0)*gconst68*x14462);
IkReal x14479=(gconst67*r11*x14463);
IkReal x14480=(gconst67*r21*x14463);
evalcond[0]=((((-1.0)*r02*x14475))+(((-1.0)*x14473)));
evalcond[1]=(((r21*x14476))+(((-1.0)*r20*x14478)));
evalcond[2]=(cj6+(((-1.0)*r10*x14478))+((r11*x14476)));
evalcond[3]=(((cj6*x14469))+(((-1.0)*x14464*x14477))+(((-1.0)*x14466*x14468)));
evalcond[4]=(((cj9*x14477))+(((-1.0)*x14468*x14472))+(((-1.0)*cj7*sj8*x14468)));
evalcond[5]=(((sj9*x14465))+(((-1.0)*r20*x14467*x14475))+((r21*x14470))+(((-1.0)*x14469))+x14466+((cj9*x14480)));
evalcond[6]=(((r21*x14467))+((cj9*x14465))+(((-1.0)*x14472))+(((-1.0)*x14464*x14480))+(((-1.0)*x14474))+((r20*x14463*x14470)));
evalcond[7]=(((sj6*x14469))+((cj9*x14471))+(((-1.0)*x14464*x14479))+((r11*x14467))+(((-1.0)*x14466*x14473))+((r10*x14463*x14470)));
evalcond[8]=(((sj9*x14471))+((cj9*x14479))+((r11*x14470))+(((-1.0)*x14472*x14473))+(((-1.0)*cj7*sj8*x14473))+(((-1.0)*r10*x14467*x14475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14482=IKPowWithIntegerCheck(r02,-1);
if(!x14482.valid){
continue;
}
IkReal x14481=x14482.value;
CheckValue<IkReal> x14483=IKPowWithIntegerCheck(cj9,-1);
if(!x14483.valid){
continue;
}
if( IKabs((x14481*(x14483.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x14481)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14481*(x14483.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x14481))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14481*(x14483.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x14481));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14484=IKsin(j10);
IkReal x14485=IKcos(j10);
IkReal x14486=((1.0)*sj9);
IkReal x14487=(gconst67*r20);
IkReal x14488=(sj7*sj8);
IkReal x14489=(cj9*gconst68);
IkReal x14490=((1.0)*cj6);
IkReal x14491=(cj7*cj8);
IkReal x14492=(gconst68*sj9);
IkReal x14493=(gconst67*r10);
IkReal x14494=(cj8*sj7);
IkReal x14495=((1.0)*sj6);
IkReal x14496=((1.0)*cj7*sj8);
IkReal x14497=((1.0)*x14485);
IkReal x14498=(gconst67*x14484);
IkReal x14499=(r02*x14484);
IkReal x14500=((1.0)*gconst68*x14484);
IkReal x14501=(gconst67*r11*x14485);
IkReal x14502=(gconst67*r21*x14485);
evalcond[0]=((((-1.0)*x14495))+(((-1.0)*r02*x14497)));
evalcond[1]=(((r21*x14498))+(((-1.0)*r20*x14500)));
evalcond[2]=(cj6+((r11*x14498))+(((-1.0)*r10*x14500)));
evalcond[3]=((((-1.0)*x14488*x14490))+((cj6*x14491))+(((-1.0)*x14486*x14499)));
evalcond[4]=((((-1.0)*x14490*x14494))+(((-1.0)*cj7*sj8*x14490))+((cj9*x14499)));
evalcond[5]=(((sj9*x14487))+(((-1.0)*x14491))+((r21*x14492))+((cj9*x14502))+x14488+(((-1.0)*r20*x14489*x14497)));
evalcond[6]=((((-1.0)*x14494))+(((-1.0)*x14496))+((r21*x14489))+(((-1.0)*x14486*x14502))+((r20*x14485*x14492))+((cj9*x14487)));
evalcond[7]=(((r11*x14489))+(((-1.0)*x14488*x14495))+(((-1.0)*x14486*x14501))+((r10*x14485*x14492))+((sj6*x14491))+((cj9*x14493)));
evalcond[8]=(((r11*x14492))+((cj9*x14501))+(((-1.0)*x14494*x14495))+(((-1.0)*cj7*sj8*x14495))+(((-1.0)*r10*x14489*x14497))+((sj9*x14493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14503=((-1.0)*r10);
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal(x14503),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x14504.value))));
IkReal gconst70=x14503;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x14505 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11+(x14505.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
IkReal x14506=((-1.0)*r10);
IkReal x14507=((-1.0)*r11);
CheckValue<IkReal> x14509 = IKatan2WithCheck(IkReal(x14506),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14509.valid){
continue;
}
IkReal x14508=((1.0)*(x14509.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14506);
rxp1_1=(px*r21);
rxp1_2=(px*x14507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst70;
cj11=gconst71;
j11=((3.14159265)+(((-1.0)*x14508)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14508)));
IkReal gconst70=x14506;
IkReal gconst71=x14507;
j10eval[0]=cj9;
j10eval[1]=r02;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x14510=((-1.0)*r10);
IkReal x14511=((-1.0)*r11);
CheckValue<IkReal> x14513 = IKatan2WithCheck(IkReal(x14510),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14513.valid){
continue;
}
IkReal x14512=((1.0)*(x14513.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14510);
rxp1_1=(px*r21);
rxp1_2=(px*x14511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst70;
cj11=gconst71;
j11=((3.14159265)+(((-1.0)*x14512)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14512)));
IkReal gconst70=x14510;
IkReal gconst71=x14511;
j10eval[0]=r02;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x14514=((-1.0)*r10);
IkReal x14515=((-1.0)*r11);
CheckValue<IkReal> x14517 = IKatan2WithCheck(IkReal(x14514),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14517.valid){
continue;
}
IkReal x14516=((1.0)*(x14517.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14514);
rxp1_1=(px*r21);
rxp1_2=(px*x14515);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj11=gconst70;
cj11=gconst71;
j11=((3.14159265)+(((-1.0)*x14516)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x14516)));
IkReal gconst70=x14514;
IkReal gconst71=x14515;
IkReal x14518=((1.0)*cj9);
j10eval[0]=cj9;
j10eval[1]=r02;
j10eval[2]=((((-1.0)*r10*r21*x14518))+((r11*r20*x14518)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14519=((1.0)*r20);
CheckValue<IkReal> x14520=IKPowWithIntegerCheck(cj9,-1);
if(!x14520.valid){
continue;
}
CheckValue<IkReal> x14521=IKPowWithIntegerCheck(r02,-1);
if(!x14521.valid){
continue;
}
CheckValue<IkReal> x14522=IKPowWithIntegerCheck(((((-1.0)*cj9*gconst71*x14519))+((cj9*gconst70*r21))),-1);
if(!x14522.valid){
continue;
}
if( IKabs(((x14520.value)*(x14521.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14522.value)*((((cj7*cj8))+(((-1.0)*gconst71*r21*sj9))+(((-1.0)*gconst70*sj9*x14519))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14520.value)*(x14521.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((x14522.value)*((((cj7*cj8))+(((-1.0)*gconst71*r21*sj9))+(((-1.0)*gconst70*sj9*x14519))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14520.value)*(x14521.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((x14522.value)*((((cj7*cj8))+(((-1.0)*gconst71*r21*sj9))+(((-1.0)*gconst70*sj9*x14519))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14523=IKsin(j10);
IkReal x14524=IKcos(j10);
IkReal x14525=((1.0)*cj9);
IkReal x14526=(gconst70*r11);
IkReal x14527=((1.0)*sj7);
IkReal x14528=((1.0)*sj9);
IkReal x14529=(gconst70*r20);
IkReal x14530=(gconst71*r20);
IkReal x14531=(gconst70*r21);
IkReal x14532=(cj7*cj8);
IkReal x14533=(gconst71*sj9);
IkReal x14534=(gconst70*r10);
IkReal x14535=(cj9*gconst71);
IkReal x14536=(cj9*x14524);
IkReal x14537=(r02*x14523);
IkReal x14538=((1.0)*cj7*sj8);
IkReal x14539=((1.0)*x14523);
IkReal x14540=(gconst71*r10*x14524);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x14524)));
evalcond[1]=((((-1.0)*x14530*x14539))+((x14523*x14531)));
evalcond[2]=(cj6+((x14523*x14526))+(((-1.0)*gconst71*r10*x14539)));
evalcond[3]=(((cj6*x14532))+(((-1.0)*x14528*x14537))+(((-1.0)*cj6*sj8*x14527)));
evalcond[4]=(((cj9*x14537))+(((-1.0)*cj6*x14538))+(((-1.0)*cj6*cj8*x14527)));
evalcond[5]=((((-1.0)*x14532))+(((-1.0)*x14524*x14525*x14530))+((r21*x14533))+((sj7*sj8))+((x14531*x14536))+((sj9*x14529)));
evalcond[6]=((((-1.0)*x14538))+(((-1.0)*cj8*x14527))+((sj9*x14524*x14530))+((r21*x14535))+(((-1.0)*x14524*x14528*x14531))+((cj9*x14529)));
evalcond[7]=(((sj6*x14532))+((cj9*x14534))+((r11*x14535))+(((-1.0)*x14524*x14526*x14528))+((r10*x14524*x14533))+(((-1.0)*sj6*sj8*x14527)));
evalcond[8]=(((r11*x14533))+((x14526*x14536))+(((-1.0)*sj6*x14538))+(((-1.0)*cj8*sj6*x14527))+((sj9*x14534))+(((-1.0)*x14525*x14540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14542=IKPowWithIntegerCheck(r02,-1);
if(!x14542.valid){
continue;
}
IkReal x14541=x14542.value;
CheckValue<IkReal> x14543=IKPowWithIntegerCheck(sj9,-1);
if(!x14543.valid){
continue;
}
if( IKabs((x14541*(x14543.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x14541)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14541*(x14543.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8))))))+IKsqr(((-1.0)*sj6*x14541))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14541*(x14543.value)*((((cj6*cj7*cj8))+(((-1.0)*cj6*sj7*sj8))))), ((-1.0)*sj6*x14541));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14544=IKsin(j10);
IkReal x14545=IKcos(j10);
IkReal x14546=((1.0)*cj9);
IkReal x14547=(gconst70*r11);
IkReal x14548=((1.0)*sj7);
IkReal x14549=((1.0)*sj9);
IkReal x14550=(gconst70*r20);
IkReal x14551=(gconst71*r20);
IkReal x14552=(gconst70*r21);
IkReal x14553=(cj7*cj8);
IkReal x14554=(gconst71*sj9);
IkReal x14555=(gconst70*r10);
IkReal x14556=(cj9*gconst71);
IkReal x14557=(cj9*x14545);
IkReal x14558=(r02*x14544);
IkReal x14559=((1.0)*cj7*sj8);
IkReal x14560=((1.0)*x14544);
IkReal x14561=(gconst71*r10*x14545);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x14545)));
evalcond[1]=(((x14544*x14552))+(((-1.0)*x14551*x14560)));
evalcond[2]=(cj6+((x14544*x14547))+(((-1.0)*gconst71*r10*x14560)));
evalcond[3]=((((-1.0)*cj6*sj8*x14548))+((cj6*x14553))+(((-1.0)*x14549*x14558)));
evalcond[4]=((((-1.0)*cj6*cj8*x14548))+(((-1.0)*cj6*x14559))+((cj9*x14558)));
evalcond[5]=(((sj9*x14550))+((x14552*x14557))+(((-1.0)*x14553))+((sj7*sj8))+(((-1.0)*x14545*x14546*x14551))+((r21*x14554)));
evalcond[6]=((((-1.0)*x14545*x14549*x14552))+((cj9*x14550))+(((-1.0)*x14559))+(((-1.0)*cj8*x14548))+((sj9*x14545*x14551))+((r21*x14556)));
evalcond[7]=(((r10*x14545*x14554))+((cj9*x14555))+((sj6*x14553))+(((-1.0)*sj6*sj8*x14548))+((r11*x14556))+(((-1.0)*x14545*x14547*x14549)));
evalcond[8]=((((-1.0)*cj8*sj6*x14548))+((sj9*x14555))+((r11*x14554))+(((-1.0)*x14546*x14561))+(((-1.0)*sj6*x14559))+((x14547*x14557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14563=IKPowWithIntegerCheck(r02,-1);
if(!x14563.valid){
continue;
}
IkReal x14562=x14563.value;
CheckValue<IkReal> x14564=IKPowWithIntegerCheck(cj9,-1);
if(!x14564.valid){
continue;
}
if( IKabs((x14562*(x14564.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x14562)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14562*(x14564.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x14562))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14562*(x14564.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x14562));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14565=IKsin(j10);
IkReal x14566=IKcos(j10);
IkReal x14567=((1.0)*cj9);
IkReal x14568=(gconst70*r11);
IkReal x14569=((1.0)*sj7);
IkReal x14570=((1.0)*sj9);
IkReal x14571=(gconst70*r20);
IkReal x14572=(gconst71*r20);
IkReal x14573=(gconst70*r21);
IkReal x14574=(cj7*cj8);
IkReal x14575=(gconst71*sj9);
IkReal x14576=(gconst70*r10);
IkReal x14577=(cj9*gconst71);
IkReal x14578=(cj9*x14566);
IkReal x14579=(r02*x14565);
IkReal x14580=((1.0)*cj7*sj8);
IkReal x14581=((1.0)*x14565);
IkReal x14582=(gconst71*r10*x14566);
evalcond[0]=((((-1.0)*sj6))+(((-1.0)*r02*x14566)));
evalcond[1]=((((-1.0)*x14572*x14581))+((x14565*x14573)));
evalcond[2]=(cj6+(((-1.0)*gconst71*r10*x14581))+((x14565*x14568)));
evalcond[3]=((((-1.0)*x14570*x14579))+((cj6*x14574))+(((-1.0)*cj6*sj8*x14569)));
evalcond[4]=(((cj9*x14579))+(((-1.0)*cj6*x14580))+(((-1.0)*cj6*cj8*x14569)));
evalcond[5]=(((r21*x14575))+((sj9*x14571))+((x14573*x14578))+(((-1.0)*x14574))+((sj7*sj8))+(((-1.0)*x14566*x14567*x14572)));
evalcond[6]=(((r21*x14577))+(((-1.0)*x14580))+((sj9*x14566*x14572))+((cj9*x14571))+(((-1.0)*x14566*x14570*x14573))+(((-1.0)*cj8*x14569)));
evalcond[7]=((((-1.0)*x14566*x14568*x14570))+((r10*x14566*x14575))+(((-1.0)*sj6*sj8*x14569))+((sj6*x14574))+((cj9*x14576))+((r11*x14577)));
evalcond[8]=(((sj9*x14576))+(((-1.0)*x14567*x14582))+((x14568*x14578))+(((-1.0)*cj8*sj6*x14569))+((r11*x14575))+(((-1.0)*sj6*x14580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14584=IKPowWithIntegerCheck(r02,-1);
if(!x14584.valid){
continue;
}
IkReal x14583=x14584.value;
CheckValue<IkReal> x14585=IKPowWithIntegerCheck(cj9,-1);
if(!x14585.valid){
continue;
}
if( IKabs((x14583*(x14585.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*x14583)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14583*(x14585.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))))+IKsqr(((-1.0)*sj6*x14583))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14583*(x14585.value)*((((cj6*cj8*sj7))+((cj6*cj7*sj8))))), ((-1.0)*sj6*x14583));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14586=IKsin(j10);
IkReal x14587=IKcos(j10);
IkReal x14588=(r11*sj11);
IkReal x14589=(cj11*sj9);
IkReal x14590=((1.0)*sj9);
IkReal x14591=(sj7*sj8);
IkReal x14592=((1.0)*cj6);
IkReal x14593=(cj7*cj8);
IkReal x14594=((1.0)*sj6);
IkReal x14595=(sj11*sj9);
IkReal x14596=(cj9*r10);
IkReal x14597=(cj9*r20);
IkReal x14598=(cj8*sj7);
IkReal x14599=(r21*sj11);
IkReal x14600=(cj11*cj9);
IkReal x14601=(r02*x14586);
IkReal x14602=((1.0)*cj7*sj8);
IkReal x14603=(cj9*x14587);
IkReal x14604=((1.0)*cj11*x14587);
IkReal x14605=((1.0)*cj11*x14586);
evalcond[0]=((((-1.0)*x14594))+(((-1.0)*r02*x14587)));
evalcond[1]=((((-1.0)*r20*x14605))+((x14586*x14599)));
evalcond[2]=(cj6+(((-1.0)*r10*x14605))+((x14586*x14588)));
evalcond[3]=(((cj6*x14593))+(((-1.0)*x14590*x14601))+(((-1.0)*x14591*x14592)));
evalcond[4]=(((cj9*x14601))+(((-1.0)*x14592*x14598))+(((-1.0)*cj7*sj8*x14592)));
evalcond[5]=(((r20*x14595))+(((-1.0)*x14593))+((r21*x14589))+x14591+((x14599*x14603))+(((-1.0)*x14597*x14604)));
evalcond[6]=((((-1.0)*x14587*x14590*x14599))+((r20*x14587*x14589))+((r21*x14600))+(((-1.0)*x14598))+((sj11*x14597))+(((-1.0)*x14602)));
evalcond[7]=(((r10*x14587*x14589))+(((-1.0)*x14587*x14588*x14590))+((sj11*x14596))+((sj6*x14593))+((r11*x14600))+(((-1.0)*x14591*x14594)));
evalcond[8]=(((x14588*x14603))+(((-1.0)*x14594*x14598))+(((-1.0)*cj7*sj8*x14594))+((r10*x14595))+((r11*x14589))+(((-1.0)*x14596*x14604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14606=((1.0)*sj9);
IkReal x14607=((1.0)*cj11);
CheckValue<IkReal> x14608=IKPowWithIntegerCheck((((r11*sj11))+(((-1.0)*r10*x14607))),-1);
if(!x14608.valid){
continue;
}
CheckValue<IkReal> x14609=IKPowWithIntegerCheck(((((-1.0)*cj9*r20*x14607))+((cj9*r21*sj11))),-1);
if(!x14609.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x14608.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14609.value)*((((cj7*cj8))+(((-1.0)*r20*sj11*x14606))+(((-1.0)*cj11*r21*x14606))+(((-1.0)*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x14608.value)))+IKsqr(((x14609.value)*((((cj7*cj8))+(((-1.0)*r20*sj11*x14606))+(((-1.0)*cj11*r21*x14606))+(((-1.0)*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x14608.value)), ((x14609.value)*((((cj7*cj8))+(((-1.0)*r20*sj11*x14606))+(((-1.0)*cj11*r21*x14606))+(((-1.0)*sj7*sj8))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14610=IKsin(j10);
IkReal x14611=IKcos(j10);
IkReal x14612=(r11*sj11);
IkReal x14613=(cj11*sj9);
IkReal x14614=((1.0)*sj9);
IkReal x14615=(sj7*sj8);
IkReal x14616=((1.0)*cj6);
IkReal x14617=(cj7*cj8);
IkReal x14618=((1.0)*sj6);
IkReal x14619=(sj11*sj9);
IkReal x14620=(cj9*r10);
IkReal x14621=(cj9*r20);
IkReal x14622=(cj8*sj7);
IkReal x14623=(r21*sj11);
IkReal x14624=(cj11*cj9);
IkReal x14625=(r02*x14610);
IkReal x14626=((1.0)*cj7*sj8);
IkReal x14627=(cj9*x14611);
IkReal x14628=((1.0)*cj11*x14611);
IkReal x14629=((1.0)*cj11*x14610);
evalcond[0]=((((-1.0)*r02*x14611))+(((-1.0)*x14618)));
evalcond[1]=((((-1.0)*r20*x14629))+((x14610*x14623)));
evalcond[2]=((((-1.0)*r10*x14629))+cj6+((x14610*x14612)));
evalcond[3]=((((-1.0)*x14615*x14616))+(((-1.0)*x14614*x14625))+((cj6*x14617)));
evalcond[4]=((((-1.0)*cj7*sj8*x14616))+((cj9*x14625))+(((-1.0)*x14616*x14622)));
evalcond[5]=(((x14623*x14627))+((r21*x14613))+(((-1.0)*x14621*x14628))+(((-1.0)*x14617))+x14615+((r20*x14619)));
evalcond[6]=(((r21*x14624))+((r20*x14611*x14613))+(((-1.0)*x14626))+((sj11*x14621))+(((-1.0)*x14622))+(((-1.0)*x14611*x14614*x14623)));
evalcond[7]=((((-1.0)*x14615*x14618))+((r11*x14624))+((sj11*x14620))+((sj6*x14617))+(((-1.0)*x14611*x14612*x14614))+((r10*x14611*x14613)));
evalcond[8]=((((-1.0)*x14618*x14622))+(((-1.0)*x14620*x14628))+((r10*x14619))+(((-1.0)*cj7*sj8*x14618))+((x14612*x14627))+((r11*x14613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14630=IKPowWithIntegerCheck(((((-1.0)*cj11*r10))+((r11*sj11))),-1);
if(!x14630.valid){
continue;
}
CheckValue<IkReal> x14631=IKPowWithIntegerCheck(r02,-1);
if(!x14631.valid){
continue;
}
if( IKabs(((-1.0)*cj6*(x14630.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj6*(x14631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj6*(x14630.value)))+IKsqr(((-1.0)*sj6*(x14631.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*cj6*(x14630.value)), ((-1.0)*sj6*(x14631.value)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14632=IKsin(j10);
IkReal x14633=IKcos(j10);
IkReal x14634=(r11*sj11);
IkReal x14635=(cj11*sj9);
IkReal x14636=((1.0)*sj9);
IkReal x14637=(sj7*sj8);
IkReal x14638=((1.0)*cj6);
IkReal x14639=(cj7*cj8);
IkReal x14640=((1.0)*sj6);
IkReal x14641=(sj11*sj9);
IkReal x14642=(cj9*r10);
IkReal x14643=(cj9*r20);
IkReal x14644=(cj8*sj7);
IkReal x14645=(r21*sj11);
IkReal x14646=(cj11*cj9);
IkReal x14647=(r02*x14632);
IkReal x14648=((1.0)*cj7*sj8);
IkReal x14649=(cj9*x14633);
IkReal x14650=((1.0)*cj11*x14633);
IkReal x14651=((1.0)*cj11*x14632);
evalcond[0]=((((-1.0)*r02*x14633))+(((-1.0)*x14640)));
evalcond[1]=(((x14632*x14645))+(((-1.0)*r20*x14651)));
evalcond[2]=(cj6+(((-1.0)*r10*x14651))+((x14632*x14634)));
evalcond[3]=((((-1.0)*x14636*x14647))+(((-1.0)*x14637*x14638))+((cj6*x14639)));
evalcond[4]=((((-1.0)*cj7*sj8*x14638))+(((-1.0)*x14638*x14644))+((cj9*x14647)));
evalcond[5]=(((x14645*x14649))+x14637+((r20*x14641))+(((-1.0)*x14639))+(((-1.0)*x14643*x14650))+((r21*x14635)));
evalcond[6]=(((sj11*x14643))+(((-1.0)*x14644))+(((-1.0)*x14633*x14636*x14645))+((r20*x14633*x14635))+((r21*x14646))+(((-1.0)*x14648)));
evalcond[7]=(((r11*x14646))+(((-1.0)*x14637*x14640))+(((-1.0)*x14633*x14634*x14636))+((sj11*x14642))+((sj6*x14639))+((r10*x14633*x14635)));
evalcond[8]=(((r10*x14641))+(((-1.0)*x14642*x14650))+(((-1.0)*x14640*x14644))+(((-1.0)*cj7*sj8*x14640))+((r11*x14635))+((x14634*x14649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14652=((1.0)*sj11);
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*r21))+(((-1.0)*r20*x14652)))),-1);
if(!x14653.valid){
continue;
}
CheckValue<IkReal> x14654 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r02))+(((-1.0)*r12*sj6)))),IkReal(((((-1.0)*cj6*r01*x14652))+(((-1.0)*r11*sj6*x14652))+((cj11*cj6*r00))+((cj11*r10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14654.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14653.value)))+(x14654.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14655=IKsin(j10);
IkReal x14656=IKcos(j10);
IkReal x14657=(r11*sj11);
IkReal x14658=(cj11*sj9);
IkReal x14659=((1.0)*sj9);
IkReal x14660=(sj7*sj8);
IkReal x14661=((1.0)*cj6);
IkReal x14662=(cj7*cj8);
IkReal x14663=(cj9*sj11);
IkReal x14664=(cj11*r00);
IkReal x14665=((1.0)*sj6);
IkReal x14666=(sj11*sj9);
IkReal x14667=(cj11*cj9);
IkReal x14668=(cj8*sj7);
IkReal x14669=(r21*sj11);
IkReal x14670=(r02*x14655);
IkReal x14671=((1.0)*cj7*sj8);
IkReal x14672=((1.0)*x14656);
IkReal x14673=(r22*x14655);
IkReal x14674=(r12*x14655);
IkReal x14675=(r01*x14656);
IkReal x14676=((1.0)*x14655);
evalcond[0]=((((-1.0)*r22*x14672))+((x14655*x14669))+(((-1.0)*cj11*r20*x14676)));
evalcond[1]=(cj6+((x14655*x14657))+(((-1.0)*cj11*r10*x14676))+(((-1.0)*r12*x14672)));
evalcond[2]=(((r01*sj11*x14655))+(((-1.0)*r02*x14672))+(((-1.0)*x14664*x14676))+(((-1.0)*x14665)));
evalcond[3]=(((r21*x14656*x14663))+(((-1.0)*r20*x14667*x14672))+(((-1.0)*x14662))+x14660+((r21*x14658))+((cj9*x14673))+((r20*x14666)));
evalcond[4]=((((-1.0)*x14671))+((r21*x14667))+(((-1.0)*x14659*x14673))+(((-1.0)*x14656*x14659*x14669))+(((-1.0)*x14668))+((r20*x14656*x14658))+((r20*x14663)));
evalcond[5]=((((-1.0)*x14660*x14661))+(((-1.0)*x14659*x14670))+((r00*x14663))+((r01*x14667))+(((-1.0)*sj11*x14659*x14675))+((cj6*x14662))+((r00*x14656*x14658)));
evalcond[6]=(((x14663*x14675))+(((-1.0)*cj7*sj8*x14661))+(((-1.0)*x14661*x14668))+((r01*x14658))+((r00*x14666))+(((-1.0)*cj9*x14664*x14672))+((cj9*x14670)));
evalcond[7]=(((r10*x14656*x14658))+(((-1.0)*x14660*x14665))+((r10*x14663))+(((-1.0)*x14659*x14674))+((r11*x14667))+(((-1.0)*x14656*x14657*x14659))+((sj6*x14662)));
evalcond[8]=(((cj9*x14656*x14657))+(((-1.0)*r10*x14667*x14672))+((r10*x14666))+(((-1.0)*cj7*sj8*x14665))+(((-1.0)*x14665*x14668))+((r11*x14658))+((cj9*x14674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14677=((1.0)*cj11);
CheckValue<IkReal> x14678 = IKatan2WithCheck(IkReal((r22*sj6)),IkReal(((((-1.0)*r20*sj6*x14677))+((r21*sj11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14678.valid){
continue;
}
CheckValue<IkReal> x14679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14677))+(((-1.0)*r10*sj11)))),-1);
if(!x14679.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14678.value)+(((1.5707963267949)*(x14679.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14680=IKsin(j10);
IkReal x14681=IKcos(j10);
IkReal x14682=(r11*sj11);
IkReal x14683=(cj11*sj9);
IkReal x14684=((1.0)*sj9);
IkReal x14685=(sj7*sj8);
IkReal x14686=((1.0)*cj6);
IkReal x14687=(cj7*cj8);
IkReal x14688=(cj9*sj11);
IkReal x14689=(cj11*r00);
IkReal x14690=((1.0)*sj6);
IkReal x14691=(sj11*sj9);
IkReal x14692=(cj11*cj9);
IkReal x14693=(cj8*sj7);
IkReal x14694=(r21*sj11);
IkReal x14695=(r02*x14680);
IkReal x14696=((1.0)*cj7*sj8);
IkReal x14697=((1.0)*x14681);
IkReal x14698=(r22*x14680);
IkReal x14699=(r12*x14680);
IkReal x14700=(r01*x14681);
IkReal x14701=((1.0)*x14680);
evalcond[0]=(((x14680*x14694))+(((-1.0)*cj11*r20*x14701))+(((-1.0)*r22*x14697)));
evalcond[1]=(cj6+((x14680*x14682))+(((-1.0)*cj11*r10*x14701))+(((-1.0)*r12*x14697)));
evalcond[2]=((((-1.0)*r02*x14697))+(((-1.0)*x14690))+(((-1.0)*x14689*x14701))+((r01*sj11*x14680)));
evalcond[3]=(((r21*x14681*x14688))+(((-1.0)*r20*x14692*x14697))+((r20*x14691))+((cj9*x14698))+x14685+((r21*x14683))+(((-1.0)*x14687)));
evalcond[4]=((((-1.0)*x14684*x14698))+((r20*x14688))+(((-1.0)*x14696))+(((-1.0)*x14681*x14684*x14694))+((r20*x14681*x14683))+(((-1.0)*x14693))+((r21*x14692)));
evalcond[5]=(((r00*x14688))+(((-1.0)*x14684*x14695))+((r01*x14692))+((cj6*x14687))+((r00*x14681*x14683))+(((-1.0)*sj11*x14684*x14700))+(((-1.0)*x14685*x14686)));
evalcond[6]=(((r00*x14691))+((r01*x14683))+(((-1.0)*x14686*x14693))+(((-1.0)*cj9*x14689*x14697))+((cj9*x14695))+((x14688*x14700))+(((-1.0)*cj7*sj8*x14686)));
evalcond[7]=((((-1.0)*x14684*x14699))+((r11*x14692))+(((-1.0)*x14681*x14682*x14684))+((sj6*x14687))+(((-1.0)*x14685*x14690))+((r10*x14681*x14683))+((r10*x14688)));
evalcond[8]=((((-1.0)*r10*x14692*x14697))+((cj9*x14681*x14682))+((r11*x14683))+((cj9*x14699))+((r10*x14691))+(((-1.0)*x14690*x14693))+(((-1.0)*cj7*sj8*x14690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14702=((1.0)*cj11);
CheckValue<IkReal> x14703 = IKatan2WithCheck(IkReal((cj6*r22)),IkReal((((cj6*r21*sj11))+(((-1.0)*cj6*r20*x14702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14703.valid){
continue;
}
CheckValue<IkReal> x14704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj11))+(((-1.0)*r01*x14702)))),-1);
if(!x14704.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14703.value)+(((1.5707963267949)*(x14704.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[9];
IkReal x14705=IKsin(j10);
IkReal x14706=IKcos(j10);
IkReal x14707=(r11*sj11);
IkReal x14708=(cj11*sj9);
IkReal x14709=((1.0)*sj9);
IkReal x14710=(sj7*sj8);
IkReal x14711=((1.0)*cj6);
IkReal x14712=(cj7*cj8);
IkReal x14713=(cj9*sj11);
IkReal x14714=(cj11*r00);
IkReal x14715=((1.0)*sj6);
IkReal x14716=(sj11*sj9);
IkReal x14717=(cj11*cj9);
IkReal x14718=(cj8*sj7);
IkReal x14719=(r21*sj11);
IkReal x14720=(r02*x14705);
IkReal x14721=((1.0)*cj7*sj8);
IkReal x14722=((1.0)*x14706);
IkReal x14723=(r22*x14705);
IkReal x14724=(r12*x14705);
IkReal x14725=(r01*x14706);
IkReal x14726=((1.0)*x14705);
evalcond[0]=((((-1.0)*cj11*r20*x14726))+((x14705*x14719))+(((-1.0)*r22*x14722)));
evalcond[1]=((((-1.0)*r12*x14722))+cj6+((x14705*x14707))+(((-1.0)*cj11*r10*x14726)));
evalcond[2]=((((-1.0)*x14715))+(((-1.0)*r02*x14722))+(((-1.0)*x14714*x14726))+((r01*sj11*x14705)));
evalcond[3]=(((r20*x14716))+((cj9*x14723))+((r21*x14708))+(((-1.0)*x14712))+x14710+(((-1.0)*r20*x14717*x14722))+((r21*x14706*x14713)));
evalcond[4]=(((r20*x14713))+((r21*x14717))+((r20*x14706*x14708))+(((-1.0)*x14706*x14709*x14719))+(((-1.0)*x14718))+(((-1.0)*x14721))+(((-1.0)*x14709*x14723)));
evalcond[5]=((((-1.0)*sj11*x14709*x14725))+((r00*x14713))+((r01*x14717))+(((-1.0)*x14709*x14720))+(((-1.0)*x14710*x14711))+((r00*x14706*x14708))+((cj6*x14712)));
evalcond[6]=(((r01*x14708))+((x14713*x14725))+((cj9*x14720))+(((-1.0)*cj7*sj8*x14711))+(((-1.0)*cj9*x14714*x14722))+((r00*x14716))+(((-1.0)*x14711*x14718)));
evalcond[7]=((((-1.0)*x14706*x14707*x14709))+((r11*x14717))+((sj6*x14712))+((r10*x14706*x14708))+((r10*x14713))+(((-1.0)*x14709*x14724))+(((-1.0)*x14710*x14715)));
evalcond[8]=(((cj9*x14706*x14707))+((cj9*x14724))+(((-1.0)*cj7*sj8*x14715))+(((-1.0)*x14715*x14718))+((r11*x14708))+((r10*x14716))+(((-1.0)*r10*x14717*x14722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14727=cj11*cj11;
IkReal x14728=r21*r21;
IkReal x14729=r20*r20;
IkReal x14730=(sj7*sj8);
IkReal x14731=(r21*sj11);
IkReal x14732=(cj11*sj9);
IkReal x14733=(cj11*r20);
IkReal x14734=((1.0)*cj9);
IkReal x14735=(r20*r21*sj9);
IkReal x14736=((1.0)*cj7*cj8);
CheckValue<IkReal> x14737 = IKatan2WithCheck(IkReal((((r22*x14730))+((r20*r22*sj11*sj9))+(((-1.0)*r22*x14736))+((r21*r22*x14732)))),IkReal(((((-1.0)*sj11*x14729*x14732))+((cj7*cj8*x14733))+(((-1.0)*x14730*x14733))+((sj11*x14728*x14732))+(((-2.0)*x14727*x14735))+x14735+((x14730*x14731))+(((-1.0)*x14731*x14736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14737.valid){
continue;
}
CheckValue<IkReal> x14738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14728*x14734))+(((-1.0)*x14727*x14729*x14734))+(((-1.0)*x14734*(r22*r22)))+((cj9*x14727*x14728))+(((2.0)*cj9*x14731*x14733)))),-1);
if(!x14738.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14737.value)+(((1.5707963267949)*(x14738.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x14739=IKsin(j10);
IkReal x14740=IKcos(j10);
IkReal x14741=(r21*sj11);
IkReal x14742=(cj11*cj9);
IkReal x14743=(r20*sj11);
IkReal x14744=((1.0)*cj8);
IkReal x14745=(cj11*r20);
IkReal x14746=((1.0)*x14740);
IkReal x14747=((1.0)*x14739);
evalcond[0]=((((-1.0)*r22*x14746))+(((-1.0)*x14745*x14747))+((x14739*x14741)));
evalcond[1]=(((cj9*x14740*x14741))+((sj9*x14743))+((cj9*r22*x14739))+(((-1.0)*cj7*x14744))+((cj11*r21*sj9))+(((-1.0)*r20*x14742*x14746))+((sj7*sj8)));
evalcond[2]=(((sj9*x14740*x14745))+((r21*x14742))+(((-1.0)*sj9*x14741*x14746))+(((-1.0)*cj7*sj8))+((cj9*x14743))+(((-1.0)*r22*sj9*x14747))+(((-1.0)*sj7*x14744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x14748=((1.0)*sj10);
if( IKabs(((((-1.0)*cj11*r00*x14748))+((r01*sj10*sj11))+(((-1.0)*cj10*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x14748))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r00*x14748))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))))+IKsqr(((((-1.0)*r11*sj11*x14748))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj11*r00*x14748))+((r01*sj10*sj11))+(((-1.0)*cj10*r02))), ((((-1.0)*r11*sj11*x14748))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x14749=IKcos(j6);
IkReal x14750=IKsin(j6);
IkReal x14751=((1.0)*cj10);
IkReal x14752=(cj11*r10);
IkReal x14753=(r11*sj11);
IkReal x14754=((1.0)*sj10);
IkReal x14755=((1.0)*cj8);
IkReal x14756=(cj9*sj10);
IkReal x14757=(cj10*sj9);
IkReal x14758=(cj10*cj9);
IkReal x14759=(r01*sj11);
IkReal x14760=(cj11*r00);
IkReal x14761=((1.0)*sj8);
IkReal x14762=((0.39225)*sj8);
IkReal x14763=((0.09465)*cj11);
IkReal x14764=(r00*sj11);
IkReal x14765=(cj11*cj9);
IkReal x14766=(r10*sj11);
IkReal x14767=(cj11*sj9);
IkReal x14768=((0.39225)*cj8*sj7);
IkReal x14769=(cj7*x14749);
IkReal x14770=(sj7*x14750);
IkReal x14771=(cj7*x14750);
IkReal x14772=(sj7*x14749);
evalcond[0]=((((-1.0)*r12*x14751))+(((-1.0)*x14752*x14754))+x14749+((sj10*x14753)));
evalcond[1]=((((-1.0)*r02*x14751))+(((-1.0)*x14754*x14760))+((sj10*x14759))+(((-1.0)*x14750)));
evalcond[2]=((((-1.0)*r01*x14763))+((x14762*x14769))+((x14749*x14768))+(((-1.0)*px))+(((0.425)*x14772))+(((-0.09465)*x14764))+(((-0.10915)*x14750)));
evalcond[3]=((((0.10915)*x14749))+((x14750*x14768))+((x14762*x14771))+(((-1.0)*r11*x14763))+(((-1.0)*py))+(((0.425)*x14770))+(((-0.09465)*x14766)));
evalcond[4]=((((-1.0)*sj9*x14751*x14759))+((r01*x14765))+(((-1.0)*r02*sj9*x14754))+(((-1.0)*x14761*x14772))+((cj8*x14769))+((cj9*x14764))+((x14757*x14760)));
evalcond[5]=(((r01*x14767))+((r02*x14756))+((sj9*x14764))+(((-1.0)*x14761*x14769))+((x14758*x14759))+(((-1.0)*cj9*x14751*x14760))+(((-1.0)*x14755*x14772)));
evalcond[6]=((((-1.0)*r12*sj9*x14754))+(((-1.0)*sj9*x14751*x14753))+(((-1.0)*x14761*x14770))+((r11*x14765))+((cj9*x14766))+((x14752*x14757))+((cj8*x14771)));
evalcond[7]=((((-1.0)*cj9*x14751*x14752))+(((-1.0)*x14761*x14771))+((r11*x14767))+((sj9*x14766))+((r12*x14756))+((x14753*x14758))+(((-1.0)*x14755*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14773=cj11*cj11;
IkReal x14774=r21*r21;
IkReal x14775=r20*r20;
IkReal x14776=(cj11*r20);
IkReal x14777=(cj7*sj8);
IkReal x14778=(cj8*sj7);
IkReal x14779=(cj9*sj11);
IkReal x14780=((1.0)*r22);
IkReal x14781=(cj9*r20*r21);
IkReal x14782=(sj9*x14774);
IkReal x14783=((1.0)*r21*sj11);
CheckValue<IkReal> x14784 = IKatan2WithCheck(IkReal(((((-1.0)*x14777*x14780))+((r20*r22*x14779))+(((-1.0)*x14778*x14780))+((cj11*cj9*r21*r22)))),IkReal(((((-2.0)*x14773*x14781))+(((-1.0)*x14777*x14783))+((x14776*x14778))+((x14776*x14777))+(((-1.0)*cj11*x14775*x14779))+(((-1.0)*x14778*x14783))+x14781+((cj11*x14774*x14779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14784.valid){
continue;
}
CheckValue<IkReal> x14785=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj11*sj9*x14776))+((sj9*x14773*x14775))+(((-1.0)*x14773*x14782))+x14782+((sj9*(r22*r22))))),-1);
if(!x14785.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14784.value)+(((1.5707963267949)*(x14785.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x14786=IKsin(j10);
IkReal x14787=IKcos(j10);
IkReal x14788=(r21*sj11);
IkReal x14789=(cj11*cj9);
IkReal x14790=(r20*sj11);
IkReal x14791=((1.0)*cj8);
IkReal x14792=(cj11*r20);
IkReal x14793=((1.0)*x14787);
IkReal x14794=((1.0)*x14786);
evalcond[0]=((((-1.0)*x14792*x14794))+((x14786*x14788))+(((-1.0)*r22*x14793)));
evalcond[1]=((((-1.0)*cj7*x14791))+((cj9*x14787*x14788))+((cj11*r21*sj9))+((sj9*x14790))+((cj9*r22*x14786))+((sj7*sj8))+(((-1.0)*r20*x14789*x14793)));
evalcond[2]=((((-1.0)*sj9*x14788*x14793))+(((-1.0)*sj7*x14791))+((r21*x14789))+((sj9*x14787*x14792))+(((-1.0)*cj7*sj8))+((cj9*x14790))+(((-1.0)*r22*sj9*x14794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x14795=((1.0)*sj10);
if( IKabs((((r01*sj10*sj11))+(((-1.0)*cj10*r02))+(((-1.0)*cj11*r00*x14795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj11*x14795))+((cj11*r10*sj10))+((cj10*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj10*sj11))+(((-1.0)*cj10*r02))+(((-1.0)*cj11*r00*x14795))))+IKsqr(((((-1.0)*r11*sj11*x14795))+((cj11*r10*sj10))+((cj10*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*sj10*sj11))+(((-1.0)*cj10*r02))+(((-1.0)*cj11*r00*x14795))), ((((-1.0)*r11*sj11*x14795))+((cj11*r10*sj10))+((cj10*r12))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x14796=IKcos(j6);
IkReal x14797=IKsin(j6);
IkReal x14798=((1.0)*cj10);
IkReal x14799=(cj11*r10);
IkReal x14800=(r11*sj11);
IkReal x14801=((1.0)*sj10);
IkReal x14802=((1.0)*cj8);
IkReal x14803=(cj9*sj10);
IkReal x14804=(cj10*sj9);
IkReal x14805=(cj10*cj9);
IkReal x14806=(r01*sj11);
IkReal x14807=(cj11*r00);
IkReal x14808=((1.0)*sj8);
IkReal x14809=((0.39225)*sj8);
IkReal x14810=((0.09465)*cj11);
IkReal x14811=(r00*sj11);
IkReal x14812=(cj11*cj9);
IkReal x14813=(r10*sj11);
IkReal x14814=(cj11*sj9);
IkReal x14815=((0.39225)*cj8*sj7);
IkReal x14816=(cj7*x14796);
IkReal x14817=(sj7*x14797);
IkReal x14818=(cj7*x14797);
IkReal x14819=(sj7*x14796);
evalcond[0]=((((-1.0)*x14799*x14801))+((sj10*x14800))+(((-1.0)*r12*x14798))+x14796);
evalcond[1]=((((-1.0)*r02*x14798))+((sj10*x14806))+(((-1.0)*x14801*x14807))+(((-1.0)*x14797)));
evalcond[2]=((((-0.09465)*x14811))+(((-1.0)*r01*x14810))+(((-0.10915)*x14797))+((x14796*x14815))+(((0.425)*x14819))+((x14809*x14816))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x14813))+((x14797*x14815))+(((0.425)*x14817))+((x14809*x14818))+(((-1.0)*r11*x14810))+(((-1.0)*py))+(((0.10915)*x14796)));
evalcond[4]=((((-1.0)*sj9*x14798*x14806))+((cj8*x14816))+((cj9*x14811))+(((-1.0)*r02*sj9*x14801))+(((-1.0)*x14808*x14819))+((r01*x14812))+((x14804*x14807)));
evalcond[5]=(((sj9*x14811))+(((-1.0)*x14802*x14819))+(((-1.0)*cj9*x14798*x14807))+(((-1.0)*x14808*x14816))+((r01*x14814))+((x14805*x14806))+((r02*x14803)));
evalcond[6]=((((-1.0)*sj9*x14798*x14800))+((cj8*x14818))+((cj9*x14813))+((x14799*x14804))+(((-1.0)*x14808*x14817))+(((-1.0)*r12*sj9*x14801))+((r11*x14812)));
evalcond[7]=((((-1.0)*cj9*x14798*x14799))+((x14800*x14805))+((sj9*x14813))+(((-1.0)*x14802*x14817))+(((-1.0)*x14808*x14818))+((r11*x14814))+((r12*x14803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "04e10bbbf1f99db071fb8379b0e1a21f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
