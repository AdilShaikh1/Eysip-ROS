/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-25 08:22:37.334936
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((1.0)*x5);
x13=((0.1223)*x5);
x14=((1.0)*x6);
x15=((1.0)*x9);
x16=((0.09465)*x0);
x17=((0.1223)*x6);
x18=((0.425)*x1);
x19=((1.0)*x0);
x20=((0.39225)*x0);
x21=((0.09465)*x9);
x22=(x8*x9);
x23=((-1.0)*x8);
x24=(x1*x2);
x25=(x2*x3);
x26=(x0*x10);
x27=(x1*x4);
x28=(x0*x8);
x29=((1.0)*x3*x4);
x30=((0.09465)*x3*x4);
x31=(x25*x9);
x32=((((-1.0)*x29))+x24);
x33=((((1.0)*x25))+(((1.0)*x27)));
x34=(((x19*x24))+(((-1.0)*x19*x3*x4)));
x35=((((-1.0)*x15*x3*x4))+((x15*x24)));
x36=(x19*((x25+x27)));
x37=((-1.0)*x36);
x38=(x15*((x25+x27)));
x39=((-1.0)*x38);
x40=(x34*x6);
x41=(x37*x5);
x42=(((x33*x5))+((x6*(((((-1.0)*x24))+x29)))));
x43=((((-1.0)*x12*x32))+(((-1.0)*x14*x33)));
x44=(x40+x41);
x45=(((x34*x5))+((x36*x6)));
x46=(((x35*x6))+((x39*x5)));
x47=(((x35*x5))+((x38*x6)));
eerot[0]=(((x11*(((((-1.0)*x10*x9))+((x44*x8))))))+((x45*x7)));
eerot[1]=(((x11*x45))+((x7*((((x23*x44))+((x10*x15)))))));
eerot[2]=((((-1.0)*x15*x8))+((x10*(((((-1.0)*x12*x37))+(((-1.0)*x14*x34)))))));
IkReal x48=((1.0)*x16);
eetrans[0]=(((x0*x18))+((x10*(((((-1.0)*x17*x34))+(((-1.0)*x13*x37))))))+(((-0.10915)*x9))+((x5*((((x16*x3*x4))+(((-1.0)*x24*x48))))))+((x20*x27))+((x20*x25))+(((-0.1223)*x22))+((x6*(((((-1.0)*x27*x48))+(((-1.0)*x25*x48)))))));
eerot[3]=(((x47*x7))+((x11*((((x46*x8))+x26)))));
eerot[4]=(((x7*((((x23*x46))+(((-1.0)*x26))))))+((x11*x47)));
eerot[5]=(((x10*(((((-1.0)*x12*x39))+(((-1.0)*x14*x35))))))+x28);
IkReal x49=((1.0)*x21);
eetrans[1]=(((x18*x9))+(((0.39225)*x27*x9))+(((0.10915)*x0))+((x5*((((x21*x3*x4))+(((-1.0)*x24*x49))))))+((x10*(((((-1.0)*x17*x35))+(((-1.0)*x13*x39))))))+(((0.39225)*x31))+(((0.1223)*x28))+((x6*(((((-1.0)*x27*x49))+(((-1.0)*x25*x49)))))));
eerot[6]=(((x42*x7))+((x11*x8*((((x32*x5))+((x33*x6)))))));
eerot[7]=(((x11*x42))+((x43*x7*x8)));
eerot[8]=(x10*x43);
eetrans[2]=((0.089159)+(((0.425)*x3))+((x6*(((((-1.0)*x30))+(((0.09465)*x24))))))+(((0.39225)*x3*x4))+((x5*(((((-0.09465)*x25))+(((-0.09465)*x27))))))+((x10*(((((-1.0)*x17*x33))+(((-1.0)*x13*x32))))))+(((-0.39225)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1223)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.1223)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+(((-0.1223)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.1893)*npx);
IkReal x54=((0.1893)*npy);
IkReal x55=((0.09465)*r22);
IkReal x56=((0.09465)*r21);
IkReal x57=((-0.09465)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.09465)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=((1.7)*pz);
IkReal x68=(gclwh15_9*npx);
IkReal x69=(gclwh6_11*r21);
IkReal x70=((0.81725)*pp);
IkReal x71=(gclwh4_8*r22);
IkReal x72=(gclwh5_9*npz);
IkReal x73=(gclwh14_8*r20);
IkReal x74=((0.85)*pp);
IkReal x75=(npy*pz);
IkReal x76=(gclwh14_3*rxp0_2);
IkReal x77=((0.000977833645875)*r20);
IkReal x78=((0.00076243651125)*rxp1_2);
IkReal x79=((0.154705425)*rxp1_2);
IkReal x80=((0.017917245)*r21);
IkReal x81=(gclwh6_11*rxp1_2);
IkReal x82=(gclwh12_11*rxp1_2);
IkReal x83=(npz*pz);
IkReal x84=((2.0)*gclwh11_10);
IkReal x85=(gclwh12_8*r21);
IkReal x86=((0.2970117)*rxp1_2);
IkReal x87=(npx*pz);
IkReal x88=((2.0)*gclwh4_11);
IkReal x89=(gclwh10_11*rxp2_2);
IkReal x90=(gclwh5_9*rxp2_2);
IkReal x91=((0.020662095)*rxp1_2);
IkReal x92=((1.6345)*pz);
IkReal x93=(pp*r22);
IkReal x94=((0.14850585)*rxp0_2);
IkReal x95=(gclwh5_9*r22);
IkReal x96=(gclwh11_10*r22);
IkReal x97=((0.03275)*pp);
IkReal x98=(gclwh7_0*r21);
IkReal x99=(gclwh14_11*rxp0_2);
IkReal x100=(gclwh14_14*rxp0_2);
IkReal x101=((0.00195566729175)*r22);
IkReal x102=(gclwh15_10*rxp0_2);
IkReal x103=(gclwh12_8*rxp1_2);
IkReal x104=((2.0)*gclwh9_10);
IkReal x105=((0.1893)*rxp2_2);
IkReal x106=(pp*r20);
IkReal x107=((2.0)*gclwh15_10);
IkReal x108=(gclwh10_2*r22);
IkReal x109=(gclwh8_2*r20);
IkReal x110=(pp*r21);
IkReal x111=(gclwh5_15*rxp2_2);
IkReal x112=((2.0)*gclwh13_10);
IkReal x113=(gclwh9_0*r20);
IkReal x114=((0.000977833645875)*r22);
IkReal x115=(gclwh14_8*rxp0_2);
IkReal x116=((0.000977833645875)*r21);
IkReal x117=((0.0089586225)*r20);
IkReal x118=((2.0)*gclwh10_11);
IkReal x119=((4.0)*gclwh11_10);
IkReal x120=((0.00195566729175)*r20);
IkReal x121=(gclwh4_3*rxp2_2);
IkReal x122=((0.154705425)*rxp2_2);
IkReal x123=((1.0)*pz);
IkReal x124=(gclwh6_2*r21);
IkReal x125=(gclwh5_10*rxp2_2);
IkReal x126=((0.3786)*rxp0_2);
IkReal x127=((4.0)*gclwh8_11);
IkReal x128=((2.0)*gclwh7_10);
IkReal x129=((0.020662095)*rxp0_2);
IkReal x130=(gclwh13_9*r21);
IkReal x131=((0.00702803935125)*r20);
IkReal x132=((4.0)*gclwh9_10);
IkReal x133=((0.00195566729175)*r21);
IkReal x134=((0.3786)*rxp2_2);
IkReal x135=((0.00702803935125)*r22);
IkReal x136=((0.017917245)*r20);
IkReal x137=(gclwh15_9*r20);
IkReal x138=((4.0)*gclwh7_10);
IkReal x139=(gclwh7_10*rxp1_2);
IkReal x140=(gclwh6_12*r21);
IkReal x141=(gclwh5_1*rxp2_2);
IkReal x142=((0.0089586225)*r22);
IkReal x143=((0.14850585)*rxp1_2);
IkReal x144=((0.03583449)*r20);
IkReal x145=(gclwh15_15*rxp0_2);
IkReal x146=(gclwh15_1*rxp0_2);
IkReal x147=((0.0089586225)*r21);
IkReal x148=(gclwh10_11*r22);
IkReal x149=((2.0)*gclwh12_11);
IkReal x150=((0.2970117)*rxp2_2);
IkReal x151=((0.0655)*pz);
IkReal x152=((2.0)*gclwh5_10);
IkReal x153=((0.006199575)*rxp2_2);
IkReal x154=(gclwh12_14*rxp1_2);
IkReal x155=((0.01464286847625)*r22);
IkReal x156=(gclwh13_10*rxp1_2);
IkReal x157=(gclwh7_13*r21);
IkReal x158=((2.0)*gclwh8_11);
IkReal x159=(gclwh15_9*rxp0_2);
IkReal x160=((0.01464286847625)*r20);
IkReal x161=(gclwh15_0*rxp0_2);
IkReal x162=(gclwh13_9*rxp1_2);
IkReal x163=((4.0)*gclwh10_11);
IkReal x164=((0.020662095)*rxp2_2);
IkReal x165=((0.0089586225)*pz);
IkReal x166=(gclwh14_2*rxp0_2);
IkReal x167=((0.006199575)*rxp1_2);
IkReal x168=(gclwh11_0*pz);
IkReal x169=((0.14850585)*rxp2_2);
IkReal x170=(gclwh11_0*r22);
IkReal x171=(gclwh4_14*rxp2_2);
IkReal x172=((0.1893)*pz);
IkReal x173=((0.1893)*rxp0_2);
IkReal x174=(gclwh4_8*rxp2_2);
IkReal x175=((0.12699240901125)*rxp1_2);
IkReal x176=((0.1893)*pp);
IkReal x177=(gclwh13_15*rxp1_2);
IkReal x178=((0.017917245)*r22);
IkReal x179=((2.0)*gclwh14_11);
IkReal x180=(gclwh6_5*x116);
IkReal x181=(gclwh8_11*x117);
IkReal x182=((0.1893)*x99);
IkReal x183=(gclwh10_11*x142);
IkReal x184=((0.0089586225)*x69);
IkReal x185=(gclwh8_5*x77);
IkReal x186=((0.1893)*x82);
IkReal x187=(gclwh10_5*x114);
IkReal x188=(gclwh4_11*x105);
IkReal x189=((0.017917245)*x103);
IkReal x190=((0.020662095)*x100);
IkReal x191=((0.017917245)*x174);
IkReal x192=(gclwh12_14*x91);
IkReal x193=(gclwh4_14*x164);
IkReal x194=((0.017917245)*x115);
IkReal x195=((0.017917245)*x90);
IkReal x196=(gclwh13_15*x91);
IkReal x197=((0.020662095)*x111);
IkReal x198=((0.017917245)*x162);
IkReal x199=((0.017917245)*x159);
IkReal x200=(gclwh15_15*x129);
IkReal x201=((0.0089586225)*x96);
IkReal x202=(gclwh7_7*x116);
IkReal x203=((0.1893)*x102);
IkReal x204=(gclwh9_10*x117);
IkReal x205=(gclwh9_7*x77);
IkReal x206=((0.1893)*x156);
IkReal x207=(gclwh7_10*x147);
IkReal x208=(gclwh5_10*x105);
IkReal x209=(gclwh11_7*x114);
IkReal x210=((0.1893)*x81);
IkReal x211=(gclwh10_5*x164);
IkReal x212=(gclwh8_5*x129);
IkReal x213=(gclwh14_11*x117);
IkReal x214=(gclwh6_5*x91);
IkReal x215=(gclwh8_11*x173);
IkReal x216=(gclwh12_11*x147);
IkReal x217=((0.1893)*x89);
IkReal x218=(gclwh4_11*x142);
IkReal x219=(gclwh7_7*x91);
IkReal x220=(gclwh9_10*x173);
IkReal x221=(gclwh13_10*x147);
IkReal x222=(gclwh11_10*x105);
IkReal x223=(gclwh5_10*x142);
IkReal x224=((0.1893)*x139);
IkReal x225=(gclwh9_7*x129);
IkReal x226=(gclwh15_10*x117);
IkReal x227=(gclwh11_7*x164);
IkReal x228=((0.04132419)*x154);
IkReal x229=((0.04132419)*x171);
IkReal x230=((0.04132419)*x100);
IkReal x231=((0.017917245)*x148);
IkReal x232=((0.3786)*x99);
IkReal x233=(gclwh8_11*x136);
IkReal x234=(gclwh4_11*x134);
IkReal x235=((0.017917245)*x69);
IkReal x236=((0.3786)*x82);
IkReal x237=(gclwh7_10*x80);
IkReal x238=((0.3786)*x125);
IkReal x239=((0.3786)*x156);
IkReal x240=(gclwh9_10*x136);
IkReal x241=((0.3786)*x102);
IkReal x242=((0.017917245)*x96);
IkReal x243=((0.04132419)*x111);
IkReal x244=((0.04132419)*x177);
IkReal x245=((0.04132419)*x145);
IkReal x246=((2.0)*x66);
IkReal x247=(rxp1_2*x172);
IkReal x248=(rxp1_2*x176);
IkReal x249=((2.0)*gclwh6_11*x75);
IkReal x250=((0.2183)*gclwh10_5*x83);
IkReal x251=((0.2183)*gclwh8_5*x87);
IkReal x252=((0.10915)*gclwh6_5*x110);
IkReal x253=((0.2183)*gclwh6_5*x75);
IkReal x254=(x118*x83);
IkReal x255=((0.10915)*gclwh8_5*x106);
IkReal x256=(x158*x87);
IkReal x257=((0.10915)*gclwh10_5*x93);
IkReal x258=(gclwh12_3*x248);
IkReal x259=(x109*x165);
IkReal x260=(gclwh10_2*pz*x93);
IkReal x261=(x166*x172);
IkReal x262=(gclwh8_2*pz*x106);
IkReal x263=(gclwh4_3*pp*x105);
IkReal x264=(x108*x165);
IkReal x265=(gclwh12_2*x247);
IkReal x266=(gclwh4_2*pz*x105);
IkReal x267=(x176*x76);
IkReal x268=(x124*x165);
IkReal x269=(gclwh13_1*x248);
IkReal x270=(x142*x168);
IkReal x271=(x113*x165);
IkReal x272=(gclwh5_1*pp*x105);
IkReal x273=(x161*x172);
IkReal x274=(x168*x93);
IkReal x275=(gclwh9_0*pz*x106);
IkReal x276=(x146*x176);
IkReal x277=(x165*x98);
IkReal x278=(gclwh13_0*x247);
IkReal x279=(gclwh5_0*pz*x105);
IkReal x280=((0.10915)*gclwh7_7*x110);
IkReal x281=((0.2183)*gclwh9_7*x87);
IkReal x282=((0.2183)*gclwh11_7*x83);
IkReal x283=(x128*x75);
IkReal x284=(x83*x84);
IkReal x285=(x104*x87);
IkReal x286=((0.10915)*gclwh9_7*x106);
IkReal x287=((0.2183)*gclwh7_7*x75);
IkReal x288=((0.10915)*gclwh11_7*x93);
IkReal x289=(x83*x88);
IkReal x290=(x149*x75);
IkReal x291=(x179*x87);
IkReal x292=(x107*x87);
IkReal x293=(x152*x83);
IkReal x294=(x112*x75);
IkReal x295=(x106*x158);
IkReal x296=(x118*x93);
IkReal x297=((4.0)*gclwh6_11*x75);
IkReal x298=(x127*x87);
IkReal x299=((2.0)*pp*x69);
IkReal x300=(x163*x83);
IkReal x301=(x110*x128);
IkReal x302=(x132*x87);
IkReal x303=(x119*x83);
IkReal x304=(x84*x93);
IkReal x305=(x138*x75);
IkReal x306=(x104*x106);
IkReal x307=(gclwh6_2*npy*x246);
IkReal x308=(gclwh6_2*x110*x123);
IkReal x309=(gclwh10_2*npz*x246);
IkReal x310=(gclwh8_2*npx*x246);
IkReal x311=(gclwh7_0*npy*x246);
IkReal x312=(gclwh9_0*npx*x246);
IkReal x313=(gclwh11_0*npz*x246);
IkReal x314=(pp*x123*x98);
IkReal x315=(x243+x244);
IkReal x316=(x197+x196);
IkReal x317=(x211+x212);
IkReal x318=(x193+x192);
IkReal x319=(x229+x228);
IkReal x320=(x225+x227);
IkReal x321=(x181+x182+x183+x249);
IkReal x322=(x204+x203+x201+x283);
IkReal x323=(x210+x213+x290+x289);
IkReal x324=(x224+x226+x293+x294);
IkReal x325=(x180+x250+x251+x252);
IkReal x326=(x202+x282+x281+x280);
IkReal x327=(x215+x216+x217+x218+x291);
IkReal x328=(x221+x220+x223+x222+x292);
IkReal x329=(x184+x186+x188+x254+x256);
IkReal x330=(x207+x206+x208+x285+x284);
IkReal x331=(x185+x187+x255+x257+x253);
IkReal x332=(x205+x209+x288+x287+x286);
IkReal x333=(x300+x236+x234+x235+x298+x299);
IkReal x334=(x232+x233+x231+x295+x296+x297);
IkReal x335=(x306+x304+x305+x242+x241+x240);
IkReal x336=(x302+x303+x301+x238+x239+x237);
IkReal x337=(x199+x314+x313+x312+x276+x277+x278+x279);
IkReal x338=(x194+x308+x309+x310+x265+x267+x266+x268);
IkReal x339=(x198+x195+x311+x269+x274+x275+x272+x273+x270+x271);
IkReal x340=(x191+x189+x307+x258+x259+x264+x261+x260+x263+x262);
op[0]=((0.178405675)+(((-1.0)*gclwh12_8*x79))+((pp*x69))+(((-1.0)*gclwh10_11*x93))+(((-1.0)*gclwh8_11*x106))+(((-1.0)*x321))+x325+x329+(((-1.0)*gclwh4_8*x122))+(((0.154705425)*x115))+(((-1.0)*x331)));
op[1]=((((1.6345)*gclwh10_2*x83))+(((-1.0)*gclwh12_3*x175))+((gclwh12_2*x79))+(((-1.6345)*gclwh6_2*x75))+(((-1.0)*x109*x70))+(((-1.0)*x190))+((gclwh4_2*x122))+(((-0.154705425)*x166))+(((-1.0)*x108*x70))+(((-0.12699240901125)*x121))+x318+x340+(((1.6345)*gclwh8_2*x87))+(((0.007321434238125)*x124))+(((-0.007321434238125)*x109))+(((-0.007321434238125)*x108))+((x124*x70))+(((-1.0)*x338))+(((0.12699240901125)*x76)));
op[2]=((((1.569)*gclwh10_12*x83))+(((-1.0)*gclwh10_12*x135))+(((-1.0)*gclwh8_12*x131))+(((-0.7845)*gclwh10_12*x93))+x319+(((-1.0)*x230))+(((-0.7845)*gclwh8_12*x106))+(((0.7845)*gclwh6_12*x110))+(((0.00702803935125)*x140))+(((-1.569)*gclwh6_12*x75))+(((1.569)*gclwh8_12*x87)));
op[3]=((((-0.160905)*x115))+(((0.160905)*x174))+(((0.160905)*x103))+x334+(((-1.0)*x333)));
op[4]=((0.007149325)+((gclwh8_11*x106))+(((-1.0)*pp*x69))+(((-1.0)*x329))+((gclwh4_8*x153))+x325+x321+(((-0.006199575)*x115))+(((-1.0)*x331))+(((0.006199575)*x103))+((gclwh10_11*x93)));
op[5]=((((-0.006199575)*x166))+(((0.0655)*gclwh10_2*x83))+((x124*x97))+(((0.000293394886875)*x124))+x190+(((-0.000293394886875)*x109))+(((-0.000293394886875)*x108))+x340+(((-0.03275)*gclwh10_2*x93))+(((-1.0)*x318))+(((-0.00076243651125)*x121))+(((0.0655)*gclwh8_2*x87))+(((-0.0655)*gclwh6_2*x75))+(((0.00076243651125)*x76))+(((-1.0)*x338))+(((-1.0)*gclwh12_3*x78))+(((-1.0)*x109*x97))+((gclwh4_2*x153))+((gclwh12_2*x167)));
op[6]=((((0.12699240901125)*x146))+(((-1.0)*x113*x70))+((x70*x98))+(((-0.154705425)*x161))+(((-1.0)*gclwh13_1*x175))+x339+x200+((gclwh13_0*x79))+(((0.007321434238125)*x98))+(((-1.0)*x316))+(((1.6345)*gclwh9_0*x87))+(((-1.0)*x337))+(((-0.007321434238125)*x113))+(((-1.0)*x170*x70))+(((-1.6345)*gclwh7_0*x75))+(((-0.007321434238125)*x170))+(((-0.12699240901125)*x141))+(((1.6345)*gclwh11_0*x83))+((gclwh5_0*x122)));
op[7]=((0.178405675)+((gclwh7_10*x110))+(((-1.0)*gclwh9_10*x106))+(((-1.0)*gclwh13_9*x79))+(((-1.0)*x322))+(((0.154705425)*x159))+x330+x326+(((-1.0)*x332))+(((-0.154705425)*x90))+(((-1.0)*gclwh11_10*x93)));
op[8]=((((-0.160905)*x90))+(((0.160905)*x159))+(((-0.160905)*x162))+x336+(((-1.0)*x335)));
op[9]=((((-1.0)*gclwh11_13*x135))+(((-0.7845)*gclwh11_13*x93))+(((0.7845)*gclwh7_13*x110))+x315+(((-0.7845)*gclwh9_13*x106))+(((-1.569)*gclwh7_13*x75))+(((0.00702803935125)*x157))+(((-1.0)*gclwh9_13*x131))+(((-1.0)*x245))+(((1.569)*gclwh11_13*x83))+(((1.569)*gclwh9_13*x87)));
op[10]=((((-0.006199575)*x161))+((gclwh13_0*x167))+((gclwh5_0*x153))+(((-1.0)*x113*x97))+(((-0.0655)*gclwh7_0*x75))+(((0.0655)*gclwh11_0*x83))+((x97*x98))+(((-1.0)*x200))+x339+x316+(((-0.000293394886875)*x113))+(((0.00076243651125)*x146))+(((0.000293394886875)*x98))+(((0.0655)*gclwh9_0*x87))+(((-0.03275)*gclwh11_0*x93))+(((-0.000293394886875)*x170))+(((-1.0)*gclwh13_1*x78))+(((-1.0)*x337))+(((-0.00076243651125)*x141)));
op[11]=((0.007149325)+(((0.006199575)*x162))+x326+x322+((gclwh11_10*x93))+(((-1.0)*x330))+(((-1.0)*x332))+(((0.006199575)*x90))+(((-1.0)*gclwh7_10*x110))+((gclwh9_10*x106))+(((-0.006199575)*x159)));
op[12]=((-0.65598384)+(((1.6345)*gclwh12_8*x75))+((gclwh12_11*x110))+(((0.007321434238125)*x73))+(((-1.6345)*gclwh14_8*x87))+(((-1.0)*x70*x85))+(((-1.0)*x70*x71))+(((-1.0)*x323))+(((-0.007321434238125)*x85))+x327+x317+((gclwh4_11*x93))+((x70*x73))+(((-1.0)*x214))+(((1.6345)*gclwh4_8*x83))+(((-0.007321434238125)*x71))+(((-1.0)*gclwh14_11*x106)));
op[13]=((((0.81725)*gclwh1_2*pp*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((0.10915)*gclwh12_14*pp*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-1.6345)*gclwh4_2*npz*pz))+(((-0.679811285)*gclwh3_3*pp*r21))+(((0.2183)*gclwh14_14*npx*pz))+(((0.000977833645875)*gclwh4_14*r22))+(((0.000847933619625)*gclwh12_8*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.154705425)*gclwh10_2*rxp2_2))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.007321434238125)*gclwh3_2*r21))+(((-0.66189404)*gclwh4_3*pp*r22))+(((-0.2183)*gclwh12_14*npy*pz))+(((0.81725)*gclwh3_2*pp*r21))+(((0.00600991575645741)*gclwh1_3*r20))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.81725)*gclwh14_2*pp*r20))+(((-0.2183)*gclwh4_14*npz*pz))+(((-0.00600991575645741)*gclwh12_3*r21))+(((-0.007321434238125)*gclwh1_2*r20))+(((-0.1893)*gclwh4_8*npz*pz))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-1.6345)*gclwh12_2*npy*pz))+(((-1.6345)*gclwh1_2*npx*pz))+(((1.341705325)*gclwh3_3*npy*pz))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.007321434238125)*gclwh14_2*r20))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.007321434238125)*gclwh4_2*r22))+(((1.6345)*gclwh14_2*npx*pz))+(((-0.154705425)*gclwh6_2*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.10915)*gclwh4_14*pp*r22))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+(((0.000977833645875)*gclwh12_14*r21))+(((-0.000977833645875)*gclwh14_14*r20))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.6345)*gclwh3_2*npy*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((0.66189404)*gclwh14_3*pp*r20))+(((0.81725)*gclwh12_2*pp*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.10915)*gclwh14_14*pp*r20))+(((-0.679811285)*gclwh1_3*pp*r20))+(((0.007321434238125)*gclwh12_2*r21))+(((0.154705425)*gclwh8_2*rxp0_2))+(((-1.341705325)*gclwh14_3*npx*pz))+(((0.00600991575645741)*gclwh3_3*r21))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.000847933619625)*gclwh4_8*r22))+(((0.81725)*gclwh4_2*pp*r22)));
op[14]=((((-0.2183)*gclwh14_14*x106))+(((-1.0)*gclwh6_12*x143))+(((-0.4366)*gclwh12_14*x75))+((gclwh4_14*x101))+(((0.2183)*gclwh4_14*x93))+((gclwh8_12*x94))+((gclwh10_12*x169))+(((0.4366)*gclwh14_14*x87))+(((-0.4366)*gclwh4_14*x83))+(((0.2183)*gclwh12_14*x110))+(((-1.0)*gclwh14_14*x120))+((gclwh12_14*x133)));
op[15]=((0.02970243)+(((4.0)*gclwh4_11*x83))+((x106*x179))+(((-1.0)*gclwh8_11*x126))+((x74*x85))+(((0.007614829125)*x71))+(((-1.0)*gclwh12_11*x80))+((gclwh14_11*x136))+(((4.0)*gclwh12_11*x75))+(((-0.007614829125)*x73))+(((-1.0)*x110*x149))+(((0.3786)*x81))+(((0.007614829125)*x85))+(((-4.0)*gclwh14_11*x87))+(((-1.0)*gclwh4_11*x178))+(((-0.3786)*x89))+(((-1.0)*x73*x74))+(((-1.0)*gclwh12_8*npy*x67))+(((-1.0)*gclwh4_8*npz*x67))+(((-1.0)*x88*x93))+((gclwh14_8*npx*x67))+((x71*x74)));
op[16]=((-0.01084116)+(((-0.000293394886875)*x73))+((x71*x97))+(((0.0655)*gclwh14_8*x87))+(((-1.0)*gclwh4_11*x93))+(((-0.0655)*gclwh4_8*x83))+(((-1.0)*x73*x97))+(((-0.0655)*gclwh12_8*x75))+(((-1.0)*x327))+((x85*x97))+(((0.000293394886875)*x71))+x323+x317+(((0.000293394886875)*x85))+(((-1.0)*gclwh12_11*x110))+((gclwh14_11*x106))+(((-1.0)*x214)));
op[17]=((((-0.10915)*gclwh4_14*pp*r22))+(((-0.10915)*gclwh12_14*pp*r21))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.03275)*gclwh14_2*pp*r20))+(((0.008055325)*gclwh1_3*npx*pz))+(((0.000293394886875)*gclwh4_2*r22))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.000293394886875)*gclwh1_2*r20))+(((-0.0655)*gclwh12_2*npy*pz))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh3_2*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.000977833645875)*gclwh12_14*r21))+(((0.10915)*gclwh14_14*pp*r20))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((0.006199575)*gclwh8_2*rxp0_2))+(((0.000847933619625)*gclwh12_8*r21))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.000293394886875)*gclwh14_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.0655)*gclwh1_2*npx*pz))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.00493096)*gclwh14_3*pp*r20))+(((0.008055325)*gclwh3_3*npy*pz))+(((-0.006199575)*gclwh6_2*rxp1_2))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.03275)*gclwh1_2*pp*r20))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((0.03275)*gclwh4_2*pp*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008055325)*gclwh14_3*npx*pz))+(((0.0655)*gclwh14_2*npx*pz))+(((-0.2183)*gclwh14_14*npx*pz))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.006199575)*gclwh10_2*rxp2_2))+(((-0.012986285)*gclwh3_3*pp*r21))+(((0.000293394886875)*gclwh12_2*r21))+(((-0.000977833645875)*gclwh4_14*r22))+(((0.2183)*gclwh4_14*npz*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.03275)*gclwh3_2*pp*r21))+(((-0.0655)*gclwh4_2*npz*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((0.000977833645875)*gclwh14_14*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.0655)*gclwh3_2*npy*pz))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.2183)*gclwh12_14*npy*pz))+(((0.03275)*gclwh12_2*pp*r21))+(((0.000847933619625)*gclwh4_8*r22)));
op[18]=((((0.000977833645875)*gclwh5_15*r22))+(((-0.81725)*gclwh5_0*pp*r22))+(((1.6345)*gclwh13_0*npy*pz))+(((0.81725)*gclwh15_0*pp*r20))+(((0.10915)*gclwh13_15*pp*r21))+(((0.10915)*gclwh5_15*pp*r22))+(((-0.007321434238125)*gclwh0_0*r20))+(((0.1893)*pz))+(((-0.2183)*gclwh5_15*npz*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+((gclwh5_0*pp*pz*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-1.341705325)*gclwh13_1*npy*pz))+(((0.0089586225)*gclwh5_0*pz*r22))+(((0.81725)*gclwh0_0*pp*r20))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.10915)*gclwh15_15*pp*r20))+(((-0.000977833645875)*gclwh15_15*r20))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.66189404)*gclwh15_1*pp*r20))+(((-0.154705425)*gclwh9_0*rxp0_2))+(((-0.007321434238125)*gclwh2_0*r21))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.679811285)*gclwh2_1*pp*r21))+(((1.6345)*gclwh5_0*npz*pz))+(((-0.154705425)*gclwh11_0*rxp2_2))+(((-0.2183)*gclwh13_15*npy*pz))+(((-1.6345)*gclwh0_0*npx*pz))+(((0.00600991575645741)*gclwh0_1*r20))+(((-0.007321434238125)*gclwh5_0*r22))+(((-0.000847933619625)*gclwh13_9*r21))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((1.341705325)*gclwh0_1*npx*pz))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.00600991575645741)*gclwh2_1*r21))+(((0.000847933619625)*gclwh15_9*r20))+(((0.00600991575645741)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.6345)*gclwh15_0*npx*pz))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((1.341705325)*gclwh2_1*npy*pz))+(((0.2183)*gclwh15_15*npx*pz))+(((0.66189404)*gclwh13_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.00600991575645741)*gclwh15_1*r20))+(((0.007321434238125)*gclwh15_0*r20))+(((-1.341705325)*gclwh5_1*npz*pz))+(((-0.679811285)*gclwh0_1*pp*r20))+(((0.154705425)*gclwh7_0*rxp1_2))+(((0.00600991575645741)*gclwh5_1*r22))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.66189404)*gclwh5_1*pp*r22))+(((-1.6345)*gclwh2_0*npy*pz))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((1.341705325)*gclwh15_1*npx*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.007321434238125)*gclwh13_0*r21))+((gclwh0_1*r20*(pp*pp)))+(((0.81725)*gclwh2_0*pp*r21))+(((0.000977833645875)*gclwh13_15*r21))+(((-0.81725)*gclwh13_0*pp*r21))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[19]=((-0.65598384)+(((-1.0)*x137*x70))+(((-1.0)*x72*x92))+(((-1.0)*gclwh5_10*x93))+(((-1.0)*gclwh13_10*x110))+((x70*x95))+(((-1.0)*x320))+(((-1.0)*x328))+((gclwh15_10*x106))+((x68*x92))+((x130*x70))+x324+x219+(((0.007321434238125)*x95))+(((-0.007321434238125)*x137))+(((0.007321434238125)*x130))+(((-1.6345)*gclwh13_9*x75)));
op[20]=((-0.02970243)+((x106*x107))+(((-1.0)*x137*x74))+(((-0.007614829125)*x137))+(((-1.0)*gclwh5_10*x178))+(((-1.0)*gclwh13_10*x80))+(((0.007614829125)*x130))+(((-1.0)*x110*x112))+((x74*x95))+((x130*x74))+(((4.0)*gclwh13_10*x75))+(((0.007614829125)*x95))+((x67*x68))+(((-4.0)*gclwh15_10*x87))+((gclwh15_10*x136))+(((-1.0)*gclwh9_10*x126))+(((-1.0)*gclwh11_10*x134))+(((-1.0)*x67*x72))+(((-1.0)*x152*x93))+(((-1.0)*gclwh13_9*npy*x67))+(((4.0)*gclwh5_10*x83))+(((0.3786)*x139)));
op[21]=((((-0.2183)*gclwh13_15*x110))+((gclwh15_15*x120))+((gclwh7_13*x143))+(((0.4366)*gclwh13_15*x75))+(((-1.0)*gclwh9_13*x94))+(((0.2183)*gclwh15_15*x106))+(((-1.0)*gclwh5_15*x101))+(((-0.4366)*gclwh15_15*x87))+(((0.4366)*gclwh5_15*x83))+(((-1.0)*gclwh11_13*x169))+(((-0.2183)*gclwh5_15*x93))+(((-1.0)*gclwh13_15*x133)));
op[22]=((((-0.2183)*gclwh15_15*npx*pz))+(((0.000977833645875)*gclwh15_15*r20))+(((0.008055325)*gclwh2_1*npy*pz))+(((0.1893)*pz))+(((-0.006199575)*gclwh11_0*rxp2_2))+(((-0.00493096)*gclwh5_1*pp*r22))+((gclwh15_1*r20*(pp*pp)))+(((0.10915)*gclwh15_15*pp*r20))+(((0.03275)*gclwh2_0*pp*r21))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+(((-0.012986285)*gclwh0_1*pp*r20))+((gclwh5_0*pp*pz*r22))+(((-0.000977833645875)*gclwh5_15*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((0.006199575)*gclwh7_0*rxp1_2))+(((-0.012986285)*gclwh2_1*pp*r21))+(((-0.000977833645875)*gclwh13_15*r21))+(((-0.000293394886875)*gclwh2_0*r21))+(((0.0089586225)*gclwh5_0*pz*r22))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.2183)*gclwh5_15*npz*pz))+(((-0.008055325)*gclwh13_1*npy*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.00493096)*gclwh13_1*pp*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.000293394886875)*gclwh13_0*r21))+(((0.00493096)*gclwh15_1*pp*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((0.2183)*gclwh13_15*npy*pz))+(((-0.008055325)*gclwh5_1*npz*pz))+(((-0.000293394886875)*gclwh5_0*r22))+(((-0.10915)*gclwh5_15*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.0655)*gclwh15_0*npx*pz))+(((3.60823078949063e-5)*gclwh0_1*r20))+(((-0.000847933619625)*gclwh13_9*r21))+(((-3.60823078949063e-5)*gclwh15_1*r20))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((3.60823078949063e-5)*gclwh5_1*r22))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.10915)*gclwh13_15*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((-0.03275)*gclwh13_0*pp*r21))+(((0.000293394886875)*gclwh15_0*r20))+(((0.000847933619625)*gclwh15_9*r20))+(((3.60823078949063e-5)*gclwh13_1*r21))+(((0.0655)*gclwh5_0*npz*pz))+(((-0.0655)*gclwh0_0*npx*pz))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.60823078949063e-5)*gclwh2_1*r21))+(((0.0655)*gclwh13_0*npy*pz))+(((-0.0655)*gclwh2_0*npy*pz))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.03275)*gclwh15_0*pp*r20))+((gclwh2_1*r21*(pp*pp)))+(((0.03275)*gclwh0_0*pp*r20))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.008055325)*gclwh0_1*npx*pz))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.006199575)*gclwh9_0*rxp0_2))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-0.03275)*gclwh5_0*pp*r22))+(((-2.0)*gclwh2_1*npy*pp*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.008055325)*gclwh15_1*npx*pz))+(((-0.000293394886875)*gclwh0_0*r20))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[23]=((-0.01084116)+((gclwh5_10*x93))+(((0.0655)*gclwh13_9*x75))+(((-1.0)*gclwh15_10*x106))+((x151*x72))+(((-1.0)*x151*x68))+((x137*x97))+(((-1.0)*x320))+(((-1.0)*x324))+(((-0.000293394886875)*x130))+(((0.000293394886875)*x137))+(((-0.000293394886875)*x95))+(((-0.03275)*gclwh5_9*x93))+x328+x219+((gclwh13_10*x110))+(((-1.0)*x130*x97)));
op[24]=((((3.269)*gclwh10_12*x83))+(((3.269)*gclwh8_12*x87))+(((0.01464286847625)*x140))+(((-1.6345)*gclwh8_12*x106))+(((-3.269)*gclwh6_12*x75))+x319+(((-1.0)*x230))+(((-1.0)*gclwh8_12*x160))+(((-1.6345)*gclwh10_12*x93))+(((1.6345)*gclwh6_12*x110))+(((-1.0)*gclwh10_12*x155)));
op[25]=(x334+(((-1.0)*x333)));
op[26]=((-0.3425127)+(((-8.0)*gclwh10_11*x83))+((x163*x93))+((x106*x127))+(((8.0)*gclwh6_11*x75))+(((0.03583449)*x148))+(((-0.03583449)*x69))+(((-4.0)*pp*x69))+((gclwh8_11*x144))+(((-0.7572)*x82))+(((0.7572)*x99))+(((-0.7572)*gclwh4_11*rxp2_2))+(((-8.0)*gclwh8_11*x87)));
op[27]=((((-1.569)*gclwh6_2*x110))+(((0.08264838)*x100))+(((-1.0)*gclwh12_2*x86))+(((0.0140560787025)*x109))+(((0.0140560787025)*x108))+(((3.138)*gclwh6_2*x75))+(((0.2970117)*x166))+(((-1.0)*gclwh4_2*x150))+(((-3.138)*gclwh8_2*x87))+(((-0.08264838)*x171))+(((-3.138)*gclwh10_2*x83))+(((1.569)*gclwh10_2*x93))+(((-0.0140560787025)*x124))+(((1.569)*gclwh8_2*x106))+(((-0.08264838)*x154)));
op[28]=((((0.131)*gclwh10_12*x83))+(((-0.00058678977375)*gclwh10_12*r22))+(((-0.00058678977375)*gclwh8_12*r20))+(((0.131)*gclwh8_12*x87))+(((-0.0655)*gclwh10_12*x93))+(((0.00058678977375)*x140))+(((0.0655)*gclwh6_12*x110))+(((-0.0655)*gclwh8_12*x106))+x230+(((-1.0)*x319))+(((-0.131)*gclwh6_12*x75)));
op[29]=(x333+(((-1.0)*x334)));
op[30]=(x336+(((-1.0)*x335)));
op[31]=((((3.269)*gclwh9_13*x87))+(((-1.0)*gclwh9_13*x160))+(((-1.6345)*gclwh9_13*x106))+(((-3.269)*gclwh7_13*x75))+(((0.01464286847625)*x157))+x315+(((-1.6345)*gclwh11_13*x93))+(((3.269)*gclwh11_13*x83))+(((1.6345)*gclwh7_13*x110))+(((-1.0)*x245))+(((-1.0)*gclwh11_13*x155)));
op[32]=((((0.08264838)*x111))+(((-0.0140560787025)*x98))+(((0.0140560787025)*x113))+(((1.569)*gclwh11_0*x93))+(((3.138)*gclwh7_0*x75))+(((0.2970117)*x161))+(((0.08264838)*x177))+(((-1.0)*gclwh5_0*x150))+(((-0.08264838)*x145))+(((-3.138)*gclwh11_0*x83))+(((1.569)*gclwh9_0*x106))+(((0.0140560787025)*x170))+(((-3.138)*gclwh9_0*x87))+(((-1.0)*gclwh13_0*x86))+(((-1.569)*pp*x98)));
op[33]=((-0.3425127)+((gclwh9_10*x144))+(((0.03583449)*x96))+(((-1.0)*x110*x138))+(((-0.03583449)*gclwh7_10*r21))+((x106*x132))+((x119*x93))+(((-0.7572)*x125))+(((8.0)*gclwh7_10*x75))+(((-0.7572)*x156))+(((-8.0)*gclwh11_10*x83))+(((0.7572)*x102))+(((-8.0)*gclwh9_10*x87)));
op[34]=(x335+(((-1.0)*x336)));
IkReal x341=pz*pz;
IkReal x342=((1.7)*pz);
IkReal x343=(gclwh15_9*npx);
IkReal x344=(gclwh6_11*r21);
IkReal x345=((0.81725)*pp);
IkReal x346=(gclwh4_8*r22);
IkReal x347=(gclwh5_9*npz);
IkReal x348=(gclwh14_8*r20);
IkReal x349=((0.85)*pp);
IkReal x350=(npy*pz);
IkReal x351=((4.0)*gclwh12_11);
IkReal x352=(gclwh14_3*rxp0_2);
IkReal x353=((0.000977833645875)*r20);
IkReal x354=(npx*pz);
IkReal x355=((0.00076243651125)*rxp1_2);
IkReal x356=((0.154705425)*rxp1_2);
IkReal x357=((0.017917245)*r21);
IkReal x358=(gclwh6_11*rxp1_2);
IkReal x359=(npz*pz);
IkReal x360=((2.0)*gclwh11_10);
IkReal x361=(gclwh12_8*r21);
IkReal x362=(pp*r21);
IkReal x363=((2.0)*gclwh4_11);
IkReal x364=((0.4366)*gclwh15_15);
IkReal x365=(gclwh10_11*rxp2_2);
IkReal x366=(gclwh5_9*rxp2_2);
IkReal x367=((0.020662095)*rxp1_2);
IkReal x368=(gclwh6_12*rxp1_2);
IkReal x369=((1.6345)*pz);
IkReal x370=(pp*r22);
IkReal x371=((0.14850585)*rxp0_2);
IkReal x372=(gclwh5_9*r22);
IkReal x373=((0.3786)*rxp0_2);
IkReal x374=(gclwh14_14*rxp0_2);
IkReal x375=(gclwh4_14*r22);
IkReal x376=((0.1893)*rxp0_2);
IkReal x377=(gclwh12_8*rxp1_2);
IkReal x378=((2.0)*gclwh9_10);
IkReal x379=((0.1893)*rxp2_2);
IkReal x380=(pp*r20);
IkReal x381=((2.0)*gclwh15_10);
IkReal x382=(gclwh10_2*r22);
IkReal x383=((4.0)*gclwh14_11);
IkReal x384=(gclwh5_15*rxp2_2);
IkReal x385=((0.020662095)*rxp0_2);
IkReal x386=((2.0)*gclwh13_10);
IkReal x387=(gclwh9_0*r20);
IkReal x388=((0.007321434238125)*r21);
IkReal x389=((0.4366)*gclwh5_15);
IkReal x390=((0.000977833645875)*r22);
IkReal x391=(gclwh14_8*rxp0_2);
IkReal x392=((0.0140560787025)*r22);
IkReal x393=((0.000977833645875)*r21);
IkReal x394=((0.0089586225)*r20);
IkReal x395=((2.0)*gclwh10_11);
IkReal x396=(gclwh14_14*r20);
IkReal x397=(gclwh4_3*rxp2_2);
IkReal x398=((0.03583449)*r20);
IkReal x399=((2.0)*gclwh7_10);
IkReal x400=((0.154705425)*rxp2_2);
IkReal x401=((1.0)*pz);
IkReal x402=((4.0)*gclwh15_10);
IkReal x403=((0.0089586225)*pz);
IkReal x404=(gclwh6_2*r21);
IkReal x405=((0.3786)*rxp2_2);
IkReal x406=((0.00702803935125)*r20);
IkReal x407=(gclwh13_15*r21);
IkReal x408=((0.00702803935125)*r22);
IkReal x409=((0.017917245)*r20);
IkReal x410=(gclwh5_15*r22);
IkReal x411=(gclwh7_10*rxp1_2);
IkReal x412=(gclwh5_1*rxp2_2);
IkReal x413=((0.4366)*gclwh13_15);
IkReal x414=(gclwh5_10*r22);
IkReal x415=(gclwh10_12*rxp2_2);
IkReal x416=((0.0140560787025)*r21);
IkReal x417=((0.03275)*pp);
IkReal x418=(gclwh7_13*r21);
IkReal x419=((0.7572)*rxp0_2);
IkReal x420=((4.0)*gclwh4_11);
IkReal x421=(gclwh15_1*rxp0_2);
IkReal x422=((0.0089586225)*r21);
IkReal x423=(gclwh7_0*r21);
IkReal x424=(gclwh13_9*r21);
IkReal x425=((0.4366)*gclwh12_14);
IkReal x426=(gclwh8_2*r20);
IkReal x427=(gclwh10_11*r22);
IkReal x428=(gclwh15_15*r20);
IkReal x429=((0.2970117)*rxp0_2);
IkReal x430=((2.0)*gclwh12_11);
IkReal x431=(gclwh7_13*rxp1_2);
IkReal x432=(gclwh4_8*rxp2_2);
IkReal x433=((0.04132419)*rxp1_2);
IkReal x434=((0.4366)*gclwh4_14);
IkReal x435=(gclwh15_9*r20);
IkReal x436=((2.0)*gclwh8_11);
IkReal x437=((0.0140560787025)*r20);
IkReal x438=(gclwh15_9*rxp0_2);
IkReal x439=(gclwh15_0*rxp0_2);
IkReal x440=((4.0)*gclwh5_10);
IkReal x441=(gclwh13_9*rxp1_2);
IkReal x442=((2.0)*gclwh5_10);
IkReal x443=((0.3786)*rxp1_2);
IkReal x444=((0.4366)*gclwh14_14);
IkReal x445=((4.0)*gclwh13_10);
IkReal x446=((0.020662095)*rxp2_2);
IkReal x447=(gclwh14_2*rxp0_2);
IkReal x448=((0.006199575)*rxp1_2);
IkReal x449=((0.30941085)*rxp0_2);
IkReal x450=(gclwh11_0*r22);
IkReal x451=(gclwh12_14*r21);
IkReal x452=((0.2970117)*rxp1_2);
IkReal x453=((0.2970117)*rxp2_2);
IkReal x454=((0.01239915)*rxp0_2);
IkReal x455=((0.006199575)*rxp2_2);
IkReal x456=(gclwh4_11*r22);
IkReal x457=(gclwh8_2*pz);
IkReal x458=((0.12699240901125)*rxp1_2);
IkReal x459=(gclwh11_13*rxp2_2);
IkReal x460=(gclwh11_10*r22);
IkReal x461=((0.1893)*rxp1_2);
IkReal x462=((2.0)*gclwh14_11);
IkReal x463=((0.03583449)*r21);
IkReal x464=((0.00195566729175)*x396);
IkReal x465=((0.00195566729175)*x375);
IkReal x466=((0.00195566729175)*x451);
IkReal x467=(gclwh12_11*x357);
IkReal x468=((0.3786)*x365);
IkReal x469=((0.017917245)*x456);
IkReal x470=(gclwh8_11*x373);
IkReal x471=((0.3786)*x358);
IkReal x472=(gclwh14_11*x409);
IkReal x473=((0.017917245)*x414);
IkReal x474=(gclwh9_10*x373);
IkReal x475=(gclwh13_10*x357);
IkReal x476=(gclwh11_10*x405);
IkReal x477=(gclwh15_10*x409);
IkReal x478=((0.3786)*x411);
IkReal x479=((0.00195566729175)*x407);
IkReal x480=((0.00195566729175)*x410);
IkReal x481=((0.00195566729175)*x428);
IkReal x482=((0.0089586225)*x344);
IkReal x483=(gclwh12_11*x461);
IkReal x484=(gclwh6_5*x393);
IkReal x485=(gclwh4_11*x379);
IkReal x486=(gclwh8_5*x353);
IkReal x487=(gclwh10_5*x390);
IkReal x488=(gclwh8_11*x394);
IkReal x489=(gclwh14_11*x376);
IkReal x490=((0.0089586225)*x427);
IkReal x491=(gclwh12_14*x367);
IkReal x492=((0.017917245)*x377);
IkReal x493=(gclwh4_14*x446);
IkReal x494=((0.017917245)*x432);
IkReal x495=((0.020662095)*x374);
IkReal x496=((0.017917245)*x391);
IkReal x497=((0.04132419)*gclwh15_15*rxp0_2);
IkReal x498=((0.04132419)*x384);
IkReal x499=(gclwh13_15*x433);
IkReal x500=((0.017917245)*x366);
IkReal x501=(gclwh15_15*x385);
IkReal x502=((0.017917245)*x441);
IkReal x503=((0.017917245)*x438);
IkReal x504=(gclwh13_15*x367);
IkReal x505=((0.020662095)*x384);
IkReal x506=(gclwh13_10*x461);
IkReal x507=(gclwh7_10*x422);
IkReal x508=(gclwh5_10*x379);
IkReal x509=(gclwh7_7*x393);
IkReal x510=(gclwh9_7*x353);
IkReal x511=((0.0089586225)*x460);
IkReal x512=(gclwh15_10*x376);
IkReal x513=(gclwh9_10*x394);
IkReal x514=(gclwh11_7*x390);
IkReal x515=(gclwh8_11*x376);
IkReal x516=(gclwh12_11*x422);
IkReal x517=(gclwh10_5*x446);
IkReal x518=((0.1893)*x365);
IkReal x519=((0.0089586225)*x456);
IkReal x520=(gclwh8_5*x385);
IkReal x521=(gclwh6_5*x367);
IkReal x522=((0.1893)*x358);
IkReal x523=(gclwh14_11*x394);
IkReal x524=((2.0)*x341);
IkReal x525=(pz*x461);
IkReal x526=(pp*x461);
IkReal x527=((0.2183)*gclwh14_14*x380);
IkReal x528=(x350*x425);
IkReal x529=(x359*x434);
IkReal x530=((0.2183)*gclwh12_14*x362);
IkReal x531=(x354*x444);
IkReal x532=((0.2183)*gclwh4_14*x370);
IkReal x533=(x363*x370);
IkReal x534=(x362*x430);
IkReal x535=(x354*x383);
IkReal x536=(x380*x462);
IkReal x537=(x350*x351);
IkReal x538=(x359*x420);
IkReal x539=(x362*x386);
IkReal x540=(x354*x402);
IkReal x541=(x370*x442);
IkReal x542=(x380*x381);
IkReal x543=(x359*x440);
IkReal x544=(x350*x445);
IkReal x545=((0.2183)*gclwh13_15*x362);
IkReal x546=(x354*x364);
IkReal x547=((0.2183)*gclwh5_15*x370);
IkReal x548=(x350*x413);
IkReal x549=((0.2183)*gclwh15_15*x380);
IkReal x550=(x359*x389);
IkReal x551=(x359*x395);
IkReal x552=(x354*x436);
IkReal x553=((0.2183)*gclwh10_5*x359);
IkReal x554=((0.2183)*gclwh8_5*x354);
IkReal x555=((0.10915)*gclwh6_5*x362);
IkReal x556=((0.2183)*gclwh6_5*x350);
IkReal x557=((2.0)*gclwh6_11*x350);
IkReal x558=((0.10915)*gclwh8_5*x380);
IkReal x559=((0.10915)*gclwh10_5*x370);
IkReal x560=(gclwh12_3*x526);
IkReal x561=(x394*x457);
IkReal x562=(gclwh10_2*pz*x370);
IkReal x563=(gclwh14_2*pz*x376);
IkReal x564=(x380*x457);
IkReal x565=(gclwh4_3*pp*x379);
IkReal x566=(x382*x403);
IkReal x567=(gclwh12_2*x525);
IkReal x568=(gclwh4_2*pz*x379);
IkReal x569=((0.1893)*pp*x352);
IkReal x570=(x403*x404);
IkReal x571=(gclwh13_1*x526);
IkReal x572=(x403*x450);
IkReal x573=(x387*x403);
IkReal x574=(gclwh5_1*pp*x379);
IkReal x575=(gclwh15_0*pz*x376);
IkReal x576=(gclwh11_0*pz*x370);
IkReal x577=(gclwh9_0*pz*x380);
IkReal x578=(gclwh15_1*pp*x376);
IkReal x579=(x403*x423);
IkReal x580=(gclwh13_0*x525);
IkReal x581=(gclwh5_0*pz*x379);
IkReal x582=(x359*x360);
IkReal x583=(x354*x378);
IkReal x584=((0.10915)*gclwh7_7*x362);
IkReal x585=((0.2183)*gclwh9_7*x354);
IkReal x586=((0.2183)*gclwh11_7*x359);
IkReal x587=((0.10915)*gclwh9_7*x380);
IkReal x588=((0.2183)*gclwh7_7*x350);
IkReal x589=(x350*x399);
IkReal x590=((0.10915)*gclwh11_7*x370);
IkReal x591=(x354*x462);
IkReal x592=(x359*x363);
IkReal x593=(x350*x430);
IkReal x594=(gclwh6_2*npy*x524);
IkReal x595=(gclwh6_2*x362*x401);
IkReal x596=(gclwh10_2*npz*x524);
IkReal x597=(gclwh8_2*npx*x524);
IkReal x598=(gclwh7_0*npy*x524);
IkReal x599=(gclwh9_0*npx*x524);
IkReal x600=(gclwh11_0*npz*x524);
IkReal x601=(gclwh7_0*x362*x401);
IkReal x602=(x504+x505);
IkReal x603=(x498+x499);
IkReal x604=(x493+x491);
IkReal x605=(x520+x517);
IkReal x606=(x489+x488+x490+x557);
IkReal x607=(x513+x512+x511+x589);
IkReal x608=(x522+x523+x593+x592);
IkReal x609=(x481+x550+x548+x549);
IkReal x610=(x484+x553+x555+x554);
IkReal x611=(x464+x527+x528+x529);
IkReal x612=(x509+x584+x585+x586);
IkReal x613=(x519+x518+x516+x515+x591);
IkReal x614=(x508+x506+x507+x582+x583);
IkReal x615=(x483+x482+x485+x552+x551);
IkReal x616=(x477+x478+x544+x542+x543);
IkReal x617=(x514+x510+x587+x588+x590);
IkReal x618=(x480+x479+x545+x546+x547);
IkReal x619=(x466+x465+x531+x530+x532);
IkReal x620=(x487+x486+x559+x558+x556);
IkReal x621=(x471+x472+x537+x536+x538);
IkReal x622=(x469+x468+x467+x470+x533+x535+x534);
IkReal x623=(x474+x475+x476+x473+x540+x541+x539);
IkReal x624=(x503+x579+x578+x580+x581+x599+x601+x600);
IkReal x625=(x496+x570+x568+x569+x567+x597+x596+x595);
IkReal x626=(x492+x494+x566+x564+x565+x562+x563+x560+x561+x594);
IkReal x627=(x500+x502+x575+x574+x577+x576+x571+x573+x572+x598);
op[35]=((((0.131)*gclwh11_13*x359))+(((-0.0655)*gclwh11_13*x370))+(((-0.131)*gclwh7_13*x350))+x497+(((-0.00058678977375)*gclwh9_13*r20))+(((-0.00058678977375)*gclwh11_13*r22))+(((-1.0)*x603))+(((-0.0655)*gclwh9_13*x380))+(((0.00058678977375)*x418))+(((0.131)*gclwh9_13*x354))+(((0.0655)*gclwh7_13*x362)));
op[36]=((((0.30941085)*x415))+((gclwh8_12*x449))+(((-1.0)*x611))+x619+(((-0.30941085)*x368)));
op[37]=((-1.35962257)+(((-1.0)*x622))+x621);
op[38]=((-0.15471464)+(((8.0)*gclwh12_11*x350))+(((-8.0)*gclwh14_11*x354))+(((-1.0)*gclwh8_11*x419))+(((8.0)*gclwh4_11*x359))+(((0.7572)*x358))+(((-1.0)*x370*x420))+(((-0.03583449)*x456))+(((-0.7572)*x365))+((x380*x383))+((gclwh14_11*x398))+(((-1.0)*x351*x362))+(((-1.0)*gclwh12_11*x463)));
op[39]=((((-1.569)*gclwh3_2*x362))+(((-3.138)*gclwh14_2*x354))+(((-0.0039113345835)*x375))+(((-1.569)*gclwh4_2*x370))+(((0.8732)*gclwh4_14*x359))+(((-1.0)*x362*x425))+((gclwh14_2*x437))+(((1.569)*gclwh14_2*x380))+(((-1.569)*gclwh1_2*x380))+(((-1.0)*gclwh12_2*x416))+(((-1.0)*gclwh8_2*x429))+(((-1.569)*gclwh12_2*x362))+(((-1.0)*x370*x434))+((gclwh6_2*x452))+(((0.0039113345835)*x396))+(((3.138)*gclwh12_2*x350))+((gclwh1_2*x437))+(((-1.0)*gclwh4_2*x392))+((gclwh3_2*x416))+(((-0.0039113345835)*x451))+(((-1.0)*gclwh10_2*x453))+((x380*x444))+(((-0.8732)*gclwh14_14*x354))+(((3.138)*gclwh1_2*x354))+(((3.138)*gclwh3_2*x350))+(((0.8732)*gclwh12_14*x350))+(((3.138)*gclwh4_2*x359)));
op[40]=((((0.01239915)*x415))+(((-0.01239915)*x368))+(((-1.0)*x619))+x611+((gclwh8_12*x454)));
op[41]=((0.02597257)+(((-1.0)*x621))+x622);
op[42]=((1.35962257)+(((-1.0)*x623))+x616);
op[43]=((((-0.30941085)*x459))+(((-1.0)*x618))+x609+(((-1.0)*gclwh9_13*x449))+(((0.30941085)*x431)));
op[44]=((((-1.0)*gclwh7_0*x452))+(((-1.569)*gclwh2_0*x362))+(((0.0039113345835)*x428))+(((3.138)*gclwh2_0*x350))+((gclwh9_0*x429))+(((-1.0)*gclwh15_0*x437))+(((1.569)*gclwh5_0*x370))+(((0.8732)*gclwh13_15*x350))+(((-1.569)*gclwh0_0*x380))+(((-0.0039113345835)*x407))+((gclwh11_0*x453))+(((-1.569)*gclwh15_0*x380))+(((-0.0039113345835)*x410))+((gclwh13_0*x416))+(((3.138)*gclwh15_0*x354))+((gclwh5_0*x392))+((gclwh0_0*x437))+(((-0.8732)*gclwh15_15*x354))+((gclwh2_0*x416))+(((-3.138)*gclwh13_0*x350))+(((-1.0)*x370*x389))+(((-3.138)*gclwh5_0*x359))+(((0.8732)*gclwh5_15*x359))+((x364*x380))+(((3.138)*gclwh0_0*x354))+(((1.569)*gclwh13_0*x362))+(((-1.0)*x362*x413)));
op[45]=((-0.15471464)+(((-8.0)*gclwh5_10*x359))+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*x380*x402))+(((-0.7572)*x411))+((x362*x445))+(((8.0)*gclwh15_10*x354))+(((0.03583449)*x414))+((x370*x440))+(((-8.0)*gclwh13_10*x350))+((gclwh9_10*x419))+(((-1.0)*gclwh15_10*x398))+((gclwh13_10*x463)));
op[46]=((-0.02597257)+(((-1.0)*x616))+x623);
op[47]=((((-1.0)*gclwh9_13*x454))+x618+(((-1.0)*x609))+(((-0.01239915)*x459))+(((0.01239915)*x431)));
op[48]=((-0.178405675)+(((-1.0)*pp*x344))+(((-1.0)*x620))+(((-1.0)*x615))+((gclwh10_11*x370))+((gclwh8_11*x380))+x606+x610+(((0.154705425)*x391))+(((-1.0)*gclwh12_8*x356))+(((-1.0)*gclwh4_8*x400)));
op[49]=(((x345*x426))+(((0.12699240901125)*x352))+(((-1.0)*gclwh12_2*x356))+(((-0.12699240901125)*x397))+(((0.154705425)*x447))+(((-1.6345)*gclwh10_2*x359))+((x345*x382))+(((-1.0)*gclwh6_2*x388))+(((-1.0)*x345*x404))+(((-1.0)*x625))+(((0.007321434238125)*x426))+(((1.6345)*gclwh6_2*x350))+(((0.007321434238125)*x382))+x495+(((-1.6345)*gclwh8_2*x354))+x626+(((-1.0)*x604))+(((-1.0)*gclwh4_2*x400))+(((-1.0)*gclwh12_3*x458)));
op[50]=((((-0.00702803935125)*gclwh6_12*r21))+(((-0.7845)*gclwh6_12*x362))+(((-0.04132419)*gclwh4_14*rxp2_2))+(((-1.569)*gclwh10_12*x359))+(((1.569)*gclwh6_12*x350))+(((0.7845)*gclwh10_12*x370))+((gclwh8_12*x406))+((gclwh10_12*x408))+(((-1.0)*gclwh12_14*x433))+(((0.04132419)*x374))+(((-1.569)*gclwh8_12*x354))+(((0.7845)*gclwh8_12*x380)));
op[51]=((((-0.160905)*x391))+(((-1.0)*gclwh14_11*x373))+((gclwh12_11*x443))+(((-1.0)*x370*x395))+(((0.160905)*x432))+(((-1.0)*gclwh8_11*x409))+(((-4.0)*gclwh6_11*x350))+((gclwh4_11*x405))+(((4.0)*gclwh8_11*x354))+(((2.0)*pp*x344))+(((4.0)*gclwh10_11*x359))+(((-0.017917245)*x427))+(((0.160905)*x377))+(((0.017917245)*x344))+(((-1.0)*x380*x436)));
op[52]=((-0.007149325)+(((0.006199575)*x377))+(((0.006199575)*x432))+((pp*x344))+(((-1.0)*x620))+(((-1.0)*gclwh10_11*x370))+(((-0.006199575)*x391))+x615+x610+(((-1.0)*x606))+(((-1.0)*gclwh8_11*x380)));
op[53]=((((0.006199575)*x447))+(((0.03275)*gclwh10_2*x370))+(((-0.00076243651125)*x397))+(((-1.0)*x495))+(((-1.0)*gclwh4_2*x455))+(((-0.000293394886875)*x404))+(((0.0655)*gclwh6_2*x350))+(((-1.0)*gclwh12_2*x448))+(((-1.0)*x625))+(((-0.03275)*gclwh6_2*x362))+(((0.000293394886875)*x382))+(((-0.0655)*gclwh10_2*x359))+x604+x626+(((0.00076243651125)*x352))+(((-1.0)*gclwh12_3*x355))+(((0.000293394886875)*x426))+(((-0.0655)*gclwh8_2*x354))+(((0.03275)*gclwh8_2*x380)));
op[54]=((((-0.12699240901125)*x412))+(((0.12699240901125)*x421))+(((-1.0)*x345*x423))+(((-1.0)*gclwh13_1*x458))+(((0.154705425)*x439))+((x345*x387))+(((-1.0)*x501))+((x345*x450))+(((-1.6345)*gclwh9_0*x354))+(((-1.0)*x624))+(((-1.0)*gclwh7_0*x388))+(((0.007321434238125)*x387))+(((-1.0)*gclwh5_0*x400))+(((1.6345)*gclwh7_0*x350))+(((0.007321434238125)*x450))+x602+x627+(((-1.6345)*gclwh11_0*x359))+(((-1.0)*gclwh13_0*x356)));
op[55]=((-0.178405675)+((gclwh11_10*x370))+(((-1.0)*gclwh7_10*x362))+(((0.154705425)*x438))+(((-0.154705425)*x366))+(((-1.0)*x617))+(((-1.0)*x614))+x607+x612+((gclwh9_10*x380))+(((-1.0)*gclwh13_9*x356)));
op[56]=(((x378*x380))+(((-0.160905)*x366))+(((-1.0)*gclwh13_10*x443))+(((-1.0)*x362*x399))+(((4.0)*gclwh7_10*x350))+(((0.160905)*x438))+(((-1.0)*gclwh7_10*x357))+((gclwh15_10*x373))+(((-4.0)*gclwh9_10*x354))+(((-0.160905)*x441))+(((-4.0)*gclwh11_10*x359))+((gclwh9_10*x409))+(((0.017917245)*x460))+((x360*x370))+(((-1.0)*gclwh5_10*x405)));
op[57]=((((-0.7845)*gclwh7_13*x362))+(((-1.569)*gclwh9_13*x354))+(((0.7845)*gclwh9_13*x380))+((gclwh9_13*x406))+((gclwh11_13*x408))+(((0.7845)*gclwh11_13*x370))+x497+(((1.569)*gclwh7_13*x350))+(((-1.0)*x603))+(((-1.569)*gclwh11_13*x359))+(((-0.00702803935125)*x418)));
op[58]=((((-1.0)*gclwh5_0*x455))+(((0.03275)*gclwh9_0*x380))+(((0.006199575)*x439))+(((-0.03275)*gclwh7_0*x362))+(((0.000293394886875)*x450))+(((-0.0655)*gclwh11_0*x359))+(((-1.0)*x624))+(((0.000293394886875)*x387))+(((-0.00076243651125)*x412))+(((-0.0655)*gclwh9_0*x354))+(((-1.0)*gclwh13_0*x448))+x501+(((0.00076243651125)*x421))+x627+(((-1.0)*x602))+(((0.03275)*gclwh11_0*x370))+(((-0.000293394886875)*x423))+(((-1.0)*gclwh13_1*x355))+(((0.0655)*gclwh7_0*x350)));
op[59]=((-0.007149325)+(((0.006199575)*x441))+(((-1.0)*gclwh9_10*x380))+(((-1.0)*gclwh11_10*x370))+(((-1.0)*x617))+x614+x612+((gclwh7_10*x362))+(((-1.0)*x607))+(((-0.006199575)*x438))+(((0.006199575)*x366)));
op[60]=((0.65598384)+(((-1.0)*gclwh4_11*x370))+(((-1.0)*x345*x361))+((gclwh14_11*x380))+(((-0.007321434238125)*x361))+(((-1.0)*x521))+((x345*x348))+(((-1.0)*gclwh12_11*x362))+(((-1.0)*x345*x346))+(((-1.0)*x613))+(((1.6345)*gclwh12_8*x350))+x605+x608+(((0.007321434238125)*x348))+(((-1.6345)*gclwh14_8*x354))+(((-0.007321434238125)*x346))+(((1.6345)*gclwh4_8*x359)));
op[61]=((((-0.10915)*gclwh4_14*pp*r22))+(((-0.10915)*gclwh12_14*pp*r21))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((1.6345)*gclwh3_2*npy*pz))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((1.341705325)*gclwh4_3*npz*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.154705425)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.66189404)*gclwh12_3*pp*r21))+(((1.341705325)*gclwh1_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+((gclwh12_3*r21*(pp*pp)))+(((-0.679811285)*gclwh3_3*pp*r21))+(((-0.000977833645875)*gclwh12_14*r21))+(((0.81725)*gclwh14_2*pp*r20))+(((0.10915)*gclwh14_14*pp*r20))+(((0.000847933619625)*gclwh12_8*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.66189404)*gclwh4_3*pp*r22))+(((0.00600991575645741)*gclwh1_3*r20))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.81725)*gclwh12_2*pp*r21))+(((-0.00600991575645741)*gclwh12_3*r21))+(((-0.007321434238125)*gclwh4_2*r22))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.007321434238125)*gclwh3_2*r21))+(((-0.00600991575645741)*gclwh4_3*r22))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((-0.0089586225)*gclwh12_2*pz*r21))+(((1.6345)*gclwh1_2*npx*pz))+(((0.00600991575645741)*gclwh14_3*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.81725)*gclwh3_2*pp*r21))+((gclwh1_3*r20*(pp*pp)))+(((1.341705325)*gclwh3_3*npy*pz))+(((1.6345)*gclwh4_2*npz*pz))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.007321434238125)*gclwh1_2*r20))+(((1.6345)*gclwh12_2*npy*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.81725)*gclwh1_2*pp*r20))+(((0.007321434238125)*gclwh14_2*r20))+(((-0.2183)*gclwh14_14*npx*pz))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.007321434238125)*gclwh12_2*r21))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.000977833645875)*gclwh4_14*r22))+(((-0.154705425)*gclwh8_2*rxp0_2))+(((0.2183)*gclwh4_14*npz*pz))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.0089586225)*gclwh1_2*pz*r20))+(((-1.6345)*gclwh14_2*npx*pz))+(((0.66189404)*gclwh14_3*pp*r20))+(((0.000977833645875)*gclwh14_14*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((1.341705325)*gclwh12_3*npy*pz))+(((-0.679811285)*gclwh1_3*pp*r20))+(((-1.341705325)*gclwh14_3*npx*pz))+(((-0.81725)*gclwh4_2*pp*r22))+(((-0.154705425)*gclwh10_2*rxp2_2))+(((0.00600991575645741)*gclwh3_3*r21))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.2183)*gclwh12_14*npy*pz))+(((0.000847933619625)*gclwh4_8*r22)));
op[62]=((((-1.0)*x619))+x611+(((-0.14850585)*x415))+(((-1.0)*gclwh8_12*x371))+(((0.14850585)*x368)));
op[63]=((-0.02970243)+(((-1.0)*gclwh12_8*npy*x342))+(((-1.0)*x621))+((gclwh14_8*npx*x342))+(((-1.0)*x348*x349))+(((-1.0)*gclwh4_8*npz*x342))+(((-0.007614829125)*x348))+(((0.007614829125)*x361))+x622+((x346*x349))+((x349*x361))+(((0.007614829125)*x346)));
op[64]=((0.01084116)+(((0.0655)*gclwh14_8*x354))+(((-0.0655)*gclwh4_8*x359))+((gclwh12_11*x362))+(((-1.0)*gclwh14_11*x380))+((x361*x417))+(((-0.0655)*gclwh12_8*x350))+(((0.000293394886875)*x346))+(((-1.0)*x521))+(((-0.000293394886875)*x348))+(((0.000293394886875)*x361))+x605+x613+((x346*x417))+(((-1.0)*x608))+(((-1.0)*x348*x417))+((gclwh4_11*x370)));
op[65]=((((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((0.09465)*gclwh4_8*pp*r22))+((gclwh14_2*pp*pz*r20))+(((0.10915)*gclwh12_14*pp*r21))+(((0.000293394886875)*gclwh3_2*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.008055325)*gclwh1_3*npx*pz))+(((-0.03275)*gclwh12_2*pp*r21))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.1893)*pz))+(((0.00493096)*gclwh12_3*pp*r21))+(((-0.000293394886875)*gclwh12_2*r21))+((gclwh12_3*r21*(pp*pp)))+(((0.03275)*gclwh14_2*pp*r20))+(((0.2183)*gclwh14_14*npx*pz))+(((3.60823078949063e-5)*gclwh1_3*r20))+(((0.000977833645875)*gclwh4_14*r22))+(((0.000847933619625)*gclwh12_8*r21))+(((3.60823078949063e-5)*gclwh3_3*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.000293394886875)*gclwh1_2*r20))+(((-3.60823078949063e-5)*gclwh12_3*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.2183)*gclwh12_14*npy*pz))+(((-0.1893)*gclwh12_8*npy*pz))+(((-0.00493096)*gclwh14_3*pp*r20))+(((-0.2183)*gclwh4_14*npz*pz))+(((0.008055325)*gclwh3_3*npy*pz))+(((-0.012986285)*gclwh1_3*pp*r20))+(((0.00493096)*gclwh4_3*pp*r22))+(((-0.0655)*gclwh14_2*npx*pz))+(((0.0655)*gclwh1_2*npx*pz))+(((-0.1893)*gclwh4_8*npz*pz))+(((0.006199575)*gclwh6_2*rxp1_2))+(((0.1893)*gclwh6_2*pz*rxp1_2))+(((0.008055325)*gclwh12_3*npy*pz))+(((-0.0089586225)*gclwh12_2*pz*r21))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-3.60823078949063e-5)*gclwh4_3*r22))+(((-0.1893)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((0.0089586225)*gclwh3_2*pz*r21))+(((0.1893)*gclwh14_8*npx*pz))+(((-0.000847933619625)*gclwh14_8*r20))+(((0.008055325)*gclwh4_3*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.008055325)*gclwh14_3*npx*pz))+(((-0.03275)*gclwh3_2*pp*r21))+(((0.10915)*gclwh4_14*pp*r22))+(((3.60823078949063e-5)*gclwh14_3*r20))+(((0.0089586225)*gclwh14_2*pz*r20))+(((0.09465)*gclwh12_8*pp*r21))+(((0.000977833645875)*gclwh12_14*r21))+(((-0.000977833645875)*gclwh14_14*r20))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-0.012986285)*gclwh3_3*pp*r21))+(((-0.1893)*gclwh8_2*pz*rxp0_2))+(((-0.0089586225)*gclwh4_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.006199575)*gclwh10_2*rxp2_2))+(((0.0089586225)*gclwh1_2*pz*r20))+(((-0.03275)*gclwh1_2*pp*r20))+(((0.000293394886875)*gclwh14_2*r20))+(((0.0655)*gclwh12_2*npy*pz))+(((0.0655)*gclwh3_2*npy*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0655)*gclwh4_2*npz*pz))+(((-0.10915)*gclwh14_14*pp*r20))+(((-0.006199575)*gclwh8_2*rxp0_2))+(((-0.000293394886875)*gclwh4_2*r22))+(((-0.09465)*gclwh14_8*pp*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.000847933619625)*gclwh4_8*r22))+(((-0.03275)*gclwh4_2*pp*r22)));
op[66]=((((-0.2183)*gclwh15_15*npx*pz))+(((0.000977833645875)*gclwh15_15*r20))+(((-0.81725)*gclwh15_0*pp*r20))+(((0.1893)*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.10915)*gclwh15_15*pp*r20))+(((0.1893)*gclwh5_9*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+((gclwh5_0*pp*pz*r22))+(((-0.000977833645875)*gclwh5_15*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-1.6345)*gclwh13_0*npy*pz))+(((-0.000977833645875)*gclwh13_15*r21))+(((-0.81725)*gclwh2_0*pp*r21))+(((-0.154705425)*gclwh7_0*rxp1_2))+(((-1.341705325)*gclwh13_1*npy*pz))+(((0.0089586225)*gclwh5_0*pz*r22))+(((-1.6345)*gclwh5_0*npz*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.007321434238125)*gclwh13_0*r21))+(((1.6345)*gclwh2_0*npy*pz))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.2183)*gclwh5_15*npz*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.66189404)*gclwh15_1*pp*r20))+(((0.2183)*gclwh13_15*npy*pz))+(((-0.10915)*gclwh5_15*pp*r22))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-0.679811285)*gclwh2_1*pp*r21))+(((0.007321434238125)*gclwh0_0*r20))+(((0.007321434238125)*gclwh5_0*r22))+(((0.00600991575645741)*gclwh0_1*r20))+(((-0.000847933619625)*gclwh13_9*r21))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.007321434238125)*gclwh15_0*r20))+(((0.007321434238125)*gclwh2_0*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.10915)*gclwh13_15*pp*r21))+(((1.341705325)*gclwh0_1*npx*pz))+(((0.81725)*gclwh13_0*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.00600991575645741)*gclwh2_1*r21))+(((-0.81725)*gclwh0_0*pp*r20))+(((0.000847933619625)*gclwh15_9*r20))+(((0.00600991575645741)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((1.341705325)*gclwh2_1*npy*pz))+(((0.66189404)*gclwh13_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.00600991575645741)*gclwh15_1*r20))+(((-1.341705325)*gclwh5_1*npz*pz))+(((-0.679811285)*gclwh0_1*pp*r20))+(((0.00600991575645741)*gclwh5_1*r22))+(((0.0089586225)*gclwh2_0*pz*r21))+(((1.6345)*gclwh0_0*npx*pz))+(((0.154705425)*gclwh9_0*rxp0_2))+(((0.66189404)*gclwh5_1*pp*r22))+(((0.154705425)*gclwh11_0*rxp2_2))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((1.341705325)*gclwh15_1*npx*pz))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((1.6345)*gclwh15_0*npx*pz))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.81725)*gclwh5_0*pp*r22))+((gclwh0_1*r20*(pp*pp)))+(((0.0089586225)*gclwh0_0*pz*r20)));
op[67]=((0.65598384)+((x345*x424))+((gclwh7_7*x367))+((gclwh11_10*x379))+(((-1.0)*x359*x442))+(((-1.0)*x347*x369))+(((-0.1893)*x411))+((gclwh13_10*x362))+(((-0.007321434238125)*x435))+(((-1.0)*x345*x435))+(((-1.0)*gclwh9_7*x385))+((x343*x369))+(((-1.0)*gclwh15_10*x380))+((gclwh13_9*x388))+(((-1.0)*x350*x386))+(((0.0089586225)*x414))+((gclwh9_10*x376))+((x345*x372))+((gclwh5_10*x370))+((gclwh13_10*x422))+(((-1.6345)*gclwh13_9*x350))+((x354*x381))+(((-1.0)*gclwh11_7*x446))+(((-1.0)*gclwh15_10*x394))+(((0.007321434238125)*x372)));
op[68]=((0.02970243)+(((-1.0)*x349*x435))+(((0.007614829125)*x424))+(((-1.0)*x616))+(((0.007614829125)*x372))+x623+((x349*x424))+((x349*x372))+(((-1.0)*x342*x347))+(((-0.007614829125)*x435))+(((-1.0)*gclwh13_9*npy*x342))+((x342*x343)));
op[69]=((((-0.14850585)*x431))+((gclwh9_13*x371))+(((0.14850585)*x459))+x618+(((-1.0)*x609)));
op[70]=((((-0.000293394886875)*gclwh15_0*r20))+(((0.000977833645875)*gclwh5_15*r22))+(((-0.0655)*gclwh5_0*npz*pz))+(((0.10915)*gclwh13_15*pp*r21))+(((0.000293394886875)*gclwh13_0*r21))+(((-0.03275)*gclwh2_0*pp*r21))+(((0.10915)*gclwh5_15*pp*r22))+(((0.008055325)*gclwh2_1*npy*pz))+(((0.1893)*pz))+(((-0.0655)*gclwh13_0*npy*pz))+(((-0.00493096)*gclwh5_1*pp*r22))+(((-0.2183)*gclwh5_15*npz*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.1893)*gclwh5_9*npz*pz))+(((0.0655)*gclwh15_0*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.000847933619625)*gclwh5_9*r22))+(((-0.012986285)*gclwh0_1*pp*r20))+(((-0.006199575)*gclwh7_0*rxp1_2))+((gclwh5_0*pp*pz*r22))+(((0.1893)*gclwh13_9*npy*pz))+(((-0.012986285)*gclwh2_1*pp*r21))+(((-0.03275)*gclwh0_0*pp*r20))+(((0.0089586225)*gclwh5_0*pz*r22))+(((0.0655)*gclwh0_0*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+((gclwh13_0*pp*pz*r21))+(((0.006199575)*gclwh9_0*rxp0_2))+(((0.000293394886875)*gclwh5_0*r22))+(((-0.008055325)*gclwh13_1*npy*pz))+(((0.09465)*gclwh15_9*pp*r20))+(((-0.09465)*gclwh13_9*pp*r21))+(((-0.00493096)*gclwh13_1*pp*r21))+(((-0.10915)*gclwh15_15*pp*r20))+(((-0.000977833645875)*gclwh15_15*r20))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((0.00493096)*gclwh15_1*pp*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.03275)*gclwh15_0*pp*r20))+(((-0.008055325)*gclwh5_1*npz*pz))+(((2.0)*gclwh13_1*npy*pp*pz))+(((0.0655)*gclwh2_0*npy*pz))+(((3.60823078949063e-5)*gclwh0_1*r20))+(((-0.2183)*gclwh13_15*npy*pz))+(((0.000293394886875)*gclwh2_0*r21))+(((-0.000847933619625)*gclwh13_9*r21))+(((-3.60823078949063e-5)*gclwh15_1*r20))+(((-0.09465)*gclwh5_9*pp*r22))+(((-0.0089586225)*gclwh15_0*pz*r20))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((3.60823078949063e-5)*gclwh5_1*r22))+(((0.000293394886875)*gclwh0_0*r20))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.1893)*gclwh15_9*npx*pz))+(((0.000847933619625)*gclwh15_9*r20))+(((0.006199575)*gclwh11_0*rxp2_2))+(((3.60823078949063e-5)*gclwh13_1*r21))+(((0.0089586225)*gclwh13_0*pz*r21))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((3.60823078949063e-5)*gclwh2_1*r21))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((0.2183)*gclwh15_15*npx*pz))+((gclwh2_1*r21*(pp*pp)))+(((0.0089586225)*gclwh2_0*pz*r21))+(((0.008055325)*gclwh0_1*npx*pz))+(((0.03275)*gclwh13_0*pp*r21))+(((0.03275)*gclwh5_0*pp*r22))+(((0.1893)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.1893)*gclwh7_0*pz*rxp1_2))+(((0.1893)*gclwh11_0*pz*rxp2_2))+(((-2.0)*gclwh2_1*npy*pp*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.008055325)*gclwh15_1*npx*pz))+(((0.000977833645875)*gclwh13_15*r21))+(((0.0089586225)*gclwh0_0*pz*r20)));
IkReal x628=((0.03275)*pp);
IkReal x629=(gclwh5_9*r22);
IkReal x630=((2.0)*pz);
IkReal x631=(gclwh13_9*r21);
IkReal x632=(gclwh15_10*r20);
IkReal x633=(gclwh15_9*r20);
IkReal x634=(gclwh13_10*r21);
IkReal x635=((1.0)*pp);
IkReal x636=(gclwh5_10*r22);
IkReal x637=((0.0655)*pz);
op[71]=((0.01084116)+(((-0.000293394886875)*x629))+(((0.0089586225)*x632))+(((-0.020662095)*gclwh9_7*rxp0_2))+(((0.1893)*gclwh7_10*rxp1_2))+(((-0.1893)*gclwh11_10*rxp2_2))+(((-0.020662095)*gclwh11_7*rxp2_2))+(((0.020662095)*gclwh7_7*rxp1_2))+((gclwh5_10*npz*x630))+((x628*x633))+(((-1.0)*x628*x629))+(((-1.0)*x628*x631))+(((0.000293394886875)*x633))+((pp*x632))+(((-1.0)*x634*x635))+(((-0.1893)*gclwh9_10*rxp0_2))+(((-0.0089586225)*x634))+(((-0.0089586225)*x636))+(((-1.0)*x635*x636))+((gclwh13_10*npy*x630))+(((-1.0)*gclwh15_9*npx*x637))+(((-1.0)*gclwh15_10*npx*x630))+((gclwh13_9*npy*x637))+(((-0.000293394886875)*x631))+((gclwh5_9*npz*x637)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x638=htj1*htj1;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((1.0)+x638),-1);
if(!x639.valid){
continue;
}
cj1array[numsolutions]=((x639.value)*(((1.0)+(((-1.0)*x638)))));
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x640.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x640.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x641=htj2*htj2;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((1.0)+x641),-1);
if(!x642.valid){
continue;
}
cj2array[numsolutions]=((x642.value)*(((1.0)+(((-1.0)*x641)))));
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x643.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x643.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x644=htj3*htj3;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((1.0)+x644),-1);
if(!x645.valid){
continue;
}
cj3array[numsolutions]=((x645.value)*(((1.0)+(((-1.0)*x644)))));
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x646.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x646.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x647=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x647);
rxp1_0=(pz*r11);
rxp1_1=(r01*x647);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x648=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x648);
rxp1_0=(pz*r11);
rxp1_1=(r01*x648);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(r22,-1);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(sj3,-1);
if(!x650.valid){
continue;
}
sj4array[0]=((x649.value)*(x650.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj3*r22*(IKsin(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x651=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x651);
rxp1_0=(pz*r11);
rxp1_1=(r01*x651);
IkReal x652=(cj1*sj2);
IkReal x653=(cj4*r12);
IkReal x654=((4.0)*sj3);
IkReal x655=(cj3*cj4);
IkReal x656=((16.0)*r11);
IkReal x657=(r01*sj4);
IkReal x658=(cj2*sj1);
IkReal x659=((8.0)*r11);
IkReal x660=((12.0)*r02);
IkReal x661=(r10*sj3);
IkReal x662=((4.0)*sj4);
IkReal x663=(cj3*sj4);
IkReal x664=(r00*sj3);
IkReal x665=(r11*x654);
IkReal x666=(r01*x654);
IkReal x667=((4.0)*cj4*r02);
IkReal x668=((4.0)*r10*x655);
IkReal x669=((4.0)*r00*x655);
IkReal x670=(x660*x663);
IkReal x671=((12.0)*r12*x663);
IkReal x672=(r11*sj4*x658);
IkReal x673=(r00*x652*x662);
IkReal x674=(r00*x658*x662);
IkReal x675=((12.0)*x653*x658);
IkReal x676=((12.0)*x652*x653);
IkReal x677=(r10*x652*x662);
IkReal x678=(r10*x658*x662);
IkReal x679=(cj4*x658*x660);
IkReal x680=(cj4*x652*x660);
IkReal x681=(x676+x675);
IkReal x682=(x665+x673+x674);
IkReal x683=(x669+x678+x677);
IkReal x684=(x679+x671+x680);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x658*x667))+(((-1.0)*x668))+x682+(((-1.0)*x652*x667))+(((-1.0)*cj3*r12*x662)))))))+(((0.5)*(IKabs(((((-1.0)*x666))+x683+x681+(((-1.0)*x670)))))))+(((0.5)*(IKabs(((((-1.0)*x683))+(((-1.0)*cj3*r02*x662))+x666+(((4.0)*x653*x658))+(((4.0)*x652*x653)))))))+(IKabs(((((-1.0)*sj4*x658*x659))+(((-8.0)*r01*x655))+(((-8.0)*x664))+(((-1.0)*sj4*x652*x659)))))+(((0.5)*(IKabs(((((-1.0)*x684))+(((-1.0)*x668))+x682)))))+(((0.5)*(IKabs(((((16.0)*x652*x657))+(((-1.0)*x655*x656))+(((16.0)*x657*x658))+(((-16.0)*x661)))))))+(((0.5)*(IKabs(((((-1.0)*x683))+x666+x681+(((-1.0)*x670)))))))+(IKabs(((((-8.0)*x661))+(((-1.0)*x655*x659))+(((8.0)*x652*x657))+(((8.0)*x657*x658)))))+(((0.5)*(IKabs(((((-1.0)*x682))+(((-1.0)*x684))+x668)))))+(((0.5)*(IKabs(((((-1.0)*sj4*x656*x658))+(((-16.0)*x664))+(((-16.0)*r01*x655))+(((-1.0)*sj4*x652*x656))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x685=(cj3*cj4);
IkReal x686=((16.0)*r01);
IkReal x687=((4.0)*r00);
IkReal x688=(r10*sj3);
IkReal x689=((8.0)*r01);
IkReal x690=((4.0)*r11*sj3);
IkReal x691=(cj2*sj1*sj4);
IkReal x692=(cj3*r12*sj4);
IkReal x693=(cj1*sj2*sj4);
IkReal x694=((4.0)*r10*x685);
IkReal x695=((12.0)*x692);
IkReal x696=((4.0)*x692);
IkReal x697=(cj1*cj4*r02*sj2);
IkReal x698=(cj2*cj4*r02*sj1);
IkReal x699=(x687*x693);
IkReal x700=((12.0)*x698);
IkReal x701=((12.0)*x697);
IkReal x702=(x687*x691);
IkReal x703=((4.0)*x698);
IkReal x704=((4.0)*x697);
IkReal x705=(x690+x699+x702);
IkReal x706=(x696+x703+x704);
IkReal x707=(x695+x700+x701);
IkReal x708=(((x689*x691))+((x689*x693))+(((-8.0)*x688))+(((-8.0)*r11*x685)));
op[0]=((((-1.0)*x706))+(((-1.0)*x694))+x705);
op[1]=x708;
op[2]=((((-1.0)*x707))+(((-1.0)*x694))+x705);
op[3]=((((-16.0)*x688))+(((-16.0)*r11*x685))+((x686*x693))+((x686*x691)));
op[4]=((((-1.0)*x705))+(((-1.0)*x707))+x694);
op[5]=x708;
op[6]=((((-1.0)*x705))+(((-1.0)*x706))+x694);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x709=(cj2*sj1);
IkReal x710=(cj3*cj4);
IkReal x711=(r00*sj3);
IkReal x712=(cj1*sj2);
IkReal x713=(cj4*r12);
IkReal x714=(r11*sj4);
IkReal x715=((4.0)*r01*sj3);
IkReal x716=((4.0)*r10*sj4);
IkReal x717=(cj3*r02*sj4);
IkReal x718=((4.0)*r00*x710);
IkReal x719=((12.0)*x717);
IkReal x720=((4.0)*x717);
IkReal x721=(x709*x714);
IkReal x722=(x712*x713);
IkReal x723=((4.0)*x722);
IkReal x724=(x712*x716);
IkReal x725=(x709*x716);
IkReal x726=((4.0)*x709*x713);
IkReal x727=((12.0)*x709*x713);
IkReal x728=((12.0)*x722);
IkReal x729=(x723+x726);
IkReal x730=(x727+x728);
IkReal x731=(x718+x724+x725);
IkReal x732=((((-8.0)*x712*x714))+(((-8.0)*x721))+(((-8.0)*x711))+(((-8.0)*r01*x710)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x731))+(((-1.0)*x719))+x715+x730))))+(((-1.0)*x720))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x720))+(((-1.0)*x731))+x715+x729))))+(((-1.0)*x715))+(((htj5*htj5*htj5)*(((((-16.0)*r01*x710))+(((-16.0)*x711))+(((-16.0)*x712*x714))+(((-16.0)*x721))))))+x731+x729+((htj5*x732))+(((htj5*htj5)*(((((-1.0)*x719))+(((-1.0)*x715))+x731+x730))))+((x732*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x733=(cj5*sj4);
IkReal x734=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x734))+(((-1.0)*r00*x733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x733))+(((-1.0)*r11*x734))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x734))+(((-1.0)*r00*x733))))+IKsqr((((r10*x733))+(((-1.0)*r11*x734))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x734))+(((-1.0)*r00*x733))), (((r10*x733))+(((-1.0)*r11*x734))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x735=IKcos(j0);
IkReal x736=IKsin(j0);
IkReal x737=(r02*sj4);
IkReal x738=((0.39225)*cj1);
IkReal x739=((1.0)*sj3);
IkReal x740=(r12*sj4);
IkReal x741=((1.0)*sj1);
IkReal x742=(r11*sj5);
IkReal x743=(cj5*r01);
IkReal x744=(cj5*sj3);
IkReal x745=(r00*sj5);
IkReal x746=((0.425)*sj1);
IkReal x747=(cj5*r11);
IkReal x748=(r10*sj5);
IkReal x749=((1.0)*cj4);
IkReal x750=((0.39225)*sj1);
IkReal x751=(sj2*x736);
IkReal x752=(cj1*x735);
IkReal x753=(cj2*x736);
IkReal x754=(cj4*r01*sj5);
IkReal x755=(cj2*x735);
IkReal x756=(sj2*x735);
IkReal x757=((1.0)*cj5*sj4);
IkReal x758=(cj3*cj5*x749);
evalcond[0]=(((sj4*x742))+(((-1.0)*r12*x749))+(((-1.0)*r10*x757))+x735);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*x736))+(((-1.0)*r00*x757))+(((-1.0)*r02*x749)));
evalcond[2]=(((x738*x756))+(((-0.10915)*x736))+(((-1.0)*px))+(((-0.09465)*x745))+(((-0.09465)*x743))+((x750*x755))+((x735*x746)));
evalcond[3]=(((x738*x751))+(((-1.0)*py))+(((0.10915)*x735))+(((-0.09465)*x747))+(((-0.09465)*x748))+((x750*x753))+((x736*x746)));
evalcond[4]=(((cj4*r00*x744))+((cj3*x745))+((cj3*x743))+((cj2*x752))+(((-1.0)*x737*x739))+(((-1.0)*x739*x754))+(((-1.0)*x741*x756)));
evalcond[5]=((((-1.0)*sj2*x752))+(((-1.0)*r00*x758))+((cj3*x754))+((sj3*x745))+((sj3*x743))+((cj3*x737))+(((-1.0)*x741*x755)));
evalcond[6]=((((-1.0)*cj4*x739*x742))+((cj1*x753))+((cj3*x748))+((cj3*x747))+(((-1.0)*x739*x740))+(((-1.0)*x741*x751))+((cj4*r10*x744)));
evalcond[7]=(((cj3*cj4*x742))+(((-1.0)*r10*x758))+((cj3*x740))+((r11*x744))+(((-1.0)*cj1*x751))+((sj3*x748))+(((-1.0)*x741*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x759=IKPowWithIntegerCheck(cj3,-1);
if(!x759.valid){
continue;
}
CheckValue<IkReal> x760=IKPowWithIntegerCheck(r22,-1);
if(!x760.valid){
continue;
}
sj4array[0]=((-1.0)*(x759.value)*(x760.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x761=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x761);
rxp1_0=(pz*r11);
rxp1_1=(r01*x761);
IkReal x762=(cj1*sj2);
IkReal x763=(cj4*r12);
IkReal x764=((4.0)*sj3);
IkReal x765=(cj3*cj4);
IkReal x766=((16.0)*r11);
IkReal x767=(r01*sj4);
IkReal x768=(cj2*sj1);
IkReal x769=((8.0)*r11);
IkReal x770=((12.0)*r02);
IkReal x771=(r10*sj3);
IkReal x772=((4.0)*sj4);
IkReal x773=(cj3*sj4);
IkReal x774=(r00*sj3);
IkReal x775=(r11*x764);
IkReal x776=(r01*x764);
IkReal x777=((4.0)*cj4*r02);
IkReal x778=((4.0)*r10*x765);
IkReal x779=((4.0)*r00*x765);
IkReal x780=(x770*x773);
IkReal x781=((12.0)*r12*x773);
IkReal x782=(r11*sj4*x768);
IkReal x783=(r00*x762*x772);
IkReal x784=(r00*x768*x772);
IkReal x785=((12.0)*x763*x768);
IkReal x786=((12.0)*x762*x763);
IkReal x787=(r10*x762*x772);
IkReal x788=(r10*x768*x772);
IkReal x789=(cj4*x768*x770);
IkReal x790=(cj4*x762*x770);
IkReal x791=(x786+x785);
IkReal x792=(x775+x783+x784);
IkReal x793=(x779+x787+x788);
IkReal x794=(x790+x781+x789);
j5eval[0]=((IKabs(((((-1.0)*sj4*x768*x769))+(((-8.0)*x774))+(((-8.0)*r01*x765))+(((-1.0)*sj4*x762*x769)))))+(((0.5)*(IKabs(((((16.0)*x762*x767))+(((-1.0)*x765*x766))+(((-16.0)*x771))+(((16.0)*x767*x768)))))))+(((0.5)*(IKabs(((((-1.0)*x794))+(((-1.0)*x792))+x778)))))+(IKabs(((((-1.0)*x765*x769))+(((8.0)*x762*x767))+(((8.0)*x767*x768))+(((-8.0)*x771)))))+(((0.5)*(IKabs(((((-1.0)*x780))+x791+x793+(((-1.0)*x776)))))))+(((0.5)*(IKabs(((((-16.0)*x774))+(((-16.0)*r01*x765))+(((-1.0)*sj4*x766*x768))+(((-1.0)*sj4*x762*x766)))))))+(((0.5)*(IKabs(((((-1.0)*x768*x777))+(((-1.0)*cj3*r12*x772))+x792+(((-1.0)*x778))+(((-1.0)*x762*x777)))))))+(((0.5)*(IKabs(((((4.0)*x762*x763))+(((4.0)*x763*x768))+(((-1.0)*x793))+(((-1.0)*cj3*r02*x772))+x776)))))+(((0.5)*(IKabs(((((-1.0)*x793))+(((-1.0)*x780))+x776+x791)))))+(((0.5)*(IKabs(((((-1.0)*x794))+x792+(((-1.0)*x778))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x795=(cj3*cj4);
IkReal x796=((16.0)*r01);
IkReal x797=((4.0)*r00);
IkReal x798=(r10*sj3);
IkReal x799=((8.0)*r01);
IkReal x800=((4.0)*r11*sj3);
IkReal x801=(cj2*sj1*sj4);
IkReal x802=(cj3*r12*sj4);
IkReal x803=(cj1*sj2*sj4);
IkReal x804=((4.0)*r10*x795);
IkReal x805=((12.0)*x802);
IkReal x806=((4.0)*x802);
IkReal x807=(cj1*cj4*r02*sj2);
IkReal x808=(cj2*cj4*r02*sj1);
IkReal x809=(x797*x803);
IkReal x810=((12.0)*x808);
IkReal x811=((12.0)*x807);
IkReal x812=(x797*x801);
IkReal x813=((4.0)*x808);
IkReal x814=((4.0)*x807);
IkReal x815=(x812+x809+x800);
IkReal x816=(x814+x813+x806);
IkReal x817=(x810+x811+x805);
IkReal x818=((((-8.0)*x798))+((x799*x801))+((x799*x803))+(((-8.0)*r11*x795)));
op[0]=((((-1.0)*x816))+x815+(((-1.0)*x804)));
op[1]=x818;
op[2]=((((-1.0)*x817))+x815+(((-1.0)*x804)));
op[3]=((((-16.0)*x798))+(((-16.0)*r11*x795))+((x796*x803))+((x796*x801)));
op[4]=((((-1.0)*x815))+(((-1.0)*x817))+x804);
op[5]=x818;
op[6]=((((-1.0)*x816))+(((-1.0)*x815))+x804);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x819=(cj2*sj1);
IkReal x820=(cj3*cj4);
IkReal x821=(r00*sj3);
IkReal x822=(cj1*sj2);
IkReal x823=(cj4*r12);
IkReal x824=(r11*sj4);
IkReal x825=((4.0)*r01*sj3);
IkReal x826=((4.0)*r10*sj4);
IkReal x827=(cj3*r02*sj4);
IkReal x828=((4.0)*r00*x820);
IkReal x829=((12.0)*x827);
IkReal x830=((4.0)*x827);
IkReal x831=(x819*x824);
IkReal x832=(x822*x823);
IkReal x833=((4.0)*x832);
IkReal x834=(x822*x826);
IkReal x835=(x819*x826);
IkReal x836=((4.0)*x819*x823);
IkReal x837=((12.0)*x819*x823);
IkReal x838=((12.0)*x832);
IkReal x839=(x836+x833);
IkReal x840=(x837+x838);
IkReal x841=(x828+x834+x835);
IkReal x842=((((-8.0)*x821))+(((-8.0)*x822*x824))+(((-8.0)*r01*x820))+(((-8.0)*x831)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x841))+(((-1.0)*x830))+x825+x839))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x829))+(((-1.0)*x841))+x825+x840))))+(((-1.0)*x825))+(((htj5*htj5*htj5)*(((((-16.0)*r01*x820))+(((-16.0)*x821))+(((-16.0)*x822*x824))+(((-16.0)*x831))))))+(((htj5*htj5)*(((((-1.0)*x829))+(((-1.0)*x825))+x841+x840))))+(((-1.0)*x830))+((x842*(htj5*htj5*htj5*htj5*htj5)))+x839+x841+((htj5*x842)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x843=(cj5*sj4);
IkReal x844=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x843))+((r01*x844)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x843))+(((-1.0)*r11*x844))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x843))+((r01*x844))))+IKsqr((((r10*x843))+(((-1.0)*r11*x844))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x843))+((r01*x844))), (((r10*x843))+(((-1.0)*r11*x844))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x845=IKcos(j0);
IkReal x846=IKsin(j0);
IkReal x847=(r02*sj4);
IkReal x848=((0.39225)*cj1);
IkReal x849=((1.0)*sj3);
IkReal x850=(r12*sj4);
IkReal x851=((1.0)*sj1);
IkReal x852=(r11*sj5);
IkReal x853=(cj5*r01);
IkReal x854=(cj5*sj3);
IkReal x855=(r00*sj5);
IkReal x856=((0.425)*sj1);
IkReal x857=(cj5*r11);
IkReal x858=(r10*sj5);
IkReal x859=((1.0)*cj4);
IkReal x860=((0.39225)*sj1);
IkReal x861=(sj2*x846);
IkReal x862=(cj1*x845);
IkReal x863=(cj2*x846);
IkReal x864=(cj4*r01*sj5);
IkReal x865=(cj2*x845);
IkReal x866=(sj2*x845);
IkReal x867=((1.0)*cj5*sj4);
IkReal x868=(cj3*cj5*x859);
evalcond[0]=((((-1.0)*r10*x867))+(((-1.0)*r12*x859))+x845+((sj4*x852)));
evalcond[1]=((((-1.0)*r00*x867))+((r01*sj4*sj5))+(((-1.0)*r02*x859))+(((-1.0)*x846)));
evalcond[2]=((((-0.09465)*x855))+(((-0.09465)*x853))+((x848*x866))+((x845*x856))+(((-0.10915)*x846))+(((-1.0)*px))+((x860*x865)));
evalcond[3]=((((-0.09465)*x857))+(((-0.09465)*x858))+((x848*x861))+(((-1.0)*py))+((x846*x856))+((x860*x863))+(((0.10915)*x845)));
evalcond[4]=((((-1.0)*x847*x849))+((cj2*x862))+((cj4*r00*x854))+((cj3*x853))+((cj3*x855))+(((-1.0)*x849*x864))+(((-1.0)*x851*x866)));
evalcond[5]=(((cj3*x864))+(((-1.0)*r00*x868))+((sj3*x855))+((sj3*x853))+(((-1.0)*sj2*x862))+(((-1.0)*x851*x865))+((cj3*x847)));
evalcond[6]=((((-1.0)*x849*x850))+(((-1.0)*cj4*x849*x852))+((cj3*x857))+((cj3*x858))+((cj1*x863))+(((-1.0)*x851*x861))+((cj4*r10*x854)));
evalcond[7]=((((-1.0)*r10*x868))+((cj3*cj4*x852))+((sj3*x858))+((r11*x854))+((cj3*x850))+(((-1.0)*x851*x863))+(((-1.0)*cj1*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x869=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x869);
rxp1_0=(pz*r11);
rxp1_1=(r01*x869);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x870=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x870);
rxp1_0=(pz*r11);
rxp1_1=(r01*x870);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x871=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x871);
rxp1_0=(pz*r11);
rxp1_1=(r01*x871);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(r22,-1);
if(!x872.valid){
continue;
}
sj4array[0]=((-1.0)*(x872.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x873=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x873);
rxp1_0=(pz*r11);
rxp1_1=(r01*x873);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
IkReal x874=x875.value;
j5array[0]=((-1.0)*x874);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x874)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x876=(cj5*sj4);
IkReal x877=(sj4*sj5);
if( IKabs((((r01*x877))+(((-1.0)*r00*x876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x876))+(((-1.0)*r11*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x877))+(((-1.0)*r00*x876))))+IKsqr((((r10*x876))+(((-1.0)*r11*x877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x877))+(((-1.0)*r00*x876))), (((r10*x876))+(((-1.0)*r11*x877))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x878=IKcos(j0);
IkReal x879=IKsin(j0);
IkReal x880=(cj5*r01);
IkReal x881=(sj1*sj2);
IkReal x882=(sj4*sj5);
IkReal x883=(cj1*cj2);
IkReal x884=(cj5*r11);
IkReal x885=((0.425)*sj1);
IkReal x886=(r00*sj5);
IkReal x887=(r10*sj5);
IkReal x888=((1.0)*x879);
IkReal x889=((1.0)*cj5*sj4);
evalcond[0]=(((r11*x882))+(((-1.0)*r10*x889))+x878);
evalcond[1]=(((r01*x882))+(((-1.0)*x888))+(((-1.0)*r00*x889)));
evalcond[2]=((((-1.0)*x878*x881))+((x878*x883))+x886+x880);
evalcond[3]=(((x879*x883))+(((-1.0)*x881*x888))+x884+x887);
evalcond[4]=((((-0.09465)*x886))+(((-0.09465)*x880))+(((-1.0)*px))+((x878*x885))+(((-0.10915)*x879)));
evalcond[5]=(((x879*x885))+(((-0.09465)*x884))+(((-0.09465)*x887))+(((-1.0)*py))+(((0.10915)*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x890=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x890);
rxp1_0=(pz*r11);
rxp1_1=(r01*x890);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x891=IKPowWithIntegerCheck(r22,-1);
if(!x891.valid){
continue;
}
sj4array[0]=((x891.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x892=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x892);
rxp1_0=(pz*r11);
rxp1_1=(r01*x892);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
IkReal x893=x894.value;
j5array[0]=((-1.0)*x893);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x893)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x895=(cj5*sj4);
IkReal x896=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x895))+((r01*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x896))+((r10*x895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x895))+((r01*x896))))+IKsqr(((((-1.0)*r11*x896))+((r10*x895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x895))+((r01*x896))), ((((-1.0)*r11*x896))+((r10*x895))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x897=IKcos(j0);
IkReal x898=IKsin(j0);
IkReal x899=(sj1*sj2);
IkReal x900=(sj4*sj5);
IkReal x901=(cj1*cj2);
IkReal x902=(cj5*r11);
IkReal x903=((1.0)*sj5);
IkReal x904=((0.425)*sj1);
IkReal x905=((0.09465)*sj5);
IkReal x906=((1.0)*cj5);
IkReal x907=((1.0)*x898);
evalcond[0]=(((r11*x900))+x897+(((-1.0)*r10*sj4*x906)));
evalcond[1]=((((-1.0)*r00*sj4*x906))+((r01*x900))+(((-1.0)*x907)));
evalcond[2]=(((x897*x901))+(((-1.0)*r00*x903))+(((-1.0)*r01*x906))+(((-1.0)*x897*x899)));
evalcond[3]=((((-1.0)*x902))+((x898*x901))+(((-1.0)*x899*x907))+(((-1.0)*r10*x903)));
evalcond[4]=((((-0.09465)*cj5*r01))+((x897*x904))+(((-1.0)*r00*x905))+(((-1.0)*px))+(((-0.10915)*x898)));
evalcond[5]=((((-0.09465)*x902))+(((-1.0)*py))+(((0.10915)*x897))+((x898*x904))+(((-1.0)*r10*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x908=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x908);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(r22,-1);
if(!x909.valid){
continue;
}
sj4array[0]=((x909.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x910=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x910);
rxp1_0=(pz*r11);
rxp1_1=(r01*x910);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x911=x912.value;
j5array[0]=((-1.0)*x911);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x911)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x913=(cj5*sj4);
IkReal x914=(sj4*sj5);
if( IKabs((((r01*x914))+(((-1.0)*r00*x913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x914))+((r10*x913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x914))+(((-1.0)*r00*x913))))+IKsqr(((((-1.0)*r11*x914))+((r10*x913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x914))+(((-1.0)*r00*x913))), ((((-1.0)*r11*x914))+((r10*x913))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x915=IKcos(j0);
IkReal x916=IKsin(j0);
IkReal x917=(cj1*sj2);
IkReal x918=(cj5*r01);
IkReal x919=(sj4*sj5);
IkReal x920=(cj2*sj1);
IkReal x921=((0.425)*sj1);
IkReal x922=(r00*sj5);
IkReal x923=(cj5*r11);
IkReal x924=(r10*sj5);
IkReal x925=((0.39225)*x916);
IkReal x926=((1.0)*x915);
IkReal x927=((1.0)*x916);
IkReal x928=((1.0)*cj5*sj4);
IkReal x929=((0.39225)*x915);
evalcond[0]=((((-1.0)*r10*x928))+((r11*x919))+x915);
evalcond[1]=((((-1.0)*x927))+(((-1.0)*r00*x928))+((r01*x919)));
evalcond[2]=((((-1.0)*x920*x926))+x922+x918+(((-1.0)*x917*x926)));
evalcond[3]=((((-1.0)*x920*x927))+x924+x923+(((-1.0)*x917*x927)));
evalcond[4]=((((-0.09465)*x922))+((x915*x921))+((x920*x929))+(((-0.10915)*x916))+(((-0.09465)*x918))+(((-1.0)*px))+((x917*x929)));
evalcond[5]=((((-0.09465)*x924))+(((-0.09465)*x923))+((x916*x921))+((x920*x925))+(((0.10915)*x915))+(((-1.0)*py))+((x917*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x931=IKPowWithIntegerCheck(r22,-1);
if(!x931.valid){
continue;
}
sj4array[0]=((-1.0)*(x931.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x932=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x932);
rxp1_0=(pz*r11);
rxp1_1=(r01*x932);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
IkReal x933=x934.value;
j5array[0]=((-1.0)*x933);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x933)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x935=(cj5*sj4);
IkReal x936=(sj4*sj5);
if( IKabs((((r01*x936))+(((-1.0)*r00*x935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x935))+(((-1.0)*r11*x936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x936))+(((-1.0)*r00*x935))))+IKsqr((((r10*x935))+(((-1.0)*r11*x936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x936))+(((-1.0)*r00*x935))), (((r10*x935))+(((-1.0)*r11*x936))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x937=IKcos(j0);
IkReal x938=IKsin(j0);
IkReal x939=(cj1*sj2);
IkReal x940=(sj4*sj5);
IkReal x941=(cj5*r11);
IkReal x942=((1.0)*sj5);
IkReal x943=(cj2*sj1);
IkReal x944=((0.425)*sj1);
IkReal x945=((0.09465)*sj5);
IkReal x946=((1.0)*cj5);
IkReal x947=((0.39225)*x938);
IkReal x948=((1.0)*x937);
IkReal x949=((1.0)*x938);
IkReal x950=((0.39225)*x937);
evalcond[0]=((((-1.0)*r10*sj4*x946))+((r11*x940))+x937);
evalcond[1]=((((-1.0)*x949))+((r01*x940))+(((-1.0)*r00*sj4*x946)));
evalcond[2]=((((-1.0)*r01*x946))+(((-1.0)*r00*x942))+(((-1.0)*x939*x948))+(((-1.0)*x943*x948)));
evalcond[3]=((((-1.0)*x939*x949))+(((-1.0)*x941))+(((-1.0)*x943*x949))+(((-1.0)*r10*x942)));
evalcond[4]=((((-1.0)*r00*x945))+(((-0.09465)*cj5*r01))+(((-0.10915)*x938))+((x937*x944))+((x943*x950))+(((-1.0)*px))+((x939*x950)));
evalcond[5]=((((0.10915)*x937))+(((-0.09465)*x941))+((x938*x944))+((x939*x947))+((x943*x947))+(((-1.0)*py))+(((-1.0)*r10*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x951=IKPowWithIntegerCheck(r22,-1);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952=IKPowWithIntegerCheck(sj3,-1);
if(!x952.valid){
continue;
}
sj4array[0]=((x951.value)*(x952.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj3*r22*(IKsin(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x953=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x953);
rxp1_0=(pz*r11);
rxp1_1=(r01*x953);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x954=((12.0)*px);
IkReal x955=((0.3786)*r01);
IkReal x956=(r11*sj4);
IkReal x957=(cj2*sj1);
IkReal x958=(cj1*sj2);
IkReal x959=(r10*sj4);
IkReal x960=(r00*sj3);
IkReal x961=((4.0)*cj4);
IkReal x962=(sj1*sj2);
IkReal x963=(cj4*r01);
IkReal x964=((16.0)*sj3);
IkReal x965=(r01*sj4);
IkReal x966=(cj1*cj2);
IkReal x967=((8.0)*cj3);
IkReal x968=((4.0)*r01);
IkReal x969=((8.0)*sj3);
IkReal x970=(cj3*r00);
IkReal x971=((16.0)*cj3);
IkReal x972=((0.4366)*r00*sj4);
IkReal x973=((1.7)*sj1*x959);
IkReal x974=(x960*x966);
IkReal x975=((1.569)*x957*x959);
IkReal x976=((1.569)*x958*x959);
IkReal x977=(((sj3*x962*x968))+((x961*x966*x970)));
IkReal x978=(x973+x972+x975+x976);
IkReal x979=(((cj3*x957*x968))+((x961*x962*x970))+((cj3*x958*x968))+((x958*x960*x961))+((sj3*x966*x968))+((x957*x960*x961)));
j5eval[0]=((((0.5)*(IKabs((((x963*x966*x971))+(((-1.0)*x958*x963*x964))+(((16.0)*x974))+(((16.0)*x958*x970))+(((-1.0)*x962*x963*x971))+(((-16.0)*x960*x962))+(((-1.0)*x957*x963*x964))+(((16.0)*x957*x970)))))))+(IKabs(((((-1.0)*x958*x963*x969))+(((8.0)*x974))+((r00*x957*x967))+(((-1.0)*x962*x963*x967))+(((-1.0)*x957*x963*x969))+((r00*x958*x967))+((x963*x966*x967))+(((-8.0)*x960*x962)))))+(IKabs(((((-3.138)*x956*x958))+(((-3.138)*x956*x957))+(((-3.4)*sj1*x956))+(((-0.8732)*x965))+(((-0.7572)*r00)))))+(((0.5)*(IKabs((x979+(((-1.0)*x977)))))))+(IKabs((x977+(((-1.0)*x979)))))+(((0.5)*(IKabs(((((-1.0)*x954))+x955+(((-1.0)*x978)))))))+(((0.5)*(IKabs(((((-4.0)*px))+x955+(((-1.0)*x978)))))))+(((0.5)*(IKabs(((((-6.8)*sj1*x956))+(((-6.276)*x956*x957))+(((-6.276)*x956*x958))+(((-1.5144)*r00))+(((-1.7464)*x965)))))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x955))+x978))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x980=((0.3786)*r01);
IkReal x981=((12.0)*px);
IkReal x982=((4.0)*px);
IkReal x983=(r01*sj4);
IkReal x984=(r11*sj4);
IkReal x985=(cj1*sj2);
IkReal x986=(r10*sj4);
IkReal x987=(cj2*sj1);
IkReal x988=((0.4366)*r00*sj4);
IkReal x989=((1.7)*sj1*x986);
IkReal x990=((1.569)*x986*x987);
IkReal x991=((1.569)*x985*x986);
IkReal x992=(x991+x990+x988+x989);
IkReal x993=((((-3.138)*x984*x987))+(((-3.138)*x984*x985))+(((-3.4)*sj1*x984))+(((-0.8732)*x983))+(((-0.7572)*r00)));
op[0]=((((-1.0)*x982))+(((-1.0)*x992))+x980);
op[1]=x993;
op[2]=((((-1.0)*x981))+(((-1.0)*x992))+x980);
op[3]=((((-1.7464)*x983))+(((-6.276)*x984*x985))+(((-6.276)*x984*x987))+(((-6.8)*sj1*x984))+(((-1.5144)*r00)));
op[4]=((((-1.0)*x981))+(((-1.0)*x980))+x992);
op[5]=x993;
op[6]=((((-1.0)*x982))+(((-1.0)*x980))+x992);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=(((htj5*(((((8.0)*cj2*cj3*r00*sj1))+(((8.0)*cj1*cj2*cj3*cj4*r01))+(((-8.0)*cj2*cj4*r01*sj1*sj3))+(((8.0)*cj1*cj3*r00*sj2))+(((-8.0)*cj3*cj4*r01*sj1*sj2))+(((8.0)*cj1*cj2*r00*sj3))+(((-8.0)*cj1*cj4*r01*sj2*sj3))+(((-8.0)*r00*sj1*sj2*sj3))))))+(((4.0)*cj3*cj4*r00*sj1*sj2))+(((-4.0)*r01*sj1*sj2*sj3))+(((4.0)*cj2*cj4*r00*sj1*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj3*cj4*r01*sj1*sj2))+(((-16.0)*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*cj4*r01))+(((16.0)*cj2*cj3*r00*sj1))+(((-16.0)*cj2*cj4*r01*sj1*sj3))+(((16.0)*cj1*cj3*r00*sj2))+(((-16.0)*cj1*cj4*r01*sj2*sj3))+(((16.0)*cj1*cj2*r00*sj3))))))+(((-4.0)*cj1*cj2*cj3*cj4*r00))+(((htj5*htj5)*(((((4.0)*cj3*cj4*r00*sj1*sj2))+(((-4.0)*r01*sj1*sj2*sj3))+(((4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*cj4*r00))+(((4.0)*cj1*cj4*r00*sj2*sj3))+(((4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*r01*sj3))+(((4.0)*cj2*cj3*r01*sj1))))))+(((4.0)*cj1*cj4*r00*sj2*sj3))+(((4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*r01*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*cj3*cj4*r00))+(((-4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj2*cj3*r01*sj1))+(((-4.0)*cj1*cj2*r01*sj3))+(((-4.0)*cj3*cj4*r00*sj1*sj2))+(((4.0)*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj4*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*cj3*cj4*r00))+(((-4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj2*cj3*r01*sj1))+(((-4.0)*cj1*cj2*r01*sj3))+(((-4.0)*cj3*cj4*r00*sj1*sj2))+(((4.0)*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj4*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj2*cj3*r00*sj1))+(((8.0)*cj1*cj2*cj3*cj4*r01))+(((-8.0)*cj2*cj4*r01*sj1*sj3))+(((8.0)*cj1*cj3*r00*sj2))+(((-8.0)*cj3*cj4*r01*sj1*sj2))+(((8.0)*cj1*cj2*r00*sj3))+(((-8.0)*cj1*cj4*r01*sj2*sj3))+(((-8.0)*r00*sj1*sj2*sj3))))))+(((4.0)*cj2*cj3*r01*sj1)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x994=(cj5*sj4);
IkReal x995=(sj4*sj5);
if( IKabs((((r01*x995))+(((-1.0)*r00*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x994))+(((-1.0)*r11*x995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x995))+(((-1.0)*r00*x994))))+IKsqr((((r10*x994))+(((-1.0)*r11*x995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x995))+(((-1.0)*r00*x994))), (((r10*x994))+(((-1.0)*r11*x995))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x996=IKcos(j0);
IkReal x997=IKsin(j0);
IkReal x998=((0.39225)*cj1);
IkReal x999=((1.0)*cj3);
IkReal x1000=((1.0)*sj1);
IkReal x1001=(r11*sj5);
IkReal x1002=(cj5*r01);
IkReal x1003=(cj5*r11);
IkReal x1004=(r01*sj5);
IkReal x1005=(cj3*cj4);
IkReal x1006=(r00*sj5);
IkReal x1007=((0.425)*sj1);
IkReal x1008=(r10*sj5);
IkReal x1009=((0.39225)*sj1);
IkReal x1010=(sj2*x997);
IkReal x1011=(cj4*cj5*r00);
IkReal x1012=(cj1*x996);
IkReal x1013=(cj4*cj5*r10);
IkReal x1014=((1.0)*cj4*sj3);
IkReal x1015=(cj2*x997);
IkReal x1016=(cj2*x996);
IkReal x1017=(sj2*x996);
IkReal x1018=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x1001))+x996+(((-1.0)*r10*x1018)));
evalcond[1]=(((sj4*x1004))+(((-1.0)*x997))+(((-1.0)*r00*x1018)));
evalcond[2]=(((cj3*x1006))+((cj3*x1002))+((cj2*x1012))+(((-1.0)*x1004*x1014))+((sj3*x1011))+(((-1.0)*x1000*x1017)));
evalcond[3]=(((cj3*x1008))+((cj3*x1003))+(((-1.0)*x1001*x1014))+((sj3*x1013))+((cj1*x1015))+(((-1.0)*x1000*x1010)));
evalcond[4]=((((-1.0)*sj2*x1012))+((sj3*x1006))+((sj3*x1002))+(((-1.0)*x1011*x999))+((x1004*x1005))+(((-1.0)*x1000*x1016)));
evalcond[5]=(((sj3*x1003))+((sj3*x1008))+(((-1.0)*x1013*x999))+(((-1.0)*cj1*x1010))+((x1001*x1005))+(((-1.0)*x1000*x1015)));
evalcond[6]=(((x1009*x1016))+((x1007*x996))+(((-1.0)*px))+(((-0.10915)*x997))+(((-0.09465)*x1006))+(((-0.09465)*x1002))+((x1017*x998)));
evalcond[7]=(((x1009*x1015))+((x1010*x998))+(((0.10915)*x996))+((x1007*x997))+(((-1.0)*py))+(((-0.09465)*x1008))+(((-0.09465)*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(cj3,-1);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(r22,-1);
if(!x1020.valid){
continue;
}
sj4array[0]=((-1.0)*(x1019.value)*(x1020.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1021=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1021);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1021);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1022=((12.0)*px);
IkReal x1023=((0.3786)*r01);
IkReal x1024=(r11*sj4);
IkReal x1025=(cj2*sj1);
IkReal x1026=(cj1*sj2);
IkReal x1027=(r10*sj4);
IkReal x1028=(r00*sj3);
IkReal x1029=((4.0)*cj4);
IkReal x1030=(sj1*sj2);
IkReal x1031=(cj4*r01);
IkReal x1032=((16.0)*sj3);
IkReal x1033=(r01*sj4);
IkReal x1034=(cj1*cj2);
IkReal x1035=((8.0)*cj3);
IkReal x1036=((4.0)*r01);
IkReal x1037=((8.0)*sj3);
IkReal x1038=(cj3*r00);
IkReal x1039=((16.0)*cj3);
IkReal x1040=((0.4366)*r00*sj4);
IkReal x1041=((1.7)*sj1*x1027);
IkReal x1042=(x1028*x1034);
IkReal x1043=((1.569)*x1025*x1027);
IkReal x1044=((1.569)*x1026*x1027);
IkReal x1045=(((x1029*x1034*x1038))+((sj3*x1030*x1036)));
IkReal x1046=(x1043+x1041+x1040+x1044);
IkReal x1047=(((cj3*x1025*x1036))+((x1029*x1030*x1038))+((x1026*x1028*x1029))+((cj3*x1026*x1036))+((x1025*x1028*x1029))+((sj3*x1034*x1036)));
j5eval[0]=((IKabs(((((-1.0)*x1026*x1031*x1037))+(((-1.0)*x1025*x1031*x1037))+(((-8.0)*x1028*x1030))+((r00*x1026*x1035))+((r00*x1025*x1035))+(((8.0)*x1042))+((x1031*x1034*x1035))+(((-1.0)*x1030*x1031*x1035)))))+(((0.5)*(IKabs(((((16.0)*x1025*x1038))+(((-1.0)*x1026*x1031*x1032))+(((-16.0)*x1028*x1030))+(((-1.0)*x1025*x1031*x1032))+(((16.0)*x1026*x1038))+((x1031*x1034*x1039))+(((-1.0)*x1030*x1031*x1039))+(((16.0)*x1042)))))))+(IKabs((x1045+(((-1.0)*x1047)))))+(((0.5)*(IKabs((x1046+(((-1.0)*x1022))+(((-1.0)*x1023)))))))+(((0.5)*(IKabs((x1023+(((-4.0)*px))+(((-1.0)*x1046)))))))+(((0.5)*(IKabs(((((-6.8)*sj1*x1024))+(((-6.276)*x1024*x1026))+(((-6.276)*x1024*x1025))+(((-1.5144)*r00))+(((-1.7464)*x1033)))))))+(IKabs(((((-0.8732)*x1033))+(((-3.138)*x1024*x1026))+(((-3.138)*x1024*x1025))+(((-0.7572)*r00))+(((-3.4)*sj1*x1024)))))+(((0.5)*(IKabs((x1023+(((-1.0)*x1022))+(((-1.0)*x1046)))))))+(((0.5)*(IKabs((x1047+(((-1.0)*x1045))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1048=((0.3786)*r01);
IkReal x1049=((12.0)*px);
IkReal x1050=((4.0)*px);
IkReal x1051=(r01*sj4);
IkReal x1052=(r11*sj4);
IkReal x1053=(cj1*sj2);
IkReal x1054=(r10*sj4);
IkReal x1055=(cj2*sj1);
IkReal x1056=((0.4366)*r00*sj4);
IkReal x1057=((1.7)*sj1*x1054);
IkReal x1058=((1.569)*x1054*x1055);
IkReal x1059=((1.569)*x1053*x1054);
IkReal x1060=(x1056+x1057+x1058+x1059);
IkReal x1061=((((-0.8732)*x1051))+(((-3.138)*x1052*x1053))+(((-3.138)*x1052*x1055))+(((-3.4)*sj1*x1052))+(((-0.7572)*r00)));
op[0]=((((-1.0)*x1050))+x1048+(((-1.0)*x1060)));
op[1]=x1061;
op[2]=(x1048+(((-1.0)*x1060))+(((-1.0)*x1049)));
op[3]=((((-1.7464)*x1051))+(((-1.5144)*r00))+(((-6.276)*x1052*x1053))+(((-6.276)*x1052*x1055))+(((-6.8)*sj1*x1052)));
op[4]=(x1060+(((-1.0)*x1048))+(((-1.0)*x1049)));
op[5]=x1061;
op[6]=((((-1.0)*x1050))+x1060+(((-1.0)*x1048)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=(((htj5*(((((8.0)*cj2*cj3*r00*sj1))+(((8.0)*cj1*cj2*cj3*cj4*r01))+(((-8.0)*cj2*cj4*r01*sj1*sj3))+(((8.0)*cj1*cj3*r00*sj2))+(((-8.0)*cj3*cj4*r01*sj1*sj2))+(((8.0)*cj1*cj2*r00*sj3))+(((-8.0)*cj1*cj4*r01*sj2*sj3))+(((-8.0)*r00*sj1*sj2*sj3))))))+(((4.0)*cj3*cj4*r00*sj1*sj2))+(((-4.0)*r01*sj1*sj2*sj3))+(((4.0)*cj2*cj4*r00*sj1*sj3))+(((htj5*htj5*htj5)*(((((-16.0)*cj3*cj4*r01*sj1*sj2))+(((-16.0)*r00*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*cj4*r01))+(((16.0)*cj2*cj3*r00*sj1))+(((-16.0)*cj2*cj4*r01*sj1*sj3))+(((16.0)*cj1*cj3*r00*sj2))+(((-16.0)*cj1*cj4*r01*sj2*sj3))+(((16.0)*cj1*cj2*r00*sj3))))))+(((-4.0)*cj1*cj2*cj3*cj4*r00))+(((htj5*htj5)*(((((4.0)*cj3*cj4*r00*sj1*sj2))+(((-4.0)*r01*sj1*sj2*sj3))+(((4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*cj4*r00))+(((4.0)*cj1*cj4*r00*sj2*sj3))+(((4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*r01*sj3))+(((4.0)*cj2*cj3*r01*sj1))))))+(((4.0)*cj1*cj4*r00*sj2*sj3))+(((4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*r01*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*cj3*cj4*r00))+(((-4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj2*cj3*r01*sj1))+(((-4.0)*cj1*cj2*r01*sj3))+(((-4.0)*cj3*cj4*r00*sj1*sj2))+(((4.0)*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj4*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj1*cj3*r01*sj2))+(((4.0)*cj1*cj2*cj3*cj4*r00))+(((-4.0)*cj2*cj4*r00*sj1*sj3))+(((-4.0)*cj2*cj3*r01*sj1))+(((-4.0)*cj1*cj2*r01*sj3))+(((-4.0)*cj3*cj4*r00*sj1*sj2))+(((4.0)*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj4*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj2*cj3*r00*sj1))+(((8.0)*cj1*cj2*cj3*cj4*r01))+(((-8.0)*cj2*cj4*r01*sj1*sj3))+(((8.0)*cj1*cj3*r00*sj2))+(((-8.0)*cj3*cj4*r01*sj1*sj2))+(((8.0)*cj1*cj2*r00*sj3))+(((-8.0)*cj1*cj4*r01*sj2*sj3))+(((-8.0)*r00*sj1*sj2*sj3))))))+(((4.0)*cj2*cj3*r01*sj1)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1062=(cj5*sj4);
IkReal x1063=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1062))+((r01*x1063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1063))+((r10*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1062))+((r01*x1063))))+IKsqr(((((-1.0)*r11*x1063))+((r10*x1062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1062))+((r01*x1063))), ((((-1.0)*r11*x1063))+((r10*x1062))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1064=IKcos(j0);
IkReal x1065=IKsin(j0);
IkReal x1066=((0.39225)*cj1);
IkReal x1067=((1.0)*cj3);
IkReal x1068=((1.0)*sj1);
IkReal x1069=(r11*sj5);
IkReal x1070=(cj5*r01);
IkReal x1071=(cj5*r11);
IkReal x1072=(r01*sj5);
IkReal x1073=(cj3*cj4);
IkReal x1074=(r00*sj5);
IkReal x1075=((0.425)*sj1);
IkReal x1076=(r10*sj5);
IkReal x1077=((0.39225)*sj1);
IkReal x1078=(sj2*x1065);
IkReal x1079=(cj4*cj5*r00);
IkReal x1080=(cj1*x1064);
IkReal x1081=(cj4*cj5*r10);
IkReal x1082=((1.0)*cj4*sj3);
IkReal x1083=(cj2*x1065);
IkReal x1084=(cj2*x1064);
IkReal x1085=(sj2*x1064);
IkReal x1086=((1.0)*cj5*sj4);
evalcond[0]=(x1064+(((-1.0)*r10*x1086))+((sj4*x1069)));
evalcond[1]=((((-1.0)*r00*x1086))+((sj4*x1072))+(((-1.0)*x1065)));
evalcond[2]=(((sj3*x1079))+((cj3*x1074))+((cj3*x1070))+(((-1.0)*x1068*x1085))+((cj2*x1080))+(((-1.0)*x1072*x1082)));
evalcond[3]=(((sj3*x1081))+((cj1*x1083))+((cj3*x1076))+((cj3*x1071))+(((-1.0)*x1069*x1082))+(((-1.0)*x1068*x1078)));
evalcond[4]=(((sj3*x1070))+((sj3*x1074))+(((-1.0)*sj2*x1080))+(((-1.0)*x1068*x1084))+(((-1.0)*x1067*x1079))+((x1072*x1073)));
evalcond[5]=(((x1069*x1073))+((sj3*x1071))+((sj3*x1076))+(((-1.0)*x1067*x1081))+(((-1.0)*cj1*x1078))+(((-1.0)*x1068*x1083)));
evalcond[6]=((((-0.10915)*x1065))+(((-0.09465)*x1070))+(((-0.09465)*x1074))+((x1066*x1085))+(((-1.0)*px))+((x1077*x1084))+((x1064*x1075)));
evalcond[7]=(((x1066*x1078))+(((-0.09465)*x1071))+(((-0.09465)*x1076))+(((-1.0)*py))+((x1077*x1083))+((x1065*x1075))+(((0.10915)*x1064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1089 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1089.valid){
continue;
}
IkReal x1087=((1.0)*(x1089.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1090.valid){
continue;
}
if( (((x1090.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1090.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1088=IKasin(((x1090.value)*(((((0.39225)*cj1*cj2))+(((0.425)*cj1))+(((-1.0)*pz))+(((-0.39225)*sj1*sj2))))));
j5array[0]=((((-1.0)*x1088))+(((-1.0)*x1087)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1088+(((-1.0)*x1087)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1091=cj5*cj5;
IkReal x1092=r21*r21;
IkReal x1093=(sj3*x1091);
IkReal x1094=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1093*(r20*r20)))+(((-1.0)*x1092*x1093))+((sj3*x1092)));
j4eval[0]=x1094;
j4eval[1]=IKsign(x1094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1095=cj5*cj5;
IkReal x1096=r21*r21;
IkReal x1097=((1.0)*cj3);
IkReal x1098=(cj3*x1095);
IkReal x1099=((((-1.0)*x1097*(r22*r22)))+(((-1.0)*x1096*x1097))+(((-1.0)*x1095*x1097*(r20*r20)))+((x1096*x1098))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1099;
j4eval[1]=IKsign(x1099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1100=cj2*cj2;
IkReal x1101=cj1*cj1;
IkReal x1102=((133365000.0)*cj2);
IkReal x1103=((12.4570625281677)*cj2);
IkReal x1104=(cj1*sj1*sj2);
IkReal x1105=(x1100*x1101);
j0eval[0]=((7.19369221392727)+x1103+(((5.74856797255738)*x1100))+(((-11.4971359451148)*x1105))+(((-1.0)*x1101))+(((12.4570625281677)*x1104))+(((-1.0)*x1101*x1103))+(((11.4971359451148)*cj2*x1104)));
j0eval[1]=IKsign(((77015489.0)+x1102+(((133365000.0)*x1104))+(((-10705975.0)*x1101))+(((123088050.0)*cj2*x1104))+(((-123088050.0)*x1105))+(((61544025.0)*x1100))+(((-1.0)*x1101*x1102))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1106=((1.0)*cj5);
IkReal x1107=((1.0)*sj5);
IkReal x1108=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1108;
j0eval[1]=((IKabs(((((-1.0)*r11*x1106))+(((-1.0)*r10*x1107)))))+(IKabs(((((-1.0)*r01*x1106))+(((-1.0)*r00*x1107))))));
j0eval[2]=IKsign(x1108);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1109=cj5*cj5;
IkReal x1110=r21*r21;
IkReal x1111=(cj1*sj2);
IkReal x1112=((1.0)*r22);
IkReal x1113=(cj5*r20);
IkReal x1114=(r21*sj5);
IkReal x1115=(cj2*sj1);
IkReal x1116=(x1110+(r22*r22)+((x1109*(r20*r20)))+(((-2.0)*x1113*x1114))+(((-1.0)*x1109*x1110)));
j4eval[0]=x1116;
j4eval[1]=IKsign(x1116);
j4eval[2]=((IKabs(((((-1.0)*x1112*x1115))+(((-1.0)*x1111*x1112)))))+(IKabs((((x1111*x1113))+((x1113*x1115))+(((-1.0)*x1111*x1114))+(((-1.0)*x1114*x1115))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1117=((1.0)*cj5);
IkReal x1118=((((-1.0)*r01*x1117))+(((-1.0)*r00*sj5)));
j4eval[0]=x1118;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1117)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1119=cj5*cj5;
IkReal x1120=((1.0)*r21);
IkReal x1121=(cj5*sj5);
IkReal x1122=((1.0)*r20);
IkReal x1123=((((-1.0)*r00*x1120*x1121))+((r00*r20*x1119))+((r01*r21))+(((-1.0)*r01*x1119*x1120))+(((-1.0)*r01*x1121*x1122))+((r02*r22)));
j4eval[0]=x1123;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1122)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1124=cj5*cj5;
IkReal x1125=(r21*sj5);
IkReal x1126=(r11*r21);
IkReal x1127=((1.0)*cj5*r20);
IkReal x1128=((((-1.0)*cj5*r10*x1125))+x1126+(((-1.0)*x1124*x1126))+((r12*r22))+((r10*r20*x1124))+(((-1.0)*r11*sj5*x1127)));
j4eval[0]=x1128;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1125))+(((-1.0)*sj0*x1127))))));
j4eval[2]=IKsign(x1128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1129=cj5*cj5;
IkReal x1130=(r21*sj5);
IkReal x1131=(r11*r21);
IkReal x1132=((1.0)*cj5*r20);
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1130))+(((-1.0)*sj0*x1132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1129*x1131))+(((-1.0)*r11*sj5*x1132))+x1131+((r12*r22))+((r10*r20*x1129))+(((-1.0)*cj5*r10*x1130)))),-1);
if(!x1134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1135=IKsin(j4);
IkReal x1136=IKcos(j4);
IkReal x1137=(r11*sj5);
IkReal x1138=(cj5*r00);
IkReal x1139=(cj5*r10);
IkReal x1140=(r21*sj5);
IkReal x1141=(cj5*r20);
IkReal x1142=(r01*sj5);
IkReal x1143=((1.0)*x1136);
IkReal x1144=((1.0)*x1135);
evalcond[0]=((((-1.0)*x1141*x1144))+(((-1.0)*r22*x1143))+((x1135*x1140)));
evalcond[1]=((((-1.0)*x1140*x1143))+(((-1.0)*r22*x1144))+((x1136*x1141)));
evalcond[2]=(cj0+((x1135*x1137))+(((-1.0)*x1139*x1144))+(((-1.0)*r12*x1143)));
evalcond[3]=(cj0+((x1136*x1138))+(((-1.0)*r02*x1144))+(((-1.0)*x1142*x1143)));
evalcond[4]=((((-1.0)*x1137*x1143))+sj0+((x1136*x1139))+(((-1.0)*r12*x1144)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1143))+((x1135*x1142))+(((-1.0)*x1138*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1145=cj5*cj5;
IkReal x1146=((1.0)*r21);
IkReal x1147=(cj5*sj5);
IkReal x1148=((1.0)*r20);
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1147*x1148))+((r00*r20*x1145))+(((-1.0)*r00*x1146*x1147))+((r02*r22))+(((-1.0)*r01*x1145*x1146)))),-1);
if(!x1149.valid){
continue;
}
CheckValue<IkReal> x1150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1149.value)))+(x1150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1151=IKsin(j4);
IkReal x1152=IKcos(j4);
IkReal x1153=(r11*sj5);
IkReal x1154=(cj5*r00);
IkReal x1155=(cj5*r10);
IkReal x1156=(r21*sj5);
IkReal x1157=(cj5*r20);
IkReal x1158=(r01*sj5);
IkReal x1159=((1.0)*x1152);
IkReal x1160=((1.0)*x1151);
evalcond[0]=(((x1151*x1156))+(((-1.0)*r22*x1159))+(((-1.0)*x1157*x1160)));
evalcond[1]=(((x1152*x1157))+(((-1.0)*x1156*x1159))+(((-1.0)*r22*x1160)));
evalcond[2]=(cj0+((x1151*x1153))+(((-1.0)*r12*x1159))+(((-1.0)*x1155*x1160)));
evalcond[3]=((((-1.0)*r02*x1160))+cj0+(((-1.0)*x1158*x1159))+((x1152*x1154)));
evalcond[4]=(sj0+(((-1.0)*r12*x1160))+((x1152*x1155))+(((-1.0)*x1153*x1159)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1159))+((x1151*x1158))+(((-1.0)*x1154*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1161=((1.0)*cj5);
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1161)))),-1);
if(!x1162.valid){
continue;
}
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1162.value)))+(x1163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1164=IKsin(j4);
IkReal x1165=IKcos(j4);
IkReal x1166=(r11*sj5);
IkReal x1167=(cj5*r00);
IkReal x1168=(cj5*r10);
IkReal x1169=(r21*sj5);
IkReal x1170=(cj5*r20);
IkReal x1171=(r01*sj5);
IkReal x1172=((1.0)*x1165);
IkReal x1173=((1.0)*x1164);
evalcond[0]=(((x1164*x1169))+(((-1.0)*r22*x1172))+(((-1.0)*x1170*x1173)));
evalcond[1]=(((x1165*x1170))+(((-1.0)*r22*x1173))+(((-1.0)*x1169*x1172)));
evalcond[2]=(((x1164*x1166))+(((-1.0)*x1168*x1173))+cj0+(((-1.0)*r12*x1172)));
evalcond[3]=((((-1.0)*r02*x1173))+((x1165*x1167))+cj0+(((-1.0)*x1171*x1172)));
evalcond[4]=(sj0+((x1165*x1168))+(((-1.0)*r12*x1173))+(((-1.0)*x1166*x1172)));
evalcond[5]=(((x1164*x1171))+(((-1.0)*r02*x1172))+(((-1.0)*sj0))+(((-1.0)*x1167*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1174=((1.0)*cj5);
IkReal x1175=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1174)));
j4eval[0]=x1175;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1174)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1176=((1.0)*cj5);
IkReal x1177=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1176)));
j4eval[0]=x1177;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1176))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1178=cj5*cj5;
IkReal x1179=((1.0)*sj5);
IkReal x1180=(cj5*r20);
IkReal x1181=(r11*r21);
IkReal x1182=(x1181+((r10*r20*x1178))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1179))+(((-1.0)*x1178*x1181))+(((-1.0)*r11*x1179*x1180)));
j4eval[0]=x1182;
j4eval[1]=IKsign(x1182);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1179))+((cj0*x1180)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1183=cj5*cj5;
IkReal x1184=((1.0)*sj5);
IkReal x1185=(cj5*r20);
IkReal x1186=(r11*r21);
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(IKsign((x1186+(((-1.0)*cj5*r10*r21*x1184))+(((-1.0)*r11*x1184*x1185))+(((-1.0)*x1183*x1186))+((r12*r22))+((r10*r20*x1183)))),-1);
if(!x1187.valid){
continue;
}
CheckValue<IkReal> x1188 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1184))+((cj0*x1185)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1187.value)))+(x1188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1189=IKsin(j4);
IkReal x1190=IKcos(j4);
IkReal x1191=((1.0)*sj0);
IkReal x1192=(cj5*r00);
IkReal x1193=(r11*sj5);
IkReal x1194=(cj5*r10);
IkReal x1195=(r21*sj5);
IkReal x1196=(cj5*r20);
IkReal x1197=(r01*sj5);
IkReal x1198=((1.0)*x1190);
IkReal x1199=((1.0)*x1189);
evalcond[0]=(((x1189*x1195))+(((-1.0)*r22*x1198))+(((-1.0)*x1196*x1199)));
evalcond[1]=((((-1.0)*x1195*x1198))+(((-1.0)*r22*x1199))+((x1190*x1196)));
evalcond[2]=(cj0+(((-1.0)*x1194*x1199))+((x1189*x1193))+(((-1.0)*r12*x1198)));
evalcond[3]=(((x1189*x1197))+(((-1.0)*x1191))+(((-1.0)*x1192*x1199))+(((-1.0)*r02*x1198)));
evalcond[4]=((((-1.0)*x1197*x1198))+(((-1.0)*r02*x1199))+((x1190*x1192))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1193*x1198))+(((-1.0)*x1191))+((x1190*x1194))+(((-1.0)*r12*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1200=((1.0)*cj5);
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1200)))),-1);
if(!x1202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1201.value)+(((1.5707963267949)*(x1202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1203=IKsin(j4);
IkReal x1204=IKcos(j4);
IkReal x1205=((1.0)*sj0);
IkReal x1206=(cj5*r00);
IkReal x1207=(r11*sj5);
IkReal x1208=(cj5*r10);
IkReal x1209=(r21*sj5);
IkReal x1210=(cj5*r20);
IkReal x1211=(r01*sj5);
IkReal x1212=((1.0)*x1204);
IkReal x1213=((1.0)*x1203);
evalcond[0]=((((-1.0)*r22*x1212))+((x1203*x1209))+(((-1.0)*x1210*x1213)));
evalcond[1]=((((-1.0)*x1209*x1212))+(((-1.0)*r22*x1213))+((x1204*x1210)));
evalcond[2]=((((-1.0)*x1208*x1213))+cj0+((x1203*x1207))+(((-1.0)*r12*x1212)));
evalcond[3]=((((-1.0)*r02*x1212))+(((-1.0)*x1206*x1213))+((x1203*x1211))+(((-1.0)*x1205)));
evalcond[4]=(((x1204*x1206))+(((-1.0)*r02*x1213))+(((-1.0)*x1211*x1212))+(((-1.0)*cj0)));
evalcond[5]=(((x1204*x1208))+(((-1.0)*x1207*x1212))+(((-1.0)*r12*x1213))+(((-1.0)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1214=((1.0)*cj5);
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1214)))),-1);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1215.value)))+(x1216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1217=IKsin(j4);
IkReal x1218=IKcos(j4);
IkReal x1219=((1.0)*sj0);
IkReal x1220=(cj5*r00);
IkReal x1221=(r11*sj5);
IkReal x1222=(cj5*r10);
IkReal x1223=(r21*sj5);
IkReal x1224=(cj5*r20);
IkReal x1225=(r01*sj5);
IkReal x1226=((1.0)*x1218);
IkReal x1227=((1.0)*x1217);
evalcond[0]=((((-1.0)*x1224*x1227))+((x1217*x1223))+(((-1.0)*r22*x1226)));
evalcond[1]=(((x1218*x1224))+(((-1.0)*r22*x1227))+(((-1.0)*x1223*x1226)));
evalcond[2]=(((x1217*x1221))+cj0+(((-1.0)*r12*x1226))+(((-1.0)*x1222*x1227)));
evalcond[3]=(((x1217*x1225))+(((-1.0)*x1220*x1227))+(((-1.0)*x1219))+(((-1.0)*r02*x1226)));
evalcond[4]=((((-1.0)*x1225*x1226))+((x1218*x1220))+(((-1.0)*r02*x1227))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1221*x1226))+(((-1.0)*r12*x1227))+((x1218*x1222))+(((-1.0)*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1228=IKsin(j0);
IkReal x1229=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x1229))+(((-0.10915)*x1228)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1228))+(((0.10915)*x1229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1230=((1.0)*cj5);
IkReal x1231=((((-1.0)*r01*x1230))+(((-1.0)*r00*sj5)));
j4eval[0]=x1231;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1230)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1232=((1.0)*cj5);
IkReal x1233=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1232)));
j4eval[0]=x1233;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1232))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1234=cj5*cj5;
IkReal x1235=((1.0)*sj5);
IkReal x1236=(cj5*r20);
IkReal x1237=(r11*r21);
IkReal x1238=(((r10*r20*x1234))+x1237+(((-1.0)*r11*x1235*x1236))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1235))+(((-1.0)*x1234*x1237)));
j4eval[0]=x1238;
j4eval[1]=IKsign(x1238);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1235))+((cj0*x1236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1239=cj5*cj5;
IkReal x1240=((1.0)*sj5);
IkReal x1241=(cj5*r20);
IkReal x1242=(r11*r21);
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal((((cj0*x1241))+(((-1.0)*cj0*r21*x1240)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKsign((((r10*r20*x1239))+x1242+(((-1.0)*x1239*x1242))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1240))+(((-1.0)*r11*x1240*x1241)))),-1);
if(!x1244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1243.value)+(((1.5707963267949)*(x1244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1245=IKsin(j4);
IkReal x1246=IKcos(j4);
IkReal x1247=((1.0)*sj0);
IkReal x1248=(cj5*r00);
IkReal x1249=(r11*sj5);
IkReal x1250=(cj5*r10);
IkReal x1251=(r21*sj5);
IkReal x1252=(cj5*r20);
IkReal x1253=(r01*sj5);
IkReal x1254=((1.0)*x1246);
IkReal x1255=((1.0)*x1245);
evalcond[0]=(((x1245*x1251))+(((-1.0)*r22*x1254))+(((-1.0)*x1252*x1255)));
evalcond[1]=(((x1246*x1252))+(((-1.0)*r22*x1255))+(((-1.0)*x1251*x1254)));
evalcond[2]=((((-1.0)*r12*x1254))+cj0+(((-1.0)*x1250*x1255))+((x1245*x1249)));
evalcond[3]=(((x1245*x1253))+(((-1.0)*x1248*x1255))+(((-1.0)*x1247))+(((-1.0)*r02*x1254)));
evalcond[4]=((((-1.0)*x1253*x1254))+((x1246*x1248))+(((-1.0)*r02*x1255))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1249*x1254))+((x1246*x1250))+(((-1.0)*r12*x1255))+(((-1.0)*x1247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1256=((1.0)*cj5);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1256))+(((-1.0)*r10*sj5)))),-1);
if(!x1258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1257.value)+(((1.5707963267949)*(x1258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1259=IKsin(j4);
IkReal x1260=IKcos(j4);
IkReal x1261=((1.0)*sj0);
IkReal x1262=(cj5*r00);
IkReal x1263=(r11*sj5);
IkReal x1264=(cj5*r10);
IkReal x1265=(r21*sj5);
IkReal x1266=(cj5*r20);
IkReal x1267=(r01*sj5);
IkReal x1268=((1.0)*x1260);
IkReal x1269=((1.0)*x1259);
evalcond[0]=((((-1.0)*r22*x1268))+(((-1.0)*x1266*x1269))+((x1259*x1265)));
evalcond[1]=((((-1.0)*r22*x1269))+((x1260*x1266))+(((-1.0)*x1265*x1268)));
evalcond[2]=((((-1.0)*x1264*x1269))+(((-1.0)*r12*x1268))+cj0+((x1259*x1263)));
evalcond[3]=((((-1.0)*x1262*x1269))+((x1259*x1267))+(((-1.0)*r02*x1268))+(((-1.0)*x1261)));
evalcond[4]=((((-1.0)*x1267*x1268))+((x1260*x1262))+(((-1.0)*r02*x1269))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1269))+(((-1.0)*x1263*x1268))+((x1260*x1264))+(((-1.0)*x1261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1270=((1.0)*cj5);
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1270))+(((-1.0)*r00*sj5)))),-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1271.value)))+(x1272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1273=IKsin(j4);
IkReal x1274=IKcos(j4);
IkReal x1275=((1.0)*sj0);
IkReal x1276=(cj5*r00);
IkReal x1277=(r11*sj5);
IkReal x1278=(cj5*r10);
IkReal x1279=(r21*sj5);
IkReal x1280=(cj5*r20);
IkReal x1281=(r01*sj5);
IkReal x1282=((1.0)*x1274);
IkReal x1283=((1.0)*x1273);
evalcond[0]=((((-1.0)*r22*x1282))+((x1273*x1279))+(((-1.0)*x1280*x1283)));
evalcond[1]=((((-1.0)*r22*x1283))+((x1274*x1280))+(((-1.0)*x1279*x1282)));
evalcond[2]=(cj0+((x1273*x1277))+(((-1.0)*x1278*x1283))+(((-1.0)*r12*x1282)));
evalcond[3]=((((-1.0)*r02*x1282))+(((-1.0)*x1275))+(((-1.0)*x1276*x1283))+((x1273*x1281)));
evalcond[4]=((((-1.0)*r02*x1283))+((x1274*x1276))+(((-1.0)*cj0))+(((-1.0)*x1281*x1282)));
evalcond[5]=((((-1.0)*x1275))+((x1274*x1278))+(((-1.0)*x1277*x1282))+(((-1.0)*r12*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1284=IKsin(j0);
IkReal x1285=IKcos(j0);
evalcond[0]=((((0.425)*x1285))+(((-0.10915)*x1284))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1284))+(((-1.0)*py))+(((0.10915)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1286=((1.0)*cj5);
IkReal x1287=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1286)));
j4eval[0]=x1287;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1286)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1288=cj5*cj5;
IkReal x1289=((1.0)*r21);
IkReal x1290=(cj5*sj5);
IkReal x1291=((1.0)*r20);
IkReal x1292=((((-1.0)*r00*x1289*x1290))+((r00*r20*x1288))+((r01*r21))+(((-1.0)*r01*x1288*x1289))+((r02*r22))+(((-1.0)*r01*x1290*x1291)));
j4eval[0]=x1292;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1291)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1293=cj5*cj5;
IkReal x1294=(r21*sj5);
IkReal x1295=(r11*r21);
IkReal x1296=((1.0)*cj5*r20);
IkReal x1297=(x1295+((r12*r22))+(((-1.0)*cj5*r10*x1294))+(((-1.0)*x1293*x1295))+((r10*r20*x1293))+(((-1.0)*r11*sj5*x1296)));
j4eval[0]=x1297;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1296))+((sj0*x1294)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1298=cj5*cj5;
IkReal x1299=(r21*sj5);
IkReal x1300=(r11*r21);
IkReal x1301=((1.0)*cj5*r20);
CheckValue<IkReal> x1302=IKPowWithIntegerCheck(IKsign((x1300+(((-1.0)*x1298*x1300))+((r12*r22))+(((-1.0)*cj5*r10*x1299))+((r10*r20*x1298))+(((-1.0)*r11*sj5*x1301)))),-1);
if(!x1302.valid){
continue;
}
CheckValue<IkReal> x1303 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1301))+((sj0*x1299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1302.value)))+(x1303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1304=IKsin(j4);
IkReal x1305=IKcos(j4);
IkReal x1306=(r11*sj5);
IkReal x1307=(cj5*r00);
IkReal x1308=(cj5*r10);
IkReal x1309=(r21*sj5);
IkReal x1310=(cj5*r20);
IkReal x1311=(r01*sj5);
IkReal x1312=((1.0)*x1305);
IkReal x1313=((1.0)*x1304);
evalcond[0]=((((-1.0)*r22*x1312))+((x1304*x1309))+(((-1.0)*x1310*x1313)));
evalcond[1]=((((-1.0)*r22*x1313))+((x1305*x1310))+(((-1.0)*x1309*x1312)));
evalcond[2]=(cj0+(((-1.0)*x1308*x1313))+(((-1.0)*r12*x1312))+((x1304*x1306)));
evalcond[3]=((((-1.0)*x1311*x1312))+cj0+((x1305*x1307))+(((-1.0)*r02*x1313)));
evalcond[4]=(sj0+((x1305*x1308))+(((-1.0)*x1306*x1312))+(((-1.0)*r12*x1313)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1307*x1313))+(((-1.0)*r02*x1312))+((x1304*x1311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1314=cj5*cj5;
IkReal x1315=((1.0)*r21);
IkReal x1316=(cj5*sj5);
IkReal x1317=((1.0)*r20);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKsign((((r00*r20*x1314))+(((-1.0)*r01*x1316*x1317))+((r01*r21))+(((-1.0)*r00*x1315*x1316))+(((-1.0)*r01*x1314*x1315))+((r02*r22)))),-1);
if(!x1319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1318.value)+(((1.5707963267949)*(x1319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1320=IKsin(j4);
IkReal x1321=IKcos(j4);
IkReal x1322=(r11*sj5);
IkReal x1323=(cj5*r00);
IkReal x1324=(cj5*r10);
IkReal x1325=(r21*sj5);
IkReal x1326=(cj5*r20);
IkReal x1327=(r01*sj5);
IkReal x1328=((1.0)*x1321);
IkReal x1329=((1.0)*x1320);
evalcond[0]=((((-1.0)*r22*x1328))+((x1320*x1325))+(((-1.0)*x1326*x1329)));
evalcond[1]=((((-1.0)*r22*x1329))+(((-1.0)*x1325*x1328))+((x1321*x1326)));
evalcond[2]=(((x1320*x1322))+cj0+(((-1.0)*x1324*x1329))+(((-1.0)*r12*x1328)));
evalcond[3]=(cj0+(((-1.0)*x1327*x1328))+(((-1.0)*r02*x1329))+((x1321*x1323)));
evalcond[4]=(sj0+(((-1.0)*x1322*x1328))+(((-1.0)*r12*x1329))+((x1321*x1324)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1323*x1329))+((x1320*x1327))+(((-1.0)*r02*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1330=((1.0)*cj5);
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1330)))),-1);
if(!x1332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1331.value)+(((1.5707963267949)*(x1332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1333=IKsin(j4);
IkReal x1334=IKcos(j4);
IkReal x1335=(r11*sj5);
IkReal x1336=(cj5*r00);
IkReal x1337=(cj5*r10);
IkReal x1338=(r21*sj5);
IkReal x1339=(cj5*r20);
IkReal x1340=(r01*sj5);
IkReal x1341=((1.0)*x1334);
IkReal x1342=((1.0)*x1333);
evalcond[0]=((((-1.0)*x1339*x1342))+(((-1.0)*r22*x1341))+((x1333*x1338)));
evalcond[1]=((((-1.0)*x1338*x1341))+(((-1.0)*r22*x1342))+((x1334*x1339)));
evalcond[2]=(cj0+(((-1.0)*r12*x1341))+(((-1.0)*x1337*x1342))+((x1333*x1335)));
evalcond[3]=((((-1.0)*x1340*x1341))+(((-1.0)*r02*x1342))+cj0+((x1334*x1336)));
evalcond[4]=(sj0+(((-1.0)*r12*x1342))+(((-1.0)*x1335*x1341))+((x1334*x1337)));
evalcond[5]=((((-1.0)*x1336*x1342))+(((-1.0)*sj0))+(((-1.0)*r02*x1341))+((x1333*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1343=((1.0)*cj5);
IkReal x1344=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1343)));
j4eval[0]=x1344;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1343)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1345=((1.0)*cj5);
IkReal x1346=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1345)));
j4eval[0]=x1346;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1345))))));
j4eval[2]=IKsign(x1346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1347=cj5*cj5;
IkReal x1348=((1.0)*sj5);
IkReal x1349=(cj5*r20);
IkReal x1350=(r11*r21);
IkReal x1351=(x1350+(((-1.0)*cj5*r10*r21*x1348))+(((-1.0)*r11*x1348*x1349))+((r12*r22))+(((-1.0)*x1347*x1350))+((r10*r20*x1347)));
j4eval[0]=x1351;
j4eval[1]=IKsign(x1351);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1349))+(((-1.0)*cj0*r21*x1348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1352=cj5*cj5;
IkReal x1353=((1.0)*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=(r11*r21);
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1353))+((cj0*x1354)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
CheckValue<IkReal> x1357=IKPowWithIntegerCheck(IKsign((x1355+(((-1.0)*x1352*x1355))+((r10*r20*x1352))+(((-1.0)*cj5*r10*r21*x1353))+((r12*r22))+(((-1.0)*r11*x1353*x1354)))),-1);
if(!x1357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1356.value)+(((1.5707963267949)*(x1357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1358=IKsin(j4);
IkReal x1359=IKcos(j4);
IkReal x1360=((1.0)*sj0);
IkReal x1361=(cj5*r00);
IkReal x1362=(r11*sj5);
IkReal x1363=(cj5*r10);
IkReal x1364=(r21*sj5);
IkReal x1365=(cj5*r20);
IkReal x1366=(r01*sj5);
IkReal x1367=((1.0)*x1359);
IkReal x1368=((1.0)*x1358);
evalcond[0]=(((x1358*x1364))+(((-1.0)*r22*x1367))+(((-1.0)*x1365*x1368)));
evalcond[1]=((((-1.0)*x1364*x1367))+((x1359*x1365))+(((-1.0)*r22*x1368)));
evalcond[2]=((((-1.0)*r12*x1367))+cj0+((x1358*x1362))+(((-1.0)*x1363*x1368)));
evalcond[3]=((((-1.0)*r02*x1367))+((x1358*x1366))+(((-1.0)*x1361*x1368))+(((-1.0)*x1360)));
evalcond[4]=((((-1.0)*x1366*x1367))+(((-1.0)*r02*x1368))+((x1359*x1361))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1368))+((x1359*x1363))+(((-1.0)*x1362*x1367))+(((-1.0)*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1369=((1.0)*cj5);
CheckValue<IkReal> x1370 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1370.valid){
continue;
}
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1369))+(((-1.0)*r10*sj5)))),-1);
if(!x1371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1370.value)+(((1.5707963267949)*(x1371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1372=IKsin(j4);
IkReal x1373=IKcos(j4);
IkReal x1374=((1.0)*sj0);
IkReal x1375=(cj5*r00);
IkReal x1376=(r11*sj5);
IkReal x1377=(cj5*r10);
IkReal x1378=(r21*sj5);
IkReal x1379=(cj5*r20);
IkReal x1380=(r01*sj5);
IkReal x1381=((1.0)*x1373);
IkReal x1382=((1.0)*x1372);
evalcond[0]=(((x1372*x1378))+(((-1.0)*r22*x1381))+(((-1.0)*x1379*x1382)));
evalcond[1]=((((-1.0)*r22*x1382))+(((-1.0)*x1378*x1381))+((x1373*x1379)));
evalcond[2]=((((-1.0)*r12*x1381))+((x1372*x1376))+cj0+(((-1.0)*x1377*x1382)));
evalcond[3]=((((-1.0)*x1375*x1382))+(((-1.0)*r02*x1381))+(((-1.0)*x1374))+((x1372*x1380)));
evalcond[4]=((((-1.0)*r02*x1382))+(((-1.0)*x1380*x1381))+(((-1.0)*cj0))+((x1373*x1375)));
evalcond[5]=((((-1.0)*r12*x1382))+(((-1.0)*x1376*x1381))+(((-1.0)*x1374))+((x1373*x1377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1383=((1.0)*cj5);
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1383)))),-1);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1383))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1384.value)))+(x1385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1386=IKsin(j4);
IkReal x1387=IKcos(j4);
IkReal x1388=((1.0)*sj0);
IkReal x1389=(cj5*r00);
IkReal x1390=(r11*sj5);
IkReal x1391=(cj5*r10);
IkReal x1392=(r21*sj5);
IkReal x1393=(cj5*r20);
IkReal x1394=(r01*sj5);
IkReal x1395=((1.0)*x1387);
IkReal x1396=((1.0)*x1386);
evalcond[0]=((((-1.0)*x1393*x1396))+((x1386*x1392))+(((-1.0)*r22*x1395)));
evalcond[1]=((((-1.0)*x1392*x1395))+((x1387*x1393))+(((-1.0)*r22*x1396)));
evalcond[2]=((((-1.0)*r12*x1395))+(((-1.0)*x1391*x1396))+cj0+((x1386*x1390)));
evalcond[3]=((((-1.0)*x1388))+(((-1.0)*r02*x1395))+(((-1.0)*x1389*x1396))+((x1386*x1394)));
evalcond[4]=((((-1.0)*r02*x1396))+(((-1.0)*x1394*x1395))+((x1387*x1389))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1388))+(((-1.0)*r12*x1396))+(((-1.0)*x1390*x1395))+((x1387*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1397=((1.0)*cj5);
IkReal x1398=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1397)));
j4eval[0]=x1398;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1397))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1399=cj5*cj5;
IkReal x1400=((1.0)*r21);
IkReal x1401=(cj5*sj5);
IkReal x1402=((1.0)*r20);
IkReal x1403=((((-1.0)*r01*x1399*x1400))+(((-1.0)*r01*x1401*x1402))+((r01*r21))+(((-1.0)*r00*x1400*x1401))+((r02*r22))+((r00*r20*x1399)));
j4eval[0]=x1403;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1402)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1404=cj5*cj5;
IkReal x1405=(r21*sj5);
IkReal x1406=(r11*r21);
IkReal x1407=((1.0)*cj5*r20);
IkReal x1408=((((-1.0)*cj5*r10*x1405))+(((-1.0)*r11*sj5*x1407))+((r10*r20*x1404))+((r12*r22))+x1406+(((-1.0)*x1404*x1406)));
j4eval[0]=x1408;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1407))+((sj0*x1405)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1409=cj5*cj5;
IkReal x1410=(r21*sj5);
IkReal x1411=(r11*r21);
IkReal x1412=((1.0)*cj5*r20);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1412))+((sj0*x1410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign((((r10*r20*x1409))+(((-1.0)*cj5*r10*x1410))+((r12*r22))+(((-1.0)*r11*sj5*x1412))+x1411+(((-1.0)*x1409*x1411)))),-1);
if(!x1414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1413.value)+(((1.5707963267949)*(x1414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1415=IKsin(j4);
IkReal x1416=IKcos(j4);
IkReal x1417=(r11*sj5);
IkReal x1418=(cj5*r00);
IkReal x1419=(cj5*r10);
IkReal x1420=(r21*sj5);
IkReal x1421=(cj5*r20);
IkReal x1422=(r01*sj5);
IkReal x1423=((1.0)*x1416);
IkReal x1424=((1.0)*x1415);
evalcond[0]=((((-1.0)*x1421*x1424))+((x1415*x1420))+(((-1.0)*r22*x1423)));
evalcond[1]=((((-1.0)*x1420*x1423))+(((-1.0)*r22*x1424))+((x1416*x1421)));
evalcond[2]=(((x1415*x1417))+cj0+(((-1.0)*r12*x1423))+(((-1.0)*x1419*x1424)));
evalcond[3]=(cj0+((x1416*x1418))+(((-1.0)*x1422*x1423))+(((-1.0)*r02*x1424)));
evalcond[4]=(sj0+(((-1.0)*x1417*x1423))+((x1416*x1419))+(((-1.0)*r12*x1424)));
evalcond[5]=((((-1.0)*sj0))+((x1415*x1422))+(((-1.0)*x1418*x1424))+(((-1.0)*r02*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1425=cj5*cj5;
IkReal x1426=((1.0)*r21);
IkReal x1427=(cj5*sj5);
IkReal x1428=((1.0)*r20);
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1425*x1426))+(((-1.0)*r01*x1427*x1428))+((r00*r20*x1425))+(((-1.0)*r00*x1426*x1427))+((r01*r21))+((r02*r22)))),-1);
if(!x1429.valid){
continue;
}
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1429.value)))+(x1430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1431=IKsin(j4);
IkReal x1432=IKcos(j4);
IkReal x1433=(r11*sj5);
IkReal x1434=(cj5*r00);
IkReal x1435=(cj5*r10);
IkReal x1436=(r21*sj5);
IkReal x1437=(cj5*r20);
IkReal x1438=(r01*sj5);
IkReal x1439=((1.0)*x1432);
IkReal x1440=((1.0)*x1431);
evalcond[0]=((((-1.0)*r22*x1439))+(((-1.0)*x1437*x1440))+((x1431*x1436)));
evalcond[1]=(((x1432*x1437))+(((-1.0)*x1436*x1439))+(((-1.0)*r22*x1440)));
evalcond[2]=((((-1.0)*r12*x1439))+cj0+(((-1.0)*x1435*x1440))+((x1431*x1433)));
evalcond[3]=((((-1.0)*x1438*x1439))+((x1432*x1434))+cj0+(((-1.0)*r02*x1440)));
evalcond[4]=(((x1432*x1435))+sj0+(((-1.0)*r12*x1440))+(((-1.0)*x1433*x1439)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1434*x1440))+(((-1.0)*r02*x1439))+((x1431*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1441=((1.0)*cj5);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1441))+(((-1.0)*r00*sj5)))),-1);
if(!x1443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1442.value)+(((1.5707963267949)*(x1443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1444=IKsin(j4);
IkReal x1445=IKcos(j4);
IkReal x1446=(r11*sj5);
IkReal x1447=(cj5*r00);
IkReal x1448=(cj5*r10);
IkReal x1449=(r21*sj5);
IkReal x1450=(cj5*r20);
IkReal x1451=(r01*sj5);
IkReal x1452=((1.0)*x1445);
IkReal x1453=((1.0)*x1444);
evalcond[0]=(((x1444*x1449))+(((-1.0)*r22*x1452))+(((-1.0)*x1450*x1453)));
evalcond[1]=(((x1445*x1450))+(((-1.0)*r22*x1453))+(((-1.0)*x1449*x1452)));
evalcond[2]=(((x1444*x1446))+cj0+(((-1.0)*x1448*x1453))+(((-1.0)*r12*x1452)));
evalcond[3]=(((x1445*x1447))+cj0+(((-1.0)*r02*x1453))+(((-1.0)*x1451*x1452)));
evalcond[4]=(((x1445*x1448))+sj0+(((-1.0)*x1446*x1452))+(((-1.0)*r12*x1453)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1447*x1453))+(((-1.0)*r02*x1452))+((x1444*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1454=IKcos(j0);
IkReal x1455=IKsin(j0);
evalcond[0]=((((-0.10915)*x1455))+(((-1.0)*px))+(((-0.425)*x1454)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1454))+(((-0.425)*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1456=((1.0)*cj5);
IkReal x1457=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1456)));
j4eval[0]=x1457;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1456))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1458=cj5*cj5;
IkReal x1459=((1.0)*r21);
IkReal x1460=(cj5*sj5);
IkReal x1461=((1.0)*r20);
IkReal x1462=((((-1.0)*r01*x1460*x1461))+(((-1.0)*r01*x1458*x1459))+((r01*r21))+((r00*r20*x1458))+(((-1.0)*r00*x1459*x1460))+((r02*r22)));
j4eval[0]=x1462;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1461)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1463=cj5*cj5;
IkReal x1464=(r21*sj5);
IkReal x1465=(r11*r21);
IkReal x1466=((1.0)*cj5*r20);
IkReal x1467=((((-1.0)*cj5*r10*x1464))+((r12*r22))+((r10*r20*x1463))+(((-1.0)*x1463*x1465))+x1465+(((-1.0)*r11*sj5*x1466)));
j4eval[0]=x1467;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1466))+((sj0*x1464)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1468=cj5*cj5;
IkReal x1469=(r21*sj5);
IkReal x1470=(r11*r21);
IkReal x1471=((1.0)*cj5*r20);
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1469))+(((-1.0)*sj0*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1471))+(((-1.0)*cj5*r10*x1469))+((r12*r22))+((r10*r20*x1468))+x1470+(((-1.0)*x1468*x1470)))),-1);
if(!x1473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1474=IKsin(j4);
IkReal x1475=IKcos(j4);
IkReal x1476=(r11*sj5);
IkReal x1477=(cj5*r00);
IkReal x1478=(cj5*r10);
IkReal x1479=(r21*sj5);
IkReal x1480=(cj5*r20);
IkReal x1481=(r01*sj5);
IkReal x1482=((1.0)*x1475);
IkReal x1483=((1.0)*x1474);
evalcond[0]=(((x1474*x1479))+(((-1.0)*x1480*x1483))+(((-1.0)*r22*x1482)));
evalcond[1]=((((-1.0)*x1479*x1482))+(((-1.0)*r22*x1483))+((x1475*x1480)));
evalcond[2]=(cj0+(((-1.0)*r12*x1482))+((x1474*x1476))+(((-1.0)*x1478*x1483)));
evalcond[3]=(cj0+(((-1.0)*x1481*x1482))+(((-1.0)*r02*x1483))+((x1475*x1477)));
evalcond[4]=(sj0+(((-1.0)*r12*x1483))+((x1475*x1478))+(((-1.0)*x1476*x1482)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1482))+((x1474*x1481))+(((-1.0)*x1477*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1484=cj5*cj5;
IkReal x1485=((1.0)*r21);
IkReal x1486=(cj5*sj5);
IkReal x1487=((1.0)*r20);
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1486*x1487))+(((-1.0)*r01*x1484*x1485))+(((-1.0)*r00*x1485*x1486))+((r01*r21))+((r00*r20*x1484))+((r02*r22)))),-1);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1488.value)+(((1.5707963267949)*(x1489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=(r11*sj5);
IkReal x1493=(cj5*r00);
IkReal x1494=(cj5*r10);
IkReal x1495=(r21*sj5);
IkReal x1496=(cj5*r20);
IkReal x1497=(r01*sj5);
IkReal x1498=((1.0)*x1491);
IkReal x1499=((1.0)*x1490);
evalcond[0]=((((-1.0)*x1496*x1499))+(((-1.0)*r22*x1498))+((x1490*x1495)));
evalcond[1]=((((-1.0)*x1495*x1498))+((x1491*x1496))+(((-1.0)*r22*x1499)));
evalcond[2]=((((-1.0)*r12*x1498))+(((-1.0)*x1494*x1499))+cj0+((x1490*x1492)));
evalcond[3]=(cj0+(((-1.0)*x1497*x1498))+((x1491*x1493))+(((-1.0)*r02*x1499)));
evalcond[4]=((((-1.0)*r12*x1499))+sj0+(((-1.0)*x1492*x1498))+((x1491*x1494)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1493*x1499))+(((-1.0)*r02*x1498))+((x1490*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1500=((1.0)*cj5);
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1500))+(((-1.0)*r00*sj5)))),-1);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1500))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1501.value)))+(x1502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1503=IKsin(j4);
IkReal x1504=IKcos(j4);
IkReal x1505=(r11*sj5);
IkReal x1506=(cj5*r00);
IkReal x1507=(cj5*r10);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r20);
IkReal x1510=(r01*sj5);
IkReal x1511=((1.0)*x1504);
IkReal x1512=((1.0)*x1503);
evalcond[0]=((((-1.0)*r22*x1511))+((x1503*x1508))+(((-1.0)*x1509*x1512)));
evalcond[1]=((((-1.0)*r22*x1512))+((x1504*x1509))+(((-1.0)*x1508*x1511)));
evalcond[2]=(cj0+(((-1.0)*x1507*x1512))+((x1503*x1505))+(((-1.0)*r12*x1511)));
evalcond[3]=(cj0+((x1504*x1506))+(((-1.0)*x1510*x1511))+(((-1.0)*r02*x1512)));
evalcond[4]=(sj0+((x1504*x1507))+(((-1.0)*x1505*x1511))+(((-1.0)*r12*x1512)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1506*x1512))+(((-1.0)*r02*x1511))+((x1503*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1513=IKcos(j0);
IkReal x1514=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1514))+(((-0.425)*x1513)));
evalcond[1]=((((0.10915)*x1513))+(((-1.0)*py))+(((-0.425)*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1515=((1.0)*cj5);
IkReal x1516=((((-1.0)*r01*x1515))+(((-1.0)*r00*sj5)));
j4eval[0]=x1516;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1515))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1517=((1.0)*cj5);
IkReal x1518=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1517)));
j4eval[0]=x1518;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1517))))));
j4eval[2]=IKsign(x1518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1519=cj5*cj5;
IkReal x1520=((1.0)*sj5);
IkReal x1521=(cj5*r20);
IkReal x1522=(r11*r21);
IkReal x1523=((((-1.0)*r11*x1520*x1521))+(((-1.0)*x1519*x1522))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1520))+x1522+((r10*r20*x1519)));
j4eval[0]=x1523;
j4eval[1]=IKsign(x1523);
j4eval[2]=((IKabs((((cj0*x1521))+(((-1.0)*cj0*r21*x1520)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1524=cj5*cj5;
IkReal x1525=((1.0)*sj5);
IkReal x1526=(cj5*r20);
IkReal x1527=(r11*r21);
CheckValue<IkReal> x1528=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1524*x1527))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1525))+(((-1.0)*r11*x1525*x1526))+x1527+((r10*r20*x1524)))),-1);
if(!x1528.valid){
continue;
}
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal((((cj0*x1526))+(((-1.0)*cj0*r21*x1525)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1528.value)))+(x1529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1530=IKsin(j4);
IkReal x1531=IKcos(j4);
IkReal x1532=((1.0)*sj0);
IkReal x1533=(cj5*r00);
IkReal x1534=(r11*sj5);
IkReal x1535=(cj5*r10);
IkReal x1536=(r21*sj5);
IkReal x1537=(cj5*r20);
IkReal x1538=(r01*sj5);
IkReal x1539=((1.0)*x1531);
IkReal x1540=((1.0)*x1530);
evalcond[0]=((((-1.0)*r22*x1539))+((x1530*x1536))+(((-1.0)*x1537*x1540)));
evalcond[1]=(((x1531*x1537))+(((-1.0)*r22*x1540))+(((-1.0)*x1536*x1539)));
evalcond[2]=((((-1.0)*x1535*x1540))+(((-1.0)*r12*x1539))+cj0+((x1530*x1534)));
evalcond[3]=((((-1.0)*x1532))+((x1530*x1538))+(((-1.0)*r02*x1539))+(((-1.0)*x1533*x1540)));
evalcond[4]=((((-1.0)*r02*x1540))+((x1531*x1533))+(((-1.0)*x1538*x1539))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1532))+((x1531*x1535))+(((-1.0)*x1534*x1539))+(((-1.0)*r12*x1540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1541=((1.0)*cj5);
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1541)))),-1);
if(!x1543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1542.value)+(((1.5707963267949)*(x1543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1544=IKsin(j4);
IkReal x1545=IKcos(j4);
IkReal x1546=((1.0)*sj0);
IkReal x1547=(cj5*r00);
IkReal x1548=(r11*sj5);
IkReal x1549=(cj5*r10);
IkReal x1550=(r21*sj5);
IkReal x1551=(cj5*r20);
IkReal x1552=(r01*sj5);
IkReal x1553=((1.0)*x1545);
IkReal x1554=((1.0)*x1544);
evalcond[0]=(((x1544*x1550))+(((-1.0)*r22*x1553))+(((-1.0)*x1551*x1554)));
evalcond[1]=((((-1.0)*r22*x1554))+(((-1.0)*x1550*x1553))+((x1545*x1551)));
evalcond[2]=(cj0+((x1544*x1548))+(((-1.0)*x1549*x1554))+(((-1.0)*r12*x1553)));
evalcond[3]=(((x1544*x1552))+(((-1.0)*r02*x1553))+(((-1.0)*x1547*x1554))+(((-1.0)*x1546)));
evalcond[4]=((((-1.0)*x1552*x1553))+(((-1.0)*r02*x1554))+((x1545*x1547))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1548*x1553))+(((-1.0)*r12*x1554))+(((-1.0)*x1546))+((x1545*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1555=((1.0)*cj5);
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1555)))),-1);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1556.value)))+(x1557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1558=IKsin(j4);
IkReal x1559=IKcos(j4);
IkReal x1560=((1.0)*sj0);
IkReal x1561=(cj5*r00);
IkReal x1562=(r11*sj5);
IkReal x1563=(cj5*r10);
IkReal x1564=(r21*sj5);
IkReal x1565=(cj5*r20);
IkReal x1566=(r01*sj5);
IkReal x1567=((1.0)*x1559);
IkReal x1568=((1.0)*x1558);
evalcond[0]=((((-1.0)*x1565*x1568))+(((-1.0)*r22*x1567))+((x1558*x1564)));
evalcond[1]=((((-1.0)*r22*x1568))+(((-1.0)*x1564*x1567))+((x1559*x1565)));
evalcond[2]=(cj0+(((-1.0)*x1563*x1568))+(((-1.0)*r12*x1567))+((x1558*x1562)));
evalcond[3]=((((-1.0)*r02*x1567))+(((-1.0)*x1560))+(((-1.0)*x1561*x1568))+((x1558*x1566)));
evalcond[4]=((((-1.0)*r02*x1568))+(((-1.0)*x1566*x1567))+((x1559*x1561))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1562*x1567))+(((-1.0)*r12*x1568))+((x1559*x1563))+(((-1.0)*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1569=(cj2*sj1);
IkReal x1570=((8500.0)*sj1);
IkReal x1571=(cj5*r01);
IkReal x1572=(r00*sj5);
IkReal x1573=(cj1*sj2);
IkReal x1574=((20000.0)*px);
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(((((-2183.0)*x1569))+(((-2183.0)*x1573))),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(((((-1.0)*x1569))+(((-1.0)*x1573))),-1);
if(!x1576.valid){
continue;
}
if( IKabs(((x1575.value)*((((x1569*x1574))+(((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((x1573*x1574))+(((-5952.0)*x1571*x1573))+(((-5952.0)*x1572*x1573))+(((-5952.0)*x1569*x1572))+(((-5952.0)*x1569*x1571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1576.value)*(((((-1.0)*x1572))+(((-1.0)*x1571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1575.value)*((((x1569*x1574))+(((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((x1573*x1574))+(((-5952.0)*x1571*x1573))+(((-5952.0)*x1572*x1573))+(((-5952.0)*x1569*x1572))+(((-5952.0)*x1569*x1571))))))+IKsqr(((x1576.value)*(((((-1.0)*x1572))+(((-1.0)*x1571))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1575.value)*((((x1569*x1574))+(((-1.0)*x1570*x1572))+(((-1.0)*x1570*x1571))+((x1573*x1574))+(((-5952.0)*x1571*x1573))+(((-5952.0)*x1572*x1573))+(((-5952.0)*x1569*x1572))+(((-5952.0)*x1569*x1571))))), ((x1576.value)*(((((-1.0)*x1572))+(((-1.0)*x1571))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1577=IKcos(j0);
IkReal x1578=IKsin(j0);
IkReal x1579=(cj1*sj2);
IkReal x1580=(cj5*r01);
IkReal x1581=(cj5*r11);
IkReal x1582=(cj2*sj1);
IkReal x1583=((0.425)*sj1);
IkReal x1584=(r00*sj5);
IkReal x1585=(r10*sj5);
IkReal x1586=((0.39225)*x1578);
IkReal x1587=((1.0)*x1577);
IkReal x1588=((1.0)*x1578);
IkReal x1589=((0.39225)*x1577);
evalcond[0]=(x1580+x1584+(((-1.0)*x1579*x1587))+(((-1.0)*x1582*x1587)));
evalcond[1]=(x1581+x1585+(((-1.0)*x1579*x1588))+(((-1.0)*x1582*x1588)));
evalcond[2]=((((-0.10915)*x1578))+((x1582*x1589))+(((-1.0)*px))+(((-0.09465)*x1584))+(((-0.09465)*x1580))+((x1577*x1583))+((x1579*x1589)));
evalcond[3]=(((x1582*x1586))+(((-1.0)*py))+(((-0.09465)*x1581))+(((-0.09465)*x1585))+(((0.10915)*x1577))+((x1579*x1586))+((x1578*x1583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1590=((1.0)*cj5);
IkReal x1591=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1590)));
j4eval[0]=x1591;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1590))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1592=((1.0)*cj5);
IkReal x1593=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1592)));
j4eval[0]=x1593;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1592))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1594=((1.0)*sj0);
IkReal x1595=((1.0)*cj0);
IkReal x1596=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1596;
j4eval[1]=((IKabs(((((-1.0)*r02*x1595))+(((-1.0)*r12*x1594)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x1595))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1594))))));
j4eval[2]=IKsign(x1596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1597=((-1.0)*r20);
IkReal x1599 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1599)==0){
continue;
}
IkReal x1598=pow(x1599,-0.5);
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1597),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1600.value));
IkReal gconst79=(r21*x1598);
IkReal gconst80=(x1597*x1598);
CheckValue<IkReal> x1601 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1601.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1601.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1602=((-1.0)*r20);
IkReal x1603=x1598;
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1602),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
IkReal x1604=((-1.0)*(x1605.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1604;
IkReal gconst78=x1604;
IkReal gconst79=(r21*x1603);
IkReal gconst80=(x1602*x1603);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1606=((-1.0)*r20);
IkReal x1607=x1598;
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1606),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
IkReal x1608=((-1.0)*(x1609.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1608;
IkReal gconst78=x1608;
IkReal gconst79=(r21*x1607);
IkReal gconst80=(x1606*x1607);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1610=((-1.0)*r20);
IkReal x1611=x1598;
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1610),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
IkReal x1612=((-1.0)*(x1613.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1612;
IkReal gconst78=x1612;
IkReal gconst79=(r21*x1611);
IkReal gconst80=(x1610*x1611);
IkReal x1614=r22*r22;
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1614))),-1);
if(!x1617.valid){
continue;
}
IkReal x1615=x1617.value;
IkReal x1616=(x1614+(((2.0)*x1615*(r20*r20)*(r21*r21)))+((x1615*(r20*r20*r20*r20)))+((x1615*(r21*r21*r21*r21))));
j4eval[0]=x1616;
j4eval[1]=IKsign(x1616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1618=(cj1*sj2);
IkReal x1619=(gconst80*r20);
IkReal x1620=((1.0)*r22);
IkReal x1621=(cj2*sj1);
IkReal x1622=((1.0)*gconst79*r21);
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst79*r21*x1619))+(r22*r22)+(x1619*x1619)+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x1623.valid){
continue;
}
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal(((((-1.0)*x1620*x1621))+(((-1.0)*x1618*x1620)))),IkReal(((((-1.0)*x1621*x1622))+((x1618*x1619))+((x1619*x1621))+(((-1.0)*x1618*x1622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1623.value)))+(x1624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1625=IKsin(j4);
IkReal x1626=IKcos(j4);
IkReal x1627=(gconst79*r01);
IkReal x1628=(cj1*cj2);
IkReal x1629=(gconst79*r21);
IkReal x1630=((1.0)*sj1);
IkReal x1631=(gconst79*r11);
IkReal x1632=((1.0)*x1626);
IkReal x1633=(gconst80*x1626);
IkReal x1634=((1.0)*x1625);
IkReal x1635=(gconst80*x1634);
evalcond[0]=((((-1.0)*r22*x1632))+(((-1.0)*r20*x1635))+((x1625*x1629)));
evalcond[1]=(cj0+(((-1.0)*r12*x1632))+((x1625*x1631))+(((-1.0)*r10*x1635)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1635))+(((-1.0)*r02*x1632))+((x1625*x1627)));
evalcond[3]=((((-1.0)*r22*x1634))+((r20*x1633))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1630))+(((-1.0)*x1629*x1632)));
evalcond[4]=(((cj0*x1628))+(((-1.0)*cj0*sj2*x1630))+((r00*x1633))+(((-1.0)*r02*x1634))+(((-1.0)*x1627*x1632)));
evalcond[5]=((((-1.0)*sj0*sj2*x1630))+(((-1.0)*r12*x1634))+((r10*x1633))+((sj0*x1628))+(((-1.0)*x1631*x1632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1636=((1.0)*gconst80);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1636))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1636))+(((-1.0)*gconst79*r10)))),-1);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1637.value)+(((1.5707963267949)*(x1638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=(gconst79*r01);
IkReal x1642=(cj1*cj2);
IkReal x1643=(gconst79*r21);
IkReal x1644=((1.0)*sj1);
IkReal x1645=(gconst79*r11);
IkReal x1646=((1.0)*x1640);
IkReal x1647=(gconst80*x1640);
IkReal x1648=((1.0)*x1639);
IkReal x1649=(gconst80*x1648);
evalcond[0]=((((-1.0)*r22*x1646))+(((-1.0)*r20*x1649))+((x1639*x1643)));
evalcond[1]=(cj0+(((-1.0)*r12*x1646))+(((-1.0)*r10*x1649))+((x1639*x1645)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1649))+((x1639*x1641))+(((-1.0)*r02*x1646)));
evalcond[3]=((((-1.0)*r22*x1648))+((r20*x1647))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1644))+(((-1.0)*x1643*x1646)));
evalcond[4]=((((-1.0)*x1641*x1646))+((r00*x1647))+(((-1.0)*cj0*sj2*x1644))+((cj0*x1642))+(((-1.0)*r02*x1648)));
evalcond[5]=(((r10*x1647))+(((-1.0)*r12*x1648))+((sj0*x1642))+(((-1.0)*x1645*x1646))+(((-1.0)*sj0*sj2*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1650=((1.0)*gconst80);
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
CheckValue<IkReal> x1652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1650))+(((-1.0)*gconst79*r00)))),-1);
if(!x1652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1651.value)+(((1.5707963267949)*(x1652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1653=IKsin(j4);
IkReal x1654=IKcos(j4);
IkReal x1655=(gconst79*r01);
IkReal x1656=(cj1*cj2);
IkReal x1657=(gconst79*r21);
IkReal x1658=((1.0)*sj1);
IkReal x1659=(gconst79*r11);
IkReal x1660=((1.0)*x1654);
IkReal x1661=(gconst80*x1654);
IkReal x1662=((1.0)*x1653);
IkReal x1663=(gconst80*x1662);
evalcond[0]=((((-1.0)*r22*x1660))+(((-1.0)*r20*x1663))+((x1653*x1657)));
evalcond[1]=(cj0+(((-1.0)*r12*x1660))+(((-1.0)*r10*x1663))+((x1653*x1659)));
evalcond[2]=((((-1.0)*r00*x1663))+(((-1.0)*sj0))+(((-1.0)*r02*x1660))+((x1653*x1655)));
evalcond[3]=((((-1.0)*r22*x1662))+((r20*x1661))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1658))+(((-1.0)*x1657*x1660)));
evalcond[4]=(((r00*x1661))+(((-1.0)*cj0*sj2*x1658))+(((-1.0)*x1655*x1660))+((cj0*x1656))+(((-1.0)*r02*x1662)));
evalcond[5]=(((sj0*x1656))+((r10*x1661))+(((-1.0)*r12*x1662))+(((-1.0)*sj0*sj2*x1658))+(((-1.0)*x1659*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1664=((-1.0)*r21);
IkReal x1666 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1666)==0){
continue;
}
IkReal x1665=pow(x1666,-0.5);
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(x1664),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1667.value))));
IkReal gconst82=(x1664*x1665);
IkReal gconst83=((1.0)*r20*x1665);
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1669=((-1.0)*r21);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal(x1669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
IkReal x1670=((1.0)*(x1672.value));
IkReal x1671=x1665;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1670)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1670)));
IkReal gconst82=(x1669*x1671);
IkReal gconst83=((1.0)*r20*x1671);
IkReal x1673=r22*r22;
IkReal x1674=((1.0)*x1673);
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(((-1.0)+x1673),-1);
if(!x1678.valid){
continue;
}
IkReal x1675=x1678.value;
if((((1.0)+(((-1.0)*x1674)))) < -0.00001)
continue;
IkReal x1676=IKsqrt(((1.0)+(((-1.0)*x1674))));
IkReal x1677=(cj0*x1675*x1676);
j4eval[0]=((IKabs((x1677+(((-1.0)*x1674*x1677)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1679=((-1.0)*r21);
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal(x1679),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
IkReal x1680=((1.0)*(x1682.value));
IkReal x1681=x1665;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1680)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1680)));
IkReal gconst82=(x1679*x1681);
IkReal gconst83=((1.0)*r20*x1681);
IkReal x1683=r22*r22;
IkReal x1684=((1.0)*x1683);
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(((-1.0)+x1683),-1);
if(!x1688.valid){
continue;
}
IkReal x1685=x1688.value;
if((((1.0)+(((-1.0)*x1684)))) < -0.00001)
continue;
IkReal x1686=IKsqrt(((1.0)+(((-1.0)*x1684))));
IkReal x1687=(sj0*x1685*x1686);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1687+(((-1.0)*x1684*x1687))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1689=((-1.0)*r21);
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal(x1689),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
IkReal x1690=((1.0)*(x1692.value));
IkReal x1691=x1665;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1690)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1690)));
IkReal gconst82=(x1689*x1691);
IkReal gconst83=((1.0)*r20*x1691);
IkReal x1693=r22*r22;
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1693))),-1);
if(!x1696.valid){
continue;
}
IkReal x1694=x1696.value;
IkReal x1695=((1.0)*x1694);
j4eval[0]=IKsign((((x1695*(r21*r21*r21*r21)))+x1693+(((2.0)*x1694*(r20*r20)*(r21*r21)))+((x1695*(r20*r20*r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1697=(gconst82*r21);
IkReal x1698=(gconst83*r20);
IkReal x1699=((1.0)*cj1*sj2);
IkReal x1700=((1.0)*cj2*sj1);
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1697*x1698))+(x1698*x1698)+(x1697*x1697))),-1);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1699))+(((-1.0)*r22*x1700)))),IkReal(((((-1.0)*x1697*x1699))+((cj1*sj2*x1698))+((cj2*sj1*x1698))+(((-1.0)*x1697*x1700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1701.value)))+(x1702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1703=IKsin(j4);
IkReal x1704=IKcos(j4);
IkReal x1705=(cj1*cj2);
IkReal x1706=(gconst82*r11);
IkReal x1707=((1.0)*sj1);
IkReal x1708=((1.0)*x1704);
IkReal x1709=(gconst83*x1704);
IkReal x1710=(gconst82*x1703);
IkReal x1711=((1.0)*x1703);
evalcond[0]=((((-1.0)*gconst83*r20*x1711))+((r21*x1710))+(((-1.0)*r22*x1708)));
evalcond[1]=((((-1.0)*gconst83*r10*x1711))+cj0+((x1703*x1706))+(((-1.0)*r12*x1708)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst83*r00*x1711))+(((-1.0)*r02*x1708))+((r01*x1710)));
evalcond[3]=((((-1.0)*cj2*x1707))+(((-1.0)*gconst82*r21*x1708))+(((-1.0)*cj1*sj2))+((r20*x1709))+(((-1.0)*r22*x1711)));
evalcond[4]=((((-1.0)*cj0*sj2*x1707))+((cj0*x1705))+((r00*x1709))+(((-1.0)*r02*x1711))+(((-1.0)*gconst82*r01*x1708)));
evalcond[5]=((((-1.0)*sj0*sj2*x1707))+((r10*x1709))+(((-1.0)*x1706*x1708))+((sj0*x1705))+(((-1.0)*r12*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1712=((1.0)*gconst83);
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1712)))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1712))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1713.value)))+(x1714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKsin(j4);
IkReal x1716=IKcos(j4);
IkReal x1717=(cj1*cj2);
IkReal x1718=(gconst82*r11);
IkReal x1719=((1.0)*sj1);
IkReal x1720=((1.0)*x1716);
IkReal x1721=(gconst83*x1716);
IkReal x1722=(gconst82*x1715);
IkReal x1723=((1.0)*x1715);
evalcond[0]=((((-1.0)*r22*x1720))+(((-1.0)*gconst83*r20*x1723))+((r21*x1722)));
evalcond[1]=(cj0+(((-1.0)*r12*x1720))+(((-1.0)*gconst83*r10*x1723))+((x1715*x1718)));
evalcond[2]=(((r01*x1722))+(((-1.0)*gconst83*r00*x1723))+(((-1.0)*sj0))+(((-1.0)*r02*x1720)));
evalcond[3]=((((-1.0)*r22*x1723))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst82*r21*x1720))+((r20*x1721))+(((-1.0)*cj2*x1719)));
evalcond[4]=(((r00*x1721))+(((-1.0)*cj0*sj2*x1719))+((cj0*x1717))+(((-1.0)*gconst82*r01*x1720))+(((-1.0)*r02*x1723)));
evalcond[5]=(((r10*x1721))+(((-1.0)*r12*x1723))+(((-1.0)*sj0*sj2*x1719))+(((-1.0)*x1718*x1720))+((sj0*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=((1.0)*gconst83);
CheckValue<IkReal> x1725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1724))+(((-1.0)*gconst82*r00)))),-1);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1725.value)))+(x1726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKsin(j4);
IkReal x1728=IKcos(j4);
IkReal x1729=(cj1*cj2);
IkReal x1730=(gconst82*r11);
IkReal x1731=((1.0)*sj1);
IkReal x1732=((1.0)*x1728);
IkReal x1733=(gconst83*x1728);
IkReal x1734=(gconst82*x1727);
IkReal x1735=((1.0)*x1727);
evalcond[0]=((((-1.0)*gconst83*r20*x1735))+((r21*x1734))+(((-1.0)*r22*x1732)));
evalcond[1]=(cj0+(((-1.0)*r12*x1732))+(((-1.0)*gconst83*r10*x1735))+((x1727*x1730)));
evalcond[2]=(((r01*x1734))+(((-1.0)*sj0))+(((-1.0)*gconst83*r00*x1735))+(((-1.0)*r02*x1732)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1731))+(((-1.0)*gconst82*r21*x1732))+((r20*x1733))+(((-1.0)*r22*x1735)));
evalcond[4]=(((cj0*x1729))+((r00*x1733))+(((-1.0)*cj0*sj2*x1731))+(((-1.0)*gconst82*r01*x1732))+(((-1.0)*r02*x1735)));
evalcond[5]=((((-1.0)*r12*x1735))+((r10*x1733))+((sj0*x1729))+(((-1.0)*x1730*x1732))+(((-1.0)*sj0*sj2*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1736=((-1.0)*r10);
IkReal x1738 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1738)==0){
continue;
}
IkReal x1737=pow(x1738,-0.5);
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1736),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1739.value));
IkReal gconst85=(r11*x1737);
IkReal gconst86=(x1736*x1737);
CheckValue<IkReal> x1740 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1740.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1740.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1741=((-1.0)*r10);
IkReal x1742=x1737;
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1741),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
IkReal x1743=((-1.0)*(x1744.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1743;
IkReal gconst84=x1743;
IkReal gconst85=(r11*x1742);
IkReal gconst86=(x1741*x1742);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=((1.0)*sj0);
IkReal x1746=((1.0)*gconst85);
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1746)))),-1);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1745))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x1745))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1747.value)))+(x1748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(gconst85*r21);
IkReal x1752=(cj1*cj2);
IkReal x1753=(gconst86*r00);
IkReal x1754=(gconst86*r10);
IkReal x1755=(gconst85*r11);
IkReal x1756=((1.0)*sj1);
IkReal x1757=(gconst85*r01);
IkReal x1758=(gconst86*r20);
IkReal x1759=((1.0)*x1750);
IkReal x1760=((1.0)*x1749);
evalcond[0]=(((x1749*x1751))+(((-1.0)*r22*x1759))+(((-1.0)*x1758*x1760)));
evalcond[1]=((((-1.0)*x1754*x1760))+(((-1.0)*r12*x1759))+((x1749*x1755))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1753*x1760))+((x1749*x1757))+(((-1.0)*r02*x1759)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x1750*x1758))+(((-1.0)*x1751*x1759))+(((-1.0)*r22*x1760))+(((-1.0)*cj2*x1756)));
evalcond[4]=((((-1.0)*x1757*x1759))+(((-1.0)*r02*x1760))+((x1750*x1753))+((cj0*x1752))+(((-1.0)*cj0*sj2*x1756)));
evalcond[5]=(((x1750*x1754))+(((-1.0)*r12*x1760))+((sj0*x1752))+(((-1.0)*sj0*sj2*x1756))+(((-1.0)*x1755*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1761=((1.0)*gconst86);
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1761))+(((-1.0)*gconst85*r00)))),-1);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1761))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1762.value)))+(x1763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1764=IKsin(j4);
IkReal x1765=IKcos(j4);
IkReal x1766=(gconst85*r21);
IkReal x1767=(cj1*cj2);
IkReal x1768=(gconst86*r00);
IkReal x1769=(gconst86*r10);
IkReal x1770=(gconst85*r11);
IkReal x1771=((1.0)*sj1);
IkReal x1772=(gconst85*r01);
IkReal x1773=(gconst86*r20);
IkReal x1774=((1.0)*x1765);
IkReal x1775=((1.0)*x1764);
evalcond[0]=(((x1764*x1766))+(((-1.0)*x1773*x1775))+(((-1.0)*r22*x1774)));
evalcond[1]=(cj0+((x1764*x1770))+(((-1.0)*r12*x1774))+(((-1.0)*x1769*x1775)));
evalcond[2]=((((-1.0)*sj0))+((x1764*x1772))+(((-1.0)*r02*x1774))+(((-1.0)*x1768*x1775)));
evalcond[3]=((((-1.0)*cj2*x1771))+((x1765*x1773))+(((-1.0)*cj1*sj2))+(((-1.0)*x1766*x1774))+(((-1.0)*r22*x1775)));
evalcond[4]=((((-1.0)*cj0*sj2*x1771))+(((-1.0)*x1772*x1774))+((cj0*x1767))+((x1765*x1768))+(((-1.0)*r02*x1775)));
evalcond[5]=(((sj0*x1767))+(((-1.0)*sj0*sj2*x1771))+((x1765*x1769))+(((-1.0)*x1770*x1774))+(((-1.0)*r12*x1775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1776=((-1.0)*r11);
IkReal x1778 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1778)==0){
continue;
}
IkReal x1777=pow(x1778,-0.5);
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(x1776),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1779.value))));
IkReal gconst88=(x1776*x1777);
IkReal gconst89=((1.0)*r10*x1777);
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1780.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1781=((-1.0)*r11);
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal(x1781),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
IkReal x1782=((1.0)*(x1784.value));
IkReal x1783=x1777;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1782)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1782)));
IkReal gconst88=(x1781*x1783);
IkReal gconst89=((1.0)*r10*x1783);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1785=((-1.0)*r11);
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal(x1785),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
IkReal x1786=((1.0)*(x1788.value));
IkReal x1787=x1777;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1786)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1786)));
IkReal gconst88=(x1785*x1787);
IkReal gconst89=((1.0)*r10*x1787);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1789=((-1.0)*r11);
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal(x1789),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
IkReal x1790=((1.0)*(x1792.value));
IkReal x1791=x1777;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1790)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1790)));
IkReal gconst88=(x1789*x1791);
IkReal gconst89=((1.0)*r10*x1791);
IkReal x1793=r12*r12;
IkReal x1794=((1.0)*sj0);
IkReal x1795=(cj0*r02);
IkReal x1796=x1777;
j4eval[0]=((IKabs(((((-1.0)*r12*x1794))+(((-1.0)*x1795)))))+(IKabs((((sj0*x1793*x1796))+((r12*x1795*x1796))+(((-1.0)*x1794*x1796))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1797=((1.0)*sj0);
IkReal x1798=((1.0)*cj0);
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1797))+(((-1.0)*r02*x1798)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x1797))+(((-1.0)*gconst88*r01*x1798))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x1800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1799.value)+(((1.5707963267949)*(x1800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j4);
IkReal x1802=IKcos(j4);
IkReal x1803=(cj1*cj2);
IkReal x1804=((1.0)*sj0);
IkReal x1805=(gconst89*r20);
IkReal x1806=((1.0)*sj1);
IkReal x1807=(gconst89*r10);
IkReal x1808=(gconst89*r00);
IkReal x1809=((1.0)*x1802);
IkReal x1810=((1.0)*x1801);
IkReal x1811=(gconst88*x1801);
evalcond[0]=((((-1.0)*x1805*x1810))+((r21*x1811))+(((-1.0)*r22*x1809)));
evalcond[1]=(cj0+(((-1.0)*x1807*x1810))+((r11*x1811))+(((-1.0)*r12*x1809)));
evalcond[2]=((((-1.0)*x1808*x1810))+(((-1.0)*x1804))+(((-1.0)*r02*x1809))+((r01*x1811)));
evalcond[3]=(((x1802*x1805))+(((-1.0)*gconst88*r21*x1809))+(((-1.0)*cj2*x1806))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1810)));
evalcond[4]=(((x1802*x1808))+(((-1.0)*cj0*sj2*x1806))+((cj0*x1803))+(((-1.0)*r02*x1810))+(((-1.0)*gconst88*r01*x1809)));
evalcond[5]=(((x1802*x1807))+((sj0*x1803))+(((-1.0)*sj1*sj2*x1804))+(((-1.0)*r12*x1810))+(((-1.0)*gconst88*r11*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1812=((1.0)*gconst89);
CheckValue<IkReal> x1813 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1812))+((gconst88*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1812))+(((-1.0)*gconst88*r10)))),-1);
if(!x1814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1813.value)+(((1.5707963267949)*(x1814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j4);
IkReal x1816=IKcos(j4);
IkReal x1817=(cj1*cj2);
IkReal x1818=((1.0)*sj0);
IkReal x1819=(gconst89*r20);
IkReal x1820=((1.0)*sj1);
IkReal x1821=(gconst89*r10);
IkReal x1822=(gconst89*r00);
IkReal x1823=((1.0)*x1816);
IkReal x1824=((1.0)*x1815);
IkReal x1825=(gconst88*x1815);
evalcond[0]=((((-1.0)*x1819*x1824))+(((-1.0)*r22*x1823))+((r21*x1825)));
evalcond[1]=((((-1.0)*x1821*x1824))+cj0+(((-1.0)*r12*x1823))+((r11*x1825)));
evalcond[2]=((((-1.0)*x1818))+((r01*x1825))+(((-1.0)*x1822*x1824))+(((-1.0)*r02*x1823)));
evalcond[3]=((((-1.0)*cj2*x1820))+(((-1.0)*cj1*sj2))+((x1816*x1819))+(((-1.0)*r22*x1824))+(((-1.0)*gconst88*r21*x1823)));
evalcond[4]=(((cj0*x1817))+(((-1.0)*cj0*sj2*x1820))+(((-1.0)*gconst88*r01*x1823))+(((-1.0)*r02*x1824))+((x1816*x1822)));
evalcond[5]=((((-1.0)*gconst88*r11*x1823))+((sj0*x1817))+(((-1.0)*r12*x1824))+((x1816*x1821))+(((-1.0)*sj1*sj2*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1826=((1.0)*gconst89);
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1826))+(((-1.0)*gconst88*r00)))),-1);
if(!x1827.valid){
continue;
}
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1826))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1827.value)))+(x1828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1829=IKsin(j4);
IkReal x1830=IKcos(j4);
IkReal x1831=(cj1*cj2);
IkReal x1832=((1.0)*sj0);
IkReal x1833=(gconst89*r20);
IkReal x1834=((1.0)*sj1);
IkReal x1835=(gconst89*r10);
IkReal x1836=(gconst89*r00);
IkReal x1837=((1.0)*x1830);
IkReal x1838=((1.0)*x1829);
IkReal x1839=(gconst88*x1829);
evalcond[0]=((((-1.0)*x1833*x1838))+((r21*x1839))+(((-1.0)*r22*x1837)));
evalcond[1]=(cj0+(((-1.0)*x1835*x1838))+((r11*x1839))+(((-1.0)*r12*x1837)));
evalcond[2]=(((r01*x1839))+(((-1.0)*x1836*x1838))+(((-1.0)*x1832))+(((-1.0)*r02*x1837)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x1830*x1833))+(((-1.0)*r22*x1838))+(((-1.0)*gconst88*r21*x1837))+(((-1.0)*cj2*x1834)));
evalcond[4]=((((-1.0)*cj0*sj2*x1834))+((cj0*x1831))+((x1830*x1836))+(((-1.0)*r02*x1838))+(((-1.0)*gconst88*r01*x1837)));
evalcond[5]=((((-1.0)*gconst88*r11*x1837))+((sj0*x1831))+(((-1.0)*sj1*sj2*x1832))+((x1830*x1835))+(((-1.0)*r12*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1840=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1840;
j4eval[1]=IKsign(x1840);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1841=((1.0)*cj5);
IkReal x1842=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1841)));
j4eval[0]=x1842;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1841))))));
j4eval[2]=IKsign(x1842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1843=cj5*cj5;
IkReal x1844=r11*r11;
IkReal x1845=(r11*sj5);
IkReal x1846=(cj5*r10);
IkReal x1847=((r12*r12)+((x1843*(r10*r10)))+(((-2.0)*x1845*x1846))+x1844+(((-1.0)*x1843*x1844)));
j4eval[0]=x1847;
j4eval[1]=IKsign(x1847);
j4eval[2]=((IKabs(r12))+(IKabs((x1846+(((-1.0)*x1845))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1848=cj5*cj5;
IkReal x1849=r11*r11;
IkReal x1850=(cj5*r10);
IkReal x1851=(r11*sj5);
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x1848*x1849))+(((-2.0)*x1850*x1851))+x1849+((x1848*(r10*r10))))),-1);
if(!x1852.valid){
continue;
}
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((((-1.0)*x1851))+x1850)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1852.value)))+(x1853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1854=IKsin(j4);
IkReal x1855=IKcos(j4);
IkReal x1856=(cj5*r10);
IkReal x1857=(r01*sj5);
IkReal x1858=((1.0)*sj1);
IkReal x1859=(cj5*r00);
IkReal x1860=(cj5*r20);
IkReal x1861=((1.0)*x1855);
IkReal x1862=((1.0)*x1854);
IkReal x1863=(sj5*x1854);
evalcond[0]=((((-1.0)*x1860*x1862))+(((-1.0)*r22*x1861))+((r21*x1863)));
evalcond[1]=((((-1.0)*r02*x1861))+((x1854*x1857))+(((-1.0)*x1859*x1862)));
evalcond[2]=(((x1855*x1856))+(((-1.0)*r12*x1862))+(((-1.0)*r11*sj5*x1861)));
evalcond[3]=((1.0)+(((-1.0)*x1856*x1862))+((r11*x1863))+(((-1.0)*r12*x1861)));
evalcond[4]=((((-1.0)*r02*x1862))+((x1855*x1859))+((cj1*cj2))+(((-1.0)*x1857*x1861))+(((-1.0)*sj2*x1858)));
evalcond[5]=((((-1.0)*cj2*x1858))+(((-1.0)*r21*sj5*x1861))+(((-1.0)*cj1*sj2))+((x1855*x1860))+(((-1.0)*r22*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1864=((1.0)*cj5);
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x1864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1864)))),-1);
if(!x1866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1865.value)+(((1.5707963267949)*(x1866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1867=IKsin(j4);
IkReal x1868=IKcos(j4);
IkReal x1869=(cj5*r10);
IkReal x1870=(r01*sj5);
IkReal x1871=((1.0)*sj1);
IkReal x1872=(cj5*r00);
IkReal x1873=(cj5*r20);
IkReal x1874=((1.0)*x1868);
IkReal x1875=((1.0)*x1867);
IkReal x1876=(sj5*x1867);
evalcond[0]=((((-1.0)*x1873*x1875))+(((-1.0)*r22*x1874))+((r21*x1876)));
evalcond[1]=((((-1.0)*x1872*x1875))+(((-1.0)*r02*x1874))+((x1867*x1870)));
evalcond[2]=((((-1.0)*r12*x1875))+(((-1.0)*r11*sj5*x1874))+((x1868*x1869)));
evalcond[3]=((1.0)+(((-1.0)*x1869*x1875))+(((-1.0)*r12*x1874))+((r11*x1876)));
evalcond[4]=((((-1.0)*r02*x1875))+(((-1.0)*x1870*x1874))+(((-1.0)*sj2*x1871))+((cj1*cj2))+((x1868*x1872)));
evalcond[5]=((((-1.0)*r22*x1875))+(((-1.0)*r21*sj5*x1874))+(((-1.0)*cj2*x1871))+(((-1.0)*cj1*sj2))+((x1868*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1877=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1877.valid){
continue;
}
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1877.value)))+(x1878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1879=IKsin(j4);
IkReal x1880=IKcos(j4);
IkReal x1881=(cj5*r10);
IkReal x1882=(r01*sj5);
IkReal x1883=((1.0)*sj1);
IkReal x1884=(cj5*r00);
IkReal x1885=(cj5*r20);
IkReal x1886=((1.0)*x1880);
IkReal x1887=((1.0)*x1879);
IkReal x1888=(sj5*x1879);
evalcond[0]=(((r21*x1888))+(((-1.0)*r22*x1886))+(((-1.0)*x1885*x1887)));
evalcond[1]=(((x1879*x1882))+(((-1.0)*r02*x1886))+(((-1.0)*x1884*x1887)));
evalcond[2]=(((x1880*x1881))+(((-1.0)*r12*x1887))+(((-1.0)*r11*sj5*x1886)));
evalcond[3]=((1.0)+(((-1.0)*r12*x1886))+(((-1.0)*x1881*x1887))+((r11*x1888)));
evalcond[4]=((((-1.0)*x1882*x1886))+((x1880*x1884))+(((-1.0)*r02*x1887))+((cj1*cj2))+(((-1.0)*sj2*x1883)));
evalcond[5]=((((-1.0)*r21*sj5*x1886))+((x1880*x1885))+(((-1.0)*r22*x1887))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1889=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1889;
j4eval[1]=IKsign(x1889);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1890=((1.0)*cj5);
IkReal x1891=((((-1.0)*r21*x1890))+(((-1.0)*r20*sj5)));
j4eval[0]=x1891;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1890))))));
j4eval[2]=IKsign(x1891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1892=cj5*cj5;
IkReal x1893=r11*r11;
IkReal x1894=(cj5*r10);
IkReal x1895=(r11*sj5);
IkReal x1896=(((x1892*x1893))+(((2.0)*x1894*x1895))+(((-1.0)*x1893))+(((-1.0)*(r12*r12)))+(((-1.0)*x1892*(r10*r10))));
j4eval[0]=x1896;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1895))+x1894))));
j4eval[2]=IKsign(x1896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1897=cj5*cj5;
IkReal x1898=r11*r11;
IkReal x1899=(cj5*r10);
IkReal x1900=(r11*sj5);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(((((-1.0)*x1900))+x1899)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
CheckValue<IkReal> x1902=IKPowWithIntegerCheck(IKsign((((x1897*x1898))+(((-1.0)*x1898))+(((-1.0)*(r12*r12)))+(((2.0)*x1899*x1900))+(((-1.0)*x1897*(r10*r10))))),-1);
if(!x1902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1901.value)+(((1.5707963267949)*(x1902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1903=IKsin(j4);
IkReal x1904=IKcos(j4);
IkReal x1905=(cj5*r10);
IkReal x1906=(r01*sj5);
IkReal x1907=((1.0)*cj2);
IkReal x1908=(cj5*r00);
IkReal x1909=(cj5*r20);
IkReal x1910=((1.0)*x1904);
IkReal x1911=((1.0)*x1903);
IkReal x1912=(sj5*x1903);
evalcond[0]=((((-1.0)*r22*x1910))+((r21*x1912))+(((-1.0)*x1909*x1911)));
evalcond[1]=((((-1.0)*r02*x1910))+((x1903*x1906))+(((-1.0)*x1908*x1911)));
evalcond[2]=((((-1.0)*r11*sj5*x1910))+((x1904*x1905))+(((-1.0)*r12*x1911)));
evalcond[3]=((-1.0)+(((-1.0)*x1905*x1911))+(((-1.0)*r12*x1910))+((r11*x1912)));
evalcond[4]=((((-1.0)*r02*x1911))+((x1904*x1908))+(((-1.0)*cj1*x1907))+((sj1*sj2))+(((-1.0)*x1906*x1910)));
evalcond[5]=((((-1.0)*sj1*x1907))+((x1904*x1909))+(((-1.0)*r22*x1911))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*cj5);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x1913))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1913))+(((-1.0)*r20*sj5)))),-1);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1914.value)+(((1.5707963267949)*(x1915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(cj5*r10);
IkReal x1919=(r01*sj5);
IkReal x1920=((1.0)*cj2);
IkReal x1921=(cj5*r00);
IkReal x1922=(cj5*r20);
IkReal x1923=((1.0)*x1917);
IkReal x1924=((1.0)*x1916);
IkReal x1925=(sj5*x1916);
evalcond[0]=((((-1.0)*x1922*x1924))+(((-1.0)*r22*x1923))+((r21*x1925)));
evalcond[1]=(((x1916*x1919))+(((-1.0)*r02*x1923))+(((-1.0)*x1921*x1924)));
evalcond[2]=((((-1.0)*r12*x1924))+((x1917*x1918))+(((-1.0)*r11*sj5*x1923)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x1923))+(((-1.0)*x1918*x1924))+((r11*x1925)));
evalcond[4]=((((-1.0)*cj1*x1920))+((sj1*sj2))+((x1917*x1921))+(((-1.0)*x1919*x1923))+(((-1.0)*r02*x1924)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x1923))+(((-1.0)*r22*x1924))+((x1917*x1922))+(((-1.0)*sj1*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1926.value)+(((1.5707963267949)*(x1927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1928=IKsin(j4);
IkReal x1929=IKcos(j4);
IkReal x1930=(cj5*r10);
IkReal x1931=(r01*sj5);
IkReal x1932=((1.0)*cj2);
IkReal x1933=(cj5*r00);
IkReal x1934=(cj5*r20);
IkReal x1935=((1.0)*x1929);
IkReal x1936=((1.0)*x1928);
IkReal x1937=(sj5*x1928);
evalcond[0]=((((-1.0)*x1934*x1936))+(((-1.0)*r22*x1935))+((r21*x1937)));
evalcond[1]=((((-1.0)*x1933*x1936))+((x1928*x1931))+(((-1.0)*r02*x1935)));
evalcond[2]=((((-1.0)*r11*sj5*x1935))+(((-1.0)*r12*x1936))+((x1929*x1930)));
evalcond[3]=((-1.0)+(((-1.0)*x1930*x1936))+(((-1.0)*r12*x1935))+((r11*x1937)));
evalcond[4]=((((-1.0)*cj1*x1932))+((sj1*sj2))+(((-1.0)*x1931*x1935))+((x1929*x1933))+(((-1.0)*r02*x1936)));
evalcond[5]=((((-1.0)*sj1*x1932))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x1936))+((x1929*x1934))+(((-1.0)*r21*sj5*x1935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1938=((-1.0)*r00);
IkReal x1940 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1940)==0){
continue;
}
IkReal x1939=pow(x1940,-0.5);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1938),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1941.value));
IkReal gconst91=(r01*x1939);
IkReal gconst92=(x1938*x1939);
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1942.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1943=((-1.0)*r00);
IkReal x1944=x1939;
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x1943),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
IkReal x1945=((-1.0)*(x1946.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x1945;
IkReal gconst90=x1945;
IkReal gconst91=(r01*x1944);
IkReal gconst92=(x1943*x1944);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=((1.0)*sj0);
IkReal x1948=((1.0)*cj0);
CheckValue<IkReal> x1949 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1948))+(((-1.0)*r12*x1947)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x1947))+(((-1.0)*gconst91*r01*x1948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1949.valid){
continue;
}
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x1950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1949.value)+(((1.5707963267949)*(x1950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1951=IKsin(j4);
IkReal x1952=IKcos(j4);
IkReal x1953=(cj1*cj2);
IkReal x1954=(gconst92*r00);
IkReal x1955=((1.0)*sj1);
IkReal x1956=(gconst92*r20);
IkReal x1957=(gconst92*r10);
IkReal x1958=((1.0)*x1952);
IkReal x1959=(gconst91*x1951);
IkReal x1960=((1.0)*x1951);
evalcond[0]=((((-1.0)*r22*x1958))+(((-1.0)*x1956*x1960))+((r21*x1959)));
evalcond[1]=((((-1.0)*x1957*x1960))+cj0+((r11*x1959))+(((-1.0)*r12*x1958)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1958))+((r01*x1959))+(((-1.0)*x1954*x1960)));
evalcond[3]=(((x1952*x1956))+(((-1.0)*r22*x1960))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1955))+(((-1.0)*gconst91*r21*x1958)));
evalcond[4]=(((cj0*x1953))+((x1952*x1954))+(((-1.0)*r02*x1960))+(((-1.0)*cj0*sj2*x1955))+(((-1.0)*gconst91*r01*x1958)));
evalcond[5]=((((-1.0)*sj0*sj2*x1955))+((x1952*x1957))+((sj0*x1953))+(((-1.0)*r12*x1960))+(((-1.0)*gconst91*r11*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1961=((1.0)*gconst92);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x1961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x1961)))),-1);
if(!x1963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1962.value)+(((1.5707963267949)*(x1963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1964=IKsin(j4);
IkReal x1965=IKcos(j4);
IkReal x1966=(cj1*cj2);
IkReal x1967=(gconst92*r00);
IkReal x1968=((1.0)*sj1);
IkReal x1969=(gconst92*r20);
IkReal x1970=(gconst92*r10);
IkReal x1971=((1.0)*x1965);
IkReal x1972=(gconst91*x1964);
IkReal x1973=((1.0)*x1964);
evalcond[0]=((((-1.0)*r22*x1971))+((r21*x1972))+(((-1.0)*x1969*x1973)));
evalcond[1]=(cj0+((r11*x1972))+(((-1.0)*x1970*x1973))+(((-1.0)*r12*x1971)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1971))+((r01*x1972))+(((-1.0)*x1967*x1973)));
evalcond[3]=((((-1.0)*r22*x1973))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst91*r21*x1971))+((x1965*x1969))+(((-1.0)*cj2*x1968)));
evalcond[4]=(((cj0*x1966))+(((-1.0)*gconst91*r01*x1971))+(((-1.0)*r02*x1973))+(((-1.0)*cj0*sj2*x1968))+((x1965*x1967)));
evalcond[5]=(((sj0*x1966))+(((-1.0)*gconst91*r11*x1971))+((x1965*x1970))+(((-1.0)*r12*x1973))+(((-1.0)*sj0*sj2*x1968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1974=((-1.0)*r01);
IkReal x1976 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1976)==0){
continue;
}
IkReal x1975=pow(x1976,-0.5);
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(x1974),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1977.value))));
IkReal gconst94=(x1974*x1975);
IkReal gconst95=((1.0)*r00*x1975);
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x1979=((-1.0)*r01);
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(x1979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
IkReal x1980=((1.0)*(x1982.value));
IkReal x1981=x1975;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1980)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1980)));
IkReal gconst94=(x1979*x1981);
IkReal gconst95=((1.0)*r00*x1981);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1983=((-1.0)*r01);
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal(x1983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
IkReal x1984=((1.0)*(x1986.value));
IkReal x1985=x1975;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1984)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1984)));
IkReal gconst94=(x1983*x1985);
IkReal gconst95=((1.0)*r00*x1985);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1987=((-1.0)*r01);
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(x1987),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
IkReal x1988=((1.0)*(x1990.value));
IkReal x1989=x1975;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1988)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1988)));
IkReal gconst94=(x1987*x1989);
IkReal gconst95=((1.0)*r00*x1989);
IkReal x1991=r02*r02;
IkReal x1992=(r12*sj0);
IkReal x1993=((1.0)*cj0);
IkReal x1994=x1975;
j4eval[0]=((IKabs(((((-1.0)*r02*x1993))+(((-1.0)*x1992)))))+(IKabs((((cj0*x1991*x1994))+(((-1.0)*x1993*x1994))+((r02*x1992*x1994))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1995=((1.0)*sj0);
IkReal x1996=((1.0)*cj0);
CheckValue<IkReal> x1997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1996))+(((-1.0)*r12*x1995)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x1995))+(((-1.0)*gconst94*r01*x1996))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1997.value)))+(x1998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1999=IKsin(j4);
IkReal x2000=IKcos(j4);
IkReal x2001=(cj1*cj2);
IkReal x2002=(gconst94*r11);
IkReal x2003=(gconst94*r21);
IkReal x2004=((1.0)*sj1);
IkReal x2005=(gconst94*r01);
IkReal x2006=((1.0)*x2000);
IkReal x2007=(gconst95*x2000);
IkReal x2008=((1.0)*x1999);
IkReal x2009=(gconst95*x2008);
evalcond[0]=((((-1.0)*r22*x2006))+((x1999*x2003))+(((-1.0)*r20*x2009)));
evalcond[1]=(cj0+(((-1.0)*r12*x2006))+(((-1.0)*r10*x2009))+((x1999*x2002)));
evalcond[2]=((((-1.0)*sj0))+((x1999*x2005))+(((-1.0)*r00*x2009))+(((-1.0)*r02*x2006)));
evalcond[3]=((((-1.0)*r22*x2008))+(((-1.0)*x2003*x2006))+(((-1.0)*cj1*sj2))+((r20*x2007))+(((-1.0)*cj2*x2004)));
evalcond[4]=((((-1.0)*x2005*x2006))+((r00*x2007))+(((-1.0)*cj0*sj2*x2004))+((cj0*x2001))+(((-1.0)*r02*x2008)));
evalcond[5]=(((r10*x2007))+(((-1.0)*r12*x2008))+(((-1.0)*x2002*x2006))+((sj0*x2001))+(((-1.0)*sj0*sj2*x2004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2010=((1.0)*gconst95);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2010)))),-1);
if(!x2012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2011.value)+(((1.5707963267949)*(x2012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2013=IKsin(j4);
IkReal x2014=IKcos(j4);
IkReal x2015=(cj1*cj2);
IkReal x2016=(gconst94*r11);
IkReal x2017=(gconst94*r21);
IkReal x2018=((1.0)*sj1);
IkReal x2019=(gconst94*r01);
IkReal x2020=((1.0)*x2014);
IkReal x2021=(gconst95*x2014);
IkReal x2022=((1.0)*x2013);
IkReal x2023=(gconst95*x2022);
evalcond[0]=((((-1.0)*r22*x2020))+(((-1.0)*r20*x2023))+((x2013*x2017)));
evalcond[1]=((((-1.0)*r10*x2023))+cj0+(((-1.0)*r12*x2020))+((x2013*x2016)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2023))+(((-1.0)*r02*x2020))+((x2013*x2019)));
evalcond[3]=((((-1.0)*r22*x2022))+(((-1.0)*cj1*sj2))+(((-1.0)*x2017*x2020))+((r20*x2021))+(((-1.0)*cj2*x2018)));
evalcond[4]=(((r00*x2021))+(((-1.0)*r02*x2022))+(((-1.0)*x2019*x2020))+((cj0*x2015))+(((-1.0)*cj0*sj2*x2018)));
evalcond[5]=(((r10*x2021))+((sj0*x2015))+(((-1.0)*x2016*x2020))+(((-1.0)*r12*x2022))+(((-1.0)*sj0*sj2*x2018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2024=((1.0)*gconst95);
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2024))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2024)))),-1);
if(!x2026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2025.value)+(((1.5707963267949)*(x2026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2027=IKsin(j4);
IkReal x2028=IKcos(j4);
IkReal x2029=(cj1*cj2);
IkReal x2030=(gconst94*r11);
IkReal x2031=(gconst94*r21);
IkReal x2032=((1.0)*sj1);
IkReal x2033=(gconst94*r01);
IkReal x2034=((1.0)*x2028);
IkReal x2035=(gconst95*x2028);
IkReal x2036=((1.0)*x2027);
IkReal x2037=(gconst95*x2036);
evalcond[0]=(((x2027*x2031))+(((-1.0)*r22*x2034))+(((-1.0)*r20*x2037)));
evalcond[1]=(((x2027*x2030))+cj0+(((-1.0)*r12*x2034))+(((-1.0)*r10*x2037)));
evalcond[2]=(((x2027*x2033))+(((-1.0)*sj0))+(((-1.0)*r00*x2037))+(((-1.0)*r02*x2034)));
evalcond[3]=((((-1.0)*r22*x2036))+(((-1.0)*cj1*sj2))+((r20*x2035))+(((-1.0)*x2031*x2034))+(((-1.0)*cj2*x2032)));
evalcond[4]=(((r00*x2035))+(((-1.0)*cj0*sj2*x2032))+((cj0*x2029))+(((-1.0)*r02*x2036))+(((-1.0)*x2033*x2034)));
evalcond[5]=(((r10*x2035))+(((-1.0)*r12*x2036))+((sj0*x2029))+(((-1.0)*sj0*sj2*x2032))+(((-1.0)*x2030*x2034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2038=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2038;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2039=((1.0)*cj5);
IkReal x2040=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2039)));
j4eval[0]=x2040;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2039))))));
j4eval[2]=IKsign(x2040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2041=cj5*cj5;
IkReal x2042=r01*r01;
IkReal x2043=(r01*sj5);
IkReal x2044=(cj5*r00);
IkReal x2045=(((x2041*x2042))+(((2.0)*x2043*x2044))+(((-1.0)*(r02*r02)))+(((-1.0)*x2042))+(((-1.0)*x2041*(r00*r00))));
j4eval[0]=x2045;
j4eval[1]=IKsign(x2045);
j4eval[2]=((IKabs(r02))+(IKabs((x2044+(((-1.0)*x2043))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2046=cj5*cj5;
IkReal x2047=r01*r01;
IkReal x2048=(r01*sj5);
IkReal x2049=(cj5*r00);
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x2046*x2047))+(((-1.0)*x2047))+(((2.0)*x2048*x2049))+(((-1.0)*x2046*(r00*r00))))),-1);
if(!x2050.valid){
continue;
}
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal((x2049+(((-1.0)*x2048)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2050.value)))+(x2051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2052=IKsin(j4);
IkReal x2053=IKcos(j4);
IkReal x2054=(cj5*r10);
IkReal x2055=(r01*sj5);
IkReal x2056=((1.0)*sj1);
IkReal x2057=(cj5*r00);
IkReal x2058=(cj5*r20);
IkReal x2059=((1.0)*x2053);
IkReal x2060=((1.0)*x2052);
IkReal x2061=(sj5*x2052);
evalcond[0]=(((r21*x2061))+(((-1.0)*x2058*x2060))+(((-1.0)*r22*x2059)));
evalcond[1]=((((-1.0)*r12*x2059))+((r11*x2061))+(((-1.0)*x2054*x2060)));
evalcond[2]=(((x2053*x2057))+(((-1.0)*r02*x2060))+(((-1.0)*x2055*x2059)));
evalcond[3]=((-1.0)+(((-1.0)*x2057*x2060))+((x2052*x2055))+(((-1.0)*r02*x2059)));
evalcond[4]=((((-1.0)*r12*x2060))+((x2053*x2054))+(((-1.0)*r11*sj5*x2059))+(((-1.0)*sj2*x2056))+((cj1*cj2)));
evalcond[5]=(((x2053*x2058))+(((-1.0)*cj2*x2056))+(((-1.0)*r21*sj5*x2059))+(((-1.0)*r22*x2060))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2062=((1.0)*cj5);
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2062))+(((-1.0)*r10*sj5)))),-1);
if(!x2064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2063.value)+(((1.5707963267949)*(x2064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2065=IKsin(j4);
IkReal x2066=IKcos(j4);
IkReal x2067=(cj5*r10);
IkReal x2068=(r01*sj5);
IkReal x2069=((1.0)*sj1);
IkReal x2070=(cj5*r00);
IkReal x2071=(cj5*r20);
IkReal x2072=((1.0)*x2066);
IkReal x2073=((1.0)*x2065);
IkReal x2074=(sj5*x2065);
evalcond[0]=((((-1.0)*x2071*x2073))+(((-1.0)*r22*x2072))+((r21*x2074)));
evalcond[1]=((((-1.0)*r12*x2072))+((r11*x2074))+(((-1.0)*x2067*x2073)));
evalcond[2]=(((x2066*x2070))+(((-1.0)*r02*x2073))+(((-1.0)*x2068*x2072)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2072))+(((-1.0)*x2070*x2073))+((x2065*x2068)));
evalcond[4]=(((x2066*x2067))+(((-1.0)*r12*x2073))+(((-1.0)*r11*sj5*x2072))+(((-1.0)*sj2*x2069))+((cj1*cj2)));
evalcond[5]=(((x2066*x2071))+(((-1.0)*r22*x2073))+(((-1.0)*cj2*x2069))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2075.valid){
continue;
}
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2075.value)))+(x2076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2077=IKsin(j4);
IkReal x2078=IKcos(j4);
IkReal x2079=(cj5*r10);
IkReal x2080=(r01*sj5);
IkReal x2081=((1.0)*sj1);
IkReal x2082=(cj5*r00);
IkReal x2083=(cj5*r20);
IkReal x2084=((1.0)*x2078);
IkReal x2085=((1.0)*x2077);
IkReal x2086=(sj5*x2077);
evalcond[0]=((((-1.0)*r22*x2084))+(((-1.0)*x2083*x2085))+((r21*x2086)));
evalcond[1]=((((-1.0)*r12*x2084))+(((-1.0)*x2079*x2085))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2085))+((x2078*x2082))+(((-1.0)*x2080*x2084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2084))+((x2077*x2080))+(((-1.0)*x2082*x2085)));
evalcond[4]=((((-1.0)*sj2*x2081))+(((-1.0)*r11*sj5*x2084))+(((-1.0)*r12*x2085))+((cj1*cj2))+((x2078*x2079)));
evalcond[5]=((((-1.0)*r21*sj5*x2084))+(((-1.0)*r22*x2085))+((x2078*x2083))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2087=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2087;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2088=((1.0)*cj5);
IkReal x2089=((((-1.0)*r21*x2088))+(((-1.0)*r20*sj5)));
j4eval[0]=x2089;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2088))))));
j4eval[2]=IKsign(x2089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2090=cj5*cj5;
IkReal x2091=r01*r01;
IkReal x2092=(cj5*r00);
IkReal x2093=(r01*sj5);
IkReal x2094=(x2091+(((-2.0)*x2092*x2093))+(((-1.0)*x2090*x2091))+(r02*r02)+((x2090*(r00*r00))));
j4eval[0]=x2094;
j4eval[1]=((IKabs(r02))+(IKabs((x2092+(((-1.0)*x2093))))));
j4eval[2]=IKsign(x2094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2095=cj5*cj5;
IkReal x2096=r01*r01;
IkReal x2097=(r01*sj5);
IkReal x2098=(cj5*r00);
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2097*x2098))+x2096+((x2095*(r00*r00)))+(r02*r02)+(((-1.0)*x2095*x2096)))),-1);
if(!x2099.valid){
continue;
}
CheckValue<IkReal> x2100 = IKatan2WithCheck(IkReal((x2098+(((-1.0)*x2097)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2099.value)))+(x2100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2101=IKsin(j4);
IkReal x2102=IKcos(j4);
IkReal x2103=(cj5*r10);
IkReal x2104=(r01*sj5);
IkReal x2105=((1.0)*cj2);
IkReal x2106=(cj5*r00);
IkReal x2107=(cj5*r20);
IkReal x2108=((1.0)*x2102);
IkReal x2109=((1.0)*x2101);
IkReal x2110=(sj5*x2101);
evalcond[0]=((((-1.0)*r22*x2108))+(((-1.0)*x2107*x2109))+((r21*x2110)));
evalcond[1]=((((-1.0)*x2103*x2109))+(((-1.0)*r12*x2108))+((r11*x2110)));
evalcond[2]=((((-1.0)*r02*x2109))+((x2102*x2106))+(((-1.0)*x2104*x2108)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2108))+(((-1.0)*x2106*x2109))+((x2101*x2104)));
evalcond[4]=((((-1.0)*r12*x2109))+(((-1.0)*cj1*x2105))+((sj1*sj2))+((x2102*x2103))+(((-1.0)*r11*sj5*x2108)));
evalcond[5]=((((-1.0)*r22*x2109))+(((-1.0)*sj1*x2105))+(((-1.0)*cj1*sj2))+((x2102*x2107))+(((-1.0)*r21*sj5*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2111=((1.0)*cj5);
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2111))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2111))+(((-1.0)*r20*sj5)))),-1);
if(!x2113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2112.value)+(((1.5707963267949)*(x2113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2114=IKsin(j4);
IkReal x2115=IKcos(j4);
IkReal x2116=(cj5*r10);
IkReal x2117=(r01*sj5);
IkReal x2118=((1.0)*cj2);
IkReal x2119=(cj5*r00);
IkReal x2120=(cj5*r20);
IkReal x2121=((1.0)*x2115);
IkReal x2122=((1.0)*x2114);
IkReal x2123=(sj5*x2114);
evalcond[0]=((((-1.0)*r22*x2121))+(((-1.0)*x2120*x2122))+((r21*x2123)));
evalcond[1]=((((-1.0)*x2116*x2122))+((r11*x2123))+(((-1.0)*r12*x2121)));
evalcond[2]=((((-1.0)*x2117*x2121))+(((-1.0)*r02*x2122))+((x2115*x2119)));
evalcond[3]=((1.0)+(((-1.0)*x2119*x2122))+(((-1.0)*r02*x2121))+((x2114*x2117)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x2122))+(((-1.0)*r11*sj5*x2121))+((x2115*x2116))+(((-1.0)*cj1*x2118)));
evalcond[5]=((((-1.0)*sj1*x2118))+(((-1.0)*r22*x2122))+((x2115*x2120))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2124.value)+(((1.5707963267949)*(x2125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=(cj5*r10);
IkReal x2129=(r01*sj5);
IkReal x2130=((1.0)*cj2);
IkReal x2131=(cj5*r00);
IkReal x2132=(cj5*r20);
IkReal x2133=((1.0)*x2127);
IkReal x2134=((1.0)*x2126);
IkReal x2135=(sj5*x2126);
evalcond[0]=((((-1.0)*r22*x2133))+((r21*x2135))+(((-1.0)*x2132*x2134)));
evalcond[1]=((((-1.0)*r12*x2133))+((r11*x2135))+(((-1.0)*x2128*x2134)));
evalcond[2]=(((x2127*x2131))+(((-1.0)*x2129*x2133))+(((-1.0)*r02*x2134)));
evalcond[3]=((1.0)+(((-1.0)*x2131*x2134))+((x2126*x2129))+(((-1.0)*r02*x2133)));
evalcond[4]=((((-1.0)*r12*x2134))+((sj1*sj2))+(((-1.0)*cj1*x2130))+(((-1.0)*r11*sj5*x2133))+((x2127*x2128)));
evalcond[5]=((((-1.0)*r22*x2134))+(((-1.0)*sj1*x2130))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2133))+((x2127*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2136=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2136);
rxp1_1=(px*r21);
rxp1_2=(r11*x2136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2137=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2137);
rxp1_1=(px*r21);
rxp1_2=(r11*x2137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2138=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2138);
rxp1_1=(px*r21);
rxp1_2=(r11*x2138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2141=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2141.valid){
continue;
}
IkReal x2139=x2141.value;
IkReal x2140=(sj0*x2139);
cj4array[0]=(((sj1*sj2*x2140))+(((-1.0)*cj1*cj2*x2140)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2142=IKsin(j4);
IkReal x2143=IKcos(j4);
IkReal x2144=(r21*sj5);
IkReal x2145=(cj5*r20);
IkReal x2146=((1.0)*x2142);
IkReal x2147=((1.0)*x2143);
evalcond[0]=((-1.0)*r02*x2142);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2147)));
evalcond[2]=(((x2142*x2144))+(((-1.0)*x2145*x2146)));
evalcond[3]=(((r11*sj5*x2142))+(((-1.0)*cj5*r10*x2146)));
evalcond[4]=((((-1.0)*x2144*x2147))+(((-1.0)*cj2*sj1))+((x2143*x2145))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2149=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2149.valid){
continue;
}
IkReal x2148=x2149.value;
cj4array[0]=(((cj2*sj1*x2148))+((cj1*sj2*x2148)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2150=IKsin(j4);
IkReal x2151=IKcos(j4);
IkReal x2152=(r11*sj5);
IkReal x2153=((1.0)*sj0);
IkReal x2154=((1.0)*x2151);
IkReal x2155=((1.0)*cj5*x2150);
evalcond[0]=((-1.0)*r02*x2150);
evalcond[1]=((((-1.0)*r02*x2154))+(((-1.0)*x2153)));
evalcond[2]=(((r21*sj5*x2150))+(((-1.0)*r20*x2155)));
evalcond[3]=(((x2150*x2152))+(((-1.0)*r10*x2155)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x2153))+(((-1.0)*x2152*x2154))+((cj5*r10*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2156=IKPowWithIntegerCheck(r02,-1);
if(!x2156.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2156.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2157=IKsin(j4);
IkReal x2158=IKcos(j4);
IkReal x2159=((1.0)*sj1);
IkReal x2160=(cj5*x2158);
IkReal x2161=(sj5*x2157);
IkReal x2162=((1.0)*sj5*x2158);
IkReal x2163=((1.0)*cj5*x2157);
evalcond[0]=((-1.0)*r02*x2157);
evalcond[1]=((((-1.0)*r20*x2163))+((r21*x2161)));
evalcond[2]=((((-1.0)*r10*x2163))+((r11*x2161)));
evalcond[3]=((((-1.0)*r21*x2162))+(((-1.0)*cj1*sj2))+((r20*x2160))+(((-1.0)*cj2*x2159)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x2160))+(((-1.0)*sj0*sj2*x2159))+(((-1.0)*r11*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2164=((1.0)*sj0);
IkReal x2165=((1.0)*cj0);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2164))+(((-1.0)*r02*x2165)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2164))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2168=IKsin(j4);
IkReal x2169=IKcos(j4);
IkReal x2170=(cj1*cj2);
IkReal x2171=(cj5*r10);
IkReal x2172=(r01*sj5);
IkReal x2173=(cj5*r00);
IkReal x2174=((1.0)*sj1);
IkReal x2175=(cj5*r20);
IkReal x2176=((1.0)*x2169);
IkReal x2177=((1.0)*x2168);
IkReal x2178=(sj5*x2168);
evalcond[0]=(((r21*x2178))+(((-1.0)*x2175*x2177))+(((-1.0)*r22*x2176)));
evalcond[1]=((((-1.0)*x2171*x2177))+((r11*x2178))+cj0+(((-1.0)*r12*x2176)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2176))+(((-1.0)*x2173*x2177))+((x2168*x2172)));
evalcond[3]=((((-1.0)*cj2*x2174))+(((-1.0)*r21*sj5*x2176))+(((-1.0)*cj1*sj2))+((x2169*x2175))+(((-1.0)*r22*x2177)));
evalcond[4]=((((-1.0)*cj0*sj2*x2174))+((cj0*x2170))+(((-1.0)*r02*x2177))+(((-1.0)*x2172*x2176))+((x2169*x2173)));
evalcond[5]=((((-1.0)*sj0*sj2*x2174))+(((-1.0)*r11*sj5*x2176))+((x2169*x2171))+(((-1.0)*r12*x2177))+((sj0*x2170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2179=((1.0)*cj5);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2179)))),-1);
if(!x2181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2182=IKsin(j4);
IkReal x2183=IKcos(j4);
IkReal x2184=(cj1*cj2);
IkReal x2185=(cj5*r10);
IkReal x2186=(r01*sj5);
IkReal x2187=(cj5*r00);
IkReal x2188=((1.0)*sj1);
IkReal x2189=(cj5*r20);
IkReal x2190=((1.0)*x2183);
IkReal x2191=((1.0)*x2182);
IkReal x2192=(sj5*x2182);
evalcond[0]=((((-1.0)*x2189*x2191))+((r21*x2192))+(((-1.0)*r22*x2190)));
evalcond[1]=(cj0+(((-1.0)*x2185*x2191))+((r11*x2192))+(((-1.0)*r12*x2190)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2187*x2191))+((x2182*x2186))+(((-1.0)*r02*x2190)));
evalcond[3]=((((-1.0)*r21*sj5*x2190))+((x2183*x2189))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2191))+(((-1.0)*cj2*x2188)));
evalcond[4]=((((-1.0)*x2186*x2190))+((x2183*x2187))+((cj0*x2184))+(((-1.0)*cj0*sj2*x2188))+(((-1.0)*r02*x2191)));
evalcond[5]=((((-1.0)*sj0*sj2*x2188))+((x2183*x2185))+((sj0*x2184))+(((-1.0)*r12*x2191))+(((-1.0)*r11*sj5*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2193=((1.0)*cj5);
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
CheckValue<IkReal> x2195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2193))+(((-1.0)*r00*sj5)))),-1);
if(!x2195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2194.value)+(((1.5707963267949)*(x2195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2196=IKsin(j4);
IkReal x2197=IKcos(j4);
IkReal x2198=(cj1*cj2);
IkReal x2199=(cj5*r10);
IkReal x2200=(r01*sj5);
IkReal x2201=(cj5*r00);
IkReal x2202=((1.0)*sj1);
IkReal x2203=(cj5*r20);
IkReal x2204=((1.0)*x2197);
IkReal x2205=((1.0)*x2196);
IkReal x2206=(sj5*x2196);
evalcond[0]=((((-1.0)*x2203*x2205))+(((-1.0)*r22*x2204))+((r21*x2206)));
evalcond[1]=(cj0+(((-1.0)*r12*x2204))+((r11*x2206))+(((-1.0)*x2199*x2205)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2201*x2205))+((x2196*x2200))+(((-1.0)*r02*x2204)));
evalcond[3]=((((-1.0)*r22*x2205))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2204))+((x2197*x2203))+(((-1.0)*cj2*x2202)));
evalcond[4]=((((-1.0)*cj0*sj2*x2202))+((cj0*x2198))+(((-1.0)*x2200*x2204))+((x2197*x2201))+(((-1.0)*r02*x2205)));
evalcond[5]=((((-1.0)*r12*x2205))+((sj0*x2198))+(((-1.0)*r11*sj5*x2204))+(((-1.0)*sj0*sj2*x2202))+((x2197*x2199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2207=cj5*cj5;
IkReal x2208=r21*r21;
IkReal x2209=(cj1*sj2);
IkReal x2210=((1.0)*r22);
IkReal x2211=(cj5*r20);
IkReal x2212=(r21*sj5);
IkReal x2213=(cj2*sj1);
CheckValue<IkReal> x2214 = IKatan2WithCheck(IkReal(((((-1.0)*x2210*x2213))+(((-1.0)*x2209*x2210)))),IkReal(((((-1.0)*x2212*x2213))+(((-1.0)*x2209*x2212))+((x2211*x2213))+((x2209*x2211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2214.valid){
continue;
}
CheckValue<IkReal> x2215=IKPowWithIntegerCheck(IKsign((x2208+(r22*r22)+(((-1.0)*x2207*x2208))+((x2207*(r20*r20)))+(((-2.0)*x2211*x2212)))),-1);
if(!x2215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2214.value)+(((1.5707963267949)*(x2215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2216=IKsin(j4);
IkReal x2217=IKcos(j4);
IkReal x2218=(r21*sj5);
IkReal x2219=(cj5*r20);
IkReal x2220=((1.0)*x2217);
IkReal x2221=((1.0)*x2216);
evalcond[0]=((((-1.0)*x2219*x2221))+((x2216*x2218))+(((-1.0)*r22*x2220)));
evalcond[1]=((((-1.0)*cj2*sj1))+((x2217*x2219))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2221))+(((-1.0)*x2218*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2222=(cj5*sj4);
IkReal x2223=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2223))+(((-1.0)*r00*x2222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2222))+(((-1.0)*r11*x2223))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2223))+(((-1.0)*r00*x2222))))+IKsqr((((r10*x2222))+(((-1.0)*r11*x2223))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2223))+(((-1.0)*r00*x2222))), (((r10*x2222))+(((-1.0)*r11*x2223))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2224=IKcos(j0);
IkReal x2225=IKsin(j0);
IkReal x2226=(cj4*cj5);
IkReal x2227=((0.39225)*cj1);
IkReal x2228=(cj5*r01);
IkReal x2229=((1.0)*sj1);
IkReal x2230=(r11*sj5);
IkReal x2231=((1.0)*sj4);
IkReal x2232=((0.425)*sj1);
IkReal x2233=(r00*sj5);
IkReal x2234=(cj5*r11);
IkReal x2235=((1.0)*cj4);
IkReal x2236=((0.39225)*sj1);
IkReal x2237=(r01*sj5);
IkReal x2238=(r10*sj5);
IkReal x2239=(sj2*x2225);
IkReal x2240=(cj1*x2224);
IkReal x2241=(cj2*x2225);
IkReal x2242=(cj2*x2224);
IkReal x2243=(sj2*x2224);
evalcond[0]=((((-1.0)*cj5*r10*x2231))+((sj4*x2230))+x2224+(((-1.0)*r12*x2235)));
evalcond[1]=(((sj4*x2237))+(((-1.0)*cj5*r00*x2231))+(((-1.0)*r02*x2235))+(((-1.0)*x2225)));
evalcond[2]=((((-1.0)*x2229*x2242))+x2228+x2233+(((-1.0)*sj2*x2240)));
evalcond[3]=((((-1.0)*x2229*x2241))+x2238+x2234+(((-1.0)*cj1*x2239)));
evalcond[4]=((((-1.0)*x2229*x2243))+(((-1.0)*x2235*x2237))+(((-1.0)*r02*x2231))+((cj2*x2240))+((r00*x2226)));
evalcond[5]=(((r10*x2226))+((cj1*x2241))+(((-1.0)*x2229*x2239))+(((-1.0)*r12*x2231))+(((-1.0)*x2230*x2235)));
evalcond[6]=((((-0.09465)*x2228))+(((-0.09465)*x2233))+((x2236*x2242))+((x2224*x2232))+(((-0.10915)*x2225))+(((-1.0)*px))+((x2227*x2243)));
evalcond[7]=((((-0.09465)*x2238))+(((-0.09465)*x2234))+((x2236*x2241))+((x2225*x2232))+(((-1.0)*py))+((x2227*x2239))+(((0.10915)*x2224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2244=((1.0)*cj5);
IkReal x2245=((1.0)*sj5);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2245))+(((-1.0)*r11*x2244)))),IkReal(((((-1.0)*r01*x2244))+(((-1.0)*r00*x2245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2247.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2246.value)+(((1.5707963267949)*(x2247.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2248=IKcos(j0);
IkReal x2249=IKsin(j0);
IkReal x2250=(cj1*sj2);
IkReal x2251=(cj5*r01);
IkReal x2252=(cj5*r11);
IkReal x2253=(cj2*sj1);
IkReal x2254=((0.425)*sj1);
IkReal x2255=(r00*sj5);
IkReal x2256=(r10*sj5);
IkReal x2257=((0.39225)*x2249);
IkReal x2258=((1.0)*x2248);
IkReal x2259=((1.0)*x2249);
IkReal x2260=((0.39225)*x2248);
evalcond[0]=(x2255+x2251+(((-1.0)*x2253*x2258))+(((-1.0)*x2250*x2258)));
evalcond[1]=(x2256+x2252+(((-1.0)*x2253*x2259))+(((-1.0)*x2250*x2259)));
evalcond[2]=(((x2250*x2260))+(((-1.0)*px))+((x2253*x2260))+(((-0.10915)*x2249))+(((-0.09465)*x2255))+(((-0.09465)*x2251))+((x2248*x2254)));
evalcond[3]=(((x2253*x2257))+(((0.10915)*x2248))+((x2249*x2254))+(((-1.0)*py))+((x2250*x2257))+(((-0.09465)*x2256))+(((-0.09465)*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2261=((1.0)*cj5);
IkReal x2262=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2261)));
j4eval[0]=x2262;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2261)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2263=((1.0)*cj5);
IkReal x2264=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2263)));
j4eval[0]=x2264;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2263))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2265=((1.0)*sj0);
IkReal x2266=((1.0)*cj0);
IkReal x2267=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2267;
j4eval[1]=((IKabs(((((-1.0)*r02*x2266))+(((-1.0)*r12*x2265)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2266))+(((-1.0)*r11*sj5*x2265))))));
j4eval[2]=IKsign(x2267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2268=((-1.0)*r20);
IkReal x2270 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2270)==0){
continue;
}
IkReal x2269=pow(x2270,-0.5);
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2268),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2271.value));
IkReal gconst79=(r21*x2269);
IkReal gconst80=(x2268*x2269);
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2272.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2273=((-1.0)*r20);
IkReal x2274=x2269;
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2273),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
IkReal x2275=((-1.0)*(x2276.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2275;
IkReal gconst78=x2275;
IkReal gconst79=(r21*x2274);
IkReal gconst80=(x2273*x2274);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2277=((-1.0)*r20);
IkReal x2278=x2269;
CheckValue<IkReal> x2280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2277),IKFAST_ATAN2_MAGTHRESH);
if(!x2280.valid){
continue;
}
IkReal x2279=((-1.0)*(x2280.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2279;
IkReal gconst78=x2279;
IkReal gconst79=(r21*x2278);
IkReal gconst80=(x2277*x2278);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2281=((-1.0)*r20);
IkReal x2282=x2269;
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2281),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
IkReal x2283=((-1.0)*(x2284.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2283;
IkReal gconst78=x2283;
IkReal gconst79=(r21*x2282);
IkReal gconst80=(x2281*x2282);
IkReal x2285=r22*r22;
CheckValue<IkReal> x2288=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2285))),-1);
if(!x2288.valid){
continue;
}
IkReal x2286=x2288.value;
IkReal x2287=(x2285+(((2.0)*x2286*(r20*r20)*(r21*r21)))+((x2286*(r20*r20*r20*r20)))+((x2286*(r21*r21*r21*r21))));
j4eval[0]=x2287;
j4eval[1]=IKsign(x2287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2289=(cj1*sj2);
IkReal x2290=(gconst80*r20);
IkReal x2291=((1.0)*r22);
IkReal x2292=(cj2*sj1);
IkReal x2293=((1.0)*gconst79*r21);
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x2290))+(x2290*x2290)+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal(((((-1.0)*x2289*x2291))+(((-1.0)*x2291*x2292)))),IkReal(((((-1.0)*x2289*x2293))+(((-1.0)*x2292*x2293))+((x2289*x2290))+((x2290*x2292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2294.value)))+(x2295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2296=IKsin(j4);
IkReal x2297=IKcos(j4);
IkReal x2298=(gconst79*r01);
IkReal x2299=(cj1*cj2);
IkReal x2300=(gconst79*r21);
IkReal x2301=((1.0)*sj1);
IkReal x2302=(gconst79*r11);
IkReal x2303=((1.0)*x2297);
IkReal x2304=(gconst80*x2297);
IkReal x2305=((1.0)*x2296);
IkReal x2306=(gconst80*x2305);
evalcond[0]=((((-1.0)*r22*x2303))+(((-1.0)*r20*x2306))+((x2296*x2300)));
evalcond[1]=((((-1.0)*r10*x2306))+cj0+((x2296*x2302))+(((-1.0)*r12*x2303)));
evalcond[2]=(((x2296*x2298))+(((-1.0)*sj0))+(((-1.0)*r00*x2306))+(((-1.0)*r02*x2303)));
evalcond[3]=((((-1.0)*r22*x2305))+(((-1.0)*x2300*x2303))+(((-1.0)*cj2*x2301))+((r20*x2304))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x2301))+((cj0*x2299))+(((-1.0)*x2298*x2303))+((r00*x2304))+(((-1.0)*r02*x2305)));
evalcond[5]=(((sj0*x2299))+((r10*x2304))+(((-1.0)*x2302*x2303))+(((-1.0)*sj0*sj2*x2301))+(((-1.0)*r12*x2305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2307=((1.0)*gconst80);
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2307))+(((-1.0)*gconst79*r10)))),-1);
if(!x2308.valid){
continue;
}
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2307))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2308.value)))+(x2309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2310=IKsin(j4);
IkReal x2311=IKcos(j4);
IkReal x2312=(gconst79*r01);
IkReal x2313=(cj1*cj2);
IkReal x2314=(gconst79*r21);
IkReal x2315=((1.0)*sj1);
IkReal x2316=(gconst79*r11);
IkReal x2317=((1.0)*x2311);
IkReal x2318=(gconst80*x2311);
IkReal x2319=((1.0)*x2310);
IkReal x2320=(gconst80*x2319);
evalcond[0]=((((-1.0)*r22*x2317))+((x2310*x2314))+(((-1.0)*r20*x2320)));
evalcond[1]=(cj0+(((-1.0)*r10*x2320))+(((-1.0)*r12*x2317))+((x2310*x2316)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2317))+(((-1.0)*r00*x2320))+((x2310*x2312)));
evalcond[3]=((((-1.0)*r22*x2319))+(((-1.0)*cj2*x2315))+(((-1.0)*cj1*sj2))+(((-1.0)*x2314*x2317))+((r20*x2318)));
evalcond[4]=((((-1.0)*x2312*x2317))+(((-1.0)*cj0*sj2*x2315))+((r00*x2318))+(((-1.0)*r02*x2319))+((cj0*x2313)));
evalcond[5]=(((r10*x2318))+((sj0*x2313))+(((-1.0)*r12*x2319))+(((-1.0)*sj0*sj2*x2315))+(((-1.0)*x2316*x2317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2321=((1.0)*gconst80);
CheckValue<IkReal> x2322=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2321)))),-1);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2321))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2322.value)))+(x2323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(gconst79*r01);
IkReal x2327=(cj1*cj2);
IkReal x2328=(gconst79*r21);
IkReal x2329=((1.0)*sj1);
IkReal x2330=(gconst79*r11);
IkReal x2331=((1.0)*x2325);
IkReal x2332=(gconst80*x2325);
IkReal x2333=((1.0)*x2324);
IkReal x2334=(gconst80*x2333);
evalcond[0]=((((-1.0)*r22*x2331))+((x2324*x2328))+(((-1.0)*r20*x2334)));
evalcond[1]=(cj0+(((-1.0)*r10*x2334))+((x2324*x2330))+(((-1.0)*r12*x2331)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2331))+(((-1.0)*r00*x2334))+((x2324*x2326)));
evalcond[3]=((((-1.0)*x2328*x2331))+(((-1.0)*r22*x2333))+(((-1.0)*cj2*x2329))+(((-1.0)*cj1*sj2))+((r20*x2332)));
evalcond[4]=(((cj0*x2327))+(((-1.0)*cj0*sj2*x2329))+((r00*x2332))+(((-1.0)*r02*x2333))+(((-1.0)*x2326*x2331)));
evalcond[5]=(((sj0*x2327))+(((-1.0)*sj0*sj2*x2329))+(((-1.0)*r12*x2333))+(((-1.0)*x2330*x2331))+((r10*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2335=((-1.0)*r21);
IkReal x2337 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2337)==0){
continue;
}
IkReal x2336=pow(x2337,-0.5);
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal(x2335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2338.value))));
IkReal gconst82=(x2335*x2336);
IkReal gconst83=((1.0)*r20*x2336);
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2339.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2340=((-1.0)*r21);
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal(x2340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
IkReal x2341=((1.0)*(x2343.value));
IkReal x2342=x2336;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2341)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2341)));
IkReal gconst82=(x2340*x2342);
IkReal gconst83=((1.0)*r20*x2342);
IkReal x2344=r22*r22;
IkReal x2345=((1.0)*x2344);
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(((-1.0)+x2344),-1);
if(!x2349.valid){
continue;
}
IkReal x2346=x2349.value;
if((((1.0)+(((-1.0)*x2345)))) < -0.00001)
continue;
IkReal x2347=IKsqrt(((1.0)+(((-1.0)*x2345))));
IkReal x2348=(cj0*x2346*x2347);
j4eval[0]=((IKabs(((((-1.0)*x2345*x2348))+x2348)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2350=((-1.0)*r21);
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(x2350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
IkReal x2351=((1.0)*(x2353.value));
IkReal x2352=x2336;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2351)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2351)));
IkReal gconst82=(x2350*x2352);
IkReal gconst83=((1.0)*r20*x2352);
IkReal x2354=r22*r22;
IkReal x2355=((1.0)*x2354);
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(((-1.0)+x2354),-1);
if(!x2359.valid){
continue;
}
IkReal x2356=x2359.value;
if((((1.0)+(((-1.0)*x2355)))) < -0.00001)
continue;
IkReal x2357=IKsqrt(((1.0)+(((-1.0)*x2355))));
IkReal x2358=(sj0*x2356*x2357);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2358+(((-1.0)*x2355*x2358))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2360=((-1.0)*r21);
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(x2360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
IkReal x2361=((1.0)*(x2363.value));
IkReal x2362=x2336;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2361)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2361)));
IkReal gconst82=(x2360*x2362);
IkReal gconst83=((1.0)*r20*x2362);
IkReal x2364=r22*r22;
CheckValue<IkReal> x2367=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2364))),-1);
if(!x2367.valid){
continue;
}
IkReal x2365=x2367.value;
IkReal x2366=((1.0)*x2365);
j4eval[0]=IKsign((x2364+((x2366*(r20*r20*r20*r20)))+((x2366*(r21*r21*r21*r21)))+(((2.0)*x2365*(r20*r20)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2368=(gconst82*r21);
IkReal x2369=(gconst83*r20);
IkReal x2370=((1.0)*cj1*sj2);
IkReal x2371=((1.0)*cj2*sj1);
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2371))+(((-1.0)*r22*x2370)))),IkReal(((((-1.0)*x2368*x2371))+(((-1.0)*x2368*x2370))+((cj1*sj2*x2369))+((cj2*sj1*x2369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
CheckValue<IkReal> x2373=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2368*x2368)+(x2369*x2369)+(((-2.0)*x2368*x2369)))),-1);
if(!x2373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2372.value)+(((1.5707963267949)*(x2373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2374=IKsin(j4);
IkReal x2375=IKcos(j4);
IkReal x2376=(cj1*cj2);
IkReal x2377=(gconst82*r11);
IkReal x2378=((1.0)*sj1);
IkReal x2379=((1.0)*x2375);
IkReal x2380=(gconst83*x2375);
IkReal x2381=(gconst82*x2374);
IkReal x2382=((1.0)*x2374);
evalcond[0]=((((-1.0)*gconst83*r20*x2382))+((r21*x2381))+(((-1.0)*r22*x2379)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2382))+((x2374*x2377))+(((-1.0)*r12*x2379)));
evalcond[2]=((((-1.0)*r02*x2379))+(((-1.0)*sj0))+((r01*x2381))+(((-1.0)*gconst83*r00*x2382)));
evalcond[3]=((((-1.0)*cj2*x2378))+((r20*x2380))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2382))+(((-1.0)*gconst82*r21*x2379)));
evalcond[4]=((((-1.0)*r02*x2382))+(((-1.0)*cj0*sj2*x2378))+((r00*x2380))+((cj0*x2376))+(((-1.0)*gconst82*r01*x2379)));
evalcond[5]=((((-1.0)*r12*x2382))+(((-1.0)*sj0*sj2*x2378))+(((-1.0)*x2377*x2379))+((sj0*x2376))+((r10*x2380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2383=((1.0)*gconst83);
CheckValue<IkReal> x2384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x2383)))),-1);
if(!x2384.valid){
continue;
}
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2384.value)))+(x2385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2386=IKsin(j4);
IkReal x2387=IKcos(j4);
IkReal x2388=(cj1*cj2);
IkReal x2389=(gconst82*r11);
IkReal x2390=((1.0)*sj1);
IkReal x2391=((1.0)*x2387);
IkReal x2392=(gconst83*x2387);
IkReal x2393=(gconst82*x2386);
IkReal x2394=((1.0)*x2386);
evalcond[0]=((((-1.0)*gconst83*r20*x2394))+(((-1.0)*r22*x2391))+((r21*x2393)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2394))+(((-1.0)*r12*x2391))+((x2386*x2389)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2391))+((r01*x2393))+(((-1.0)*gconst83*r00*x2394)));
evalcond[3]=(((r20*x2392))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst82*r21*x2391))+(((-1.0)*r22*x2394))+(((-1.0)*cj2*x2390)));
evalcond[4]=((((-1.0)*r02*x2394))+((r00*x2392))+(((-1.0)*gconst82*r01*x2391))+((cj0*x2388))+(((-1.0)*cj0*sj2*x2390)));
evalcond[5]=((((-1.0)*sj0*sj2*x2390))+(((-1.0)*x2389*x2391))+((r10*x2392))+((sj0*x2388))+(((-1.0)*r12*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2395=((1.0)*gconst83);
CheckValue<IkReal> x2396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2396.valid){
continue;
}
CheckValue<IkReal> x2397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2395))+(((-1.0)*gconst82*r00)))),-1);
if(!x2397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2396.value)+(((1.5707963267949)*(x2397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2398=IKsin(j4);
IkReal x2399=IKcos(j4);
IkReal x2400=(cj1*cj2);
IkReal x2401=(gconst82*r11);
IkReal x2402=((1.0)*sj1);
IkReal x2403=((1.0)*x2399);
IkReal x2404=(gconst83*x2399);
IkReal x2405=(gconst82*x2398);
IkReal x2406=((1.0)*x2398);
evalcond[0]=((((-1.0)*gconst83*r20*x2406))+((r21*x2405))+(((-1.0)*r22*x2403)));
evalcond[1]=(cj0+((x2398*x2401))+(((-1.0)*gconst83*r10*x2406))+(((-1.0)*r12*x2403)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2405))+(((-1.0)*r02*x2403))+(((-1.0)*gconst83*r00*x2406)));
evalcond[3]=((((-1.0)*cj2*x2402))+(((-1.0)*gconst82*r21*x2403))+((r20*x2404))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2406)));
evalcond[4]=((((-1.0)*cj0*sj2*x2402))+(((-1.0)*gconst82*r01*x2403))+((r00*x2404))+((cj0*x2400))+(((-1.0)*r02*x2406)));
evalcond[5]=(((r10*x2404))+(((-1.0)*x2401*x2403))+(((-1.0)*sj0*sj2*x2402))+((sj0*x2400))+(((-1.0)*r12*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2407=((-1.0)*r10);
IkReal x2409 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2409)==0){
continue;
}
IkReal x2408=pow(x2409,-0.5);
CheckValue<IkReal> x2410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2407),IKFAST_ATAN2_MAGTHRESH);
if(!x2410.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2410.value));
IkReal gconst85=(r11*x2408);
IkReal gconst86=(x2407*x2408);
CheckValue<IkReal> x2411 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2411.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2411.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2412=((-1.0)*r10);
IkReal x2413=x2408;
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2412),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
IkReal x2414=((-1.0)*(x2415.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2414;
IkReal gconst84=x2414;
IkReal gconst85=(r11*x2413);
IkReal gconst86=(x2412*x2413);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2416=((1.0)*sj0);
IkReal x2417=((1.0)*gconst85);
CheckValue<IkReal> x2418=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2417))+(((-1.0)*gconst86*r21)))),-1);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2416))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2417))+(((-1.0)*gconst85*r11*x2416))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2418.value)))+(x2419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2420=IKsin(j4);
IkReal x2421=IKcos(j4);
IkReal x2422=(gconst85*r21);
IkReal x2423=(cj1*cj2);
IkReal x2424=(gconst86*r00);
IkReal x2425=(gconst86*r10);
IkReal x2426=(gconst85*r11);
IkReal x2427=((1.0)*sj1);
IkReal x2428=(gconst85*r01);
IkReal x2429=(gconst86*r20);
IkReal x2430=((1.0)*x2421);
IkReal x2431=((1.0)*x2420);
evalcond[0]=((((-1.0)*r22*x2430))+((x2420*x2422))+(((-1.0)*x2429*x2431)));
evalcond[1]=((((-1.0)*x2425*x2431))+((x2420*x2426))+cj0+(((-1.0)*r12*x2430)));
evalcond[2]=((((-1.0)*sj0))+((x2420*x2428))+(((-1.0)*r02*x2430))+(((-1.0)*x2424*x2431)));
evalcond[3]=((((-1.0)*r22*x2431))+(((-1.0)*cj1*sj2))+(((-1.0)*x2422*x2430))+(((-1.0)*cj2*x2427))+((x2421*x2429)));
evalcond[4]=((((-1.0)*r02*x2431))+(((-1.0)*x2428*x2430))+((cj0*x2423))+((x2421*x2424))+(((-1.0)*cj0*sj2*x2427)));
evalcond[5]=((((-1.0)*x2426*x2430))+((sj0*x2423))+(((-1.0)*r12*x2431))+((x2421*x2425))+(((-1.0)*sj0*sj2*x2427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2432=((1.0)*gconst86);
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2432))+(((-1.0)*gconst85*r00)))),-1);
if(!x2433.valid){
continue;
}
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2432))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2433.value)))+(x2434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2435=IKsin(j4);
IkReal x2436=IKcos(j4);
IkReal x2437=(gconst85*r21);
IkReal x2438=(cj1*cj2);
IkReal x2439=(gconst86*r00);
IkReal x2440=(gconst86*r10);
IkReal x2441=(gconst85*r11);
IkReal x2442=((1.0)*sj1);
IkReal x2443=(gconst85*r01);
IkReal x2444=(gconst86*r20);
IkReal x2445=((1.0)*x2436);
IkReal x2446=((1.0)*x2435);
evalcond[0]=(((x2435*x2437))+(((-1.0)*x2444*x2446))+(((-1.0)*r22*x2445)));
evalcond[1]=(cj0+(((-1.0)*r12*x2445))+(((-1.0)*x2440*x2446))+((x2435*x2441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2439*x2446))+(((-1.0)*r02*x2445))+((x2435*x2443)));
evalcond[3]=((((-1.0)*x2437*x2445))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2446))+((x2436*x2444))+(((-1.0)*cj2*x2442)));
evalcond[4]=((((-1.0)*x2443*x2445))+((cj0*x2438))+((x2436*x2439))+(((-1.0)*cj0*sj2*x2442))+(((-1.0)*r02*x2446)));
evalcond[5]=((((-1.0)*x2441*x2445))+(((-1.0)*r12*x2446))+(((-1.0)*sj0*sj2*x2442))+((x2436*x2440))+((sj0*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2447=((-1.0)*r11);
IkReal x2449 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2449)==0){
continue;
}
IkReal x2448=pow(x2449,-0.5);
CheckValue<IkReal> x2450 = IKatan2WithCheck(IkReal(x2447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2450.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2450.value))));
IkReal gconst88=(x2447*x2448);
IkReal gconst89=((1.0)*r10*x2448);
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2451.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2452=((-1.0)*r11);
CheckValue<IkReal> x2455 = IKatan2WithCheck(IkReal(x2452),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2455.valid){
continue;
}
IkReal x2453=((1.0)*(x2455.value));
IkReal x2454=x2448;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2453)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2453)));
IkReal gconst88=(x2452*x2454);
IkReal gconst89=((1.0)*r10*x2454);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2456=((-1.0)*r11);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal(x2456),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
IkReal x2457=((1.0)*(x2459.value));
IkReal x2458=x2448;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2457)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2457)));
IkReal gconst88=(x2456*x2458);
IkReal gconst89=((1.0)*r10*x2458);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2460=((-1.0)*r11);
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal(x2460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
IkReal x2461=((1.0)*(x2463.value));
IkReal x2462=x2448;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2461)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2461)));
IkReal gconst88=(x2460*x2462);
IkReal gconst89=((1.0)*r10*x2462);
IkReal x2464=r12*r12;
IkReal x2465=((1.0)*sj0);
IkReal x2466=(cj0*r02);
IkReal x2467=x2448;
j4eval[0]=((IKabs(((((-1.0)*x2465*x2467))+((r12*x2466*x2467))+((sj0*x2464*x2467)))))+(IKabs(((((-1.0)*r12*x2465))+(((-1.0)*x2466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2468=((1.0)*sj0);
IkReal x2469=((1.0)*cj0);
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2468))+(((-1.0)*r02*x2469)))),IkReal(((((-1.0)*gconst88*r11*x2468))+(((-1.0)*gconst88*r01*x2469))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2470.value)+(((1.5707963267949)*(x2471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2472=IKsin(j4);
IkReal x2473=IKcos(j4);
IkReal x2474=(cj1*cj2);
IkReal x2475=((1.0)*sj0);
IkReal x2476=(gconst89*r20);
IkReal x2477=((1.0)*sj1);
IkReal x2478=(gconst89*r10);
IkReal x2479=(gconst89*r00);
IkReal x2480=((1.0)*x2473);
IkReal x2481=((1.0)*x2472);
IkReal x2482=(gconst88*x2472);
evalcond[0]=((((-1.0)*r22*x2480))+(((-1.0)*x2476*x2481))+((r21*x2482)));
evalcond[1]=(cj0+((r11*x2482))+(((-1.0)*r12*x2480))+(((-1.0)*x2478*x2481)));
evalcond[2]=(((r01*x2482))+(((-1.0)*x2475))+(((-1.0)*r02*x2480))+(((-1.0)*x2479*x2481)));
evalcond[3]=((((-1.0)*r22*x2481))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x2480))+(((-1.0)*cj2*x2477))+((x2473*x2476)));
evalcond[4]=((((-1.0)*gconst88*r01*x2480))+(((-1.0)*r02*x2481))+((cj0*x2474))+(((-1.0)*cj0*sj2*x2477))+((x2473*x2479)));
evalcond[5]=(((sj0*x2474))+(((-1.0)*gconst88*r11*x2480))+(((-1.0)*sj1*sj2*x2475))+(((-1.0)*r12*x2481))+((x2473*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2483=((1.0)*gconst89);
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2483))+(((-1.0)*gconst88*r10)))),-1);
if(!x2484.valid){
continue;
}
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst88*r21*sj0))+(((-1.0)*r20*sj0*x2483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2484.value)))+(x2485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2486=IKsin(j4);
IkReal x2487=IKcos(j4);
IkReal x2488=(cj1*cj2);
IkReal x2489=((1.0)*sj0);
IkReal x2490=(gconst89*r20);
IkReal x2491=((1.0)*sj1);
IkReal x2492=(gconst89*r10);
IkReal x2493=(gconst89*r00);
IkReal x2494=((1.0)*x2487);
IkReal x2495=((1.0)*x2486);
IkReal x2496=(gconst88*x2486);
evalcond[0]=((((-1.0)*x2490*x2495))+((r21*x2496))+(((-1.0)*r22*x2494)));
evalcond[1]=(cj0+((r11*x2496))+(((-1.0)*r12*x2494))+(((-1.0)*x2492*x2495)));
evalcond[2]=((((-1.0)*x2493*x2495))+(((-1.0)*x2489))+(((-1.0)*r02*x2494))+((r01*x2496)));
evalcond[3]=(((x2487*x2490))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2491))+(((-1.0)*gconst88*r21*x2494))+(((-1.0)*r22*x2495)));
evalcond[4]=((((-1.0)*gconst88*r01*x2494))+((x2487*x2493))+(((-1.0)*cj0*sj2*x2491))+(((-1.0)*r02*x2495))+((cj0*x2488)));
evalcond[5]=(((sj0*x2488))+(((-1.0)*sj1*sj2*x2489))+((x2487*x2492))+(((-1.0)*gconst88*r11*x2494))+(((-1.0)*r12*x2495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2497=((1.0)*gconst89);
CheckValue<IkReal> x2498 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2497))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2498.valid){
continue;
}
CheckValue<IkReal> x2499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2497))+(((-1.0)*gconst88*r00)))),-1);
if(!x2499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2498.value)+(((1.5707963267949)*(x2499.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2500=IKsin(j4);
IkReal x2501=IKcos(j4);
IkReal x2502=(cj1*cj2);
IkReal x2503=((1.0)*sj0);
IkReal x2504=(gconst89*r20);
IkReal x2505=((1.0)*sj1);
IkReal x2506=(gconst89*r10);
IkReal x2507=(gconst89*r00);
IkReal x2508=((1.0)*x2501);
IkReal x2509=((1.0)*x2500);
IkReal x2510=(gconst88*x2500);
evalcond[0]=((((-1.0)*x2504*x2509))+(((-1.0)*r22*x2508))+((r21*x2510)));
evalcond[1]=(((r11*x2510))+cj0+(((-1.0)*r12*x2508))+(((-1.0)*x2506*x2509)));
evalcond[2]=((((-1.0)*x2503))+(((-1.0)*r02*x2508))+(((-1.0)*x2507*x2509))+((r01*x2510)));
evalcond[3]=((((-1.0)*cj2*x2505))+((x2501*x2504))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2509))+(((-1.0)*gconst88*r21*x2508)));
evalcond[4]=((((-1.0)*cj0*sj2*x2505))+(((-1.0)*r02*x2509))+((cj0*x2502))+((x2501*x2507))+(((-1.0)*gconst88*r01*x2508)));
evalcond[5]=((((-1.0)*gconst88*r11*x2508))+((x2501*x2506))+(((-1.0)*r12*x2509))+(((-1.0)*sj1*sj2*x2503))+((sj0*x2502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2511=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2511;
j4eval[1]=IKsign(x2511);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2512=((1.0)*cj5);
IkReal x2513=((((-1.0)*r01*x2512))+(((-1.0)*r00*sj5)));
j4eval[0]=x2513;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2512)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2514=cj5*cj5;
IkReal x2515=r11*r11;
IkReal x2516=(r11*sj5);
IkReal x2517=(cj5*r10);
IkReal x2518=((r12*r12)+x2515+(((-2.0)*x2516*x2517))+(((-1.0)*x2514*x2515))+((x2514*(r10*r10))));
j4eval[0]=x2518;
j4eval[1]=IKsign(x2518);
j4eval[2]=((IKabs((x2517+(((-1.0)*x2516)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2519=cj5*cj5;
IkReal x2520=r11*r11;
IkReal x2521=(cj5*r10);
IkReal x2522=(r11*sj5);
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal((x2521+(((-1.0)*x2522)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
CheckValue<IkReal> x2524=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2520+((x2519*(r10*r10)))+(((-2.0)*x2521*x2522))+(((-1.0)*x2519*x2520)))),-1);
if(!x2524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2523.value)+(((1.5707963267949)*(x2524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2525=IKsin(j4);
IkReal x2526=IKcos(j4);
IkReal x2527=(cj5*r10);
IkReal x2528=(r01*sj5);
IkReal x2529=((1.0)*sj1);
IkReal x2530=(cj5*r00);
IkReal x2531=(cj5*r20);
IkReal x2532=((1.0)*x2526);
IkReal x2533=((1.0)*x2525);
IkReal x2534=(sj5*x2525);
evalcond[0]=(((r21*x2534))+(((-1.0)*x2531*x2533))+(((-1.0)*r22*x2532)));
evalcond[1]=((((-1.0)*r02*x2532))+(((-1.0)*x2530*x2533))+((x2525*x2528)));
evalcond[2]=((((-1.0)*r11*sj5*x2532))+((x2526*x2527))+(((-1.0)*r12*x2533)));
evalcond[3]=((1.0)+(((-1.0)*x2527*x2533))+(((-1.0)*r12*x2532))+((r11*x2534)));
evalcond[4]=((((-1.0)*x2528*x2532))+((x2526*x2530))+(((-1.0)*r02*x2533))+((cj1*cj2))+(((-1.0)*sj2*x2529)));
evalcond[5]=(((x2526*x2531))+(((-1.0)*r21*sj5*x2532))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2529))+(((-1.0)*r22*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2535=((1.0)*cj5);
CheckValue<IkReal> x2536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2535))+(((-1.0)*r00*sj5)))),-1);
if(!x2536.valid){
continue;
}
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2535))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2536.value)))+(x2537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2538=IKsin(j4);
IkReal x2539=IKcos(j4);
IkReal x2540=(cj5*r10);
IkReal x2541=(r01*sj5);
IkReal x2542=((1.0)*sj1);
IkReal x2543=(cj5*r00);
IkReal x2544=(cj5*r20);
IkReal x2545=((1.0)*x2539);
IkReal x2546=((1.0)*x2538);
IkReal x2547=(sj5*x2538);
evalcond[0]=(((r21*x2547))+(((-1.0)*x2544*x2546))+(((-1.0)*r22*x2545)));
evalcond[1]=((((-1.0)*x2543*x2546))+((x2538*x2541))+(((-1.0)*r02*x2545)));
evalcond[2]=((((-1.0)*r12*x2546))+((x2539*x2540))+(((-1.0)*r11*sj5*x2545)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2545))+((r11*x2547))+(((-1.0)*x2540*x2546)));
evalcond[4]=((((-1.0)*x2541*x2545))+((x2539*x2543))+(((-1.0)*sj2*x2542))+((cj1*cj2))+(((-1.0)*r02*x2546)));
evalcond[5]=(((x2539*x2544))+(((-1.0)*cj2*x2542))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2545))+(((-1.0)*r22*x2546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2548.value)))+(x2549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2550=IKsin(j4);
IkReal x2551=IKcos(j4);
IkReal x2552=(cj5*r10);
IkReal x2553=(r01*sj5);
IkReal x2554=((1.0)*sj1);
IkReal x2555=(cj5*r00);
IkReal x2556=(cj5*r20);
IkReal x2557=((1.0)*x2551);
IkReal x2558=((1.0)*x2550);
IkReal x2559=(sj5*x2550);
evalcond[0]=((((-1.0)*x2556*x2558))+((r21*x2559))+(((-1.0)*r22*x2557)));
evalcond[1]=(((x2550*x2553))+(((-1.0)*x2555*x2558))+(((-1.0)*r02*x2557)));
evalcond[2]=((((-1.0)*r12*x2558))+((x2551*x2552))+(((-1.0)*r11*sj5*x2557)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2557))+((r11*x2559))+(((-1.0)*x2552*x2558)));
evalcond[4]=(((x2551*x2555))+(((-1.0)*r02*x2558))+((cj1*cj2))+(((-1.0)*x2553*x2557))+(((-1.0)*sj2*x2554)));
evalcond[5]=(((x2551*x2556))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2554))+(((-1.0)*r21*sj5*x2557))+(((-1.0)*r22*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2560=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2560;
j4eval[1]=IKsign(x2560);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2561=((1.0)*cj5);
IkReal x2562=((((-1.0)*r21*x2561))+(((-1.0)*r20*sj5)));
j4eval[0]=x2562;
j4eval[1]=((IKabs(((((-1.0)*r00*x2561))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2563=cj5*cj5;
IkReal x2564=r11*r11;
IkReal x2565=(cj5*r10);
IkReal x2566=(r11*sj5);
IkReal x2567=((((-1.0)*x2564))+(((-1.0)*x2563*(r10*r10)))+((x2563*x2564))+(((-1.0)*(r12*r12)))+(((2.0)*x2565*x2566)));
j4eval[0]=x2567;
j4eval[1]=((IKabs(r12))+(IKabs((x2565+(((-1.0)*x2566))))));
j4eval[2]=IKsign(x2567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2568=cj5*cj5;
IkReal x2569=r11*r11;
IkReal x2570=(cj5*r10);
IkReal x2571=(r11*sj5);
CheckValue<IkReal> x2572=IKPowWithIntegerCheck(IKsign(((((2.0)*x2570*x2571))+(((-1.0)*x2569))+(((-1.0)*(r12*r12)))+((x2568*x2569))+(((-1.0)*x2568*(r10*r10))))),-1);
if(!x2572.valid){
continue;
}
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal((x2570+(((-1.0)*x2571)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2572.value)))+(x2573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2574=IKsin(j4);
IkReal x2575=IKcos(j4);
IkReal x2576=(cj5*r10);
IkReal x2577=(r01*sj5);
IkReal x2578=((1.0)*cj2);
IkReal x2579=(cj5*r00);
IkReal x2580=(cj5*r20);
IkReal x2581=((1.0)*x2575);
IkReal x2582=((1.0)*x2574);
IkReal x2583=(sj5*x2574);
evalcond[0]=((((-1.0)*x2580*x2582))+((r21*x2583))+(((-1.0)*r22*x2581)));
evalcond[1]=(((x2574*x2577))+(((-1.0)*r02*x2581))+(((-1.0)*x2579*x2582)));
evalcond[2]=(((x2575*x2576))+(((-1.0)*r11*sj5*x2581))+(((-1.0)*r12*x2582)));
evalcond[3]=((-1.0)+((r11*x2583))+(((-1.0)*x2576*x2582))+(((-1.0)*r12*x2581)));
evalcond[4]=(((x2575*x2579))+(((-1.0)*r02*x2582))+((sj1*sj2))+(((-1.0)*cj1*x2578))+(((-1.0)*x2577*x2581)));
evalcond[5]=((((-1.0)*r21*sj5*x2581))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2578))+((x2575*x2580))+(((-1.0)*r22*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2584=((1.0)*cj5);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2584))+(((-1.0)*r20*sj5)))),-1);
if(!x2585.valid){
continue;
}
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2584))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2585.value)))+(x2586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2587=IKsin(j4);
IkReal x2588=IKcos(j4);
IkReal x2589=(cj5*r10);
IkReal x2590=(r01*sj5);
IkReal x2591=((1.0)*cj2);
IkReal x2592=(cj5*r00);
IkReal x2593=(cj5*r20);
IkReal x2594=((1.0)*x2588);
IkReal x2595=((1.0)*x2587);
IkReal x2596=(sj5*x2587);
evalcond[0]=((((-1.0)*r22*x2594))+(((-1.0)*x2593*x2595))+((r21*x2596)));
evalcond[1]=((((-1.0)*r02*x2594))+(((-1.0)*x2592*x2595))+((x2587*x2590)));
evalcond[2]=((((-1.0)*r11*sj5*x2594))+(((-1.0)*r12*x2595))+((x2588*x2589)));
evalcond[3]=((-1.0)+(((-1.0)*x2589*x2595))+((r11*x2596))+(((-1.0)*r12*x2594)));
evalcond[4]=((((-1.0)*cj1*x2591))+(((-1.0)*x2590*x2594))+(((-1.0)*r02*x2595))+((sj1*sj2))+((x2588*x2592)));
evalcond[5]=((((-1.0)*r22*x2595))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2594))+(((-1.0)*sj1*x2591))+((x2588*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
CheckValue<IkReal> x2598=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2597.value)+(((1.5707963267949)*(x2598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2599=IKsin(j4);
IkReal x2600=IKcos(j4);
IkReal x2601=(cj5*r10);
IkReal x2602=(r01*sj5);
IkReal x2603=((1.0)*cj2);
IkReal x2604=(cj5*r00);
IkReal x2605=(cj5*r20);
IkReal x2606=((1.0)*x2600);
IkReal x2607=((1.0)*x2599);
IkReal x2608=(sj5*x2599);
evalcond[0]=((((-1.0)*r22*x2606))+((r21*x2608))+(((-1.0)*x2605*x2607)));
evalcond[1]=((((-1.0)*r02*x2606))+((x2599*x2602))+(((-1.0)*x2604*x2607)));
evalcond[2]=(((x2600*x2601))+(((-1.0)*r12*x2607))+(((-1.0)*r11*sj5*x2606)));
evalcond[3]=((-1.0)+(((-1.0)*x2601*x2607))+(((-1.0)*r12*x2606))+((r11*x2608)));
evalcond[4]=(((sj1*sj2))+((x2600*x2604))+(((-1.0)*r02*x2607))+(((-1.0)*cj1*x2603))+(((-1.0)*x2602*x2606)));
evalcond[5]=((((-1.0)*sj1*x2603))+(((-1.0)*cj1*sj2))+((x2600*x2605))+(((-1.0)*r21*sj5*x2606))+(((-1.0)*r22*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2609=((-1.0)*r00);
IkReal x2611 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2611)==0){
continue;
}
IkReal x2610=pow(x2611,-0.5);
CheckValue<IkReal> x2612 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2609),IKFAST_ATAN2_MAGTHRESH);
if(!x2612.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2612.value));
IkReal gconst91=(r01*x2610);
IkReal gconst92=(x2609*x2610);
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2613.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2614=((-1.0)*r00);
IkReal x2615=x2610;
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2614),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
IkReal x2616=((-1.0)*(x2617.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2616;
IkReal gconst90=x2616;
IkReal gconst91=(r01*x2615);
IkReal gconst92=(x2614*x2615);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2618=((1.0)*sj0);
IkReal x2619=((1.0)*cj0);
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2618))+(((-1.0)*r02*x2619)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2618))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2620.value)+(((1.5707963267949)*(x2621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2622=IKsin(j4);
IkReal x2623=IKcos(j4);
IkReal x2624=(cj1*cj2);
IkReal x2625=(gconst92*r00);
IkReal x2626=((1.0)*sj1);
IkReal x2627=(gconst92*r20);
IkReal x2628=(gconst92*r10);
IkReal x2629=((1.0)*x2623);
IkReal x2630=(gconst91*x2622);
IkReal x2631=((1.0)*x2622);
evalcond[0]=(((r21*x2630))+(((-1.0)*r22*x2629))+(((-1.0)*x2627*x2631)));
evalcond[1]=(cj0+(((-1.0)*x2628*x2631))+((r11*x2630))+(((-1.0)*r12*x2629)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2630))+(((-1.0)*r02*x2629))+(((-1.0)*x2625*x2631)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x2623*x2627))+(((-1.0)*cj2*x2626))+(((-1.0)*gconst91*r21*x2629))+(((-1.0)*r22*x2631)));
evalcond[4]=((((-1.0)*r02*x2631))+(((-1.0)*cj0*sj2*x2626))+((x2623*x2625))+(((-1.0)*gconst91*r01*x2629))+((cj0*x2624)));
evalcond[5]=((((-1.0)*gconst91*r11*x2629))+((x2623*x2628))+(((-1.0)*r12*x2631))+((sj0*x2624))+(((-1.0)*sj0*sj2*x2626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2632=((1.0)*gconst92);
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2632)))),-1);
if(!x2633.valid){
continue;
}
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2633.value)))+(x2634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2635=IKsin(j4);
IkReal x2636=IKcos(j4);
IkReal x2637=(cj1*cj2);
IkReal x2638=(gconst92*r00);
IkReal x2639=((1.0)*sj1);
IkReal x2640=(gconst92*r20);
IkReal x2641=(gconst92*r10);
IkReal x2642=((1.0)*x2636);
IkReal x2643=(gconst91*x2635);
IkReal x2644=((1.0)*x2635);
evalcond[0]=((((-1.0)*r22*x2642))+((r21*x2643))+(((-1.0)*x2640*x2644)));
evalcond[1]=(((r11*x2643))+(((-1.0)*r12*x2642))+cj0+(((-1.0)*x2641*x2644)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2642))+((r01*x2643))+(((-1.0)*x2638*x2644)));
evalcond[3]=((((-1.0)*r22*x2644))+(((-1.0)*cj2*x2639))+(((-1.0)*gconst91*r21*x2642))+(((-1.0)*cj1*sj2))+((x2636*x2640)));
evalcond[4]=((((-1.0)*gconst91*r01*x2642))+(((-1.0)*r02*x2644))+((cj0*x2637))+(((-1.0)*cj0*sj2*x2639))+((x2636*x2638)));
evalcond[5]=((((-1.0)*r12*x2644))+(((-1.0)*sj0*sj2*x2639))+((sj0*x2637))+(((-1.0)*gconst91*r11*x2642))+((x2636*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2645=((-1.0)*r01);
IkReal x2647 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2647)==0){
continue;
}
IkReal x2646=pow(x2647,-0.5);
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(x2645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2648.value))));
IkReal gconst94=(x2645*x2646);
IkReal gconst95=((1.0)*r00*x2646);
CheckValue<IkReal> x2649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2649.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2650=((-1.0)*r01);
CheckValue<IkReal> x2653 = IKatan2WithCheck(IkReal(x2650),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2653.valid){
continue;
}
IkReal x2651=((1.0)*(x2653.value));
IkReal x2652=x2646;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2651)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2651)));
IkReal gconst94=(x2650*x2652);
IkReal gconst95=((1.0)*r00*x2652);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2654=((-1.0)*r01);
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(x2654),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
IkReal x2655=((1.0)*(x2657.value));
IkReal x2656=x2646;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2655)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2655)));
IkReal gconst94=(x2654*x2656);
IkReal gconst95=((1.0)*r00*x2656);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2658=((-1.0)*r01);
CheckValue<IkReal> x2661 = IKatan2WithCheck(IkReal(x2658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2661.valid){
continue;
}
IkReal x2659=((1.0)*(x2661.value));
IkReal x2660=x2646;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2659)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2659)));
IkReal gconst94=(x2658*x2660);
IkReal gconst95=((1.0)*r00*x2660);
IkReal x2662=r02*r02;
IkReal x2663=(r12*sj0);
IkReal x2664=((1.0)*cj0);
IkReal x2665=x2646;
j4eval[0]=((IKabs(((((-1.0)*x2663))+(((-1.0)*r02*x2664)))))+(IKabs((((cj0*x2662*x2665))+(((-1.0)*x2664*x2665))+((r02*x2663*x2665))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2666=((1.0)*sj0);
IkReal x2667=((1.0)*cj0);
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2666))+(((-1.0)*r02*x2667)))),IkReal(((((-1.0)*gconst94*r01*x2667))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2666))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2668.value)+(((1.5707963267949)*(x2669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2670=IKsin(j4);
IkReal x2671=IKcos(j4);
IkReal x2672=(cj1*cj2);
IkReal x2673=(gconst94*r11);
IkReal x2674=(gconst94*r21);
IkReal x2675=((1.0)*sj1);
IkReal x2676=(gconst94*r01);
IkReal x2677=((1.0)*x2671);
IkReal x2678=(gconst95*x2671);
IkReal x2679=((1.0)*x2670);
IkReal x2680=(gconst95*x2679);
evalcond[0]=(((x2670*x2674))+(((-1.0)*r20*x2680))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r12*x2677))+cj0+((x2670*x2673))+(((-1.0)*r10*x2680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2680))+(((-1.0)*r02*x2677))+((x2670*x2676)));
evalcond[3]=((((-1.0)*cj2*x2675))+(((-1.0)*cj1*sj2))+(((-1.0)*x2674*x2677))+((r20*x2678))+(((-1.0)*r22*x2679)));
evalcond[4]=((((-1.0)*r02*x2679))+((cj0*x2672))+(((-1.0)*x2676*x2677))+((r00*x2678))+(((-1.0)*cj0*sj2*x2675)));
evalcond[5]=((((-1.0)*r12*x2679))+((sj0*x2672))+(((-1.0)*x2673*x2677))+((r10*x2678))+(((-1.0)*sj0*sj2*x2675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2681=((1.0)*gconst95);
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2681)))),-1);
if(!x2683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2682.value)+(((1.5707963267949)*(x2683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2684=IKsin(j4);
IkReal x2685=IKcos(j4);
IkReal x2686=(cj1*cj2);
IkReal x2687=(gconst94*r11);
IkReal x2688=(gconst94*r21);
IkReal x2689=((1.0)*sj1);
IkReal x2690=(gconst94*r01);
IkReal x2691=((1.0)*x2685);
IkReal x2692=(gconst95*x2685);
IkReal x2693=((1.0)*x2684);
IkReal x2694=(gconst95*x2693);
evalcond[0]=(((x2684*x2688))+(((-1.0)*r22*x2691))+(((-1.0)*r20*x2694)));
evalcond[1]=((((-1.0)*r10*x2694))+cj0+((x2684*x2687))+(((-1.0)*r12*x2691)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2691))+((x2684*x2690))+(((-1.0)*r00*x2694)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x2688*x2691))+(((-1.0)*cj2*x2689))+(((-1.0)*r22*x2693))+((r20*x2692)));
evalcond[4]=(((cj0*x2686))+(((-1.0)*r02*x2693))+(((-1.0)*cj0*sj2*x2689))+((r00*x2692))+(((-1.0)*x2690*x2691)));
evalcond[5]=(((r10*x2692))+((sj0*x2686))+(((-1.0)*x2687*x2691))+(((-1.0)*r12*x2693))+(((-1.0)*sj0*sj2*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2695=((1.0)*gconst95);
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2695))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2695)))),-1);
if(!x2697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2696.value)+(((1.5707963267949)*(x2697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2698=IKsin(j4);
IkReal x2699=IKcos(j4);
IkReal x2700=(cj1*cj2);
IkReal x2701=(gconst94*r11);
IkReal x2702=(gconst94*r21);
IkReal x2703=((1.0)*sj1);
IkReal x2704=(gconst94*r01);
IkReal x2705=((1.0)*x2699);
IkReal x2706=(gconst95*x2699);
IkReal x2707=((1.0)*x2698);
IkReal x2708=(gconst95*x2707);
evalcond[0]=((((-1.0)*r22*x2705))+((x2698*x2702))+(((-1.0)*r20*x2708)));
evalcond[1]=((((-1.0)*r10*x2708))+cj0+((x2698*x2701))+(((-1.0)*r12*x2705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2708))+((x2698*x2704))+(((-1.0)*r02*x2705)));
evalcond[3]=((((-1.0)*x2702*x2705))+(((-1.0)*r22*x2707))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2703))+((r20*x2706)));
evalcond[4]=(((r00*x2706))+(((-1.0)*r02*x2707))+((cj0*x2700))+(((-1.0)*x2704*x2705))+(((-1.0)*cj0*sj2*x2703)));
evalcond[5]=(((sj0*x2700))+(((-1.0)*r12*x2707))+(((-1.0)*sj0*sj2*x2703))+((r10*x2706))+(((-1.0)*x2701*x2705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2709=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2709;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2710=((1.0)*cj5);
IkReal x2711=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2710)));
j4eval[0]=x2711;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2710))+((r21*sj5))))));
j4eval[2]=IKsign(x2711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2712=cj5*cj5;
IkReal x2713=r01*r01;
IkReal x2714=(r01*sj5);
IkReal x2715=(cj5*r00);
IkReal x2716=((((-1.0)*x2712*(r00*r00)))+(((-1.0)*x2713))+((x2712*x2713))+(((-1.0)*(r02*r02)))+(((2.0)*x2714*x2715)));
j4eval[0]=x2716;
j4eval[1]=IKsign(x2716);
j4eval[2]=((IKabs(r02))+(IKabs((x2715+(((-1.0)*x2714))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2717=cj5*cj5;
IkReal x2718=r01*r01;
IkReal x2719=(r01*sj5);
IkReal x2720=(cj5*r00);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal((x2720+(((-1.0)*x2719)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2718))+(((-1.0)*(r02*r02)))+(((2.0)*x2719*x2720))+((x2717*x2718))+(((-1.0)*x2717*(r00*r00))))),-1);
if(!x2722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2721.value)+(((1.5707963267949)*(x2722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2723=IKsin(j4);
IkReal x2724=IKcos(j4);
IkReal x2725=(cj5*r10);
IkReal x2726=(r01*sj5);
IkReal x2727=((1.0)*sj1);
IkReal x2728=(cj5*r00);
IkReal x2729=(cj5*r20);
IkReal x2730=((1.0)*x2724);
IkReal x2731=((1.0)*x2723);
IkReal x2732=(sj5*x2723);
evalcond[0]=(((r21*x2732))+(((-1.0)*r22*x2730))+(((-1.0)*x2729*x2731)));
evalcond[1]=((((-1.0)*x2725*x2731))+(((-1.0)*r12*x2730))+((r11*x2732)));
evalcond[2]=((((-1.0)*x2726*x2730))+((x2724*x2728))+(((-1.0)*r02*x2731)));
evalcond[3]=((-1.0)+(((-1.0)*x2728*x2731))+(((-1.0)*r02*x2730))+((x2723*x2726)));
evalcond[4]=(((x2724*x2725))+(((-1.0)*r12*x2731))+((cj1*cj2))+(((-1.0)*r11*sj5*x2730))+(((-1.0)*sj2*x2727)));
evalcond[5]=((((-1.0)*cj2*x2727))+((x2724*x2729))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2731))+(((-1.0)*r21*sj5*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2733=((1.0)*cj5);
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2733)))),-1);
if(!x2734.valid){
continue;
}
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2734.value)))+(x2735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2736=IKsin(j4);
IkReal x2737=IKcos(j4);
IkReal x2738=(cj5*r10);
IkReal x2739=(r01*sj5);
IkReal x2740=((1.0)*sj1);
IkReal x2741=(cj5*r00);
IkReal x2742=(cj5*r20);
IkReal x2743=((1.0)*x2737);
IkReal x2744=((1.0)*x2736);
IkReal x2745=(sj5*x2736);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2742*x2744))+(((-1.0)*r22*x2743)));
evalcond[1]=(((r11*x2745))+(((-1.0)*x2738*x2744))+(((-1.0)*r12*x2743)));
evalcond[2]=((((-1.0)*x2739*x2743))+((x2737*x2741))+(((-1.0)*r02*x2744)));
evalcond[3]=((-1.0)+(((-1.0)*x2741*x2744))+((x2736*x2739))+(((-1.0)*r02*x2743)));
evalcond[4]=((((-1.0)*r11*sj5*x2743))+(((-1.0)*sj2*x2740))+((x2737*x2738))+(((-1.0)*r12*x2744))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2740))+((x2737*x2742))+(((-1.0)*r21*sj5*x2743))+(((-1.0)*r22*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2746.value)))+(x2747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2748=IKsin(j4);
IkReal x2749=IKcos(j4);
IkReal x2750=(cj5*r10);
IkReal x2751=(r01*sj5);
IkReal x2752=((1.0)*sj1);
IkReal x2753=(cj5*r00);
IkReal x2754=(cj5*r20);
IkReal x2755=((1.0)*x2749);
IkReal x2756=((1.0)*x2748);
IkReal x2757=(sj5*x2748);
evalcond[0]=((((-1.0)*r22*x2755))+((r21*x2757))+(((-1.0)*x2754*x2756)));
evalcond[1]=(((r11*x2757))+(((-1.0)*x2750*x2756))+(((-1.0)*r12*x2755)));
evalcond[2]=(((x2749*x2753))+(((-1.0)*x2751*x2755))+(((-1.0)*r02*x2756)));
evalcond[3]=((-1.0)+(((-1.0)*x2753*x2756))+((x2748*x2751))+(((-1.0)*r02*x2755)));
evalcond[4]=(((x2749*x2750))+(((-1.0)*sj2*x2752))+(((-1.0)*r12*x2756))+((cj1*cj2))+(((-1.0)*r11*sj5*x2755)));
evalcond[5]=(((x2749*x2754))+(((-1.0)*r21*sj5*x2755))+(((-1.0)*r22*x2756))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2758=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2758;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2759=((1.0)*cj5);
IkReal x2760=((((-1.0)*r21*x2759))+(((-1.0)*r20*sj5)));
j4eval[0]=x2760;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2759))))));
j4eval[2]=IKsign(x2760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2761=cj5*cj5;
IkReal x2762=r01*r01;
IkReal x2763=(cj5*r00);
IkReal x2764=(r01*sj5);
IkReal x2765=(x2762+((x2761*(r00*r00)))+(((-1.0)*x2761*x2762))+(r02*r02)+(((-2.0)*x2763*x2764)));
j4eval[0]=x2765;
j4eval[1]=((IKabs(r02))+(IKabs((x2763+(((-1.0)*x2764))))));
j4eval[2]=IKsign(x2765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2766=cj5*cj5;
IkReal x2767=r01*r01;
IkReal x2768=(r01*sj5);
IkReal x2769=(cj5*r00);
CheckValue<IkReal> x2770=IKPowWithIntegerCheck(IKsign((x2767+((x2766*(r00*r00)))+(((-2.0)*x2768*x2769))+(((-1.0)*x2766*x2767))+(r02*r02))),-1);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771 = IKatan2WithCheck(IkReal((x2769+(((-1.0)*x2768)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2770.value)))+(x2771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=(cj5*r10);
IkReal x2775=(r01*sj5);
IkReal x2776=((1.0)*cj2);
IkReal x2777=(cj5*r00);
IkReal x2778=(cj5*r20);
IkReal x2779=((1.0)*x2773);
IkReal x2780=((1.0)*x2772);
IkReal x2781=(sj5*x2772);
evalcond[0]=(((r21*x2781))+(((-1.0)*x2778*x2780))+(((-1.0)*r22*x2779)));
evalcond[1]=((((-1.0)*x2774*x2780))+(((-1.0)*r12*x2779))+((r11*x2781)));
evalcond[2]=((((-1.0)*x2775*x2779))+((x2773*x2777))+(((-1.0)*r02*x2780)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2779))+(((-1.0)*x2777*x2780))+((x2772*x2775)));
evalcond[4]=((((-1.0)*r12*x2780))+(((-1.0)*r11*sj5*x2779))+((sj1*sj2))+(((-1.0)*cj1*x2776))+((x2773*x2774)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2780))+(((-1.0)*r21*sj5*x2779))+(((-1.0)*sj1*x2776))+((x2773*x2778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2782=((1.0)*cj5);
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2782))+(((-1.0)*r20*sj5)))),-1);
if(!x2784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2785=IKsin(j4);
IkReal x2786=IKcos(j4);
IkReal x2787=(cj5*r10);
IkReal x2788=(r01*sj5);
IkReal x2789=((1.0)*cj2);
IkReal x2790=(cj5*r00);
IkReal x2791=(cj5*r20);
IkReal x2792=((1.0)*x2786);
IkReal x2793=((1.0)*x2785);
IkReal x2794=(sj5*x2785);
evalcond[0]=(((r21*x2794))+(((-1.0)*x2791*x2793))+(((-1.0)*r22*x2792)));
evalcond[1]=((((-1.0)*x2787*x2793))+((r11*x2794))+(((-1.0)*r12*x2792)));
evalcond[2]=(((x2786*x2790))+(((-1.0)*x2788*x2792))+(((-1.0)*r02*x2793)));
evalcond[3]=((1.0)+(((-1.0)*x2790*x2793))+((x2785*x2788))+(((-1.0)*r02*x2792)));
evalcond[4]=((((-1.0)*cj1*x2789))+((sj1*sj2))+(((-1.0)*r11*sj5*x2792))+(((-1.0)*r12*x2793))+((x2786*x2787)));
evalcond[5]=(((x2786*x2791))+(((-1.0)*sj1*x2789))+(((-1.0)*r21*sj5*x2792))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2795 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2795.value)+(((1.5707963267949)*(x2796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=(cj5*r10);
IkReal x2800=(r01*sj5);
IkReal x2801=((1.0)*cj2);
IkReal x2802=(cj5*r00);
IkReal x2803=(cj5*r20);
IkReal x2804=((1.0)*x2798);
IkReal x2805=((1.0)*x2797);
IkReal x2806=(sj5*x2797);
evalcond[0]=((((-1.0)*x2803*x2805))+(((-1.0)*r22*x2804))+((r21*x2806)));
evalcond[1]=((((-1.0)*r12*x2804))+(((-1.0)*x2799*x2805))+((r11*x2806)));
evalcond[2]=((((-1.0)*x2800*x2804))+((x2798*x2802))+(((-1.0)*r02*x2805)));
evalcond[3]=((1.0)+((x2797*x2800))+(((-1.0)*x2802*x2805))+(((-1.0)*r02*x2804)));
evalcond[4]=((((-1.0)*cj1*x2801))+((sj1*sj2))+(((-1.0)*r12*x2805))+(((-1.0)*r11*sj5*x2804))+((x2798*x2799)));
evalcond[5]=((((-1.0)*sj1*x2801))+(((-1.0)*r21*sj5*x2804))+((x2798*x2803))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2807=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2807);
rxp1_1=(px*r21);
rxp1_2=(r11*x2807);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2808=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2808);
rxp1_1=(px*r21);
rxp1_2=(r11*x2808);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2809=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2809);
rxp1_1=(px*r21);
rxp1_2=(r11*x2809);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2812=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2812.valid){
continue;
}
IkReal x2810=x2812.value;
IkReal x2811=(sj0*x2810);
cj4array[0]=(((sj1*sj2*x2811))+(((-1.0)*cj1*cj2*x2811)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2813=IKsin(j4);
IkReal x2814=IKcos(j4);
IkReal x2815=(r21*sj5);
IkReal x2816=(cj5*r20);
IkReal x2817=((1.0)*x2813);
IkReal x2818=((1.0)*x2814);
evalcond[0]=((-1.0)*r02*x2813);
evalcond[1]=((((-1.0)*r02*x2818))+(((-1.0)*sj0)));
evalcond[2]=(((x2813*x2815))+(((-1.0)*x2816*x2817)));
evalcond[3]=(((r11*sj5*x2813))+(((-1.0)*cj5*r10*x2817)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2815*x2818))+((x2814*x2816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2820=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2820.valid){
continue;
}
IkReal x2819=x2820.value;
cj4array[0]=(((cj1*sj2*x2819))+((cj2*sj1*x2819)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2821=IKsin(j4);
IkReal x2822=IKcos(j4);
IkReal x2823=(r11*sj5);
IkReal x2824=((1.0)*sj0);
IkReal x2825=((1.0)*x2822);
IkReal x2826=((1.0)*cj5*x2821);
evalcond[0]=((-1.0)*r02*x2821);
evalcond[1]=((((-1.0)*r02*x2825))+(((-1.0)*x2824)));
evalcond[2]=(((r21*sj5*x2821))+(((-1.0)*r20*x2826)));
evalcond[3]=(((x2821*x2823))+(((-1.0)*r10*x2826)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r10*x2822))+(((-1.0)*x2823*x2825))+(((-1.0)*sj1*sj2*x2824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(r02,-1);
if(!x2827.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2827.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2828=IKsin(j4);
IkReal x2829=IKcos(j4);
IkReal x2830=((1.0)*sj1);
IkReal x2831=(cj5*x2829);
IkReal x2832=(sj5*x2828);
IkReal x2833=((1.0)*sj5*x2829);
IkReal x2834=((1.0)*cj5*x2828);
evalcond[0]=((-1.0)*r02*x2828);
evalcond[1]=((((-1.0)*r20*x2834))+((r21*x2832)));
evalcond[2]=((((-1.0)*r10*x2834))+((r11*x2832)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x2831))+(((-1.0)*r21*x2833))+(((-1.0)*cj2*x2830)));
evalcond[4]=(((r10*x2831))+((cj1*cj2*sj0))+(((-1.0)*r11*x2833))+(((-1.0)*sj0*sj2*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2835=((1.0)*sj0);
IkReal x2836=((1.0)*cj0);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2835))+(((-1.0)*r02*x2836)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2835))+(((-1.0)*r01*sj5*x2836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2837.value)))+(x2838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=(cj1*cj2);
IkReal x2842=(cj5*r10);
IkReal x2843=(r01*sj5);
IkReal x2844=(cj5*r00);
IkReal x2845=((1.0)*sj1);
IkReal x2846=(cj5*r20);
IkReal x2847=((1.0)*x2840);
IkReal x2848=((1.0)*x2839);
IkReal x2849=(sj5*x2839);
evalcond[0]=((((-1.0)*x2846*x2848))+((r21*x2849))+(((-1.0)*r22*x2847)));
evalcond[1]=((((-1.0)*x2842*x2848))+((r11*x2849))+cj0+(((-1.0)*r12*x2847)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2847))+(((-1.0)*x2844*x2848))+((x2839*x2843)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x2840*x2846))+(((-1.0)*r22*x2848))+(((-1.0)*r21*sj5*x2847))+(((-1.0)*cj2*x2845)));
evalcond[4]=((((-1.0)*x2843*x2847))+((x2840*x2844))+(((-1.0)*cj0*sj2*x2845))+((cj0*x2841))+(((-1.0)*r02*x2848)));
evalcond[5]=((((-1.0)*r12*x2848))+((sj0*x2841))+(((-1.0)*sj0*sj2*x2845))+((x2840*x2842))+(((-1.0)*r11*sj5*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=((1.0)*cj5);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2850))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2850)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j4);
IkReal x2854=IKcos(j4);
IkReal x2855=(cj1*cj2);
IkReal x2856=(cj5*r10);
IkReal x2857=(r01*sj5);
IkReal x2858=(cj5*r00);
IkReal x2859=((1.0)*sj1);
IkReal x2860=(cj5*r20);
IkReal x2861=((1.0)*x2854);
IkReal x2862=((1.0)*x2853);
IkReal x2863=(sj5*x2853);
evalcond[0]=(((r21*x2863))+(((-1.0)*r22*x2861))+(((-1.0)*x2860*x2862)));
evalcond[1]=((((-1.0)*r12*x2861))+cj0+((r11*x2863))+(((-1.0)*x2856*x2862)));
evalcond[2]=((((-1.0)*r02*x2861))+(((-1.0)*sj0))+(((-1.0)*x2858*x2862))+((x2853*x2857)));
evalcond[3]=(((x2854*x2860))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2862))+(((-1.0)*r21*sj5*x2861))+(((-1.0)*cj2*x2859)));
evalcond[4]=((((-1.0)*r02*x2862))+(((-1.0)*x2857*x2861))+(((-1.0)*cj0*sj2*x2859))+((cj0*x2855))+((x2854*x2858)));
evalcond[5]=((((-1.0)*r12*x2862))+((sj0*x2855))+(((-1.0)*sj0*sj2*x2859))+(((-1.0)*r11*sj5*x2861))+((x2854*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2864=((1.0)*cj5);
CheckValue<IkReal> x2865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2864)))),-1);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2865.value)))+(x2866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2867=IKsin(j4);
IkReal x2868=IKcos(j4);
IkReal x2869=(cj1*cj2);
IkReal x2870=(cj5*r10);
IkReal x2871=(r01*sj5);
IkReal x2872=(cj5*r00);
IkReal x2873=((1.0)*sj1);
IkReal x2874=(cj5*r20);
IkReal x2875=((1.0)*x2868);
IkReal x2876=((1.0)*x2867);
IkReal x2877=(sj5*x2867);
evalcond[0]=((((-1.0)*r22*x2875))+((r21*x2877))+(((-1.0)*x2874*x2876)));
evalcond[1]=(cj0+(((-1.0)*x2870*x2876))+((r11*x2877))+(((-1.0)*r12*x2875)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2875))+((x2867*x2871))+(((-1.0)*x2872*x2876)));
evalcond[3]=(((x2868*x2874))+(((-1.0)*r22*x2876))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x2875))+(((-1.0)*cj2*x2873)));
evalcond[4]=((((-1.0)*r02*x2876))+(((-1.0)*cj0*sj2*x2873))+((x2868*x2872))+(((-1.0)*x2871*x2875))+((cj0*x2869)));
evalcond[5]=((((-1.0)*sj0*sj2*x2873))+((x2868*x2870))+(((-1.0)*r11*sj5*x2875))+((sj0*x2869))+(((-1.0)*r12*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2878=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x2878;
j0eval[1]=IKsign(x2878);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2879=r21*r21;
IkReal x2880=cj5*cj5;
IkReal x2881=(cj1*sj2);
IkReal x2882=((1.0)*r22);
IkReal x2883=(cj5*r20);
IkReal x2884=(cj2*sj1);
IkReal x2885=(r21*sj5);
IkReal x2886=((((-1.0)*r22*x2882))+(((2.0)*x2883*x2885))+(((-1.0)*x2880*(r20*r20)))+(((-1.0)*x2879))+((x2879*x2880)));
j4eval[0]=x2886;
j4eval[1]=((IKabs(((((-1.0)*x2881*x2885))+((x2881*x2883))+(((-1.0)*x2884*x2885))+((x2883*x2884)))))+(IKabs(((((-1.0)*x2882*x2884))+(((-1.0)*x2881*x2882))))));
j4eval[2]=IKsign(x2886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2887=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2887;
j4eval[1]=IKsign(x2887);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2888=((1.0)*cj5);
IkReal x2889=((((-1.0)*r11*x2888))+(((-1.0)*r10*sj5)));
j4eval[0]=x2889;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2888)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2890=cj5*cj5;
IkReal x2891=((1.0)*r20);
IkReal x2892=(r01*r21);
IkReal x2893=(r21*sj5);
IkReal x2894=(((cj5*r01*r20*sj5))+((x2890*x2892))+(((-1.0)*r02*r22))+(((-1.0)*x2892))+(((-1.0)*r00*x2890*x2891))+((cj5*r00*x2893)));
j4eval[0]=x2894;
j4eval[1]=((IKabs((((cj0*x2893))+(((-1.0)*cj0*cj5*x2891)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2895=cj5*cj5;
IkReal x2896=((1.0)*r20);
IkReal x2897=(r01*r21);
IkReal x2898=(r21*sj5);
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x2898))+(((-1.0)*cj0*cj5*x2896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
CheckValue<IkReal> x2900=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2895*x2896))+((x2895*x2897))+(((-1.0)*x2897))+((cj5*r00*x2898)))),-1);
if(!x2900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2899.value)+(((1.5707963267949)*(x2900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2901=IKcos(j4);
IkReal x2902=IKsin(j4);
IkReal x2903=(cj5*r00);
IkReal x2904=(cj5*r10);
IkReal x2905=(cj5*r20);
IkReal x2906=((1.0)*x2901);
IkReal x2907=((1.0)*x2902);
IkReal x2908=(sj5*x2901);
IkReal x2909=(sj5*x2902);
evalcond[0]=((((-1.0)*x2905*x2906))+((r22*x2902))+((r21*x2908)));
evalcond[1]=((((-1.0)*x2905*x2907))+((r21*x2909))+(((-1.0)*r22*x2906)));
evalcond[2]=(((r02*x2902))+cj0+((r01*x2908))+(((-1.0)*x2903*x2906)));
evalcond[3]=(sj0+(((-1.0)*x2904*x2906))+((r12*x2902))+((r11*x2908)));
evalcond[4]=(cj0+(((-1.0)*x2904*x2907))+(((-1.0)*r12*x2906))+((r11*x2909)));
evalcond[5]=((((-1.0)*r02*x2906))+(((-1.0)*sj0))+((r01*x2909))+(((-1.0)*x2903*x2907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2910=((1.0)*cj5);
CheckValue<IkReal> x2911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2910)))),-1);
if(!x2911.valid){
continue;
}
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2910))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2911.value)))+(x2912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2913=IKcos(j4);
IkReal x2914=IKsin(j4);
IkReal x2915=(cj5*r00);
IkReal x2916=(cj5*r10);
IkReal x2917=(cj5*r20);
IkReal x2918=((1.0)*x2913);
IkReal x2919=((1.0)*x2914);
IkReal x2920=(sj5*x2913);
IkReal x2921=(sj5*x2914);
evalcond[0]=((((-1.0)*x2917*x2918))+((r21*x2920))+((r22*x2914)));
evalcond[1]=((((-1.0)*x2917*x2919))+((r21*x2921))+(((-1.0)*r22*x2918)));
evalcond[2]=((((-1.0)*x2915*x2918))+cj0+((r01*x2920))+((r02*x2914)));
evalcond[3]=(((r12*x2914))+sj0+((r11*x2920))+(((-1.0)*x2916*x2918)));
evalcond[4]=(cj0+(((-1.0)*r12*x2918))+((r11*x2921))+(((-1.0)*x2916*x2919)));
evalcond[5]=((((-1.0)*x2915*x2919))+(((-1.0)*sj0))+((r01*x2921))+(((-1.0)*r02*x2918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2922 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2922.valid){
continue;
}
CheckValue<IkReal> x2923=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2922.value)+(((1.5707963267949)*(x2923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2924=IKcos(j4);
IkReal x2925=IKsin(j4);
IkReal x2926=(cj5*r00);
IkReal x2927=(cj5*r10);
IkReal x2928=(cj5*r20);
IkReal x2929=((1.0)*x2924);
IkReal x2930=((1.0)*x2925);
IkReal x2931=(sj5*x2924);
IkReal x2932=(sj5*x2925);
evalcond[0]=(((r22*x2925))+((r21*x2931))+(((-1.0)*x2928*x2929)));
evalcond[1]=(((r21*x2932))+(((-1.0)*r22*x2929))+(((-1.0)*x2928*x2930)));
evalcond[2]=(cj0+((r01*x2931))+(((-1.0)*x2926*x2929))+((r02*x2925)));
evalcond[3]=(sj0+(((-1.0)*x2927*x2929))+((r12*x2925))+((r11*x2931)));
evalcond[4]=((((-1.0)*x2927*x2930))+cj0+(((-1.0)*r12*x2929))+((r11*x2932)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x2929))+((r01*x2932))+(((-1.0)*x2926*x2930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2933=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2933;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2934=((1.0)*cj5);
IkReal x2935=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2934)));
j4eval[0]=x2935;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2934))))));
j4eval[2]=IKsign(x2935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2936=((1.0)*cj5);
IkReal x2937=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2936)));
j4eval[0]=x2937;
j4eval[1]=IKsign(x2937);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2936)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2938=((1.0)*cj5);
CheckValue<IkReal> x2939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2938)))),-1);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2938)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2939.value)))+(x2940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2941=IKcos(j4);
IkReal x2942=IKsin(j4);
IkReal x2943=((1.0)*sj0);
IkReal x2944=(cj5*r00);
IkReal x2945=(cj5*r10);
IkReal x2946=(cj5*r20);
IkReal x2947=((1.0)*x2941);
IkReal x2948=((1.0)*x2942);
IkReal x2949=(sj5*x2941);
IkReal x2950=(sj5*x2942);
evalcond[0]=(((r21*x2949))+((r22*x2942))+(((-1.0)*x2946*x2947)));
evalcond[1]=(((r21*x2950))+(((-1.0)*x2946*x2948))+(((-1.0)*r22*x2947)));
evalcond[2]=((((-1.0)*r12*x2947))+cj0+(((-1.0)*x2945*x2948))+((r11*x2950)));
evalcond[3]=(((r02*x2942))+((r01*x2949))+(((-1.0)*x2944*x2947))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x2942))+((r11*x2949))+(((-1.0)*x2943))+(((-1.0)*x2945*x2947)));
evalcond[5]=((((-1.0)*r02*x2947))+((r01*x2950))+(((-1.0)*x2943))+(((-1.0)*x2944*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2951=((1.0)*cj5);
CheckValue<IkReal> x2952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2951)))),-1);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2952.value)))+(x2953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2954=IKcos(j4);
IkReal x2955=IKsin(j4);
IkReal x2956=((1.0)*sj0);
IkReal x2957=(cj5*r00);
IkReal x2958=(cj5*r10);
IkReal x2959=(cj5*r20);
IkReal x2960=((1.0)*x2954);
IkReal x2961=((1.0)*x2955);
IkReal x2962=(sj5*x2954);
IkReal x2963=(sj5*x2955);
evalcond[0]=(((r22*x2955))+((r21*x2962))+(((-1.0)*x2959*x2960)));
evalcond[1]=(((r21*x2963))+(((-1.0)*x2959*x2961))+(((-1.0)*r22*x2960)));
evalcond[2]=(cj0+((r11*x2963))+(((-1.0)*x2958*x2961))+(((-1.0)*r12*x2960)));
evalcond[3]=((((-1.0)*x2957*x2960))+((r01*x2962))+((r02*x2955))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2956))+((r11*x2962))+(((-1.0)*x2958*x2960))+((r12*x2955)));
evalcond[5]=((((-1.0)*x2957*x2961))+(((-1.0)*x2956))+(((-1.0)*r02*x2960))+((r01*x2963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2964 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2964.valid){
continue;
}
CheckValue<IkReal> x2965=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2964.value)+(((1.5707963267949)*(x2965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2966=IKcos(j4);
IkReal x2967=IKsin(j4);
IkReal x2968=((1.0)*sj0);
IkReal x2969=(cj5*r00);
IkReal x2970=(cj5*r10);
IkReal x2971=(cj5*r20);
IkReal x2972=((1.0)*x2966);
IkReal x2973=((1.0)*x2967);
IkReal x2974=(sj5*x2966);
IkReal x2975=(sj5*x2967);
evalcond[0]=(((r22*x2967))+(((-1.0)*x2971*x2972))+((r21*x2974)));
evalcond[1]=((((-1.0)*r22*x2972))+(((-1.0)*x2971*x2973))+((r21*x2975)));
evalcond[2]=(cj0+(((-1.0)*r12*x2972))+((r11*x2975))+(((-1.0)*x2970*x2973)));
evalcond[3]=(((r02*x2967))+(((-1.0)*x2969*x2972))+((r01*x2974))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2968))+((r11*x2974))+((r12*x2967))+(((-1.0)*x2970*x2972)));
evalcond[5]=((((-1.0)*r02*x2972))+(((-1.0)*x2969*x2973))+((r01*x2975))+(((-1.0)*x2968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2976=IKsin(j0);
IkReal x2977=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x2976))+(((0.425)*x2977)));
evalcond[1]=((((0.10915)*x2977))+(((-1.0)*py))+(((0.425)*x2976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2978=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2978;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2979=((1.0)*cj5);
IkReal x2980=((((-1.0)*r01*x2979))+(((-1.0)*r00*sj5)));
j4eval[0]=x2980;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2979))))));
j4eval[2]=IKsign(x2980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2981=((1.0)*cj5);
IkReal x2982=((((-1.0)*r01*x2981))+(((-1.0)*r00*sj5)));
j4eval[0]=x2982;
j4eval[1]=IKsign(x2982);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2981))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2983=((1.0)*cj5);
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2983))+(((-1.0)*r00*sj5)))),-1);
if(!x2984.valid){
continue;
}
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x2983))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2984.value)))+(x2985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2986=IKcos(j4);
IkReal x2987=IKsin(j4);
IkReal x2988=((1.0)*sj0);
IkReal x2989=(cj5*r00);
IkReal x2990=(cj5*r10);
IkReal x2991=(cj5*r20);
IkReal x2992=((1.0)*x2986);
IkReal x2993=((1.0)*x2987);
IkReal x2994=(sj5*x2986);
IkReal x2995=(sj5*x2987);
evalcond[0]=((((-1.0)*x2991*x2992))+((r21*x2994))+((r22*x2987)));
evalcond[1]=((((-1.0)*r22*x2992))+(((-1.0)*x2991*x2993))+((r21*x2995)));
evalcond[2]=(cj0+(((-1.0)*r12*x2992))+(((-1.0)*x2990*x2993))+((r11*x2995)));
evalcond[3]=(((r01*x2994))+(((-1.0)*x2989*x2992))+((r02*x2987))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x2988))+((r12*x2987))+(((-1.0)*x2990*x2992))+((r11*x2994)));
evalcond[5]=(((r01*x2995))+(((-1.0)*x2988))+(((-1.0)*x2989*x2993))+(((-1.0)*r02*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2996=((1.0)*cj5);
CheckValue<IkReal> x2997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2997.valid){
continue;
}
CheckValue<IkReal> x2998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2996)))),-1);
if(!x2998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2997.value)+(((1.5707963267949)*(x2998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2999=IKcos(j4);
IkReal x3000=IKsin(j4);
IkReal x3001=((1.0)*sj0);
IkReal x3002=(cj5*r00);
IkReal x3003=(cj5*r10);
IkReal x3004=(cj5*r20);
IkReal x3005=((1.0)*x2999);
IkReal x3006=((1.0)*x3000);
IkReal x3007=(sj5*x2999);
IkReal x3008=(sj5*x3000);
evalcond[0]=(((r22*x3000))+(((-1.0)*x3004*x3005))+((r21*x3007)));
evalcond[1]=((((-1.0)*r22*x3005))+(((-1.0)*x3004*x3006))+((r21*x3008)));
evalcond[2]=(cj0+(((-1.0)*x3003*x3006))+(((-1.0)*r12*x3005))+((r11*x3008)));
evalcond[3]=(((r01*x3007))+(((-1.0)*x3002*x3005))+((r02*x3000))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3003*x3005))+(((-1.0)*x3001))+((r12*x3000))+((r11*x3007)));
evalcond[5]=(((r01*x3008))+(((-1.0)*x3002*x3006))+(((-1.0)*r02*x3005))+(((-1.0)*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3009.value)+(((1.5707963267949)*(x3010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3011=IKcos(j4);
IkReal x3012=IKsin(j4);
IkReal x3013=((1.0)*sj0);
IkReal x3014=(cj5*r00);
IkReal x3015=(cj5*r10);
IkReal x3016=(cj5*r20);
IkReal x3017=((1.0)*x3011);
IkReal x3018=((1.0)*x3012);
IkReal x3019=(sj5*x3011);
IkReal x3020=(sj5*x3012);
evalcond[0]=(((r22*x3012))+((r21*x3019))+(((-1.0)*x3016*x3017)));
evalcond[1]=((((-1.0)*r22*x3017))+((r21*x3020))+(((-1.0)*x3016*x3018)));
evalcond[2]=(((r11*x3020))+cj0+(((-1.0)*r12*x3017))+(((-1.0)*x3015*x3018)));
evalcond[3]=(((r01*x3019))+(((-1.0)*x3014*x3017))+(((-1.0)*cj0))+((r02*x3012)));
evalcond[4]=((((-1.0)*x3013))+((r12*x3012))+((r11*x3019))+(((-1.0)*x3015*x3017)));
evalcond[5]=((((-1.0)*r02*x3017))+(((-1.0)*x3013))+(((-1.0)*x3014*x3018))+((r01*x3020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3021=IKsin(j0);
IkReal x3022=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.425)*x3022))+(((-0.10915)*x3021)));
evalcond[1]=((((0.10915)*x3022))+(((-1.0)*py))+(((0.425)*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3023=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3023;
j4eval[1]=IKsign(x3023);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3024=((1.0)*cj5);
IkReal x3025=((((-1.0)*r11*x3024))+(((-1.0)*r10*sj5)));
j4eval[0]=x3025;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3024)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3026=cj5*cj5;
IkReal x3027=((1.0)*r20);
IkReal x3028=(r01*r21);
IkReal x3029=(r21*sj5);
IkReal x3030=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3028))+(((-1.0)*r00*x3026*x3027))+((cj5*r00*x3029))+((x3026*x3028)));
j4eval[0]=x3030;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3027))+((cj0*x3029)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3031=cj5*cj5;
IkReal x3032=((1.0)*r20);
IkReal x3033=(r01*r21);
IkReal x3034=(r21*sj5);
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3031*x3032))+(((-1.0)*r02*r22))+((cj5*r00*x3034))+(((-1.0)*x3033))+((x3031*x3033)))),-1);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3032))+((cj0*x3034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3035.value)))+(x3036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3037=IKcos(j4);
IkReal x3038=IKsin(j4);
IkReal x3039=(cj5*r00);
IkReal x3040=(cj5*r10);
IkReal x3041=(cj5*r20);
IkReal x3042=((1.0)*x3037);
IkReal x3043=((1.0)*x3038);
IkReal x3044=(sj5*x3037);
IkReal x3045=(sj5*x3038);
evalcond[0]=(((r21*x3044))+((r22*x3038))+(((-1.0)*x3041*x3042)));
evalcond[1]=(((r21*x3045))+(((-1.0)*r22*x3042))+(((-1.0)*x3041*x3043)));
evalcond[2]=(((r02*x3038))+cj0+(((-1.0)*x3039*x3042))+((r01*x3044)));
evalcond[3]=(sj0+((r12*x3038))+(((-1.0)*x3040*x3042))+((r11*x3044)));
evalcond[4]=(cj0+(((-1.0)*r12*x3042))+(((-1.0)*x3040*x3043))+((r11*x3045)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3039*x3043))+(((-1.0)*r02*x3042))+((r01*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3046=((1.0)*cj5);
CheckValue<IkReal> x3047 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3046)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3047.valid){
continue;
}
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3046)))),-1);
if(!x3048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3047.value)+(((1.5707963267949)*(x3048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3049=IKcos(j4);
IkReal x3050=IKsin(j4);
IkReal x3051=(cj5*r00);
IkReal x3052=(cj5*r10);
IkReal x3053=(cj5*r20);
IkReal x3054=((1.0)*x3049);
IkReal x3055=((1.0)*x3050);
IkReal x3056=(sj5*x3049);
IkReal x3057=(sj5*x3050);
evalcond[0]=((((-1.0)*x3053*x3054))+((r21*x3056))+((r22*x3050)));
evalcond[1]=((((-1.0)*x3053*x3055))+((r21*x3057))+(((-1.0)*r22*x3054)));
evalcond[2]=(cj0+(((-1.0)*x3051*x3054))+((r02*x3050))+((r01*x3056)));
evalcond[3]=(sj0+(((-1.0)*x3052*x3054))+((r12*x3050))+((r11*x3056)));
evalcond[4]=(cj0+(((-1.0)*x3052*x3055))+((r11*x3057))+(((-1.0)*r12*x3054)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3051*x3055))+((r01*x3057))+(((-1.0)*r02*x3054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3058 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
CheckValue<IkReal> x3059=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3058.value)+(((1.5707963267949)*(x3059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3060=IKcos(j4);
IkReal x3061=IKsin(j4);
IkReal x3062=(cj5*r00);
IkReal x3063=(cj5*r10);
IkReal x3064=(cj5*r20);
IkReal x3065=((1.0)*x3060);
IkReal x3066=((1.0)*x3061);
IkReal x3067=(sj5*x3060);
IkReal x3068=(sj5*x3061);
evalcond[0]=(((r22*x3061))+(((-1.0)*x3064*x3065))+((r21*x3067)));
evalcond[1]=((((-1.0)*r22*x3065))+(((-1.0)*x3064*x3066))+((r21*x3068)));
evalcond[2]=(cj0+((r01*x3067))+(((-1.0)*x3062*x3065))+((r02*x3061)));
evalcond[3]=(sj0+(((-1.0)*x3063*x3065))+((r11*x3067))+((r12*x3061)));
evalcond[4]=(cj0+(((-1.0)*x3063*x3066))+(((-1.0)*r12*x3065))+((r11*x3068)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3068))+(((-1.0)*x3062*x3066))+(((-1.0)*r02*x3065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3069=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3069;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3070=((1.0)*cj5);
IkReal x3071=((((-1.0)*r01*x3070))+(((-1.0)*r00*sj5)));
j4eval[0]=x3071;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3070))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3072=((1.0)*cj5);
IkReal x3073=((((-1.0)*r01*x3072))+(((-1.0)*r00*sj5)));
j4eval[0]=x3073;
j4eval[1]=IKsign(x3073);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3072)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3074=((1.0)*cj5);
CheckValue<IkReal> x3075 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3074)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3075.valid){
continue;
}
CheckValue<IkReal> x3076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3074))+(((-1.0)*r00*sj5)))),-1);
if(!x3076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3075.value)+(((1.5707963267949)*(x3076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3077=IKcos(j4);
IkReal x3078=IKsin(j4);
IkReal x3079=((1.0)*sj0);
IkReal x3080=(cj5*r00);
IkReal x3081=(cj5*r10);
IkReal x3082=(cj5*r20);
IkReal x3083=((1.0)*x3077);
IkReal x3084=((1.0)*x3078);
IkReal x3085=(sj5*x3077);
IkReal x3086=(sj5*x3078);
evalcond[0]=((((-1.0)*x3082*x3083))+((r22*x3078))+((r21*x3085)));
evalcond[1]=((((-1.0)*x3082*x3084))+((r21*x3086))+(((-1.0)*r22*x3083)));
evalcond[2]=(cj0+((r11*x3086))+(((-1.0)*r12*x3083))+(((-1.0)*x3081*x3084)));
evalcond[3]=((((-1.0)*x3080*x3083))+((r01*x3085))+((r02*x3078))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3085))+(((-1.0)*x3079))+((r12*x3078))+(((-1.0)*x3081*x3083)));
evalcond[5]=((((-1.0)*x3080*x3084))+(((-1.0)*x3079))+(((-1.0)*r02*x3083))+((r01*x3086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3087=((1.0)*cj5);
CheckValue<IkReal> x3088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3087)))),-1);
if(!x3088.valid){
continue;
}
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3088.value)))+(x3089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3090=IKcos(j4);
IkReal x3091=IKsin(j4);
IkReal x3092=((1.0)*sj0);
IkReal x3093=(cj5*r00);
IkReal x3094=(cj5*r10);
IkReal x3095=(cj5*r20);
IkReal x3096=((1.0)*x3090);
IkReal x3097=((1.0)*x3091);
IkReal x3098=(sj5*x3090);
IkReal x3099=(sj5*x3091);
evalcond[0]=(((r21*x3098))+((r22*x3091))+(((-1.0)*x3095*x3096)));
evalcond[1]=((((-1.0)*r22*x3096))+((r21*x3099))+(((-1.0)*x3095*x3097)));
evalcond[2]=((((-1.0)*r12*x3096))+cj0+((r11*x3099))+(((-1.0)*x3094*x3097)));
evalcond[3]=(((r01*x3098))+((r02*x3091))+(((-1.0)*x3093*x3096))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3092))+((r11*x3098))+(((-1.0)*x3094*x3096))+((r12*x3091)));
evalcond[5]=(((r01*x3099))+(((-1.0)*r02*x3096))+(((-1.0)*x3092))+(((-1.0)*x3093*x3097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3100.value)+(((1.5707963267949)*(x3101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3102=IKcos(j4);
IkReal x3103=IKsin(j4);
IkReal x3104=((1.0)*sj0);
IkReal x3105=(cj5*r00);
IkReal x3106=(cj5*r10);
IkReal x3107=(cj5*r20);
IkReal x3108=((1.0)*x3102);
IkReal x3109=((1.0)*x3103);
IkReal x3110=(sj5*x3102);
IkReal x3111=(sj5*x3103);
evalcond[0]=((((-1.0)*x3107*x3108))+((r22*x3103))+((r21*x3110)));
evalcond[1]=((((-1.0)*x3107*x3109))+((r21*x3111))+(((-1.0)*r22*x3108)));
evalcond[2]=(cj0+(((-1.0)*r12*x3108))+(((-1.0)*x3106*x3109))+((r11*x3111)));
evalcond[3]=(((r02*x3103))+(((-1.0)*x3105*x3108))+((r01*x3110))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3104))+(((-1.0)*x3106*x3108))+((r12*x3103))+((r11*x3110)));
evalcond[5]=((((-1.0)*x3104))+(((-1.0)*x3105*x3109))+((r01*x3111))+(((-1.0)*r02*x3108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3112=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3112;
j4eval[1]=IKsign(x3112);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3113=((1.0)*cj5);
IkReal x3114=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3113)));
j4eval[0]=x3114;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3113)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3115=cj5*cj5;
IkReal x3116=((1.0)*r20);
IkReal x3117=(r01*r21);
IkReal x3118=(r21*sj5);
IkReal x3119=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3117))+((cj5*r00*x3118))+((x3115*x3117))+(((-1.0)*r00*x3115*x3116)));
j4eval[0]=x3119;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3116))+((cj0*x3118))))));
j4eval[2]=IKsign(x3119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3120=cj5*cj5;
IkReal x3121=((1.0)*r20);
IkReal x3122=(r01*r21);
IkReal x3123=(r21*sj5);
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3120*x3122))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3120*x3121))+((cj5*r00*x3123))+(((-1.0)*x3122)))),-1);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3121))+((cj0*x3123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3124.value)))+(x3125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3126=IKcos(j4);
IkReal x3127=IKsin(j4);
IkReal x3128=(cj5*r00);
IkReal x3129=(cj5*r10);
IkReal x3130=(cj5*r20);
IkReal x3131=((1.0)*x3126);
IkReal x3132=((1.0)*x3127);
IkReal x3133=(sj5*x3126);
IkReal x3134=(sj5*x3127);
evalcond[0]=((((-1.0)*x3130*x3131))+((r21*x3133))+((r22*x3127)));
evalcond[1]=((((-1.0)*x3130*x3132))+((r21*x3134))+(((-1.0)*r22*x3131)));
evalcond[2]=(((r01*x3133))+cj0+((r02*x3127))+(((-1.0)*x3128*x3131)));
evalcond[3]=(sj0+((r12*x3127))+((r11*x3133))+(((-1.0)*x3129*x3131)));
evalcond[4]=(cj0+(((-1.0)*r12*x3131))+((r11*x3134))+(((-1.0)*x3129*x3132)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3134))+(((-1.0)*r02*x3131))+(((-1.0)*x3128*x3132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3135=((1.0)*cj5);
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3135)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3135)))),-1);
if(!x3137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3136.value)+(((1.5707963267949)*(x3137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3138=IKcos(j4);
IkReal x3139=IKsin(j4);
IkReal x3140=(cj5*r00);
IkReal x3141=(cj5*r10);
IkReal x3142=(cj5*r20);
IkReal x3143=((1.0)*x3138);
IkReal x3144=((1.0)*x3139);
IkReal x3145=(sj5*x3138);
IkReal x3146=(sj5*x3139);
evalcond[0]=((((-1.0)*x3142*x3143))+((r22*x3139))+((r21*x3145)));
evalcond[1]=((((-1.0)*r22*x3143))+(((-1.0)*x3142*x3144))+((r21*x3146)));
evalcond[2]=(cj0+(((-1.0)*x3140*x3143))+((r01*x3145))+((r02*x3139)));
evalcond[3]=(sj0+(((-1.0)*x3141*x3143))+((r11*x3145))+((r12*x3139)));
evalcond[4]=((((-1.0)*r12*x3143))+cj0+(((-1.0)*x3141*x3144))+((r11*x3146)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3140*x3144))+((r01*x3146))+(((-1.0)*r02*x3143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3147.value)+(((1.5707963267949)*(x3148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3149=IKcos(j4);
IkReal x3150=IKsin(j4);
IkReal x3151=(cj5*r00);
IkReal x3152=(cj5*r10);
IkReal x3153=(cj5*r20);
IkReal x3154=((1.0)*x3149);
IkReal x3155=((1.0)*x3150);
IkReal x3156=(sj5*x3149);
IkReal x3157=(sj5*x3150);
evalcond[0]=((((-1.0)*x3153*x3154))+((r22*x3150))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3154))+(((-1.0)*x3153*x3155))+((r21*x3157)));
evalcond[2]=(((r02*x3150))+cj0+((r01*x3156))+(((-1.0)*x3151*x3154)));
evalcond[3]=(sj0+((r11*x3156))+((r12*x3150))+(((-1.0)*x3152*x3154)));
evalcond[4]=(cj0+((r11*x3157))+(((-1.0)*r12*x3154))+(((-1.0)*x3152*x3155)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3157))+(((-1.0)*r02*x3154))+(((-1.0)*x3151*x3155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3158=IKcos(j0);
IkReal x3159=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3158))+(((-0.10915)*x3159)));
evalcond[1]=((((0.10915)*x3158))+(((-1.0)*py))+(((-0.425)*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3160=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3160;
j4eval[1]=IKsign(x3160);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3161=((1.0)*cj5);
IkReal x3162=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3161)));
j4eval[0]=x3162;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3161)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3163=cj5*cj5;
IkReal x3164=((1.0)*r20);
IkReal x3165=(r01*r21);
IkReal x3166=(r21*sj5);
IkReal x3167=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3165))+((x3163*x3165))+((cj5*r00*x3166))+(((-1.0)*r00*x3163*x3164)));
j4eval[0]=x3167;
j4eval[1]=((IKabs((((cj0*x3166))+(((-1.0)*cj0*cj5*x3164)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3168=cj5*cj5;
IkReal x3169=((1.0)*r20);
IkReal x3170=(r01*r21);
IkReal x3171=(r21*sj5);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3169))+((cj0*x3171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3168*x3170))+(((-1.0)*x3170))+(((-1.0)*r00*x3168*x3169))+((cj5*r00*x3171)))),-1);
if(!x3173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3172.value)+(((1.5707963267949)*(x3173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3174=IKcos(j4);
IkReal x3175=IKsin(j4);
IkReal x3176=(cj5*r00);
IkReal x3177=(cj5*r10);
IkReal x3178=(cj5*r20);
IkReal x3179=((1.0)*x3174);
IkReal x3180=((1.0)*x3175);
IkReal x3181=(sj5*x3174);
IkReal x3182=(sj5*x3175);
evalcond[0]=(((r22*x3175))+(((-1.0)*x3178*x3179))+((r21*x3181)));
evalcond[1]=((((-1.0)*x3178*x3180))+(((-1.0)*r22*x3179))+((r21*x3182)));
evalcond[2]=(cj0+((r01*x3181))+((r02*x3175))+(((-1.0)*x3176*x3179)));
evalcond[3]=(sj0+(((-1.0)*x3177*x3179))+((r11*x3181))+((r12*x3175)));
evalcond[4]=(cj0+(((-1.0)*x3177*x3180))+(((-1.0)*r12*x3179))+((r11*x3182)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3176*x3180))+((r01*x3182))+(((-1.0)*r02*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3183=((1.0)*cj5);
CheckValue<IkReal> x3184 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3183))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3183)))),-1);
if(!x3185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3184.value)+(((1.5707963267949)*(x3185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3186=IKcos(j4);
IkReal x3187=IKsin(j4);
IkReal x3188=(cj5*r00);
IkReal x3189=(cj5*r10);
IkReal x3190=(cj5*r20);
IkReal x3191=((1.0)*x3186);
IkReal x3192=((1.0)*x3187);
IkReal x3193=(sj5*x3186);
IkReal x3194=(sj5*x3187);
evalcond[0]=((((-1.0)*x3190*x3191))+((r22*x3187))+((r21*x3193)));
evalcond[1]=((((-1.0)*x3190*x3192))+(((-1.0)*r22*x3191))+((r21*x3194)));
evalcond[2]=(cj0+(((-1.0)*x3188*x3191))+((r01*x3193))+((r02*x3187)));
evalcond[3]=(sj0+((r12*x3187))+((r11*x3193))+(((-1.0)*x3189*x3191)));
evalcond[4]=(cj0+((r11*x3194))+(((-1.0)*r12*x3191))+(((-1.0)*x3189*x3192)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3188*x3192))+((r01*x3194))+(((-1.0)*r02*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3195.value)+(((1.5707963267949)*(x3196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j4);
IkReal x3198=IKsin(j4);
IkReal x3199=(cj5*r00);
IkReal x3200=(cj5*r10);
IkReal x3201=(cj5*r20);
IkReal x3202=((1.0)*x3197);
IkReal x3203=((1.0)*x3198);
IkReal x3204=(sj5*x3197);
IkReal x3205=(sj5*x3198);
evalcond[0]=((((-1.0)*x3201*x3202))+((r22*x3198))+((r21*x3204)));
evalcond[1]=((((-1.0)*x3201*x3203))+(((-1.0)*r22*x3202))+((r21*x3205)));
evalcond[2]=(cj0+(((-1.0)*x3199*x3202))+((r01*x3204))+((r02*x3198)));
evalcond[3]=(sj0+(((-1.0)*x3200*x3202))+((r11*x3204))+((r12*x3198)));
evalcond[4]=(cj0+(((-1.0)*x3200*x3203))+((r11*x3205))+(((-1.0)*r12*x3202)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3202))+(((-1.0)*x3199*x3203))+((r01*x3205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3206=IKcos(j0);
IkReal x3207=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3207))+(((-0.425)*x3206)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3206))+(((-0.425)*x3207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3208=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3208;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3209=((1.0)*cj5);
IkReal x3210=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3209)));
j4eval[0]=x3210;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3209)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3211=((1.0)*cj5);
IkReal x3212=((((-1.0)*r01*x3211))+(((-1.0)*r00*sj5)));
j4eval[0]=x3212;
j4eval[1]=IKsign(x3212);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3211))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3213=((1.0)*cj5);
CheckValue<IkReal> x3214 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3213)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3213))+(((-1.0)*r00*sj5)))),-1);
if(!x3215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3214.value)+(((1.5707963267949)*(x3215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3216=IKcos(j4);
IkReal x3217=IKsin(j4);
IkReal x3218=((1.0)*sj0);
IkReal x3219=(cj5*r00);
IkReal x3220=(cj5*r10);
IkReal x3221=(cj5*r20);
IkReal x3222=((1.0)*x3216);
IkReal x3223=((1.0)*x3217);
IkReal x3224=(sj5*x3216);
IkReal x3225=(sj5*x3217);
evalcond[0]=(((r22*x3217))+((r21*x3224))+(((-1.0)*x3221*x3222)));
evalcond[1]=(((r21*x3225))+(((-1.0)*r22*x3222))+(((-1.0)*x3221*x3223)));
evalcond[2]=(cj0+((r11*x3225))+(((-1.0)*x3220*x3223))+(((-1.0)*r12*x3222)));
evalcond[3]=(((r01*x3224))+(((-1.0)*x3219*x3222))+(((-1.0)*cj0))+((r02*x3217)));
evalcond[4]=(((r11*x3224))+((r12*x3217))+(((-1.0)*x3220*x3222))+(((-1.0)*x3218)));
evalcond[5]=((((-1.0)*r02*x3222))+((r01*x3225))+(((-1.0)*x3219*x3223))+(((-1.0)*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3226=((1.0)*cj5);
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3226)))),-1);
if(!x3228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3227.value)+(((1.5707963267949)*(x3228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3229=IKcos(j4);
IkReal x3230=IKsin(j4);
IkReal x3231=((1.0)*sj0);
IkReal x3232=(cj5*r00);
IkReal x3233=(cj5*r10);
IkReal x3234=(cj5*r20);
IkReal x3235=((1.0)*x3229);
IkReal x3236=((1.0)*x3230);
IkReal x3237=(sj5*x3229);
IkReal x3238=(sj5*x3230);
evalcond[0]=(((r22*x3230))+(((-1.0)*x3234*x3235))+((r21*x3237)));
evalcond[1]=((((-1.0)*r22*x3235))+(((-1.0)*x3234*x3236))+((r21*x3238)));
evalcond[2]=(cj0+((r11*x3238))+(((-1.0)*x3233*x3236))+(((-1.0)*r12*x3235)));
evalcond[3]=(((r01*x3237))+(((-1.0)*x3232*x3235))+((r02*x3230))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3237))+(((-1.0)*x3233*x3235))+((r12*x3230))+(((-1.0)*x3231)));
evalcond[5]=((((-1.0)*r02*x3235))+((r01*x3238))+(((-1.0)*x3232*x3236))+(((-1.0)*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3239 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3239.valid){
continue;
}
CheckValue<IkReal> x3240=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3239.value)+(((1.5707963267949)*(x3240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3241=IKcos(j4);
IkReal x3242=IKsin(j4);
IkReal x3243=((1.0)*sj0);
IkReal x3244=(cj5*r00);
IkReal x3245=(cj5*r10);
IkReal x3246=(cj5*r20);
IkReal x3247=((1.0)*x3241);
IkReal x3248=((1.0)*x3242);
IkReal x3249=(sj5*x3241);
IkReal x3250=(sj5*x3242);
evalcond[0]=(((r22*x3242))+((r21*x3249))+(((-1.0)*x3246*x3247)));
evalcond[1]=(((r21*x3250))+(((-1.0)*x3246*x3248))+(((-1.0)*r22*x3247)));
evalcond[2]=(cj0+((r11*x3250))+(((-1.0)*r12*x3247))+(((-1.0)*x3245*x3248)));
evalcond[3]=(((r01*x3249))+(((-1.0)*x3244*x3247))+((r02*x3242))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3243))+((r12*x3242))+(((-1.0)*x3245*x3247))+((r11*x3249)));
evalcond[5]=((((-1.0)*x3244*x3248))+((r01*x3250))+(((-1.0)*x3243))+(((-1.0)*r02*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3251=(cj2*sj1);
IkReal x3252=((8500.0)*sj1);
IkReal x3253=(cj5*r01);
IkReal x3254=(r00*sj5);
IkReal x3255=(cj1*sj2);
IkReal x3256=((20000.0)*px);
CheckValue<IkReal> x3257=IKPowWithIntegerCheck(((((-2183.0)*x3255))+(((-2183.0)*x3251))),-1);
if(!x3257.valid){
continue;
}
CheckValue<IkReal> x3258=IKPowWithIntegerCheck(((((-1.0)*x3255))+(((-1.0)*x3251))),-1);
if(!x3258.valid){
continue;
}
if( IKabs(((x3257.value)*(((((9738.0)*x3253*x3255))+(((9738.0)*x3254*x3255))+(((9738.0)*x3251*x3253))+(((9738.0)*x3251*x3254))+((x3252*x3253))+((x3252*x3254))+((x3251*x3256))+((x3255*x3256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3258.value)*((x3253+x3254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3257.value)*(((((9738.0)*x3253*x3255))+(((9738.0)*x3254*x3255))+(((9738.0)*x3251*x3253))+(((9738.0)*x3251*x3254))+((x3252*x3253))+((x3252*x3254))+((x3251*x3256))+((x3255*x3256))))))+IKsqr(((x3258.value)*((x3253+x3254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3257.value)*(((((9738.0)*x3253*x3255))+(((9738.0)*x3254*x3255))+(((9738.0)*x3251*x3253))+(((9738.0)*x3251*x3254))+((x3252*x3253))+((x3252*x3254))+((x3251*x3256))+((x3255*x3256))))), ((x3258.value)*((x3253+x3254))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3259=IKcos(j0);
IkReal x3260=IKsin(j0);
IkReal x3261=(cj1*sj2);
IkReal x3262=(cj5*r11);
IkReal x3263=((1.0)*sj5);
IkReal x3264=(cj2*sj1);
IkReal x3265=((0.425)*sj1);
IkReal x3266=((0.09465)*sj5);
IkReal x3267=(cj5*r01);
IkReal x3268=((0.39225)*x3260);
IkReal x3269=((1.0)*x3259);
IkReal x3270=((1.0)*x3260);
IkReal x3271=((0.39225)*x3259);
evalcond[0]=((((-1.0)*x3261*x3269))+(((-1.0)*x3267))+(((-1.0)*x3264*x3269))+(((-1.0)*r00*x3263)));
evalcond[1]=((((-1.0)*x3262))+(((-1.0)*x3261*x3270))+(((-1.0)*r10*x3263))+(((-1.0)*x3264*x3270)));
evalcond[2]=(((x3264*x3271))+(((-0.10915)*x3260))+(((-1.0)*px))+(((-1.0)*r00*x3266))+(((-0.09465)*x3267))+((x3259*x3265))+((x3261*x3271)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x3266))+(((-0.09465)*x3262))+(((0.10915)*x3259))+((x3260*x3265))+((x3261*x3268))+((x3264*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3272=((1.0)*cj5);
IkReal x3273=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3272)));
j4eval[0]=x3273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3274=((1.0)*cj5);
IkReal x3275=((((-1.0)*r11*x3274))+(((-1.0)*r10*sj5)));
j4eval[0]=x3275;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3274)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3276=((1.0)*sj0);
IkReal x3277=((1.0)*cj0);
IkReal x3278=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3278;
j4eval[1]=((IKabs(((((-1.0)*r12*x3276))+(((-1.0)*r02*x3277)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3277))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3276))))));
j4eval[2]=IKsign(x3278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3279=((-1.0)*r20);
IkReal x3281 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3281)==0){
continue;
}
IkReal x3280=pow(x3281,-0.5);
CheckValue<IkReal> x3282 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3279),IKFAST_ATAN2_MAGTHRESH);
if(!x3282.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3282.value));
IkReal gconst97=(r21*x3280);
IkReal gconst98=(x3279*x3280);
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3283.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3284=((-1.0)*r20);
IkReal x3285=x3280;
CheckValue<IkReal> x3287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3284),IKFAST_ATAN2_MAGTHRESH);
if(!x3287.valid){
continue;
}
IkReal x3286=((-1.0)*(x3287.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3286;
IkReal gconst96=x3286;
IkReal gconst97=(r21*x3285);
IkReal gconst98=(x3284*x3285);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3288=((-1.0)*r20);
IkReal x3289=x3280;
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3288),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
IkReal x3290=((-1.0)*(x3291.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3290;
IkReal gconst96=x3290;
IkReal gconst97=(r21*x3289);
IkReal gconst98=(x3288*x3289);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3292=((-1.0)*r20);
IkReal x3293=x3280;
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3292),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
IkReal x3294=((-1.0)*(x3295.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3294;
IkReal gconst96=x3294;
IkReal gconst97=(r21*x3293);
IkReal gconst98=(x3292*x3293);
IkReal x3296=((1.0)*(r22*r22));
CheckValue<IkReal> x3300=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3296))),-1);
if(!x3300.valid){
continue;
}
IkReal x3297=x3300.value;
IkReal x3298=((1.0)*x3297);
IkReal x3299=((((-1.0)*x3298*(r20*r20*r20*r20)))+(((-1.0)*x3296))+(((-2.0)*x3297*(r20*r20)*(r21*r21)))+(((-1.0)*x3298*(r21*r21*r21*r21))));
j4eval[0]=x3299;
j4eval[1]=IKsign(x3299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3301=(cj2*sj1);
IkReal x3302=(gconst98*r20);
IkReal x3303=(gconst97*r21);
IkReal x3304=((1.0)*cj1*sj2);
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(IKsign(((((2.0)*x3302*x3303))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3303*x3303)))+(((-1.0)*(x3302*x3302))))),-1);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3301))+(((-1.0)*r22*x3304)))),IkReal(((((-1.0)*x3301*x3303))+((x3301*x3302))+((cj1*sj2*x3302))+(((-1.0)*x3303*x3304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3305.value)))+(x3306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3307=IKsin(j4);
IkReal x3308=IKcos(j4);
IkReal x3309=(gconst98*r10);
IkReal x3310=(gconst97*r21);
IkReal x3311=(gconst98*r20);
IkReal x3312=(cj1*cj2);
IkReal x3313=((1.0)*sj1);
IkReal x3314=(gconst98*r00);
IkReal x3315=((1.0)*x3308);
IkReal x3316=((1.0)*x3307);
IkReal x3317=(gconst97*x3307);
IkReal x3318=(gconst97*x3308);
evalcond[0]=((((-1.0)*r22*x3315))+((x3307*x3310))+(((-1.0)*x3311*x3316)));
evalcond[1]=(cj0+((r11*x3317))+(((-1.0)*x3309*x3316))+(((-1.0)*r12*x3315)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3314*x3316))+(((-1.0)*r02*x3315))+((r01*x3317)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x3307))+(((-1.0)*cj2*x3313))+(((-1.0)*x3311*x3315))+((x3308*x3310)));
evalcond[4]=(((r02*x3307))+((cj0*x3312))+(((-1.0)*x3314*x3315))+(((-1.0)*cj0*sj2*x3313))+((r01*x3318)));
evalcond[5]=(((r11*x3318))+(((-1.0)*x3309*x3315))+((r12*x3307))+(((-1.0)*sj0*sj2*x3313))+((sj0*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3319=((1.0)*gconst98);
CheckValue<IkReal> x3320 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3319))+((gconst97*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3319))+(((-1.0)*gconst97*r10)))),-1);
if(!x3321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3320.value)+(((1.5707963267949)*(x3321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3322=IKsin(j4);
IkReal x3323=IKcos(j4);
IkReal x3324=(gconst98*r10);
IkReal x3325=(gconst97*r21);
IkReal x3326=(gconst98*r20);
IkReal x3327=(cj1*cj2);
IkReal x3328=((1.0)*sj1);
IkReal x3329=(gconst98*r00);
IkReal x3330=((1.0)*x3323);
IkReal x3331=((1.0)*x3322);
IkReal x3332=(gconst97*x3322);
IkReal x3333=(gconst97*x3323);
evalcond[0]=((((-1.0)*r22*x3330))+((x3322*x3325))+(((-1.0)*x3326*x3331)));
evalcond[1]=(cj0+((r11*x3332))+(((-1.0)*x3324*x3331))+(((-1.0)*r12*x3330)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3330))+((r01*x3332))+(((-1.0)*x3329*x3331)));
evalcond[3]=(((r22*x3322))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3328))+(((-1.0)*x3326*x3330))+((x3323*x3325)));
evalcond[4]=(((r01*x3333))+(((-1.0)*cj0*sj2*x3328))+((cj0*x3327))+((r02*x3322))+(((-1.0)*x3329*x3330)));
evalcond[5]=(((r12*x3322))+((sj0*x3327))+((r11*x3333))+(((-1.0)*sj0*sj2*x3328))+(((-1.0)*x3324*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3334=((1.0)*gconst98);
CheckValue<IkReal> x3335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3334))+(((-1.0)*gconst97*r00)))),-1);
if(!x3335.valid){
continue;
}
CheckValue<IkReal> x3336 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3335.value)))+(x3336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3337=IKsin(j4);
IkReal x3338=IKcos(j4);
IkReal x3339=(gconst98*r10);
IkReal x3340=(gconst97*r21);
IkReal x3341=(gconst98*r20);
IkReal x3342=(cj1*cj2);
IkReal x3343=((1.0)*sj1);
IkReal x3344=(gconst98*r00);
IkReal x3345=((1.0)*x3338);
IkReal x3346=((1.0)*x3337);
IkReal x3347=(gconst97*x3337);
IkReal x3348=(gconst97*x3338);
evalcond[0]=((((-1.0)*x3341*x3346))+((x3337*x3340))+(((-1.0)*r22*x3345)));
evalcond[1]=(cj0+(((-1.0)*x3339*x3346))+(((-1.0)*r12*x3345))+((r11*x3347)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3345))+(((-1.0)*x3344*x3346))+((r01*x3347)));
evalcond[3]=((((-1.0)*cj2*x3343))+(((-1.0)*x3341*x3345))+((x3338*x3340))+(((-1.0)*cj1*sj2))+((r22*x3337)));
evalcond[4]=((((-1.0)*cj0*sj2*x3343))+((cj0*x3342))+((r02*x3337))+(((-1.0)*x3344*x3345))+((r01*x3348)));
evalcond[5]=(((sj0*x3342))+((r12*x3337))+(((-1.0)*sj0*sj2*x3343))+(((-1.0)*x3339*x3345))+((r11*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3349=((-1.0)*r21);
IkReal x3351 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3351)==0){
continue;
}
IkReal x3350=pow(x3351,-0.5);
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal(x3349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3352.value))));
IkReal gconst100=(x3349*x3350);
IkReal gconst101=((1.0)*r20*x3350);
CheckValue<IkReal> x3353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3354=((-1.0)*r21);
CheckValue<IkReal> x3357 = IKatan2WithCheck(IkReal(x3354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3357.valid){
continue;
}
IkReal x3355=((1.0)*(x3357.value));
IkReal x3356=x3350;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3355)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3355)));
IkReal gconst100=(x3354*x3356);
IkReal gconst101=((1.0)*r20*x3356);
IkReal x3358=r22*r22;
IkReal x3359=((1.0)*x3358);
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(((-1.0)+x3358),-1);
if(!x3363.valid){
continue;
}
IkReal x3360=x3363.value;
if((((1.0)+(((-1.0)*x3359)))) < -0.00001)
continue;
IkReal x3361=IKsqrt(((1.0)+(((-1.0)*x3359))));
IkReal x3362=(cj0*x3360*x3361);
j4eval[0]=((IKabs(((((-1.0)*x3359*x3362))+x3362)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3364=((-1.0)*r21);
CheckValue<IkReal> x3367 = IKatan2WithCheck(IkReal(x3364),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3367.valid){
continue;
}
IkReal x3365=((1.0)*(x3367.value));
IkReal x3366=x3350;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3365)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3365)));
IkReal gconst100=(x3364*x3366);
IkReal gconst101=((1.0)*r20*x3366);
IkReal x3368=r22*r22;
IkReal x3369=((1.0)*x3368);
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(((-1.0)+x3368),-1);
if(!x3373.valid){
continue;
}
IkReal x3370=x3373.value;
if((((1.0)+(((-1.0)*x3369)))) < -0.00001)
continue;
IkReal x3371=IKsqrt(((1.0)+(((-1.0)*x3369))));
IkReal x3372=(sj0*x3370*x3371);
j4eval[0]=((IKabs((x3372+(((-1.0)*x3369*x3372)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3374=((-1.0)*r21);
CheckValue<IkReal> x3377 = IKatan2WithCheck(IkReal(x3374),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3377.valid){
continue;
}
IkReal x3375=((1.0)*(x3377.value));
IkReal x3376=x3350;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3375)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3375)));
IkReal gconst100=(x3374*x3376);
IkReal gconst101=((1.0)*r20*x3376);
IkReal x3378=((1.0)*(r22*r22));
CheckValue<IkReal> x3382=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3378))),-1);
if(!x3382.valid){
continue;
}
IkReal x3379=x3382.value;
IkReal x3380=((1.0)*x3379);
IkReal x3381=((((-1.0)*x3378))+(((-2.0)*x3379*(r20*r20)*(r21*r21)))+(((-1.0)*x3380*(r21*r21*r21*r21)))+(((-1.0)*x3380*(r20*r20*r20*r20))));
j4eval[0]=x3381;
j4eval[1]=IKsign(x3381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3383=(cj1*sj2);
IkReal x3384=((1.0)*r22);
IkReal x3385=(gconst100*r21);
IkReal x3386=(gconst101*r20);
IkReal x3387=(cj2*sj1);
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3386*x3386)))+(((-1.0)*r22*x3384))+(((-1.0)*(x3385*x3385)))+(((2.0)*x3385*x3386)))),-1);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal(((((-1.0)*x3384*x3387))+(((-1.0)*x3383*x3384)))),IkReal(((((-1.0)*x3385*x3387))+(((-1.0)*x3383*x3385))+((x3383*x3386))+((x3386*x3387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3388.value)))+(x3389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKsin(j4);
IkReal x3391=IKcos(j4);
IkReal x3392=(cj1*cj2);
IkReal x3393=(gconst101*r20);
IkReal x3394=(gconst101*r10);
IkReal x3395=((1.0)*sj2);
IkReal x3396=(gconst101*r00);
IkReal x3397=((1.0)*x3391);
IkReal x3398=((1.0)*x3390);
IkReal x3399=(gconst100*x3390);
IkReal x3400=(gconst100*x3391);
evalcond[0]=((((-1.0)*r22*x3397))+((r21*x3399))+(((-1.0)*x3393*x3398)));
evalcond[1]=((((-1.0)*x3394*x3398))+cj0+((r11*x3399))+(((-1.0)*r12*x3397)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3399))+(((-1.0)*x3396*x3398))+(((-1.0)*r02*x3397)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r21*x3400))+((r22*x3390))+(((-1.0)*x3393*x3397))+(((-1.0)*cj1*x3395)));
evalcond[4]=((((-1.0)*x3396*x3397))+((cj0*x3392))+((r02*x3390))+((r01*x3400))+(((-1.0)*cj0*sj1*x3395)));
evalcond[5]=((((-1.0)*sj0*sj1*x3395))+(((-1.0)*x3394*x3397))+((r11*x3400))+((sj0*x3392))+((r12*x3390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3401=((1.0)*gconst101);
CheckValue<IkReal> x3402 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3401))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3402.valid){
continue;
}
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3401)))),-1);
if(!x3403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3402.value)+(((1.5707963267949)*(x3403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3404=IKsin(j4);
IkReal x3405=IKcos(j4);
IkReal x3406=(cj1*cj2);
IkReal x3407=(gconst101*r20);
IkReal x3408=(gconst101*r10);
IkReal x3409=((1.0)*sj2);
IkReal x3410=(gconst101*r00);
IkReal x3411=((1.0)*x3405);
IkReal x3412=((1.0)*x3404);
IkReal x3413=(gconst100*x3404);
IkReal x3414=(gconst100*x3405);
evalcond[0]=((((-1.0)*r22*x3411))+(((-1.0)*x3407*x3412))+((r21*x3413)));
evalcond[1]=(cj0+(((-1.0)*x3408*x3412))+((r11*x3413))+(((-1.0)*r12*x3411)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3411))+((r01*x3413))+(((-1.0)*x3410*x3412)));
evalcond[3]=((((-1.0)*x3407*x3411))+((r22*x3404))+((r21*x3414))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3409)));
evalcond[4]=(((r02*x3404))+((r01*x3414))+(((-1.0)*cj0*sj1*x3409))+((cj0*x3406))+(((-1.0)*x3410*x3411)));
evalcond[5]=((((-1.0)*sj0*sj1*x3409))+((sj0*x3406))+(((-1.0)*x3408*x3411))+((r11*x3414))+((r12*x3404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3415=((1.0)*gconst101);
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3415)))),-1);
if(!x3416.valid){
continue;
}
CheckValue<IkReal> x3417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3416.value)))+(x3417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3418=IKsin(j4);
IkReal x3419=IKcos(j4);
IkReal x3420=(cj1*cj2);
IkReal x3421=(gconst101*r20);
IkReal x3422=(gconst101*r10);
IkReal x3423=((1.0)*sj2);
IkReal x3424=(gconst101*r00);
IkReal x3425=((1.0)*x3419);
IkReal x3426=((1.0)*x3418);
IkReal x3427=(gconst100*x3418);
IkReal x3428=(gconst100*x3419);
evalcond[0]=((((-1.0)*r22*x3425))+((r21*x3427))+(((-1.0)*x3421*x3426)));
evalcond[1]=((((-1.0)*r12*x3425))+cj0+(((-1.0)*x3422*x3426))+((r11*x3427)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3424*x3426))+(((-1.0)*r02*x3425))+((r01*x3427)));
evalcond[3]=(((r22*x3418))+(((-1.0)*cj2*sj1))+((r21*x3428))+(((-1.0)*cj1*x3423))+(((-1.0)*x3421*x3425)));
evalcond[4]=(((r02*x3418))+(((-1.0)*x3424*x3425))+(((-1.0)*cj0*sj1*x3423))+((cj0*x3420))+((r01*x3428)));
evalcond[5]=((((-1.0)*sj0*sj1*x3423))+((r12*x3418))+((sj0*x3420))+(((-1.0)*x3422*x3425))+((r11*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3429=((-1.0)*r10);
IkReal x3431 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3431)==0){
continue;
}
IkReal x3430=pow(x3431,-0.5);
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3429),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3432.value));
IkReal gconst103=(r11*x3430);
IkReal gconst104=(x3429*x3430);
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3433.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3434=((-1.0)*r10);
IkReal x3435=x3430;
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3434),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
IkReal x3436=((-1.0)*(x3437.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3436;
IkReal gconst102=x3436;
IkReal gconst103=(r11*x3435);
IkReal gconst104=(x3434*x3435);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3438=((1.0)*sj0);
IkReal x3439=((1.0)*gconst103);
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3439)))),-1);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3438))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3439))+(((-1.0)*gconst103*r11*x3438))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3440.value)))+(x3441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3442=IKsin(j4);
IkReal x3443=IKcos(j4);
IkReal x3444=(gconst103*r11);
IkReal x3445=(cj1*cj2);
IkReal x3446=((1.0)*sj2);
IkReal x3447=((1.0)*x3443);
IkReal x3448=(gconst103*x3443);
IkReal x3449=(gconst103*x3442);
IkReal x3450=((1.0)*gconst104*x3442);
evalcond[0]=(((r21*x3449))+(((-1.0)*r20*x3450))+(((-1.0)*r22*x3447)));
evalcond[1]=(((x3442*x3444))+cj0+(((-1.0)*r10*x3450))+(((-1.0)*r12*x3447)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3447))+((r01*x3449))+(((-1.0)*r00*x3450)));
evalcond[3]=(((r21*x3448))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst104*r20*x3447))+((r22*x3442))+(((-1.0)*cj1*x3446)));
evalcond[4]=((((-1.0)*cj0*sj1*x3446))+((r02*x3442))+(((-1.0)*gconst104*r00*x3447))+((cj0*x3445))+((r01*x3448)));
evalcond[5]=(((sj0*x3445))+((r12*x3442))+(((-1.0)*sj0*sj1*x3446))+((x3443*x3444))+(((-1.0)*gconst104*r10*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=((1.0)*gconst104);
CheckValue<IkReal> x3452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3451))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3451))+(((-1.0)*gconst103*r00)))),-1);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3452.value)+(((1.5707963267949)*(x3453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKsin(j4);
IkReal x3455=IKcos(j4);
IkReal x3456=(gconst103*r11);
IkReal x3457=(cj1*cj2);
IkReal x3458=((1.0)*sj2);
IkReal x3459=((1.0)*x3455);
IkReal x3460=(gconst103*x3455);
IkReal x3461=(gconst103*x3454);
IkReal x3462=((1.0)*gconst104*x3454);
evalcond[0]=((((-1.0)*r20*x3462))+((r21*x3461))+(((-1.0)*r22*x3459)));
evalcond[1]=((((-1.0)*r10*x3462))+cj0+(((-1.0)*r12*x3459))+((x3454*x3456)));
evalcond[2]=((((-1.0)*r00*x3462))+(((-1.0)*sj0))+((r01*x3461))+(((-1.0)*r02*x3459)));
evalcond[3]=((((-1.0)*gconst104*r20*x3459))+(((-1.0)*cj2*sj1))+((r22*x3454))+(((-1.0)*cj1*x3458))+((r21*x3460)));
evalcond[4]=(((r01*x3460))+((r02*x3454))+(((-1.0)*gconst104*r00*x3459))+((cj0*x3457))+(((-1.0)*cj0*sj1*x3458)));
evalcond[5]=(((sj0*x3457))+((r12*x3454))+((x3455*x3456))+(((-1.0)*sj0*sj1*x3458))+(((-1.0)*gconst104*r10*x3459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3463=((-1.0)*r11);
IkReal x3465 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3465)==0){
continue;
}
IkReal x3464=pow(x3465,-0.5);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal(x3463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3466.value))));
IkReal gconst106=(x3463*x3464);
IkReal gconst107=((1.0)*r10*x3464);
CheckValue<IkReal> x3467 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3467.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3467.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3468=((-1.0)*r11);
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal(x3468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
IkReal x3469=((1.0)*(x3471.value));
IkReal x3470=x3464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3469)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3469)));
IkReal gconst106=(x3468*x3470);
IkReal gconst107=((1.0)*r10*x3470);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3472=((-1.0)*r11);
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal(x3472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
IkReal x3473=((1.0)*(x3475.value));
IkReal x3474=x3464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3473)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3473)));
IkReal gconst106=(x3472*x3474);
IkReal gconst107=((1.0)*r10*x3474);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3476=((-1.0)*r11);
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal(x3476),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
IkReal x3477=((1.0)*(x3479.value));
IkReal x3478=x3464;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3477)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3477)));
IkReal gconst106=(x3476*x3478);
IkReal gconst107=((1.0)*r10*x3478);
IkReal x3480=r12*r12;
IkReal x3481=((1.0)*sj0);
IkReal x3482=(cj0*r02);
IkReal x3483=x3464;
j4eval[0]=((IKabs(((((-1.0)*x3481*x3483))+((sj0*x3480*x3483))+((r12*x3482*x3483)))))+(IKabs(((((-1.0)*r12*x3481))+(((-1.0)*x3482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3484=((1.0)*sj0);
IkReal x3485=((1.0)*gconst106);
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3485))+(((-1.0)*gconst107*r21)))),-1);
if(!x3486.valid){
continue;
}
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3484))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3484))+((cj0*gconst107*r00))+(((-1.0)*cj0*r01*x3485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3486.value)))+(x3487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3488=IKsin(j4);
IkReal x3489=IKcos(j4);
IkReal x3490=(cj1*cj2);
IkReal x3491=(gconst107*r10);
IkReal x3492=(gconst107*r00);
IkReal x3493=(gconst107*r20);
IkReal x3494=((1.0)*sj1);
IkReal x3495=((1.0)*x3489);
IkReal x3496=(gconst106*x3489);
IkReal x3497=(gconst106*x3488);
IkReal x3498=((1.0)*x3488);
evalcond[0]=((((-1.0)*r22*x3495))+(((-1.0)*x3493*x3498))+((r21*x3497)));
evalcond[1]=((((-1.0)*r12*x3495))+cj0+((r11*x3497))+(((-1.0)*x3491*x3498)));
evalcond[2]=((((-1.0)*r02*x3495))+(((-1.0)*sj0))+((r01*x3497))+(((-1.0)*x3492*x3498)));
evalcond[3]=((((-1.0)*cj2*x3494))+(((-1.0)*cj1*sj2))+(((-1.0)*x3493*x3495))+((r21*x3496))+((r22*x3488)));
evalcond[4]=(((cj0*x3490))+((r01*x3496))+(((-1.0)*cj0*sj2*x3494))+(((-1.0)*x3492*x3495))+((r02*x3488)));
evalcond[5]=((((-1.0)*sj0*sj2*x3494))+((r12*x3488))+((r11*x3496))+((sj0*x3490))+(((-1.0)*x3491*x3495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3499=((1.0)*gconst107);
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3499))+((gconst106*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x3499)))),-1);
if(!x3501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3500.value)+(((1.5707963267949)*(x3501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3502=IKsin(j4);
IkReal x3503=IKcos(j4);
IkReal x3504=(cj1*cj2);
IkReal x3505=(gconst107*r10);
IkReal x3506=(gconst107*r00);
IkReal x3507=(gconst107*r20);
IkReal x3508=((1.0)*sj1);
IkReal x3509=((1.0)*x3503);
IkReal x3510=(gconst106*x3503);
IkReal x3511=(gconst106*x3502);
IkReal x3512=((1.0)*x3502);
evalcond[0]=(((r21*x3511))+(((-1.0)*r22*x3509))+(((-1.0)*x3507*x3512)));
evalcond[1]=((((-1.0)*r12*x3509))+cj0+((r11*x3511))+(((-1.0)*x3505*x3512)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3506*x3512))+((r01*x3511))+(((-1.0)*r02*x3509)));
evalcond[3]=(((r21*x3510))+(((-1.0)*cj2*x3508))+(((-1.0)*cj1*sj2))+((r22*x3502))+(((-1.0)*x3507*x3509)));
evalcond[4]=(((cj0*x3504))+(((-1.0)*x3506*x3509))+((r01*x3510))+(((-1.0)*cj0*sj2*x3508))+((r02*x3502)));
evalcond[5]=(((r12*x3502))+((r11*x3510))+((sj0*x3504))+(((-1.0)*x3505*x3509))+(((-1.0)*sj0*sj2*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3513=((1.0)*gconst107);
CheckValue<IkReal> x3514=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3513)))),-1);
if(!x3514.valid){
continue;
}
CheckValue<IkReal> x3515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3513))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3514.value)))+(x3515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3516=IKsin(j4);
IkReal x3517=IKcos(j4);
IkReal x3518=(cj1*cj2);
IkReal x3519=(gconst107*r10);
IkReal x3520=(gconst107*r00);
IkReal x3521=(gconst107*r20);
IkReal x3522=((1.0)*sj1);
IkReal x3523=((1.0)*x3517);
IkReal x3524=(gconst106*x3517);
IkReal x3525=(gconst106*x3516);
IkReal x3526=((1.0)*x3516);
evalcond[0]=(((r21*x3525))+(((-1.0)*r22*x3523))+(((-1.0)*x3521*x3526)));
evalcond[1]=((((-1.0)*x3519*x3526))+cj0+((r11*x3525))+(((-1.0)*r12*x3523)));
evalcond[2]=((((-1.0)*r02*x3523))+(((-1.0)*sj0))+((r01*x3525))+(((-1.0)*x3520*x3526)));
evalcond[3]=((((-1.0)*cj2*x3522))+((r21*x3524))+(((-1.0)*cj1*sj2))+(((-1.0)*x3521*x3523))+((r22*x3516)));
evalcond[4]=(((r01*x3524))+((cj0*x3518))+((r02*x3516))+(((-1.0)*cj0*sj2*x3522))+(((-1.0)*x3520*x3523)));
evalcond[5]=((((-1.0)*sj0*sj2*x3522))+(((-1.0)*x3519*x3523))+((r11*x3524))+((r12*x3516))+((sj0*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3527=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3527;
j4eval[1]=IKsign(x3527);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3528=((1.0)*cj5);
IkReal x3529=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3528)));
j4eval[0]=x3529;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3528))+((r21*sj5))))));
j4eval[2]=IKsign(x3529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3530=(cj5*r10);
IkReal x3531=(sj1*sj2);
IkReal x3532=(r11*sj5);
IkReal x3533=((1.0)*cj1*cj2);
IkReal x3534=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3534;
j4eval[1]=((IKabs(((((-1.0)*x3531*x3532))+(((-1.0)*x3530*x3533))+((cj1*cj2*x3532))+((x3530*x3531)))))+(IKabs((((r12*x3531))+(((-1.0)*r12*x3533))))));
j4eval[2]=IKsign(x3534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3535=(cj5*r10);
IkReal x3536=(sj1*sj2);
IkReal x3537=(r11*sj5);
IkReal x3538=((1.0)*cj1*cj2);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal(((((-1.0)*x3535*x3538))+((x3535*x3536))+(((-1.0)*x3536*x3537))+((cj1*cj2*x3537)))),IkReal((((r12*x3536))+(((-1.0)*r12*x3538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3539.value)))+(x3540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3541=IKcos(j4);
IkReal x3542=IKsin(j4);
IkReal x3543=(cj5*r00);
IkReal x3544=(cj5*r10);
IkReal x3545=(r21*sj5);
IkReal x3546=((1.0)*sj1);
IkReal x3547=(cj5*r20);
IkReal x3548=((1.0)*x3541);
IkReal x3549=((1.0)*x3542);
IkReal x3550=(sj5*x3542);
IkReal x3551=(sj5*x3541);
evalcond[0]=(((r12*x3542))+((r11*x3551))+(((-1.0)*x3544*x3548)));
evalcond[1]=(((x3542*x3545))+(((-1.0)*r22*x3548))+(((-1.0)*x3547*x3549)));
evalcond[2]=((((-1.0)*r02*x3548))+((r01*x3550))+(((-1.0)*x3543*x3549)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3548))+((r11*x3550))+(((-1.0)*x3544*x3549)));
evalcond[4]=(((r02*x3542))+(((-1.0)*sj2*x3546))+((r01*x3551))+(((-1.0)*x3543*x3548))+((cj1*cj2)));
evalcond[5]=(((x3541*x3545))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3546))+((r22*x3542))+(((-1.0)*x3547*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3552=((1.0)*cj5);
CheckValue<IkReal> x3553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3552))+(((-1.0)*r00*sj5)))),-1);
if(!x3553.valid){
continue;
}
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3552))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3553.value)))+(x3554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3555=IKcos(j4);
IkReal x3556=IKsin(j4);
IkReal x3557=(cj5*r00);
IkReal x3558=(cj5*r10);
IkReal x3559=(r21*sj5);
IkReal x3560=((1.0)*sj1);
IkReal x3561=(cj5*r20);
IkReal x3562=((1.0)*x3555);
IkReal x3563=((1.0)*x3556);
IkReal x3564=(sj5*x3556);
IkReal x3565=(sj5*x3555);
evalcond[0]=(((r12*x3556))+((r11*x3565))+(((-1.0)*x3558*x3562)));
evalcond[1]=(((x3556*x3559))+(((-1.0)*x3561*x3563))+(((-1.0)*r22*x3562)));
evalcond[2]=((((-1.0)*r02*x3562))+((r01*x3564))+(((-1.0)*x3557*x3563)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3562))+((r11*x3564))+(((-1.0)*x3558*x3563)));
evalcond[4]=((((-1.0)*sj2*x3560))+((r01*x3565))+((cj1*cj2))+(((-1.0)*x3557*x3562))+((r02*x3556)));
evalcond[5]=((((-1.0)*cj2*x3560))+(((-1.0)*x3561*x3562))+(((-1.0)*cj1*sj2))+((r22*x3556))+((x3555*x3559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3566.valid){
continue;
}
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3566.value)))+(x3567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3568=IKcos(j4);
IkReal x3569=IKsin(j4);
IkReal x3570=(cj5*r00);
IkReal x3571=(cj5*r10);
IkReal x3572=(r21*sj5);
IkReal x3573=((1.0)*sj1);
IkReal x3574=(cj5*r20);
IkReal x3575=((1.0)*x3568);
IkReal x3576=((1.0)*x3569);
IkReal x3577=(sj5*x3569);
IkReal x3578=(sj5*x3568);
evalcond[0]=((((-1.0)*x3571*x3575))+((r11*x3578))+((r12*x3569)));
evalcond[1]=(((x3569*x3572))+(((-1.0)*x3574*x3576))+(((-1.0)*r22*x3575)));
evalcond[2]=(((r01*x3577))+(((-1.0)*x3570*x3576))+(((-1.0)*r02*x3575)));
evalcond[3]=((1.0)+(((-1.0)*x3571*x3576))+((r11*x3577))+(((-1.0)*r12*x3575)));
evalcond[4]=(((r01*x3578))+(((-1.0)*sj2*x3573))+((cj1*cj2))+((r02*x3569))+(((-1.0)*x3570*x3575)));
evalcond[5]=((((-1.0)*cj2*x3573))+(((-1.0)*cj1*sj2))+((r22*x3569))+(((-1.0)*x3574*x3575))+((x3568*x3572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3579=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3579;
j4eval[1]=IKsign(x3579);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3580=((1.0)*cj5);
IkReal x3581=((((-1.0)*r21*x3580))+(((-1.0)*r20*sj5)));
j4eval[0]=x3581;
j4eval[1]=((IKabs(((((-1.0)*r00*x3580))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3582=cj5*cj5;
IkReal x3583=r11*r11;
IkReal x3584=(r11*sj5);
IkReal x3585=(cj5*r10);
IkReal x3586=((r12*r12)+((x3582*(r10*r10)))+(((-2.0)*x3584*x3585))+x3583+(((-1.0)*x3582*x3583)));
j4eval[0]=x3586;
j4eval[1]=IKsign(x3586);
j4eval[2]=((IKabs((x3584+(((-1.0)*x3585)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3587=cj5*cj5;
IkReal x3588=r11*r11;
IkReal x3589=(cj5*r10);
IkReal x3590=(r11*sj5);
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal((x3590+(((-1.0)*x3589)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3589*x3590))+(((-1.0)*x3587*x3588))+x3588+((x3587*(r10*r10))))),-1);
if(!x3592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3591.value)+(((1.5707963267949)*(x3592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3593=IKcos(j4);
IkReal x3594=IKsin(j4);
IkReal x3595=(cj5*r00);
IkReal x3596=(cj5*r10);
IkReal x3597=(r21*sj5);
IkReal x3598=((1.0)*cj2);
IkReal x3599=(cj5*r20);
IkReal x3600=((1.0)*x3593);
IkReal x3601=((1.0)*x3594);
IkReal x3602=(sj5*x3594);
IkReal x3603=(sj5*x3593);
evalcond[0]=(((r11*x3603))+((r12*x3594))+(((-1.0)*x3596*x3600)));
evalcond[1]=((((-1.0)*r22*x3600))+(((-1.0)*x3599*x3601))+((x3594*x3597)));
evalcond[2]=((((-1.0)*r02*x3600))+((r01*x3602))+(((-1.0)*x3595*x3601)));
evalcond[3]=((-1.0)+((r11*x3602))+(((-1.0)*r12*x3600))+(((-1.0)*x3596*x3601)));
evalcond[4]=((((-1.0)*cj1*x3598))+((r02*x3594))+((sj1*sj2))+((r01*x3603))+(((-1.0)*x3595*x3600)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x3593*x3597))+(((-1.0)*sj1*x3598))+(((-1.0)*x3599*x3600))+((r22*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3604=((1.0)*cj5);
CheckValue<IkReal> x3605 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x3604))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3605.valid){
continue;
}
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3604))+(((-1.0)*r20*sj5)))),-1);
if(!x3606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3605.value)+(((1.5707963267949)*(x3606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3607=IKcos(j4);
IkReal x3608=IKsin(j4);
IkReal x3609=(cj5*r00);
IkReal x3610=(cj5*r10);
IkReal x3611=(r21*sj5);
IkReal x3612=((1.0)*cj2);
IkReal x3613=(cj5*r20);
IkReal x3614=((1.0)*x3607);
IkReal x3615=((1.0)*x3608);
IkReal x3616=(sj5*x3608);
IkReal x3617=(sj5*x3607);
evalcond[0]=(((r11*x3617))+(((-1.0)*x3610*x3614))+((r12*x3608)));
evalcond[1]=(((x3608*x3611))+(((-1.0)*x3613*x3615))+(((-1.0)*r22*x3614)));
evalcond[2]=((((-1.0)*r02*x3614))+((r01*x3616))+(((-1.0)*x3609*x3615)));
evalcond[3]=((-1.0)+((r11*x3616))+(((-1.0)*r12*x3614))+(((-1.0)*x3610*x3615)));
evalcond[4]=(((r02*x3608))+((sj1*sj2))+((r01*x3617))+(((-1.0)*x3609*x3614))+(((-1.0)*cj1*x3612)));
evalcond[5]=(((r22*x3608))+(((-1.0)*cj1*sj2))+((x3607*x3611))+(((-1.0)*x3613*x3614))+(((-1.0)*sj1*x3612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3618 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3618.valid){
continue;
}
CheckValue<IkReal> x3619=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3618.value)+(((1.5707963267949)*(x3619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3620=IKcos(j4);
IkReal x3621=IKsin(j4);
IkReal x3622=(cj5*r00);
IkReal x3623=(cj5*r10);
IkReal x3624=(r21*sj5);
IkReal x3625=((1.0)*cj2);
IkReal x3626=(cj5*r20);
IkReal x3627=((1.0)*x3620);
IkReal x3628=((1.0)*x3621);
IkReal x3629=(sj5*x3621);
IkReal x3630=(sj5*x3620);
evalcond[0]=(((r11*x3630))+(((-1.0)*x3623*x3627))+((r12*x3621)));
evalcond[1]=((((-1.0)*x3626*x3628))+((x3621*x3624))+(((-1.0)*r22*x3627)));
evalcond[2]=(((r01*x3629))+(((-1.0)*x3622*x3628))+(((-1.0)*r02*x3627)));
evalcond[3]=((-1.0)+(((-1.0)*x3623*x3628))+(((-1.0)*r12*x3627))+((r11*x3629)));
evalcond[4]=((((-1.0)*x3622*x3627))+((sj1*sj2))+((r02*x3621))+(((-1.0)*cj1*x3625))+((r01*x3630)));
evalcond[5]=((((-1.0)*x3626*x3627))+(((-1.0)*sj1*x3625))+(((-1.0)*cj1*sj2))+((x3620*x3624))+((r22*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3631=((-1.0)*r00);
IkReal x3633 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3633)==0){
continue;
}
IkReal x3632=pow(x3633,-0.5);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3631),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3634.value));
IkReal gconst109=(r01*x3632);
IkReal gconst110=(x3631*x3632);
CheckValue<IkReal> x3635 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3636=((-1.0)*r00);
IkReal x3637=x3632;
CheckValue<IkReal> x3639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3636),IKFAST_ATAN2_MAGTHRESH);
if(!x3639.valid){
continue;
}
IkReal x3638=((-1.0)*(x3639.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3638;
IkReal gconst108=x3638;
IkReal gconst109=(r01*x3637);
IkReal gconst110=(x3636*x3637);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3640=((1.0)*sj0);
IkReal x3641=((1.0)*gconst109);
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3641))+(((-1.0)*gconst110*r21)))),-1);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3640))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x3641))+(((-1.0)*gconst109*r11*x3640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3642.value)))+(x3643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3644=IKsin(j4);
IkReal x3645=IKcos(j4);
IkReal x3646=((1.0)*sj2);
IkReal x3647=(cj1*cj2);
IkReal x3648=(gconst109*r21);
IkReal x3649=((1.0)*x3645);
IkReal x3650=(gconst109*x3644);
IkReal x3651=(gconst109*x3645);
IkReal x3652=((1.0)*gconst110*x3644);
evalcond[0]=((((-1.0)*r20*x3652))+(((-1.0)*r22*x3649))+((x3644*x3648)));
evalcond[1]=(cj0+((r11*x3650))+(((-1.0)*r10*x3652))+(((-1.0)*r12*x3649)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x3652))+(((-1.0)*r02*x3649))+((r01*x3650)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3646))+((r22*x3644))+(((-1.0)*gconst110*r20*x3649))+((x3645*x3648)));
evalcond[4]=((((-1.0)*gconst110*r00*x3649))+((r02*x3644))+(((-1.0)*cj0*sj1*x3646))+((cj0*x3647))+((r01*x3651)));
evalcond[5]=(((r12*x3644))+((r11*x3651))+(((-1.0)*gconst110*r10*x3649))+((sj0*x3647))+(((-1.0)*sj0*sj1*x3646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3653=((1.0)*gconst110);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3653))+(((-1.0)*gconst109*r10)))),-1);
if(!x3655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3654.value)+(((1.5707963267949)*(x3655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3656=IKsin(j4);
IkReal x3657=IKcos(j4);
IkReal x3658=((1.0)*sj2);
IkReal x3659=(cj1*cj2);
IkReal x3660=(gconst109*r21);
IkReal x3661=((1.0)*x3657);
IkReal x3662=(gconst109*x3656);
IkReal x3663=(gconst109*x3657);
IkReal x3664=((1.0)*gconst110*x3656);
evalcond[0]=(((x3656*x3660))+(((-1.0)*r20*x3664))+(((-1.0)*r22*x3661)));
evalcond[1]=(cj0+((r11*x3662))+(((-1.0)*r10*x3664))+(((-1.0)*r12*x3661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3661))+((r01*x3662))+(((-1.0)*r00*x3664)));
evalcond[3]=((((-1.0)*cj2*sj1))+((x3657*x3660))+(((-1.0)*cj1*x3658))+(((-1.0)*gconst110*r20*x3661))+((r22*x3656)));
evalcond[4]=((((-1.0)*gconst110*r00*x3661))+((r01*x3663))+((r02*x3656))+((cj0*x3659))+(((-1.0)*cj0*sj1*x3658)));
evalcond[5]=((((-1.0)*sj0*sj1*x3658))+((r12*x3656))+((r11*x3663))+((sj0*x3659))+(((-1.0)*gconst110*r10*x3661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3665=((-1.0)*r01);
IkReal x3667 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3667)==0){
continue;
}
IkReal x3666=pow(x3667,-0.5);
CheckValue<IkReal> x3668 = IKatan2WithCheck(IkReal(x3665),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3668.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3668.value))));
IkReal gconst112=(x3665*x3666);
IkReal gconst113=((1.0)*r00*x3666);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3670=((-1.0)*r01);
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(x3670),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
IkReal x3671=((1.0)*(x3673.value));
IkReal x3672=x3666;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3671)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3671)));
IkReal gconst112=(x3670*x3672);
IkReal gconst113=((1.0)*r00*x3672);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3674=((-1.0)*r01);
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal(x3674),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
IkReal x3675=((1.0)*(x3677.value));
IkReal x3676=x3666;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3675)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3675)));
IkReal gconst112=(x3674*x3676);
IkReal gconst113=((1.0)*r00*x3676);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3678=((-1.0)*r01);
CheckValue<IkReal> x3681 = IKatan2WithCheck(IkReal(x3678),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3681.valid){
continue;
}
IkReal x3679=((1.0)*(x3681.value));
IkReal x3680=x3666;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3679)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3679)));
IkReal gconst112=(x3678*x3680);
IkReal gconst113=((1.0)*r00*x3680);
IkReal x3682=r02*r02;
IkReal x3683=(r12*sj0);
IkReal x3684=((1.0)*cj0);
IkReal x3685=x3666;
j4eval[0]=((IKabs((((r02*x3683*x3685))+(((-1.0)*x3684*x3685))+((cj0*x3682*x3685)))))+(IKabs(((((-1.0)*x3683))+(((-1.0)*r02*x3684))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3686=((1.0)*sj0);
IkReal x3687=((1.0)*gconst112);
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3687))+(((-1.0)*gconst113*r21)))),-1);
if(!x3688.valid){
continue;
}
CheckValue<IkReal> x3689 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3686)))),IkReal(((((-1.0)*gconst112*r11*x3686))+(((-1.0)*cj0*r01*x3687))+((gconst113*r10*sj0))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3688.value)))+(x3689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3690=IKsin(j4);
IkReal x3691=IKcos(j4);
IkReal x3692=(cj1*cj2);
IkReal x3693=(gconst113*r20);
IkReal x3694=(gconst112*r21);
IkReal x3695=(gconst113*r00);
IkReal x3696=((1.0)*sj2);
IkReal x3697=(gconst113*r10);
IkReal x3698=((1.0)*x3691);
IkReal x3699=((1.0)*x3690);
IkReal x3700=(gconst112*x3691);
IkReal x3701=(gconst112*x3690);
evalcond[0]=((((-1.0)*r22*x3698))+((x3690*x3694))+(((-1.0)*x3693*x3699)));
evalcond[1]=(cj0+((r11*x3701))+(((-1.0)*r12*x3698))+(((-1.0)*x3697*x3699)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3701))+(((-1.0)*r02*x3698))+(((-1.0)*x3695*x3699)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3696))+((r22*x3690))+((x3691*x3694))+(((-1.0)*x3693*x3698)));
evalcond[4]=(((cj0*x3692))+((r01*x3700))+((r02*x3690))+(((-1.0)*cj0*sj1*x3696))+(((-1.0)*x3695*x3698)));
evalcond[5]=(((r11*x3700))+(((-1.0)*x3697*x3698))+(((-1.0)*sj0*sj1*x3696))+((sj0*x3692))+((r12*x3690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3702=((1.0)*gconst113);
CheckValue<IkReal> x3703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3702))+(((-1.0)*gconst112*r10)))),-1);
if(!x3703.valid){
continue;
}
CheckValue<IkReal> x3704 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3703.value)))+(x3704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3705=IKsin(j4);
IkReal x3706=IKcos(j4);
IkReal x3707=(cj1*cj2);
IkReal x3708=(gconst113*r20);
IkReal x3709=(gconst112*r21);
IkReal x3710=(gconst113*r00);
IkReal x3711=((1.0)*sj2);
IkReal x3712=(gconst113*r10);
IkReal x3713=((1.0)*x3706);
IkReal x3714=((1.0)*x3705);
IkReal x3715=(gconst112*x3706);
IkReal x3716=(gconst112*x3705);
evalcond[0]=(((x3705*x3709))+(((-1.0)*x3708*x3714))+(((-1.0)*r22*x3713)));
evalcond[1]=(((r11*x3716))+cj0+(((-1.0)*r12*x3713))+(((-1.0)*x3712*x3714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3713))+(((-1.0)*x3710*x3714))+((r01*x3716)));
evalcond[3]=((((-1.0)*cj1*x3711))+(((-1.0)*cj2*sj1))+(((-1.0)*x3708*x3713))+((r22*x3705))+((x3706*x3709)));
evalcond[4]=((((-1.0)*x3710*x3713))+((r01*x3715))+((cj0*x3707))+((r02*x3705))+(((-1.0)*cj0*sj1*x3711)));
evalcond[5]=(((sj0*x3707))+((r11*x3715))+((r12*x3705))+(((-1.0)*sj0*sj1*x3711))+(((-1.0)*x3712*x3713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3717=((1.0)*gconst113);
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3717))+(((-1.0)*gconst112*r00)))),-1);
if(!x3718.valid){
continue;
}
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3717))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3718.value)))+(x3719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3720=IKsin(j4);
IkReal x3721=IKcos(j4);
IkReal x3722=(cj1*cj2);
IkReal x3723=(gconst113*r20);
IkReal x3724=(gconst112*r21);
IkReal x3725=(gconst113*r00);
IkReal x3726=((1.0)*sj2);
IkReal x3727=(gconst113*r10);
IkReal x3728=((1.0)*x3721);
IkReal x3729=((1.0)*x3720);
IkReal x3730=(gconst112*x3721);
IkReal x3731=(gconst112*x3720);
evalcond[0]=((((-1.0)*r22*x3728))+(((-1.0)*x3723*x3729))+((x3720*x3724)));
evalcond[1]=(cj0+(((-1.0)*r12*x3728))+(((-1.0)*x3727*x3729))+((r11*x3731)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3731))+(((-1.0)*x3725*x3729))+(((-1.0)*r02*x3728)));
evalcond[3]=((((-1.0)*cj1*x3726))+(((-1.0)*cj2*sj1))+((r22*x3720))+(((-1.0)*x3723*x3728))+((x3721*x3724)));
evalcond[4]=(((r01*x3730))+(((-1.0)*x3725*x3728))+((r02*x3720))+((cj0*x3722))+(((-1.0)*cj0*sj1*x3726)));
evalcond[5]=((((-1.0)*sj0*sj1*x3726))+(((-1.0)*x3727*x3728))+((r11*x3730))+((sj0*x3722))+((r12*x3720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3732=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3732;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3733=((1.0)*cj5);
IkReal x3734=((((-1.0)*r11*x3733))+(((-1.0)*r10*sj5)));
j4eval[0]=x3734;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3733)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3735=cj5*cj5;
IkReal x3736=r01*r01;
IkReal x3737=(cj5*r00);
IkReal x3738=(r01*sj5);
IkReal x3739=(((x3735*(r00*r00)))+(((-2.0)*x3737*x3738))+(((-1.0)*x3735*x3736))+x3736+(r02*r02));
j4eval[0]=x3739;
j4eval[1]=IKsign(x3739);
j4eval[2]=((IKabs(r02))+(IKabs((x3738+(((-1.0)*x3737))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3740=cj5*cj5;
IkReal x3741=r01*r01;
IkReal x3742=(r01*sj5);
IkReal x3743=(cj5*r00);
CheckValue<IkReal> x3744 = IKatan2WithCheck(IkReal((x3742+(((-1.0)*x3743)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3744.valid){
continue;
}
CheckValue<IkReal> x3745=IKPowWithIntegerCheck(IKsign((x3741+(((-1.0)*x3740*x3741))+((x3740*(r00*r00)))+(((-2.0)*x3742*x3743))+(r02*r02))),-1);
if(!x3745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3744.value)+(((1.5707963267949)*(x3745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3746=IKcos(j4);
IkReal x3747=IKsin(j4);
IkReal x3748=(cj5*r00);
IkReal x3749=(cj5*r10);
IkReal x3750=(r21*sj5);
IkReal x3751=((1.0)*sj1);
IkReal x3752=(cj5*r20);
IkReal x3753=((1.0)*x3746);
IkReal x3754=((1.0)*x3747);
IkReal x3755=(sj5*x3747);
IkReal x3756=(sj5*x3746);
evalcond[0]=((((-1.0)*x3748*x3753))+((r01*x3756))+((r02*x3747)));
evalcond[1]=((((-1.0)*x3752*x3754))+(((-1.0)*r22*x3753))+((x3747*x3750)));
evalcond[2]=((((-1.0)*x3749*x3754))+(((-1.0)*r12*x3753))+((r11*x3755)));
evalcond[3]=((-1.0)+(((-1.0)*x3748*x3754))+((r01*x3755))+(((-1.0)*r02*x3753)));
evalcond[4]=((((-1.0)*x3749*x3753))+((r12*x3747))+((r11*x3756))+(((-1.0)*sj2*x3751))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3752*x3753))+(((-1.0)*cj2*x3751))+(((-1.0)*cj1*sj2))+((r22*x3747))+((x3746*x3750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3757=((1.0)*cj5);
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3757))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3757)))),-1);
if(!x3759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3758.value)+(((1.5707963267949)*(x3759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3760=IKcos(j4);
IkReal x3761=IKsin(j4);
IkReal x3762=(cj5*r00);
IkReal x3763=(cj5*r10);
IkReal x3764=(r21*sj5);
IkReal x3765=((1.0)*sj1);
IkReal x3766=(cj5*r20);
IkReal x3767=((1.0)*x3760);
IkReal x3768=((1.0)*x3761);
IkReal x3769=(sj5*x3761);
IkReal x3770=(sj5*x3760);
evalcond[0]=((((-1.0)*x3762*x3767))+((r02*x3761))+((r01*x3770)));
evalcond[1]=((((-1.0)*r22*x3767))+((x3761*x3764))+(((-1.0)*x3766*x3768)));
evalcond[2]=((((-1.0)*x3763*x3768))+((r11*x3769))+(((-1.0)*r12*x3767)));
evalcond[3]=((-1.0)+(((-1.0)*x3762*x3768))+(((-1.0)*r02*x3767))+((r01*x3769)));
evalcond[4]=((((-1.0)*sj2*x3765))+(((-1.0)*x3763*x3767))+((r11*x3770))+((cj1*cj2))+((r12*x3761)));
evalcond[5]=(((r22*x3761))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3765))+((x3760*x3764))+(((-1.0)*x3766*x3767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3771.valid){
continue;
}
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3771.value)))+(x3772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3773=IKcos(j4);
IkReal x3774=IKsin(j4);
IkReal x3775=(cj5*r00);
IkReal x3776=(cj5*r10);
IkReal x3777=(r21*sj5);
IkReal x3778=((1.0)*sj1);
IkReal x3779=(cj5*r20);
IkReal x3780=((1.0)*x3773);
IkReal x3781=((1.0)*x3774);
IkReal x3782=(sj5*x3774);
IkReal x3783=(sj5*x3773);
evalcond[0]=(((r02*x3774))+((r01*x3783))+(((-1.0)*x3775*x3780)));
evalcond[1]=((((-1.0)*x3779*x3781))+(((-1.0)*r22*x3780))+((x3774*x3777)));
evalcond[2]=((((-1.0)*r12*x3780))+(((-1.0)*x3776*x3781))+((r11*x3782)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3780))+((r01*x3782))+(((-1.0)*x3775*x3781)));
evalcond[4]=((((-1.0)*sj2*x3778))+((cj1*cj2))+((r12*x3774))+(((-1.0)*x3776*x3780))+((r11*x3783)));
evalcond[5]=(((r22*x3774))+(((-1.0)*x3779*x3780))+((x3773*x3777))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3784=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3784;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3785=((1.0)*cj5);
IkReal x3786=((((-1.0)*r21*x3785))+(((-1.0)*r20*sj5)));
j4eval[0]=x3786;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3785))))));
j4eval[2]=IKsign(x3786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3787=(sj1*sj2);
IkReal x3788=(r01*sj5);
IkReal x3789=(cj1*cj2);
IkReal x3790=((1.0)*cj5);
IkReal x3791=((((-1.0)*r21*x3790))+(((-1.0)*r20*sj5)));
j4eval[0]=x3791;
j4eval[1]=((IKabs((((x3787*x3788))+(((-1.0)*r00*x3787*x3790))+(((-1.0)*x3788*x3789))+((cj5*r00*x3789)))))+(IKabs((((r02*x3789))+(((-1.0)*r02*x3787))))));
j4eval[2]=IKsign(x3791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3792=(sj1*sj2);
IkReal x3793=(r01*sj5);
IkReal x3794=(cj1*cj2);
IkReal x3795=((1.0)*cj5);
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3795))+(((-1.0)*r20*sj5)))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal((((x3792*x3793))+((cj5*r00*x3794))+(((-1.0)*r00*x3792*x3795))+(((-1.0)*x3793*x3794)))),IkReal((((r02*x3794))+(((-1.0)*r02*x3792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3796.value)))+(x3797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKcos(j4);
IkReal x3799=IKsin(j4);
IkReal x3800=(cj5*r00);
IkReal x3801=(cj5*r10);
IkReal x3802=(r21*sj5);
IkReal x3803=((1.0)*cj2);
IkReal x3804=(cj5*r20);
IkReal x3805=((1.0)*x3798);
IkReal x3806=((1.0)*x3799);
IkReal x3807=(sj5*x3799);
IkReal x3808=(sj5*x3798);
evalcond[0]=(((r01*x3808))+((r02*x3799))+(((-1.0)*x3800*x3805)));
evalcond[1]=(((x3799*x3802))+(((-1.0)*x3804*x3806))+(((-1.0)*r22*x3805)));
evalcond[2]=(((r11*x3807))+(((-1.0)*x3801*x3806))+(((-1.0)*r12*x3805)));
evalcond[3]=((1.0)+((r01*x3807))+(((-1.0)*x3800*x3806))+(((-1.0)*r02*x3805)));
evalcond[4]=(((r11*x3808))+(((-1.0)*x3801*x3805))+((sj1*sj2))+(((-1.0)*cj1*x3803))+((r12*x3799)));
evalcond[5]=(((r22*x3799))+(((-1.0)*sj1*x3803))+(((-1.0)*cj1*sj2))+((x3798*x3802))+(((-1.0)*x3804*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3809=((1.0)*cj5);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3809))+(((-1.0)*r20*sj5)))),-1);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKcos(j4);
IkReal x3813=IKsin(j4);
IkReal x3814=(cj5*r00);
IkReal x3815=(cj5*r10);
IkReal x3816=(r21*sj5);
IkReal x3817=((1.0)*cj2);
IkReal x3818=(cj5*r20);
IkReal x3819=((1.0)*x3812);
IkReal x3820=((1.0)*x3813);
IkReal x3821=(sj5*x3813);
IkReal x3822=(sj5*x3812);
evalcond[0]=((((-1.0)*x3814*x3819))+((r02*x3813))+((r01*x3822)));
evalcond[1]=((((-1.0)*r22*x3819))+((x3813*x3816))+(((-1.0)*x3818*x3820)));
evalcond[2]=((((-1.0)*r12*x3819))+(((-1.0)*x3815*x3820))+((r11*x3821)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3819))+(((-1.0)*x3814*x3820))+((r01*x3821)));
evalcond[4]=(((r12*x3813))+(((-1.0)*x3815*x3819))+((r11*x3822))+(((-1.0)*cj1*x3817))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x3817))+(((-1.0)*cj1*sj2))+((r22*x3813))+(((-1.0)*x3818*x3819))+((x3812*x3816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3823.value)+(((1.5707963267949)*(x3824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3825=IKcos(j4);
IkReal x3826=IKsin(j4);
IkReal x3827=(cj5*r00);
IkReal x3828=(cj5*r10);
IkReal x3829=(r21*sj5);
IkReal x3830=((1.0)*cj2);
IkReal x3831=(cj5*r20);
IkReal x3832=((1.0)*x3825);
IkReal x3833=((1.0)*x3826);
IkReal x3834=(sj5*x3826);
IkReal x3835=(sj5*x3825);
evalcond[0]=(((r01*x3835))+((r02*x3826))+(((-1.0)*x3827*x3832)));
evalcond[1]=(((x3826*x3829))+(((-1.0)*x3831*x3833))+(((-1.0)*r22*x3832)));
evalcond[2]=((((-1.0)*x3828*x3833))+(((-1.0)*r12*x3832))+((r11*x3834)));
evalcond[3]=((1.0)+((r01*x3834))+(((-1.0)*x3827*x3833))+(((-1.0)*r02*x3832)));
evalcond[4]=(((r12*x3826))+(((-1.0)*x3828*x3832))+((sj1*sj2))+((r11*x3835))+(((-1.0)*cj1*x3830)));
evalcond[5]=((((-1.0)*x3831*x3832))+((x3825*x3829))+(((-1.0)*cj1*sj2))+((r22*x3826))+(((-1.0)*sj1*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3836=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3836);
rxp1_1=(px*r21);
rxp1_2=(r11*x3836);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3837=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3837);
rxp1_1=(px*r21);
rxp1_2=(r11*x3837);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3838=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3838);
rxp1_1=(px*r21);
rxp1_2=(r11*x3838);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3841=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3841.valid){
continue;
}
IkReal x3839=x3841.value;
IkReal x3840=(sj0*x3839);
cj4array[0]=((((-1.0)*cj1*cj2*x3840))+((sj1*sj2*x3840)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3842=IKsin(j4);
IkReal x3843=IKcos(j4);
IkReal x3844=(r21*sj5);
IkReal x3845=((1.0)*cj5*r20);
evalcond[0]=(r02*x3842);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3843)));
evalcond[2]=((((-1.0)*x3842*x3845))+((x3842*x3844)));
evalcond[3]=(((r11*sj5*x3842))+(((-1.0)*cj5*r10*x3842)));
evalcond[4]=((((-1.0)*x3843*x3845))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x3843*x3844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3847=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3847.valid){
continue;
}
IkReal x3846=x3847.value;
cj4array[0]=(((cj2*sj1*x3846))+((cj1*sj2*x3846)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3848=IKsin(j4);
IkReal x3849=IKcos(j4);
IkReal x3850=((1.0)*sj0);
IkReal x3851=((1.0)*cj5);
IkReal x3852=(sj5*x3848);
evalcond[0]=(r02*x3848);
evalcond[1]=((((-1.0)*x3850))+(((-1.0)*r02*x3849)));
evalcond[2]=(((r21*x3852))+(((-1.0)*r20*x3848*x3851)));
evalcond[3]=(((r11*x3852))+(((-1.0)*r10*x3848*x3851)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x3849))+(((-1.0)*sj1*sj2*x3850))+(((-1.0)*r10*x3849*x3851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(r02,-1);
if(!x3853.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3853.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3854=IKsin(j4);
IkReal x3855=IKcos(j4);
IkReal x3856=((1.0)*sj1);
IkReal x3857=(r21*sj5);
IkReal x3858=(r11*sj5);
IkReal x3859=((1.0)*cj5*x3855);
IkReal x3860=((1.0)*cj5*x3854);
evalcond[0]=(r02*x3854);
evalcond[1]=(((x3854*x3857))+(((-1.0)*r20*x3860)));
evalcond[2]=(((x3854*x3858))+(((-1.0)*r10*x3860)));
evalcond[3]=((((-1.0)*cj2*x3856))+(((-1.0)*r20*x3859))+(((-1.0)*cj1*sj2))+((x3855*x3857)));
evalcond[4]=(((cj1*cj2*sj0))+((x3855*x3858))+(((-1.0)*r10*x3859))+(((-1.0)*sj0*sj2*x3856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3861=((1.0)*sj0);
IkReal x3862=((1.0)*cj0);
CheckValue<IkReal> x3863 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3862))+(((-1.0)*r12*x3861)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x3861))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3863.valid){
continue;
}
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3863.value)+(((1.5707963267949)*(x3864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3865=IKsin(j4);
IkReal x3866=IKcos(j4);
IkReal x3867=(cj5*r00);
IkReal x3868=(cj1*cj2);
IkReal x3869=(cj5*r10);
IkReal x3870=(r21*sj5);
IkReal x3871=((1.0)*sj1);
IkReal x3872=(cj5*r20);
IkReal x3873=((1.0)*x3866);
IkReal x3874=((1.0)*x3865);
IkReal x3875=(sj5*x3865);
IkReal x3876=(sj5*x3866);
evalcond[0]=(((x3865*x3870))+(((-1.0)*r22*x3873))+(((-1.0)*x3872*x3874)));
evalcond[1]=(cj0+(((-1.0)*r12*x3873))+(((-1.0)*x3869*x3874))+((r11*x3875)));
evalcond[2]=((((-1.0)*x3867*x3874))+(((-1.0)*sj0))+((r01*x3875))+(((-1.0)*r02*x3873)));
evalcond[3]=(((x3866*x3870))+(((-1.0)*cj1*sj2))+((r22*x3865))+(((-1.0)*cj2*x3871))+(((-1.0)*x3872*x3873)));
evalcond[4]=((((-1.0)*x3867*x3873))+((r02*x3865))+((r01*x3876))+(((-1.0)*cj0*sj2*x3871))+((cj0*x3868)));
evalcond[5]=((((-1.0)*sj0*sj2*x3871))+(((-1.0)*x3869*x3873))+((r11*x3876))+((sj0*x3868))+((r12*x3865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3877=((1.0)*cj5);
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3877)))),-1);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3877))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3878.value)))+(x3879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3880=IKsin(j4);
IkReal x3881=IKcos(j4);
IkReal x3882=(cj5*r00);
IkReal x3883=(cj1*cj2);
IkReal x3884=(cj5*r10);
IkReal x3885=(r21*sj5);
IkReal x3886=((1.0)*sj1);
IkReal x3887=(cj5*r20);
IkReal x3888=((1.0)*x3881);
IkReal x3889=((1.0)*x3880);
IkReal x3890=(sj5*x3880);
IkReal x3891=(sj5*x3881);
evalcond[0]=(((x3880*x3885))+(((-1.0)*r22*x3888))+(((-1.0)*x3887*x3889)));
evalcond[1]=(cj0+((r11*x3890))+(((-1.0)*x3884*x3889))+(((-1.0)*r12*x3888)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3888))+((r01*x3890))+(((-1.0)*x3882*x3889)));
evalcond[3]=(((r22*x3880))+(((-1.0)*cj1*sj2))+((x3881*x3885))+(((-1.0)*cj2*x3886))+(((-1.0)*x3887*x3888)));
evalcond[4]=((((-1.0)*cj0*sj2*x3886))+((cj0*x3883))+((r01*x3891))+((r02*x3880))+(((-1.0)*x3882*x3888)));
evalcond[5]=(((sj0*x3883))+((r12*x3880))+((r11*x3891))+(((-1.0)*x3884*x3888))+(((-1.0)*sj0*sj2*x3886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3892=((1.0)*cj5);
CheckValue<IkReal> x3893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3892)))),-1);
if(!x3893.valid){
continue;
}
CheckValue<IkReal> x3894 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3893.value)))+(x3894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3895=IKsin(j4);
IkReal x3896=IKcos(j4);
IkReal x3897=(cj5*r00);
IkReal x3898=(cj1*cj2);
IkReal x3899=(cj5*r10);
IkReal x3900=(r21*sj5);
IkReal x3901=((1.0)*sj1);
IkReal x3902=(cj5*r20);
IkReal x3903=((1.0)*x3896);
IkReal x3904=((1.0)*x3895);
IkReal x3905=(sj5*x3895);
IkReal x3906=(sj5*x3896);
evalcond[0]=((((-1.0)*x3902*x3904))+(((-1.0)*r22*x3903))+((x3895*x3900)));
evalcond[1]=((((-1.0)*r12*x3903))+cj0+(((-1.0)*x3899*x3904))+((r11*x3905)));
evalcond[2]=((((-1.0)*x3897*x3904))+(((-1.0)*sj0))+((r01*x3905))+(((-1.0)*r02*x3903)));
evalcond[3]=((((-1.0)*x3902*x3903))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3901))+((r22*x3895))+((x3896*x3900)));
evalcond[4]=((((-1.0)*x3897*x3903))+((cj0*x3898))+((r01*x3906))+(((-1.0)*cj0*sj2*x3901))+((r02*x3895)));
evalcond[5]=(((sj0*x3898))+(((-1.0)*x3899*x3903))+((r12*x3895))+((r11*x3906))+(((-1.0)*sj0*sj2*x3901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3907=r21*r21;
IkReal x3908=cj5*cj5;
IkReal x3909=(cj1*sj2);
IkReal x3910=((1.0)*r22);
IkReal x3911=(cj5*r20);
IkReal x3912=(r21*sj5);
IkReal x3913=(cj2*sj1);
CheckValue<IkReal> x3914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x3910))+(((-1.0)*x3907))+((x3907*x3908))+(((-1.0)*x3908*(r20*r20)))+(((2.0)*x3911*x3912)))),-1);
if(!x3914.valid){
continue;
}
CheckValue<IkReal> x3915 = IKatan2WithCheck(IkReal(((((-1.0)*x3909*x3910))+(((-1.0)*x3910*x3913)))),IkReal(((((-1.0)*x3909*x3912))+(((-1.0)*x3912*x3913))+((x3911*x3913))+((x3909*x3911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3914.value)))+(x3915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3916=IKsin(j4);
IkReal x3917=IKcos(j4);
IkReal x3918=(r21*sj5);
IkReal x3919=(cj5*r20);
IkReal x3920=((1.0)*x3917);
evalcond[0]=((((-1.0)*x3916*x3919))+(((-1.0)*r22*x3920))+((x3916*x3918)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3919*x3920))+((x3917*x3918))+((r22*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3921=(cj5*sj4);
IkReal x3922=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3921))+((r01*x3922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3922))+((r10*x3921))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3921))+((r01*x3922))))+IKsqr(((((-1.0)*r11*x3922))+((r10*x3921))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x3921))+((r01*x3922))), ((((-1.0)*r11*x3922))+((r10*x3921))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3923=IKcos(j0);
IkReal x3924=IKsin(j0);
IkReal x3925=((0.39225)*cj1);
IkReal x3926=((1.0)*sj1);
IkReal x3927=(r11*sj5);
IkReal x3928=(cj5*r11);
IkReal x3929=((1.0)*r00);
IkReal x3930=(cj4*cj5);
IkReal x3931=((1.0)*r10);
IkReal x3932=((0.425)*sj1);
IkReal x3933=((0.09465)*sj5);
IkReal x3934=(cj5*r01);
IkReal x3935=(cj5*sj4);
IkReal x3936=((1.0)*cj4);
IkReal x3937=(r01*sj5);
IkReal x3938=((0.39225)*sj1);
IkReal x3939=(sj2*x3924);
IkReal x3940=(cj1*x3923);
IkReal x3941=(cj2*x3924);
IkReal x3942=(cj2*x3923);
IkReal x3943=(sj2*x3923);
evalcond[0]=((((-1.0)*x3931*x3935))+x3923+(((-1.0)*r12*x3936))+((sj4*x3927)));
evalcond[1]=((((-1.0)*x3929*x3935))+(((-1.0)*x3924))+((sj4*x3937))+(((-1.0)*r02*x3936)));
evalcond[2]=((((-1.0)*x3934))+(((-1.0)*x3926*x3942))+(((-1.0)*sj2*x3940))+(((-1.0)*sj5*x3929)));
evalcond[3]=((((-1.0)*cj1*x3939))+(((-1.0)*x3928))+(((-1.0)*sj5*x3931))+(((-1.0)*x3926*x3941)));
evalcond[4]=(((cj2*x3940))+(((-1.0)*x3929*x3930))+((r02*sj4))+(((-1.0)*x3926*x3943))+((cj4*x3937)));
evalcond[5]=((((-1.0)*x3926*x3939))+(((-1.0)*x3930*x3931))+((r12*sj4))+((cj4*x3927))+((cj1*x3941)));
evalcond[6]=(((x3923*x3932))+(((-0.10915)*x3924))+(((-0.09465)*x3934))+(((-1.0)*r00*x3933))+(((-1.0)*px))+((x3938*x3942))+((x3925*x3943)));
evalcond[7]=((((-0.09465)*x3928))+(((-1.0)*py))+((x3938*x3941))+(((0.10915)*x3923))+(((-1.0)*r10*x3933))+((x3925*x3939))+((x3924*x3932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3944 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3944.valid){
continue;
}
CheckValue<IkReal> x3945=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x3945.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3944.value)+(((1.5707963267949)*(x3945.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3946=IKcos(j0);
IkReal x3947=IKsin(j0);
IkReal x3948=(cj1*sj2);
IkReal x3949=(cj5*r11);
IkReal x3950=((1.0)*sj5);
IkReal x3951=(cj2*sj1);
IkReal x3952=((0.425)*sj1);
IkReal x3953=((0.09465)*sj5);
IkReal x3954=(cj5*r01);
IkReal x3955=((0.39225)*x3947);
IkReal x3956=((1.0)*x3946);
IkReal x3957=((1.0)*x3947);
IkReal x3958=((0.39225)*x3946);
evalcond[0]=((((-1.0)*x3948*x3956))+(((-1.0)*x3954))+(((-1.0)*r00*x3950))+(((-1.0)*x3951*x3956)));
evalcond[1]=((((-1.0)*x3948*x3957))+(((-1.0)*x3949))+(((-1.0)*x3951*x3957))+(((-1.0)*r10*x3950)));
evalcond[2]=((((-0.10915)*x3947))+(((-0.09465)*x3954))+(((-1.0)*r00*x3953))+((x3948*x3958))+(((-1.0)*px))+((x3946*x3952))+((x3951*x3958)));
evalcond[3]=((((-0.09465)*x3949))+((x3948*x3955))+(((-1.0)*py))+((x3947*x3952))+(((0.10915)*x3946))+((x3951*x3955))+(((-1.0)*r10*x3953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3959=((1.0)*cj5);
IkReal x3960=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3959)));
j4eval[0]=x3960;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3959))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3961=((1.0)*cj5);
IkReal x3962=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3961)));
j4eval[0]=x3962;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3961))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3963=((1.0)*sj0);
IkReal x3964=((1.0)*cj0);
IkReal x3965=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3965;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3964))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3963)))))+(IKabs(((((-1.0)*r02*x3964))+(((-1.0)*r12*x3963))))));
j4eval[2]=IKsign(x3965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3966=((-1.0)*r20);
IkReal x3968 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3968)==0){
continue;
}
IkReal x3967=pow(x3968,-0.5);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3966),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3969.value));
IkReal gconst97=(r21*x3967);
IkReal gconst98=(x3966*x3967);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3971=((-1.0)*r20);
IkReal x3972=x3967;
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3971),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3973=((-1.0)*(x3974.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3973;
IkReal gconst96=x3973;
IkReal gconst97=(r21*x3972);
IkReal gconst98=(x3971*x3972);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3975=((-1.0)*r20);
IkReal x3976=x3967;
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3975),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
IkReal x3977=((-1.0)*(x3978.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3977;
IkReal gconst96=x3977;
IkReal gconst97=(r21*x3976);
IkReal gconst98=(x3975*x3976);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3979=((-1.0)*r20);
IkReal x3980=x3967;
CheckValue<IkReal> x3982 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3979),IKFAST_ATAN2_MAGTHRESH);
if(!x3982.valid){
continue;
}
IkReal x3981=((-1.0)*(x3982.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3981;
IkReal gconst96=x3981;
IkReal gconst97=(r21*x3980);
IkReal gconst98=(x3979*x3980);
IkReal x3983=((1.0)*(r22*r22));
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3983))),-1);
if(!x3987.valid){
continue;
}
IkReal x3984=x3987.value;
IkReal x3985=((1.0)*x3984);
IkReal x3986=((((-1.0)*x3985*(r20*r20*r20*r20)))+(((-1.0)*x3985*(r21*r21*r21*r21)))+(((-2.0)*x3984*(r20*r20)*(r21*r21)))+(((-1.0)*x3983)));
j4eval[0]=x3986;
j4eval[1]=IKsign(x3986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=(cj2*sj1);
IkReal x3989=(gconst98*r20);
IkReal x3990=(gconst97*r21);
IkReal x3991=((1.0)*cj1*sj2);
CheckValue<IkReal> x3992 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3988))+(((-1.0)*r22*x3991)))),IkReal((((x3988*x3989))+(((-1.0)*x3988*x3990))+(((-1.0)*x3990*x3991))+((cj1*sj2*x3989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3989*x3989)))+(((2.0)*x3989*x3990))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3990*x3990))))),-1);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3992.value)+(((1.5707963267949)*(x3993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=(gconst98*r10);
IkReal x3997=(gconst97*r21);
IkReal x3998=(gconst98*r20);
IkReal x3999=(cj1*cj2);
IkReal x4000=((1.0)*sj1);
IkReal x4001=(gconst98*r00);
IkReal x4002=((1.0)*x3995);
IkReal x4003=((1.0)*x3994);
IkReal x4004=(gconst97*x3994);
IkReal x4005=(gconst97*x3995);
evalcond[0]=(((x3994*x3997))+(((-1.0)*r22*x4002))+(((-1.0)*x3998*x4003)));
evalcond[1]=(cj0+(((-1.0)*x3996*x4003))+(((-1.0)*r12*x4002))+((r11*x4004)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4002))+((r01*x4004))+(((-1.0)*x4001*x4003)));
evalcond[3]=((((-1.0)*x3998*x4002))+((x3995*x3997))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4000))+((r22*x3994)));
evalcond[4]=(((r01*x4005))+(((-1.0)*x4001*x4002))+((r02*x3994))+(((-1.0)*cj0*sj2*x4000))+((cj0*x3999)));
evalcond[5]=(((r12*x3994))+(((-1.0)*x3996*x4002))+((sj0*x3999))+(((-1.0)*sj0*sj2*x4000))+((r11*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4006=((1.0)*gconst98);
CheckValue<IkReal> x4007 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4007.valid){
continue;
}
CheckValue<IkReal> x4008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4006))+(((-1.0)*gconst97*r10)))),-1);
if(!x4008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4007.value)+(((1.5707963267949)*(x4008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4009=IKsin(j4);
IkReal x4010=IKcos(j4);
IkReal x4011=(gconst98*r10);
IkReal x4012=(gconst97*r21);
IkReal x4013=(gconst98*r20);
IkReal x4014=(cj1*cj2);
IkReal x4015=((1.0)*sj1);
IkReal x4016=(gconst98*r00);
IkReal x4017=((1.0)*x4010);
IkReal x4018=((1.0)*x4009);
IkReal x4019=(gconst97*x4009);
IkReal x4020=(gconst97*x4010);
evalcond[0]=((((-1.0)*r22*x4017))+(((-1.0)*x4013*x4018))+((x4009*x4012)));
evalcond[1]=((((-1.0)*r12*x4017))+cj0+(((-1.0)*x4011*x4018))+((r11*x4019)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4017))+((r01*x4019))+(((-1.0)*x4016*x4018)));
evalcond[3]=(((x4010*x4012))+(((-1.0)*x4013*x4017))+(((-1.0)*cj1*sj2))+((r22*x4009))+(((-1.0)*cj2*x4015)));
evalcond[4]=(((cj0*x4014))+((r01*x4020))+(((-1.0)*cj0*sj2*x4015))+((r02*x4009))+(((-1.0)*x4016*x4017)));
evalcond[5]=(((r12*x4009))+((sj0*x4014))+(((-1.0)*x4011*x4017))+((r11*x4020))+(((-1.0)*sj0*sj2*x4015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*gconst98);
CheckValue<IkReal> x4022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4021))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4021))+(((-1.0)*gconst97*r00)))),-1);
if(!x4023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4022.value)+(((1.5707963267949)*(x4023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j4);
IkReal x4025=IKcos(j4);
IkReal x4026=(gconst98*r10);
IkReal x4027=(gconst97*r21);
IkReal x4028=(gconst98*r20);
IkReal x4029=(cj1*cj2);
IkReal x4030=((1.0)*sj1);
IkReal x4031=(gconst98*r00);
IkReal x4032=((1.0)*x4025);
IkReal x4033=((1.0)*x4024);
IkReal x4034=(gconst97*x4024);
IkReal x4035=(gconst97*x4025);
evalcond[0]=((((-1.0)*r22*x4032))+((x4024*x4027))+(((-1.0)*x4028*x4033)));
evalcond[1]=(cj0+(((-1.0)*x4026*x4033))+(((-1.0)*r12*x4032))+((r11*x4034)));
evalcond[2]=((((-1.0)*x4031*x4033))+(((-1.0)*sj0))+((r01*x4034))+(((-1.0)*r02*x4032)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x4025*x4027))+(((-1.0)*x4028*x4032))+(((-1.0)*cj2*x4030))+((r22*x4024)));
evalcond[4]=((((-1.0)*x4031*x4032))+((cj0*x4029))+(((-1.0)*cj0*sj2*x4030))+((r01*x4035))+((r02*x4024)));
evalcond[5]=(((sj0*x4029))+(((-1.0)*x4026*x4032))+((r12*x4024))+(((-1.0)*sj0*sj2*x4030))+((r11*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4036=((-1.0)*r21);
IkReal x4038 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4038)==0){
continue;
}
IkReal x4037=pow(x4038,-0.5);
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal(x4036),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4039.value))));
IkReal gconst100=(x4036*x4037);
IkReal gconst101=((1.0)*r20*x4037);
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4040.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4041=((-1.0)*r21);
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal(x4041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
IkReal x4042=((1.0)*(x4044.value));
IkReal x4043=x4037;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4042)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4042)));
IkReal gconst100=(x4041*x4043);
IkReal gconst101=((1.0)*r20*x4043);
IkReal x4045=r22*r22;
IkReal x4046=((1.0)*x4045);
CheckValue<IkReal> x4050=IKPowWithIntegerCheck(((-1.0)+x4045),-1);
if(!x4050.valid){
continue;
}
IkReal x4047=x4050.value;
if((((1.0)+(((-1.0)*x4046)))) < -0.00001)
continue;
IkReal x4048=IKsqrt(((1.0)+(((-1.0)*x4046))));
IkReal x4049=(cj0*x4047*x4048);
j4eval[0]=((IKabs(((((-1.0)*x4046*x4049))+x4049)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4051=((-1.0)*r21);
CheckValue<IkReal> x4054 = IKatan2WithCheck(IkReal(x4051),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4054.valid){
continue;
}
IkReal x4052=((1.0)*(x4054.value));
IkReal x4053=x4037;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4052)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4052)));
IkReal gconst100=(x4051*x4053);
IkReal gconst101=((1.0)*r20*x4053);
IkReal x4055=r22*r22;
IkReal x4056=((1.0)*x4055);
CheckValue<IkReal> x4060=IKPowWithIntegerCheck(((-1.0)+x4055),-1);
if(!x4060.valid){
continue;
}
IkReal x4057=x4060.value;
if((((1.0)+(((-1.0)*x4056)))) < -0.00001)
continue;
IkReal x4058=IKsqrt(((1.0)+(((-1.0)*x4056))));
IkReal x4059=(sj0*x4057*x4058);
j4eval[0]=((IKabs((x4059+(((-1.0)*x4056*x4059)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4061=((-1.0)*r21);
CheckValue<IkReal> x4064 = IKatan2WithCheck(IkReal(x4061),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4064.valid){
continue;
}
IkReal x4062=((1.0)*(x4064.value));
IkReal x4063=x4037;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4062)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4062)));
IkReal gconst100=(x4061*x4063);
IkReal gconst101=((1.0)*r20*x4063);
IkReal x4065=((1.0)*(r22*r22));
CheckValue<IkReal> x4069=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4065))),-1);
if(!x4069.valid){
continue;
}
IkReal x4066=x4069.value;
IkReal x4067=((1.0)*x4066);
IkReal x4068=((((-1.0)*x4067*(r20*r20*r20*r20)))+(((-2.0)*x4066*(r20*r20)*(r21*r21)))+(((-1.0)*x4067*(r21*r21*r21*r21)))+(((-1.0)*x4065)));
j4eval[0]=x4068;
j4eval[1]=IKsign(x4068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4070=(cj1*sj2);
IkReal x4071=((1.0)*r22);
IkReal x4072=(gconst100*r21);
IkReal x4073=(gconst101*r20);
IkReal x4074=(cj2*sj1);
CheckValue<IkReal> x4075 = IKatan2WithCheck(IkReal(((((-1.0)*x4071*x4074))+(((-1.0)*x4070*x4071)))),IkReal((((x4070*x4073))+((x4073*x4074))+(((-1.0)*x4070*x4072))+(((-1.0)*x4072*x4074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4075.valid){
continue;
}
CheckValue<IkReal> x4076=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x4071))+(((2.0)*x4072*x4073))+(((-1.0)*(x4072*x4072)))+(((-1.0)*(x4073*x4073))))),-1);
if(!x4076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4075.value)+(((1.5707963267949)*(x4076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4077=IKsin(j4);
IkReal x4078=IKcos(j4);
IkReal x4079=(cj1*cj2);
IkReal x4080=(gconst101*r20);
IkReal x4081=(gconst101*r10);
IkReal x4082=((1.0)*sj2);
IkReal x4083=(gconst101*r00);
IkReal x4084=((1.0)*x4078);
IkReal x4085=((1.0)*x4077);
IkReal x4086=(gconst100*x4077);
IkReal x4087=(gconst100*x4078);
evalcond[0]=(((r21*x4086))+(((-1.0)*r22*x4084))+(((-1.0)*x4080*x4085)));
evalcond[1]=(cj0+(((-1.0)*r12*x4084))+((r11*x4086))+(((-1.0)*x4081*x4085)));
evalcond[2]=(((r01*x4086))+(((-1.0)*sj0))+(((-1.0)*r02*x4084))+(((-1.0)*x4083*x4085)));
evalcond[3]=(((r21*x4087))+(((-1.0)*cj2*sj1))+((r22*x4077))+(((-1.0)*cj1*x4082))+(((-1.0)*x4080*x4084)));
evalcond[4]=(((r01*x4087))+((cj0*x4079))+(((-1.0)*x4083*x4084))+((r02*x4077))+(((-1.0)*cj0*sj1*x4082)));
evalcond[5]=(((r12*x4077))+((sj0*x4079))+(((-1.0)*sj0*sj1*x4082))+((r11*x4087))+(((-1.0)*x4081*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4088=((1.0)*gconst101);
CheckValue<IkReal> x4089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4088))+(((-1.0)*gconst100*r10)))),-1);
if(!x4089.valid){
continue;
}
CheckValue<IkReal> x4090 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4088))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4089.value)))+(x4090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4091=IKsin(j4);
IkReal x4092=IKcos(j4);
IkReal x4093=(cj1*cj2);
IkReal x4094=(gconst101*r20);
IkReal x4095=(gconst101*r10);
IkReal x4096=((1.0)*sj2);
IkReal x4097=(gconst101*r00);
IkReal x4098=((1.0)*x4092);
IkReal x4099=((1.0)*x4091);
IkReal x4100=(gconst100*x4091);
IkReal x4101=(gconst100*x4092);
evalcond[0]=((((-1.0)*r22*x4098))+((r21*x4100))+(((-1.0)*x4094*x4099)));
evalcond[1]=((((-1.0)*r12*x4098))+cj0+((r11*x4100))+(((-1.0)*x4095*x4099)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4097*x4099))+(((-1.0)*r02*x4098))+((r01*x4100)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r22*x4091))+(((-1.0)*cj1*x4096))+((r21*x4101))+(((-1.0)*x4094*x4098)));
evalcond[4]=(((cj0*x4093))+(((-1.0)*x4097*x4098))+(((-1.0)*cj0*sj1*x4096))+((r02*x4091))+((r01*x4101)));
evalcond[5]=((((-1.0)*sj0*sj1*x4096))+((r12*x4091))+((r11*x4101))+(((-1.0)*x4095*x4098))+((sj0*x4093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4102=((1.0)*gconst101);
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4102)))),-1);
if(!x4104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4103.value)+(((1.5707963267949)*(x4104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4105=IKsin(j4);
IkReal x4106=IKcos(j4);
IkReal x4107=(cj1*cj2);
IkReal x4108=(gconst101*r20);
IkReal x4109=(gconst101*r10);
IkReal x4110=((1.0)*sj2);
IkReal x4111=(gconst101*r00);
IkReal x4112=((1.0)*x4106);
IkReal x4113=((1.0)*x4105);
IkReal x4114=(gconst100*x4105);
IkReal x4115=(gconst100*x4106);
evalcond[0]=(((r21*x4114))+(((-1.0)*r22*x4112))+(((-1.0)*x4108*x4113)));
evalcond[1]=((((-1.0)*x4109*x4113))+(((-1.0)*r12*x4112))+cj0+((r11*x4114)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4111*x4113))+(((-1.0)*r02*x4112))+((r01*x4114)));
evalcond[3]=(((r21*x4115))+((r22*x4105))+(((-1.0)*cj1*x4110))+(((-1.0)*cj2*sj1))+(((-1.0)*x4108*x4112)));
evalcond[4]=((((-1.0)*x4111*x4112))+((cj0*x4107))+((r02*x4105))+((r01*x4115))+(((-1.0)*cj0*sj1*x4110)));
evalcond[5]=((((-1.0)*x4109*x4112))+((r12*x4105))+(((-1.0)*sj0*sj1*x4110))+((sj0*x4107))+((r11*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4116=((-1.0)*r10);
IkReal x4118 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4118)==0){
continue;
}
IkReal x4117=pow(x4118,-0.5);
CheckValue<IkReal> x4119 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4116),IKFAST_ATAN2_MAGTHRESH);
if(!x4119.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4119.value));
IkReal gconst103=(r11*x4117);
IkReal gconst104=(x4116*x4117);
CheckValue<IkReal> x4120 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4120.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4120.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4121=((-1.0)*r10);
IkReal x4122=x4117;
CheckValue<IkReal> x4124 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4121),IKFAST_ATAN2_MAGTHRESH);
if(!x4124.valid){
continue;
}
IkReal x4123=((-1.0)*(x4124.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4123;
IkReal gconst102=x4123;
IkReal gconst103=(r11*x4122);
IkReal gconst104=(x4121*x4122);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4125=((1.0)*sj0);
IkReal x4126=((1.0)*gconst103);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4125))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4125))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4126))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4126)))),-1);
if(!x4128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4127.value)+(((1.5707963267949)*(x4128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j4);
IkReal x4130=IKcos(j4);
IkReal x4131=(gconst103*r11);
IkReal x4132=(cj1*cj2);
IkReal x4133=((1.0)*sj2);
IkReal x4134=((1.0)*x4130);
IkReal x4135=(gconst103*x4130);
IkReal x4136=(gconst103*x4129);
IkReal x4137=((1.0)*gconst104*x4129);
evalcond[0]=((((-1.0)*r20*x4137))+((r21*x4136))+(((-1.0)*r22*x4134)));
evalcond[1]=(cj0+((x4129*x4131))+(((-1.0)*r12*x4134))+(((-1.0)*r10*x4137)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4136))+(((-1.0)*r02*x4134))+(((-1.0)*r00*x4137)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r21*x4135))+(((-1.0)*cj1*x4133))+((r22*x4129))+(((-1.0)*gconst104*r20*x4134)));
evalcond[4]=(((r02*x4129))+((r01*x4135))+(((-1.0)*cj0*sj1*x4133))+((cj0*x4132))+(((-1.0)*gconst104*r00*x4134)));
evalcond[5]=(((r12*x4129))+((x4130*x4131))+(((-1.0)*sj0*sj1*x4133))+((sj0*x4132))+(((-1.0)*gconst104*r10*x4134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4138=((1.0)*gconst104);
CheckValue<IkReal> x4139=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4138)))),-1);
if(!x4139.valid){
continue;
}
CheckValue<IkReal> x4140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4138))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4139.value)))+(x4140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4141=IKsin(j4);
IkReal x4142=IKcos(j4);
IkReal x4143=(gconst103*r11);
IkReal x4144=(cj1*cj2);
IkReal x4145=((1.0)*sj2);
IkReal x4146=((1.0)*x4142);
IkReal x4147=(gconst103*x4142);
IkReal x4148=(gconst103*x4141);
IkReal x4149=((1.0)*gconst104*x4141);
evalcond[0]=(((r21*x4148))+(((-1.0)*r22*x4146))+(((-1.0)*r20*x4149)));
evalcond[1]=(cj0+((x4141*x4143))+(((-1.0)*r10*x4149))+(((-1.0)*r12*x4146)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4148))+(((-1.0)*r02*x4146))+(((-1.0)*r00*x4149)));
evalcond[3]=(((r21*x4147))+(((-1.0)*cj2*sj1))+((r22*x4141))+(((-1.0)*cj1*x4145))+(((-1.0)*gconst104*r20*x4146)));
evalcond[4]=(((r02*x4141))+((r01*x4147))+((cj0*x4144))+(((-1.0)*gconst104*r00*x4146))+(((-1.0)*cj0*sj1*x4145)));
evalcond[5]=(((x4142*x4143))+((r12*x4141))+((sj0*x4144))+(((-1.0)*sj0*sj1*x4145))+(((-1.0)*gconst104*r10*x4146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4150=((-1.0)*r11);
IkReal x4152 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4152)==0){
continue;
}
IkReal x4151=pow(x4152,-0.5);
CheckValue<IkReal> x4153 = IKatan2WithCheck(IkReal(x4150),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4153.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4153.value))));
IkReal gconst106=(x4150*x4151);
IkReal gconst107=((1.0)*r10*x4151);
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4154.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4155=((-1.0)*r11);
CheckValue<IkReal> x4158 = IKatan2WithCheck(IkReal(x4155),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4158.valid){
continue;
}
IkReal x4156=((1.0)*(x4158.value));
IkReal x4157=x4151;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4156)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4156)));
IkReal gconst106=(x4155*x4157);
IkReal gconst107=((1.0)*r10*x4157);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4159=((-1.0)*r11);
CheckValue<IkReal> x4162 = IKatan2WithCheck(IkReal(x4159),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4162.valid){
continue;
}
IkReal x4160=((1.0)*(x4162.value));
IkReal x4161=x4151;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4160)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4160)));
IkReal gconst106=(x4159*x4161);
IkReal gconst107=((1.0)*r10*x4161);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4163=((-1.0)*r11);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal(x4163),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
IkReal x4164=((1.0)*(x4166.value));
IkReal x4165=x4151;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4164)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4164)));
IkReal gconst106=(x4163*x4165);
IkReal gconst107=((1.0)*r10*x4165);
IkReal x4167=r12*r12;
IkReal x4168=((1.0)*sj0);
IkReal x4169=(cj0*r02);
IkReal x4170=x4151;
j4eval[0]=((IKabs(((((-1.0)*x4169))+(((-1.0)*r12*x4168)))))+(IKabs(((((-1.0)*x4168*x4170))+((sj0*x4167*x4170))+((r12*x4169*x4170))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4171=((1.0)*sj0);
IkReal x4172=((1.0)*gconst106);
CheckValue<IkReal> x4173=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4172)))),-1);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4171)))),IkReal(((((-1.0)*cj0*r01*x4172))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4173.value)))+(x4174.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4175=IKsin(j4);
IkReal x4176=IKcos(j4);
IkReal x4177=(cj1*cj2);
IkReal x4178=(gconst107*r10);
IkReal x4179=(gconst107*r00);
IkReal x4180=(gconst107*r20);
IkReal x4181=((1.0)*sj1);
IkReal x4182=((1.0)*x4176);
IkReal x4183=(gconst106*x4176);
IkReal x4184=(gconst106*x4175);
IkReal x4185=((1.0)*x4175);
evalcond[0]=((((-1.0)*x4180*x4185))+((r21*x4184))+(((-1.0)*r22*x4182)));
evalcond[1]=((((-1.0)*r12*x4182))+cj0+((r11*x4184))+(((-1.0)*x4178*x4185)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4182))+((r01*x4184))+(((-1.0)*x4179*x4185)));
evalcond[3]=((((-1.0)*x4180*x4182))+((r21*x4183))+((r22*x4175))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4181)));
evalcond[4]=(((cj0*x4177))+(((-1.0)*cj0*sj2*x4181))+((r01*x4183))+(((-1.0)*x4179*x4182))+((r02*x4175)));
evalcond[5]=(((r12*x4175))+((r11*x4183))+((sj0*x4177))+(((-1.0)*sj0*sj2*x4181))+(((-1.0)*x4178*x4182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4186=((1.0)*gconst107);
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst106*r21*sj0))+(((-1.0)*r20*sj0*x4186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r10))+(((-1.0)*r11*x4186)))),-1);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4187.value)+(((1.5707963267949)*(x4188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(cj1*cj2);
IkReal x4192=(gconst107*r10);
IkReal x4193=(gconst107*r00);
IkReal x4194=(gconst107*r20);
IkReal x4195=((1.0)*sj1);
IkReal x4196=((1.0)*x4190);
IkReal x4197=(gconst106*x4190);
IkReal x4198=(gconst106*x4189);
IkReal x4199=((1.0)*x4189);
evalcond[0]=((((-1.0)*x4194*x4199))+((r21*x4198))+(((-1.0)*r22*x4196)));
evalcond[1]=((((-1.0)*r12*x4196))+((r11*x4198))+cj0+(((-1.0)*x4192*x4199)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4196))+(((-1.0)*x4193*x4199))+((r01*x4198)));
evalcond[3]=((((-1.0)*x4194*x4196))+((r21*x4197))+(((-1.0)*cj1*sj2))+((r22*x4189))+(((-1.0)*cj2*x4195)));
evalcond[4]=(((cj0*x4191))+((r02*x4189))+(((-1.0)*cj0*sj2*x4195))+(((-1.0)*x4193*x4196))+((r01*x4197)));
evalcond[5]=(((r12*x4189))+((r11*x4197))+((sj0*x4191))+(((-1.0)*sj0*sj2*x4195))+(((-1.0)*x4192*x4196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4200=((1.0)*gconst107);
CheckValue<IkReal> x4201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4200))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4201.valid){
continue;
}
CheckValue<IkReal> x4202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4200)))),-1);
if(!x4202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4201.value)+(((1.5707963267949)*(x4202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4203=IKsin(j4);
IkReal x4204=IKcos(j4);
IkReal x4205=(cj1*cj2);
IkReal x4206=(gconst107*r10);
IkReal x4207=(gconst107*r00);
IkReal x4208=(gconst107*r20);
IkReal x4209=((1.0)*sj1);
IkReal x4210=((1.0)*x4204);
IkReal x4211=(gconst106*x4204);
IkReal x4212=(gconst106*x4203);
IkReal x4213=((1.0)*x4203);
evalcond[0]=((((-1.0)*r22*x4210))+(((-1.0)*x4208*x4213))+((r21*x4212)));
evalcond[1]=(cj0+((r11*x4212))+(((-1.0)*r12*x4210))+(((-1.0)*x4206*x4213)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4210))+(((-1.0)*x4207*x4213))+((r01*x4212)));
evalcond[3]=(((r22*x4203))+(((-1.0)*cj2*x4209))+(((-1.0)*cj1*sj2))+(((-1.0)*x4208*x4210))+((r21*x4211)));
evalcond[4]=(((cj0*x4205))+((r02*x4203))+(((-1.0)*x4207*x4210))+(((-1.0)*cj0*sj2*x4209))+((r01*x4211)));
evalcond[5]=(((r11*x4211))+((sj0*x4205))+(((-1.0)*sj0*sj2*x4209))+(((-1.0)*x4206*x4210))+((r12*x4203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4214=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4214;
j4eval[1]=IKsign(x4214);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4215=((1.0)*cj5);
IkReal x4216=((((-1.0)*r01*x4215))+(((-1.0)*r00*sj5)));
j4eval[0]=x4216;
j4eval[1]=((IKabs(((((-1.0)*r20*x4215))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4217=(cj5*r10);
IkReal x4218=(sj1*sj2);
IkReal x4219=(r11*sj5);
IkReal x4220=((1.0)*cj1*cj2);
IkReal x4221=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4221;
j4eval[1]=((IKabs((((r12*x4218))+(((-1.0)*r12*x4220)))))+(IKabs((((x4217*x4218))+(((-1.0)*x4218*x4219))+(((-1.0)*x4217*x4220))+((cj1*cj2*x4219))))));
j4eval[2]=IKsign(x4221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4222=(cj5*r10);
IkReal x4223=(sj1*sj2);
IkReal x4224=(r11*sj5);
IkReal x4225=((1.0)*cj1*cj2);
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4226.valid){
continue;
}
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal(((((-1.0)*x4223*x4224))+(((-1.0)*x4222*x4225))+((x4222*x4223))+((cj1*cj2*x4224)))),IkReal(((((-1.0)*r12*x4225))+((r12*x4223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4226.value)))+(x4227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4228=IKcos(j4);
IkReal x4229=IKsin(j4);
IkReal x4230=(cj5*r00);
IkReal x4231=(cj5*r10);
IkReal x4232=(r21*sj5);
IkReal x4233=((1.0)*sj1);
IkReal x4234=(cj5*r20);
IkReal x4235=((1.0)*x4228);
IkReal x4236=((1.0)*x4229);
IkReal x4237=(sj5*x4229);
IkReal x4238=(sj5*x4228);
evalcond[0]=((((-1.0)*x4231*x4235))+((r11*x4238))+((r12*x4229)));
evalcond[1]=((((-1.0)*r22*x4235))+((x4229*x4232))+(((-1.0)*x4234*x4236)));
evalcond[2]=(((r01*x4237))+(((-1.0)*r02*x4235))+(((-1.0)*x4230*x4236)));
evalcond[3]=((1.0)+(((-1.0)*x4231*x4236))+(((-1.0)*r12*x4235))+((r11*x4237)));
evalcond[4]=((((-1.0)*sj2*x4233))+((r01*x4238))+((r02*x4229))+((cj1*cj2))+(((-1.0)*x4230*x4235)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x4229))+((x4228*x4232))+(((-1.0)*x4234*x4235))+(((-1.0)*cj2*x4233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4239=((1.0)*cj5);
CheckValue<IkReal> x4240 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4240.valid){
continue;
}
CheckValue<IkReal> x4241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4239)))),-1);
if(!x4241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4240.value)+(((1.5707963267949)*(x4241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4242=IKcos(j4);
IkReal x4243=IKsin(j4);
IkReal x4244=(cj5*r00);
IkReal x4245=(cj5*r10);
IkReal x4246=(r21*sj5);
IkReal x4247=((1.0)*sj1);
IkReal x4248=(cj5*r20);
IkReal x4249=((1.0)*x4242);
IkReal x4250=((1.0)*x4243);
IkReal x4251=(sj5*x4243);
IkReal x4252=(sj5*x4242);
evalcond[0]=(((r11*x4252))+((r12*x4243))+(((-1.0)*x4245*x4249)));
evalcond[1]=((((-1.0)*r22*x4249))+((x4243*x4246))+(((-1.0)*x4248*x4250)));
evalcond[2]=(((r01*x4251))+(((-1.0)*x4244*x4250))+(((-1.0)*r02*x4249)));
evalcond[3]=((1.0)+(((-1.0)*x4245*x4250))+(((-1.0)*r12*x4249))+((r11*x4251)));
evalcond[4]=((((-1.0)*x4244*x4249))+(((-1.0)*sj2*x4247))+((r01*x4252))+((r02*x4243))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x4248*x4249))+((r22*x4243))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4247))+((x4242*x4246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4253.valid){
continue;
}
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4253.value)))+(x4254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4255=IKcos(j4);
IkReal x4256=IKsin(j4);
IkReal x4257=(cj5*r00);
IkReal x4258=(cj5*r10);
IkReal x4259=(r21*sj5);
IkReal x4260=((1.0)*sj1);
IkReal x4261=(cj5*r20);
IkReal x4262=((1.0)*x4255);
IkReal x4263=((1.0)*x4256);
IkReal x4264=(sj5*x4256);
IkReal x4265=(sj5*x4255);
evalcond[0]=(((r11*x4265))+((r12*x4256))+(((-1.0)*x4258*x4262)));
evalcond[1]=((((-1.0)*r22*x4262))+(((-1.0)*x4261*x4263))+((x4256*x4259)));
evalcond[2]=(((r01*x4264))+(((-1.0)*r02*x4262))+(((-1.0)*x4257*x4263)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4262))+((r11*x4264))+(((-1.0)*x4258*x4263)));
evalcond[4]=(((r01*x4265))+((r02*x4256))+((cj1*cj2))+(((-1.0)*x4257*x4262))+(((-1.0)*sj2*x4260)));
evalcond[5]=(((r22*x4256))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4260))+(((-1.0)*x4261*x4262))+((x4255*x4259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4266=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4266;
j4eval[1]=IKsign(x4266);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4267=((1.0)*cj5);
IkReal x4268=((((-1.0)*r21*x4267))+(((-1.0)*r20*sj5)));
j4eval[0]=x4268;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4267))))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4269=cj5*cj5;
IkReal x4270=r11*r11;
IkReal x4271=(r11*sj5);
IkReal x4272=(cj5*r10);
IkReal x4273=((r12*r12)+((x4269*(r10*r10)))+(((-2.0)*x4271*x4272))+x4270+(((-1.0)*x4269*x4270)));
j4eval[0]=x4273;
j4eval[1]=IKsign(x4273);
j4eval[2]=((IKabs((x4271+(((-1.0)*x4272)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4274=cj5*cj5;
IkReal x4275=r11*r11;
IkReal x4276=(cj5*r10);
IkReal x4277=(r11*sj5);
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal((x4277+(((-1.0)*x4276)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4276*x4277))+((x4274*(r10*r10)))+x4275+(((-1.0)*x4274*x4275)))),-1);
if(!x4279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4278.value)+(((1.5707963267949)*(x4279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4280=IKcos(j4);
IkReal x4281=IKsin(j4);
IkReal x4282=(cj5*r00);
IkReal x4283=(cj5*r10);
IkReal x4284=(r21*sj5);
IkReal x4285=((1.0)*cj2);
IkReal x4286=(cj5*r20);
IkReal x4287=((1.0)*x4280);
IkReal x4288=((1.0)*x4281);
IkReal x4289=(sj5*x4281);
IkReal x4290=(sj5*x4280);
evalcond[0]=((((-1.0)*x4283*x4287))+((r12*x4281))+((r11*x4290)));
evalcond[1]=((((-1.0)*x4286*x4288))+((x4281*x4284))+(((-1.0)*r22*x4287)));
evalcond[2]=((((-1.0)*x4282*x4288))+(((-1.0)*r02*x4287))+((r01*x4289)));
evalcond[3]=((-1.0)+(((-1.0)*x4283*x4288))+((r11*x4289))+(((-1.0)*r12*x4287)));
evalcond[4]=((((-1.0)*x4282*x4287))+((r01*x4290))+((r02*x4281))+((sj1*sj2))+(((-1.0)*cj1*x4285)));
evalcond[5]=(((x4280*x4284))+(((-1.0)*x4286*x4287))+((r22*x4281))+(((-1.0)*sj1*x4285))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4291=((1.0)*cj5);
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4291))+(((-1.0)*r20*sj5)))),-1);
if(!x4292.valid){
continue;
}
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4291))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4292.value)))+(x4293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4294=IKcos(j4);
IkReal x4295=IKsin(j4);
IkReal x4296=(cj5*r00);
IkReal x4297=(cj5*r10);
IkReal x4298=(r21*sj5);
IkReal x4299=((1.0)*cj2);
IkReal x4300=(cj5*r20);
IkReal x4301=((1.0)*x4294);
IkReal x4302=((1.0)*x4295);
IkReal x4303=(sj5*x4295);
IkReal x4304=(sj5*x4294);
evalcond[0]=(((r11*x4304))+(((-1.0)*x4297*x4301))+((r12*x4295)));
evalcond[1]=((((-1.0)*r22*x4301))+((x4295*x4298))+(((-1.0)*x4300*x4302)));
evalcond[2]=((((-1.0)*x4296*x4302))+((r01*x4303))+(((-1.0)*r02*x4301)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4301))+((r11*x4303))+(((-1.0)*x4297*x4302)));
evalcond[4]=((((-1.0)*x4296*x4301))+((sj1*sj2))+((r01*x4304))+(((-1.0)*cj1*x4299))+((r02*x4295)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x4295))+(((-1.0)*sj1*x4299))+(((-1.0)*x4300*x4301))+((x4294*x4298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
CheckValue<IkReal> x4306=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4305.value)+(((1.5707963267949)*(x4306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4307=IKcos(j4);
IkReal x4308=IKsin(j4);
IkReal x4309=(cj5*r00);
IkReal x4310=(cj5*r10);
IkReal x4311=(r21*sj5);
IkReal x4312=((1.0)*cj2);
IkReal x4313=(cj5*r20);
IkReal x4314=((1.0)*x4307);
IkReal x4315=((1.0)*x4308);
IkReal x4316=(sj5*x4308);
IkReal x4317=(sj5*x4307);
evalcond[0]=(((r12*x4308))+((r11*x4317))+(((-1.0)*x4310*x4314)));
evalcond[1]=((((-1.0)*r22*x4314))+((x4308*x4311))+(((-1.0)*x4313*x4315)));
evalcond[2]=(((r01*x4316))+(((-1.0)*x4309*x4315))+(((-1.0)*r02*x4314)));
evalcond[3]=((-1.0)+((r11*x4316))+(((-1.0)*x4310*x4315))+(((-1.0)*r12*x4314)));
evalcond[4]=((((-1.0)*cj1*x4312))+((r02*x4308))+((sj1*sj2))+((r01*x4317))+(((-1.0)*x4309*x4314)));
evalcond[5]=(((r22*x4308))+(((-1.0)*sj1*x4312))+(((-1.0)*cj1*sj2))+((x4307*x4311))+(((-1.0)*x4313*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4318=((-1.0)*r00);
IkReal x4320 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4320)==0){
continue;
}
IkReal x4319=pow(x4320,-0.5);
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4318),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4321.value));
IkReal gconst109=(r01*x4319);
IkReal gconst110=(x4318*x4319);
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4322.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4323=((-1.0)*r00);
IkReal x4324=x4319;
CheckValue<IkReal> x4326 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4323),IKFAST_ATAN2_MAGTHRESH);
if(!x4326.valid){
continue;
}
IkReal x4325=((-1.0)*(x4326.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4325;
IkReal gconst108=x4325;
IkReal gconst109=(r01*x4324);
IkReal gconst110=(x4323*x4324);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4327=((1.0)*sj0);
IkReal x4328=((1.0)*gconst109);
CheckValue<IkReal> x4329 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4327)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*cj0*r01*x4328))+(((-1.0)*gconst109*r11*x4327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4329.valid){
continue;
}
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4328))+(((-1.0)*gconst110*r21)))),-1);
if(!x4330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4329.value)+(((1.5707963267949)*(x4330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4331=IKsin(j4);
IkReal x4332=IKcos(j4);
IkReal x4333=((1.0)*sj2);
IkReal x4334=(cj1*cj2);
IkReal x4335=(gconst109*r21);
IkReal x4336=((1.0)*x4332);
IkReal x4337=(gconst109*x4331);
IkReal x4338=(gconst109*x4332);
IkReal x4339=((1.0)*gconst110*x4331);
evalcond[0]=((((-1.0)*r20*x4339))+((x4331*x4335))+(((-1.0)*r22*x4336)));
evalcond[1]=((((-1.0)*r10*x4339))+cj0+(((-1.0)*r12*x4336))+((r11*x4337)));
evalcond[2]=((((-1.0)*r00*x4339))+((r01*x4337))+(((-1.0)*sj0))+(((-1.0)*r02*x4336)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4333))+((x4332*x4335))+((r22*x4331))+(((-1.0)*gconst110*r20*x4336)));
evalcond[4]=(((r01*x4338))+(((-1.0)*gconst110*r00*x4336))+((cj0*x4334))+(((-1.0)*cj0*sj1*x4333))+((r02*x4331)));
evalcond[5]=((((-1.0)*sj0*sj1*x4333))+((sj0*x4334))+((r12*x4331))+((r11*x4338))+(((-1.0)*gconst110*r10*x4336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4340=((1.0)*gconst110);
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4340))+(((-1.0)*gconst109*r10)))),-1);
if(!x4341.valid){
continue;
}
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4340))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4341.value)))+(x4342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4343=IKsin(j4);
IkReal x4344=IKcos(j4);
IkReal x4345=((1.0)*sj2);
IkReal x4346=(cj1*cj2);
IkReal x4347=(gconst109*r21);
IkReal x4348=((1.0)*x4344);
IkReal x4349=(gconst109*x4343);
IkReal x4350=(gconst109*x4344);
IkReal x4351=((1.0)*gconst110*x4343);
evalcond[0]=(((x4343*x4347))+(((-1.0)*r22*x4348))+(((-1.0)*r20*x4351)));
evalcond[1]=(cj0+(((-1.0)*r12*x4348))+(((-1.0)*r10*x4351))+((r11*x4349)));
evalcond[2]=((((-1.0)*r02*x4348))+(((-1.0)*sj0))+((r01*x4349))+(((-1.0)*r00*x4351)));
evalcond[3]=(((x4344*x4347))+(((-1.0)*cj2*sj1))+((r22*x4343))+(((-1.0)*gconst110*r20*x4348))+(((-1.0)*cj1*x4345)));
evalcond[4]=(((r02*x4343))+(((-1.0)*cj0*sj1*x4345))+(((-1.0)*gconst110*r00*x4348))+((cj0*x4346))+((r01*x4350)));
evalcond[5]=((((-1.0)*gconst110*r10*x4348))+(((-1.0)*sj0*sj1*x4345))+((r12*x4343))+((sj0*x4346))+((r11*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4352=((-1.0)*r01);
IkReal x4354 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4354)==0){
continue;
}
IkReal x4353=pow(x4354,-0.5);
CheckValue<IkReal> x4355 = IKatan2WithCheck(IkReal(x4352),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4355.value))));
IkReal gconst112=(x4352*x4353);
IkReal gconst113=((1.0)*r00*x4353);
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4356.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4357=((-1.0)*r01);
CheckValue<IkReal> x4360 = IKatan2WithCheck(IkReal(x4357),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4360.valid){
continue;
}
IkReal x4358=((1.0)*(x4360.value));
IkReal x4359=x4353;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4358)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4358)));
IkReal gconst112=(x4357*x4359);
IkReal gconst113=((1.0)*r00*x4359);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4361=((-1.0)*r01);
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal(x4361),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
IkReal x4362=((1.0)*(x4364.value));
IkReal x4363=x4353;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4362)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4362)));
IkReal gconst112=(x4361*x4363);
IkReal gconst113=((1.0)*r00*x4363);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4365=((-1.0)*r01);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal(x4365),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
IkReal x4366=((1.0)*(x4368.value));
IkReal x4367=x4353;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4366)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4366)));
IkReal gconst112=(x4365*x4367);
IkReal gconst113=((1.0)*r00*x4367);
IkReal x4369=r02*r02;
IkReal x4370=(r12*sj0);
IkReal x4371=((1.0)*cj0);
IkReal x4372=x4353;
j4eval[0]=((IKabs(((((-1.0)*r02*x4371))+(((-1.0)*x4370)))))+(IKabs(((((-1.0)*x4371*x4372))+((cj0*x4369*x4372))+((r02*x4370*x4372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4373=((1.0)*sj0);
IkReal x4374=((1.0)*gconst112);
CheckValue<IkReal> x4375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4374))+(((-1.0)*gconst113*r21)))),-1);
if(!x4375.valid){
continue;
}
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4373)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4374))+(((-1.0)*gconst112*r11*x4373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4375.value)))+(x4376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4377=IKsin(j4);
IkReal x4378=IKcos(j4);
IkReal x4379=(cj1*cj2);
IkReal x4380=(gconst113*r20);
IkReal x4381=(gconst112*r21);
IkReal x4382=(gconst113*r00);
IkReal x4383=((1.0)*sj2);
IkReal x4384=(gconst113*r10);
IkReal x4385=((1.0)*x4378);
IkReal x4386=((1.0)*x4377);
IkReal x4387=(gconst112*x4378);
IkReal x4388=(gconst112*x4377);
evalcond[0]=((((-1.0)*x4380*x4386))+(((-1.0)*r22*x4385))+((x4377*x4381)));
evalcond[1]=((((-1.0)*r12*x4385))+cj0+(((-1.0)*x4384*x4386))+((r11*x4388)));
evalcond[2]=((((-1.0)*r02*x4385))+(((-1.0)*sj0))+(((-1.0)*x4382*x4386))+((r01*x4388)));
evalcond[3]=(((r22*x4377))+(((-1.0)*x4380*x4385))+((x4378*x4381))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4383)));
evalcond[4]=(((r02*x4377))+(((-1.0)*x4382*x4385))+(((-1.0)*cj0*sj1*x4383))+((cj0*x4379))+((r01*x4387)));
evalcond[5]=(((sj0*x4379))+((r12*x4377))+(((-1.0)*x4384*x4385))+((r11*x4387))+(((-1.0)*sj0*sj1*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4389=((1.0)*gconst113);
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4389))+(((-1.0)*gconst112*r10)))),-1);
if(!x4391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4390.value)+(((1.5707963267949)*(x4391.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4392=IKsin(j4);
IkReal x4393=IKcos(j4);
IkReal x4394=(cj1*cj2);
IkReal x4395=(gconst113*r20);
IkReal x4396=(gconst112*r21);
IkReal x4397=(gconst113*r00);
IkReal x4398=((1.0)*sj2);
IkReal x4399=(gconst113*r10);
IkReal x4400=((1.0)*x4393);
IkReal x4401=((1.0)*x4392);
IkReal x4402=(gconst112*x4393);
IkReal x4403=(gconst112*x4392);
evalcond[0]=(((x4392*x4396))+(((-1.0)*x4395*x4401))+(((-1.0)*r22*x4400)));
evalcond[1]=(((r11*x4403))+cj0+(((-1.0)*r12*x4400))+(((-1.0)*x4399*x4401)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4403))+(((-1.0)*r02*x4400))+(((-1.0)*x4397*x4401)));
evalcond[3]=(((r22*x4392))+(((-1.0)*cj2*sj1))+(((-1.0)*x4395*x4400))+(((-1.0)*cj1*x4398))+((x4393*x4396)));
evalcond[4]=(((cj0*x4394))+(((-1.0)*cj0*sj1*x4398))+((r02*x4392))+((r01*x4402))+(((-1.0)*x4397*x4400)));
evalcond[5]=((((-1.0)*sj0*sj1*x4398))+((r11*x4402))+(((-1.0)*x4399*x4400))+((sj0*x4394))+((r12*x4392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4404=((1.0)*gconst113);
CheckValue<IkReal> x4405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4404))+(((-1.0)*gconst112*r00)))),-1);
if(!x4405.valid){
continue;
}
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4404))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4405.value)))+(x4406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4407=IKsin(j4);
IkReal x4408=IKcos(j4);
IkReal x4409=(cj1*cj2);
IkReal x4410=(gconst113*r20);
IkReal x4411=(gconst112*r21);
IkReal x4412=(gconst113*r00);
IkReal x4413=((1.0)*sj2);
IkReal x4414=(gconst113*r10);
IkReal x4415=((1.0)*x4408);
IkReal x4416=((1.0)*x4407);
IkReal x4417=(gconst112*x4408);
IkReal x4418=(gconst112*x4407);
evalcond[0]=((((-1.0)*x4410*x4416))+((x4407*x4411))+(((-1.0)*r22*x4415)));
evalcond[1]=(((r11*x4418))+cj0+(((-1.0)*r12*x4415))+(((-1.0)*x4414*x4416)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4418))+(((-1.0)*r02*x4415))+(((-1.0)*x4412*x4416)));
evalcond[3]=(((r22*x4407))+(((-1.0)*x4410*x4415))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4413))+((x4408*x4411)));
evalcond[4]=((((-1.0)*cj0*sj1*x4413))+((r01*x4417))+(((-1.0)*x4412*x4415))+((cj0*x4409))+((r02*x4407)));
evalcond[5]=(((r11*x4417))+((r12*x4407))+(((-1.0)*x4414*x4415))+(((-1.0)*sj0*sj1*x4413))+((sj0*x4409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4419=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4419;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4420=((1.0)*cj5);
IkReal x4421=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4420)));
j4eval[0]=x4421;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4420))))));
j4eval[2]=IKsign(x4421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4422=cj5*cj5;
IkReal x4423=r01*r01;
IkReal x4424=(cj5*r00);
IkReal x4425=(r01*sj5);
IkReal x4426=(x4423+(((-1.0)*x4422*x4423))+(((-2.0)*x4424*x4425))+((x4422*(r00*r00)))+(r02*r02));
j4eval[0]=x4426;
j4eval[1]=IKsign(x4426);
j4eval[2]=((IKabs(r02))+(IKabs((x4425+(((-1.0)*x4424))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4427=cj5*cj5;
IkReal x4428=r01*r01;
IkReal x4429=(r01*sj5);
IkReal x4430=(cj5*r00);
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal((x4429+(((-1.0)*x4430)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
CheckValue<IkReal> x4432=IKPowWithIntegerCheck(IKsign((((x4427*(r00*r00)))+x4428+(((-2.0)*x4429*x4430))+(((-1.0)*x4427*x4428))+(r02*r02))),-1);
if(!x4432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4431.value)+(((1.5707963267949)*(x4432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4433=IKcos(j4);
IkReal x4434=IKsin(j4);
IkReal x4435=(cj5*r00);
IkReal x4436=(cj5*r10);
IkReal x4437=(r21*sj5);
IkReal x4438=((1.0)*sj1);
IkReal x4439=(cj5*r20);
IkReal x4440=((1.0)*x4433);
IkReal x4441=((1.0)*x4434);
IkReal x4442=(sj5*x4434);
IkReal x4443=(sj5*x4433);
evalcond[0]=(((r01*x4443))+(((-1.0)*x4435*x4440))+((r02*x4434)));
evalcond[1]=((((-1.0)*r22*x4440))+((x4434*x4437))+(((-1.0)*x4439*x4441)));
evalcond[2]=((((-1.0)*r12*x4440))+((r11*x4442))+(((-1.0)*x4436*x4441)));
evalcond[3]=((-1.0)+((r01*x4442))+(((-1.0)*x4435*x4441))+(((-1.0)*r02*x4440)));
evalcond[4]=(((r12*x4434))+((r11*x4443))+(((-1.0)*sj2*x4438))+((cj1*cj2))+(((-1.0)*x4436*x4440)));
evalcond[5]=(((r22*x4434))+(((-1.0)*cj1*sj2))+(((-1.0)*x4439*x4440))+(((-1.0)*cj2*x4438))+((x4433*x4437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4444=((1.0)*cj5);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
CheckValue<IkReal> x4446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4444)))),-1);
if(!x4446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4445.value)+(((1.5707963267949)*(x4446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4447=IKcos(j4);
IkReal x4448=IKsin(j4);
IkReal x4449=(cj5*r00);
IkReal x4450=(cj5*r10);
IkReal x4451=(r21*sj5);
IkReal x4452=((1.0)*sj1);
IkReal x4453=(cj5*r20);
IkReal x4454=((1.0)*x4447);
IkReal x4455=((1.0)*x4448);
IkReal x4456=(sj5*x4448);
IkReal x4457=(sj5*x4447);
evalcond[0]=(((r01*x4457))+(((-1.0)*x4449*x4454))+((r02*x4448)));
evalcond[1]=((((-1.0)*r22*x4454))+((x4448*x4451))+(((-1.0)*x4453*x4455)));
evalcond[2]=((((-1.0)*r12*x4454))+((r11*x4456))+(((-1.0)*x4450*x4455)));
evalcond[3]=((-1.0)+((r01*x4456))+(((-1.0)*r02*x4454))+(((-1.0)*x4449*x4455)));
evalcond[4]=((((-1.0)*sj2*x4452))+((r11*x4457))+((cj1*cj2))+((r12*x4448))+(((-1.0)*x4450*x4454)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4452))+((r22*x4448))+((x4447*x4451))+(((-1.0)*x4453*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4458=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4458.valid){
continue;
}
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4458.value)))+(x4459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4460=IKcos(j4);
IkReal x4461=IKsin(j4);
IkReal x4462=(cj5*r00);
IkReal x4463=(cj5*r10);
IkReal x4464=(r21*sj5);
IkReal x4465=((1.0)*sj1);
IkReal x4466=(cj5*r20);
IkReal x4467=((1.0)*x4460);
IkReal x4468=((1.0)*x4461);
IkReal x4469=(sj5*x4461);
IkReal x4470=(sj5*x4460);
evalcond[0]=((((-1.0)*x4462*x4467))+((r01*x4470))+((r02*x4461)));
evalcond[1]=((((-1.0)*r22*x4467))+(((-1.0)*x4466*x4468))+((x4461*x4464)));
evalcond[2]=((((-1.0)*x4463*x4468))+((r11*x4469))+(((-1.0)*r12*x4467)));
evalcond[3]=((-1.0)+(((-1.0)*x4462*x4468))+((r01*x4469))+(((-1.0)*r02*x4467)));
evalcond[4]=((((-1.0)*x4463*x4467))+((r12*x4461))+(((-1.0)*sj2*x4465))+((cj1*cj2))+((r11*x4470)));
evalcond[5]=(((r22*x4461))+(((-1.0)*cj1*sj2))+(((-1.0)*x4466*x4467))+(((-1.0)*cj2*x4465))+((x4460*x4464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4471=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4471;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4472=((1.0)*cj5);
IkReal x4473=((((-1.0)*r21*x4472))+(((-1.0)*r20*sj5)));
j4eval[0]=x4473;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4472))))));
j4eval[2]=IKsign(x4473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4474=(sj1*sj2);
IkReal x4475=(r01*sj5);
IkReal x4476=(cj1*cj2);
IkReal x4477=((1.0)*cj5);
IkReal x4478=((((-1.0)*r21*x4477))+(((-1.0)*r20*sj5)));
j4eval[0]=x4478;
j4eval[1]=((IKabs(((((-1.0)*r02*x4474))+((r02*x4476)))))+(IKabs(((((-1.0)*x4475*x4476))+(((-1.0)*r00*x4474*x4477))+((cj5*r00*x4476))+((x4474*x4475))))));
j4eval[2]=IKsign(x4478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4479=(sj1*sj2);
IkReal x4480=(r01*sj5);
IkReal x4481=(cj1*cj2);
IkReal x4482=((1.0)*cj5);
CheckValue<IkReal> x4483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4482))+(((-1.0)*r20*sj5)))),-1);
if(!x4483.valid){
continue;
}
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4479*x4482))+(((-1.0)*x4480*x4481))+((x4479*x4480))+((cj5*r00*x4481)))),IkReal(((((-1.0)*r02*x4479))+((r02*x4481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4483.value)))+(x4484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4485=IKcos(j4);
IkReal x4486=IKsin(j4);
IkReal x4487=(cj5*r00);
IkReal x4488=(cj5*r10);
IkReal x4489=(r21*sj5);
IkReal x4490=((1.0)*cj2);
IkReal x4491=(cj5*r20);
IkReal x4492=((1.0)*x4485);
IkReal x4493=((1.0)*x4486);
IkReal x4494=(sj5*x4486);
IkReal x4495=(sj5*x4485);
evalcond[0]=(((r02*x4486))+((r01*x4495))+(((-1.0)*x4487*x4492)));
evalcond[1]=((((-1.0)*r22*x4492))+(((-1.0)*x4491*x4493))+((x4486*x4489)));
evalcond[2]=((((-1.0)*x4488*x4493))+((r11*x4494))+(((-1.0)*r12*x4492)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4492))+((r01*x4494))+(((-1.0)*x4487*x4493)));
evalcond[4]=((((-1.0)*cj1*x4490))+((sj1*sj2))+(((-1.0)*x4488*x4492))+((r11*x4495))+((r12*x4486)));
evalcond[5]=((((-1.0)*sj1*x4490))+((x4485*x4489))+(((-1.0)*cj1*sj2))+((r22*x4486))+(((-1.0)*x4491*x4492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4496=((1.0)*cj5);
CheckValue<IkReal> x4497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4496))+(((-1.0)*r20*sj5)))),-1);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4497.value)))+(x4498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKcos(j4);
IkReal x4500=IKsin(j4);
IkReal x4501=(cj5*r00);
IkReal x4502=(cj5*r10);
IkReal x4503=(r21*sj5);
IkReal x4504=((1.0)*cj2);
IkReal x4505=(cj5*r20);
IkReal x4506=((1.0)*x4499);
IkReal x4507=((1.0)*x4500);
IkReal x4508=(sj5*x4500);
IkReal x4509=(sj5*x4499);
evalcond[0]=(((r02*x4500))+(((-1.0)*x4501*x4506))+((r01*x4509)));
evalcond[1]=(((x4500*x4503))+(((-1.0)*r22*x4506))+(((-1.0)*x4505*x4507)));
evalcond[2]=(((r11*x4508))+(((-1.0)*r12*x4506))+(((-1.0)*x4502*x4507)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4506))+(((-1.0)*x4501*x4507))+((r01*x4508)));
evalcond[4]=((((-1.0)*cj1*x4504))+((r12*x4500))+((r11*x4509))+((sj1*sj2))+(((-1.0)*x4502*x4506)));
evalcond[5]=((((-1.0)*sj1*x4504))+((r22*x4500))+(((-1.0)*cj1*sj2))+(((-1.0)*x4505*x4506))+((x4499*x4503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4510.value)+(((1.5707963267949)*(x4511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKcos(j4);
IkReal x4513=IKsin(j4);
IkReal x4514=(cj5*r00);
IkReal x4515=(cj5*r10);
IkReal x4516=(r21*sj5);
IkReal x4517=((1.0)*cj2);
IkReal x4518=(cj5*r20);
IkReal x4519=((1.0)*x4512);
IkReal x4520=((1.0)*x4513);
IkReal x4521=(sj5*x4513);
IkReal x4522=(sj5*x4512);
evalcond[0]=(((r02*x4513))+((r01*x4522))+(((-1.0)*x4514*x4519)));
evalcond[1]=(((x4513*x4516))+(((-1.0)*x4518*x4520))+(((-1.0)*r22*x4519)));
evalcond[2]=(((r11*x4521))+(((-1.0)*r12*x4519))+(((-1.0)*x4515*x4520)));
evalcond[3]=((1.0)+((r01*x4521))+(((-1.0)*r02*x4519))+(((-1.0)*x4514*x4520)));
evalcond[4]=((((-1.0)*cj1*x4517))+((r11*x4522))+((sj1*sj2))+(((-1.0)*x4515*x4519))+((r12*x4513)));
evalcond[5]=((((-1.0)*x4518*x4519))+(((-1.0)*cj1*sj2))+((x4512*x4516))+(((-1.0)*sj1*x4517))+((r22*x4513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4523=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4523);
rxp1_1=(px*r21);
rxp1_2=(r11*x4523);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4524=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4524);
rxp1_1=(px*r21);
rxp1_2=(r11*x4524);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4525=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4525);
rxp1_1=(px*r21);
rxp1_2=(r11*x4525);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4528.valid){
continue;
}
IkReal x4526=x4528.value;
IkReal x4527=(sj0*x4526);
cj4array[0]=(((sj1*sj2*x4527))+(((-1.0)*cj1*cj2*x4527)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4529=IKsin(j4);
IkReal x4530=IKcos(j4);
IkReal x4531=(r21*sj5);
IkReal x4532=((1.0)*cj5*r20);
evalcond[0]=(r02*x4529);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4530)));
evalcond[2]=(((x4529*x4531))+(((-1.0)*x4529*x4532)));
evalcond[3]=((((-1.0)*cj5*r10*x4529))+((r11*sj5*x4529)));
evalcond[4]=((((-1.0)*x4530*x4532))+((x4530*x4531))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4534=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4534.valid){
continue;
}
IkReal x4533=x4534.value;
cj4array[0]=(((cj1*sj2*x4533))+((cj2*sj1*x4533)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4535=IKsin(j4);
IkReal x4536=IKcos(j4);
IkReal x4537=((1.0)*sj0);
IkReal x4538=((1.0)*cj5);
IkReal x4539=(sj5*x4535);
evalcond[0]=(r02*x4535);
evalcond[1]=((((-1.0)*x4537))+(((-1.0)*r02*x4536)));
evalcond[2]=((((-1.0)*r20*x4535*x4538))+((r21*x4539)));
evalcond[3]=((((-1.0)*r10*x4535*x4538))+((r11*x4539)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x4536*x4538))+(((-1.0)*sj1*sj2*x4537))+((r11*sj5*x4536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4540=IKPowWithIntegerCheck(r02,-1);
if(!x4540.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4540.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4541=IKsin(j4);
IkReal x4542=IKcos(j4);
IkReal x4543=((1.0)*sj1);
IkReal x4544=(r21*sj5);
IkReal x4545=(r11*sj5);
IkReal x4546=((1.0)*cj5*x4542);
IkReal x4547=((1.0)*cj5*x4541);
evalcond[0]=(r02*x4541);
evalcond[1]=((((-1.0)*r20*x4547))+((x4541*x4544)));
evalcond[2]=((((-1.0)*r10*x4547))+((x4541*x4545)));
evalcond[3]=(((x4542*x4544))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x4546))+(((-1.0)*cj2*x4543)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x4543))+(((-1.0)*r10*x4546))+((x4542*x4545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4548=((1.0)*sj0);
IkReal x4549=((1.0)*cj0);
CheckValue<IkReal> x4550 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4549))+(((-1.0)*r12*x4548)))),IkReal(((((-1.0)*r01*sj5*x4549))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4550.valid){
continue;
}
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4550.value)+(((1.5707963267949)*(x4551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4552=IKsin(j4);
IkReal x4553=IKcos(j4);
IkReal x4554=(cj5*r00);
IkReal x4555=(cj1*cj2);
IkReal x4556=(cj5*r10);
IkReal x4557=(r21*sj5);
IkReal x4558=((1.0)*sj1);
IkReal x4559=(cj5*r20);
IkReal x4560=((1.0)*x4553);
IkReal x4561=((1.0)*x4552);
IkReal x4562=(sj5*x4552);
IkReal x4563=(sj5*x4553);
evalcond[0]=(((x4552*x4557))+(((-1.0)*r22*x4560))+(((-1.0)*x4559*x4561)));
evalcond[1]=((((-1.0)*x4556*x4561))+cj0+((r11*x4562))+(((-1.0)*r12*x4560)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4560))+((r01*x4562))+(((-1.0)*x4554*x4561)));
evalcond[3]=(((x4553*x4557))+(((-1.0)*cj2*x4558))+(((-1.0)*cj1*sj2))+((r22*x4552))+(((-1.0)*x4559*x4560)));
evalcond[4]=(((r02*x4552))+((r01*x4563))+(((-1.0)*cj0*sj2*x4558))+((cj0*x4555))+(((-1.0)*x4554*x4560)));
evalcond[5]=((((-1.0)*x4556*x4560))+(((-1.0)*sj0*sj2*x4558))+((r11*x4563))+((r12*x4552))+((sj0*x4555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4564=((1.0)*cj5);
CheckValue<IkReal> x4565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4564)))),-1);
if(!x4565.valid){
continue;
}
CheckValue<IkReal> x4566 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4564))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4565.value)))+(x4566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4567=IKsin(j4);
IkReal x4568=IKcos(j4);
IkReal x4569=(cj5*r00);
IkReal x4570=(cj1*cj2);
IkReal x4571=(cj5*r10);
IkReal x4572=(r21*sj5);
IkReal x4573=((1.0)*sj1);
IkReal x4574=(cj5*r20);
IkReal x4575=((1.0)*x4568);
IkReal x4576=((1.0)*x4567);
IkReal x4577=(sj5*x4567);
IkReal x4578=(sj5*x4568);
evalcond[0]=(((x4567*x4572))+(((-1.0)*x4574*x4576))+(((-1.0)*r22*x4575)));
evalcond[1]=(cj0+(((-1.0)*x4571*x4576))+((r11*x4577))+(((-1.0)*r12*x4575)));
evalcond[2]=((((-1.0)*x4569*x4576))+(((-1.0)*sj0))+(((-1.0)*r02*x4575))+((r01*x4577)));
evalcond[3]=(((r22*x4567))+(((-1.0)*cj2*x4573))+(((-1.0)*cj1*sj2))+((x4568*x4572))+(((-1.0)*x4574*x4575)));
evalcond[4]=(((cj0*x4570))+(((-1.0)*x4569*x4575))+((r02*x4567))+(((-1.0)*cj0*sj2*x4573))+((r01*x4578)));
evalcond[5]=((((-1.0)*x4571*x4575))+((sj0*x4570))+((r12*x4567))+((r11*x4578))+(((-1.0)*sj0*sj2*x4573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4579=((1.0)*cj5);
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
CheckValue<IkReal> x4581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4579))+(((-1.0)*r00*sj5)))),-1);
if(!x4581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4580.value)+(((1.5707963267949)*(x4581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4582=IKsin(j4);
IkReal x4583=IKcos(j4);
IkReal x4584=(cj5*r00);
IkReal x4585=(cj1*cj2);
IkReal x4586=(cj5*r10);
IkReal x4587=(r21*sj5);
IkReal x4588=((1.0)*sj1);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4583);
IkReal x4591=((1.0)*x4582);
IkReal x4592=(sj5*x4582);
IkReal x4593=(sj5*x4583);
evalcond[0]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4582*x4587)));
evalcond[1]=(cj0+(((-1.0)*x4586*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4590))+(((-1.0)*x4584*x4591))+((r01*x4592)));
evalcond[3]=(((r22*x4582))+(((-1.0)*x4589*x4590))+(((-1.0)*cj1*sj2))+((x4583*x4587))+(((-1.0)*cj2*x4588)));
evalcond[4]=((((-1.0)*cj0*sj2*x4588))+((r02*x4582))+((cj0*x4585))+(((-1.0)*x4584*x4590))+((r01*x4593)));
evalcond[5]=(((sj0*x4585))+(((-1.0)*x4586*x4590))+((r11*x4593))+((r12*x4582))+(((-1.0)*sj0*sj2*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4594=((1.0)*cj5);
IkReal x4595=((1.0)*sj5);
IkReal x4596=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4596;
j0eval[1]=IKsign(x4596);
j0eval[2]=((IKabs(((((-1.0)*r10*x4595))+(((-1.0)*r11*x4594)))))+(IKabs(((((-1.0)*r00*x4595))+(((-1.0)*r01*x4594))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4597=r21*r21;
IkReal x4598=cj5*cj5;
IkReal x4599=(sj1*sj2);
IkReal x4600=(r21*sj5);
IkReal x4601=(cj5*r20);
IkReal x4602=(cj1*cj2);
IkReal x4603=((((-1.0)*x4597))+(((-1.0)*(r22*r22)))+((x4597*x4598))+(((-1.0)*x4598*(r20*r20)))+(((2.0)*x4600*x4601)));
j4eval[0]=x4603;
j4eval[1]=((IKabs(((((-1.0)*x4599*x4601))+((x4599*x4600))+((x4601*x4602))+(((-1.0)*x4600*x4602)))))+(IKabs((((r22*x4599))+(((-1.0)*r22*x4602))))));
j4eval[2]=IKsign(x4603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4604=IKsin(j0);
IkReal x4605=IKcos(j0);
evalcond[0]=((((-0.10915)*x4604))+(((-1.0)*px))+(((0.39225)*x4605)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x4605))+(((0.39225)*x4604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4606=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4606;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4606);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4607=((1.0)*cj5);
IkReal x4608=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4607)));
j4eval[0]=x4608;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4607)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4609=((1.0)*cj5);
IkReal x4610=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4609)));
j4eval[0]=x4610;
j4eval[1]=IKsign(x4610);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4609))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4611=((1.0)*cj5);
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4611)))),-1);
if(!x4612.valid){
continue;
}
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4611))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4612.value)))+(x4613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4614=IKcos(j4);
IkReal x4615=IKsin(j4);
IkReal x4616=((1.0)*sj0);
IkReal x4617=(cj5*r00);
IkReal x4618=(cj5*r10);
IkReal x4619=(cj5*r20);
IkReal x4620=((1.0)*x4614);
IkReal x4621=((1.0)*x4615);
IkReal x4622=(sj5*x4614);
IkReal x4623=(sj5*x4615);
evalcond[0]=(((r22*x4615))+(((-1.0)*x4619*x4620))+((r21*x4622)));
evalcond[1]=((((-1.0)*r22*x4620))+(((-1.0)*x4619*x4621))+((r21*x4623)));
evalcond[2]=(cj0+((r11*x4623))+(((-1.0)*x4618*x4621))+(((-1.0)*r12*x4620)));
evalcond[3]=(((r02*x4615))+((r01*x4622))+(((-1.0)*cj0))+(((-1.0)*x4617*x4620)));
evalcond[4]=(((r11*x4622))+(((-1.0)*x4618*x4620))+((r12*x4615))+(((-1.0)*x4616)));
evalcond[5]=((((-1.0)*r02*x4620))+(((-1.0)*x4616))+((r01*x4623))+(((-1.0)*x4617*x4621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4624=((1.0)*cj5);
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4624))+(((-1.0)*r00*sj5)))),-1);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4624))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4625.value)))+(x4626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKcos(j4);
IkReal x4628=IKsin(j4);
IkReal x4629=((1.0)*sj0);
IkReal x4630=(cj5*r00);
IkReal x4631=(cj5*r10);
IkReal x4632=(cj5*r20);
IkReal x4633=((1.0)*x4627);
IkReal x4634=((1.0)*x4628);
IkReal x4635=(sj5*x4627);
IkReal x4636=(sj5*x4628);
evalcond[0]=(((r21*x4635))+(((-1.0)*x4632*x4633))+((r22*x4628)));
evalcond[1]=(((r21*x4636))+(((-1.0)*x4632*x4634))+(((-1.0)*r22*x4633)));
evalcond[2]=(cj0+((r11*x4636))+(((-1.0)*x4631*x4634))+(((-1.0)*r12*x4633)));
evalcond[3]=(((r01*x4635))+(((-1.0)*x4630*x4633))+((r02*x4628))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4628))+((r11*x4635))+(((-1.0)*x4631*x4633))+(((-1.0)*x4629)));
evalcond[5]=(((r01*x4636))+(((-1.0)*r02*x4633))+(((-1.0)*x4630*x4634))+(((-1.0)*x4629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4637 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4637.valid){
continue;
}
CheckValue<IkReal> x4638=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4637.value)+(((1.5707963267949)*(x4638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4639=IKcos(j4);
IkReal x4640=IKsin(j4);
IkReal x4641=((1.0)*sj0);
IkReal x4642=(cj5*r00);
IkReal x4643=(cj5*r10);
IkReal x4644=(cj5*r20);
IkReal x4645=((1.0)*x4639);
IkReal x4646=((1.0)*x4640);
IkReal x4647=(sj5*x4639);
IkReal x4648=(sj5*x4640);
evalcond[0]=(((r21*x4647))+((r22*x4640))+(((-1.0)*x4644*x4645)));
evalcond[1]=(((r21*x4648))+(((-1.0)*r22*x4645))+(((-1.0)*x4644*x4646)));
evalcond[2]=(cj0+((r11*x4648))+(((-1.0)*r12*x4645))+(((-1.0)*x4643*x4646)));
evalcond[3]=(((r02*x4640))+((r01*x4647))+(((-1.0)*cj0))+(((-1.0)*x4642*x4645)));
evalcond[4]=(((r11*x4647))+((r12*x4640))+(((-1.0)*x4641))+(((-1.0)*x4643*x4645)));
evalcond[5]=((((-1.0)*r02*x4645))+(((-1.0)*x4641))+((r01*x4648))+(((-1.0)*x4642*x4646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4649=IKcos(j0);
IkReal x4650=IKsin(j0);
evalcond[0]=((((-0.10915)*x4650))+(((-1.0)*px))+(((-0.39225)*x4649)));
evalcond[1]=((((-0.39225)*x4650))+(((-1.0)*py))+(((0.10915)*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4651=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4651;
j4eval[1]=IKsign(x4651);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4652=((1.0)*cj5);
IkReal x4653=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4652)));
j4eval[0]=x4653;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4652))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4654=cj5*cj5;
IkReal x4655=((1.0)*r20);
IkReal x4656=(r01*r21);
IkReal x4657=(r21*sj5);
IkReal x4658=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4654*x4655))+(((-1.0)*r02*r22))+(((-1.0)*x4656))+((x4654*x4656))+((cj5*r00*x4657)));
j4eval[0]=x4658;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4655))+((cj0*x4657)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4659=cj5*cj5;
IkReal x4660=((1.0)*r20);
IkReal x4661=(r01*r21);
IkReal x4662=(r21*sj5);
CheckValue<IkReal> x4663=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4661))+((x4659*x4661))+((cj5*r00*x4662))+(((-1.0)*r00*x4659*x4660)))),-1);
if(!x4663.valid){
continue;
}
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4660))+((cj0*x4662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4663.value)))+(x4664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4665=IKcos(j4);
IkReal x4666=IKsin(j4);
IkReal x4667=(cj5*r00);
IkReal x4668=(cj5*r10);
IkReal x4669=(cj5*r20);
IkReal x4670=((1.0)*x4665);
IkReal x4671=((1.0)*x4666);
IkReal x4672=(sj5*x4665);
IkReal x4673=(sj5*x4666);
evalcond[0]=(((r21*x4672))+((r22*x4666))+(((-1.0)*x4669*x4670)));
evalcond[1]=(((r21*x4673))+(((-1.0)*r22*x4670))+(((-1.0)*x4669*x4671)));
evalcond[2]=(((r02*x4666))+cj0+(((-1.0)*x4667*x4670))+((r01*x4672)));
evalcond[3]=(sj0+((r12*x4666))+((r11*x4672))+(((-1.0)*x4668*x4670)));
evalcond[4]=(cj0+((r11*x4673))+(((-1.0)*r12*x4670))+(((-1.0)*x4668*x4671)));
evalcond[5]=((((-1.0)*r02*x4670))+(((-1.0)*sj0))+(((-1.0)*x4667*x4671))+((r01*x4673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4674=((1.0)*cj5);
CheckValue<IkReal> x4675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4674)))),-1);
if(!x4675.valid){
continue;
}
CheckValue<IkReal> x4676 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4674)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4675.value)))+(x4676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4677=IKcos(j4);
IkReal x4678=IKsin(j4);
IkReal x4679=(cj5*r00);
IkReal x4680=(cj5*r10);
IkReal x4681=(cj5*r20);
IkReal x4682=((1.0)*x4677);
IkReal x4683=((1.0)*x4678);
IkReal x4684=(sj5*x4677);
IkReal x4685=(sj5*x4678);
evalcond[0]=((((-1.0)*x4681*x4682))+((r22*x4678))+((r21*x4684)));
evalcond[1]=((((-1.0)*x4681*x4683))+((r21*x4685))+(((-1.0)*r22*x4682)));
evalcond[2]=((((-1.0)*x4679*x4682))+((r02*x4678))+cj0+((r01*x4684)));
evalcond[3]=(sj0+(((-1.0)*x4680*x4682))+((r12*x4678))+((r11*x4684)));
evalcond[4]=(cj0+(((-1.0)*x4680*x4683))+((r11*x4685))+(((-1.0)*r12*x4682)));
evalcond[5]=((((-1.0)*x4679*x4683))+(((-1.0)*sj0))+(((-1.0)*r02*x4682))+((r01*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4686 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4686.valid){
continue;
}
CheckValue<IkReal> x4687=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4686.value)+(((1.5707963267949)*(x4687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4688=IKcos(j4);
IkReal x4689=IKsin(j4);
IkReal x4690=(cj5*r00);
IkReal x4691=(cj5*r10);
IkReal x4692=(cj5*r20);
IkReal x4693=((1.0)*x4688);
IkReal x4694=((1.0)*x4689);
IkReal x4695=(sj5*x4688);
IkReal x4696=(sj5*x4689);
evalcond[0]=((((-1.0)*x4692*x4693))+((r22*x4689))+((r21*x4695)));
evalcond[1]=((((-1.0)*x4692*x4694))+((r21*x4696))+(((-1.0)*r22*x4693)));
evalcond[2]=(cj0+((r02*x4689))+(((-1.0)*x4690*x4693))+((r01*x4695)));
evalcond[3]=(sj0+((r12*x4689))+((r11*x4695))+(((-1.0)*x4691*x4693)));
evalcond[4]=((((-1.0)*r12*x4693))+cj0+((r11*x4696))+(((-1.0)*x4691*x4694)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4690*x4694))+(((-1.0)*r02*x4693))+((r01*x4696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4697=IKsin(j0);
IkReal x4698=IKcos(j0);
evalcond[0]=((((-0.10915)*x4697))+(((0.81725)*x4698))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4698))+(((0.81725)*x4697))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4699=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4699;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4700=((1.0)*cj5);
IkReal x4701=((((-1.0)*r01*x4700))+(((-1.0)*r00*sj5)));
j4eval[0]=x4701;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4700)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4702=((1.0)*cj5);
IkReal x4703=((((-1.0)*r01*x4702))+(((-1.0)*r00*sj5)));
j4eval[0]=x4703;
j4eval[1]=IKsign(x4703);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4702)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4704=((1.0)*cj5);
CheckValue<IkReal> x4705 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4704)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4704))+(((-1.0)*r00*sj5)))),-1);
if(!x4706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4705.value)+(((1.5707963267949)*(x4706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4707=IKcos(j4);
IkReal x4708=IKsin(j4);
IkReal x4709=((1.0)*sj0);
IkReal x4710=(cj5*r00);
IkReal x4711=(cj5*r10);
IkReal x4712=(cj5*r20);
IkReal x4713=((1.0)*x4707);
IkReal x4714=((1.0)*x4708);
IkReal x4715=(sj5*x4707);
IkReal x4716=(sj5*x4708);
evalcond[0]=((((-1.0)*x4712*x4713))+((r21*x4715))+((r22*x4708)));
evalcond[1]=((((-1.0)*x4712*x4714))+(((-1.0)*r22*x4713))+((r21*x4716)));
evalcond[2]=(cj0+(((-1.0)*x4711*x4714))+(((-1.0)*r12*x4713))+((r11*x4716)));
evalcond[3]=((((-1.0)*x4710*x4713))+((r01*x4715))+((r02*x4708))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4711*x4713))+(((-1.0)*x4709))+((r11*x4715))+((r12*x4708)));
evalcond[5]=((((-1.0)*r02*x4713))+(((-1.0)*x4710*x4714))+((r01*x4716))+(((-1.0)*x4709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4717=((1.0)*cj5);
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4717)))),-1);
if(!x4718.valid){
continue;
}
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4718.value)))+(x4719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4720=IKcos(j4);
IkReal x4721=IKsin(j4);
IkReal x4722=((1.0)*sj0);
IkReal x4723=(cj5*r00);
IkReal x4724=(cj5*r10);
IkReal x4725=(cj5*r20);
IkReal x4726=((1.0)*x4720);
IkReal x4727=((1.0)*x4721);
IkReal x4728=(sj5*x4720);
IkReal x4729=(sj5*x4721);
evalcond[0]=(((r21*x4728))+(((-1.0)*x4725*x4726))+((r22*x4721)));
evalcond[1]=(((r21*x4729))+(((-1.0)*x4725*x4727))+(((-1.0)*r22*x4726)));
evalcond[2]=(((r11*x4729))+cj0+(((-1.0)*x4724*x4727))+(((-1.0)*r12*x4726)));
evalcond[3]=((((-1.0)*x4723*x4726))+((r02*x4721))+((r01*x4728))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4728))+(((-1.0)*x4724*x4726))+(((-1.0)*x4722))+((r12*x4721)));
evalcond[5]=((((-1.0)*x4723*x4727))+(((-1.0)*x4722))+((r01*x4729))+(((-1.0)*r02*x4726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4730 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4730.valid){
continue;
}
CheckValue<IkReal> x4731=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4730.value)+(((1.5707963267949)*(x4731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4732=IKcos(j4);
IkReal x4733=IKsin(j4);
IkReal x4734=((1.0)*sj0);
IkReal x4735=(cj5*r00);
IkReal x4736=(cj5*r10);
IkReal x4737=(cj5*r20);
IkReal x4738=((1.0)*x4732);
IkReal x4739=((1.0)*x4733);
IkReal x4740=(sj5*x4732);
IkReal x4741=(sj5*x4733);
evalcond[0]=((((-1.0)*x4737*x4738))+((r22*x4733))+((r21*x4740)));
evalcond[1]=((((-1.0)*x4737*x4739))+((r21*x4741))+(((-1.0)*r22*x4738)));
evalcond[2]=(((r11*x4741))+cj0+(((-1.0)*x4736*x4739))+(((-1.0)*r12*x4738)));
evalcond[3]=((((-1.0)*x4735*x4738))+((r01*x4740))+((r02*x4733))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4740))+(((-1.0)*x4736*x4738))+(((-1.0)*x4734))+((r12*x4733)));
evalcond[5]=((((-1.0)*x4735*x4739))+((r01*x4741))+(((-1.0)*x4734))+(((-1.0)*r02*x4738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4742=IKsin(j0);
IkReal x4743=IKcos(j0);
evalcond[0]=((((-0.10915)*x4742))+(((-1.0)*px))+(((0.03275)*x4743)));
evalcond[1]=((((0.10915)*x4743))+(((-1.0)*py))+(((0.03275)*x4742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4744=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4744;
j4eval[1]=IKsign(x4744);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4745=((1.0)*cj5);
IkReal x4746=((((-1.0)*r11*x4745))+(((-1.0)*r10*sj5)));
j4eval[0]=x4746;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4745)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4747=cj5*cj5;
IkReal x4748=((1.0)*r20);
IkReal x4749=(r01*r21);
IkReal x4750=(r21*sj5);
IkReal x4751=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4750))+(((-1.0)*r00*x4747*x4748))+((x4747*x4749))+(((-1.0)*x4749)));
j4eval[0]=x4751;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4748))+((cj0*x4750))))));
j4eval[2]=IKsign(x4751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4752=cj5*cj5;
IkReal x4753=((1.0)*r20);
IkReal x4754=(r01*r21);
IkReal x4755=(r21*sj5);
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4753))+((cj0*x4755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
CheckValue<IkReal> x4757=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4755))+((x4752*x4754))+(((-1.0)*x4754))+(((-1.0)*r00*x4752*x4753)))),-1);
if(!x4757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4756.value)+(((1.5707963267949)*(x4757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4758=IKcos(j4);
IkReal x4759=IKsin(j4);
IkReal x4760=(cj5*r00);
IkReal x4761=(cj5*r10);
IkReal x4762=(cj5*r20);
IkReal x4763=((1.0)*x4758);
IkReal x4764=((1.0)*x4759);
IkReal x4765=(sj5*x4758);
IkReal x4766=(sj5*x4759);
evalcond[0]=(((r21*x4765))+(((-1.0)*x4762*x4763))+((r22*x4759)));
evalcond[1]=((((-1.0)*r22*x4763))+((r21*x4766))+(((-1.0)*x4762*x4764)));
evalcond[2]=((((-1.0)*x4760*x4763))+cj0+((r01*x4765))+((r02*x4759)));
evalcond[3]=(((r12*x4759))+sj0+(((-1.0)*x4761*x4763))+((r11*x4765)));
evalcond[4]=((((-1.0)*x4761*x4764))+cj0+(((-1.0)*r12*x4763))+((r11*x4766)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4760*x4764))+(((-1.0)*r02*x4763))+((r01*x4766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4767=((1.0)*cj5);
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4767)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
CheckValue<IkReal> x4769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4767)))),-1);
if(!x4769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4768.value)+(((1.5707963267949)*(x4769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4770=IKcos(j4);
IkReal x4771=IKsin(j4);
IkReal x4772=(cj5*r00);
IkReal x4773=(cj5*r10);
IkReal x4774=(cj5*r20);
IkReal x4775=((1.0)*x4770);
IkReal x4776=((1.0)*x4771);
IkReal x4777=(sj5*x4770);
IkReal x4778=(sj5*x4771);
evalcond[0]=((((-1.0)*x4774*x4775))+((r21*x4777))+((r22*x4771)));
evalcond[1]=((((-1.0)*r22*x4775))+(((-1.0)*x4774*x4776))+((r21*x4778)));
evalcond[2]=(cj0+((r01*x4777))+((r02*x4771))+(((-1.0)*x4772*x4775)));
evalcond[3]=(sj0+((r11*x4777))+((r12*x4771))+(((-1.0)*x4773*x4775)));
evalcond[4]=(((r11*x4778))+cj0+(((-1.0)*r12*x4775))+(((-1.0)*x4773*x4776)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4778))+(((-1.0)*x4772*x4776))+(((-1.0)*r02*x4775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4779.value)+(((1.5707963267949)*(x4780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j4);
IkReal x4782=IKsin(j4);
IkReal x4783=(cj5*r00);
IkReal x4784=(cj5*r10);
IkReal x4785=(cj5*r20);
IkReal x4786=((1.0)*x4781);
IkReal x4787=((1.0)*x4782);
IkReal x4788=(sj5*x4781);
IkReal x4789=(sj5*x4782);
evalcond[0]=(((r22*x4782))+(((-1.0)*x4785*x4786))+((r21*x4788)));
evalcond[1]=((((-1.0)*r22*x4786))+(((-1.0)*x4785*x4787))+((r21*x4789)));
evalcond[2]=(((r02*x4782))+cj0+((r01*x4788))+(((-1.0)*x4783*x4786)));
evalcond[3]=(sj0+((r12*x4782))+((r11*x4788))+(((-1.0)*x4784*x4786)));
evalcond[4]=(cj0+((r11*x4789))+(((-1.0)*x4784*x4787))+(((-1.0)*r12*x4786)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4789))+(((-1.0)*x4783*x4787))+(((-1.0)*r02*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4790=IKcos(j0);
IkReal x4791=IKsin(j0);
evalcond[0]=((((-0.10915)*x4791))+(((-0.39225)*x4790))+(((-1.0)*px)));
evalcond[1]=((((-0.39225)*x4791))+(((-1.0)*py))+(((0.10915)*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4792=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4792;
j4eval[1]=IKsign(x4792);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4793=((1.0)*cj5);
IkReal x4794=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4793)));
j4eval[0]=x4794;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4793)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4795=cj5*cj5;
IkReal x4796=((1.0)*r20);
IkReal x4797=(r01*r21);
IkReal x4798=(r21*sj5);
IkReal x4799=(((cj5*r01*r20*sj5))+((cj5*r00*x4798))+(((-1.0)*r02*r22))+((x4795*x4797))+(((-1.0)*x4797))+(((-1.0)*r00*x4795*x4796)));
j4eval[0]=x4799;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4796))+((cj0*x4798)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4800=cj5*cj5;
IkReal x4801=((1.0)*r20);
IkReal x4802=(r01*r21);
IkReal x4803=(r21*sj5);
CheckValue<IkReal> x4804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4803))+(((-1.0)*cj0*cj5*x4801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4804.valid){
continue;
}
CheckValue<IkReal> x4805=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x4803))+(((-1.0)*r02*r22))+((x4800*x4802))+(((-1.0)*x4802))+(((-1.0)*r00*x4800*x4801)))),-1);
if(!x4805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4804.value)+(((1.5707963267949)*(x4805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4806=IKcos(j4);
IkReal x4807=IKsin(j4);
IkReal x4808=(cj5*r00);
IkReal x4809=(cj5*r10);
IkReal x4810=(cj5*r20);
IkReal x4811=((1.0)*x4806);
IkReal x4812=((1.0)*x4807);
IkReal x4813=(sj5*x4806);
IkReal x4814=(sj5*x4807);
evalcond[0]=(((r21*x4813))+((r22*x4807))+(((-1.0)*x4810*x4811)));
evalcond[1]=(((r21*x4814))+(((-1.0)*r22*x4811))+(((-1.0)*x4810*x4812)));
evalcond[2]=(((r02*x4807))+(((-1.0)*x4808*x4811))+cj0+((r01*x4813)));
evalcond[3]=(sj0+(((-1.0)*x4809*x4811))+((r11*x4813))+((r12*x4807)));
evalcond[4]=(cj0+(((-1.0)*x4809*x4812))+((r11*x4814))+(((-1.0)*r12*x4811)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4808*x4812))+(((-1.0)*r02*x4811))+((r01*x4814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4815=((1.0)*cj5);
CheckValue<IkReal> x4816 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4815)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4816.valid){
continue;
}
CheckValue<IkReal> x4817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4815))+(((-1.0)*r10*sj5)))),-1);
if(!x4817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4816.value)+(((1.5707963267949)*(x4817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4818=IKcos(j4);
IkReal x4819=IKsin(j4);
IkReal x4820=(cj5*r00);
IkReal x4821=(cj5*r10);
IkReal x4822=(cj5*r20);
IkReal x4823=((1.0)*x4818);
IkReal x4824=((1.0)*x4819);
IkReal x4825=(sj5*x4818);
IkReal x4826=(sj5*x4819);
evalcond[0]=(((r21*x4825))+(((-1.0)*x4822*x4823))+((r22*x4819)));
evalcond[1]=(((r21*x4826))+(((-1.0)*x4822*x4824))+(((-1.0)*r22*x4823)));
evalcond[2]=(cj0+((r02*x4819))+(((-1.0)*x4820*x4823))+((r01*x4825)));
evalcond[3]=(sj0+((r11*x4825))+((r12*x4819))+(((-1.0)*x4821*x4823)));
evalcond[4]=(cj0+((r11*x4826))+(((-1.0)*x4821*x4824))+(((-1.0)*r12*x4823)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4823))+(((-1.0)*x4820*x4824))+((r01*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
CheckValue<IkReal> x4828=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4827.value)+(((1.5707963267949)*(x4828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4829=IKcos(j4);
IkReal x4830=IKsin(j4);
IkReal x4831=(cj5*r00);
IkReal x4832=(cj5*r10);
IkReal x4833=(cj5*r20);
IkReal x4834=((1.0)*x4829);
IkReal x4835=((1.0)*x4830);
IkReal x4836=(sj5*x4829);
IkReal x4837=(sj5*x4830);
evalcond[0]=((((-1.0)*x4833*x4834))+((r22*x4830))+((r21*x4836)));
evalcond[1]=((((-1.0)*x4833*x4835))+(((-1.0)*r22*x4834))+((r21*x4837)));
evalcond[2]=(((r01*x4836))+(((-1.0)*x4831*x4834))+cj0+((r02*x4830)));
evalcond[3]=(((r12*x4830))+((r11*x4836))+sj0+(((-1.0)*x4832*x4834)));
evalcond[4]=(((r11*x4837))+(((-1.0)*x4832*x4835))+cj0+(((-1.0)*r12*x4834)));
evalcond[5]=(((r01*x4837))+(((-1.0)*sj0))+(((-1.0)*x4831*x4835))+(((-1.0)*r02*x4834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4838=IKsin(j0);
IkReal x4839=IKcos(j0);
evalcond[0]=((((0.39225)*x4839))+(((-0.10915)*x4838))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x4838))+(((-1.0)*py))+(((0.10915)*x4839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4840=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4840;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4841=((1.0)*cj5);
IkReal x4842=((((-1.0)*r01*x4841))+(((-1.0)*r00*sj5)));
j4eval[0]=x4842;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4841)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4843=((1.0)*cj5);
IkReal x4844=((((-1.0)*r01*x4843))+(((-1.0)*r00*sj5)));
j4eval[0]=x4844;
j4eval[1]=IKsign(x4844);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4845=((1.0)*cj5);
CheckValue<IkReal> x4846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4845))+(((-1.0)*r00*sj5)))),-1);
if(!x4846.valid){
continue;
}
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4845)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4846.value)))+(x4847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4848=IKcos(j4);
IkReal x4849=IKsin(j4);
IkReal x4850=((1.0)*sj0);
IkReal x4851=(cj5*r00);
IkReal x4852=(cj5*r10);
IkReal x4853=(cj5*r20);
IkReal x4854=((1.0)*x4848);
IkReal x4855=((1.0)*x4849);
IkReal x4856=(sj5*x4848);
IkReal x4857=(sj5*x4849);
evalcond[0]=(((r21*x4856))+(((-1.0)*x4853*x4854))+((r22*x4849)));
evalcond[1]=(((r21*x4857))+(((-1.0)*x4853*x4855))+(((-1.0)*r22*x4854)));
evalcond[2]=(cj0+(((-1.0)*r12*x4854))+(((-1.0)*x4852*x4855))+((r11*x4857)));
evalcond[3]=(((r02*x4849))+((r01*x4856))+(((-1.0)*x4851*x4854))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4850))+((r12*x4849))+(((-1.0)*x4852*x4854))+((r11*x4856)));
evalcond[5]=(((r01*x4857))+(((-1.0)*x4850))+(((-1.0)*r02*x4854))+(((-1.0)*x4851*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4858=((1.0)*cj5);
CheckValue<IkReal> x4859 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4859.valid){
continue;
}
CheckValue<IkReal> x4860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4858))+(((-1.0)*r00*sj5)))),-1);
if(!x4860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4859.value)+(((1.5707963267949)*(x4860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4861=IKcos(j4);
IkReal x4862=IKsin(j4);
IkReal x4863=((1.0)*sj0);
IkReal x4864=(cj5*r00);
IkReal x4865=(cj5*r10);
IkReal x4866=(cj5*r20);
IkReal x4867=((1.0)*x4861);
IkReal x4868=((1.0)*x4862);
IkReal x4869=(sj5*x4861);
IkReal x4870=(sj5*x4862);
evalcond[0]=(((r22*x4862))+(((-1.0)*x4866*x4867))+((r21*x4869)));
evalcond[1]=((((-1.0)*r22*x4867))+(((-1.0)*x4866*x4868))+((r21*x4870)));
evalcond[2]=(cj0+(((-1.0)*r12*x4867))+((r11*x4870))+(((-1.0)*x4865*x4868)));
evalcond[3]=(((r01*x4869))+(((-1.0)*x4864*x4867))+((r02*x4862))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4869))+((r12*x4862))+(((-1.0)*x4863))+(((-1.0)*x4865*x4867)));
evalcond[5]=(((r01*x4870))+(((-1.0)*x4863))+(((-1.0)*x4864*x4868))+(((-1.0)*r02*x4867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4871 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4871.valid){
continue;
}
CheckValue<IkReal> x4872=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4871.value)+(((1.5707963267949)*(x4872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4873=IKcos(j4);
IkReal x4874=IKsin(j4);
IkReal x4875=((1.0)*sj0);
IkReal x4876=(cj5*r00);
IkReal x4877=(cj5*r10);
IkReal x4878=(cj5*r20);
IkReal x4879=((1.0)*x4873);
IkReal x4880=((1.0)*x4874);
IkReal x4881=(sj5*x4873);
IkReal x4882=(sj5*x4874);
evalcond[0]=(((r22*x4874))+(((-1.0)*x4878*x4879))+((r21*x4881)));
evalcond[1]=((((-1.0)*r22*x4879))+(((-1.0)*x4878*x4880))+((r21*x4882)));
evalcond[2]=((((-1.0)*x4877*x4880))+((r11*x4882))+cj0+(((-1.0)*r12*x4879)));
evalcond[3]=((((-1.0)*x4876*x4879))+((r02*x4874))+((r01*x4881))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4881))+((r12*x4874))+(((-1.0)*x4875))+(((-1.0)*x4877*x4879)));
evalcond[5]=((((-1.0)*x4876*x4880))+((r01*x4882))+(((-1.0)*r02*x4879))+(((-1.0)*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4883=IKcos(j0);
IkReal x4884=IKsin(j0);
evalcond[0]=((((-0.10915)*x4884))+(((-1.0)*px))+(((-0.81725)*x4883)));
evalcond[1]=((((-1.0)*py))+(((-0.81725)*x4884))+(((0.10915)*x4883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4885=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4885;
j4eval[1]=IKsign(x4885);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4886=((1.0)*cj5);
IkReal x4887=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4886)));
j4eval[0]=x4887;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4886))))));
j4eval[2]=IKsign(x4887);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4888=cj5*cj5;
IkReal x4889=((1.0)*r20);
IkReal x4890=(r01*r21);
IkReal x4891=(r21*sj5);
IkReal x4892=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4890))+((x4888*x4890))+(((-1.0)*r00*x4888*x4889))+((cj5*r00*x4891)));
j4eval[0]=x4892;
j4eval[1]=((IKabs((((cj0*x4891))+(((-1.0)*cj0*cj5*x4889)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4893=cj5*cj5;
IkReal x4894=((1.0)*r20);
IkReal x4895=(r01*r21);
IkReal x4896=(r21*sj5);
CheckValue<IkReal> x4897=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4893*x4894))+(((-1.0)*x4895))+((cj5*r00*x4896))+((x4893*x4895)))),-1);
if(!x4897.valid){
continue;
}
CheckValue<IkReal> x4898 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x4896))+(((-1.0)*cj0*cj5*x4894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4897.value)))+(x4898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4899=IKcos(j4);
IkReal x4900=IKsin(j4);
IkReal x4901=(cj5*r00);
IkReal x4902=(cj5*r10);
IkReal x4903=(cj5*r20);
IkReal x4904=((1.0)*x4899);
IkReal x4905=((1.0)*x4900);
IkReal x4906=(sj5*x4899);
IkReal x4907=(sj5*x4900);
evalcond[0]=(((r21*x4906))+(((-1.0)*x4903*x4904))+((r22*x4900)));
evalcond[1]=(((r21*x4907))+(((-1.0)*x4903*x4905))+(((-1.0)*r22*x4904)));
evalcond[2]=(((r02*x4900))+cj0+(((-1.0)*x4901*x4904))+((r01*x4906)));
evalcond[3]=(sj0+(((-1.0)*x4902*x4904))+((r11*x4906))+((r12*x4900)));
evalcond[4]=((((-1.0)*r12*x4904))+cj0+(((-1.0)*x4902*x4905))+((r11*x4907)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4904))+(((-1.0)*x4901*x4905))+((r01*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4908=((1.0)*cj5);
CheckValue<IkReal> x4909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4908))+(((-1.0)*r10*sj5)))),-1);
if(!x4909.valid){
continue;
}
CheckValue<IkReal> x4910 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4908)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4909.value)))+(x4910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4911=IKcos(j4);
IkReal x4912=IKsin(j4);
IkReal x4913=(cj5*r00);
IkReal x4914=(cj5*r10);
IkReal x4915=(cj5*r20);
IkReal x4916=((1.0)*x4911);
IkReal x4917=((1.0)*x4912);
IkReal x4918=(sj5*x4911);
IkReal x4919=(sj5*x4912);
evalcond[0]=(((r21*x4918))+(((-1.0)*x4915*x4916))+((r22*x4912)));
evalcond[1]=(((r21*x4919))+(((-1.0)*x4915*x4917))+(((-1.0)*r22*x4916)));
evalcond[2]=(cj0+((r02*x4912))+(((-1.0)*x4913*x4916))+((r01*x4918)));
evalcond[3]=(sj0+((r12*x4912))+((r11*x4918))+(((-1.0)*x4914*x4916)));
evalcond[4]=(cj0+(((-1.0)*r12*x4916))+((r11*x4919))+(((-1.0)*x4914*x4917)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4916))+(((-1.0)*x4913*x4917))+((r01*x4919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4920 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4920.valid){
continue;
}
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4920.value)+(((1.5707963267949)*(x4921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4922=IKcos(j4);
IkReal x4923=IKsin(j4);
IkReal x4924=(cj5*r00);
IkReal x4925=(cj5*r10);
IkReal x4926=(cj5*r20);
IkReal x4927=((1.0)*x4922);
IkReal x4928=((1.0)*x4923);
IkReal x4929=(sj5*x4922);
IkReal x4930=(sj5*x4923);
evalcond[0]=(((r22*x4923))+((r21*x4929))+(((-1.0)*x4926*x4927)));
evalcond[1]=((((-1.0)*x4926*x4928))+((r21*x4930))+(((-1.0)*r22*x4927)));
evalcond[2]=(cj0+(((-1.0)*x4924*x4927))+((r01*x4929))+((r02*x4923)));
evalcond[3]=(sj0+((r11*x4929))+(((-1.0)*x4925*x4927))+((r12*x4923)));
evalcond[4]=(cj0+(((-1.0)*r12*x4927))+((r11*x4930))+(((-1.0)*x4925*x4928)));
evalcond[5]=((((-1.0)*r02*x4927))+(((-1.0)*sj0))+(((-1.0)*x4924*x4928))+((r01*x4930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4931=IKcos(j0);
IkReal x4932=IKsin(j0);
evalcond[0]=((((-0.03275)*x4931))+(((-1.0)*px))+(((-0.10915)*x4932)));
evalcond[1]=((((0.10915)*x4931))+(((-0.03275)*x4932))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4933=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4933;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4934=((1.0)*cj5);
IkReal x4935=((((-1.0)*r01*x4934))+(((-1.0)*r00*sj5)));
j4eval[0]=x4935;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4934)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4936=((1.0)*cj5);
IkReal x4937=((((-1.0)*r01*x4936))+(((-1.0)*r00*sj5)));
j4eval[0]=x4937;
j4eval[1]=IKsign(x4937);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4936))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4938=((1.0)*cj5);
CheckValue<IkReal> x4939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4938))+(((-1.0)*r00*sj5)))),-1);
if(!x4939.valid){
continue;
}
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4938)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4939.value)))+(x4940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j4);
IkReal x4942=IKsin(j4);
IkReal x4943=((1.0)*sj0);
IkReal x4944=(cj5*r00);
IkReal x4945=(cj5*r10);
IkReal x4946=(cj5*r20);
IkReal x4947=((1.0)*x4941);
IkReal x4948=((1.0)*x4942);
IkReal x4949=(sj5*x4941);
IkReal x4950=(sj5*x4942);
evalcond[0]=(((r21*x4949))+(((-1.0)*x4946*x4947))+((r22*x4942)));
evalcond[1]=((((-1.0)*x4946*x4948))+(((-1.0)*r22*x4947))+((r21*x4950)));
evalcond[2]=(cj0+(((-1.0)*r12*x4947))+(((-1.0)*x4945*x4948))+((r11*x4950)));
evalcond[3]=(((r01*x4949))+((r02*x4942))+(((-1.0)*x4944*x4947))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4949))+(((-1.0)*x4943))+(((-1.0)*x4945*x4947))+((r12*x4942)));
evalcond[5]=((((-1.0)*x4943))+(((-1.0)*x4944*x4948))+(((-1.0)*r02*x4947))+((r01*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=((1.0)*cj5);
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
CheckValue<IkReal> x4953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4951)))),-1);
if(!x4953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4952.value)+(((1.5707963267949)*(x4953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4954=IKcos(j4);
IkReal x4955=IKsin(j4);
IkReal x4956=((1.0)*sj0);
IkReal x4957=(cj5*r00);
IkReal x4958=(cj5*r10);
IkReal x4959=(cj5*r20);
IkReal x4960=((1.0)*x4954);
IkReal x4961=((1.0)*x4955);
IkReal x4962=(sj5*x4954);
IkReal x4963=(sj5*x4955);
evalcond[0]=(((r22*x4955))+(((-1.0)*x4959*x4960))+((r21*x4962)));
evalcond[1]=((((-1.0)*x4959*x4961))+(((-1.0)*r22*x4960))+((r21*x4963)));
evalcond[2]=(cj0+(((-1.0)*x4958*x4961))+((r11*x4963))+(((-1.0)*r12*x4960)));
evalcond[3]=((((-1.0)*x4957*x4960))+((r02*x4955))+((r01*x4962))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4958*x4960))+((r12*x4955))+(((-1.0)*x4956))+((r11*x4962)));
evalcond[5]=((((-1.0)*x4957*x4961))+(((-1.0)*x4956))+(((-1.0)*r02*x4960))+((r01*x4963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j4);
IkReal x4967=IKsin(j4);
IkReal x4968=((1.0)*sj0);
IkReal x4969=(cj5*r00);
IkReal x4970=(cj5*r10);
IkReal x4971=(cj5*r20);
IkReal x4972=((1.0)*x4966);
IkReal x4973=((1.0)*x4967);
IkReal x4974=(sj5*x4966);
IkReal x4975=(sj5*x4967);
evalcond[0]=(((r22*x4967))+(((-1.0)*x4971*x4972))+((r21*x4974)));
evalcond[1]=((((-1.0)*x4971*x4973))+(((-1.0)*r22*x4972))+((r21*x4975)));
evalcond[2]=(cj0+((r11*x4975))+(((-1.0)*r12*x4972))+(((-1.0)*x4970*x4973)));
evalcond[3]=(((r02*x4967))+(((-1.0)*cj0))+((r01*x4974))+(((-1.0)*x4969*x4972)));
evalcond[4]=(((r12*x4967))+(((-1.0)*x4968))+((r11*x4974))+(((-1.0)*x4970*x4972)));
evalcond[5]=((((-1.0)*x4968))+(((-1.0)*r02*x4972))+((r01*x4975))+(((-1.0)*x4969*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4976=((8500.0)*sj1);
IkReal x4977=(cj5*r01);
IkReal x4978=(r00*sj5);
IkReal x4979=(sj1*sj2);
IkReal x4980=(cj1*cj2);
IkReal x4981=((20000.0)*px);
IkReal x4982=((7845.0)*cj2*sj1);
IkReal x4983=((7845.0)*cj1*sj2);
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(((((-2183.0)*x4979))+(((2183.0)*x4980))),-1);
if(!x4984.valid){
continue;
}
CheckValue<IkReal> x4985=IKPowWithIntegerCheck((x4980+(((-1.0)*x4979))),-1);
if(!x4985.valid){
continue;
}
if( IKabs(((x4984.value)*(((((1893.0)*x4978*x4979))+(((-1.0)*x4977*x4982))+(((-1.0)*x4977*x4983))+((x4979*x4981))+(((-1893.0)*x4977*x4980))+(((-1.0)*x4976*x4977))+(((-1.0)*x4976*x4978))+(((1893.0)*x4977*x4979))+(((-1.0)*x4978*x4982))+(((-1.0)*x4978*x4983))+(((-1.0)*x4980*x4981))+(((-1893.0)*x4978*x4980)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4985.value)*(((((-1.0)*x4977))+(((-1.0)*x4978)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4984.value)*(((((1893.0)*x4978*x4979))+(((-1.0)*x4977*x4982))+(((-1.0)*x4977*x4983))+((x4979*x4981))+(((-1893.0)*x4977*x4980))+(((-1.0)*x4976*x4977))+(((-1.0)*x4976*x4978))+(((1893.0)*x4977*x4979))+(((-1.0)*x4978*x4982))+(((-1.0)*x4978*x4983))+(((-1.0)*x4980*x4981))+(((-1893.0)*x4978*x4980))))))+IKsqr(((x4985.value)*(((((-1.0)*x4977))+(((-1.0)*x4978))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4984.value)*(((((1893.0)*x4978*x4979))+(((-1.0)*x4977*x4982))+(((-1.0)*x4977*x4983))+((x4979*x4981))+(((-1893.0)*x4977*x4980))+(((-1.0)*x4976*x4977))+(((-1.0)*x4976*x4978))+(((1893.0)*x4977*x4979))+(((-1.0)*x4978*x4982))+(((-1.0)*x4978*x4983))+(((-1.0)*x4980*x4981))+(((-1893.0)*x4978*x4980))))), ((x4985.value)*(((((-1.0)*x4977))+(((-1.0)*x4978))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4986=IKcos(j0);
IkReal x4987=IKsin(j0);
IkReal x4988=((0.39225)*cj1);
IkReal x4989=((1.0)*sj1);
IkReal x4990=(cj1*cj2);
IkReal x4991=(cj5*r11);
IkReal x4992=(r00*sj5);
IkReal x4993=(cj5*r01);
IkReal x4994=((0.39225)*cj2);
IkReal x4995=(r10*sj5);
IkReal x4996=(sj2*x4987);
IkReal x4997=(sj1*x4986);
IkReal x4998=(sj2*x4986);
IkReal x4999=(sj1*x4987);
evalcond[0]=(x4992+x4993+((x4986*x4990))+(((-1.0)*x4989*x4998)));
evalcond[1]=(x4995+x4991+((x4987*x4990))+(((-1.0)*x4989*x4996)));
evalcond[2]=(((x4994*x4997))+(((-0.10915)*x4987))+((x4988*x4998))+(((0.425)*x4997))+(((-0.09465)*x4992))+(((-0.09465)*x4993))+(((-1.0)*px)));
evalcond[3]=(((x4994*x4999))+((x4988*x4996))+(((0.425)*x4999))+(((-0.09465)*x4995))+(((-0.09465)*x4991))+(((-1.0)*py))+(((0.10915)*x4986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5000=((1.0)*cj5);
IkReal x5001=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5000)));
j4eval[0]=x5001;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5000))))));
j4eval[2]=IKsign(x5001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5002=((1.0)*cj5);
IkReal x5003=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5002)));
j4eval[0]=x5003;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5002))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5004=((1.0)*sj0);
IkReal x5005=((1.0)*cj0);
IkReal x5006=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5006;
j4eval[1]=((IKabs(((((-1.0)*r12*x5004))+(((-1.0)*r02*x5005)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x5005))+(((-1.0)*r11*sj5*x5004))))));
j4eval[2]=IKsign(x5006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5007=((-1.0)*r20);
IkReal x5009 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5009)==0){
continue;
}
IkReal x5008=pow(x5009,-0.5);
CheckValue<IkReal> x5010 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5007),IKFAST_ATAN2_MAGTHRESH);
if(!x5010.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5010.value));
IkReal gconst115=(r21*x5008);
IkReal gconst116=(x5007*x5008);
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5011.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5012=((-1.0)*r20);
IkReal x5013=x5008;
CheckValue<IkReal> x5015 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5012),IKFAST_ATAN2_MAGTHRESH);
if(!x5015.valid){
continue;
}
IkReal x5014=((-1.0)*(x5015.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5014;
IkReal gconst114=x5014;
IkReal gconst115=(r21*x5013);
IkReal gconst116=(x5012*x5013);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5016=((-1.0)*r20);
IkReal x5017=x5008;
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5016),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
IkReal x5018=((-1.0)*(x5019.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5018;
IkReal gconst114=x5018;
IkReal gconst115=(r21*x5017);
IkReal gconst116=(x5016*x5017);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5020=((-1.0)*r20);
IkReal x5021=x5008;
CheckValue<IkReal> x5023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5020),IKFAST_ATAN2_MAGTHRESH);
if(!x5023.valid){
continue;
}
IkReal x5022=((-1.0)*(x5023.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5022;
IkReal gconst114=x5022;
IkReal gconst115=(r21*x5021);
IkReal gconst116=(x5020*x5021);
IkReal x5024=((1.0)*(r22*r22));
CheckValue<IkReal> x5028=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5024))),-1);
if(!x5028.valid){
continue;
}
IkReal x5025=x5028.value;
IkReal x5026=((1.0)*x5025);
IkReal x5027=((((-2.0)*x5025*(r20*r20)*(r21*r21)))+(((-1.0)*x5026*(r20*r20*r20*r20)))+(((-1.0)*x5026*(r21*r21*r21*r21)))+(((-1.0)*x5024)));
j4eval[0]=x5027;
j4eval[1]=IKsign(x5027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5029=(sj1*sj2);
IkReal x5030=(gconst116*r20);
IkReal x5031=(gconst115*r21);
IkReal x5032=(cj1*cj2);
CheckValue<IkReal> x5033 = IKatan2WithCheck(IkReal((((r22*x5029))+(((-1.0)*r22*x5032)))),IkReal(((((-1.0)*x5031*x5032))+((x5030*x5032))+(((-1.0)*x5029*x5030))+((x5029*x5031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5033.valid){
continue;
}
CheckValue<IkReal> x5034=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5030*x5030)))+(((-1.0)*(x5031*x5031)))+(((-1.0)*(r22*r22)))+(((2.0)*x5030*x5031)))),-1);
if(!x5034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5033.value)+(((1.5707963267949)*(x5034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5035=IKsin(j4);
IkReal x5036=IKcos(j4);
IkReal x5037=(gconst115*r21);
IkReal x5038=((1.0)*cj2);
IkReal x5039=((1.0)*sj0);
IkReal x5040=(cj1*sj2);
IkReal x5041=((1.0)*x5036);
IkReal x5042=(gconst115*x5036);
IkReal x5043=(gconst115*x5035);
IkReal x5044=((1.0)*gconst116*x5035);
evalcond[0]=((((-1.0)*r20*x5044))+((x5035*x5037))+(((-1.0)*r22*x5041)));
evalcond[1]=(cj0+(((-1.0)*r10*x5044))+(((-1.0)*r12*x5041))+((r11*x5043)));
evalcond[2]=((((-1.0)*r02*x5041))+(((-1.0)*r00*x5044))+((r01*x5043))+(((-1.0)*x5039)));
evalcond[3]=(((x5036*x5037))+(((-1.0)*gconst116*r20*x5041))+((sj1*sj2))+(((-1.0)*cj1*x5038))+((r22*x5035)));
evalcond[4]=((((-1.0)*gconst116*r00*x5041))+(((-1.0)*cj0*x5040))+((r02*x5035))+(((-1.0)*cj0*sj1*x5038))+((r01*x5042)));
evalcond[5]=(((r12*x5035))+(((-1.0)*gconst116*r10*x5041))+(((-1.0)*sj0*sj1*x5038))+(((-1.0)*x5039*x5040))+((r11*x5042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5045=((1.0)*gconst116);
CheckValue<IkReal> x5046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5045)))),-1);
if(!x5046.valid){
continue;
}
CheckValue<IkReal> x5047 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5045))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5046.value)))+(x5047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5048=IKsin(j4);
IkReal x5049=IKcos(j4);
IkReal x5050=(gconst115*r21);
IkReal x5051=((1.0)*cj2);
IkReal x5052=((1.0)*sj0);
IkReal x5053=(cj1*sj2);
IkReal x5054=((1.0)*x5049);
IkReal x5055=(gconst115*x5049);
IkReal x5056=(gconst115*x5048);
IkReal x5057=((1.0)*gconst116*x5048);
evalcond[0]=(((x5048*x5050))+(((-1.0)*r22*x5054))+(((-1.0)*r20*x5057)));
evalcond[1]=(cj0+(((-1.0)*r10*x5057))+(((-1.0)*r12*x5054))+((r11*x5056)));
evalcond[2]=(((r01*x5056))+(((-1.0)*r02*x5054))+(((-1.0)*x5052))+(((-1.0)*r00*x5057)));
evalcond[3]=(((x5049*x5050))+(((-1.0)*cj1*x5051))+((sj1*sj2))+((r22*x5048))+(((-1.0)*gconst116*r20*x5054)));
evalcond[4]=(((r01*x5055))+((r02*x5048))+(((-1.0)*cj0*sj1*x5051))+(((-1.0)*cj0*x5053))+(((-1.0)*gconst116*r00*x5054)));
evalcond[5]=((((-1.0)*sj0*sj1*x5051))+((r11*x5055))+(((-1.0)*x5052*x5053))+((r12*x5048))+(((-1.0)*gconst116*r10*x5054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5058=((1.0)*gconst116);
CheckValue<IkReal> x5059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5058))+(((-1.0)*gconst115*r00)))),-1);
if(!x5059.valid){
continue;
}
CheckValue<IkReal> x5060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5059.value)))+(x5060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5061=IKsin(j4);
IkReal x5062=IKcos(j4);
IkReal x5063=(gconst115*r21);
IkReal x5064=((1.0)*cj2);
IkReal x5065=((1.0)*sj0);
IkReal x5066=(cj1*sj2);
IkReal x5067=((1.0)*x5062);
IkReal x5068=(gconst115*x5062);
IkReal x5069=(gconst115*x5061);
IkReal x5070=((1.0)*gconst116*x5061);
evalcond[0]=((((-1.0)*r20*x5070))+(((-1.0)*r22*x5067))+((x5061*x5063)));
evalcond[1]=(cj0+(((-1.0)*r10*x5070))+(((-1.0)*r12*x5067))+((r11*x5069)));
evalcond[2]=((((-1.0)*x5065))+(((-1.0)*r02*x5067))+(((-1.0)*r00*x5070))+((r01*x5069)));
evalcond[3]=(((sj1*sj2))+((x5062*x5063))+(((-1.0)*gconst116*r20*x5067))+(((-1.0)*cj1*x5064))+((r22*x5061)));
evalcond[4]=((((-1.0)*gconst116*r00*x5067))+(((-1.0)*cj0*x5066))+((r02*x5061))+(((-1.0)*cj0*sj1*x5064))+((r01*x5068)));
evalcond[5]=((((-1.0)*gconst116*r10*x5067))+(((-1.0)*sj0*sj1*x5064))+((r11*x5068))+(((-1.0)*x5065*x5066))+((r12*x5061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5071=((-1.0)*r21);
IkReal x5073 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5073)==0){
continue;
}
IkReal x5072=pow(x5073,-0.5);
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(x5071),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5074.value))));
IkReal gconst118=(x5071*x5072);
IkReal gconst119=((1.0)*r20*x5072);
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5075.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5076=((-1.0)*r21);
CheckValue<IkReal> x5079 = IKatan2WithCheck(IkReal(x5076),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5079.valid){
continue;
}
IkReal x5077=((1.0)*(x5079.value));
IkReal x5078=x5072;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5077)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5077)));
IkReal gconst118=(x5076*x5078);
IkReal gconst119=((1.0)*r20*x5078);
IkReal x5080=r22*r22;
IkReal x5081=((1.0)*x5080);
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(((-1.0)+x5080),-1);
if(!x5085.valid){
continue;
}
IkReal x5082=x5085.value;
if((((1.0)+(((-1.0)*x5081)))) < -0.00001)
continue;
IkReal x5083=IKsqrt(((1.0)+(((-1.0)*x5081))));
IkReal x5084=(cj0*x5082*x5083);
j4eval[0]=((IKabs((x5084+(((-1.0)*x5081*x5084)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5086=((-1.0)*r21);
CheckValue<IkReal> x5089 = IKatan2WithCheck(IkReal(x5086),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5089.valid){
continue;
}
IkReal x5087=((1.0)*(x5089.value));
IkReal x5088=x5072;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5087)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5087)));
IkReal gconst118=(x5086*x5088);
IkReal gconst119=((1.0)*r20*x5088);
IkReal x5090=r22*r22;
IkReal x5091=((1.0)*x5090);
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(((-1.0)+x5090),-1);
if(!x5095.valid){
continue;
}
IkReal x5092=x5095.value;
if((((1.0)+(((-1.0)*x5091)))) < -0.00001)
continue;
IkReal x5093=IKsqrt(((1.0)+(((-1.0)*x5091))));
IkReal x5094=(sj0*x5092*x5093);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5091*x5094))+x5094))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5096=((-1.0)*r21);
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal(x5096),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
IkReal x5097=((1.0)*(x5099.value));
IkReal x5098=x5072;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5097)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5097)));
IkReal gconst118=(x5096*x5098);
IkReal gconst119=((1.0)*r20*x5098);
IkReal x5100=((1.0)*(r22*r22));
CheckValue<IkReal> x5104=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5100))),-1);
if(!x5104.valid){
continue;
}
IkReal x5101=x5104.value;
IkReal x5102=((1.0)*x5101);
IkReal x5103=((((-1.0)*x5100))+(((-1.0)*x5102*(r21*r21*r21*r21)))+(((-2.0)*x5101*(r20*r20)*(r21*r21)))+(((-1.0)*x5102*(r20*r20*r20*r20))));
j4eval[0]=x5103;
j4eval[1]=IKsign(x5103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5105=(gconst119*r20);
IkReal x5106=(cj1*cj2);
IkReal x5107=(sj1*sj2);
IkReal x5108=(gconst118*r21);
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5106))+((r22*x5107)))),IkReal((((x5105*x5106))+((x5107*x5108))+(((-1.0)*x5106*x5108))+(((-1.0)*x5105*x5107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
CheckValue<IkReal> x5110=IKPowWithIntegerCheck(IKsign(((((2.0)*x5105*x5108))+(((-1.0)*(x5105*x5105)))+(((-1.0)*(x5108*x5108)))+(((-1.0)*(r22*r22))))),-1);
if(!x5110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5109.value)+(((1.5707963267949)*(x5110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5111=IKsin(j4);
IkReal x5112=IKcos(j4);
IkReal x5113=(gconst118*r01);
IkReal x5114=(gconst119*r20);
IkReal x5115=((1.0)*cj2);
IkReal x5116=(gconst119*r10);
IkReal x5117=(gconst119*r00);
IkReal x5118=(gconst118*r21);
IkReal x5119=((1.0)*sj0);
IkReal x5120=(gconst118*r11);
IkReal x5121=(cj1*sj2);
IkReal x5122=((1.0)*x5112);
IkReal x5123=((1.0)*x5111);
evalcond[0]=(((x5111*x5118))+(((-1.0)*x5114*x5123))+(((-1.0)*r22*x5122)));
evalcond[1]=(cj0+(((-1.0)*r12*x5122))+(((-1.0)*x5116*x5123))+((x5111*x5120)));
evalcond[2]=((((-1.0)*x5117*x5123))+((x5111*x5113))+(((-1.0)*r02*x5122))+(((-1.0)*x5119)));
evalcond[3]=(((x5112*x5118))+((sj1*sj2))+((r22*x5111))+(((-1.0)*cj1*x5115))+(((-1.0)*x5114*x5122)));
evalcond[4]=(((x5112*x5113))+(((-1.0)*cj0*sj1*x5115))+((r02*x5111))+(((-1.0)*cj0*x5121))+(((-1.0)*x5117*x5122)));
evalcond[5]=((((-1.0)*sj0*sj1*x5115))+(((-1.0)*x5116*x5122))+((x5112*x5120))+(((-1.0)*x5119*x5121))+((r12*x5111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5124=((1.0)*gconst119);
CheckValue<IkReal> x5125 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5124))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5124)))),-1);
if(!x5126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5125.value)+(((1.5707963267949)*(x5126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5127=IKsin(j4);
IkReal x5128=IKcos(j4);
IkReal x5129=(gconst118*r01);
IkReal x5130=(gconst119*r20);
IkReal x5131=((1.0)*cj2);
IkReal x5132=(gconst119*r10);
IkReal x5133=(gconst119*r00);
IkReal x5134=(gconst118*r21);
IkReal x5135=((1.0)*sj0);
IkReal x5136=(gconst118*r11);
IkReal x5137=(cj1*sj2);
IkReal x5138=((1.0)*x5128);
IkReal x5139=((1.0)*x5127);
evalcond[0]=((((-1.0)*x5130*x5139))+(((-1.0)*r22*x5138))+((x5127*x5134)));
evalcond[1]=((((-1.0)*x5132*x5139))+cj0+(((-1.0)*r12*x5138))+((x5127*x5136)));
evalcond[2]=((((-1.0)*x5135))+(((-1.0)*r02*x5138))+((x5127*x5129))+(((-1.0)*x5133*x5139)));
evalcond[3]=(((r22*x5127))+((sj1*sj2))+((x5128*x5134))+(((-1.0)*x5130*x5138))+(((-1.0)*cj1*x5131)));
evalcond[4]=((((-1.0)*cj0*x5137))+((x5128*x5129))+(((-1.0)*cj0*sj1*x5131))+(((-1.0)*x5133*x5138))+((r02*x5127)));
evalcond[5]=((((-1.0)*x5132*x5138))+((r12*x5127))+(((-1.0)*x5135*x5137))+((x5128*x5136))+(((-1.0)*sj0*sj1*x5131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5140=((1.0)*gconst119);
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5140)))),-1);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5141.value)))+(x5142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKsin(j4);
IkReal x5144=IKcos(j4);
IkReal x5145=(gconst118*r01);
IkReal x5146=(gconst119*r20);
IkReal x5147=((1.0)*cj2);
IkReal x5148=(gconst119*r10);
IkReal x5149=(gconst119*r00);
IkReal x5150=(gconst118*r21);
IkReal x5151=((1.0)*sj0);
IkReal x5152=(gconst118*r11);
IkReal x5153=(cj1*sj2);
IkReal x5154=((1.0)*x5144);
IkReal x5155=((1.0)*x5143);
evalcond[0]=(((x5143*x5150))+(((-1.0)*r22*x5154))+(((-1.0)*x5146*x5155)));
evalcond[1]=(cj0+((x5143*x5152))+(((-1.0)*r12*x5154))+(((-1.0)*x5148*x5155)));
evalcond[2]=(((x5143*x5145))+(((-1.0)*x5151))+(((-1.0)*x5149*x5155))+(((-1.0)*r02*x5154)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x5146*x5154))+(((-1.0)*cj1*x5147))+((r22*x5143))+((x5144*x5150)));
evalcond[4]=((((-1.0)*cj0*x5153))+((x5144*x5145))+(((-1.0)*cj0*sj1*x5147))+((r02*x5143))+(((-1.0)*x5149*x5154)));
evalcond[5]=((((-1.0)*x5151*x5153))+((r12*x5143))+(((-1.0)*sj0*sj1*x5147))+(((-1.0)*x5148*x5154))+((x5144*x5152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5156=((-1.0)*r10);
IkReal x5158 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5158)==0){
continue;
}
IkReal x5157=pow(x5158,-0.5);
CheckValue<IkReal> x5159 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5156),IKFAST_ATAN2_MAGTHRESH);
if(!x5159.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5159.value));
IkReal gconst121=(r11*x5157);
IkReal gconst122=(x5156*x5157);
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5160.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5161=((-1.0)*r10);
IkReal x5162=x5157;
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5161),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
IkReal x5163=((-1.0)*(x5164.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5163;
IkReal gconst120=x5163;
IkReal gconst121=(r11*x5162);
IkReal gconst122=(x5161*x5162);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5165=((1.0)*sj0);
IkReal x5166=((1.0)*gconst121);
CheckValue<IkReal> x5167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5166))+(((-1.0)*gconst122*r21)))),-1);
if(!x5167.valid){
continue;
}
CheckValue<IkReal> x5168 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5165))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5166))+(((-1.0)*gconst121*r11*x5165))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5167.value)))+(x5168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5169=IKsin(j4);
IkReal x5170=IKcos(j4);
IkReal x5171=(gconst121*r11);
IkReal x5172=(gconst122*r00);
IkReal x5173=((1.0)*cj2);
IkReal x5174=((1.0)*sj0);
IkReal x5175=(gconst122*r10);
IkReal x5176=(gconst122*r20);
IkReal x5177=(cj1*sj2);
IkReal x5178=((1.0)*x5170);
IkReal x5179=(gconst121*x5169);
IkReal x5180=((1.0)*x5169);
IkReal x5181=(gconst121*x5170);
evalcond[0]=((((-1.0)*x5176*x5180))+(((-1.0)*r22*x5178))+((r21*x5179)));
evalcond[1]=(cj0+(((-1.0)*x5175*x5180))+(((-1.0)*r12*x5178))+((x5169*x5171)));
evalcond[2]=(((r01*x5179))+(((-1.0)*r02*x5178))+(((-1.0)*x5174))+(((-1.0)*x5172*x5180)));
evalcond[3]=((((-1.0)*x5176*x5178))+((sj1*sj2))+(((-1.0)*cj1*x5173))+((r22*x5169))+((r21*x5181)));
evalcond[4]=(((r01*x5181))+(((-1.0)*x5172*x5178))+(((-1.0)*cj0*x5177))+(((-1.0)*cj0*sj1*x5173))+((r02*x5169)));
evalcond[5]=((((-1.0)*x5175*x5178))+(((-1.0)*x5174*x5177))+((r12*x5169))+((x5170*x5171))+(((-1.0)*sj0*sj1*x5173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5182=((1.0)*gconst122);
CheckValue<IkReal> x5183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5182)))),-1);
if(!x5183.valid){
continue;
}
CheckValue<IkReal> x5184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5182))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5183.value)))+(x5184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5185=IKsin(j4);
IkReal x5186=IKcos(j4);
IkReal x5187=(gconst121*r11);
IkReal x5188=(gconst122*r00);
IkReal x5189=((1.0)*cj2);
IkReal x5190=((1.0)*sj0);
IkReal x5191=(gconst122*r10);
IkReal x5192=(gconst122*r20);
IkReal x5193=(cj1*sj2);
IkReal x5194=((1.0)*x5186);
IkReal x5195=(gconst121*x5185);
IkReal x5196=((1.0)*x5185);
IkReal x5197=(gconst121*x5186);
evalcond[0]=(((r21*x5195))+(((-1.0)*x5192*x5196))+(((-1.0)*r22*x5194)));
evalcond[1]=((((-1.0)*r12*x5194))+cj0+(((-1.0)*x5191*x5196))+((x5185*x5187)));
evalcond[2]=((((-1.0)*x5190))+(((-1.0)*r02*x5194))+((r01*x5195))+(((-1.0)*x5188*x5196)));
evalcond[3]=(((r22*x5185))+(((-1.0)*cj1*x5189))+((r21*x5197))+((sj1*sj2))+(((-1.0)*x5192*x5194)));
evalcond[4]=((((-1.0)*cj0*sj1*x5189))+(((-1.0)*cj0*x5193))+((r02*x5185))+((r01*x5197))+(((-1.0)*x5188*x5194)));
evalcond[5]=(((x5186*x5187))+(((-1.0)*sj0*sj1*x5189))+(((-1.0)*x5191*x5194))+(((-1.0)*x5190*x5193))+((r12*x5185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5198=((-1.0)*r11);
IkReal x5200 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5200)==0){
continue;
}
IkReal x5199=pow(x5200,-0.5);
CheckValue<IkReal> x5201 = IKatan2WithCheck(IkReal(x5198),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5201.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5201.value))));
IkReal gconst124=(x5198*x5199);
IkReal gconst125=((1.0)*r10*x5199);
CheckValue<IkReal> x5202 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5202.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5203=((-1.0)*r11);
CheckValue<IkReal> x5206 = IKatan2WithCheck(IkReal(x5203),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5206.valid){
continue;
}
IkReal x5204=((1.0)*(x5206.value));
IkReal x5205=x5199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5204)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5204)));
IkReal gconst124=(x5203*x5205);
IkReal gconst125=((1.0)*r10*x5205);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5207=((-1.0)*r11);
CheckValue<IkReal> x5210 = IKatan2WithCheck(IkReal(x5207),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5210.valid){
continue;
}
IkReal x5208=((1.0)*(x5210.value));
IkReal x5209=x5199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5208)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5208)));
IkReal gconst124=(x5207*x5209);
IkReal gconst125=((1.0)*r10*x5209);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5211=((-1.0)*r11);
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal(x5211),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
IkReal x5212=((1.0)*(x5214.value));
IkReal x5213=x5199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5212)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5212)));
IkReal gconst124=(x5211*x5213);
IkReal gconst125=((1.0)*r10*x5213);
IkReal x5215=r12*r12;
IkReal x5216=((1.0)*sj0);
IkReal x5217=(cj0*r02);
IkReal x5218=x5199;
j4eval[0]=((IKabs((((r12*x5217*x5218))+((sj0*x5215*x5218))+(((-1.0)*x5216*x5218)))))+(IKabs(((((-1.0)*x5217))+(((-1.0)*r12*x5216))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5219=((1.0)*sj0);
IkReal x5220=((1.0)*cj0);
CheckValue<IkReal> x5221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5221.valid){
continue;
}
CheckValue<IkReal> x5222 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5220))+(((-1.0)*r12*x5219)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x5219))+(((-1.0)*gconst124*r01*x5220))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5221.value)))+(x5222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5223=IKsin(j4);
IkReal x5224=IKcos(j4);
IkReal x5225=(gconst125*r20);
IkReal x5226=(gconst124*r01);
IkReal x5227=((1.0)*cj2);
IkReal x5228=((1.0)*sj0);
IkReal x5229=(gconst125*r00);
IkReal x5230=(gconst125*r10);
IkReal x5231=(cj1*sj2);
IkReal x5232=((1.0)*x5224);
IkReal x5233=((1.0)*x5223);
IkReal x5234=(gconst124*x5223);
IkReal x5235=(gconst124*x5224);
evalcond[0]=((((-1.0)*r22*x5232))+((r21*x5234))+(((-1.0)*x5225*x5233)));
evalcond[1]=(cj0+((r11*x5234))+(((-1.0)*r12*x5232))+(((-1.0)*x5230*x5233)));
evalcond[2]=(((x5223*x5226))+(((-1.0)*r02*x5232))+(((-1.0)*x5229*x5233))+(((-1.0)*x5228)));
evalcond[3]=(((r22*x5223))+((sj1*sj2))+((r21*x5235))+(((-1.0)*cj1*x5227))+(((-1.0)*x5225*x5232)));
evalcond[4]=(((r02*x5223))+(((-1.0)*x5229*x5232))+(((-1.0)*cj0*sj1*x5227))+(((-1.0)*cj0*x5231))+((x5224*x5226)));
evalcond[5]=((((-1.0)*sj0*sj1*x5227))+((r11*x5235))+(((-1.0)*x5228*x5231))+((r12*x5223))+(((-1.0)*x5230*x5232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5236=((1.0)*gconst125);
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*r20*sj0*x5236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5236))+(((-1.0)*gconst124*r10)))),-1);
if(!x5238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5237.value)+(((1.5707963267949)*(x5238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5239=IKsin(j4);
IkReal x5240=IKcos(j4);
IkReal x5241=(gconst125*r20);
IkReal x5242=(gconst124*r01);
IkReal x5243=((1.0)*cj2);
IkReal x5244=((1.0)*sj0);
IkReal x5245=(gconst125*r00);
IkReal x5246=(gconst125*r10);
IkReal x5247=(cj1*sj2);
IkReal x5248=((1.0)*x5240);
IkReal x5249=((1.0)*x5239);
IkReal x5250=(gconst124*x5239);
IkReal x5251=(gconst124*x5240);
evalcond[0]=((((-1.0)*r22*x5248))+((r21*x5250))+(((-1.0)*x5241*x5249)));
evalcond[1]=((((-1.0)*r12*x5248))+cj0+((r11*x5250))+(((-1.0)*x5246*x5249)));
evalcond[2]=(((x5239*x5242))+(((-1.0)*x5244))+(((-1.0)*r02*x5248))+(((-1.0)*x5245*x5249)));
evalcond[3]=(((sj1*sj2))+((r21*x5251))+(((-1.0)*x5241*x5248))+((r22*x5239))+(((-1.0)*cj1*x5243)));
evalcond[4]=(((x5240*x5242))+(((-1.0)*cj0*sj1*x5243))+(((-1.0)*x5245*x5248))+(((-1.0)*cj0*x5247))+((r02*x5239)));
evalcond[5]=(((r12*x5239))+((r11*x5251))+(((-1.0)*x5246*x5248))+(((-1.0)*sj0*sj1*x5243))+(((-1.0)*x5244*x5247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5252=((1.0)*gconst125);
CheckValue<IkReal> x5253 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5252))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5253.valid){
continue;
}
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5252)))),-1);
if(!x5254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5253.value)+(((1.5707963267949)*(x5254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5255=IKsin(j4);
IkReal x5256=IKcos(j4);
IkReal x5257=(gconst125*r20);
IkReal x5258=(gconst124*r01);
IkReal x5259=((1.0)*cj2);
IkReal x5260=((1.0)*sj0);
IkReal x5261=(gconst125*r00);
IkReal x5262=(gconst125*r10);
IkReal x5263=(cj1*sj2);
IkReal x5264=((1.0)*x5256);
IkReal x5265=((1.0)*x5255);
IkReal x5266=(gconst124*x5255);
IkReal x5267=(gconst124*x5256);
evalcond[0]=(((r21*x5266))+(((-1.0)*r22*x5264))+(((-1.0)*x5257*x5265)));
evalcond[1]=(cj0+(((-1.0)*r12*x5264))+((r11*x5266))+(((-1.0)*x5262*x5265)));
evalcond[2]=(((x5255*x5258))+(((-1.0)*r02*x5264))+(((-1.0)*x5260))+(((-1.0)*x5261*x5265)));
evalcond[3]=(((r22*x5255))+((sj1*sj2))+((r21*x5267))+(((-1.0)*x5257*x5264))+(((-1.0)*cj1*x5259)));
evalcond[4]=((((-1.0)*cj0*sj1*x5259))+(((-1.0)*cj0*x5263))+((x5256*x5258))+(((-1.0)*x5261*x5264))+((r02*x5255)));
evalcond[5]=(((r12*x5255))+((r11*x5267))+(((-1.0)*x5262*x5264))+(((-1.0)*x5260*x5263))+(((-1.0)*sj0*sj1*x5259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5268=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5268;
j4eval[1]=IKsign(x5268);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5269=((1.0)*cj5);
IkReal x5270=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5269)));
j4eval[0]=x5270;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5269))))));
j4eval[2]=IKsign(x5270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5271=(sj1*sj2);
IkReal x5272=(cj5*r10);
IkReal x5273=(r11*sj5);
IkReal x5274=(cj1*cj2);
IkReal x5275=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5275;
j4eval[1]=((IKabs((((x5272*x5274))+(((-1.0)*x5271*x5272))+((x5271*x5273))+(((-1.0)*x5273*x5274)))))+(IKabs(((((-1.0)*r12*x5271))+((r12*x5274))))));
j4eval[2]=IKsign(x5275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5276=(sj1*sj2);
IkReal x5277=(cj5*r10);
IkReal x5278=(r11*sj5);
IkReal x5279=(cj1*cj2);
CheckValue<IkReal> x5280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5280.valid){
continue;
}
CheckValue<IkReal> x5281 = IKatan2WithCheck(IkReal((((x5276*x5278))+(((-1.0)*x5276*x5277))+(((-1.0)*x5278*x5279))+((x5277*x5279)))),IkReal(((((-1.0)*r12*x5276))+((r12*x5279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5280.value)))+(x5281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5282=IKcos(j4);
IkReal x5283=IKsin(j4);
IkReal x5284=(cj5*r00);
IkReal x5285=(cj5*r10);
IkReal x5286=(r21*sj5);
IkReal x5287=((1.0)*cj2);
IkReal x5288=(cj5*r20);
IkReal x5289=((1.0)*x5282);
IkReal x5290=((1.0)*x5283);
IkReal x5291=(sj5*x5283);
IkReal x5292=(sj5*x5282);
evalcond[0]=(((r12*x5283))+((r11*x5292))+(((-1.0)*x5285*x5289)));
evalcond[1]=((((-1.0)*r22*x5289))+(((-1.0)*x5288*x5290))+((x5283*x5286)));
evalcond[2]=((((-1.0)*x5284*x5290))+(((-1.0)*r02*x5289))+((r01*x5291)));
evalcond[3]=((1.0)+(((-1.0)*x5285*x5290))+(((-1.0)*r12*x5289))+((r11*x5291)));
evalcond[4]=(((r22*x5283))+(((-1.0)*x5288*x5289))+(((-1.0)*cj1*x5287))+((x5282*x5286))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x5284*x5289))+((r02*x5283))+(((-1.0)*sj1*x5287))+(((-1.0)*cj1*sj2))+((r01*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5293=((1.0)*cj5);
CheckValue<IkReal> x5294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5293))+(((-1.0)*r00*sj5)))),-1);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5294.value)))+(x5295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5296=IKcos(j4);
IkReal x5297=IKsin(j4);
IkReal x5298=(cj5*r00);
IkReal x5299=(cj5*r10);
IkReal x5300=(r21*sj5);
IkReal x5301=((1.0)*cj2);
IkReal x5302=(cj5*r20);
IkReal x5303=((1.0)*x5296);
IkReal x5304=((1.0)*x5297);
IkReal x5305=(sj5*x5297);
IkReal x5306=(sj5*x5296);
evalcond[0]=(((r12*x5297))+((r11*x5306))+(((-1.0)*x5299*x5303)));
evalcond[1]=((((-1.0)*r22*x5303))+((x5297*x5300))+(((-1.0)*x5302*x5304)));
evalcond[2]=((((-1.0)*r02*x5303))+(((-1.0)*x5298*x5304))+((r01*x5305)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5303))+((r11*x5305))+(((-1.0)*x5299*x5304)));
evalcond[4]=(((r22*x5297))+((sj1*sj2))+(((-1.0)*x5302*x5303))+(((-1.0)*cj1*x5301))+((x5296*x5300)));
evalcond[5]=(((r02*x5297))+(((-1.0)*cj1*sj2))+(((-1.0)*x5298*x5303))+(((-1.0)*sj1*x5301))+((r01*x5306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5307=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5307.valid){
continue;
}
CheckValue<IkReal> x5308 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5307.value)))+(x5308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5309=IKcos(j4);
IkReal x5310=IKsin(j4);
IkReal x5311=(cj5*r00);
IkReal x5312=(cj5*r10);
IkReal x5313=(r21*sj5);
IkReal x5314=((1.0)*cj2);
IkReal x5315=(cj5*r20);
IkReal x5316=((1.0)*x5309);
IkReal x5317=((1.0)*x5310);
IkReal x5318=(sj5*x5310);
IkReal x5319=(sj5*x5309);
evalcond[0]=((((-1.0)*x5312*x5316))+((r11*x5319))+((r12*x5310)));
evalcond[1]=(((x5310*x5313))+(((-1.0)*x5315*x5317))+(((-1.0)*r22*x5316)));
evalcond[2]=(((r01*x5318))+(((-1.0)*r02*x5316))+(((-1.0)*x5311*x5317)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5316))+(((-1.0)*x5312*x5317))+((r11*x5318)));
evalcond[4]=(((r22*x5310))+((sj1*sj2))+(((-1.0)*x5315*x5316))+(((-1.0)*cj1*x5314))+((x5309*x5313)));
evalcond[5]=(((r01*x5319))+((r02*x5310))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5314))+(((-1.0)*x5311*x5316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5320=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5320;
j4eval[1]=IKsign(x5320);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5321=((1.0)*cj5);
IkReal x5322=((((-1.0)*r21*x5321))+(((-1.0)*r20*sj5)));
j4eval[0]=x5322;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5321))))));
j4eval[2]=IKsign(x5322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5323=cj5*cj5;
IkReal x5324=r11*r11;
IkReal x5325=(r11*sj5);
IkReal x5326=(cj5*r10);
IkReal x5327=((r12*r12)+(((-2.0)*x5325*x5326))+x5324+(((-1.0)*x5323*x5324))+((x5323*(r10*r10))));
j4eval[0]=x5327;
j4eval[1]=IKsign(x5327);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5326))+x5325))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5328=cj5*cj5;
IkReal x5329=r11*r11;
IkReal x5330=(cj5*r10);
IkReal x5331=(r11*sj5);
CheckValue<IkReal> x5332=IKPowWithIntegerCheck(IKsign(((r12*r12)+x5329+(((-1.0)*x5328*x5329))+((x5328*(r10*r10)))+(((-2.0)*x5330*x5331)))),-1);
if(!x5332.valid){
continue;
}
CheckValue<IkReal> x5333 = IKatan2WithCheck(IkReal(((((-1.0)*x5330))+x5331)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5332.value)))+(x5333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5334=IKcos(j4);
IkReal x5335=IKsin(j4);
IkReal x5336=(cj5*r00);
IkReal x5337=(cj5*r10);
IkReal x5338=(r21*sj5);
IkReal x5339=(cj5*r20);
IkReal x5340=((1.0)*x5334);
IkReal x5341=((1.0)*x5335);
IkReal x5342=(sj5*x5335);
IkReal x5343=(sj5*x5334);
evalcond[0]=(((r12*x5335))+((r11*x5343))+(((-1.0)*x5337*x5340)));
evalcond[1]=((((-1.0)*x5339*x5341))+((x5335*x5338))+(((-1.0)*r22*x5340)));
evalcond[2]=((((-1.0)*r02*x5340))+(((-1.0)*x5336*x5341))+((r01*x5342)));
evalcond[3]=((-1.0)+((r11*x5342))+(((-1.0)*r12*x5340))+(((-1.0)*x5337*x5341)));
evalcond[4]=((((-1.0)*x5336*x5340))+((cj2*sj1))+((r01*x5343))+((cj1*sj2))+((r02*x5335)));
evalcond[5]=(((x5334*x5338))+(((-1.0)*x5339*x5340))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5344=((1.0)*cj5);
CheckValue<IkReal> x5345 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5345.valid){
continue;
}
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5344))+(((-1.0)*r20*sj5)))),-1);
if(!x5346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5345.value)+(((1.5707963267949)*(x5346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5347=IKcos(j4);
IkReal x5348=IKsin(j4);
IkReal x5349=(cj5*r00);
IkReal x5350=(cj5*r10);
IkReal x5351=(r21*sj5);
IkReal x5352=(cj5*r20);
IkReal x5353=((1.0)*x5347);
IkReal x5354=((1.0)*x5348);
IkReal x5355=(sj5*x5348);
IkReal x5356=(sj5*x5347);
evalcond[0]=(((r12*x5348))+((r11*x5356))+(((-1.0)*x5350*x5353)));
evalcond[1]=((((-1.0)*x5352*x5354))+((x5348*x5351))+(((-1.0)*r22*x5353)));
evalcond[2]=((((-1.0)*r02*x5353))+((r01*x5355))+(((-1.0)*x5349*x5354)));
evalcond[3]=((-1.0)+((r11*x5355))+(((-1.0)*r12*x5353))+(((-1.0)*x5350*x5354)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x5356))+(((-1.0)*x5349*x5353))+((r02*x5348)));
evalcond[5]=(((x5347*x5351))+(((-1.0)*x5352*x5353))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5357 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5357.valid){
continue;
}
CheckValue<IkReal> x5358=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5357.value)+(((1.5707963267949)*(x5358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5359=IKcos(j4);
IkReal x5360=IKsin(j4);
IkReal x5361=(cj5*r00);
IkReal x5362=(cj5*r10);
IkReal x5363=(r21*sj5);
IkReal x5364=(cj5*r20);
IkReal x5365=((1.0)*x5359);
IkReal x5366=((1.0)*x5360);
IkReal x5367=(sj5*x5360);
IkReal x5368=(sj5*x5359);
evalcond[0]=(((r12*x5360))+(((-1.0)*x5362*x5365))+((r11*x5368)));
evalcond[1]=((((-1.0)*r22*x5365))+((x5360*x5363))+(((-1.0)*x5364*x5366)));
evalcond[2]=((((-1.0)*r02*x5365))+(((-1.0)*x5361*x5366))+((r01*x5367)));
evalcond[3]=((-1.0)+(((-1.0)*x5362*x5366))+(((-1.0)*r12*x5365))+((r11*x5367)));
evalcond[4]=(((cj2*sj1))+((r02*x5360))+((cj1*sj2))+(((-1.0)*x5361*x5365))+((r01*x5368)));
evalcond[5]=(((r22*x5360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5364*x5365))+((x5359*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5369=((-1.0)*r00);
IkReal x5371 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5371)==0){
continue;
}
IkReal x5370=pow(x5371,-0.5);
CheckValue<IkReal> x5372 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5369),IKFAST_ATAN2_MAGTHRESH);
if(!x5372.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5372.value));
IkReal gconst127=(r01*x5370);
IkReal gconst128=(x5369*x5370);
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5373.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5374=((-1.0)*r00);
IkReal x5375=x5370;
CheckValue<IkReal> x5377 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5374),IKFAST_ATAN2_MAGTHRESH);
if(!x5377.valid){
continue;
}
IkReal x5376=((-1.0)*(x5377.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5376;
IkReal gconst126=x5376;
IkReal gconst127=(r01*x5375);
IkReal gconst128=(x5374*x5375);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5378=((1.0)*sj0);
IkReal x5379=((1.0)*gconst127);
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5378))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x5378))+(((-1.0)*cj0*r01*x5379))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5379)))),-1);
if(!x5381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5380.value)+(((1.5707963267949)*(x5381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5382=IKsin(j4);
IkReal x5383=IKcos(j4);
IkReal x5384=(gconst127*r01);
IkReal x5385=(gconst128*r10);
IkReal x5386=((1.0)*cj2);
IkReal x5387=(gconst128*r00);
IkReal x5388=((1.0)*sj0);
IkReal x5389=(gconst128*r20);
IkReal x5390=(cj1*sj2);
IkReal x5391=((1.0)*x5383);
IkReal x5392=((1.0)*x5382);
IkReal x5393=(gconst127*x5383);
IkReal x5394=(gconst127*x5382);
evalcond[0]=((((-1.0)*x5389*x5392))+(((-1.0)*r22*x5391))+((r21*x5394)));
evalcond[1]=(cj0+(((-1.0)*x5385*x5392))+((r11*x5394))+(((-1.0)*r12*x5391)));
evalcond[2]=(((x5382*x5384))+(((-1.0)*r02*x5391))+(((-1.0)*x5387*x5392))+(((-1.0)*x5388)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x5389*x5391))+(((-1.0)*cj1*x5386))+((r21*x5393))+((r22*x5382)));
evalcond[4]=(((x5383*x5384))+(((-1.0)*cj0*x5390))+(((-1.0)*cj0*sj1*x5386))+((r02*x5382))+(((-1.0)*x5387*x5391)));
evalcond[5]=((((-1.0)*x5388*x5390))+(((-1.0)*x5385*x5391))+(((-1.0)*sj0*sj1*x5386))+((r11*x5393))+((r12*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5395=((1.0)*gconst128);
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5395))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5395))+(((-1.0)*gconst127*r10)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKsin(j4);
IkReal x5399=IKcos(j4);
IkReal x5400=(gconst127*r01);
IkReal x5401=(gconst128*r10);
IkReal x5402=((1.0)*cj2);
IkReal x5403=(gconst128*r00);
IkReal x5404=((1.0)*sj0);
IkReal x5405=(gconst128*r20);
IkReal x5406=(cj1*sj2);
IkReal x5407=((1.0)*x5399);
IkReal x5408=((1.0)*x5398);
IkReal x5409=(gconst127*x5399);
IkReal x5410=(gconst127*x5398);
evalcond[0]=((((-1.0)*r22*x5407))+((r21*x5410))+(((-1.0)*x5405*x5408)));
evalcond[1]=(((r11*x5410))+cj0+(((-1.0)*r12*x5407))+(((-1.0)*x5401*x5408)));
evalcond[2]=((((-1.0)*x5403*x5408))+(((-1.0)*r02*x5407))+((x5398*x5400))+(((-1.0)*x5404)));
evalcond[3]=(((r21*x5409))+((r22*x5398))+(((-1.0)*cj1*x5402))+((sj1*sj2))+(((-1.0)*x5405*x5407)));
evalcond[4]=((((-1.0)*cj0*x5406))+((r02*x5398))+(((-1.0)*cj0*sj1*x5402))+(((-1.0)*x5403*x5407))+((x5399*x5400)));
evalcond[5]=((((-1.0)*x5404*x5406))+(((-1.0)*sj0*sj1*x5402))+((r12*x5398))+((r11*x5409))+(((-1.0)*x5401*x5407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5411=((-1.0)*r01);
IkReal x5413 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5413)==0){
continue;
}
IkReal x5412=pow(x5413,-0.5);
CheckValue<IkReal> x5414 = IKatan2WithCheck(IkReal(x5411),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5414.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5414.value))));
IkReal gconst130=(x5411*x5412);
IkReal gconst131=((1.0)*r00*x5412);
CheckValue<IkReal> x5415 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5415.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5415.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5416=((-1.0)*r01);
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal(x5416),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
IkReal x5417=((1.0)*(x5419.value));
IkReal x5418=x5412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5417)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5417)));
IkReal gconst130=(x5416*x5418);
IkReal gconst131=((1.0)*r00*x5418);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5420=((-1.0)*r01);
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal(x5420),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
IkReal x5421=((1.0)*(x5423.value));
IkReal x5422=x5412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5421)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5421)));
IkReal gconst130=(x5420*x5422);
IkReal gconst131=((1.0)*r00*x5422);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5424=((-1.0)*r01);
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal(x5424),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
IkReal x5425=((1.0)*(x5427.value));
IkReal x5426=x5412;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5425)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5425)));
IkReal gconst130=(x5424*x5426);
IkReal gconst131=((1.0)*r00*x5426);
IkReal x5428=r02*r02;
IkReal x5429=(r12*sj0);
IkReal x5430=((1.0)*cj0);
IkReal x5431=x5412;
j4eval[0]=((IKabs(((((-1.0)*x5430*x5431))+((r02*x5429*x5431))+((cj0*x5428*x5431)))))+(IKabs(((((-1.0)*r02*x5430))+(((-1.0)*x5429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5432=((1.0)*sj0);
IkReal x5433=((1.0)*gconst130);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5433))+(((-1.0)*gconst131*r21)))),-1);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5432)))),IkReal(((((-1.0)*cj0*r01*x5433))+((gconst131*r10*sj0))+(((-1.0)*gconst130*r11*x5432))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5434.value)))+(x5435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5436=IKsin(j4);
IkReal x5437=IKcos(j4);
IkReal x5438=(gconst131*r10);
IkReal x5439=(gconst130*r11);
IkReal x5440=((1.0)*cj2);
IkReal x5441=(gconst131*r20);
IkReal x5442=((1.0)*sj0);
IkReal x5443=(gconst131*r00);
IkReal x5444=(cj1*sj2);
IkReal x5445=((1.0)*x5437);
IkReal x5446=((1.0)*x5436);
IkReal x5447=(gconst130*x5437);
IkReal x5448=(gconst130*x5436);
evalcond[0]=((((-1.0)*r22*x5445))+(((-1.0)*x5441*x5446))+((r21*x5448)));
evalcond[1]=(cj0+(((-1.0)*r12*x5445))+((x5436*x5439))+(((-1.0)*x5438*x5446)));
evalcond[2]=((((-1.0)*x5442))+((r01*x5448))+(((-1.0)*x5443*x5446))+(((-1.0)*r02*x5445)));
evalcond[3]=(((r22*x5436))+(((-1.0)*cj1*x5440))+((sj1*sj2))+(((-1.0)*x5441*x5445))+((r21*x5447)));
evalcond[4]=((((-1.0)*cj0*sj1*x5440))+((r02*x5436))+((r01*x5447))+(((-1.0)*cj0*x5444))+(((-1.0)*x5443*x5445)));
evalcond[5]=((((-1.0)*sj0*sj1*x5440))+(((-1.0)*x5442*x5444))+(((-1.0)*x5438*x5445))+((x5437*x5439))+((r12*x5436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5449=((1.0)*gconst131);
CheckValue<IkReal> x5450 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5450.valid){
continue;
}
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5449))+(((-1.0)*gconst130*r10)))),-1);
if(!x5451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5450.value)+(((1.5707963267949)*(x5451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5452=IKsin(j4);
IkReal x5453=IKcos(j4);
IkReal x5454=(gconst131*r10);
IkReal x5455=(gconst130*r11);
IkReal x5456=((1.0)*cj2);
IkReal x5457=(gconst131*r20);
IkReal x5458=((1.0)*sj0);
IkReal x5459=(gconst131*r00);
IkReal x5460=(cj1*sj2);
IkReal x5461=((1.0)*x5453);
IkReal x5462=((1.0)*x5452);
IkReal x5463=(gconst130*x5453);
IkReal x5464=(gconst130*x5452);
evalcond[0]=((((-1.0)*x5457*x5462))+((r21*x5464))+(((-1.0)*r22*x5461)));
evalcond[1]=(cj0+(((-1.0)*r12*x5461))+(((-1.0)*x5454*x5462))+((x5452*x5455)));
evalcond[2]=((((-1.0)*x5459*x5462))+((r01*x5464))+(((-1.0)*r02*x5461))+(((-1.0)*x5458)));
evalcond[3]=((((-1.0)*cj1*x5456))+((r22*x5452))+((sj1*sj2))+(((-1.0)*x5457*x5461))+((r21*x5463)));
evalcond[4]=((((-1.0)*x5459*x5461))+((r01*x5463))+(((-1.0)*cj0*x5460))+((r02*x5452))+(((-1.0)*cj0*sj1*x5456)));
evalcond[5]=(((r12*x5452))+(((-1.0)*x5458*x5460))+(((-1.0)*x5454*x5461))+(((-1.0)*sj0*sj1*x5456))+((x5453*x5455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5465=((1.0)*gconst131);
CheckValue<IkReal> x5466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5465))+(((-1.0)*gconst130*r00)))),-1);
if(!x5466.valid){
continue;
}
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5466.value)))+(x5467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5468=IKsin(j4);
IkReal x5469=IKcos(j4);
IkReal x5470=(gconst131*r10);
IkReal x5471=(gconst130*r11);
IkReal x5472=((1.0)*cj2);
IkReal x5473=(gconst131*r20);
IkReal x5474=((1.0)*sj0);
IkReal x5475=(gconst131*r00);
IkReal x5476=(cj1*sj2);
IkReal x5477=((1.0)*x5469);
IkReal x5478=((1.0)*x5468);
IkReal x5479=(gconst130*x5469);
IkReal x5480=(gconst130*x5468);
evalcond[0]=(((r21*x5480))+(((-1.0)*x5473*x5478))+(((-1.0)*r22*x5477)));
evalcond[1]=(cj0+(((-1.0)*r12*x5477))+(((-1.0)*x5470*x5478))+((x5468*x5471)));
evalcond[2]=(((r01*x5480))+(((-1.0)*x5475*x5478))+(((-1.0)*x5474))+(((-1.0)*r02*x5477)));
evalcond[3]=(((r22*x5468))+(((-1.0)*cj1*x5472))+((sj1*sj2))+(((-1.0)*x5473*x5477))+((r21*x5479)));
evalcond[4]=((((-1.0)*cj0*sj1*x5472))+((r02*x5468))+((r01*x5479))+(((-1.0)*x5475*x5477))+(((-1.0)*cj0*x5476)));
evalcond[5]=((((-1.0)*sj0*sj1*x5472))+((r12*x5468))+(((-1.0)*x5474*x5476))+(((-1.0)*x5470*x5477))+((x5469*x5471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5481=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5481;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5482=((1.0)*cj5);
IkReal x5483=((((-1.0)*r11*x5482))+(((-1.0)*r10*sj5)));
j4eval[0]=x5483;
j4eval[1]=((IKabs(((((-1.0)*r20*x5482))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5484=cj5*cj5;
IkReal x5485=r01*r01;
IkReal x5486=(cj5*r00);
IkReal x5487=(r01*sj5);
IkReal x5488=(x5485+(((-1.0)*x5484*x5485))+(((-2.0)*x5486*x5487))+((x5484*(r00*r00)))+(r02*r02));
j4eval[0]=x5488;
j4eval[1]=IKsign(x5488);
j4eval[2]=((IKabs((x5487+(((-1.0)*x5486)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5489=cj5*cj5;
IkReal x5490=r01*r01;
IkReal x5491=(r01*sj5);
IkReal x5492=(cj5*r00);
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal((x5491+(((-1.0)*x5492)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5491*x5492))+x5490+(r02*r02)+((x5489*(r00*r00)))+(((-1.0)*x5489*x5490)))),-1);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5493.value)+(((1.5707963267949)*(x5494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKcos(j4);
IkReal x5496=IKsin(j4);
IkReal x5497=(cj5*r00);
IkReal x5498=(cj5*r10);
IkReal x5499=(r21*sj5);
IkReal x5500=((1.0)*cj2);
IkReal x5501=(cj5*r20);
IkReal x5502=((1.0)*x5495);
IkReal x5503=((1.0)*x5496);
IkReal x5504=(sj5*x5496);
IkReal x5505=(sj5*x5495);
evalcond[0]=((((-1.0)*x5497*x5502))+((r01*x5505))+((r02*x5496)));
evalcond[1]=((((-1.0)*r22*x5502))+(((-1.0)*x5501*x5503))+((x5496*x5499)));
evalcond[2]=((((-1.0)*x5498*x5503))+(((-1.0)*r12*x5502))+((r11*x5504)));
evalcond[3]=((-1.0)+(((-1.0)*x5497*x5503))+(((-1.0)*r02*x5502))+((r01*x5504)));
evalcond[4]=(((x5495*x5499))+(((-1.0)*x5501*x5502))+((sj1*sj2))+(((-1.0)*cj1*x5500))+((r22*x5496)));
evalcond[5]=((((-1.0)*sj1*x5500))+(((-1.0)*x5498*x5502))+((r12*x5496))+(((-1.0)*cj1*sj2))+((r11*x5505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5506=((1.0)*cj5);
CheckValue<IkReal> x5507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5506)))),-1);
if(!x5507.valid){
continue;
}
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5507.value)))+(x5508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5509=IKcos(j4);
IkReal x5510=IKsin(j4);
IkReal x5511=(cj5*r00);
IkReal x5512=(cj5*r10);
IkReal x5513=(r21*sj5);
IkReal x5514=((1.0)*cj2);
IkReal x5515=(cj5*r20);
IkReal x5516=((1.0)*x5509);
IkReal x5517=((1.0)*x5510);
IkReal x5518=(sj5*x5510);
IkReal x5519=(sj5*x5509);
evalcond[0]=(((r02*x5510))+(((-1.0)*x5511*x5516))+((r01*x5519)));
evalcond[1]=((((-1.0)*r22*x5516))+(((-1.0)*x5515*x5517))+((x5510*x5513)));
evalcond[2]=((((-1.0)*x5512*x5517))+(((-1.0)*r12*x5516))+((r11*x5518)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5516))+(((-1.0)*x5511*x5517))+((r01*x5518)));
evalcond[4]=(((x5509*x5513))+(((-1.0)*x5515*x5516))+((sj1*sj2))+((r22*x5510))+(((-1.0)*cj1*x5514)));
evalcond[5]=((((-1.0)*x5512*x5516))+(((-1.0)*cj1*sj2))+((r12*x5510))+((r11*x5519))+(((-1.0)*sj1*x5514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5520.valid){
continue;
}
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5520.value)))+(x5521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5522=IKcos(j4);
IkReal x5523=IKsin(j4);
IkReal x5524=(cj5*r00);
IkReal x5525=(cj5*r10);
IkReal x5526=(r21*sj5);
IkReal x5527=((1.0)*cj2);
IkReal x5528=(cj5*r20);
IkReal x5529=((1.0)*x5522);
IkReal x5530=((1.0)*x5523);
IkReal x5531=(sj5*x5523);
IkReal x5532=(sj5*x5522);
evalcond[0]=(((r02*x5523))+((r01*x5532))+(((-1.0)*x5524*x5529)));
evalcond[1]=(((x5523*x5526))+(((-1.0)*r22*x5529))+(((-1.0)*x5528*x5530)));
evalcond[2]=(((r11*x5531))+(((-1.0)*x5525*x5530))+(((-1.0)*r12*x5529)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5529))+((r01*x5531))+(((-1.0)*x5524*x5530)));
evalcond[4]=(((x5522*x5526))+(((-1.0)*x5528*x5529))+((r22*x5523))+((sj1*sj2))+(((-1.0)*cj1*x5527)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x5527))+((r11*x5532))+((r12*x5523))+(((-1.0)*x5525*x5529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5533=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5533;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5534=((1.0)*cj5);
IkReal x5535=((((-1.0)*r21*x5534))+(((-1.0)*r20*sj5)));
j4eval[0]=x5535;
j4eval[1]=((IKabs(((((-1.0)*r10*x5534))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5536=cj5*cj5;
IkReal x5537=r01*r01;
IkReal x5538=(r01*sj5);
IkReal x5539=(cj5*r00);
IkReal x5540=(((x5536*x5537))+(((-1.0)*x5536*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x5538*x5539))+(((-1.0)*x5537)));
j4eval[0]=x5540;
j4eval[1]=IKsign(x5540);
j4eval[2]=((IKabs(r02))+(IKabs((x5538+(((-1.0)*x5539))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5541=cj5*cj5;
IkReal x5542=r01*r01;
IkReal x5543=(r01*sj5);
IkReal x5544=(cj5*r00);
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal((x5543+(((-1.0)*x5544)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x5541*x5542))+(((2.0)*x5543*x5544))+(((-1.0)*x5541*(r00*r00)))+(((-1.0)*x5542)))),-1);
if(!x5546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5545.value)+(((1.5707963267949)*(x5546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5547=IKcos(j4);
IkReal x5548=IKsin(j4);
IkReal x5549=(cj5*r00);
IkReal x5550=(cj5*r10);
IkReal x5551=(r21*sj5);
IkReal x5552=(cj5*r20);
IkReal x5553=((1.0)*x5547);
IkReal x5554=((1.0)*x5548);
IkReal x5555=(sj5*x5548);
IkReal x5556=(sj5*x5547);
evalcond[0]=(((r01*x5556))+(((-1.0)*x5549*x5553))+((r02*x5548)));
evalcond[1]=((((-1.0)*x5552*x5554))+((x5548*x5551))+(((-1.0)*r22*x5553)));
evalcond[2]=(((r11*x5555))+(((-1.0)*x5550*x5554))+(((-1.0)*r12*x5553)));
evalcond[3]=((1.0)+((r01*x5555))+(((-1.0)*x5549*x5554))+(((-1.0)*r02*x5553)));
evalcond[4]=(((cj2*sj1))+((r12*x5548))+((r11*x5556))+(((-1.0)*x5550*x5553))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x5552*x5553))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x5547*x5551))+((r22*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5557=((1.0)*cj5);
CheckValue<IkReal> x5558 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x5557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5558.valid){
continue;
}
CheckValue<IkReal> x5559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5557))+(((-1.0)*r20*sj5)))),-1);
if(!x5559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5558.value)+(((1.5707963267949)*(x5559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5560=IKcos(j4);
IkReal x5561=IKsin(j4);
IkReal x5562=(cj5*r00);
IkReal x5563=(cj5*r10);
IkReal x5564=(r21*sj5);
IkReal x5565=(cj5*r20);
IkReal x5566=((1.0)*x5560);
IkReal x5567=((1.0)*x5561);
IkReal x5568=(sj5*x5561);
IkReal x5569=(sj5*x5560);
evalcond[0]=(((r02*x5561))+(((-1.0)*x5562*x5566))+((r01*x5569)));
evalcond[1]=((((-1.0)*r22*x5566))+((x5561*x5564))+(((-1.0)*x5565*x5567)));
evalcond[2]=((((-1.0)*r12*x5566))+(((-1.0)*x5563*x5567))+((r11*x5568)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5566))+(((-1.0)*x5562*x5567))+((r01*x5568)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5563*x5566))+((cj1*sj2))+((r11*x5569))+((r12*x5561)));
evalcond[5]=(((x5560*x5564))+((r22*x5561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5565*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5570.value)+(((1.5707963267949)*(x5571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5572=IKcos(j4);
IkReal x5573=IKsin(j4);
IkReal x5574=(cj5*r00);
IkReal x5575=(cj5*r10);
IkReal x5576=(r21*sj5);
IkReal x5577=(cj5*r20);
IkReal x5578=((1.0)*x5572);
IkReal x5579=((1.0)*x5573);
IkReal x5580=(sj5*x5573);
IkReal x5581=(sj5*x5572);
evalcond[0]=(((r02*x5573))+(((-1.0)*x5574*x5578))+((r01*x5581)));
evalcond[1]=(((x5573*x5576))+(((-1.0)*r22*x5578))+(((-1.0)*x5577*x5579)));
evalcond[2]=((((-1.0)*r12*x5578))+((r11*x5580))+(((-1.0)*x5575*x5579)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5578))+(((-1.0)*x5574*x5579))+((r01*x5580)));
evalcond[4]=(((cj2*sj1))+((r11*x5581))+((cj1*sj2))+((r12*x5573))+(((-1.0)*x5575*x5578)));
evalcond[5]=(((x5572*x5576))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x5573))+(((-1.0)*x5577*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5582=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5582);
rxp1_1=(px*r21);
rxp1_2=(r11*x5582);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5583=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5583);
rxp1_1=(px*r21);
rxp1_2=(r11*x5583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5584=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5584);
rxp1_1=(px*r21);
rxp1_2=(r11*x5584);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5587.valid){
continue;
}
IkReal x5585=x5587.value;
IkReal x5586=(sj0*x5585);
cj4array[0]=(((cj2*sj1*x5586))+((cj1*sj2*x5586)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5588=IKsin(j4);
IkReal x5589=IKcos(j4);
IkReal x5590=(r21*sj5);
IkReal x5591=((1.0)*cj5*r20);
evalcond[0]=(r02*x5588);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x5589)));
evalcond[2]=((((-1.0)*x5588*x5591))+((x5588*x5590)));
evalcond[3]=((((-1.0)*cj5*r10*x5588))+((r11*sj5*x5588)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x5589*x5590))+(((-1.0)*x5589*x5591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5593=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5593.valid){
continue;
}
IkReal x5592=x5593.value;
cj4array[0]=(((cj1*cj2*x5592))+(((-1.0)*sj1*sj2*x5592)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5594=IKsin(j4);
IkReal x5595=IKcos(j4);
IkReal x5596=((1.0)*sj0);
IkReal x5597=((1.0)*cj5);
IkReal x5598=(sj5*x5594);
evalcond[0]=(r02*x5594);
evalcond[1]=((((-1.0)*r02*x5595))+(((-1.0)*x5596)));
evalcond[2]=(((r21*x5598))+(((-1.0)*r20*x5594*x5597)));
evalcond[3]=((((-1.0)*r10*x5594*x5597))+((r11*x5598)));
evalcond[4]=((((-1.0)*cj1*sj2*x5596))+((r11*sj5*x5595))+(((-1.0)*cj2*sj1*x5596))+(((-1.0)*r10*x5595*x5597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5599=IKPowWithIntegerCheck(r02,-1);
if(!x5599.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5599.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5600=IKsin(j4);
IkReal x5601=IKcos(j4);
IkReal x5602=((1.0)*cj1);
IkReal x5603=(r21*sj5);
IkReal x5604=((1.0)*cj5);
IkReal x5605=(r11*sj5);
evalcond[0]=(r02*x5600);
evalcond[1]=(((x5600*x5603))+(((-1.0)*r20*x5600*x5604)));
evalcond[2]=(((x5600*x5605))+(((-1.0)*r10*x5600*x5604)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x5601*x5604))+(((-1.0)*cj2*x5602))+((x5601*x5603)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x5601*x5604))+(((-1.0)*sj0*sj2*x5602))+((x5601*x5605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5606=((1.0)*sj0);
IkReal x5607=((1.0)*cj0);
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5606))+(((-1.0)*r02*x5607)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x5607))+(((-1.0)*r11*sj5*x5606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5608.value)+(((1.5707963267949)*(x5609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5610=IKsin(j4);
IkReal x5611=IKcos(j4);
IkReal x5612=(cj5*r00);
IkReal x5613=(cj5*r10);
IkReal x5614=(r21*sj5);
IkReal x5615=((1.0)*cj2);
IkReal x5616=((1.0)*sj0);
IkReal x5617=(cj1*sj2);
IkReal x5618=(cj5*r20);
IkReal x5619=((1.0)*x5611);
IkReal x5620=((1.0)*x5610);
IkReal x5621=(sj5*x5610);
IkReal x5622=(sj5*x5611);
evalcond[0]=((((-1.0)*x5618*x5620))+(((-1.0)*r22*x5619))+((x5610*x5614)));
evalcond[1]=((((-1.0)*x5613*x5620))+cj0+(((-1.0)*r12*x5619))+((r11*x5621)));
evalcond[2]=((((-1.0)*x5612*x5620))+((r01*x5621))+(((-1.0)*r02*x5619))+(((-1.0)*x5616)));
evalcond[3]=((((-1.0)*x5618*x5619))+((sj1*sj2))+((x5611*x5614))+(((-1.0)*cj1*x5615))+((r22*x5610)));
evalcond[4]=((((-1.0)*x5612*x5619))+((r02*x5610))+(((-1.0)*cj0*x5617))+((r01*x5622))+(((-1.0)*cj0*sj1*x5615)));
evalcond[5]=((((-1.0)*x5613*x5619))+((r12*x5610))+((r11*x5622))+(((-1.0)*x5616*x5617))+(((-1.0)*sj0*sj1*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5623=((1.0)*cj5);
CheckValue<IkReal> x5624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5623)))),-1);
if(!x5624.valid){
continue;
}
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5624.value)))+(x5625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5626=IKsin(j4);
IkReal x5627=IKcos(j4);
IkReal x5628=(cj5*r00);
IkReal x5629=(cj5*r10);
IkReal x5630=(r21*sj5);
IkReal x5631=((1.0)*cj2);
IkReal x5632=((1.0)*sj0);
IkReal x5633=(cj1*sj2);
IkReal x5634=(cj5*r20);
IkReal x5635=((1.0)*x5627);
IkReal x5636=((1.0)*x5626);
IkReal x5637=(sj5*x5626);
IkReal x5638=(sj5*x5627);
evalcond[0]=(((x5626*x5630))+(((-1.0)*r22*x5635))+(((-1.0)*x5634*x5636)));
evalcond[1]=((((-1.0)*r12*x5635))+(((-1.0)*x5629*x5636))+((r11*x5637))+cj0);
evalcond[2]=(((r01*x5637))+(((-1.0)*x5628*x5636))+(((-1.0)*r02*x5635))+(((-1.0)*x5632)));
evalcond[3]=((((-1.0)*cj1*x5631))+((x5627*x5630))+((sj1*sj2))+((r22*x5626))+(((-1.0)*x5634*x5635)));
evalcond[4]=((((-1.0)*cj0*x5633))+((r01*x5638))+(((-1.0)*x5628*x5635))+(((-1.0)*cj0*sj1*x5631))+((r02*x5626)));
evalcond[5]=((((-1.0)*x5632*x5633))+(((-1.0)*x5629*x5635))+((r11*x5638))+(((-1.0)*sj0*sj1*x5631))+((r12*x5626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5639=((1.0)*cj5);
CheckValue<IkReal> x5640=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5639)))),-1);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5640.value)))+(x5641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKsin(j4);
IkReal x5643=IKcos(j4);
IkReal x5644=(cj5*r00);
IkReal x5645=(cj5*r10);
IkReal x5646=(r21*sj5);
IkReal x5647=((1.0)*cj2);
IkReal x5648=((1.0)*sj0);
IkReal x5649=(cj1*sj2);
IkReal x5650=(cj5*r20);
IkReal x5651=((1.0)*x5643);
IkReal x5652=((1.0)*x5642);
IkReal x5653=(sj5*x5642);
IkReal x5654=(sj5*x5643);
evalcond[0]=((((-1.0)*r22*x5651))+((x5642*x5646))+(((-1.0)*x5650*x5652)));
evalcond[1]=((((-1.0)*r12*x5651))+cj0+(((-1.0)*x5645*x5652))+((r11*x5653)));
evalcond[2]=(((r01*x5653))+(((-1.0)*x5644*x5652))+(((-1.0)*x5648))+(((-1.0)*r02*x5651)));
evalcond[3]=((((-1.0)*cj1*x5647))+((sj1*sj2))+((r22*x5642))+(((-1.0)*x5650*x5651))+((x5643*x5646)));
evalcond[4]=((((-1.0)*cj0*x5649))+((r01*x5654))+(((-1.0)*x5644*x5651))+(((-1.0)*cj0*sj1*x5647))+((r02*x5642)));
evalcond[5]=((((-1.0)*x5645*x5651))+((r12*x5642))+(((-1.0)*x5648*x5649))+((r11*x5654))+(((-1.0)*sj0*sj1*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5655=r21*r21;
IkReal x5656=cj5*cj5;
IkReal x5657=(sj1*sj2);
IkReal x5658=(r21*sj5);
IkReal x5659=(cj1*cj2);
IkReal x5660=(cj5*r20);
CheckValue<IkReal> x5661 = IKatan2WithCheck(IkReal((((r22*x5657))+(((-1.0)*r22*x5659)))),IkReal((((x5659*x5660))+(((-1.0)*x5657*x5660))+(((-1.0)*x5658*x5659))+((x5657*x5658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5661.valid){
continue;
}
CheckValue<IkReal> x5662=IKPowWithIntegerCheck(IKsign((((x5655*x5656))+(((-1.0)*x5656*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5655))+(((2.0)*x5658*x5660)))),-1);
if(!x5662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5661.value)+(((1.5707963267949)*(x5662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5663=IKsin(j4);
IkReal x5664=IKcos(j4);
IkReal x5665=(r21*sj5);
IkReal x5666=(cj5*r20);
IkReal x5667=((1.0)*x5664);
evalcond[0]=((((-1.0)*r22*x5667))+(((-1.0)*x5663*x5666))+((x5663*x5665)));
evalcond[1]=(((x5664*x5665))+((r22*x5663))+(((-1.0)*x5666*x5667))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5668=(cj5*sj4);
IkReal x5669=(sj4*sj5);
if( IKabs((((r01*x5669))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x5668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5668))+(((-1.0)*r11*x5669))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5669))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x5668))))+IKsqr((((r10*x5668))+(((-1.0)*r11*x5669))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x5669))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x5668))), (((r10*x5668))+(((-1.0)*r11*x5669))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5670=IKcos(j0);
IkReal x5671=IKsin(j0);
IkReal x5672=((0.39225)*cj1);
IkReal x5673=(cj5*r01);
IkReal x5674=((1.0)*sj1);
IkReal x5675=(r11*sj5);
IkReal x5676=((0.425)*sj1);
IkReal x5677=(r00*sj5);
IkReal x5678=(cj5*r11);
IkReal x5679=((1.0)*cj4);
IkReal x5680=(r01*sj5);
IkReal x5681=((0.39225)*sj1);
IkReal x5682=(r10*sj5);
IkReal x5683=(sj2*x5671);
IkReal x5684=(cj1*x5670);
IkReal x5685=(cj2*x5671);
IkReal x5686=(cj5*x5679);
IkReal x5687=(cj2*x5670);
IkReal x5688=(sj2*x5670);
IkReal x5689=((1.0)*cj5*sj4);
evalcond[0]=(x5670+(((-1.0)*r12*x5679))+(((-1.0)*r10*x5689))+((sj4*x5675)));
evalcond[1]=(((sj4*x5680))+(((-1.0)*x5671))+(((-1.0)*r00*x5689))+(((-1.0)*r02*x5679)));
evalcond[2]=(x5673+x5677+((cj2*x5684))+(((-1.0)*x5674*x5688)));
evalcond[3]=(x5682+x5678+((cj1*x5685))+(((-1.0)*x5674*x5683)));
evalcond[4]=((((-1.0)*sj2*x5684))+((r02*sj4))+((cj4*x5680))+(((-1.0)*x5674*x5687))+(((-1.0)*r00*x5686)));
evalcond[5]=((((-1.0)*r10*x5686))+(((-1.0)*cj1*x5683))+((r12*sj4))+(((-1.0)*x5674*x5685))+((cj4*x5675)));
evalcond[6]=((((-0.09465)*x5673))+(((-0.09465)*x5677))+((x5672*x5688))+((x5681*x5687))+((x5670*x5676))+(((-1.0)*px))+(((-0.10915)*x5671)));
evalcond[7]=((((-0.09465)*x5678))+((x5672*x5683))+((x5681*x5685))+(((-1.0)*py))+(((0.10915)*x5670))+((x5671*x5676))+(((-0.09465)*x5682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5690=((1.0)*cj5);
IkReal x5691=((1.0)*sj5);
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5691))+(((-1.0)*r11*x5690)))),IkReal(((((-1.0)*r00*x5691))+(((-1.0)*r01*x5690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5692.value)))+(x5693.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5694=IKcos(j0);
IkReal x5695=IKsin(j0);
IkReal x5696=((0.39225)*cj1);
IkReal x5697=((1.0)*sj1);
IkReal x5698=(cj1*cj2);
IkReal x5699=(cj5*r11);
IkReal x5700=(r00*sj5);
IkReal x5701=(cj5*r01);
IkReal x5702=((0.39225)*cj2);
IkReal x5703=(r10*sj5);
IkReal x5704=(sj2*x5695);
IkReal x5705=(sj1*x5694);
IkReal x5706=(sj2*x5694);
IkReal x5707=(sj1*x5695);
evalcond[0]=(((x5694*x5698))+(((-1.0)*x5697*x5706))+x5700+x5701);
evalcond[1]=(x5699+((x5695*x5698))+(((-1.0)*x5697*x5704))+x5703);
evalcond[2]=((((0.425)*x5705))+((x5696*x5706))+(((-0.10915)*x5695))+(((-1.0)*px))+(((-0.09465)*x5700))+(((-0.09465)*x5701))+((x5702*x5705)));
evalcond[3]=((((0.425)*x5707))+((x5696*x5704))+(((-1.0)*py))+(((-0.09465)*x5703))+(((-0.09465)*x5699))+(((0.10915)*x5694))+((x5702*x5707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5708=((1.0)*cj5);
IkReal x5709=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5708)));
j4eval[0]=x5709;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5708))))));
j4eval[2]=IKsign(x5709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5710=((1.0)*cj5);
IkReal x5711=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5710)));
j4eval[0]=x5711;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5710)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5712=((1.0)*sj0);
IkReal x5713=((1.0)*cj0);
IkReal x5714=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5714;
j4eval[1]=((IKabs(((((-1.0)*r12*x5712))+(((-1.0)*r02*x5713)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5713))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5712))))));
j4eval[2]=IKsign(x5714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5715=((-1.0)*r20);
IkReal x5717 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5717)==0){
continue;
}
IkReal x5716=pow(x5717,-0.5);
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5715),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5718.value));
IkReal gconst115=(r21*x5716);
IkReal gconst116=(x5715*x5716);
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5719.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5720=((-1.0)*r20);
IkReal x5721=x5716;
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5720),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
IkReal x5722=((-1.0)*(x5723.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5722;
IkReal gconst114=x5722;
IkReal gconst115=(r21*x5721);
IkReal gconst116=(x5720*x5721);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5724=((-1.0)*r20);
IkReal x5725=x5716;
CheckValue<IkReal> x5727 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5724),IKFAST_ATAN2_MAGTHRESH);
if(!x5727.valid){
continue;
}
IkReal x5726=((-1.0)*(x5727.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5726;
IkReal gconst114=x5726;
IkReal gconst115=(r21*x5725);
IkReal gconst116=(x5724*x5725);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5728=((-1.0)*r20);
IkReal x5729=x5716;
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5728),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
IkReal x5730=((-1.0)*(x5731.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5730;
IkReal gconst114=x5730;
IkReal gconst115=(r21*x5729);
IkReal gconst116=(x5728*x5729);
IkReal x5732=((1.0)*(r22*r22));
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5732))),-1);
if(!x5736.valid){
continue;
}
IkReal x5733=x5736.value;
IkReal x5734=((1.0)*x5733);
IkReal x5735=((((-2.0)*x5733*(r20*r20)*(r21*r21)))+(((-1.0)*x5732))+(((-1.0)*x5734*(r21*r21*r21*r21)))+(((-1.0)*x5734*(r20*r20*r20*r20))));
j4eval[0]=x5735;
j4eval[1]=IKsign(x5735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5737=(sj1*sj2);
IkReal x5738=(gconst116*r20);
IkReal x5739=(gconst115*r21);
IkReal x5740=(cj1*cj2);
CheckValue<IkReal> x5741=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5738*x5738)))+(((-1.0)*(x5739*x5739)))+(((-1.0)*(r22*r22)))+(((2.0)*x5738*x5739)))),-1);
if(!x5741.valid){
continue;
}
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5740))+((r22*x5737)))),IkReal((((x5737*x5739))+(((-1.0)*x5737*x5738))+(((-1.0)*x5739*x5740))+((x5738*x5740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5741.value)))+(x5742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5743=IKsin(j4);
IkReal x5744=IKcos(j4);
IkReal x5745=(gconst115*r21);
IkReal x5746=((1.0)*cj2);
IkReal x5747=((1.0)*sj0);
IkReal x5748=(cj1*sj2);
IkReal x5749=((1.0)*x5744);
IkReal x5750=(gconst115*x5744);
IkReal x5751=(gconst115*x5743);
IkReal x5752=((1.0)*gconst116*x5743);
evalcond[0]=((((-1.0)*r20*x5752))+((x5743*x5745))+(((-1.0)*r22*x5749)));
evalcond[1]=(cj0+(((-1.0)*r10*x5752))+(((-1.0)*r12*x5749))+((r11*x5751)));
evalcond[2]=((((-1.0)*r00*x5752))+(((-1.0)*r02*x5749))+((r01*x5751))+(((-1.0)*x5747)));
evalcond[3]=((((-1.0)*cj1*x5746))+((r22*x5743))+(((-1.0)*gconst116*r20*x5749))+((x5744*x5745))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x5748))+((r01*x5750))+(((-1.0)*cj0*sj1*x5746))+(((-1.0)*gconst116*r00*x5749))+((r02*x5743)));
evalcond[5]=((((-1.0)*gconst116*r10*x5749))+(((-1.0)*sj0*sj1*x5746))+(((-1.0)*x5747*x5748))+((r11*x5750))+((r12*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5753=((1.0)*gconst116);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5753))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
CheckValue<IkReal> x5755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5753)))),-1);
if(!x5755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5754.value)+(((1.5707963267949)*(x5755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5756=IKsin(j4);
IkReal x5757=IKcos(j4);
IkReal x5758=(gconst115*r21);
IkReal x5759=((1.0)*cj2);
IkReal x5760=((1.0)*sj0);
IkReal x5761=(cj1*sj2);
IkReal x5762=((1.0)*x5757);
IkReal x5763=(gconst115*x5757);
IkReal x5764=(gconst115*x5756);
IkReal x5765=((1.0)*gconst116*x5756);
evalcond[0]=((((-1.0)*r20*x5765))+((x5756*x5758))+(((-1.0)*r22*x5762)));
evalcond[1]=(cj0+(((-1.0)*r12*x5762))+(((-1.0)*r10*x5765))+((r11*x5764)));
evalcond[2]=(((r01*x5764))+(((-1.0)*r02*x5762))+(((-1.0)*x5760))+(((-1.0)*r00*x5765)));
evalcond[3]=((((-1.0)*gconst116*r20*x5762))+(((-1.0)*cj1*x5759))+((sj1*sj2))+((x5757*x5758))+((r22*x5756)));
evalcond[4]=((((-1.0)*gconst116*r00*x5762))+((r01*x5763))+(((-1.0)*cj0*sj1*x5759))+((r02*x5756))+(((-1.0)*cj0*x5761)));
evalcond[5]=((((-1.0)*sj0*sj1*x5759))+(((-1.0)*x5760*x5761))+((r11*x5763))+(((-1.0)*gconst116*r10*x5762))+((r12*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5766=((1.0)*gconst116);
CheckValue<IkReal> x5767 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5767.valid){
continue;
}
CheckValue<IkReal> x5768=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5766))+(((-1.0)*gconst115*r00)))),-1);
if(!x5768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5767.value)+(((1.5707963267949)*(x5768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5769=IKsin(j4);
IkReal x5770=IKcos(j4);
IkReal x5771=(gconst115*r21);
IkReal x5772=((1.0)*cj2);
IkReal x5773=((1.0)*sj0);
IkReal x5774=(cj1*sj2);
IkReal x5775=((1.0)*x5770);
IkReal x5776=(gconst115*x5770);
IkReal x5777=(gconst115*x5769);
IkReal x5778=((1.0)*gconst116*x5769);
evalcond[0]=((((-1.0)*r20*x5778))+((x5769*x5771))+(((-1.0)*r22*x5775)));
evalcond[1]=(cj0+(((-1.0)*r12*x5775))+(((-1.0)*r10*x5778))+((r11*x5777)));
evalcond[2]=((((-1.0)*r00*x5778))+((r01*x5777))+(((-1.0)*r02*x5775))+(((-1.0)*x5773)));
evalcond[3]=((((-1.0)*cj1*x5772))+((x5770*x5771))+((r22*x5769))+((sj1*sj2))+(((-1.0)*gconst116*r20*x5775)));
evalcond[4]=((((-1.0)*gconst116*r00*x5775))+((r01*x5776))+(((-1.0)*cj0*sj1*x5772))+((r02*x5769))+(((-1.0)*cj0*x5774)));
evalcond[5]=((((-1.0)*sj0*sj1*x5772))+((r11*x5776))+(((-1.0)*gconst116*r10*x5775))+((r12*x5769))+(((-1.0)*x5773*x5774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5779=((-1.0)*r21);
IkReal x5781 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5781)==0){
continue;
}
IkReal x5780=pow(x5781,-0.5);
CheckValue<IkReal> x5782 = IKatan2WithCheck(IkReal(x5779),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5782.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5782.value))));
IkReal gconst118=(x5779*x5780);
IkReal gconst119=((1.0)*r20*x5780);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5784=((-1.0)*r21);
CheckValue<IkReal> x5787 = IKatan2WithCheck(IkReal(x5784),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5787.valid){
continue;
}
IkReal x5785=((1.0)*(x5787.value));
IkReal x5786=x5780;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5785)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5785)));
IkReal gconst118=(x5784*x5786);
IkReal gconst119=((1.0)*r20*x5786);
IkReal x5788=r22*r22;
IkReal x5789=((1.0)*x5788);
CheckValue<IkReal> x5793=IKPowWithIntegerCheck(((-1.0)+x5788),-1);
if(!x5793.valid){
continue;
}
IkReal x5790=x5793.value;
if((((1.0)+(((-1.0)*x5789)))) < -0.00001)
continue;
IkReal x5791=IKsqrt(((1.0)+(((-1.0)*x5789))));
IkReal x5792=(cj0*x5790*x5791);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x5789*x5792))+x5792))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5794=((-1.0)*r21);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal(x5794),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
IkReal x5795=((1.0)*(x5797.value));
IkReal x5796=x5780;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5795)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5795)));
IkReal gconst118=(x5794*x5796);
IkReal gconst119=((1.0)*r20*x5796);
IkReal x5798=r22*r22;
IkReal x5799=((1.0)*x5798);
CheckValue<IkReal> x5803=IKPowWithIntegerCheck(((-1.0)+x5798),-1);
if(!x5803.valid){
continue;
}
IkReal x5800=x5803.value;
if((((1.0)+(((-1.0)*x5799)))) < -0.00001)
continue;
IkReal x5801=IKsqrt(((1.0)+(((-1.0)*x5799))));
IkReal x5802=(sj0*x5800*x5801);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x5799*x5802))+x5802))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5804=((-1.0)*r21);
CheckValue<IkReal> x5807 = IKatan2WithCheck(IkReal(x5804),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5807.valid){
continue;
}
IkReal x5805=((1.0)*(x5807.value));
IkReal x5806=x5780;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5805)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5805)));
IkReal gconst118=(x5804*x5806);
IkReal gconst119=((1.0)*r20*x5806);
IkReal x5808=((1.0)*(r22*r22));
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5808))),-1);
if(!x5812.valid){
continue;
}
IkReal x5809=x5812.value;
IkReal x5810=((1.0)*x5809);
IkReal x5811=((((-1.0)*x5810*(r21*r21*r21*r21)))+(((-2.0)*x5809*(r20*r20)*(r21*r21)))+(((-1.0)*x5808))+(((-1.0)*x5810*(r20*r20*r20*r20))));
j4eval[0]=x5811;
j4eval[1]=IKsign(x5811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=(gconst119*r20);
IkReal x5814=(cj1*cj2);
IkReal x5815=(sj1*sj2);
IkReal x5816=(gconst118*r21);
CheckValue<IkReal> x5817 = IKatan2WithCheck(IkReal((((r22*x5815))+(((-1.0)*r22*x5814)))),IkReal(((((-1.0)*x5813*x5815))+((x5815*x5816))+((x5813*x5814))+(((-1.0)*x5814*x5816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5817.valid){
continue;
}
CheckValue<IkReal> x5818=IKPowWithIntegerCheck(IKsign(((((2.0)*x5813*x5816))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5813*x5813)))+(((-1.0)*(x5816*x5816))))),-1);
if(!x5818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5817.value)+(((1.5707963267949)*(x5818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5819=IKsin(j4);
IkReal x5820=IKcos(j4);
IkReal x5821=(gconst118*r01);
IkReal x5822=(gconst119*r20);
IkReal x5823=((1.0)*cj2);
IkReal x5824=(gconst119*r10);
IkReal x5825=(gconst119*r00);
IkReal x5826=(gconst118*r21);
IkReal x5827=((1.0)*sj0);
IkReal x5828=(gconst118*r11);
IkReal x5829=(cj1*sj2);
IkReal x5830=((1.0)*x5820);
IkReal x5831=((1.0)*x5819);
evalcond[0]=((((-1.0)*r22*x5830))+((x5819*x5826))+(((-1.0)*x5822*x5831)));
evalcond[1]=(cj0+(((-1.0)*x5824*x5831))+((x5819*x5828))+(((-1.0)*r12*x5830)));
evalcond[2]=((((-1.0)*x5827))+(((-1.0)*r02*x5830))+((x5819*x5821))+(((-1.0)*x5825*x5831)));
evalcond[3]=((((-1.0)*cj1*x5823))+((x5820*x5826))+((r22*x5819))+((sj1*sj2))+(((-1.0)*x5822*x5830)));
evalcond[4]=(((x5820*x5821))+(((-1.0)*cj0*sj1*x5823))+((r02*x5819))+(((-1.0)*cj0*x5829))+(((-1.0)*x5825*x5830)));
evalcond[5]=(((x5820*x5828))+(((-1.0)*sj0*sj1*x5823))+((r12*x5819))+(((-1.0)*x5824*x5830))+(((-1.0)*x5827*x5829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5832=((1.0)*gconst119);
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5832)))),-1);
if(!x5833.valid){
continue;
}
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5832))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5833.value)))+(x5834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5835=IKsin(j4);
IkReal x5836=IKcos(j4);
IkReal x5837=(gconst118*r01);
IkReal x5838=(gconst119*r20);
IkReal x5839=((1.0)*cj2);
IkReal x5840=(gconst119*r10);
IkReal x5841=(gconst119*r00);
IkReal x5842=(gconst118*r21);
IkReal x5843=((1.0)*sj0);
IkReal x5844=(gconst118*r11);
IkReal x5845=(cj1*sj2);
IkReal x5846=((1.0)*x5836);
IkReal x5847=((1.0)*x5835);
evalcond[0]=(((x5835*x5842))+(((-1.0)*x5838*x5847))+(((-1.0)*r22*x5846)));
evalcond[1]=(cj0+((x5835*x5844))+(((-1.0)*x5840*x5847))+(((-1.0)*r12*x5846)));
evalcond[2]=(((x5835*x5837))+(((-1.0)*r02*x5846))+(((-1.0)*x5841*x5847))+(((-1.0)*x5843)));
evalcond[3]=((((-1.0)*cj1*x5839))+((sj1*sj2))+(((-1.0)*x5838*x5846))+((x5836*x5842))+((r22*x5835)));
evalcond[4]=(((r02*x5835))+(((-1.0)*cj0*sj1*x5839))+((x5836*x5837))+(((-1.0)*cj0*x5845))+(((-1.0)*x5841*x5846)));
evalcond[5]=(((r12*x5835))+(((-1.0)*sj0*sj1*x5839))+(((-1.0)*x5840*x5846))+((x5836*x5844))+(((-1.0)*x5843*x5845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5848=((1.0)*gconst119);
CheckValue<IkReal> x5849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5848))+(((-1.0)*gconst118*r00)))),-1);
if(!x5849.valid){
continue;
}
CheckValue<IkReal> x5850 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5849.value)))+(x5850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5851=IKsin(j4);
IkReal x5852=IKcos(j4);
IkReal x5853=(gconst118*r01);
IkReal x5854=(gconst119*r20);
IkReal x5855=((1.0)*cj2);
IkReal x5856=(gconst119*r10);
IkReal x5857=(gconst119*r00);
IkReal x5858=(gconst118*r21);
IkReal x5859=((1.0)*sj0);
IkReal x5860=(gconst118*r11);
IkReal x5861=(cj1*sj2);
IkReal x5862=((1.0)*x5852);
IkReal x5863=((1.0)*x5851);
evalcond[0]=((((-1.0)*r22*x5862))+(((-1.0)*x5854*x5863))+((x5851*x5858)));
evalcond[1]=(((x5851*x5860))+cj0+(((-1.0)*x5856*x5863))+(((-1.0)*r12*x5862)));
evalcond[2]=(((x5851*x5853))+(((-1.0)*x5859))+(((-1.0)*r02*x5862))+(((-1.0)*x5857*x5863)));
evalcond[3]=((((-1.0)*x5854*x5862))+(((-1.0)*cj1*x5855))+((x5852*x5858))+((sj1*sj2))+((r22*x5851)));
evalcond[4]=((((-1.0)*cj0*x5861))+((x5852*x5853))+((r02*x5851))+(((-1.0)*x5857*x5862))+(((-1.0)*cj0*sj1*x5855)));
evalcond[5]=(((x5852*x5860))+((r12*x5851))+(((-1.0)*x5859*x5861))+(((-1.0)*x5856*x5862))+(((-1.0)*sj0*sj1*x5855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5864=((-1.0)*r10);
IkReal x5866 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5866)==0){
continue;
}
IkReal x5865=pow(x5866,-0.5);
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5864),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5867.value));
IkReal gconst121=(r11*x5865);
IkReal gconst122=(x5864*x5865);
CheckValue<IkReal> x5868 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5868.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5868.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5869=((-1.0)*r10);
IkReal x5870=x5865;
CheckValue<IkReal> x5872 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5869),IKFAST_ATAN2_MAGTHRESH);
if(!x5872.valid){
continue;
}
IkReal x5871=((-1.0)*(x5872.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5871;
IkReal gconst120=x5871;
IkReal gconst121=(r11*x5870);
IkReal gconst122=(x5869*x5870);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5873=((1.0)*sj0);
IkReal x5874=((1.0)*gconst121);
CheckValue<IkReal> x5875=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5874)))),-1);
if(!x5875.valid){
continue;
}
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5873))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5873))+(((-1.0)*cj0*r01*x5874))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5875.value)))+(x5876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5877=IKsin(j4);
IkReal x5878=IKcos(j4);
IkReal x5879=(gconst121*r11);
IkReal x5880=(gconst122*r00);
IkReal x5881=((1.0)*cj2);
IkReal x5882=((1.0)*sj0);
IkReal x5883=(gconst122*r10);
IkReal x5884=(gconst122*r20);
IkReal x5885=(cj1*sj2);
IkReal x5886=((1.0)*x5878);
IkReal x5887=(gconst121*x5877);
IkReal x5888=((1.0)*x5877);
IkReal x5889=(gconst121*x5878);
evalcond[0]=(((r21*x5887))+(((-1.0)*x5884*x5888))+(((-1.0)*r22*x5886)));
evalcond[1]=((((-1.0)*x5883*x5888))+cj0+((x5877*x5879))+(((-1.0)*r12*x5886)));
evalcond[2]=(((r01*x5887))+(((-1.0)*x5880*x5888))+(((-1.0)*r02*x5886))+(((-1.0)*x5882)));
evalcond[3]=((((-1.0)*cj1*x5881))+((r22*x5877))+((sj1*sj2))+((r21*x5889))+(((-1.0)*x5884*x5886)));
evalcond[4]=(((r01*x5889))+(((-1.0)*cj0*x5885))+(((-1.0)*x5880*x5886))+((r02*x5877))+(((-1.0)*cj0*sj1*x5881)));
evalcond[5]=((((-1.0)*x5883*x5886))+((x5878*x5879))+(((-1.0)*sj0*sj1*x5881))+(((-1.0)*x5882*x5885))+((r12*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5890=((1.0)*gconst122);
CheckValue<IkReal> x5891=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5890)))),-1);
if(!x5891.valid){
continue;
}
CheckValue<IkReal> x5892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst121*r21))+(((-1.0)*cj0*r20*x5890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5891.value)))+(x5892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5893=IKsin(j4);
IkReal x5894=IKcos(j4);
IkReal x5895=(gconst121*r11);
IkReal x5896=(gconst122*r00);
IkReal x5897=((1.0)*cj2);
IkReal x5898=((1.0)*sj0);
IkReal x5899=(gconst122*r10);
IkReal x5900=(gconst122*r20);
IkReal x5901=(cj1*sj2);
IkReal x5902=((1.0)*x5894);
IkReal x5903=(gconst121*x5893);
IkReal x5904=((1.0)*x5893);
IkReal x5905=(gconst121*x5894);
evalcond[0]=((((-1.0)*r22*x5902))+((r21*x5903))+(((-1.0)*x5900*x5904)));
evalcond[1]=((((-1.0)*r12*x5902))+cj0+((x5893*x5895))+(((-1.0)*x5899*x5904)));
evalcond[2]=((((-1.0)*x5896*x5904))+(((-1.0)*x5898))+(((-1.0)*r02*x5902))+((r01*x5903)));
evalcond[3]=(((r22*x5893))+((sj1*sj2))+((r21*x5905))+(((-1.0)*x5900*x5902))+(((-1.0)*cj1*x5897)));
evalcond[4]=((((-1.0)*cj0*x5901))+(((-1.0)*x5896*x5902))+((r02*x5893))+(((-1.0)*cj0*sj1*x5897))+((r01*x5905)));
evalcond[5]=((((-1.0)*sj0*sj1*x5897))+(((-1.0)*x5898*x5901))+((x5894*x5895))+((r12*x5893))+(((-1.0)*x5899*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5906=((-1.0)*r11);
IkReal x5908 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5908)==0){
continue;
}
IkReal x5907=pow(x5908,-0.5);
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal(x5906),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5909.value))));
IkReal gconst124=(x5906*x5907);
IkReal gconst125=((1.0)*r10*x5907);
CheckValue<IkReal> x5910 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5910.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5911=((-1.0)*r11);
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(x5911),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
IkReal x5912=((1.0)*(x5914.value));
IkReal x5913=x5907;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5912)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5912)));
IkReal gconst124=(x5911*x5913);
IkReal gconst125=((1.0)*r10*x5913);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5915=((-1.0)*r11);
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal(x5915),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
IkReal x5916=((1.0)*(x5918.value));
IkReal x5917=x5907;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5916)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5916)));
IkReal gconst124=(x5915*x5917);
IkReal gconst125=((1.0)*r10*x5917);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5919=((-1.0)*r11);
CheckValue<IkReal> x5922 = IKatan2WithCheck(IkReal(x5919),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5922.valid){
continue;
}
IkReal x5920=((1.0)*(x5922.value));
IkReal x5921=x5907;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5920)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5920)));
IkReal gconst124=(x5919*x5921);
IkReal gconst125=((1.0)*r10*x5921);
IkReal x5923=r12*r12;
IkReal x5924=((1.0)*sj0);
IkReal x5925=(cj0*r02);
IkReal x5926=x5907;
j4eval[0]=((IKabs(((((-1.0)*x5925))+(((-1.0)*r12*x5924)))))+(IKabs((((sj0*x5923*x5926))+((r12*x5925*x5926))+(((-1.0)*x5924*x5926))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5927=((1.0)*sj0);
IkReal x5928=((1.0)*cj0);
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5928))+(((-1.0)*r12*x5927)))),IkReal(((((-1.0)*gconst124*r01*x5928))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x5927))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
CheckValue<IkReal> x5930=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5929.value)+(((1.5707963267949)*(x5930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5931=IKsin(j4);
IkReal x5932=IKcos(j4);
IkReal x5933=(gconst125*r20);
IkReal x5934=(gconst124*r01);
IkReal x5935=((1.0)*cj2);
IkReal x5936=((1.0)*sj0);
IkReal x5937=(gconst125*r00);
IkReal x5938=(gconst125*r10);
IkReal x5939=(cj1*sj2);
IkReal x5940=((1.0)*x5932);
IkReal x5941=((1.0)*x5931);
IkReal x5942=(gconst124*x5931);
IkReal x5943=(gconst124*x5932);
evalcond[0]=((((-1.0)*r22*x5940))+((r21*x5942))+(((-1.0)*x5933*x5941)));
evalcond[1]=(cj0+(((-1.0)*r12*x5940))+(((-1.0)*x5938*x5941))+((r11*x5942)));
evalcond[2]=((((-1.0)*x5937*x5941))+(((-1.0)*x5936))+((x5931*x5934))+(((-1.0)*r02*x5940)));
evalcond[3]=((((-1.0)*cj1*x5935))+((sj1*sj2))+((r22*x5931))+((r21*x5943))+(((-1.0)*x5933*x5940)));
evalcond[4]=(((x5932*x5934))+(((-1.0)*x5937*x5940))+(((-1.0)*cj0*sj1*x5935))+((r02*x5931))+(((-1.0)*cj0*x5939)));
evalcond[5]=((((-1.0)*sj0*sj1*x5935))+(((-1.0)*x5938*x5940))+((r12*x5931))+(((-1.0)*x5936*x5939))+((r11*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5944=((1.0)*gconst125);
CheckValue<IkReal> x5945=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r10))+(((-1.0)*r11*x5944)))),-1);
if(!x5945.valid){
continue;
}
CheckValue<IkReal> x5946 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst124*r21*sj0))+(((-1.0)*r20*sj0*x5944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5945.value)))+(x5946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5947=IKsin(j4);
IkReal x5948=IKcos(j4);
IkReal x5949=(gconst125*r20);
IkReal x5950=(gconst124*r01);
IkReal x5951=((1.0)*cj2);
IkReal x5952=((1.0)*sj0);
IkReal x5953=(gconst125*r00);
IkReal x5954=(gconst125*r10);
IkReal x5955=(cj1*sj2);
IkReal x5956=((1.0)*x5948);
IkReal x5957=((1.0)*x5947);
IkReal x5958=(gconst124*x5947);
IkReal x5959=(gconst124*x5948);
evalcond[0]=(((r21*x5958))+(((-1.0)*r22*x5956))+(((-1.0)*x5949*x5957)));
evalcond[1]=(cj0+((r11*x5958))+(((-1.0)*x5954*x5957))+(((-1.0)*r12*x5956)));
evalcond[2]=(((x5947*x5950))+(((-1.0)*r02*x5956))+(((-1.0)*x5952))+(((-1.0)*x5953*x5957)));
evalcond[3]=(((r21*x5959))+((sj1*sj2))+((r22*x5947))+(((-1.0)*cj1*x5951))+(((-1.0)*x5949*x5956)));
evalcond[4]=((((-1.0)*cj0*x5955))+(((-1.0)*cj0*sj1*x5951))+((x5948*x5950))+(((-1.0)*x5953*x5956))+((r02*x5947)));
evalcond[5]=(((r11*x5959))+(((-1.0)*sj0*sj1*x5951))+(((-1.0)*x5952*x5955))+((r12*x5947))+(((-1.0)*x5954*x5956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5960=((1.0)*gconst125);
CheckValue<IkReal> x5961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5960)))),-1);
if(!x5961.valid){
continue;
}
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x5960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5961.value)))+(x5962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5963=IKsin(j4);
IkReal x5964=IKcos(j4);
IkReal x5965=(gconst125*r20);
IkReal x5966=(gconst124*r01);
IkReal x5967=((1.0)*cj2);
IkReal x5968=((1.0)*sj0);
IkReal x5969=(gconst125*r00);
IkReal x5970=(gconst125*r10);
IkReal x5971=(cj1*sj2);
IkReal x5972=((1.0)*x5964);
IkReal x5973=((1.0)*x5963);
IkReal x5974=(gconst124*x5963);
IkReal x5975=(gconst124*x5964);
evalcond[0]=((((-1.0)*r22*x5972))+((r21*x5974))+(((-1.0)*x5965*x5973)));
evalcond[1]=(cj0+(((-1.0)*r12*x5972))+((r11*x5974))+(((-1.0)*x5970*x5973)));
evalcond[2]=((((-1.0)*r02*x5972))+((x5963*x5966))+(((-1.0)*x5968))+(((-1.0)*x5969*x5973)));
evalcond[3]=(((sj1*sj2))+((r22*x5963))+((r21*x5975))+(((-1.0)*cj1*x5967))+(((-1.0)*x5965*x5972)));
evalcond[4]=(((r02*x5963))+(((-1.0)*cj0*sj1*x5967))+((x5964*x5966))+(((-1.0)*cj0*x5971))+(((-1.0)*x5969*x5972)));
evalcond[5]=((((-1.0)*sj0*sj1*x5967))+((r11*x5975))+(((-1.0)*x5970*x5972))+((r12*x5963))+(((-1.0)*x5968*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5976=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5976;
j4eval[1]=IKsign(x5976);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5977=((1.0)*cj5);
IkReal x5978=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5977)));
j4eval[0]=x5978;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5977))))));
j4eval[2]=IKsign(x5978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5979=(sj1*sj2);
IkReal x5980=(cj5*r10);
IkReal x5981=(r11*sj5);
IkReal x5982=(cj1*cj2);
IkReal x5983=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x5983;
j4eval[1]=((IKabs((((r12*x5982))+(((-1.0)*r12*x5979)))))+(IKabs((((x5979*x5981))+(((-1.0)*x5981*x5982))+(((-1.0)*x5979*x5980))+((x5980*x5982))))));
j4eval[2]=IKsign(x5983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5984=(sj1*sj2);
IkReal x5985=(cj5*r10);
IkReal x5986=(r11*sj5);
IkReal x5987=(cj1*cj2);
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989 = IKatan2WithCheck(IkReal((((x5985*x5987))+(((-1.0)*x5984*x5985))+(((-1.0)*x5986*x5987))+((x5984*x5986)))),IkReal((((r12*x5987))+(((-1.0)*r12*x5984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5988.value)))+(x5989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5990=IKcos(j4);
IkReal x5991=IKsin(j4);
IkReal x5992=(cj5*r00);
IkReal x5993=(cj5*r10);
IkReal x5994=(r21*sj5);
IkReal x5995=((1.0)*cj2);
IkReal x5996=(cj5*r20);
IkReal x5997=((1.0)*x5990);
IkReal x5998=((1.0)*x5991);
IkReal x5999=(sj5*x5991);
IkReal x6000=(sj5*x5990);
evalcond[0]=(((r12*x5991))+((r11*x6000))+(((-1.0)*x5993*x5997)));
evalcond[1]=((((-1.0)*x5996*x5998))+(((-1.0)*r22*x5997))+((x5991*x5994)));
evalcond[2]=((((-1.0)*x5992*x5998))+(((-1.0)*r02*x5997))+((r01*x5999)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5997))+((r11*x5999))+(((-1.0)*x5993*x5998)));
evalcond[4]=((((-1.0)*x5996*x5997))+((sj1*sj2))+(((-1.0)*cj1*x5995))+((x5990*x5994))+((r22*x5991)));
evalcond[5]=((((-1.0)*sj1*x5995))+(((-1.0)*x5992*x5997))+((r02*x5991))+(((-1.0)*cj1*sj2))+((r01*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6001=((1.0)*cj5);
CheckValue<IkReal> x6002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6001)))),-1);
if(!x6002.valid){
continue;
}
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6002.value)))+(x6003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6004=IKcos(j4);
IkReal x6005=IKsin(j4);
IkReal x6006=(cj5*r00);
IkReal x6007=(cj5*r10);
IkReal x6008=(r21*sj5);
IkReal x6009=((1.0)*cj2);
IkReal x6010=(cj5*r20);
IkReal x6011=((1.0)*x6004);
IkReal x6012=((1.0)*x6005);
IkReal x6013=(sj5*x6005);
IkReal x6014=(sj5*x6004);
evalcond[0]=(((r12*x6005))+((r11*x6014))+(((-1.0)*x6007*x6011)));
evalcond[1]=((((-1.0)*x6010*x6012))+(((-1.0)*r22*x6011))+((x6005*x6008)));
evalcond[2]=(((r01*x6013))+(((-1.0)*r02*x6011))+(((-1.0)*x6006*x6012)));
evalcond[3]=((1.0)+((r11*x6013))+(((-1.0)*r12*x6011))+(((-1.0)*x6007*x6012)));
evalcond[4]=(((r22*x6005))+(((-1.0)*cj1*x6009))+(((-1.0)*x6010*x6011))+((sj1*sj2))+((x6004*x6008)));
evalcond[5]=(((r01*x6014))+(((-1.0)*x6006*x6011))+(((-1.0)*cj1*sj2))+((r02*x6005))+(((-1.0)*sj1*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6015.value)))+(x6016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKcos(j4);
IkReal x6018=IKsin(j4);
IkReal x6019=(cj5*r00);
IkReal x6020=(cj5*r10);
IkReal x6021=(r21*sj5);
IkReal x6022=((1.0)*cj2);
IkReal x6023=(cj5*r20);
IkReal x6024=((1.0)*x6017);
IkReal x6025=((1.0)*x6018);
IkReal x6026=(sj5*x6018);
IkReal x6027=(sj5*x6017);
evalcond[0]=((((-1.0)*x6020*x6024))+((r12*x6018))+((r11*x6027)));
evalcond[1]=((((-1.0)*x6023*x6025))+(((-1.0)*r22*x6024))+((x6018*x6021)));
evalcond[2]=(((r01*x6026))+(((-1.0)*r02*x6024))+(((-1.0)*x6019*x6025)));
evalcond[3]=((1.0)+(((-1.0)*x6020*x6025))+((r11*x6026))+(((-1.0)*r12*x6024)));
evalcond[4]=((((-1.0)*x6023*x6024))+((sj1*sj2))+((x6017*x6021))+(((-1.0)*cj1*x6022))+((r22*x6018)));
evalcond[5]=((((-1.0)*sj1*x6022))+((r01*x6027))+(((-1.0)*cj1*sj2))+((r02*x6018))+(((-1.0)*x6019*x6024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6028=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6028;
j4eval[1]=IKsign(x6028);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6029=((1.0)*cj5);
IkReal x6030=((((-1.0)*r21*x6029))+(((-1.0)*r20*sj5)));
j4eval[0]=x6030;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6029))+((r01*sj5))))));
j4eval[2]=IKsign(x6030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6031=cj5*cj5;
IkReal x6032=r11*r11;
IkReal x6033=(r11*sj5);
IkReal x6034=(cj5*r10);
IkReal x6035=((r12*r12)+x6032+((x6031*(r10*r10)))+(((-2.0)*x6033*x6034))+(((-1.0)*x6031*x6032)));
j4eval[0]=x6035;
j4eval[1]=IKsign(x6035);
j4eval[2]=((IKabs((x6033+(((-1.0)*x6034)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6036=cj5*cj5;
IkReal x6037=r11*r11;
IkReal x6038=(cj5*r10);
IkReal x6039=(r11*sj5);
CheckValue<IkReal> x6040 = IKatan2WithCheck(IkReal((x6039+(((-1.0)*x6038)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6040.valid){
continue;
}
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6037+((x6036*(r10*r10)))+(((-1.0)*x6036*x6037))+(((-2.0)*x6038*x6039)))),-1);
if(!x6041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6040.value)+(((1.5707963267949)*(x6041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6042=IKcos(j4);
IkReal x6043=IKsin(j4);
IkReal x6044=(cj5*r00);
IkReal x6045=(cj5*r10);
IkReal x6046=(r21*sj5);
IkReal x6047=(cj5*r20);
IkReal x6048=((1.0)*x6042);
IkReal x6049=((1.0)*x6043);
IkReal x6050=(sj5*x6043);
IkReal x6051=(sj5*x6042);
evalcond[0]=((((-1.0)*x6045*x6048))+((r12*x6043))+((r11*x6051)));
evalcond[1]=(((x6043*x6046))+(((-1.0)*r22*x6048))+(((-1.0)*x6047*x6049)));
evalcond[2]=(((r01*x6050))+(((-1.0)*r02*x6048))+(((-1.0)*x6044*x6049)));
evalcond[3]=((-1.0)+(((-1.0)*x6045*x6049))+(((-1.0)*r12*x6048))+((r11*x6050)));
evalcond[4]=(((cj2*sj1))+((r01*x6051))+((cj1*sj2))+(((-1.0)*x6044*x6048))+((r02*x6043)));
evalcond[5]=(((r22*x6043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6042*x6046))+(((-1.0)*x6047*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=((1.0)*cj5);
CheckValue<IkReal> x6053 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6053.valid){
continue;
}
CheckValue<IkReal> x6054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6052))+(((-1.0)*r20*sj5)))),-1);
if(!x6054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6053.value)+(((1.5707963267949)*(x6054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6055=IKcos(j4);
IkReal x6056=IKsin(j4);
IkReal x6057=(cj5*r00);
IkReal x6058=(cj5*r10);
IkReal x6059=(r21*sj5);
IkReal x6060=(cj5*r20);
IkReal x6061=((1.0)*x6055);
IkReal x6062=((1.0)*x6056);
IkReal x6063=(sj5*x6056);
IkReal x6064=(sj5*x6055);
evalcond[0]=(((r12*x6056))+((r11*x6064))+(((-1.0)*x6058*x6061)));
evalcond[1]=((((-1.0)*r22*x6061))+((x6056*x6059))+(((-1.0)*x6060*x6062)));
evalcond[2]=((((-1.0)*x6057*x6062))+((r01*x6063))+(((-1.0)*r02*x6061)));
evalcond[3]=((-1.0)+((r11*x6063))+(((-1.0)*x6058*x6062))+(((-1.0)*r12*x6061)));
evalcond[4]=((((-1.0)*x6057*x6061))+((cj2*sj1))+((cj1*sj2))+((r01*x6064))+((r02*x6056)));
evalcond[5]=(((r22*x6056))+((x6055*x6059))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6060*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6065.value)+(((1.5707963267949)*(x6066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6067=IKcos(j4);
IkReal x6068=IKsin(j4);
IkReal x6069=(cj5*r00);
IkReal x6070=(cj5*r10);
IkReal x6071=(r21*sj5);
IkReal x6072=(cj5*r20);
IkReal x6073=((1.0)*x6067);
IkReal x6074=((1.0)*x6068);
IkReal x6075=(sj5*x6068);
IkReal x6076=(sj5*x6067);
evalcond[0]=(((r11*x6076))+((r12*x6068))+(((-1.0)*x6070*x6073)));
evalcond[1]=(((x6068*x6071))+(((-1.0)*x6072*x6074))+(((-1.0)*r22*x6073)));
evalcond[2]=(((r01*x6075))+(((-1.0)*r02*x6073))+(((-1.0)*x6069*x6074)));
evalcond[3]=((-1.0)+((r11*x6075))+(((-1.0)*r12*x6073))+(((-1.0)*x6070*x6074)));
evalcond[4]=(((r01*x6076))+((cj2*sj1))+((cj1*sj2))+((r02*x6068))+(((-1.0)*x6069*x6073)));
evalcond[5]=((((-1.0)*x6072*x6073))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x6068))+((x6067*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6077=((-1.0)*r00);
IkReal x6079 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6079)==0){
continue;
}
IkReal x6078=pow(x6079,-0.5);
CheckValue<IkReal> x6080 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6077),IKFAST_ATAN2_MAGTHRESH);
if(!x6080.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6080.value));
IkReal gconst127=(r01*x6078);
IkReal gconst128=(x6077*x6078);
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6081.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6082=((-1.0)*r00);
IkReal x6083=x6078;
CheckValue<IkReal> x6085 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6082),IKFAST_ATAN2_MAGTHRESH);
if(!x6085.valid){
continue;
}
IkReal x6084=((-1.0)*(x6085.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6084;
IkReal gconst126=x6084;
IkReal gconst127=(r01*x6083);
IkReal gconst128=(x6082*x6083);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=((1.0)*sj0);
IkReal x6087=((1.0)*gconst127);
CheckValue<IkReal> x6088 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6086))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x6086))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6088.valid){
continue;
}
CheckValue<IkReal> x6089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6087)))),-1);
if(!x6089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6088.value)+(((1.5707963267949)*(x6089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6090=IKsin(j4);
IkReal x6091=IKcos(j4);
IkReal x6092=(gconst127*r01);
IkReal x6093=(gconst128*r10);
IkReal x6094=((1.0)*cj2);
IkReal x6095=(gconst128*r00);
IkReal x6096=((1.0)*sj0);
IkReal x6097=(gconst128*r20);
IkReal x6098=(cj1*sj2);
IkReal x6099=((1.0)*x6091);
IkReal x6100=((1.0)*x6090);
IkReal x6101=(gconst127*x6091);
IkReal x6102=(gconst127*x6090);
evalcond[0]=(((r21*x6102))+(((-1.0)*r22*x6099))+(((-1.0)*x6097*x6100)));
evalcond[1]=(((r11*x6102))+(((-1.0)*x6093*x6100))+cj0+(((-1.0)*r12*x6099)));
evalcond[2]=(((x6090*x6092))+(((-1.0)*x6095*x6100))+(((-1.0)*x6096))+(((-1.0)*r02*x6099)));
evalcond[3]=(((r21*x6101))+((sj1*sj2))+((r22*x6090))+(((-1.0)*x6097*x6099))+(((-1.0)*cj1*x6094)));
evalcond[4]=((((-1.0)*cj0*x6098))+(((-1.0)*x6095*x6099))+((x6091*x6092))+((r02*x6090))+(((-1.0)*cj0*sj1*x6094)));
evalcond[5]=(((r11*x6101))+(((-1.0)*x6093*x6099))+(((-1.0)*x6096*x6098))+((r12*x6090))+(((-1.0)*sj0*sj1*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6103=((1.0)*gconst128);
CheckValue<IkReal> x6104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6103))+(((-1.0)*gconst127*r10)))),-1);
if(!x6104.valid){
continue;
}
CheckValue<IkReal> x6105 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6103))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6104.value)))+(x6105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6106=IKsin(j4);
IkReal x6107=IKcos(j4);
IkReal x6108=(gconst127*r01);
IkReal x6109=(gconst128*r10);
IkReal x6110=((1.0)*cj2);
IkReal x6111=(gconst128*r00);
IkReal x6112=((1.0)*sj0);
IkReal x6113=(gconst128*r20);
IkReal x6114=(cj1*sj2);
IkReal x6115=((1.0)*x6107);
IkReal x6116=((1.0)*x6106);
IkReal x6117=(gconst127*x6107);
IkReal x6118=(gconst127*x6106);
evalcond[0]=((((-1.0)*r22*x6115))+(((-1.0)*x6113*x6116))+((r21*x6118)));
evalcond[1]=((((-1.0)*x6109*x6116))+cj0+(((-1.0)*r12*x6115))+((r11*x6118)));
evalcond[2]=(((x6106*x6108))+(((-1.0)*x6112))+(((-1.0)*x6111*x6116))+(((-1.0)*r02*x6115)));
evalcond[3]=(((r22*x6106))+((sj1*sj2))+(((-1.0)*x6113*x6115))+(((-1.0)*cj1*x6110))+((r21*x6117)));
evalcond[4]=((((-1.0)*cj0*sj1*x6110))+((x6107*x6108))+(((-1.0)*x6111*x6115))+(((-1.0)*cj0*x6114))+((r02*x6106)));
evalcond[5]=((((-1.0)*x6109*x6115))+(((-1.0)*x6112*x6114))+(((-1.0)*sj0*sj1*x6110))+((r11*x6117))+((r12*x6106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6119=((-1.0)*r01);
IkReal x6121 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6121)==0){
continue;
}
IkReal x6120=pow(x6121,-0.5);
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal(x6119),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6122.value))));
IkReal gconst130=(x6119*x6120);
IkReal gconst131=((1.0)*r00*x6120);
CheckValue<IkReal> x6123 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6123.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6124=((-1.0)*r01);
CheckValue<IkReal> x6127 = IKatan2WithCheck(IkReal(x6124),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6127.valid){
continue;
}
IkReal x6125=((1.0)*(x6127.value));
IkReal x6126=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6125)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6125)));
IkReal gconst130=(x6124*x6126);
IkReal gconst131=((1.0)*r00*x6126);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6128=((-1.0)*r01);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal(x6128),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
IkReal x6129=((1.0)*(x6131.value));
IkReal x6130=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6129)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6129)));
IkReal gconst130=(x6128*x6130);
IkReal gconst131=((1.0)*r00*x6130);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6132=((-1.0)*r01);
CheckValue<IkReal> x6135 = IKatan2WithCheck(IkReal(x6132),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6135.valid){
continue;
}
IkReal x6133=((1.0)*(x6135.value));
IkReal x6134=x6120;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6133)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6133)));
IkReal gconst130=(x6132*x6134);
IkReal gconst131=((1.0)*r00*x6134);
IkReal x6136=r02*r02;
IkReal x6137=(r12*sj0);
IkReal x6138=((1.0)*cj0);
IkReal x6139=x6120;
j4eval[0]=((IKabs((((r02*x6137*x6139))+((cj0*x6136*x6139))+(((-1.0)*x6138*x6139)))))+(IKabs(((((-1.0)*x6137))+(((-1.0)*r02*x6138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6140=((1.0)*sj0);
IkReal x6141=((1.0)*gconst130);
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6140)))),IkReal(((((-1.0)*gconst130*r11*x6140))+(((-1.0)*cj0*r01*x6141))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
CheckValue<IkReal> x6143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6141))+(((-1.0)*gconst131*r21)))),-1);
if(!x6143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6142.value)+(((1.5707963267949)*(x6143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6144=IKsin(j4);
IkReal x6145=IKcos(j4);
IkReal x6146=(gconst131*r10);
IkReal x6147=(gconst130*r11);
IkReal x6148=((1.0)*cj2);
IkReal x6149=(gconst131*r20);
IkReal x6150=((1.0)*sj0);
IkReal x6151=(gconst131*r00);
IkReal x6152=(cj1*sj2);
IkReal x6153=((1.0)*x6145);
IkReal x6154=((1.0)*x6144);
IkReal x6155=(gconst130*x6145);
IkReal x6156=(gconst130*x6144);
evalcond[0]=(((r21*x6156))+(((-1.0)*r22*x6153))+(((-1.0)*x6149*x6154)));
evalcond[1]=((((-1.0)*x6146*x6154))+((x6144*x6147))+cj0+(((-1.0)*r12*x6153)));
evalcond[2]=((((-1.0)*r02*x6153))+(((-1.0)*x6151*x6154))+(((-1.0)*x6150))+((r01*x6156)));
evalcond[3]=(((r21*x6155))+((sj1*sj2))+((r22*x6144))+(((-1.0)*cj1*x6148))+(((-1.0)*x6149*x6153)));
evalcond[4]=((((-1.0)*x6151*x6153))+(((-1.0)*cj0*x6152))+((r02*x6144))+((r01*x6155))+(((-1.0)*cj0*sj1*x6148)));
evalcond[5]=((((-1.0)*x6146*x6153))+(((-1.0)*x6150*x6152))+((x6145*x6147))+((r12*x6144))+(((-1.0)*sj0*sj1*x6148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6157=((1.0)*gconst131);
CheckValue<IkReal> x6158 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6158.valid){
continue;
}
CheckValue<IkReal> x6159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6157))+(((-1.0)*gconst130*r10)))),-1);
if(!x6159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6158.value)+(((1.5707963267949)*(x6159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6160=IKsin(j4);
IkReal x6161=IKcos(j4);
IkReal x6162=(gconst131*r10);
IkReal x6163=(gconst130*r11);
IkReal x6164=((1.0)*cj2);
IkReal x6165=(gconst131*r20);
IkReal x6166=((1.0)*sj0);
IkReal x6167=(gconst131*r00);
IkReal x6168=(cj1*sj2);
IkReal x6169=((1.0)*x6161);
IkReal x6170=((1.0)*x6160);
IkReal x6171=(gconst130*x6161);
IkReal x6172=(gconst130*x6160);
evalcond[0]=(((r21*x6172))+(((-1.0)*r22*x6169))+(((-1.0)*x6165*x6170)));
evalcond[1]=(cj0+(((-1.0)*r12*x6169))+((x6160*x6163))+(((-1.0)*x6162*x6170)));
evalcond[2]=((((-1.0)*x6167*x6170))+(((-1.0)*x6166))+((r01*x6172))+(((-1.0)*r02*x6169)));
evalcond[3]=(((r21*x6171))+((sj1*sj2))+(((-1.0)*cj1*x6164))+(((-1.0)*x6165*x6169))+((r22*x6160)));
evalcond[4]=((((-1.0)*x6167*x6169))+((r02*x6160))+(((-1.0)*cj0*sj1*x6164))+(((-1.0)*cj0*x6168))+((r01*x6171)));
evalcond[5]=((((-1.0)*x6166*x6168))+((r12*x6160))+(((-1.0)*sj0*sj1*x6164))+((x6161*x6163))+(((-1.0)*x6162*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6173=((1.0)*gconst131);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6173))+((cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6173)))),-1);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j4);
IkReal x6177=IKcos(j4);
IkReal x6178=(gconst131*r10);
IkReal x6179=(gconst130*r11);
IkReal x6180=((1.0)*cj2);
IkReal x6181=(gconst131*r20);
IkReal x6182=((1.0)*sj0);
IkReal x6183=(gconst131*r00);
IkReal x6184=(cj1*sj2);
IkReal x6185=((1.0)*x6177);
IkReal x6186=((1.0)*x6176);
IkReal x6187=(gconst130*x6177);
IkReal x6188=(gconst130*x6176);
evalcond[0]=((((-1.0)*r22*x6185))+((r21*x6188))+(((-1.0)*x6181*x6186)));
evalcond[1]=(cj0+(((-1.0)*x6178*x6186))+((x6176*x6179))+(((-1.0)*r12*x6185)));
evalcond[2]=((((-1.0)*r02*x6185))+((r01*x6188))+(((-1.0)*x6183*x6186))+(((-1.0)*x6182)));
evalcond[3]=(((r21*x6187))+(((-1.0)*cj1*x6180))+((sj1*sj2))+((r22*x6176))+(((-1.0)*x6181*x6185)));
evalcond[4]=(((r01*x6187))+(((-1.0)*cj0*x6184))+((r02*x6176))+(((-1.0)*x6183*x6185))+(((-1.0)*cj0*sj1*x6180)));
evalcond[5]=((((-1.0)*x6182*x6184))+((r12*x6176))+(((-1.0)*x6178*x6185))+((x6177*x6179))+(((-1.0)*sj0*sj1*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6189=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6189;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6190=((1.0)*cj5);
IkReal x6191=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6190)));
j4eval[0]=x6191;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6190))))));
j4eval[2]=IKsign(x6191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6192=cj5*cj5;
IkReal x6193=r01*r01;
IkReal x6194=(cj5*r00);
IkReal x6195=(r01*sj5);
IkReal x6196=((((-2.0)*x6194*x6195))+((x6192*(r00*r00)))+x6193+(((-1.0)*x6192*x6193))+(r02*r02));
j4eval[0]=x6196;
j4eval[1]=IKsign(x6196);
j4eval[2]=((IKabs((x6195+(((-1.0)*x6194)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6197=cj5*cj5;
IkReal x6198=r01*r01;
IkReal x6199=(r01*sj5);
IkReal x6200=(cj5*r00);
CheckValue<IkReal> x6201=IKPowWithIntegerCheck(IKsign((x6198+(((-1.0)*x6197*x6198))+(((-2.0)*x6199*x6200))+(r02*r02)+((x6197*(r00*r00))))),-1);
if(!x6201.valid){
continue;
}
CheckValue<IkReal> x6202 = IKatan2WithCheck(IkReal((x6199+(((-1.0)*x6200)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6201.value)))+(x6202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6203=IKcos(j4);
IkReal x6204=IKsin(j4);
IkReal x6205=(cj5*r00);
IkReal x6206=(cj5*r10);
IkReal x6207=(r21*sj5);
IkReal x6208=((1.0)*cj2);
IkReal x6209=(cj5*r20);
IkReal x6210=((1.0)*x6203);
IkReal x6211=((1.0)*x6204);
IkReal x6212=(sj5*x6204);
IkReal x6213=(sj5*x6203);
evalcond[0]=((((-1.0)*x6205*x6210))+((r02*x6204))+((r01*x6213)));
evalcond[1]=((((-1.0)*x6209*x6211))+((x6204*x6207))+(((-1.0)*r22*x6210)));
evalcond[2]=((((-1.0)*x6206*x6211))+((r11*x6212))+(((-1.0)*r12*x6210)));
evalcond[3]=((-1.0)+(((-1.0)*x6205*x6211))+((r01*x6212))+(((-1.0)*r02*x6210)));
evalcond[4]=((((-1.0)*cj1*x6208))+((r22*x6204))+(((-1.0)*x6209*x6210))+((sj1*sj2))+((x6203*x6207)));
evalcond[5]=((((-1.0)*x6206*x6210))+((r11*x6213))+(((-1.0)*sj1*x6208))+(((-1.0)*cj1*sj2))+((r12*x6204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6214=((1.0)*cj5);
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
CheckValue<IkReal> x6216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6214)))),-1);
if(!x6216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6215.value)+(((1.5707963267949)*(x6216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6217=IKcos(j4);
IkReal x6218=IKsin(j4);
IkReal x6219=(cj5*r00);
IkReal x6220=(cj5*r10);
IkReal x6221=(r21*sj5);
IkReal x6222=((1.0)*cj2);
IkReal x6223=(cj5*r20);
IkReal x6224=((1.0)*x6217);
IkReal x6225=((1.0)*x6218);
IkReal x6226=(sj5*x6218);
IkReal x6227=(sj5*x6217);
evalcond[0]=(((r02*x6218))+((r01*x6227))+(((-1.0)*x6219*x6224)));
evalcond[1]=((((-1.0)*r22*x6224))+(((-1.0)*x6223*x6225))+((x6218*x6221)));
evalcond[2]=(((r11*x6226))+(((-1.0)*r12*x6224))+(((-1.0)*x6220*x6225)));
evalcond[3]=((-1.0)+((r01*x6226))+(((-1.0)*x6219*x6225))+(((-1.0)*r02*x6224)));
evalcond[4]=(((sj1*sj2))+((x6217*x6221))+(((-1.0)*cj1*x6222))+((r22*x6218))+(((-1.0)*x6223*x6224)));
evalcond[5]=(((r12*x6218))+(((-1.0)*sj1*x6222))+((r11*x6227))+(((-1.0)*cj1*sj2))+(((-1.0)*x6220*x6224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6228=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6228.valid){
continue;
}
CheckValue<IkReal> x6229 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6228.value)))+(x6229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6230=IKcos(j4);
IkReal x6231=IKsin(j4);
IkReal x6232=(cj5*r00);
IkReal x6233=(cj5*r10);
IkReal x6234=(r21*sj5);
IkReal x6235=((1.0)*cj2);
IkReal x6236=(cj5*r20);
IkReal x6237=((1.0)*x6230);
IkReal x6238=((1.0)*x6231);
IkReal x6239=(sj5*x6231);
IkReal x6240=(sj5*x6230);
evalcond[0]=((((-1.0)*x6232*x6237))+((r02*x6231))+((r01*x6240)));
evalcond[1]=(((x6231*x6234))+(((-1.0)*x6236*x6238))+(((-1.0)*r22*x6237)));
evalcond[2]=((((-1.0)*r12*x6237))+(((-1.0)*x6233*x6238))+((r11*x6239)));
evalcond[3]=((-1.0)+(((-1.0)*x6232*x6238))+((r01*x6239))+(((-1.0)*r02*x6237)));
evalcond[4]=(((x6230*x6234))+(((-1.0)*x6236*x6237))+((sj1*sj2))+((r22*x6231))+(((-1.0)*cj1*x6235)));
evalcond[5]=((((-1.0)*sj1*x6235))+((r12*x6231))+((r11*x6240))+(((-1.0)*cj1*sj2))+(((-1.0)*x6233*x6237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6241=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6241;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6242=((1.0)*cj5);
IkReal x6243=((((-1.0)*r21*x6242))+(((-1.0)*r20*sj5)));
j4eval[0]=x6243;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6242))+((r11*sj5))))));
j4eval[2]=IKsign(x6243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6244=cj5*cj5;
IkReal x6245=r01*r01;
IkReal x6246=(r01*sj5);
IkReal x6247=(cj5*r00);
IkReal x6248=((((-1.0)*x6245))+((x6244*x6245))+(((-1.0)*(r02*r02)))+(((-1.0)*x6244*(r00*r00)))+(((2.0)*x6246*x6247)));
j4eval[0]=x6248;
j4eval[1]=IKsign(x6248);
j4eval[2]=((IKabs(r02))+(IKabs((x6246+(((-1.0)*x6247))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6249=cj5*cj5;
IkReal x6250=r01*r01;
IkReal x6251=(r01*sj5);
IkReal x6252=(cj5*r00);
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x6249*x6250))+(((-1.0)*x6250))+(((2.0)*x6251*x6252))+(((-1.0)*x6249*(r00*r00))))),-1);
if(!x6253.valid){
continue;
}
CheckValue<IkReal> x6254 = IKatan2WithCheck(IkReal((x6251+(((-1.0)*x6252)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6253.value)))+(x6254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6255=IKcos(j4);
IkReal x6256=IKsin(j4);
IkReal x6257=(cj5*r00);
IkReal x6258=(cj5*r10);
IkReal x6259=(r21*sj5);
IkReal x6260=(cj5*r20);
IkReal x6261=((1.0)*x6255);
IkReal x6262=((1.0)*x6256);
IkReal x6263=(sj5*x6256);
IkReal x6264=(sj5*x6255);
evalcond[0]=(((r01*x6264))+(((-1.0)*x6257*x6261))+((r02*x6256)));
evalcond[1]=(((x6256*x6259))+(((-1.0)*x6260*x6262))+(((-1.0)*r22*x6261)));
evalcond[2]=((((-1.0)*x6258*x6262))+(((-1.0)*r12*x6261))+((r11*x6263)));
evalcond[3]=((1.0)+((r01*x6263))+(((-1.0)*r02*x6261))+(((-1.0)*x6257*x6262)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6258*x6261))+((r12*x6256))+((r11*x6264)));
evalcond[5]=(((r22*x6256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6260*x6261))+((x6255*x6259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6265=((1.0)*cj5);
CheckValue<IkReal> x6266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6265))+(((-1.0)*r20*sj5)))),-1);
if(!x6266.valid){
continue;
}
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6266.value)))+(x6267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6268=IKcos(j4);
IkReal x6269=IKsin(j4);
IkReal x6270=(cj5*r00);
IkReal x6271=(cj5*r10);
IkReal x6272=(r21*sj5);
IkReal x6273=(cj5*r20);
IkReal x6274=((1.0)*x6268);
IkReal x6275=((1.0)*x6269);
IkReal x6276=(sj5*x6269);
IkReal x6277=(sj5*x6268);
evalcond[0]=((((-1.0)*x6270*x6274))+((r01*x6277))+((r02*x6269)));
evalcond[1]=((((-1.0)*x6273*x6275))+((x6269*x6272))+(((-1.0)*r22*x6274)));
evalcond[2]=((((-1.0)*x6271*x6275))+(((-1.0)*r12*x6274))+((r11*x6276)));
evalcond[3]=((1.0)+(((-1.0)*x6270*x6275))+((r01*x6276))+(((-1.0)*r02*x6274)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6271*x6274))+((r12*x6269))+((r11*x6277)));
evalcond[5]=((((-1.0)*x6273*x6274))+((r22*x6269))+((x6268*x6272))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKcos(j4);
IkReal x6281=IKsin(j4);
IkReal x6282=(cj5*r00);
IkReal x6283=(cj5*r10);
IkReal x6284=(r21*sj5);
IkReal x6285=(cj5*r20);
IkReal x6286=((1.0)*x6280);
IkReal x6287=((1.0)*x6281);
IkReal x6288=(sj5*x6281);
IkReal x6289=(sj5*x6280);
evalcond[0]=((((-1.0)*x6282*x6286))+((r02*x6281))+((r01*x6289)));
evalcond[1]=((((-1.0)*x6285*x6287))+(((-1.0)*r22*x6286))+((x6281*x6284)));
evalcond[2]=((((-1.0)*x6283*x6287))+((r11*x6288))+(((-1.0)*r12*x6286)));
evalcond[3]=((1.0)+(((-1.0)*x6282*x6287))+(((-1.0)*r02*x6286))+((r01*x6288)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6283*x6286))+((cj1*sj2))+((r12*x6281))+((r11*x6289)));
evalcond[5]=((((-1.0)*x6285*x6286))+((r22*x6281))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x6280*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6290=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6290);
rxp1_1=(px*r21);
rxp1_2=(r11*x6290);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6291=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6291);
rxp1_1=(px*r21);
rxp1_2=(r11*x6291);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6292=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6292);
rxp1_1=(px*r21);
rxp1_2=(r11*x6292);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6295.valid){
continue;
}
IkReal x6293=x6295.value;
IkReal x6294=(sj0*x6293);
cj4array[0]=(((cj2*sj1*x6294))+((cj1*sj2*x6294)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6296=IKsin(j4);
IkReal x6297=IKcos(j4);
IkReal x6298=(r21*sj5);
IkReal x6299=((1.0)*cj5*r20);
evalcond[0]=(r02*x6296);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6297)));
evalcond[2]=((((-1.0)*x6296*x6299))+((x6296*x6298)));
evalcond[3]=((((-1.0)*cj5*r10*x6296))+((r11*sj5*x6296)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6297*x6299))+((x6297*x6298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6301=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6301.valid){
continue;
}
IkReal x6300=x6301.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6300))+((cj1*cj2*x6300)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6302=IKsin(j4);
IkReal x6303=IKcos(j4);
IkReal x6304=((1.0)*sj0);
IkReal x6305=((1.0)*cj5);
IkReal x6306=(sj5*x6302);
evalcond[0]=(r02*x6302);
evalcond[1]=((((-1.0)*x6304))+(((-1.0)*r02*x6303)));
evalcond[2]=((((-1.0)*r20*x6302*x6305))+((r21*x6306)));
evalcond[3]=(((r11*x6306))+(((-1.0)*r10*x6302*x6305)));
evalcond[4]=((((-1.0)*cj2*sj1*x6304))+(((-1.0)*cj1*sj2*x6304))+((r11*sj5*x6303))+(((-1.0)*r10*x6303*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(r02,-1);
if(!x6307.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6307.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6308=IKsin(j4);
IkReal x6309=IKcos(j4);
IkReal x6310=((1.0)*cj1);
IkReal x6311=(r21*sj5);
IkReal x6312=((1.0)*cj5);
IkReal x6313=(r11*sj5);
evalcond[0]=(r02*x6308);
evalcond[1]=(((x6308*x6311))+(((-1.0)*r20*x6308*x6312)));
evalcond[2]=(((x6308*x6313))+(((-1.0)*r10*x6308*x6312)));
evalcond[3]=(((x6309*x6311))+((sj1*sj2))+(((-1.0)*r20*x6309*x6312))+(((-1.0)*cj2*x6310)));
evalcond[4]=((((-1.0)*r10*x6309*x6312))+(((-1.0)*sj0*sj2*x6310))+(((-1.0)*cj2*sj0*sj1))+((x6309*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6314=((1.0)*sj0);
IkReal x6315=((1.0)*cj0);
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6315))+(((-1.0)*r12*x6314)))),IkReal(((((-1.0)*r01*sj5*x6315))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
CheckValue<IkReal> x6317=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6316.value)+(((1.5707963267949)*(x6317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6318=IKsin(j4);
IkReal x6319=IKcos(j4);
IkReal x6320=(cj5*r00);
IkReal x6321=(cj5*r10);
IkReal x6322=(r21*sj5);
IkReal x6323=((1.0)*cj2);
IkReal x6324=((1.0)*sj0);
IkReal x6325=(cj1*sj2);
IkReal x6326=(cj5*r20);
IkReal x6327=((1.0)*x6319);
IkReal x6328=((1.0)*x6318);
IkReal x6329=(sj5*x6318);
IkReal x6330=(sj5*x6319);
evalcond[0]=((((-1.0)*x6326*x6328))+((x6318*x6322))+(((-1.0)*r22*x6327)));
evalcond[1]=(((r11*x6329))+cj0+(((-1.0)*x6321*x6328))+(((-1.0)*r12*x6327)));
evalcond[2]=((((-1.0)*x6320*x6328))+((r01*x6329))+(((-1.0)*x6324))+(((-1.0)*r02*x6327)));
evalcond[3]=((((-1.0)*x6326*x6327))+((r22*x6318))+((sj1*sj2))+((x6319*x6322))+(((-1.0)*cj1*x6323)));
evalcond[4]=((((-1.0)*x6320*x6327))+((r02*x6318))+((r01*x6330))+(((-1.0)*cj0*sj1*x6323))+(((-1.0)*cj0*x6325)));
evalcond[5]=(((r11*x6330))+(((-1.0)*x6321*x6327))+(((-1.0)*sj0*sj1*x6323))+(((-1.0)*x6324*x6325))+((r12*x6318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6331=((1.0)*cj5);
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6331))+(((-1.0)*r10*sj5)))),-1);
if(!x6333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6332.value)+(((1.5707963267949)*(x6333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6334=IKsin(j4);
IkReal x6335=IKcos(j4);
IkReal x6336=(cj5*r00);
IkReal x6337=(cj5*r10);
IkReal x6338=(r21*sj5);
IkReal x6339=((1.0)*cj2);
IkReal x6340=((1.0)*sj0);
IkReal x6341=(cj1*sj2);
IkReal x6342=(cj5*r20);
IkReal x6343=((1.0)*x6335);
IkReal x6344=((1.0)*x6334);
IkReal x6345=(sj5*x6334);
IkReal x6346=(sj5*x6335);
evalcond[0]=((((-1.0)*r22*x6343))+((x6334*x6338))+(((-1.0)*x6342*x6344)));
evalcond[1]=(cj0+(((-1.0)*x6337*x6344))+((r11*x6345))+(((-1.0)*r12*x6343)));
evalcond[2]=(((r01*x6345))+(((-1.0)*r02*x6343))+(((-1.0)*x6336*x6344))+(((-1.0)*x6340)));
evalcond[3]=(((r22*x6334))+((sj1*sj2))+(((-1.0)*x6342*x6343))+((x6335*x6338))+(((-1.0)*cj1*x6339)));
evalcond[4]=(((r02*x6334))+((r01*x6346))+(((-1.0)*cj0*x6341))+(((-1.0)*x6336*x6343))+(((-1.0)*cj0*sj1*x6339)));
evalcond[5]=((((-1.0)*x6340*x6341))+((r12*x6334))+(((-1.0)*x6337*x6343))+(((-1.0)*sj0*sj1*x6339))+((r11*x6346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6347=((1.0)*cj5);
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
CheckValue<IkReal> x6349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6347)))),-1);
if(!x6349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6348.value)+(((1.5707963267949)*(x6349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6350=IKsin(j4);
IkReal x6351=IKcos(j4);
IkReal x6352=(cj5*r00);
IkReal x6353=(cj5*r10);
IkReal x6354=(r21*sj5);
IkReal x6355=((1.0)*cj2);
IkReal x6356=((1.0)*sj0);
IkReal x6357=(cj1*sj2);
IkReal x6358=(cj5*r20);
IkReal x6359=((1.0)*x6351);
IkReal x6360=((1.0)*x6350);
IkReal x6361=(sj5*x6350);
IkReal x6362=(sj5*x6351);
evalcond[0]=((((-1.0)*r22*x6359))+(((-1.0)*x6358*x6360))+((x6350*x6354)));
evalcond[1]=(cj0+(((-1.0)*x6353*x6360))+(((-1.0)*r12*x6359))+((r11*x6361)));
evalcond[2]=((((-1.0)*x6352*x6360))+((r01*x6361))+(((-1.0)*r02*x6359))+(((-1.0)*x6356)));
evalcond[3]=(((sj1*sj2))+((r22*x6350))+(((-1.0)*cj1*x6355))+(((-1.0)*x6358*x6359))+((x6351*x6354)));
evalcond[4]=(((r01*x6362))+(((-1.0)*cj0*sj1*x6355))+(((-1.0)*cj0*x6357))+((r02*x6350))+(((-1.0)*x6352*x6359)));
evalcond[5]=((((-1.0)*x6353*x6359))+(((-1.0)*sj0*sj1*x6355))+((r11*x6362))+((r12*x6350))+(((-1.0)*x6356*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6363=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6363;
j0eval[1]=IKsign(x6363);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6364=cj5*cj5;
IkReal x6365=r21*r21;
IkReal x6366=(sj1*sj2);
IkReal x6367=(r21*sj5);
IkReal x6368=(cj5*r20);
IkReal x6369=(cj1*cj2);
IkReal x6370=(x6365+(r22*r22)+(((-2.0)*x6367*x6368))+((x6364*(r20*r20)))+(((-1.0)*x6364*x6365)));
j4eval[0]=x6370;
j4eval[1]=IKsign(x6370);
j4eval[2]=((IKabs(((((-1.0)*x6366*x6368))+((x6366*x6367))+((x6368*x6369))+(((-1.0)*x6367*x6369)))))+(IKabs(((((-1.0)*r22*x6369))+((r22*x6366))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6371=IKsin(j0);
IkReal x6372=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x6372))+(((-0.10915)*x6371)));
evalcond[1]=((((-1.0)*py))+(((0.39225)*x6371))+(((0.10915)*x6372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6373=((1.0)*cj5);
IkReal x6374=((((-1.0)*r01*x6373))+(((-1.0)*r00*sj5)));
j4eval[0]=x6374;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6373))))));
j4eval[2]=IKsign(x6374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6375=((1.0)*cj5);
IkReal x6376=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6375)));
j4eval[0]=x6376;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6375))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6377=cj5*cj5;
IkReal x6378=((1.0)*sj5);
IkReal x6379=(cj5*r20);
IkReal x6380=(r11*r21);
IkReal x6381=(x6380+((r12*r22))+(((-1.0)*r11*x6378*x6379))+(((-1.0)*cj5*r10*r21*x6378))+((r10*r20*x6377))+(((-1.0)*x6377*x6380)));
j4eval[0]=x6381;
j4eval[1]=IKsign(x6381);
j4eval[2]=((IKabs((((cj0*x6379))+(((-1.0)*cj0*r21*x6378)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6382=cj5*cj5;
IkReal x6383=((1.0)*sj5);
IkReal x6384=(cj5*r20);
IkReal x6385=(r11*r21);
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal((((cj0*x6384))+(((-1.0)*cj0*r21*x6383)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
CheckValue<IkReal> x6387=IKPowWithIntegerCheck(IKsign((((r10*r20*x6382))+x6385+(((-1.0)*cj5*r10*r21*x6383))+(((-1.0)*x6382*x6385))+((r12*r22))+(((-1.0)*r11*x6383*x6384)))),-1);
if(!x6387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6386.value)+(((1.5707963267949)*(x6387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6388=IKsin(j4);
IkReal x6389=IKcos(j4);
IkReal x6390=((1.0)*sj0);
IkReal x6391=(cj5*r00);
IkReal x6392=(r11*sj5);
IkReal x6393=(cj5*r10);
IkReal x6394=(r21*sj5);
IkReal x6395=(cj5*r20);
IkReal x6396=(r01*sj5);
IkReal x6397=((1.0)*x6389);
IkReal x6398=((1.0)*x6388);
evalcond[0]=((((-1.0)*x6395*x6398))+((x6388*x6394))+(((-1.0)*r22*x6397)));
evalcond[1]=((((-1.0)*r22*x6398))+(((-1.0)*x6394*x6397))+((x6389*x6395)));
evalcond[2]=(cj0+((x6388*x6392))+(((-1.0)*r12*x6397))+(((-1.0)*x6393*x6398)));
evalcond[3]=(((x6388*x6396))+(((-1.0)*x6390))+(((-1.0)*r02*x6397))+(((-1.0)*x6391*x6398)));
evalcond[4]=((((-1.0)*x6396*x6397))+(((-1.0)*r02*x6398))+(((-1.0)*cj0))+((x6389*x6391)));
evalcond[5]=((((-1.0)*x6392*x6397))+(((-1.0)*x6390))+(((-1.0)*r12*x6398))+((x6389*x6393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6399=((1.0)*cj5);
CheckValue<IkReal> x6400 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6399))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6400.valid){
continue;
}
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6399)))),-1);
if(!x6401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6400.value)+(((1.5707963267949)*(x6401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6402=IKsin(j4);
IkReal x6403=IKcos(j4);
IkReal x6404=((1.0)*sj0);
IkReal x6405=(cj5*r00);
IkReal x6406=(r11*sj5);
IkReal x6407=(cj5*r10);
IkReal x6408=(r21*sj5);
IkReal x6409=(cj5*r20);
IkReal x6410=(r01*sj5);
IkReal x6411=((1.0)*x6403);
IkReal x6412=((1.0)*x6402);
evalcond[0]=((((-1.0)*r22*x6411))+(((-1.0)*x6409*x6412))+((x6402*x6408)));
evalcond[1]=((((-1.0)*x6408*x6411))+(((-1.0)*r22*x6412))+((x6403*x6409)));
evalcond[2]=(cj0+(((-1.0)*x6407*x6412))+(((-1.0)*r12*x6411))+((x6402*x6406)));
evalcond[3]=((((-1.0)*x6405*x6412))+(((-1.0)*r02*x6411))+(((-1.0)*x6404))+((x6402*x6410)));
evalcond[4]=((((-1.0)*r02*x6412))+(((-1.0)*x6410*x6411))+((x6403*x6405))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6406*x6411))+(((-1.0)*x6404))+(((-1.0)*r12*x6412))+((x6403*x6407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6413=((1.0)*cj5);
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6413)))),-1);
if(!x6415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6414.value)+(((1.5707963267949)*(x6415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6416=IKsin(j4);
IkReal x6417=IKcos(j4);
IkReal x6418=((1.0)*sj0);
IkReal x6419=(cj5*r00);
IkReal x6420=(r11*sj5);
IkReal x6421=(cj5*r10);
IkReal x6422=(r21*sj5);
IkReal x6423=(cj5*r20);
IkReal x6424=(r01*sj5);
IkReal x6425=((1.0)*x6417);
IkReal x6426=((1.0)*x6416);
evalcond[0]=((((-1.0)*r22*x6425))+((x6416*x6422))+(((-1.0)*x6423*x6426)));
evalcond[1]=((((-1.0)*x6422*x6425))+(((-1.0)*r22*x6426))+((x6417*x6423)));
evalcond[2]=((((-1.0)*x6421*x6426))+cj0+((x6416*x6420))+(((-1.0)*r12*x6425)));
evalcond[3]=((((-1.0)*x6419*x6426))+((x6416*x6424))+(((-1.0)*x6418))+(((-1.0)*r02*x6425)));
evalcond[4]=((((-1.0)*x6424*x6425))+((x6417*x6419))+(((-1.0)*r02*x6426))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6418))+((x6417*x6421))+(((-1.0)*x6420*x6425))+(((-1.0)*r12*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6427=IKcos(j0);
IkReal x6428=IKsin(j0);
evalcond[0]=((((-0.39225)*x6427))+(((-1.0)*px))+(((-0.10915)*x6428)));
evalcond[1]=((((-0.39225)*x6428))+(((-1.0)*py))+(((0.10915)*x6427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6429=((1.0)*cj5);
IkReal x6430=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6429)));
j4eval[0]=x6430;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6429)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6431=cj5*cj5;
IkReal x6432=((1.0)*r21);
IkReal x6433=(cj5*sj5);
IkReal x6434=((1.0)*r20);
IkReal x6435=((((-1.0)*r01*x6433*x6434))+((r01*r21))+(((-1.0)*r01*x6431*x6432))+(((-1.0)*r00*x6432*x6433))+((r00*r20*x6431))+((r02*r22)));
j4eval[0]=x6435;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6434)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6436=cj5*cj5;
IkReal x6437=(r21*sj5);
IkReal x6438=(r11*r21);
IkReal x6439=((1.0)*cj5*r20);
IkReal x6440=(x6438+((r12*r22))+((r10*r20*x6436))+(((-1.0)*r11*sj5*x6439))+(((-1.0)*cj5*r10*x6437))+(((-1.0)*x6436*x6438)));
j4eval[0]=x6440;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6439))+((sj0*x6437)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6441=cj5*cj5;
IkReal x6442=(r21*sj5);
IkReal x6443=(r11*r21);
IkReal x6444=((1.0)*cj5*r20);
CheckValue<IkReal> x6445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6444))+(((-1.0)*x6441*x6443))+((r10*r20*x6441))+x6443+((r12*r22))+(((-1.0)*cj5*r10*x6442)))),-1);
if(!x6445.valid){
continue;
}
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6444))+((sj0*x6442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6445.value)))+(x6446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6447=IKsin(j4);
IkReal x6448=IKcos(j4);
IkReal x6449=(r11*sj5);
IkReal x6450=(cj5*r00);
IkReal x6451=(cj5*r10);
IkReal x6452=(r21*sj5);
IkReal x6453=(cj5*r20);
IkReal x6454=(r01*sj5);
IkReal x6455=((1.0)*x6448);
IkReal x6456=((1.0)*x6447);
evalcond[0]=((((-1.0)*x6453*x6456))+((x6447*x6452))+(((-1.0)*r22*x6455)));
evalcond[1]=((((-1.0)*x6452*x6455))+((x6448*x6453))+(((-1.0)*r22*x6456)));
evalcond[2]=((((-1.0)*x6451*x6456))+cj0+((x6447*x6449))+(((-1.0)*r12*x6455)));
evalcond[3]=(cj0+(((-1.0)*r02*x6456))+(((-1.0)*x6454*x6455))+((x6448*x6450)));
evalcond[4]=(sj0+(((-1.0)*x6449*x6455))+(((-1.0)*r12*x6456))+((x6448*x6451)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6455))+((x6447*x6454))+(((-1.0)*x6450*x6456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6457=cj5*cj5;
IkReal x6458=((1.0)*r21);
IkReal x6459=(cj5*sj5);
IkReal x6460=((1.0)*r20);
CheckValue<IkReal> x6461 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6461.valid){
continue;
}
CheckValue<IkReal> x6462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6457*x6458))+(((-1.0)*r00*x6458*x6459))+((r01*r21))+((r00*r20*x6457))+((r02*r22))+(((-1.0)*r01*x6459*x6460)))),-1);
if(!x6462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6461.value)+(((1.5707963267949)*(x6462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6463=IKsin(j4);
IkReal x6464=IKcos(j4);
IkReal x6465=(r11*sj5);
IkReal x6466=(cj5*r00);
IkReal x6467=(cj5*r10);
IkReal x6468=(r21*sj5);
IkReal x6469=(cj5*r20);
IkReal x6470=(r01*sj5);
IkReal x6471=((1.0)*x6464);
IkReal x6472=((1.0)*x6463);
evalcond[0]=(((x6463*x6468))+(((-1.0)*r22*x6471))+(((-1.0)*x6469*x6472)));
evalcond[1]=(((x6464*x6469))+(((-1.0)*r22*x6472))+(((-1.0)*x6468*x6471)));
evalcond[2]=((((-1.0)*x6467*x6472))+(((-1.0)*r12*x6471))+((x6463*x6465))+cj0);
evalcond[3]=(((x6464*x6466))+cj0+(((-1.0)*x6470*x6471))+(((-1.0)*r02*x6472)));
evalcond[4]=((((-1.0)*r12*x6472))+((x6464*x6467))+sj0+(((-1.0)*x6465*x6471)));
evalcond[5]=((((-1.0)*sj0))+((x6463*x6470))+(((-1.0)*r02*x6471))+(((-1.0)*x6466*x6472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6473=((1.0)*cj5);
CheckValue<IkReal> x6474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6473)))),-1);
if(!x6474.valid){
continue;
}
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6474.value)))+(x6475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6476=IKsin(j4);
IkReal x6477=IKcos(j4);
IkReal x6478=(r11*sj5);
IkReal x6479=(cj5*r00);
IkReal x6480=(cj5*r10);
IkReal x6481=(r21*sj5);
IkReal x6482=(cj5*r20);
IkReal x6483=(r01*sj5);
IkReal x6484=((1.0)*x6477);
IkReal x6485=((1.0)*x6476);
evalcond[0]=((((-1.0)*r22*x6484))+(((-1.0)*x6482*x6485))+((x6476*x6481)));
evalcond[1]=((((-1.0)*r22*x6485))+(((-1.0)*x6481*x6484))+((x6477*x6482)));
evalcond[2]=(((x6476*x6478))+cj0+(((-1.0)*r12*x6484))+(((-1.0)*x6480*x6485)));
evalcond[3]=(cj0+(((-1.0)*r02*x6485))+(((-1.0)*x6483*x6484))+((x6477*x6479)));
evalcond[4]=((((-1.0)*x6478*x6484))+sj0+(((-1.0)*r12*x6485))+((x6477*x6480)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6484))+(((-1.0)*x6479*x6485))+((x6476*x6483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6486=IKsin(j0);
IkReal x6487=IKcos(j0);
evalcond[0]=((((-0.10915)*x6486))+(((-1.0)*px))+(((0.81725)*x6487)));
evalcond[1]=((((0.10915)*x6487))+(((-1.0)*py))+(((0.81725)*x6486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6488=((1.0)*cj5);
IkReal x6489=((((-1.0)*r01*x6488))+(((-1.0)*r00*sj5)));
j4eval[0]=x6489;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6488)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6490=((1.0)*cj5);
IkReal x6491=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6490)));
j4eval[0]=x6491;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6490))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6492=cj5*cj5;
IkReal x6493=((1.0)*sj5);
IkReal x6494=(cj5*r20);
IkReal x6495=(r11*r21);
IkReal x6496=((((-1.0)*x6492*x6495))+(((-1.0)*cj5*r10*r21*x6493))+((r10*r20*x6492))+x6495+((r12*r22))+(((-1.0)*r11*x6493*x6494)));
j4eval[0]=x6496;
j4eval[1]=IKsign(x6496);
j4eval[2]=((IKabs((((cj0*x6494))+(((-1.0)*cj0*r21*x6493)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6497=cj5*cj5;
IkReal x6498=((1.0)*sj5);
IkReal x6499=(cj5*r20);
IkReal x6500=(r11*r21);
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6498))+((r10*r20*x6497))+((r12*r22))+(((-1.0)*r11*x6498*x6499))+x6500+(((-1.0)*x6497*x6500)))),-1);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((((cj0*x6499))+(((-1.0)*cj0*r21*x6498)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6501.value)))+(x6502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6503=IKsin(j4);
IkReal x6504=IKcos(j4);
IkReal x6505=((1.0)*sj0);
IkReal x6506=(cj5*r00);
IkReal x6507=(r11*sj5);
IkReal x6508=(cj5*r10);
IkReal x6509=(r21*sj5);
IkReal x6510=(cj5*r20);
IkReal x6511=(r01*sj5);
IkReal x6512=((1.0)*x6504);
IkReal x6513=((1.0)*x6503);
evalcond[0]=((((-1.0)*r22*x6512))+((x6503*x6509))+(((-1.0)*x6510*x6513)));
evalcond[1]=(((x6504*x6510))+(((-1.0)*r22*x6513))+(((-1.0)*x6509*x6512)));
evalcond[2]=(cj0+((x6503*x6507))+(((-1.0)*r12*x6512))+(((-1.0)*x6508*x6513)));
evalcond[3]=((((-1.0)*r02*x6512))+((x6503*x6511))+(((-1.0)*x6505))+(((-1.0)*x6506*x6513)));
evalcond[4]=((((-1.0)*r02*x6513))+((x6504*x6506))+(((-1.0)*cj0))+(((-1.0)*x6511*x6512)));
evalcond[5]=((((-1.0)*x6505))+((x6504*x6508))+(((-1.0)*x6507*x6512))+(((-1.0)*r12*x6513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6514=((1.0)*cj5);
CheckValue<IkReal> x6515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6514)))),-1);
if(!x6515.valid){
continue;
}
CheckValue<IkReal> x6516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6514))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6515.value)))+(x6516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6517=IKsin(j4);
IkReal x6518=IKcos(j4);
IkReal x6519=((1.0)*sj0);
IkReal x6520=(cj5*r00);
IkReal x6521=(r11*sj5);
IkReal x6522=(cj5*r10);
IkReal x6523=(r21*sj5);
IkReal x6524=(cj5*r20);
IkReal x6525=(r01*sj5);
IkReal x6526=((1.0)*x6518);
IkReal x6527=((1.0)*x6517);
evalcond[0]=(((x6517*x6523))+(((-1.0)*r22*x6526))+(((-1.0)*x6524*x6527)));
evalcond[1]=((((-1.0)*r22*x6527))+((x6518*x6524))+(((-1.0)*x6523*x6526)));
evalcond[2]=((((-1.0)*x6522*x6527))+cj0+((x6517*x6521))+(((-1.0)*r12*x6526)));
evalcond[3]=(((x6517*x6525))+(((-1.0)*r02*x6526))+(((-1.0)*x6519))+(((-1.0)*x6520*x6527)));
evalcond[4]=((((-1.0)*r02*x6527))+((x6518*x6520))+(((-1.0)*x6525*x6526))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6521*x6526))+(((-1.0)*x6519))+(((-1.0)*r12*x6527))+((x6518*x6522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6528=((1.0)*cj5);
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6528))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
CheckValue<IkReal> x6530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6528)))),-1);
if(!x6530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6529.value)+(((1.5707963267949)*(x6530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6531=IKsin(j4);
IkReal x6532=IKcos(j4);
IkReal x6533=((1.0)*sj0);
IkReal x6534=(cj5*r00);
IkReal x6535=(r11*sj5);
IkReal x6536=(cj5*r10);
IkReal x6537=(r21*sj5);
IkReal x6538=(cj5*r20);
IkReal x6539=(r01*sj5);
IkReal x6540=((1.0)*x6532);
IkReal x6541=((1.0)*x6531);
evalcond[0]=((((-1.0)*r22*x6540))+(((-1.0)*x6538*x6541))+((x6531*x6537)));
evalcond[1]=((((-1.0)*r22*x6541))+(((-1.0)*x6537*x6540))+((x6532*x6538)));
evalcond[2]=(cj0+(((-1.0)*r12*x6540))+(((-1.0)*x6536*x6541))+((x6531*x6535)));
evalcond[3]=((((-1.0)*x6533))+((x6531*x6539))+(((-1.0)*r02*x6540))+(((-1.0)*x6534*x6541)));
evalcond[4]=((((-1.0)*x6539*x6540))+(((-1.0)*r02*x6541))+((x6532*x6534))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6533))+(((-1.0)*r12*x6541))+((x6532*x6536))+(((-1.0)*x6535*x6540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6542=IKsin(j0);
IkReal x6543=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.03275)*x6543))+(((-0.10915)*x6542)));
evalcond[1]=((((0.10915)*x6543))+(((-1.0)*py))+(((0.03275)*x6542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6544=((1.0)*cj5);
IkReal x6545=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6544)));
j4eval[0]=x6545;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6544)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6546=cj5*cj5;
IkReal x6547=((1.0)*r21);
IkReal x6548=(cj5*sj5);
IkReal x6549=((1.0)*r20);
IkReal x6550=(((r00*r20*x6546))+(((-1.0)*r01*x6546*x6547))+(((-1.0)*r01*x6548*x6549))+((r01*r21))+(((-1.0)*r00*x6547*x6548))+((r02*r22)));
j4eval[0]=x6550;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6549))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6551=cj5*cj5;
IkReal x6552=(r21*sj5);
IkReal x6553=(r11*r21);
IkReal x6554=((1.0)*cj5*r20);
IkReal x6555=((((-1.0)*x6551*x6553))+((r12*r22))+(((-1.0)*r11*sj5*x6554))+x6553+((r10*r20*x6551))+(((-1.0)*cj5*r10*x6552)));
j4eval[0]=x6555;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6554))+((sj0*x6552)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6556=cj5*cj5;
IkReal x6557=(r21*sj5);
IkReal x6558=(r11*r21);
IkReal x6559=((1.0)*cj5*r20);
CheckValue<IkReal> x6560 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6559))+((sj0*x6557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x6556*x6558))+(((-1.0)*r11*sj5*x6559))+x6558+((r10*r20*x6556))+(((-1.0)*cj5*r10*x6557)))),-1);
if(!x6561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6560.value)+(((1.5707963267949)*(x6561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6562=IKsin(j4);
IkReal x6563=IKcos(j4);
IkReal x6564=(r11*sj5);
IkReal x6565=(cj5*r00);
IkReal x6566=(cj5*r10);
IkReal x6567=(r21*sj5);
IkReal x6568=(cj5*r20);
IkReal x6569=(r01*sj5);
IkReal x6570=((1.0)*x6563);
IkReal x6571=((1.0)*x6562);
evalcond[0]=(((x6562*x6567))+(((-1.0)*r22*x6570))+(((-1.0)*x6568*x6571)));
evalcond[1]=((((-1.0)*x6567*x6570))+((x6563*x6568))+(((-1.0)*r22*x6571)));
evalcond[2]=((((-1.0)*x6566*x6571))+cj0+((x6562*x6564))+(((-1.0)*r12*x6570)));
evalcond[3]=(((x6563*x6565))+cj0+(((-1.0)*x6569*x6570))+(((-1.0)*r02*x6571)));
evalcond[4]=(sj0+((x6563*x6566))+(((-1.0)*r12*x6571))+(((-1.0)*x6564*x6570)));
evalcond[5]=((((-1.0)*x6565*x6571))+(((-1.0)*sj0))+((x6562*x6569))+(((-1.0)*r02*x6570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6572=cj5*cj5;
IkReal x6573=((1.0)*r21);
IkReal x6574=(cj5*sj5);
IkReal x6575=((1.0)*r20);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6573*x6574))+((r01*r21))+((r00*r20*x6572))+(((-1.0)*r01*x6572*x6573))+((r02*r22))+(((-1.0)*r01*x6574*x6575)))),-1);
if(!x6577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6576.value)+(((1.5707963267949)*(x6577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6578=IKsin(j4);
IkReal x6579=IKcos(j4);
IkReal x6580=(r11*sj5);
IkReal x6581=(cj5*r00);
IkReal x6582=(cj5*r10);
IkReal x6583=(r21*sj5);
IkReal x6584=(cj5*r20);
IkReal x6585=(r01*sj5);
IkReal x6586=((1.0)*x6579);
IkReal x6587=((1.0)*x6578);
evalcond[0]=((((-1.0)*x6584*x6587))+((x6578*x6583))+(((-1.0)*r22*x6586)));
evalcond[1]=(((x6579*x6584))+(((-1.0)*r22*x6587))+(((-1.0)*x6583*x6586)));
evalcond[2]=(cj0+(((-1.0)*r12*x6586))+((x6578*x6580))+(((-1.0)*x6582*x6587)));
evalcond[3]=(cj0+(((-1.0)*r02*x6587))+((x6579*x6581))+(((-1.0)*x6585*x6586)));
evalcond[4]=(sj0+((x6579*x6582))+(((-1.0)*r12*x6587))+(((-1.0)*x6580*x6586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6586))+(((-1.0)*x6581*x6587))+((x6578*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6588=((1.0)*cj5);
CheckValue<IkReal> x6589 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6589.valid){
continue;
}
CheckValue<IkReal> x6590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6588))+(((-1.0)*r00*sj5)))),-1);
if(!x6590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6589.value)+(((1.5707963267949)*(x6590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6591=IKsin(j4);
IkReal x6592=IKcos(j4);
IkReal x6593=(r11*sj5);
IkReal x6594=(cj5*r00);
IkReal x6595=(cj5*r10);
IkReal x6596=(r21*sj5);
IkReal x6597=(cj5*r20);
IkReal x6598=(r01*sj5);
IkReal x6599=((1.0)*x6592);
IkReal x6600=((1.0)*x6591);
evalcond[0]=(((x6591*x6596))+(((-1.0)*x6597*x6600))+(((-1.0)*r22*x6599)));
evalcond[1]=((((-1.0)*r22*x6600))+(((-1.0)*x6596*x6599))+((x6592*x6597)));
evalcond[2]=((((-1.0)*x6595*x6600))+cj0+(((-1.0)*r12*x6599))+((x6591*x6593)));
evalcond[3]=((((-1.0)*x6598*x6599))+cj0+((x6592*x6594))+(((-1.0)*r02*x6600)));
evalcond[4]=(sj0+((x6592*x6595))+(((-1.0)*x6593*x6599))+(((-1.0)*r12*x6600)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6599))+((x6591*x6598))+(((-1.0)*x6594*x6600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6601=IKcos(j0);
IkReal x6602=IKsin(j0);
evalcond[0]=((((-0.39225)*x6601))+(((-1.0)*px))+(((-0.10915)*x6602)));
evalcond[1]=((((-0.39225)*x6602))+(((-1.0)*py))+(((0.10915)*x6601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6603=((1.0)*cj5);
IkReal x6604=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6603)));
j4eval[0]=x6604;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6603))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6605=cj5*cj5;
IkReal x6606=((1.0)*r21);
IkReal x6607=(cj5*sj5);
IkReal x6608=((1.0)*r20);
IkReal x6609=((((-1.0)*r01*x6607*x6608))+(((-1.0)*r00*x6606*x6607))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x6605*x6606))+((r00*r20*x6605)));
j4eval[0]=x6609;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6608)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6610=cj5*cj5;
IkReal x6611=(r21*sj5);
IkReal x6612=(r11*r21);
IkReal x6613=((1.0)*cj5*r20);
IkReal x6614=(((r10*r20*x6610))+x6612+(((-1.0)*cj5*r10*x6611))+(((-1.0)*r11*sj5*x6613))+((r12*r22))+(((-1.0)*x6610*x6612)));
j4eval[0]=x6614;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6613))+((sj0*x6611))))));
j4eval[2]=IKsign(x6614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6615=cj5*cj5;
IkReal x6616=(r21*sj5);
IkReal x6617=(r11*r21);
IkReal x6618=((1.0)*cj5*r20);
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6618))+((sj0*x6616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
CheckValue<IkReal> x6620=IKPowWithIntegerCheck(IKsign((((r10*r20*x6615))+x6617+(((-1.0)*cj5*r10*x6616))+(((-1.0)*r11*sj5*x6618))+((r12*r22))+(((-1.0)*x6615*x6617)))),-1);
if(!x6620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6619.value)+(((1.5707963267949)*(x6620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6621=IKsin(j4);
IkReal x6622=IKcos(j4);
IkReal x6623=(r11*sj5);
IkReal x6624=(cj5*r00);
IkReal x6625=(cj5*r10);
IkReal x6626=(r21*sj5);
IkReal x6627=(cj5*r20);
IkReal x6628=(r01*sj5);
IkReal x6629=((1.0)*x6622);
IkReal x6630=((1.0)*x6621);
evalcond[0]=((((-1.0)*r22*x6629))+((x6621*x6626))+(((-1.0)*x6627*x6630)));
evalcond[1]=((((-1.0)*r22*x6630))+(((-1.0)*x6626*x6629))+((x6622*x6627)));
evalcond[2]=((((-1.0)*r12*x6629))+cj0+((x6621*x6623))+(((-1.0)*x6625*x6630)));
evalcond[3]=(cj0+(((-1.0)*x6628*x6629))+(((-1.0)*r02*x6630))+((x6622*x6624)));
evalcond[4]=(sj0+((x6622*x6625))+(((-1.0)*r12*x6630))+(((-1.0)*x6623*x6629)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6629))+((x6621*x6628))+(((-1.0)*x6624*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6631=cj5*cj5;
IkReal x6632=((1.0)*r21);
IkReal x6633=(cj5*sj5);
IkReal x6634=((1.0)*r20);
CheckValue<IkReal> x6635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6633*x6634))+(((-1.0)*r01*x6631*x6632))+(((-1.0)*r00*x6632*x6633))+((r01*r21))+((r02*r22))+((r00*r20*x6631)))),-1);
if(!x6635.valid){
continue;
}
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6635.value)))+(x6636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6637=IKsin(j4);
IkReal x6638=IKcos(j4);
IkReal x6639=(r11*sj5);
IkReal x6640=(cj5*r00);
IkReal x6641=(cj5*r10);
IkReal x6642=(r21*sj5);
IkReal x6643=(cj5*r20);
IkReal x6644=(r01*sj5);
IkReal x6645=((1.0)*x6638);
IkReal x6646=((1.0)*x6637);
evalcond[0]=((((-1.0)*r22*x6645))+((x6637*x6642))+(((-1.0)*x6643*x6646)));
evalcond[1]=((((-1.0)*r22*x6646))+((x6638*x6643))+(((-1.0)*x6642*x6645)));
evalcond[2]=(cj0+((x6637*x6639))+(((-1.0)*x6641*x6646))+(((-1.0)*r12*x6645)));
evalcond[3]=(cj0+((x6638*x6640))+(((-1.0)*x6644*x6645))+(((-1.0)*r02*x6646)));
evalcond[4]=((((-1.0)*x6639*x6645))+sj0+((x6638*x6641))+(((-1.0)*r12*x6646)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6640*x6646))+((x6637*x6644))+(((-1.0)*r02*x6645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6647=((1.0)*cj5);
CheckValue<IkReal> x6648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6647)))),-1);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6648.value)))+(x6649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6650=IKsin(j4);
IkReal x6651=IKcos(j4);
IkReal x6652=(r11*sj5);
IkReal x6653=(cj5*r00);
IkReal x6654=(cj5*r10);
IkReal x6655=(r21*sj5);
IkReal x6656=(cj5*r20);
IkReal x6657=(r01*sj5);
IkReal x6658=((1.0)*x6651);
IkReal x6659=((1.0)*x6650);
evalcond[0]=((((-1.0)*r22*x6658))+(((-1.0)*x6656*x6659))+((x6650*x6655)));
evalcond[1]=((((-1.0)*r22*x6659))+(((-1.0)*x6655*x6658))+((x6651*x6656)));
evalcond[2]=(cj0+(((-1.0)*r12*x6658))+(((-1.0)*x6654*x6659))+((x6650*x6652)));
evalcond[3]=(cj0+(((-1.0)*x6657*x6658))+(((-1.0)*r02*x6659))+((x6651*x6653)));
evalcond[4]=(sj0+(((-1.0)*x6652*x6658))+(((-1.0)*r12*x6659))+((x6651*x6654)));
evalcond[5]=((((-1.0)*x6653*x6659))+(((-1.0)*sj0))+(((-1.0)*r02*x6658))+((x6650*x6657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6660=IKsin(j0);
IkReal x6661=IKcos(j0);
evalcond[0]=((((0.39225)*x6661))+(((-1.0)*px))+(((-0.10915)*x6660)));
evalcond[1]=((((0.39225)*x6660))+(((-1.0)*py))+(((0.10915)*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6662=((1.0)*cj5);
IkReal x6663=((((-1.0)*r01*x6662))+(((-1.0)*r00*sj5)));
j4eval[0]=x6663;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6662))))));
j4eval[2]=IKsign(x6663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6664=((1.0)*cj5);
IkReal x6665=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6664)));
j4eval[0]=x6665;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6664))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6666=cj5*cj5;
IkReal x6667=((1.0)*sj5);
IkReal x6668=(cj5*r20);
IkReal x6669=(r11*r21);
IkReal x6670=((((-1.0)*cj5*r10*r21*x6667))+x6669+(((-1.0)*r11*x6667*x6668))+((r12*r22))+(((-1.0)*x6666*x6669))+((r10*r20*x6666)));
j4eval[0]=x6670;
j4eval[1]=IKsign(x6670);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6667))+((cj0*x6668)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6671=cj5*cj5;
IkReal x6672=((1.0)*sj5);
IkReal x6673=(cj5*r20);
IkReal x6674=(r11*r21);
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal((((cj0*x6673))+(((-1.0)*cj0*r21*x6672)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
CheckValue<IkReal> x6676=IKPowWithIntegerCheck(IKsign((x6674+(((-1.0)*cj5*r10*r21*x6672))+(((-1.0)*r11*x6672*x6673))+((r12*r22))+(((-1.0)*x6671*x6674))+((r10*r20*x6671)))),-1);
if(!x6676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6675.value)+(((1.5707963267949)*(x6676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6677=IKsin(j4);
IkReal x6678=IKcos(j4);
IkReal x6679=((1.0)*sj0);
IkReal x6680=(cj5*r00);
IkReal x6681=(r11*sj5);
IkReal x6682=(cj5*r10);
IkReal x6683=(r21*sj5);
IkReal x6684=(cj5*r20);
IkReal x6685=(r01*sj5);
IkReal x6686=((1.0)*x6678);
IkReal x6687=((1.0)*x6677);
evalcond[0]=(((x6677*x6683))+(((-1.0)*x6684*x6687))+(((-1.0)*r22*x6686)));
evalcond[1]=(((x6678*x6684))+(((-1.0)*x6683*x6686))+(((-1.0)*r22*x6687)));
evalcond[2]=(((x6677*x6681))+cj0+(((-1.0)*x6682*x6687))+(((-1.0)*r12*x6686)));
evalcond[3]=(((x6677*x6685))+(((-1.0)*r02*x6686))+(((-1.0)*x6680*x6687))+(((-1.0)*x6679)));
evalcond[4]=(((x6678*x6680))+(((-1.0)*r02*x6687))+(((-1.0)*cj0))+(((-1.0)*x6685*x6686)));
evalcond[5]=(((x6678*x6682))+(((-1.0)*x6681*x6686))+(((-1.0)*x6679))+(((-1.0)*r12*x6687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6688=((1.0)*cj5);
CheckValue<IkReal> x6689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6688)))),-1);
if(!x6689.valid){
continue;
}
CheckValue<IkReal> x6690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6689.value)))+(x6690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6691=IKsin(j4);
IkReal x6692=IKcos(j4);
IkReal x6693=((1.0)*sj0);
IkReal x6694=(cj5*r00);
IkReal x6695=(r11*sj5);
IkReal x6696=(cj5*r10);
IkReal x6697=(r21*sj5);
IkReal x6698=(cj5*r20);
IkReal x6699=(r01*sj5);
IkReal x6700=((1.0)*x6692);
IkReal x6701=((1.0)*x6691);
evalcond[0]=((((-1.0)*x6698*x6701))+(((-1.0)*r22*x6700))+((x6691*x6697)));
evalcond[1]=((((-1.0)*x6697*x6700))+(((-1.0)*r22*x6701))+((x6692*x6698)));
evalcond[2]=((((-1.0)*x6696*x6701))+cj0+((x6691*x6695))+(((-1.0)*r12*x6700)));
evalcond[3]=((((-1.0)*r02*x6700))+(((-1.0)*x6694*x6701))+(((-1.0)*x6693))+((x6691*x6699)));
evalcond[4]=((((-1.0)*r02*x6701))+((x6692*x6694))+(((-1.0)*x6699*x6700))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6695*x6700))+((x6692*x6696))+(((-1.0)*x6693))+(((-1.0)*r12*x6701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6702=((1.0)*cj5);
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
CheckValue<IkReal> x6704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6702)))),-1);
if(!x6704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6703.value)+(((1.5707963267949)*(x6704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6705=IKsin(j4);
IkReal x6706=IKcos(j4);
IkReal x6707=((1.0)*sj0);
IkReal x6708=(cj5*r00);
IkReal x6709=(r11*sj5);
IkReal x6710=(cj5*r10);
IkReal x6711=(r21*sj5);
IkReal x6712=(cj5*r20);
IkReal x6713=(r01*sj5);
IkReal x6714=((1.0)*x6706);
IkReal x6715=((1.0)*x6705);
evalcond[0]=(((x6705*x6711))+(((-1.0)*x6712*x6715))+(((-1.0)*r22*x6714)));
evalcond[1]=((((-1.0)*x6711*x6714))+((x6706*x6712))+(((-1.0)*r22*x6715)));
evalcond[2]=(((x6705*x6709))+cj0+(((-1.0)*x6710*x6715))+(((-1.0)*r12*x6714)));
evalcond[3]=(((x6705*x6713))+(((-1.0)*x6707))+(((-1.0)*r02*x6714))+(((-1.0)*x6708*x6715)));
evalcond[4]=((((-1.0)*x6713*x6714))+((x6706*x6708))+(((-1.0)*r02*x6715))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6707))+(((-1.0)*r12*x6715))+((x6706*x6710))+(((-1.0)*x6709*x6714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6716=IKcos(j0);
IkReal x6717=IKsin(j0);
evalcond[0]=((((-0.10915)*x6717))+(((-0.81725)*x6716))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6716))+(((-0.81725)*x6717))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6718=((1.0)*cj5);
IkReal x6719=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6718)));
j4eval[0]=x6719;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6718))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6720=cj5*cj5;
IkReal x6721=((1.0)*r21);
IkReal x6722=(cj5*sj5);
IkReal x6723=((1.0)*r20);
IkReal x6724=((((-1.0)*r00*x6721*x6722))+(((-1.0)*r01*x6720*x6721))+((r00*r20*x6720))+(((-1.0)*r01*x6722*x6723))+((r01*r21))+((r02*r22)));
j4eval[0]=x6724;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6723))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6725=cj5*cj5;
IkReal x6726=(r21*sj5);
IkReal x6727=(r11*r21);
IkReal x6728=((1.0)*cj5*r20);
IkReal x6729=((((-1.0)*r11*sj5*x6728))+(((-1.0)*x6725*x6727))+x6727+(((-1.0)*cj5*r10*x6726))+((r12*r22))+((r10*r20*x6725)));
j4eval[0]=x6729;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6728))+((sj0*x6726))))));
j4eval[2]=IKsign(x6729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6730=cj5*cj5;
IkReal x6731=(r21*sj5);
IkReal x6732=(r11*r21);
IkReal x6733=((1.0)*cj5*r20);
CheckValue<IkReal> x6734 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6731))+(((-1.0)*sj0*x6733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6734.valid){
continue;
}
CheckValue<IkReal> x6735=IKPowWithIntegerCheck(IKsign((x6732+((r12*r22))+(((-1.0)*r11*sj5*x6733))+(((-1.0)*cj5*r10*x6731))+(((-1.0)*x6730*x6732))+((r10*r20*x6730)))),-1);
if(!x6735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6734.value)+(((1.5707963267949)*(x6735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6736=IKsin(j4);
IkReal x6737=IKcos(j4);
IkReal x6738=(r11*sj5);
IkReal x6739=(cj5*r00);
IkReal x6740=(cj5*r10);
IkReal x6741=(r21*sj5);
IkReal x6742=(cj5*r20);
IkReal x6743=(r01*sj5);
IkReal x6744=((1.0)*x6737);
IkReal x6745=((1.0)*x6736);
evalcond[0]=((((-1.0)*x6742*x6745))+(((-1.0)*r22*x6744))+((x6736*x6741)));
evalcond[1]=((((-1.0)*r22*x6745))+((x6737*x6742))+(((-1.0)*x6741*x6744)));
evalcond[2]=((((-1.0)*r12*x6744))+cj0+((x6736*x6738))+(((-1.0)*x6740*x6745)));
evalcond[3]=(cj0+(((-1.0)*r02*x6745))+((x6737*x6739))+(((-1.0)*x6743*x6744)));
evalcond[4]=(sj0+(((-1.0)*r12*x6745))+((x6737*x6740))+(((-1.0)*x6738*x6744)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6744))+((x6736*x6743))+(((-1.0)*x6739*x6745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6746=cj5*cj5;
IkReal x6747=((1.0)*r21);
IkReal x6748=(cj5*sj5);
IkReal x6749=((1.0)*r20);
CheckValue<IkReal> x6750 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6750.valid){
continue;
}
CheckValue<IkReal> x6751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6748*x6749))+(((-1.0)*r01*x6746*x6747))+((r01*r21))+((r02*r22))+((r00*r20*x6746))+(((-1.0)*r00*x6747*x6748)))),-1);
if(!x6751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6750.value)+(((1.5707963267949)*(x6751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6752=IKsin(j4);
IkReal x6753=IKcos(j4);
IkReal x6754=(r11*sj5);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=(r01*sj5);
IkReal x6760=((1.0)*x6753);
IkReal x6761=((1.0)*x6752);
evalcond[0]=((((-1.0)*x6758*x6761))+(((-1.0)*r22*x6760))+((x6752*x6757)));
evalcond[1]=((((-1.0)*r22*x6761))+((x6753*x6758))+(((-1.0)*x6757*x6760)));
evalcond[2]=(cj0+(((-1.0)*x6756*x6761))+((x6752*x6754))+(((-1.0)*r12*x6760)));
evalcond[3]=(cj0+(((-1.0)*x6759*x6760))+((x6753*x6755))+(((-1.0)*r02*x6761)));
evalcond[4]=(sj0+((x6753*x6756))+(((-1.0)*r12*x6761))+(((-1.0)*x6754*x6760)));
evalcond[5]=((((-1.0)*x6755*x6761))+(((-1.0)*sj0))+(((-1.0)*r02*x6760))+((x6752*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6762=((1.0)*cj5);
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
CheckValue<IkReal> x6764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6762)))),-1);
if(!x6764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6763.value)+(((1.5707963267949)*(x6764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6765=IKsin(j4);
IkReal x6766=IKcos(j4);
IkReal x6767=(r11*sj5);
IkReal x6768=(cj5*r00);
IkReal x6769=(cj5*r10);
IkReal x6770=(r21*sj5);
IkReal x6771=(cj5*r20);
IkReal x6772=(r01*sj5);
IkReal x6773=((1.0)*x6766);
IkReal x6774=((1.0)*x6765);
evalcond[0]=((((-1.0)*r22*x6773))+((x6765*x6770))+(((-1.0)*x6771*x6774)));
evalcond[1]=((((-1.0)*r22*x6774))+(((-1.0)*x6770*x6773))+((x6766*x6771)));
evalcond[2]=(cj0+((x6765*x6767))+(((-1.0)*x6769*x6774))+(((-1.0)*r12*x6773)));
evalcond[3]=(((x6766*x6768))+cj0+(((-1.0)*r02*x6774))+(((-1.0)*x6772*x6773)));
evalcond[4]=(((x6766*x6769))+sj0+(((-1.0)*r12*x6774))+(((-1.0)*x6767*x6773)));
evalcond[5]=((((-1.0)*x6768*x6774))+(((-1.0)*sj0))+(((-1.0)*r02*x6773))+((x6765*x6772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6775=IKcos(j0);
IkReal x6776=IKsin(j0);
evalcond[0]=((((-0.03275)*x6775))+(((-0.10915)*x6776))+(((-1.0)*px)));
evalcond[1]=((((-0.03275)*x6776))+(((0.10915)*x6775))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6777=((1.0)*cj5);
IkReal x6778=((((-1.0)*r01*x6777))+(((-1.0)*r00*sj5)));
j4eval[0]=x6778;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6777)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6779=((1.0)*cj5);
IkReal x6780=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6779)));
j4eval[0]=x6780;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6779))))));
j4eval[2]=IKsign(x6780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6781=cj5*cj5;
IkReal x6782=((1.0)*sj5);
IkReal x6783=(cj5*r20);
IkReal x6784=(r11*r21);
IkReal x6785=((((-1.0)*x6781*x6784))+x6784+((r12*r22))+((r10*r20*x6781))+(((-1.0)*r11*x6782*x6783))+(((-1.0)*cj5*r10*r21*x6782)));
j4eval[0]=x6785;
j4eval[1]=IKsign(x6785);
j4eval[2]=((IKabs((((cj0*x6783))+(((-1.0)*cj0*r21*x6782)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6786=cj5*cj5;
IkReal x6787=((1.0)*sj5);
IkReal x6788=(cj5*r20);
IkReal x6789=(r11*r21);
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6786*x6789))+x6789+((r12*r22))+((r10*r20*x6786))+(((-1.0)*cj5*r10*r21*x6787))+(((-1.0)*r11*x6787*x6788)))),-1);
if(!x6790.valid){
continue;
}
CheckValue<IkReal> x6791 = IKatan2WithCheck(IkReal((((cj0*x6788))+(((-1.0)*cj0*r21*x6787)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6790.value)))+(x6791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6792=IKsin(j4);
IkReal x6793=IKcos(j4);
IkReal x6794=((1.0)*sj0);
IkReal x6795=(cj5*r00);
IkReal x6796=(r11*sj5);
IkReal x6797=(cj5*r10);
IkReal x6798=(r21*sj5);
IkReal x6799=(cj5*r20);
IkReal x6800=(r01*sj5);
IkReal x6801=((1.0)*x6793);
IkReal x6802=((1.0)*x6792);
evalcond[0]=(((x6792*x6798))+(((-1.0)*r22*x6801))+(((-1.0)*x6799*x6802)));
evalcond[1]=(((x6793*x6799))+(((-1.0)*r22*x6802))+(((-1.0)*x6798*x6801)));
evalcond[2]=(((x6792*x6796))+cj0+(((-1.0)*r12*x6801))+(((-1.0)*x6797*x6802)));
evalcond[3]=((((-1.0)*r02*x6801))+(((-1.0)*x6795*x6802))+(((-1.0)*x6794))+((x6792*x6800)));
evalcond[4]=(((x6793*x6795))+(((-1.0)*r02*x6802))+(((-1.0)*x6800*x6801))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6796*x6801))+((x6793*x6797))+(((-1.0)*r12*x6802))+(((-1.0)*x6794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6803=((1.0)*cj5);
CheckValue<IkReal> x6804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6803)))),-1);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6803))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6804.value)))+(x6805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6806=IKsin(j4);
IkReal x6807=IKcos(j4);
IkReal x6808=((1.0)*sj0);
IkReal x6809=(cj5*r00);
IkReal x6810=(r11*sj5);
IkReal x6811=(cj5*r10);
IkReal x6812=(r21*sj5);
IkReal x6813=(cj5*r20);
IkReal x6814=(r01*sj5);
IkReal x6815=((1.0)*x6807);
IkReal x6816=((1.0)*x6806);
evalcond[0]=(((x6806*x6812))+(((-1.0)*x6813*x6816))+(((-1.0)*r22*x6815)));
evalcond[1]=(((x6807*x6813))+(((-1.0)*x6812*x6815))+(((-1.0)*r22*x6816)));
evalcond[2]=(cj0+(((-1.0)*x6811*x6816))+((x6806*x6810))+(((-1.0)*r12*x6815)));
evalcond[3]=((((-1.0)*x6809*x6816))+((x6806*x6814))+(((-1.0)*r02*x6815))+(((-1.0)*x6808)));
evalcond[4]=(((x6807*x6809))+(((-1.0)*r02*x6816))+(((-1.0)*x6814*x6815))+(((-1.0)*cj0)));
evalcond[5]=(((x6807*x6811))+(((-1.0)*x6810*x6815))+(((-1.0)*r12*x6816))+(((-1.0)*x6808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6817=((1.0)*cj5);
CheckValue<IkReal> x6818 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6817)))),-1);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6818.value)+(((1.5707963267949)*(x6819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKsin(j4);
IkReal x6821=IKcos(j4);
IkReal x6822=((1.0)*sj0);
IkReal x6823=(cj5*r00);
IkReal x6824=(r11*sj5);
IkReal x6825=(cj5*r10);
IkReal x6826=(r21*sj5);
IkReal x6827=(cj5*r20);
IkReal x6828=(r01*sj5);
IkReal x6829=((1.0)*x6821);
IkReal x6830=((1.0)*x6820);
evalcond[0]=(((x6820*x6826))+(((-1.0)*r22*x6829))+(((-1.0)*x6827*x6830)));
evalcond[1]=((((-1.0)*r22*x6830))+((x6821*x6827))+(((-1.0)*x6826*x6829)));
evalcond[2]=((((-1.0)*x6825*x6830))+cj0+(((-1.0)*r12*x6829))+((x6820*x6824)));
evalcond[3]=((((-1.0)*x6822))+(((-1.0)*r02*x6829))+((x6820*x6828))+(((-1.0)*x6823*x6830)));
evalcond[4]=((((-1.0)*r02*x6830))+(((-1.0)*x6828*x6829))+((x6821*x6823))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6822))+(((-1.0)*r12*x6830))+(((-1.0)*x6824*x6829))+((x6821*x6825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6831=((8500.0)*sj1);
IkReal x6832=(cj5*r01);
IkReal x6833=(r00*sj5);
IkReal x6834=(sj1*sj2);
IkReal x6835=(cj1*cj2);
IkReal x6836=((20000.0)*px);
IkReal x6837=((7845.0)*cj2*sj1);
IkReal x6838=((7845.0)*cj1*sj2);
CheckValue<IkReal> x6839=IKPowWithIntegerCheck(((((2183.0)*x6835))+(((-2183.0)*x6834))),-1);
if(!x6839.valid){
continue;
}
CheckValue<IkReal> x6840=IKPowWithIntegerCheck(((((-1.0)*x6834))+x6835),-1);
if(!x6840.valid){
continue;
}
if( IKabs(((x6839.value)*((((x6833*x6837))+((x6833*x6838))+(((-1893.0)*x6832*x6835))+((x6831*x6832))+((x6831*x6833))+(((1893.0)*x6833*x6834))+((x6832*x6837))+((x6832*x6838))+(((-1893.0)*x6833*x6835))+(((1893.0)*x6832*x6834))+((x6834*x6836))+(((-1.0)*x6835*x6836)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6840.value)*((x6833+x6832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6839.value)*((((x6833*x6837))+((x6833*x6838))+(((-1893.0)*x6832*x6835))+((x6831*x6832))+((x6831*x6833))+(((1893.0)*x6833*x6834))+((x6832*x6837))+((x6832*x6838))+(((-1893.0)*x6833*x6835))+(((1893.0)*x6832*x6834))+((x6834*x6836))+(((-1.0)*x6835*x6836))))))+IKsqr(((x6840.value)*((x6833+x6832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6839.value)*((((x6833*x6837))+((x6833*x6838))+(((-1893.0)*x6832*x6835))+((x6831*x6832))+((x6831*x6833))+(((1893.0)*x6833*x6834))+((x6832*x6837))+((x6832*x6838))+(((-1893.0)*x6833*x6835))+(((1893.0)*x6832*x6834))+((x6834*x6836))+(((-1.0)*x6835*x6836))))), ((x6840.value)*((x6833+x6832))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6841=IKcos(j0);
IkReal x6842=IKsin(j0);
IkReal x6843=((0.39225)*cj1);
IkReal x6844=((1.0)*sj1);
IkReal x6845=(cj1*cj2);
IkReal x6846=(cj5*r11);
IkReal x6847=((1.0)*sj5);
IkReal x6848=((0.09465)*sj5);
IkReal x6849=(cj5*r01);
IkReal x6850=((0.39225)*cj2);
IkReal x6851=(sj2*x6842);
IkReal x6852=(sj1*x6841);
IkReal x6853=(sj2*x6841);
IkReal x6854=(sj1*x6842);
evalcond[0]=((((-1.0)*r00*x6847))+(((-1.0)*x6844*x6853))+((x6841*x6845))+(((-1.0)*x6849)));
evalcond[1]=((((-1.0)*x6844*x6851))+(((-1.0)*r10*x6847))+(((-1.0)*x6846))+((x6842*x6845)));
evalcond[2]=((((-1.0)*r00*x6848))+(((-0.09465)*x6849))+(((-1.0)*px))+((x6843*x6853))+((x6850*x6852))+(((-0.10915)*x6842))+(((0.425)*x6852)));
evalcond[3]=((((-0.09465)*x6846))+(((-1.0)*py))+(((0.10915)*x6841))+(((-1.0)*r10*x6848))+((x6843*x6851))+((x6850*x6854))+(((0.425)*x6854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6855=((1.0)*cj5);
IkReal x6856=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6855)));
j4eval[0]=x6856;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6855))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6857=((1.0)*cj5);
IkReal x6858=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6857)));
j4eval[0]=x6858;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6857))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6859=((1.0)*sj0);
IkReal x6860=((1.0)*cj0);
IkReal x6861=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6861;
j4eval[1]=((IKabs(((((-1.0)*r12*x6859))+(((-1.0)*r02*x6860)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6860))+(((-1.0)*r11*sj5*x6859))))));
j4eval[2]=IKsign(x6861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6862=((-1.0)*r20);
IkReal x6864 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6864)==0){
continue;
}
IkReal x6863=pow(x6864,-0.5);
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6862),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6865.value));
IkReal gconst133=(r21*x6863);
IkReal gconst134=(x6862*x6863);
CheckValue<IkReal> x6866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6866.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6866.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6867=((-1.0)*r20);
IkReal x6868=x6863;
CheckValue<IkReal> x6870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6867),IKFAST_ATAN2_MAGTHRESH);
if(!x6870.valid){
continue;
}
IkReal x6869=((-1.0)*(x6870.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6869;
IkReal gconst132=x6869;
IkReal gconst133=(r21*x6868);
IkReal gconst134=(x6867*x6868);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6871=((-1.0)*r20);
IkReal x6872=x6863;
CheckValue<IkReal> x6874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6871),IKFAST_ATAN2_MAGTHRESH);
if(!x6874.valid){
continue;
}
IkReal x6873=((-1.0)*(x6874.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6873;
IkReal gconst132=x6873;
IkReal gconst133=(r21*x6872);
IkReal gconst134=(x6871*x6872);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6875=((-1.0)*r20);
IkReal x6876=x6863;
CheckValue<IkReal> x6878 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6875),IKFAST_ATAN2_MAGTHRESH);
if(!x6878.valid){
continue;
}
IkReal x6877=((-1.0)*(x6878.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x6877;
IkReal gconst132=x6877;
IkReal gconst133=(r21*x6876);
IkReal gconst134=(x6875*x6876);
IkReal x6879=r22*r22;
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6879))),-1);
if(!x6882.valid){
continue;
}
IkReal x6880=x6882.value;
IkReal x6881=(((x6880*(r20*r20*r20*r20)))+x6879+((x6880*(r21*r21*r21*r21)))+(((2.0)*x6880*(r20*r20)*(r21*r21))));
j4eval[0]=x6881;
j4eval[1]=IKsign(x6881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6883=(gconst133*r21);
IkReal x6884=(sj1*sj2);
IkReal x6885=(gconst134*r20);
IkReal x6886=(cj1*cj2);
CheckValue<IkReal> x6887 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6886))+((r22*x6884)))),IkReal(((((-1.0)*x6883*x6886))+(((-1.0)*x6884*x6885))+((x6885*x6886))+((x6883*x6884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6887.valid){
continue;
}
CheckValue<IkReal> x6888=IKPowWithIntegerCheck(IKsign(((x6885*x6885)+(r22*r22)+(x6883*x6883)+(((-2.0)*x6883*x6885)))),-1);
if(!x6888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6887.value)+(((1.5707963267949)*(x6888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6889=IKsin(j4);
IkReal x6890=IKcos(j4);
IkReal x6891=((1.0)*cj2);
IkReal x6892=(gconst133*r11);
IkReal x6893=(gconst133*r21);
IkReal x6894=((1.0)*sj0);
IkReal x6895=(gconst133*r01);
IkReal x6896=(cj1*sj2);
IkReal x6897=((1.0)*x6890);
IkReal x6898=(gconst134*x6890);
IkReal x6899=((1.0)*x6889);
evalcond[0]=(((x6889*x6893))+(((-1.0)*gconst134*r20*x6899))+(((-1.0)*r22*x6897)));
evalcond[1]=((((-1.0)*gconst134*r10*x6899))+cj0+((x6889*x6892))+(((-1.0)*r12*x6897)));
evalcond[2]=((((-1.0)*gconst134*r00*x6899))+((x6889*x6895))+(((-1.0)*x6894))+(((-1.0)*r02*x6897)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x6893*x6897))+(((-1.0)*cj1*x6891))+(((-1.0)*r22*x6899))+((r20*x6898)));
evalcond[4]=((((-1.0)*x6895*x6897))+(((-1.0)*cj0*x6896))+(((-1.0)*cj0*sj1*x6891))+(((-1.0)*r02*x6899))+((r00*x6898)));
evalcond[5]=(((r10*x6898))+(((-1.0)*sj0*sj1*x6891))+(((-1.0)*x6894*x6896))+(((-1.0)*x6892*x6897))+(((-1.0)*r12*x6899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6900=((1.0)*gconst134);
CheckValue<IkReal> x6901 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6900))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6901.valid){
continue;
}
CheckValue<IkReal> x6902=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x6900)))),-1);
if(!x6902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6901.value)+(((1.5707963267949)*(x6902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6903=IKsin(j4);
IkReal x6904=IKcos(j4);
IkReal x6905=((1.0)*cj2);
IkReal x6906=(gconst133*r11);
IkReal x6907=(gconst133*r21);
IkReal x6908=((1.0)*sj0);
IkReal x6909=(gconst133*r01);
IkReal x6910=(cj1*sj2);
IkReal x6911=((1.0)*x6904);
IkReal x6912=(gconst134*x6904);
IkReal x6913=((1.0)*x6903);
evalcond[0]=((((-1.0)*r22*x6911))+((x6903*x6907))+(((-1.0)*gconst134*r20*x6913)));
evalcond[1]=((((-1.0)*gconst134*r10*x6913))+cj0+(((-1.0)*r12*x6911))+((x6903*x6906)));
evalcond[2]=((((-1.0)*gconst134*r00*x6913))+(((-1.0)*x6908))+((x6903*x6909))+(((-1.0)*r02*x6911)));
evalcond[3]=((((-1.0)*cj1*x6905))+(((-1.0)*r22*x6913))+(((-1.0)*x6907*x6911))+((sj1*sj2))+((r20*x6912)));
evalcond[4]=(((r00*x6912))+(((-1.0)*cj0*sj1*x6905))+(((-1.0)*cj0*x6910))+(((-1.0)*x6909*x6911))+(((-1.0)*r02*x6913)));
evalcond[5]=((((-1.0)*x6908*x6910))+(((-1.0)*sj0*sj1*x6905))+((r10*x6912))+(((-1.0)*r12*x6913))+(((-1.0)*x6906*x6911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6914=((1.0)*gconst134);
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x6914)))),-1);
if(!x6915.valid){
continue;
}
CheckValue<IkReal> x6916 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6914))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6915.value)))+(x6916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6917=IKsin(j4);
IkReal x6918=IKcos(j4);
IkReal x6919=((1.0)*cj2);
IkReal x6920=(gconst133*r11);
IkReal x6921=(gconst133*r21);
IkReal x6922=((1.0)*sj0);
IkReal x6923=(gconst133*r01);
IkReal x6924=(cj1*sj2);
IkReal x6925=((1.0)*x6918);
IkReal x6926=(gconst134*x6918);
IkReal x6927=((1.0)*x6917);
evalcond[0]=((((-1.0)*r22*x6925))+((x6917*x6921))+(((-1.0)*gconst134*r20*x6927)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x6927))+((x6917*x6920))+(((-1.0)*r12*x6925)));
evalcond[2]=((((-1.0)*r02*x6925))+(((-1.0)*gconst134*r00*x6927))+((x6917*x6923))+(((-1.0)*x6922)));
evalcond[3]=((((-1.0)*cj1*x6919))+((r20*x6926))+(((-1.0)*r22*x6927))+((sj1*sj2))+(((-1.0)*x6921*x6925)));
evalcond[4]=((((-1.0)*cj0*sj1*x6919))+(((-1.0)*r02*x6927))+((r00*x6926))+(((-1.0)*cj0*x6924))+(((-1.0)*x6923*x6925)));
evalcond[5]=(((r10*x6926))+(((-1.0)*sj0*sj1*x6919))+(((-1.0)*x6920*x6925))+(((-1.0)*r12*x6927))+(((-1.0)*x6922*x6924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6928=((-1.0)*r21);
IkReal x6930 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6930)==0){
continue;
}
IkReal x6929=pow(x6930,-0.5);
CheckValue<IkReal> x6931 = IKatan2WithCheck(IkReal(x6928),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6931.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6931.value))));
IkReal gconst136=(x6928*x6929);
IkReal gconst137=((1.0)*r20*x6929);
CheckValue<IkReal> x6932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6932.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6932.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6933=((-1.0)*r21);
CheckValue<IkReal> x6936 = IKatan2WithCheck(IkReal(x6933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6936.valid){
continue;
}
IkReal x6934=((1.0)*(x6936.value));
IkReal x6935=x6929;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6934)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6934)));
IkReal gconst136=(x6933*x6935);
IkReal gconst137=((1.0)*r20*x6935);
IkReal x6937=r22*r22;
IkReal x6938=((1.0)*x6937);
CheckValue<IkReal> x6942=IKPowWithIntegerCheck(((-1.0)+x6937),-1);
if(!x6942.valid){
continue;
}
IkReal x6939=x6942.value;
if((((1.0)+(((-1.0)*x6938)))) < -0.00001)
continue;
IkReal x6940=IKsqrt(((1.0)+(((-1.0)*x6938))));
IkReal x6941=(cj0*x6939*x6940);
j4eval[0]=((IKabs(((((-1.0)*x6938*x6941))+x6941)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6943=((-1.0)*r21);
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal(x6943),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
IkReal x6944=((1.0)*(x6946.value));
IkReal x6945=x6929;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6944)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6944)));
IkReal gconst136=(x6943*x6945);
IkReal gconst137=((1.0)*r20*x6945);
IkReal x6947=r22*r22;
IkReal x6948=((1.0)*x6947);
CheckValue<IkReal> x6952=IKPowWithIntegerCheck(((-1.0)+x6947),-1);
if(!x6952.valid){
continue;
}
IkReal x6949=x6952.value;
if((((1.0)+(((-1.0)*x6948)))) < -0.00001)
continue;
IkReal x6950=IKsqrt(((1.0)+(((-1.0)*x6948))));
IkReal x6951=(sj0*x6949*x6950);
j4eval[0]=((IKabs(((((-1.0)*x6948*x6951))+x6951)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6953=((-1.0)*r21);
CheckValue<IkReal> x6956 = IKatan2WithCheck(IkReal(x6953),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6956.valid){
continue;
}
IkReal x6954=((1.0)*(x6956.value));
IkReal x6955=x6929;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6954)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6954)));
IkReal gconst136=(x6953*x6955);
IkReal gconst137=((1.0)*r20*x6955);
IkReal x6957=r22*r22;
CheckValue<IkReal> x6960=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6957))),-1);
if(!x6960.valid){
continue;
}
IkReal x6958=x6960.value;
IkReal x6959=((1.0)*x6958);
j4eval[0]=IKsign(((((2.0)*x6958*(r20*r20)*(r21*r21)))+((x6959*(r21*r21*r21*r21)))+x6957+((x6959*(r20*r20*r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6961=(sj1*sj2);
IkReal x6962=(gconst136*r21);
IkReal x6963=(gconst137*r20);
IkReal x6964=(cj1*cj2);
CheckValue<IkReal> x6965 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6964))+((r22*x6961)))),IkReal((((x6963*x6964))+(((-1.0)*x6962*x6964))+((x6961*x6962))+(((-1.0)*x6961*x6963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6965.valid){
continue;
}
CheckValue<IkReal> x6966=IKPowWithIntegerCheck(IKsign(((x6962*x6962)+(r22*r22)+(x6963*x6963)+(((-2.0)*x6962*x6963)))),-1);
if(!x6966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6965.value)+(((1.5707963267949)*(x6966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6967=IKsin(j4);
IkReal x6968=IKcos(j4);
IkReal x6969=(gconst136*r01);
IkReal x6970=(gconst137*r10);
IkReal x6971=(gconst137*r20);
IkReal x6972=((1.0)*cj2);
IkReal x6973=(gconst136*r11);
IkReal x6974=(gconst136*r21);
IkReal x6975=(gconst137*r00);
IkReal x6976=((1.0)*sj0);
IkReal x6977=(cj1*sj2);
IkReal x6978=((1.0)*x6968);
IkReal x6979=((1.0)*x6967);
evalcond[0]=(((x6967*x6974))+(((-1.0)*x6971*x6979))+(((-1.0)*r22*x6978)));
evalcond[1]=((((-1.0)*x6970*x6979))+cj0+((x6967*x6973))+(((-1.0)*r12*x6978)));
evalcond[2]=((((-1.0)*r02*x6978))+((x6967*x6969))+(((-1.0)*x6975*x6979))+(((-1.0)*x6976)));
evalcond[3]=((((-1.0)*x6974*x6978))+((x6968*x6971))+((sj1*sj2))+(((-1.0)*r22*x6979))+(((-1.0)*cj1*x6972)));
evalcond[4]=((((-1.0)*cj0*sj1*x6972))+((x6968*x6975))+(((-1.0)*r02*x6979))+(((-1.0)*x6969*x6978))+(((-1.0)*cj0*x6977)));
evalcond[5]=(((x6968*x6970))+(((-1.0)*x6976*x6977))+(((-1.0)*r12*x6979))+(((-1.0)*sj0*sj1*x6972))+(((-1.0)*x6973*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6980=((1.0)*gconst137);
CheckValue<IkReal> x6981 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6980))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6981.valid){
continue;
}
CheckValue<IkReal> x6982=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x6980)))),-1);
if(!x6982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6981.value)+(((1.5707963267949)*(x6982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6983=IKsin(j4);
IkReal x6984=IKcos(j4);
IkReal x6985=(gconst136*r01);
IkReal x6986=(gconst137*r10);
IkReal x6987=(gconst137*r20);
IkReal x6988=((1.0)*cj2);
IkReal x6989=(gconst136*r11);
IkReal x6990=(gconst136*r21);
IkReal x6991=(gconst137*r00);
IkReal x6992=((1.0)*sj0);
IkReal x6993=(cj1*sj2);
IkReal x6994=((1.0)*x6984);
IkReal x6995=((1.0)*x6983);
evalcond[0]=(((x6983*x6990))+(((-1.0)*r22*x6994))+(((-1.0)*x6987*x6995)));
evalcond[1]=((((-1.0)*r12*x6994))+cj0+((x6983*x6989))+(((-1.0)*x6986*x6995)));
evalcond[2]=(((x6983*x6985))+(((-1.0)*r02*x6994))+(((-1.0)*x6991*x6995))+(((-1.0)*x6992)));
evalcond[3]=((((-1.0)*r22*x6995))+((sj1*sj2))+(((-1.0)*x6990*x6994))+(((-1.0)*cj1*x6988))+((x6984*x6987)));
evalcond[4]=((((-1.0)*x6985*x6994))+(((-1.0)*cj0*sj1*x6988))+(((-1.0)*r02*x6995))+(((-1.0)*cj0*x6993))+((x6984*x6991)));
evalcond[5]=((((-1.0)*r12*x6995))+(((-1.0)*x6992*x6993))+(((-1.0)*x6989*x6994))+((x6984*x6986))+(((-1.0)*sj0*sj1*x6988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6996=((1.0)*gconst137);
CheckValue<IkReal> x6997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x6996)))),-1);
if(!x6997.valid){
continue;
}
CheckValue<IkReal> x6998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x6996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6997.value)))+(x6998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6999=IKsin(j4);
IkReal x7000=IKcos(j4);
IkReal x7001=(gconst136*r01);
IkReal x7002=(gconst137*r10);
IkReal x7003=(gconst137*r20);
IkReal x7004=((1.0)*cj2);
IkReal x7005=(gconst136*r11);
IkReal x7006=(gconst136*r21);
IkReal x7007=(gconst137*r00);
IkReal x7008=((1.0)*sj0);
IkReal x7009=(cj1*sj2);
IkReal x7010=((1.0)*x7000);
IkReal x7011=((1.0)*x6999);
evalcond[0]=((((-1.0)*x7003*x7011))+(((-1.0)*r22*x7010))+((x6999*x7006)));
evalcond[1]=(cj0+(((-1.0)*r12*x7010))+(((-1.0)*x7002*x7011))+((x6999*x7005)));
evalcond[2]=((((-1.0)*x7008))+(((-1.0)*x7007*x7011))+(((-1.0)*r02*x7010))+((x6999*x7001)));
evalcond[3]=(((x7000*x7003))+(((-1.0)*r22*x7011))+(((-1.0)*cj1*x7004))+((sj1*sj2))+(((-1.0)*x7006*x7010)));
evalcond[4]=(((x7000*x7007))+(((-1.0)*x7001*x7010))+(((-1.0)*cj0*sj1*x7004))+(((-1.0)*r02*x7011))+(((-1.0)*cj0*x7009)));
evalcond[5]=(((x7000*x7002))+(((-1.0)*x7008*x7009))+(((-1.0)*sj0*sj1*x7004))+(((-1.0)*r12*x7011))+(((-1.0)*x7005*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7012=((-1.0)*r10);
IkReal x7014 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7014)==0){
continue;
}
IkReal x7013=pow(x7014,-0.5);
CheckValue<IkReal> x7015 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7012),IKFAST_ATAN2_MAGTHRESH);
if(!x7015.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7015.value));
IkReal gconst139=(r11*x7013);
IkReal gconst140=(x7012*x7013);
CheckValue<IkReal> x7016 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7016.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7016.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7017=((-1.0)*r10);
IkReal x7018=x7013;
CheckValue<IkReal> x7020 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7017),IKFAST_ATAN2_MAGTHRESH);
if(!x7020.valid){
continue;
}
IkReal x7019=((-1.0)*(x7020.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7019;
IkReal gconst138=x7019;
IkReal gconst139=(r11*x7018);
IkReal gconst140=(x7017*x7018);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7021=((1.0)*sj0);
IkReal x7022=((1.0)*gconst139);
CheckValue<IkReal> x7023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7021))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x7021))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7022))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7023.valid){
continue;
}
CheckValue<IkReal> x7024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7022)))),-1);
if(!x7024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7023.value)+(((1.5707963267949)*(x7024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7025=IKsin(j4);
IkReal x7026=IKcos(j4);
IkReal x7027=(gconst140*r00);
IkReal x7028=(gconst139*r11);
IkReal x7029=((1.0)*cj2);
IkReal x7030=(gconst139*r01);
IkReal x7031=(gconst139*r21);
IkReal x7032=((1.0)*sj0);
IkReal x7033=(cj1*sj2);
IkReal x7034=((1.0)*x7026);
IkReal x7035=((1.0)*x7025);
IkReal x7036=(gconst140*x7026);
evalcond[0]=((((-1.0)*r22*x7034))+(((-1.0)*gconst140*r20*x7035))+((x7025*x7031)));
evalcond[1]=(cj0+(((-1.0)*r12*x7034))+((x7025*x7028))+(((-1.0)*gconst140*r10*x7035)));
evalcond[2]=((((-1.0)*r02*x7034))+(((-1.0)*x7027*x7035))+((x7025*x7030))+(((-1.0)*x7032)));
evalcond[3]=((((-1.0)*x7031*x7034))+(((-1.0)*r22*x7035))+((sj1*sj2))+((r20*x7036))+(((-1.0)*cj1*x7029)));
evalcond[4]=(((x7026*x7027))+(((-1.0)*r02*x7035))+(((-1.0)*cj0*x7033))+(((-1.0)*cj0*sj1*x7029))+(((-1.0)*x7030*x7034)));
evalcond[5]=((((-1.0)*sj0*sj1*x7029))+(((-1.0)*r12*x7035))+((r10*x7036))+(((-1.0)*x7032*x7033))+(((-1.0)*x7028*x7034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7037=((1.0)*gconst140);
CheckValue<IkReal> x7038 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7038.valid){
continue;
}
CheckValue<IkReal> x7039=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7037))+(((-1.0)*gconst139*r00)))),-1);
if(!x7039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7038.value)+(((1.5707963267949)*(x7039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7040=IKsin(j4);
IkReal x7041=IKcos(j4);
IkReal x7042=(gconst140*r00);
IkReal x7043=(gconst139*r11);
IkReal x7044=((1.0)*cj2);
IkReal x7045=(gconst139*r01);
IkReal x7046=(gconst139*r21);
IkReal x7047=((1.0)*sj0);
IkReal x7048=(cj1*sj2);
IkReal x7049=((1.0)*x7041);
IkReal x7050=((1.0)*x7040);
IkReal x7051=(gconst140*x7041);
evalcond[0]=((((-1.0)*r22*x7049))+((x7040*x7046))+(((-1.0)*gconst140*r20*x7050)));
evalcond[1]=(cj0+(((-1.0)*r12*x7049))+(((-1.0)*gconst140*r10*x7050))+((x7040*x7043)));
evalcond[2]=((((-1.0)*x7047))+(((-1.0)*r02*x7049))+(((-1.0)*x7042*x7050))+((x7040*x7045)));
evalcond[3]=(((r20*x7051))+(((-1.0)*r22*x7050))+(((-1.0)*cj1*x7044))+((sj1*sj2))+(((-1.0)*x7046*x7049)));
evalcond[4]=(((x7041*x7042))+(((-1.0)*x7045*x7049))+(((-1.0)*cj0*x7048))+(((-1.0)*cj0*sj1*x7044))+(((-1.0)*r02*x7050)));
evalcond[5]=(((r10*x7051))+(((-1.0)*x7043*x7049))+(((-1.0)*sj0*sj1*x7044))+(((-1.0)*x7047*x7048))+(((-1.0)*r12*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7052=((-1.0)*r11);
IkReal x7054 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7054)==0){
continue;
}
IkReal x7053=pow(x7054,-0.5);
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal(x7052),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7055.value))));
IkReal gconst142=(x7052*x7053);
IkReal gconst143=((1.0)*r10*x7053);
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7056.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7057=((-1.0)*r11);
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal(x7057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
IkReal x7058=((1.0)*(x7060.value));
IkReal x7059=x7053;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7058)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7058)));
IkReal gconst142=(x7057*x7059);
IkReal gconst143=((1.0)*r10*x7059);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7061=((-1.0)*r11);
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(x7061),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
IkReal x7062=((1.0)*(x7064.value));
IkReal x7063=x7053;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7062)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7062)));
IkReal gconst142=(x7061*x7063);
IkReal gconst143=((1.0)*r10*x7063);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7065=((-1.0)*r11);
CheckValue<IkReal> x7068 = IKatan2WithCheck(IkReal(x7065),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7068.valid){
continue;
}
IkReal x7066=((1.0)*(x7068.value));
IkReal x7067=x7053;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7066)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7066)));
IkReal gconst142=(x7065*x7067);
IkReal gconst143=((1.0)*r10*x7067);
IkReal x7069=r12*r12;
IkReal x7070=((1.0)*sj0);
IkReal x7071=(cj0*r02);
IkReal x7072=x7053;
j4eval[0]=((IKabs(((((-1.0)*r12*x7070))+(((-1.0)*x7071)))))+(IKabs((((r12*x7071*x7072))+(((-1.0)*x7070*x7072))+((sj0*x7069*x7072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7073=((1.0)*sj0);
IkReal x7074=((1.0)*gconst142);
CheckValue<IkReal> x7075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7074))+(((-1.0)*gconst143*r21)))),-1);
if(!x7075.valid){
continue;
}
CheckValue<IkReal> x7076 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7073)))),IkReal(((((-1.0)*gconst142*r11*x7073))+(((-1.0)*cj0*r01*x7074))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7075.value)))+(x7076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7077=IKsin(j4);
IkReal x7078=IKcos(j4);
IkReal x7079=(gconst143*r20);
IkReal x7080=((1.0)*cj2);
IkReal x7081=((1.0)*sj0);
IkReal x7082=(cj1*sj2);
IkReal x7083=((1.0)*x7078);
IkReal x7084=((1.0)*x7077);
IkReal x7085=(gconst142*x7077);
IkReal x7086=(gconst143*x7078);
evalcond[0]=((((-1.0)*x7079*x7084))+((r21*x7085))+(((-1.0)*r22*x7083)));
evalcond[1]=((((-1.0)*gconst143*r10*x7084))+((r11*x7085))+cj0+(((-1.0)*r12*x7083)));
evalcond[2]=(((r01*x7085))+(((-1.0)*gconst143*r00*x7084))+(((-1.0)*r02*x7083))+(((-1.0)*x7081)));
evalcond[3]=((((-1.0)*cj1*x7080))+((sj1*sj2))+((x7078*x7079))+(((-1.0)*r22*x7084))+(((-1.0)*gconst142*r21*x7083)));
evalcond[4]=((((-1.0)*cj0*x7082))+((r00*x7086))+(((-1.0)*cj0*sj1*x7080))+(((-1.0)*r02*x7084))+(((-1.0)*gconst142*r01*x7083)));
evalcond[5]=((((-1.0)*sj0*sj1*x7080))+(((-1.0)*r12*x7084))+((r10*x7086))+(((-1.0)*gconst142*r11*x7083))+(((-1.0)*x7081*x7082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7087=((1.0)*gconst143);
CheckValue<IkReal> x7088 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7087))+((gconst142*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7088.valid){
continue;
}
CheckValue<IkReal> x7089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r10))+(((-1.0)*r11*x7087)))),-1);
if(!x7089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7088.value)+(((1.5707963267949)*(x7089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7090=IKsin(j4);
IkReal x7091=IKcos(j4);
IkReal x7092=(gconst143*r20);
IkReal x7093=((1.0)*cj2);
IkReal x7094=((1.0)*sj0);
IkReal x7095=(cj1*sj2);
IkReal x7096=((1.0)*x7091);
IkReal x7097=((1.0)*x7090);
IkReal x7098=(gconst142*x7090);
IkReal x7099=(gconst143*x7091);
evalcond[0]=(((r21*x7098))+(((-1.0)*x7092*x7097))+(((-1.0)*r22*x7096)));
evalcond[1]=(((r11*x7098))+cj0+(((-1.0)*gconst143*r10*x7097))+(((-1.0)*r12*x7096)));
evalcond[2]=((((-1.0)*x7094))+((r01*x7098))+(((-1.0)*gconst143*r00*x7097))+(((-1.0)*r02*x7096)));
evalcond[3]=((((-1.0)*cj1*x7093))+((sj1*sj2))+(((-1.0)*r22*x7097))+((x7091*x7092))+(((-1.0)*gconst142*r21*x7096)));
evalcond[4]=((((-1.0)*cj0*x7095))+((r00*x7099))+(((-1.0)*cj0*sj1*x7093))+(((-1.0)*r02*x7097))+(((-1.0)*gconst142*r01*x7096)));
evalcond[5]=((((-1.0)*x7094*x7095))+(((-1.0)*gconst142*r11*x7096))+(((-1.0)*sj0*sj1*x7093))+(((-1.0)*r12*x7097))+((r10*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7100=((1.0)*gconst143);
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7100)))),-1);
if(!x7101.valid){
continue;
}
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7101.value)))+(x7102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7103=IKsin(j4);
IkReal x7104=IKcos(j4);
IkReal x7105=(gconst143*r20);
IkReal x7106=((1.0)*cj2);
IkReal x7107=((1.0)*sj0);
IkReal x7108=(cj1*sj2);
IkReal x7109=((1.0)*x7104);
IkReal x7110=((1.0)*x7103);
IkReal x7111=(gconst142*x7103);
IkReal x7112=(gconst143*x7104);
evalcond[0]=(((r21*x7111))+(((-1.0)*r22*x7109))+(((-1.0)*x7105*x7110)));
evalcond[1]=(((r11*x7111))+cj0+(((-1.0)*r12*x7109))+(((-1.0)*gconst143*r10*x7110)));
evalcond[2]=((((-1.0)*x7107))+(((-1.0)*r02*x7109))+(((-1.0)*gconst143*r00*x7110))+((r01*x7111)));
evalcond[3]=((((-1.0)*gconst142*r21*x7109))+((sj1*sj2))+(((-1.0)*r22*x7110))+(((-1.0)*cj1*x7106))+((x7104*x7105)));
evalcond[4]=((((-1.0)*cj0*x7108))+(((-1.0)*gconst142*r01*x7109))+(((-1.0)*r02*x7110))+(((-1.0)*cj0*sj1*x7106))+((r00*x7112)));
evalcond[5]=((((-1.0)*gconst142*r11*x7109))+(((-1.0)*r12*x7110))+((r10*x7112))+(((-1.0)*sj0*sj1*x7106))+(((-1.0)*x7107*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7113=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7113;
j4eval[1]=IKsign(x7113);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7114=((1.0)*cj5);
IkReal x7115=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7114)));
j4eval[0]=x7115;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7114))))));
j4eval[2]=IKsign(x7115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7116=cj5*cj5;
IkReal x7117=r11*r11;
IkReal x7118=(r11*sj5);
IkReal x7119=(cj5*r10);
IkReal x7120=(x7117+(r12*r12)+(((-1.0)*x7116*x7117))+(((-2.0)*x7118*x7119))+((x7116*(r10*r10))));
j4eval[0]=x7120;
j4eval[1]=IKsign(x7120);
j4eval[2]=((IKabs(r12))+(IKabs((x7119+(((-1.0)*x7118))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7121=cj5*cj5;
IkReal x7122=r11*r11;
IkReal x7123=(cj5*r10);
IkReal x7124=(r11*sj5);
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal((x7123+(((-1.0)*x7124)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign((x7122+(r12*r12)+(((-2.0)*x7123*x7124))+(((-1.0)*x7121*x7122))+((x7121*(r10*r10))))),-1);
if(!x7126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7125.value)+(((1.5707963267949)*(x7126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7127=IKsin(j4);
IkReal x7128=IKcos(j4);
IkReal x7129=(cj5*r10);
IkReal x7130=(r01*sj5);
IkReal x7131=((1.0)*cj2);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r20);
IkReal x7134=((1.0)*x7128);
IkReal x7135=((1.0)*x7127);
IkReal x7136=(sj5*x7127);
evalcond[0]=(((r21*x7136))+(((-1.0)*r22*x7134))+(((-1.0)*x7133*x7135)));
evalcond[1]=((((-1.0)*x7132*x7135))+((x7127*x7130))+(((-1.0)*r02*x7134)));
evalcond[2]=((((-1.0)*r12*x7135))+((x7128*x7129))+(((-1.0)*r11*sj5*x7134)));
evalcond[3]=((1.0)+((r11*x7136))+(((-1.0)*r12*x7134))+(((-1.0)*x7129*x7135)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x7135))+(((-1.0)*cj1*x7131))+(((-1.0)*r21*sj5*x7134))+((x7128*x7133)));
evalcond[5]=((((-1.0)*x7130*x7134))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7131))+((x7128*x7132))+(((-1.0)*r02*x7135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7137=((1.0)*cj5);
CheckValue<IkReal> x7138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7137))+(((-1.0)*r00*sj5)))),-1);
if(!x7138.valid){
continue;
}
CheckValue<IkReal> x7139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7138.value)))+(x7139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7140=IKsin(j4);
IkReal x7141=IKcos(j4);
IkReal x7142=(cj5*r10);
IkReal x7143=(r01*sj5);
IkReal x7144=((1.0)*cj2);
IkReal x7145=(cj5*r00);
IkReal x7146=(cj5*r20);
IkReal x7147=((1.0)*x7141);
IkReal x7148=((1.0)*x7140);
IkReal x7149=(sj5*x7140);
evalcond[0]=((((-1.0)*r22*x7147))+(((-1.0)*x7146*x7148))+((r21*x7149)));
evalcond[1]=(((x7140*x7143))+(((-1.0)*x7145*x7148))+(((-1.0)*r02*x7147)));
evalcond[2]=(((x7141*x7142))+(((-1.0)*r12*x7148))+(((-1.0)*r11*sj5*x7147)));
evalcond[3]=((1.0)+(((-1.0)*x7142*x7148))+(((-1.0)*r12*x7147))+((r11*x7149)));
evalcond[4]=(((x7141*x7146))+(((-1.0)*r22*x7148))+(((-1.0)*r21*sj5*x7147))+((sj1*sj2))+(((-1.0)*cj1*x7144)));
evalcond[5]=(((x7141*x7145))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7144))+(((-1.0)*r02*x7148))+(((-1.0)*x7143*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7150=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7150.valid){
continue;
}
CheckValue<IkReal> x7151 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7150.value)))+(x7151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7152=IKsin(j4);
IkReal x7153=IKcos(j4);
IkReal x7154=(cj5*r10);
IkReal x7155=(r01*sj5);
IkReal x7156=((1.0)*cj2);
IkReal x7157=(cj5*r00);
IkReal x7158=(cj5*r20);
IkReal x7159=((1.0)*x7153);
IkReal x7160=((1.0)*x7152);
IkReal x7161=(sj5*x7152);
evalcond[0]=((((-1.0)*r22*x7159))+(((-1.0)*x7158*x7160))+((r21*x7161)));
evalcond[1]=((((-1.0)*x7157*x7160))+(((-1.0)*r02*x7159))+((x7152*x7155)));
evalcond[2]=((((-1.0)*r11*sj5*x7159))+((x7153*x7154))+(((-1.0)*r12*x7160)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7159))+((r11*x7161))+(((-1.0)*x7154*x7160)));
evalcond[4]=((((-1.0)*r22*x7160))+((sj1*sj2))+((x7153*x7158))+(((-1.0)*r21*sj5*x7159))+(((-1.0)*cj1*x7156)));
evalcond[5]=((((-1.0)*sj1*x7156))+(((-1.0)*r02*x7160))+(((-1.0)*x7155*x7159))+(((-1.0)*cj1*sj2))+((x7153*x7157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7162=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7162;
j4eval[1]=IKsign(x7162);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7163=((1.0)*cj5);
IkReal x7164=((((-1.0)*r20*sj5))+(((-1.0)*r21*x7163)));
j4eval[0]=x7164;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x7163)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7165=cj5*cj5;
IkReal x7166=r11*r11;
IkReal x7167=(cj5*r10);
IkReal x7168=(r11*sj5);
IkReal x7169=((((-1.0)*x7165*(r10*r10)))+((x7165*x7166))+(((2.0)*x7167*x7168))+(((-1.0)*(r12*r12)))+(((-1.0)*x7166)));
j4eval[0]=x7169;
j4eval[1]=((IKabs((x7167+(((-1.0)*x7168)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7170=cj5*cj5;
IkReal x7171=r11*r11;
IkReal x7172=(cj5*r10);
IkReal x7173=(r11*sj5);
CheckValue<IkReal> x7174=IKPowWithIntegerCheck(IKsign(((((2.0)*x7172*x7173))+(((-1.0)*x7171))+((x7170*x7171))+(((-1.0)*x7170*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal((x7172+(((-1.0)*x7173)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7174.value)))+(x7175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKsin(j4);
IkReal x7177=IKcos(j4);
IkReal x7178=(cj5*r10);
IkReal x7179=(r01*sj5);
IkReal x7180=(cj5*r00);
IkReal x7181=(cj5*r20);
IkReal x7182=((1.0)*x7177);
IkReal x7183=((1.0)*x7176);
IkReal x7184=(sj5*x7176);
evalcond[0]=(((r21*x7184))+(((-1.0)*x7181*x7183))+(((-1.0)*r22*x7182)));
evalcond[1]=(((x7176*x7179))+(((-1.0)*r02*x7182))+(((-1.0)*x7180*x7183)));
evalcond[2]=(((x7177*x7178))+(((-1.0)*r11*sj5*x7182))+(((-1.0)*r12*x7183)));
evalcond[3]=((-1.0)+(((-1.0)*x7178*x7183))+((r11*x7184))+(((-1.0)*r12*x7182)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7179*x7182))+(((-1.0)*r02*x7183))+((x7177*x7180)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7182))+(((-1.0)*r22*x7183))+((x7177*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7185=((1.0)*cj5);
CheckValue<IkReal> x7186 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7185))+(((-1.0)*r20*sj5)))),-1);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7186.value)+(((1.5707963267949)*(x7187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=(cj5*r10);
IkReal x7191=(r01*sj5);
IkReal x7192=(cj5*r00);
IkReal x7193=(cj5*r20);
IkReal x7194=((1.0)*x7189);
IkReal x7195=((1.0)*x7188);
IkReal x7196=(sj5*x7188);
evalcond[0]=((((-1.0)*x7193*x7195))+((r21*x7196))+(((-1.0)*r22*x7194)));
evalcond[1]=(((x7188*x7191))+(((-1.0)*r02*x7194))+(((-1.0)*x7192*x7195)));
evalcond[2]=((((-1.0)*r11*sj5*x7194))+((x7189*x7190))+(((-1.0)*r12*x7195)));
evalcond[3]=((-1.0)+((r11*x7196))+(((-1.0)*x7190*x7195))+(((-1.0)*r12*x7194)));
evalcond[4]=(((cj2*sj1))+((x7189*x7192))+((cj1*sj2))+(((-1.0)*x7191*x7194))+(((-1.0)*r02*x7195)));
evalcond[5]=(((x7189*x7193))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7194))+(((-1.0)*r22*x7195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7197.value)+(((1.5707963267949)*(x7198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=(cj5*r10);
IkReal x7202=(r01*sj5);
IkReal x7203=(cj5*r00);
IkReal x7204=(cj5*r20);
IkReal x7205=((1.0)*x7200);
IkReal x7206=((1.0)*x7199);
IkReal x7207=(sj5*x7199);
evalcond[0]=(((r21*x7207))+(((-1.0)*x7204*x7206))+(((-1.0)*r22*x7205)));
evalcond[1]=(((x7199*x7202))+(((-1.0)*x7203*x7206))+(((-1.0)*r02*x7205)));
evalcond[2]=(((x7200*x7201))+(((-1.0)*r12*x7206))+(((-1.0)*r11*sj5*x7205)));
evalcond[3]=((-1.0)+((r11*x7207))+(((-1.0)*x7201*x7206))+(((-1.0)*r12*x7205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7200*x7203))+(((-1.0)*x7202*x7205))+(((-1.0)*r02*x7206)));
evalcond[5]=((((-1.0)*r21*sj5*x7205))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7200*x7204))+(((-1.0)*r22*x7206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7208=((-1.0)*r00);
IkReal x7210 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7210)==0){
continue;
}
IkReal x7209=pow(x7210,-0.5);
CheckValue<IkReal> x7211 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7208),IKFAST_ATAN2_MAGTHRESH);
if(!x7211.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7211.value));
IkReal gconst145=(r01*x7209);
IkReal gconst146=(x7208*x7209);
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7212.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7213=((-1.0)*r00);
IkReal x7214=x7209;
CheckValue<IkReal> x7216 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7213),IKFAST_ATAN2_MAGTHRESH);
if(!x7216.valid){
continue;
}
IkReal x7215=((-1.0)*(x7216.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7215;
IkReal gconst144=x7215;
IkReal gconst145=(r01*x7214);
IkReal gconst146=(x7213*x7214);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7217=((1.0)*sj0);
IkReal x7218=((1.0)*gconst145);
CheckValue<IkReal> x7219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7218)))),-1);
if(!x7219.valid){
continue;
}
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7217)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7217))+(((-1.0)*cj0*r01*x7218))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7219.value)))+(x7220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7221=IKsin(j4);
IkReal x7222=IKcos(j4);
IkReal x7223=(gconst146*r10);
IkReal x7224=((1.0)*cj2);
IkReal x7225=(gconst146*r20);
IkReal x7226=((1.0)*sj0);
IkReal x7227=(gconst146*r00);
IkReal x7228=(cj1*sj2);
IkReal x7229=((1.0)*x7222);
IkReal x7230=((1.0)*x7221);
IkReal x7231=(gconst145*x7221);
evalcond[0]=((((-1.0)*x7225*x7230))+(((-1.0)*r22*x7229))+((r21*x7231)));
evalcond[1]=(cj0+(((-1.0)*x7223*x7230))+(((-1.0)*r12*x7229))+((r11*x7231)));
evalcond[2]=((((-1.0)*r02*x7229))+((r01*x7231))+(((-1.0)*x7227*x7230))+(((-1.0)*x7226)));
evalcond[3]=((((-1.0)*cj1*x7224))+((sj1*sj2))+((x7222*x7225))+(((-1.0)*gconst145*r21*x7229))+(((-1.0)*r22*x7230)));
evalcond[4]=(((x7222*x7227))+(((-1.0)*cj0*x7228))+(((-1.0)*gconst145*r01*x7229))+(((-1.0)*cj0*sj1*x7224))+(((-1.0)*r02*x7230)));
evalcond[5]=((((-1.0)*gconst145*r11*x7229))+((x7222*x7223))+(((-1.0)*sj0*sj1*x7224))+(((-1.0)*r12*x7230))+(((-1.0)*x7226*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7232=((1.0)*gconst146);
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7232)))),-1);
if(!x7233.valid){
continue;
}
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7232))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7233.value)))+(x7234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7235=IKsin(j4);
IkReal x7236=IKcos(j4);
IkReal x7237=(gconst146*r10);
IkReal x7238=((1.0)*cj2);
IkReal x7239=(gconst146*r20);
IkReal x7240=((1.0)*sj0);
IkReal x7241=(gconst146*r00);
IkReal x7242=(cj1*sj2);
IkReal x7243=((1.0)*x7236);
IkReal x7244=((1.0)*x7235);
IkReal x7245=(gconst145*x7235);
evalcond[0]=((((-1.0)*r22*x7243))+(((-1.0)*x7239*x7244))+((r21*x7245)));
evalcond[1]=((((-1.0)*r12*x7243))+cj0+((r11*x7245))+(((-1.0)*x7237*x7244)));
evalcond[2]=((((-1.0)*r02*x7243))+((r01*x7245))+(((-1.0)*x7241*x7244))+(((-1.0)*x7240)));
evalcond[3]=((((-1.0)*gconst145*r21*x7243))+((x7236*x7239))+(((-1.0)*cj1*x7238))+(((-1.0)*r22*x7244))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj1*x7238))+((x7236*x7241))+(((-1.0)*r02*x7244))+(((-1.0)*cj0*x7242))+(((-1.0)*gconst145*r01*x7243)));
evalcond[5]=((((-1.0)*gconst145*r11*x7243))+(((-1.0)*r12*x7244))+((x7236*x7237))+(((-1.0)*x7240*x7242))+(((-1.0)*sj0*sj1*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7246=((-1.0)*r01);
IkReal x7248 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7248)==0){
continue;
}
IkReal x7247=pow(x7248,-0.5);
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal(x7246),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7249.value))));
IkReal gconst148=(x7246*x7247);
IkReal gconst149=((1.0)*r00*x7247);
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7251=((-1.0)*r01);
CheckValue<IkReal> x7254 = IKatan2WithCheck(IkReal(x7251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7254.valid){
continue;
}
IkReal x7252=((1.0)*(x7254.value));
IkReal x7253=x7247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7252)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7252)));
IkReal gconst148=(x7251*x7253);
IkReal gconst149=((1.0)*r00*x7253);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7255=((-1.0)*r01);
CheckValue<IkReal> x7258 = IKatan2WithCheck(IkReal(x7255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7258.valid){
continue;
}
IkReal x7256=((1.0)*(x7258.value));
IkReal x7257=x7247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7256)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7256)));
IkReal gconst148=(x7255*x7257);
IkReal gconst149=((1.0)*r00*x7257);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7259=((-1.0)*r01);
CheckValue<IkReal> x7262 = IKatan2WithCheck(IkReal(x7259),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7262.valid){
continue;
}
IkReal x7260=((1.0)*(x7262.value));
IkReal x7261=x7247;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7260)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7260)));
IkReal gconst148=(x7259*x7261);
IkReal gconst149=((1.0)*r00*x7261);
IkReal x7263=r02*r02;
IkReal x7264=(r12*sj0);
IkReal x7265=((1.0)*cj0);
IkReal x7266=x7247;
j4eval[0]=((IKabs(((((-1.0)*x7264))+(((-1.0)*r02*x7265)))))+(IKabs((((r02*x7264*x7266))+((cj0*x7263*x7266))+(((-1.0)*x7265*x7266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7267=((1.0)*sj0);
IkReal x7268=((1.0)*gconst148);
CheckValue<IkReal> x7269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7268))+(((-1.0)*gconst149*r21)))),-1);
if(!x7269.valid){
continue;
}
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7267)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7268))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7269.value)))+(x7270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7271=IKsin(j4);
IkReal x7272=IKcos(j4);
IkReal x7273=(gconst148*r11);
IkReal x7274=((1.0)*cj2);
IkReal x7275=((1.0)*sj0);
IkReal x7276=(cj1*sj2);
IkReal x7277=((1.0)*x7272);
IkReal x7278=(gconst149*x7272);
IkReal x7279=(gconst148*x7271);
IkReal x7280=((1.0)*x7271);
evalcond[0]=((((-1.0)*gconst149*r20*x7280))+(((-1.0)*r22*x7277))+((r21*x7279)));
evalcond[1]=(((x7271*x7273))+(((-1.0)*gconst149*r10*x7280))+cj0+(((-1.0)*r12*x7277)));
evalcond[2]=((((-1.0)*r02*x7277))+((r01*x7279))+(((-1.0)*gconst149*r00*x7280))+(((-1.0)*x7275)));
evalcond[3]=(((r20*x7278))+((sj1*sj2))+(((-1.0)*cj1*x7274))+(((-1.0)*gconst148*r21*x7277))+(((-1.0)*r22*x7280)));
evalcond[4]=((((-1.0)*cj0*x7276))+(((-1.0)*cj0*sj1*x7274))+((r00*x7278))+(((-1.0)*r02*x7280))+(((-1.0)*gconst148*r01*x7277)));
evalcond[5]=((((-1.0)*x7273*x7277))+((r10*x7278))+(((-1.0)*r12*x7280))+(((-1.0)*sj0*sj1*x7274))+(((-1.0)*x7275*x7276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7281=((1.0)*gconst149);
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7281))+(((-1.0)*gconst148*r10)))),-1);
if(!x7282.valid){
continue;
}
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7281))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7282.value)))+(x7283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7284=IKsin(j4);
IkReal x7285=IKcos(j4);
IkReal x7286=(gconst148*r11);
IkReal x7287=((1.0)*cj2);
IkReal x7288=((1.0)*sj0);
IkReal x7289=(cj1*sj2);
IkReal x7290=((1.0)*x7285);
IkReal x7291=(gconst149*x7285);
IkReal x7292=(gconst148*x7284);
IkReal x7293=((1.0)*x7284);
evalcond[0]=((((-1.0)*r22*x7290))+((r21*x7292))+(((-1.0)*gconst149*r20*x7293)));
evalcond[1]=(cj0+((x7284*x7286))+(((-1.0)*r12*x7290))+(((-1.0)*gconst149*r10*x7293)));
evalcond[2]=((((-1.0)*x7288))+(((-1.0)*r02*x7290))+(((-1.0)*gconst149*r00*x7293))+((r01*x7292)));
evalcond[3]=((((-1.0)*cj1*x7287))+(((-1.0)*r22*x7293))+((sj1*sj2))+(((-1.0)*gconst148*r21*x7290))+((r20*x7291)));
evalcond[4]=((((-1.0)*gconst148*r01*x7290))+(((-1.0)*r02*x7293))+((r00*x7291))+(((-1.0)*cj0*sj1*x7287))+(((-1.0)*cj0*x7289)));
evalcond[5]=((((-1.0)*x7286*x7290))+(((-1.0)*x7288*x7289))+((r10*x7291))+(((-1.0)*r12*x7293))+(((-1.0)*sj0*sj1*x7287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7294=((1.0)*gconst149);
CheckValue<IkReal> x7295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7294))+(((-1.0)*gconst148*r00)))),-1);
if(!x7295.valid){
continue;
}
CheckValue<IkReal> x7296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7295.value)))+(x7296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7297=IKsin(j4);
IkReal x7298=IKcos(j4);
IkReal x7299=(gconst148*r11);
IkReal x7300=((1.0)*cj2);
IkReal x7301=((1.0)*sj0);
IkReal x7302=(cj1*sj2);
IkReal x7303=((1.0)*x7298);
IkReal x7304=(gconst149*x7298);
IkReal x7305=(gconst148*x7297);
IkReal x7306=((1.0)*x7297);
evalcond[0]=((((-1.0)*gconst149*r20*x7306))+((r21*x7305))+(((-1.0)*r22*x7303)));
evalcond[1]=((((-1.0)*gconst149*r10*x7306))+((x7297*x7299))+cj0+(((-1.0)*r12*x7303)));
evalcond[2]=((((-1.0)*r02*x7303))+(((-1.0)*gconst149*r00*x7306))+(((-1.0)*x7301))+((r01*x7305)));
evalcond[3]=((((-1.0)*gconst148*r21*x7303))+((sj1*sj2))+((r20*x7304))+(((-1.0)*r22*x7306))+(((-1.0)*cj1*x7300)));
evalcond[4]=((((-1.0)*cj0*x7302))+(((-1.0)*r02*x7306))+(((-1.0)*gconst148*r01*x7303))+(((-1.0)*cj0*sj1*x7300))+((r00*x7304)));
evalcond[5]=((((-1.0)*sj0*sj1*x7300))+((r10*x7304))+(((-1.0)*x7301*x7302))+(((-1.0)*r12*x7306))+(((-1.0)*x7299*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7307=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7307;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7308=((1.0)*cj5);
IkReal x7309=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7308)));
j4eval[0]=x7309;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7308))+((r21*sj5))))));
j4eval[2]=IKsign(x7309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7310=cj5*cj5;
IkReal x7311=r01*r01;
IkReal x7312=(r01*sj5);
IkReal x7313=(cj5*r00);
IkReal x7314=((((-1.0)*x7311))+(((2.0)*x7312*x7313))+(((-1.0)*(r02*r02)))+((x7310*x7311))+(((-1.0)*x7310*(r00*r00))));
j4eval[0]=x7314;
j4eval[1]=IKsign(x7314);
j4eval[2]=((IKabs(r02))+(IKabs((x7313+(((-1.0)*x7312))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7315=cj5*cj5;
IkReal x7316=r01*r01;
IkReal x7317=(r01*sj5);
IkReal x7318=(cj5*r00);
CheckValue<IkReal> x7319 = IKatan2WithCheck(IkReal((x7318+(((-1.0)*x7317)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7319.valid){
continue;
}
CheckValue<IkReal> x7320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7316))+(((-1.0)*(r02*r02)))+(((2.0)*x7317*x7318))+((x7315*x7316))+(((-1.0)*x7315*(r00*r00))))),-1);
if(!x7320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7319.value)+(((1.5707963267949)*(x7320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7321=IKsin(j4);
IkReal x7322=IKcos(j4);
IkReal x7323=(cj5*r10);
IkReal x7324=(r01*sj5);
IkReal x7325=((1.0)*cj2);
IkReal x7326=(cj5*r00);
IkReal x7327=(cj5*r20);
IkReal x7328=((1.0)*x7322);
IkReal x7329=((1.0)*x7321);
IkReal x7330=(sj5*x7321);
evalcond[0]=((((-1.0)*r22*x7328))+((r21*x7330))+(((-1.0)*x7327*x7329)));
evalcond[1]=((((-1.0)*x7323*x7329))+(((-1.0)*r12*x7328))+((r11*x7330)));
evalcond[2]=((((-1.0)*x7324*x7328))+((x7322*x7326))+(((-1.0)*r02*x7329)));
evalcond[3]=((-1.0)+(((-1.0)*x7326*x7329))+((x7321*x7324))+(((-1.0)*r02*x7328)));
evalcond[4]=((((-1.0)*r22*x7329))+((sj1*sj2))+(((-1.0)*r21*sj5*x7328))+((x7322*x7327))+(((-1.0)*cj1*x7325)));
evalcond[5]=((((-1.0)*r11*sj5*x7328))+(((-1.0)*cj1*sj2))+((x7322*x7323))+(((-1.0)*r12*x7329))+(((-1.0)*sj1*x7325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7331=((1.0)*cj5);
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7331))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
CheckValue<IkReal> x7333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7331)))),-1);
if(!x7333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7332.value)+(((1.5707963267949)*(x7333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7334=IKsin(j4);
IkReal x7335=IKcos(j4);
IkReal x7336=(cj5*r10);
IkReal x7337=(r01*sj5);
IkReal x7338=((1.0)*cj2);
IkReal x7339=(cj5*r00);
IkReal x7340=(cj5*r20);
IkReal x7341=((1.0)*x7335);
IkReal x7342=((1.0)*x7334);
IkReal x7343=(sj5*x7334);
evalcond[0]=((((-1.0)*r22*x7341))+(((-1.0)*x7340*x7342))+((r21*x7343)));
evalcond[1]=((((-1.0)*r12*x7341))+((r11*x7343))+(((-1.0)*x7336*x7342)));
evalcond[2]=((((-1.0)*x7337*x7341))+((x7335*x7339))+(((-1.0)*r02*x7342)));
evalcond[3]=((-1.0)+((x7334*x7337))+(((-1.0)*r02*x7341))+(((-1.0)*x7339*x7342)));
evalcond[4]=((((-1.0)*r22*x7342))+((sj1*sj2))+((x7335*x7340))+(((-1.0)*r21*sj5*x7341))+(((-1.0)*cj1*x7338)));
evalcond[5]=((((-1.0)*r11*sj5*x7341))+(((-1.0)*r12*x7342))+((x7335*x7336))+(((-1.0)*sj1*x7338))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7344=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7344.valid){
continue;
}
CheckValue<IkReal> x7345 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7344.value)))+(x7345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7346=IKsin(j4);
IkReal x7347=IKcos(j4);
IkReal x7348=(cj5*r10);
IkReal x7349=(r01*sj5);
IkReal x7350=((1.0)*cj2);
IkReal x7351=(cj5*r00);
IkReal x7352=(cj5*r20);
IkReal x7353=((1.0)*x7347);
IkReal x7354=((1.0)*x7346);
IkReal x7355=(sj5*x7346);
evalcond[0]=((((-1.0)*r22*x7353))+(((-1.0)*x7352*x7354))+((r21*x7355)));
evalcond[1]=((((-1.0)*r12*x7353))+((r11*x7355))+(((-1.0)*x7348*x7354)));
evalcond[2]=(((x7347*x7351))+(((-1.0)*x7349*x7353))+(((-1.0)*r02*x7354)));
evalcond[3]=((-1.0)+(((-1.0)*x7351*x7354))+((x7346*x7349))+(((-1.0)*r02*x7353)));
evalcond[4]=((((-1.0)*r22*x7354))+((x7347*x7352))+((sj1*sj2))+(((-1.0)*cj1*x7350))+(((-1.0)*r21*sj5*x7353)));
evalcond[5]=((((-1.0)*r11*sj5*x7353))+(((-1.0)*r12*x7354))+((x7347*x7348))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7356=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7356;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7357=((1.0)*cj5);
IkReal x7358=((((-1.0)*r21*x7357))+(((-1.0)*r20*sj5)));
j4eval[0]=x7358;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7357))+((r11*sj5))))));
j4eval[2]=IKsign(x7358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7359=cj5*cj5;
IkReal x7360=r01*r01;
IkReal x7361=(cj5*r00);
IkReal x7362=(r01*sj5);
IkReal x7363=(x7360+(((-1.0)*x7359*x7360))+(((-2.0)*x7361*x7362))+((x7359*(r00*r00)))+(r02*r02));
j4eval[0]=x7363;
j4eval[1]=((IKabs(r02))+(IKabs((x7361+(((-1.0)*x7362))))));
j4eval[2]=IKsign(x7363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7364=cj5*cj5;
IkReal x7365=r01*r01;
IkReal x7366=(r01*sj5);
IkReal x7367=(cj5*r00);
CheckValue<IkReal> x7368 = IKatan2WithCheck(IkReal((x7367+(((-1.0)*x7366)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7368.valid){
continue;
}
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7366*x7367))+x7365+((x7364*(r00*r00)))+(((-1.0)*x7364*x7365))+(r02*r02))),-1);
if(!x7369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7368.value)+(((1.5707963267949)*(x7369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7370=IKsin(j4);
IkReal x7371=IKcos(j4);
IkReal x7372=(cj5*r10);
IkReal x7373=(r01*sj5);
IkReal x7374=(cj5*r00);
IkReal x7375=(cj5*r20);
IkReal x7376=((1.0)*x7371);
IkReal x7377=((1.0)*x7370);
IkReal x7378=(sj5*x7370);
evalcond[0]=((((-1.0)*r22*x7376))+(((-1.0)*x7375*x7377))+((r21*x7378)));
evalcond[1]=(((r11*x7378))+(((-1.0)*r12*x7376))+(((-1.0)*x7372*x7377)));
evalcond[2]=((((-1.0)*r02*x7377))+(((-1.0)*x7373*x7376))+((x7371*x7374)));
evalcond[3]=((1.0)+(((-1.0)*x7374*x7377))+((x7370*x7373))+(((-1.0)*r02*x7376)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7376))+((cj1*sj2))+(((-1.0)*r12*x7377))+((x7371*x7372)));
evalcond[5]=((((-1.0)*r22*x7377))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7371*x7375))+(((-1.0)*r21*sj5*x7376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7379=((1.0)*cj5);
CheckValue<IkReal> x7380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7379))+(((-1.0)*r20*sj5)))),-1);
if(!x7380.valid){
continue;
}
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x7379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7380.value)))+(x7381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7382=IKsin(j4);
IkReal x7383=IKcos(j4);
IkReal x7384=(cj5*r10);
IkReal x7385=(r01*sj5);
IkReal x7386=(cj5*r00);
IkReal x7387=(cj5*r20);
IkReal x7388=((1.0)*x7383);
IkReal x7389=((1.0)*x7382);
IkReal x7390=(sj5*x7382);
evalcond[0]=((((-1.0)*r22*x7388))+((r21*x7390))+(((-1.0)*x7387*x7389)));
evalcond[1]=((((-1.0)*x7384*x7389))+((r11*x7390))+(((-1.0)*r12*x7388)));
evalcond[2]=((((-1.0)*r02*x7389))+(((-1.0)*x7385*x7388))+((x7383*x7386)));
evalcond[3]=((1.0)+(((-1.0)*x7386*x7389))+(((-1.0)*r02*x7388))+((x7382*x7385)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x7389))+((x7383*x7384))+(((-1.0)*r11*sj5*x7388)));
evalcond[5]=((((-1.0)*r22*x7389))+(((-1.0)*cj1*cj2))+(((-1.0)*r21*sj5*x7388))+((sj1*sj2))+((x7383*x7387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7391.value)+(((1.5707963267949)*(x7392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7393=IKsin(j4);
IkReal x7394=IKcos(j4);
IkReal x7395=(cj5*r10);
IkReal x7396=(r01*sj5);
IkReal x7397=(cj5*r00);
IkReal x7398=(cj5*r20);
IkReal x7399=((1.0)*x7394);
IkReal x7400=((1.0)*x7393);
IkReal x7401=(sj5*x7393);
evalcond[0]=((((-1.0)*r22*x7399))+((r21*x7401))+(((-1.0)*x7398*x7400)));
evalcond[1]=(((r11*x7401))+(((-1.0)*r12*x7399))+(((-1.0)*x7395*x7400)));
evalcond[2]=((((-1.0)*x7396*x7399))+(((-1.0)*r02*x7400))+((x7394*x7397)));
evalcond[3]=((1.0)+(((-1.0)*x7397*x7400))+(((-1.0)*r02*x7399))+((x7393*x7396)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x7400))+((cj1*sj2))+(((-1.0)*r11*sj5*x7399))+((x7394*x7395)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7400))+(((-1.0)*r21*sj5*x7399))+((x7394*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7402=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7402);
rxp1_1=(px*r21);
rxp1_2=(r11*x7402);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7403=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7403);
rxp1_1=(px*r21);
rxp1_2=(r11*x7403);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7404=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7404);
rxp1_1=(px*r21);
rxp1_2=(r11*x7404);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7407=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7407.valid){
continue;
}
IkReal x7405=x7407.value;
IkReal x7406=(sj0*x7405);
cj4array[0]=(((cj2*sj1*x7406))+((cj1*sj2*x7406)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7408=IKsin(j4);
IkReal x7409=IKcos(j4);
IkReal x7410=(cj5*r20);
IkReal x7411=(r21*sj5);
IkReal x7412=((1.0)*x7408);
IkReal x7413=((1.0)*x7409);
evalcond[0]=((-1.0)*r02*x7408);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x7413)));
evalcond[2]=(((x7408*x7411))+(((-1.0)*x7410*x7412)));
evalcond[3]=((((-1.0)*cj5*r10*x7412))+((r11*sj5*x7408)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7411*x7413))+((x7409*x7410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7415=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7415.valid){
continue;
}
IkReal x7414=x7415.value;
cj4array[0]=(((cj1*cj2*x7414))+(((-1.0)*sj1*sj2*x7414)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=(r11*sj5);
IkReal x7419=((1.0)*sj0);
IkReal x7420=((1.0)*x7417);
IkReal x7421=((1.0)*cj5*x7416);
evalcond[0]=((-1.0)*r02*x7416);
evalcond[1]=((((-1.0)*r02*x7420))+(((-1.0)*x7419)));
evalcond[2]=(((r21*sj5*x7416))+(((-1.0)*r20*x7421)));
evalcond[3]=((((-1.0)*r10*x7421))+((x7416*x7418)));
evalcond[4]=((((-1.0)*x7418*x7420))+(((-1.0)*cj2*sj1*x7419))+((cj5*r10*x7417))+(((-1.0)*cj1*sj2*x7419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(r02,-1);
if(!x7422.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7422.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7423=IKsin(j4);
IkReal x7424=IKcos(j4);
IkReal x7425=((1.0)*sj0);
IkReal x7426=(cj5*x7424);
IkReal x7427=(sj5*x7423);
IkReal x7428=((1.0)*sj5*x7424);
IkReal x7429=((1.0)*cj5*x7423);
evalcond[0]=((-1.0)*r02*x7423);
evalcond[1]=(((r21*x7427))+(((-1.0)*r20*x7429)));
evalcond[2]=((((-1.0)*r10*x7429))+((r11*x7427)));
evalcond[3]=(((r20*x7426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x7428)));
evalcond[4]=((((-1.0)*r11*x7428))+((r10*x7426))+(((-1.0)*cj2*sj1*x7425))+(((-1.0)*cj1*sj2*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7430=((1.0)*sj0);
IkReal x7431=((1.0)*cj0);
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7431))+(((-1.0)*r12*x7430)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7430))+(((-1.0)*r01*sj5*x7431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
CheckValue<IkReal> x7433=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7432.value)+(((1.5707963267949)*(x7433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7434=IKsin(j4);
IkReal x7435=IKcos(j4);
IkReal x7436=(cj5*r10);
IkReal x7437=(r01*sj5);
IkReal x7438=((1.0)*cj2);
IkReal x7439=(cj5*r00);
IkReal x7440=((1.0)*sj0);
IkReal x7441=(cj5*r20);
IkReal x7442=(cj1*sj2);
IkReal x7443=((1.0)*x7435);
IkReal x7444=((1.0)*x7434);
IkReal x7445=(sj5*x7434);
evalcond[0]=(((r21*x7445))+(((-1.0)*r22*x7443))+(((-1.0)*x7441*x7444)));
evalcond[1]=((((-1.0)*x7436*x7444))+cj0+((r11*x7445))+(((-1.0)*r12*x7443)));
evalcond[2]=((((-1.0)*x7440))+(((-1.0)*r02*x7443))+(((-1.0)*x7439*x7444))+((x7434*x7437)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x7443))+((x7435*x7441))+(((-1.0)*cj1*x7438))+(((-1.0)*r22*x7444)));
evalcond[4]=((((-1.0)*cj0*x7442))+(((-1.0)*x7437*x7443))+((x7435*x7439))+(((-1.0)*cj0*sj1*x7438))+(((-1.0)*r02*x7444)));
evalcond[5]=((((-1.0)*x7440*x7442))+(((-1.0)*r11*sj5*x7443))+((x7435*x7436))+(((-1.0)*sj0*sj1*x7438))+(((-1.0)*r12*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7446=((1.0)*cj5);
CheckValue<IkReal> x7447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7446)))),-1);
if(!x7447.valid){
continue;
}
CheckValue<IkReal> x7448 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7447.value)))+(x7448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7449=IKsin(j4);
IkReal x7450=IKcos(j4);
IkReal x7451=(cj5*r10);
IkReal x7452=(r01*sj5);
IkReal x7453=((1.0)*cj2);
IkReal x7454=(cj5*r00);
IkReal x7455=((1.0)*sj0);
IkReal x7456=(cj5*r20);
IkReal x7457=(cj1*sj2);
IkReal x7458=((1.0)*x7450);
IkReal x7459=((1.0)*x7449);
IkReal x7460=(sj5*x7449);
evalcond[0]=((((-1.0)*x7456*x7459))+((r21*x7460))+(((-1.0)*r22*x7458)));
evalcond[1]=(cj0+(((-1.0)*x7451*x7459))+((r11*x7460))+(((-1.0)*r12*x7458)));
evalcond[2]=((((-1.0)*x7455))+((x7449*x7452))+(((-1.0)*x7454*x7459))+(((-1.0)*r02*x7458)));
evalcond[3]=((((-1.0)*cj1*x7453))+((x7450*x7456))+((sj1*sj2))+(((-1.0)*r21*sj5*x7458))+(((-1.0)*r22*x7459)));
evalcond[4]=((((-1.0)*cj0*x7457))+(((-1.0)*x7452*x7458))+((x7450*x7454))+(((-1.0)*r02*x7459))+(((-1.0)*cj0*sj1*x7453)));
evalcond[5]=((((-1.0)*r11*sj5*x7458))+(((-1.0)*x7455*x7457))+((x7450*x7451))+(((-1.0)*sj0*sj1*x7453))+(((-1.0)*r12*x7459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7461=((1.0)*cj5);
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7461)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(cj5*r10);
IkReal x7467=(r01*sj5);
IkReal x7468=((1.0)*cj2);
IkReal x7469=(cj5*r00);
IkReal x7470=((1.0)*sj0);
IkReal x7471=(cj5*r20);
IkReal x7472=(cj1*sj2);
IkReal x7473=((1.0)*x7465);
IkReal x7474=((1.0)*x7464);
IkReal x7475=(sj5*x7464);
evalcond[0]=((((-1.0)*r22*x7473))+((r21*x7475))+(((-1.0)*x7471*x7474)));
evalcond[1]=((((-1.0)*x7466*x7474))+cj0+((r11*x7475))+(((-1.0)*r12*x7473)));
evalcond[2]=((((-1.0)*r02*x7473))+(((-1.0)*x7470))+((x7464*x7467))+(((-1.0)*x7469*x7474)));
evalcond[3]=(((x7465*x7471))+((sj1*sj2))+(((-1.0)*cj1*x7468))+(((-1.0)*r22*x7474))+(((-1.0)*r21*sj5*x7473)));
evalcond[4]=((((-1.0)*r02*x7474))+(((-1.0)*x7467*x7473))+(((-1.0)*cj0*x7472))+(((-1.0)*cj0*sj1*x7468))+((x7465*x7469)));
evalcond[5]=((((-1.0)*sj0*sj1*x7468))+(((-1.0)*r11*sj5*x7473))+((x7465*x7466))+(((-1.0)*x7470*x7472))+(((-1.0)*r12*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7476=cj5*cj5;
IkReal x7477=r21*r21;
IkReal x7478=(sj1*sj2);
IkReal x7479=(r21*sj5);
IkReal x7480=(cj1*cj2);
IkReal x7481=(cj5*r20);
CheckValue<IkReal> x7482 = IKatan2WithCheck(IkReal((((r22*x7478))+(((-1.0)*r22*x7480)))),IkReal((((x7480*x7481))+(((-1.0)*x7479*x7480))+((x7478*x7479))+(((-1.0)*x7478*x7481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483=IKPowWithIntegerCheck(IKsign((((x7476*(r20*r20)))+(r22*r22)+(((-1.0)*x7476*x7477))+(((-2.0)*x7479*x7481))+x7477)),-1);
if(!x7483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7482.value)+(((1.5707963267949)*(x7483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7484=IKsin(j4);
IkReal x7485=IKcos(j4);
IkReal x7486=(r21*sj5);
IkReal x7487=(cj5*r20);
IkReal x7488=((1.0)*x7485);
IkReal x7489=((1.0)*x7484);
evalcond[0]=(((x7484*x7486))+(((-1.0)*x7487*x7489))+(((-1.0)*r22*x7488)));
evalcond[1]=((((-1.0)*x7486*x7488))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7489))+((x7485*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7490=(cj5*sj4);
IkReal x7491=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490))))+IKsqr(((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x7491))+(((-1.0)*r00*x7490))), ((((-1.0)*r11*x7491))+((r10*x7490))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7492=IKcos(j0);
IkReal x7493=IKsin(j0);
IkReal x7494=(cj4*cj5);
IkReal x7495=((0.39225)*cj1);
IkReal x7496=((1.0)*sj1);
IkReal x7497=(r11*sj5);
IkReal x7498=(cj5*r11);
IkReal x7499=((1.0)*sj5);
IkReal x7500=((1.0)*sj4);
IkReal x7501=((0.425)*sj1);
IkReal x7502=((0.09465)*sj5);
IkReal x7503=(cj5*r01);
IkReal x7504=((1.0)*cj4);
IkReal x7505=((0.39225)*sj1);
IkReal x7506=(sj2*x7493);
IkReal x7507=(cj1*x7492);
IkReal x7508=(cj2*x7493);
IkReal x7509=(cj2*x7492);
IkReal x7510=(sj2*x7492);
evalcond[0]=(((sj4*x7497))+(((-1.0)*cj5*r10*x7500))+x7492+(((-1.0)*r12*x7504)));
evalcond[1]=((((-1.0)*x7493))+(((-1.0)*r02*x7504))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x7500)));
evalcond[2]=(((cj2*x7507))+(((-1.0)*r00*x7499))+(((-1.0)*x7503))+(((-1.0)*x7496*x7510)));
evalcond[3]=((((-1.0)*x7496*x7506))+(((-1.0)*x7498))+(((-1.0)*r10*x7499))+((cj1*x7508)));
evalcond[4]=((((-1.0)*sj2*x7507))+(((-1.0)*x7496*x7509))+(((-1.0)*r02*x7500))+((r00*x7494))+(((-1.0)*cj4*r01*x7499)));
evalcond[5]=((((-1.0)*x7497*x7504))+(((-1.0)*x7496*x7508))+((r10*x7494))+(((-1.0)*cj1*x7506))+(((-1.0)*r12*x7500)));
evalcond[6]=(((x7505*x7509))+(((-0.09465)*x7503))+(((-1.0)*r00*x7502))+(((-1.0)*px))+((x7495*x7510))+(((-0.10915)*x7493))+((x7492*x7501)));
evalcond[7]=(((x7493*x7501))+(((0.10915)*x7492))+((x7505*x7508))+(((-0.09465)*x7498))+((x7495*x7506))+(((-1.0)*py))+(((-1.0)*r10*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7511=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7511.valid){
continue;
}
CheckValue<IkReal> x7512 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7512.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7511.value)))+(x7512.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7513=IKcos(j0);
IkReal x7514=IKsin(j0);
IkReal x7515=((0.39225)*cj1);
IkReal x7516=((1.0)*sj1);
IkReal x7517=(cj1*cj2);
IkReal x7518=(cj5*r11);
IkReal x7519=((1.0)*sj5);
IkReal x7520=((0.09465)*sj5);
IkReal x7521=(cj5*r01);
IkReal x7522=((0.39225)*cj2);
IkReal x7523=(sj2*x7514);
IkReal x7524=(sj1*x7513);
IkReal x7525=(sj2*x7513);
IkReal x7526=(sj1*x7514);
evalcond[0]=((((-1.0)*x7516*x7525))+(((-1.0)*r00*x7519))+((x7513*x7517))+(((-1.0)*x7521)));
evalcond[1]=((((-1.0)*r10*x7519))+(((-1.0)*x7516*x7523))+((x7514*x7517))+(((-1.0)*x7518)));
evalcond[2]=((((0.425)*x7524))+(((-0.10915)*x7514))+(((-0.09465)*x7521))+(((-1.0)*r00*x7520))+(((-1.0)*px))+((x7522*x7524))+((x7515*x7525)));
evalcond[3]=((((-1.0)*r10*x7520))+(((0.10915)*x7513))+(((-0.09465)*x7518))+(((0.425)*x7526))+(((-1.0)*py))+((x7522*x7526))+((x7515*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7527=((1.0)*cj5);
IkReal x7528=((((-1.0)*r01*x7527))+(((-1.0)*r00*sj5)));
j4eval[0]=x7528;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7527)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7529=((1.0)*cj5);
IkReal x7530=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7529)));
j4eval[0]=x7530;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7529))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7531=((1.0)*sj0);
IkReal x7532=((1.0)*cj0);
IkReal x7533=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7533;
j4eval[1]=((IKabs(((((-1.0)*r12*x7531))+(((-1.0)*r02*x7532)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7532))+(((-1.0)*r11*sj5*x7531))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x7533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7534=((-1.0)*r20);
IkReal x7536 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7536)==0){
continue;
}
IkReal x7535=pow(x7536,-0.5);
CheckValue<IkReal> x7537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7534),IKFAST_ATAN2_MAGTHRESH);
if(!x7537.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7537.value));
IkReal gconst133=(r21*x7535);
IkReal gconst134=(x7534*x7535);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7538.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7539=((-1.0)*r20);
IkReal x7540=x7535;
CheckValue<IkReal> x7542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7539),IKFAST_ATAN2_MAGTHRESH);
if(!x7542.valid){
continue;
}
IkReal x7541=((-1.0)*(x7542.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7541;
IkReal gconst132=x7541;
IkReal gconst133=(r21*x7540);
IkReal gconst134=(x7539*x7540);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7543=((-1.0)*r20);
IkReal x7544=x7535;
CheckValue<IkReal> x7546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7543),IKFAST_ATAN2_MAGTHRESH);
if(!x7546.valid){
continue;
}
IkReal x7545=((-1.0)*(x7546.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7545;
IkReal gconst132=x7545;
IkReal gconst133=(r21*x7544);
IkReal gconst134=(x7543*x7544);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7547=((-1.0)*r20);
IkReal x7548=x7535;
CheckValue<IkReal> x7550 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7547),IKFAST_ATAN2_MAGTHRESH);
if(!x7550.valid){
continue;
}
IkReal x7549=((-1.0)*(x7550.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7549;
IkReal gconst132=x7549;
IkReal gconst133=(r21*x7548);
IkReal gconst134=(x7547*x7548);
IkReal x7551=r22*r22;
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7551))),-1);
if(!x7554.valid){
continue;
}
IkReal x7552=x7554.value;
IkReal x7553=((((2.0)*x7552*(r20*r20)*(r21*r21)))+((x7552*(r20*r20*r20*r20)))+((x7552*(r21*r21*r21*r21)))+x7551);
j4eval[0]=x7553;
j4eval[1]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7555=(gconst133*r21);
IkReal x7556=(sj1*sj2);
IkReal x7557=(gconst134*r20);
IkReal x7558=(cj1*cj2);
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal((((r22*x7556))+(((-1.0)*r22*x7558)))),IkReal(((((-1.0)*x7556*x7557))+((x7557*x7558))+(((-1.0)*x7555*x7558))+((x7555*x7556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7557*x7557)+(x7555*x7555)+(((-2.0)*x7555*x7557)))),-1);
if(!x7560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7559.value)+(((1.5707963267949)*(x7560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7561=IKsin(j4);
IkReal x7562=IKcos(j4);
IkReal x7563=((1.0)*cj2);
IkReal x7564=(gconst133*r11);
IkReal x7565=(gconst133*r21);
IkReal x7566=((1.0)*sj0);
IkReal x7567=(gconst133*r01);
IkReal x7568=(cj1*sj2);
IkReal x7569=((1.0)*x7562);
IkReal x7570=(gconst134*x7562);
IkReal x7571=((1.0)*x7561);
evalcond[0]=((((-1.0)*r22*x7569))+((x7561*x7565))+(((-1.0)*gconst134*r20*x7571)));
evalcond[1]=(cj0+(((-1.0)*r12*x7569))+((x7561*x7564))+(((-1.0)*gconst134*r10*x7571)));
evalcond[2]=((((-1.0)*gconst134*r00*x7571))+(((-1.0)*r02*x7569))+(((-1.0)*x7566))+((x7561*x7567)));
evalcond[3]=((((-1.0)*x7565*x7569))+((sj1*sj2))+((r20*x7570))+(((-1.0)*r22*x7571))+(((-1.0)*cj1*x7563)));
evalcond[4]=(((r00*x7570))+(((-1.0)*x7567*x7569))+(((-1.0)*r02*x7571))+(((-1.0)*cj0*x7568))+(((-1.0)*cj0*sj1*x7563)));
evalcond[5]=((((-1.0)*x7564*x7569))+(((-1.0)*x7566*x7568))+(((-1.0)*sj0*sj1*x7563))+((r10*x7570))+(((-1.0)*r12*x7571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7572=((1.0)*gconst134);
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7572)))),-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7572))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7573.value)))+(x7574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j4);
IkReal x7576=IKcos(j4);
IkReal x7577=((1.0)*cj2);
IkReal x7578=(gconst133*r11);
IkReal x7579=(gconst133*r21);
IkReal x7580=((1.0)*sj0);
IkReal x7581=(gconst133*r01);
IkReal x7582=(cj1*sj2);
IkReal x7583=((1.0)*x7576);
IkReal x7584=(gconst134*x7576);
IkReal x7585=((1.0)*x7575);
evalcond[0]=((((-1.0)*gconst134*r20*x7585))+(((-1.0)*r22*x7583))+((x7575*x7579)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7585))+((x7575*x7578))+(((-1.0)*r12*x7583)));
evalcond[2]=((((-1.0)*gconst134*r00*x7585))+(((-1.0)*x7580))+(((-1.0)*r02*x7583))+((x7575*x7581)));
evalcond[3]=((((-1.0)*r22*x7585))+((sj1*sj2))+(((-1.0)*cj1*x7577))+(((-1.0)*x7579*x7583))+((r20*x7584)));
evalcond[4]=((((-1.0)*cj0*sj1*x7577))+(((-1.0)*x7581*x7583))+(((-1.0)*r02*x7585))+((r00*x7584))+(((-1.0)*cj0*x7582)));
evalcond[5]=(((r10*x7584))+(((-1.0)*x7580*x7582))+(((-1.0)*r12*x7585))+(((-1.0)*x7578*x7583))+(((-1.0)*sj0*sj1*x7577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7586=((1.0)*gconst134);
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7586))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7586))+(((-1.0)*gconst133*r00)))),-1);
if(!x7588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7587.value)+(((1.5707963267949)*(x7588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7589=IKsin(j4);
IkReal x7590=IKcos(j4);
IkReal x7591=((1.0)*cj2);
IkReal x7592=(gconst133*r11);
IkReal x7593=(gconst133*r21);
IkReal x7594=((1.0)*sj0);
IkReal x7595=(gconst133*r01);
IkReal x7596=(cj1*sj2);
IkReal x7597=((1.0)*x7590);
IkReal x7598=(gconst134*x7590);
IkReal x7599=((1.0)*x7589);
evalcond[0]=((((-1.0)*gconst134*r20*x7599))+((x7589*x7593))+(((-1.0)*r22*x7597)));
evalcond[1]=(cj0+(((-1.0)*r12*x7597))+((x7589*x7592))+(((-1.0)*gconst134*r10*x7599)));
evalcond[2]=(((x7589*x7595))+(((-1.0)*gconst134*r00*x7599))+(((-1.0)*r02*x7597))+(((-1.0)*x7594)));
evalcond[3]=((((-1.0)*cj1*x7591))+((r20*x7598))+(((-1.0)*r22*x7599))+((sj1*sj2))+(((-1.0)*x7593*x7597)));
evalcond[4]=((((-1.0)*cj0*sj1*x7591))+(((-1.0)*x7595*x7597))+(((-1.0)*r02*x7599))+((r00*x7598))+(((-1.0)*cj0*x7596)));
evalcond[5]=((((-1.0)*x7592*x7597))+(((-1.0)*r12*x7599))+(((-1.0)*x7594*x7596))+((r10*x7598))+(((-1.0)*sj0*sj1*x7591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7600=((-1.0)*r21);
IkReal x7602 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7602)==0){
continue;
}
IkReal x7601=pow(x7602,-0.5);
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal(x7600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7603.value))));
IkReal gconst136=(x7600*x7601);
IkReal gconst137=((1.0)*r20*x7601);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7605=((-1.0)*r21);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(x7605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7606=((1.0)*(x7608.value));
IkReal x7607=x7601;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7606)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7606)));
IkReal gconst136=(x7605*x7607);
IkReal gconst137=((1.0)*r20*x7607);
IkReal x7609=r22*r22;
IkReal x7610=((1.0)*x7609);
CheckValue<IkReal> x7614=IKPowWithIntegerCheck(((-1.0)+x7609),-1);
if(!x7614.valid){
continue;
}
IkReal x7611=x7614.value;
if((((1.0)+(((-1.0)*x7610)))) < -0.00001)
continue;
IkReal x7612=IKsqrt(((1.0)+(((-1.0)*x7610))));
IkReal x7613=(cj0*x7611*x7612);
j4eval[0]=((IKabs(((((-1.0)*x7610*x7613))+x7613)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7615=((-1.0)*r21);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(x7615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal x7616=((1.0)*(x7618.value));
IkReal x7617=x7601;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7616)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7616)));
IkReal gconst136=(x7615*x7617);
IkReal gconst137=((1.0)*r20*x7617);
IkReal x7619=r22*r22;
IkReal x7620=((1.0)*x7619);
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(((-1.0)+x7619),-1);
if(!x7624.valid){
continue;
}
IkReal x7621=x7624.value;
if((((1.0)+(((-1.0)*x7620)))) < -0.00001)
continue;
IkReal x7622=IKsqrt(((1.0)+(((-1.0)*x7620))));
IkReal x7623=(sj0*x7621*x7622);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7620*x7623))+x7623))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7625=((-1.0)*r21);
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(x7625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
IkReal x7626=((1.0)*(x7628.value));
IkReal x7627=x7601;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7626)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7626)));
IkReal gconst136=(x7625*x7627);
IkReal gconst137=((1.0)*r20*x7627);
IkReal x7629=r22*r22;
CheckValue<IkReal> x7632=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7629))),-1);
if(!x7632.valid){
continue;
}
IkReal x7630=x7632.value;
IkReal x7631=((1.0)*x7630);
j4eval[0]=IKsign((((x7631*(r20*r20*r20*r20)))+((x7631*(r21*r21*r21*r21)))+(((2.0)*x7630*(r20*r20)*(r21*r21)))+x7629));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7633=(sj1*sj2);
IkReal x7634=(gconst136*r21);
IkReal x7635=(gconst137*r20);
IkReal x7636=(cj1*cj2);
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal((((r22*x7633))+(((-1.0)*r22*x7636)))),IkReal((((x7633*x7634))+((x7635*x7636))+(((-1.0)*x7633*x7635))+(((-1.0)*x7634*x7636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
CheckValue<IkReal> x7638=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7634*x7635))+(x7634*x7634)+(x7635*x7635))),-1);
if(!x7638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7637.value)+(((1.5707963267949)*(x7638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7639=IKsin(j4);
IkReal x7640=IKcos(j4);
IkReal x7641=(gconst136*r01);
IkReal x7642=(gconst137*r10);
IkReal x7643=(gconst137*r20);
IkReal x7644=((1.0)*cj2);
IkReal x7645=(gconst136*r11);
IkReal x7646=(gconst136*r21);
IkReal x7647=(gconst137*r00);
IkReal x7648=((1.0)*sj0);
IkReal x7649=(cj1*sj2);
IkReal x7650=((1.0)*x7640);
IkReal x7651=((1.0)*x7639);
evalcond[0]=((((-1.0)*r22*x7650))+((x7639*x7646))+(((-1.0)*x7643*x7651)));
evalcond[1]=(cj0+((x7639*x7645))+(((-1.0)*r12*x7650))+(((-1.0)*x7642*x7651)));
evalcond[2]=((((-1.0)*x7647*x7651))+(((-1.0)*r02*x7650))+((x7639*x7641))+(((-1.0)*x7648)));
evalcond[3]=((((-1.0)*r22*x7651))+((x7640*x7643))+((sj1*sj2))+(((-1.0)*x7646*x7650))+(((-1.0)*cj1*x7644)));
evalcond[4]=((((-1.0)*cj0*sj1*x7644))+(((-1.0)*cj0*x7649))+(((-1.0)*r02*x7651))+((x7640*x7647))+(((-1.0)*x7641*x7650)));
evalcond[5]=((((-1.0)*sj0*sj1*x7644))+((x7640*x7642))+(((-1.0)*x7648*x7649))+(((-1.0)*r12*x7651))+(((-1.0)*x7645*x7650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7652=((1.0)*gconst137);
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x7652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
CheckValue<IkReal> x7654=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7652)))),-1);
if(!x7654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7653.value)+(((1.5707963267949)*(x7654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7655=IKsin(j4);
IkReal x7656=IKcos(j4);
IkReal x7657=(gconst136*r01);
IkReal x7658=(gconst137*r10);
IkReal x7659=(gconst137*r20);
IkReal x7660=((1.0)*cj2);
IkReal x7661=(gconst136*r11);
IkReal x7662=(gconst136*r21);
IkReal x7663=(gconst137*r00);
IkReal x7664=((1.0)*sj0);
IkReal x7665=(cj1*sj2);
IkReal x7666=((1.0)*x7656);
IkReal x7667=((1.0)*x7655);
evalcond[0]=(((x7655*x7662))+(((-1.0)*r22*x7666))+(((-1.0)*x7659*x7667)));
evalcond[1]=((((-1.0)*r12*x7666))+cj0+((x7655*x7661))+(((-1.0)*x7658*x7667)));
evalcond[2]=((((-1.0)*x7664))+((x7655*x7657))+(((-1.0)*r02*x7666))+(((-1.0)*x7663*x7667)));
evalcond[3]=(((x7656*x7659))+(((-1.0)*r22*x7667))+((sj1*sj2))+(((-1.0)*cj1*x7660))+(((-1.0)*x7662*x7666)));
evalcond[4]=((((-1.0)*cj0*sj1*x7660))+(((-1.0)*cj0*x7665))+(((-1.0)*r02*x7667))+(((-1.0)*x7657*x7666))+((x7656*x7663)));
evalcond[5]=(((x7656*x7658))+(((-1.0)*r12*x7667))+(((-1.0)*x7661*x7666))+(((-1.0)*sj0*sj1*x7660))+(((-1.0)*x7664*x7665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7668=((1.0)*gconst137);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7668))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7668)))),-1);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7669.value)+(((1.5707963267949)*(x7670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7671=IKsin(j4);
IkReal x7672=IKcos(j4);
IkReal x7673=(gconst136*r01);
IkReal x7674=(gconst137*r10);
IkReal x7675=(gconst137*r20);
IkReal x7676=((1.0)*cj2);
IkReal x7677=(gconst136*r11);
IkReal x7678=(gconst136*r21);
IkReal x7679=(gconst137*r00);
IkReal x7680=((1.0)*sj0);
IkReal x7681=(cj1*sj2);
IkReal x7682=((1.0)*x7672);
IkReal x7683=((1.0)*x7671);
evalcond[0]=(((x7671*x7678))+(((-1.0)*r22*x7682))+(((-1.0)*x7675*x7683)));
evalcond[1]=(cj0+((x7671*x7677))+(((-1.0)*x7674*x7683))+(((-1.0)*r12*x7682)));
evalcond[2]=(((x7671*x7673))+(((-1.0)*x7680))+(((-1.0)*x7679*x7683))+(((-1.0)*r02*x7682)));
evalcond[3]=(((x7672*x7675))+(((-1.0)*cj1*x7676))+(((-1.0)*r22*x7683))+((sj1*sj2))+(((-1.0)*x7678*x7682)));
evalcond[4]=(((x7672*x7679))+(((-1.0)*cj0*sj1*x7676))+(((-1.0)*x7673*x7682))+(((-1.0)*cj0*x7681))+(((-1.0)*r02*x7683)));
evalcond[5]=(((x7672*x7674))+(((-1.0)*sj0*sj1*x7676))+(((-1.0)*x7677*x7682))+(((-1.0)*x7680*x7681))+(((-1.0)*r12*x7683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7684=((-1.0)*r10);
IkReal x7686 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7686)==0){
continue;
}
IkReal x7685=pow(x7686,-0.5);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7684),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7687.value));
IkReal gconst139=(r11*x7685);
IkReal gconst140=(x7684*x7685);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7689=((-1.0)*r10);
IkReal x7690=x7685;
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7689),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
IkReal x7691=((-1.0)*(x7692.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7691;
IkReal gconst138=x7691;
IkReal gconst139=(r11*x7690);
IkReal gconst140=(x7689*x7690);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=((1.0)*sj0);
IkReal x7694=((1.0)*gconst139);
CheckValue<IkReal> x7695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7694)))),-1);
if(!x7695.valid){
continue;
}
CheckValue<IkReal> x7696 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7693))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7694))+(((-1.0)*gconst139*r11*x7693))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7695.value)))+(x7696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7697=IKsin(j4);
IkReal x7698=IKcos(j4);
IkReal x7699=(gconst140*r00);
IkReal x7700=(gconst139*r11);
IkReal x7701=((1.0)*cj2);
IkReal x7702=(gconst139*r01);
IkReal x7703=(gconst139*r21);
IkReal x7704=((1.0)*sj0);
IkReal x7705=(cj1*sj2);
IkReal x7706=((1.0)*x7698);
IkReal x7707=((1.0)*x7697);
IkReal x7708=(gconst140*x7698);
evalcond[0]=((((-1.0)*r22*x7706))+(((-1.0)*gconst140*r20*x7707))+((x7697*x7703)));
evalcond[1]=(cj0+(((-1.0)*r12*x7706))+((x7697*x7700))+(((-1.0)*gconst140*r10*x7707)));
evalcond[2]=((((-1.0)*x7704))+(((-1.0)*r02*x7706))+(((-1.0)*x7699*x7707))+((x7697*x7702)));
evalcond[3]=((((-1.0)*r22*x7707))+((sj1*sj2))+((r20*x7708))+(((-1.0)*cj1*x7701))+(((-1.0)*x7703*x7706)));
evalcond[4]=((((-1.0)*x7702*x7706))+(((-1.0)*cj0*sj1*x7701))+((x7698*x7699))+(((-1.0)*r02*x7707))+(((-1.0)*cj0*x7705)));
evalcond[5]=((((-1.0)*r12*x7707))+(((-1.0)*x7700*x7706))+(((-1.0)*x7704*x7705))+((r10*x7708))+(((-1.0)*sj0*sj1*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7709=((1.0)*gconst140);
CheckValue<IkReal> x7710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7709))+(((-1.0)*gconst139*r00)))),-1);
if(!x7710.valid){
continue;
}
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7710.value)))+(x7711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7712=IKsin(j4);
IkReal x7713=IKcos(j4);
IkReal x7714=(gconst140*r00);
IkReal x7715=(gconst139*r11);
IkReal x7716=((1.0)*cj2);
IkReal x7717=(gconst139*r01);
IkReal x7718=(gconst139*r21);
IkReal x7719=((1.0)*sj0);
IkReal x7720=(cj1*sj2);
IkReal x7721=((1.0)*x7713);
IkReal x7722=((1.0)*x7712);
IkReal x7723=(gconst140*x7713);
evalcond[0]=((((-1.0)*gconst140*r20*x7722))+((x7712*x7718))+(((-1.0)*r22*x7721)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x7722))+((x7712*x7715))+(((-1.0)*r12*x7721)));
evalcond[2]=((((-1.0)*x7714*x7722))+(((-1.0)*x7719))+(((-1.0)*r02*x7721))+((x7712*x7717)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x7718*x7721))+(((-1.0)*cj1*x7716))+(((-1.0)*r22*x7722))+((r20*x7723)));
evalcond[4]=((((-1.0)*cj0*x7720))+(((-1.0)*cj0*sj1*x7716))+(((-1.0)*r02*x7722))+((x7713*x7714))+(((-1.0)*x7717*x7721)));
evalcond[5]=((((-1.0)*x7715*x7721))+((r10*x7723))+(((-1.0)*x7719*x7720))+(((-1.0)*sj0*sj1*x7716))+(((-1.0)*r12*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7724=((-1.0)*r11);
IkReal x7726 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7726)==0){
continue;
}
IkReal x7725=pow(x7726,-0.5);
CheckValue<IkReal> x7727 = IKatan2WithCheck(IkReal(x7724),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7727.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7727.value))));
IkReal gconst142=(x7724*x7725);
IkReal gconst143=((1.0)*r10*x7725);
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7728.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7729=((-1.0)*r11);
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(x7729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
IkReal x7730=((1.0)*(x7732.value));
IkReal x7731=x7725;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7730)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7730)));
IkReal gconst142=(x7729*x7731);
IkReal gconst143=((1.0)*r10*x7731);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7733=((-1.0)*r11);
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal(x7733),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
IkReal x7734=((1.0)*(x7736.value));
IkReal x7735=x7725;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7734)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7734)));
IkReal gconst142=(x7733*x7735);
IkReal gconst143=((1.0)*r10*x7735);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7737=((-1.0)*r11);
CheckValue<IkReal> x7740 = IKatan2WithCheck(IkReal(x7737),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7740.valid){
continue;
}
IkReal x7738=((1.0)*(x7740.value));
IkReal x7739=x7725;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7738)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7738)));
IkReal gconst142=(x7737*x7739);
IkReal gconst143=((1.0)*r10*x7739);
IkReal x7741=r12*r12;
IkReal x7742=((1.0)*sj0);
IkReal x7743=(cj0*r02);
IkReal x7744=x7725;
j4eval[0]=((IKabs(((((-1.0)*r12*x7742))+(((-1.0)*x7743)))))+(IKabs(((((-1.0)*x7742*x7744))+((sj0*x7741*x7744))+((r12*x7743*x7744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7745=((1.0)*sj0);
IkReal x7746=((1.0)*gconst142);
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7745))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7746))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7746)))),-1);
if(!x7748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7747.value)+(((1.5707963267949)*(x7748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7749=IKsin(j4);
IkReal x7750=IKcos(j4);
IkReal x7751=(gconst143*r20);
IkReal x7752=((1.0)*cj2);
IkReal x7753=((1.0)*sj0);
IkReal x7754=(cj1*sj2);
IkReal x7755=((1.0)*x7750);
IkReal x7756=((1.0)*x7749);
IkReal x7757=(gconst142*x7749);
IkReal x7758=(gconst143*x7750);
evalcond[0]=((((-1.0)*r22*x7755))+(((-1.0)*x7751*x7756))+((r21*x7757)));
evalcond[1]=(cj0+(((-1.0)*r12*x7755))+(((-1.0)*gconst143*r10*x7756))+((r11*x7757)));
evalcond[2]=((((-1.0)*gconst143*r00*x7756))+((r01*x7757))+(((-1.0)*r02*x7755))+(((-1.0)*x7753)));
evalcond[3]=((((-1.0)*r22*x7756))+((sj1*sj2))+((x7750*x7751))+(((-1.0)*gconst142*r21*x7755))+(((-1.0)*cj1*x7752)));
evalcond[4]=((((-1.0)*gconst142*r01*x7755))+(((-1.0)*cj0*x7754))+((r00*x7758))+(((-1.0)*r02*x7756))+(((-1.0)*cj0*sj1*x7752)));
evalcond[5]=(((r10*x7758))+(((-1.0)*sj0*sj1*x7752))+(((-1.0)*r12*x7756))+(((-1.0)*x7753*x7754))+(((-1.0)*gconst142*r11*x7755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7759=((1.0)*gconst143);
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7759))+((gconst142*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r10))+(((-1.0)*r11*x7759)))),-1);
if(!x7761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7760.value)+(((1.5707963267949)*(x7761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7762=IKsin(j4);
IkReal x7763=IKcos(j4);
IkReal x7764=(gconst143*r20);
IkReal x7765=((1.0)*cj2);
IkReal x7766=((1.0)*sj0);
IkReal x7767=(cj1*sj2);
IkReal x7768=((1.0)*x7763);
IkReal x7769=((1.0)*x7762);
IkReal x7770=(gconst142*x7762);
IkReal x7771=(gconst143*x7763);
evalcond[0]=((((-1.0)*r22*x7768))+(((-1.0)*x7764*x7769))+((r21*x7770)));
evalcond[1]=(((r11*x7770))+cj0+(((-1.0)*r12*x7768))+(((-1.0)*gconst143*r10*x7769)));
evalcond[2]=((((-1.0)*r02*x7768))+(((-1.0)*gconst143*r00*x7769))+(((-1.0)*x7766))+((r01*x7770)));
evalcond[3]=((((-1.0)*r22*x7769))+((sj1*sj2))+(((-1.0)*cj1*x7765))+(((-1.0)*gconst142*r21*x7768))+((x7763*x7764)));
evalcond[4]=(((r00*x7771))+(((-1.0)*cj0*x7767))+(((-1.0)*r02*x7769))+(((-1.0)*gconst142*r01*x7768))+(((-1.0)*cj0*sj1*x7765)));
evalcond[5]=((((-1.0)*x7766*x7767))+(((-1.0)*sj0*sj1*x7765))+(((-1.0)*r12*x7769))+(((-1.0)*gconst142*r11*x7768))+((r10*x7771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7772=((1.0)*gconst143);
CheckValue<IkReal> x7773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7772))+(((-1.0)*gconst142*r00)))),-1);
if(!x7773.valid){
continue;
}
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7773.value)))+(x7774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7775=IKsin(j4);
IkReal x7776=IKcos(j4);
IkReal x7777=(gconst143*r20);
IkReal x7778=((1.0)*cj2);
IkReal x7779=((1.0)*sj0);
IkReal x7780=(cj1*sj2);
IkReal x7781=((1.0)*x7776);
IkReal x7782=((1.0)*x7775);
IkReal x7783=(gconst142*x7775);
IkReal x7784=(gconst143*x7776);
evalcond[0]=(((r21*x7783))+(((-1.0)*r22*x7781))+(((-1.0)*x7777*x7782)));
evalcond[1]=((((-1.0)*gconst143*r10*x7782))+cj0+((r11*x7783))+(((-1.0)*r12*x7781)));
evalcond[2]=(((r01*x7783))+(((-1.0)*r02*x7781))+(((-1.0)*x7779))+(((-1.0)*gconst143*r00*x7782)));
evalcond[3]=((((-1.0)*gconst142*r21*x7781))+((sj1*sj2))+((x7776*x7777))+(((-1.0)*r22*x7782))+(((-1.0)*cj1*x7778)));
evalcond[4]=((((-1.0)*gconst142*r01*x7781))+(((-1.0)*cj0*x7780))+((r00*x7784))+(((-1.0)*r02*x7782))+(((-1.0)*cj0*sj1*x7778)));
evalcond[5]=((((-1.0)*x7779*x7780))+(((-1.0)*sj0*sj1*x7778))+(((-1.0)*gconst142*r11*x7781))+((r10*x7784))+(((-1.0)*r12*x7782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7785=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7785;
j4eval[1]=IKsign(x7785);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7786=((1.0)*cj5);
IkReal x7787=((((-1.0)*r01*x7786))+(((-1.0)*r00*sj5)));
j4eval[0]=x7787;
j4eval[1]=((IKabs(((((-1.0)*r20*x7786))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7788=cj5*cj5;
IkReal x7789=r11*r11;
IkReal x7790=(r11*sj5);
IkReal x7791=(cj5*r10);
IkReal x7792=((r12*r12)+(((-1.0)*x7788*x7789))+(((-2.0)*x7790*x7791))+((x7788*(r10*r10)))+x7789);
j4eval[0]=x7792;
j4eval[1]=IKsign(x7792);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7790))+x7791))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7793=cj5*cj5;
IkReal x7794=r11*r11;
IkReal x7795=(cj5*r10);
IkReal x7796=(r11*sj5);
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(((((-1.0)*x7796))+x7795)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7795*x7796))+(((-1.0)*x7793*x7794))+((x7793*(r10*r10)))+x7794)),-1);
if(!x7798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7797.value)+(((1.5707963267949)*(x7798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=(cj5*r10);
IkReal x7802=(r01*sj5);
IkReal x7803=((1.0)*cj2);
IkReal x7804=(cj5*r00);
IkReal x7805=(cj5*r20);
IkReal x7806=((1.0)*x7800);
IkReal x7807=((1.0)*x7799);
IkReal x7808=(sj5*x7799);
evalcond[0]=((((-1.0)*x7805*x7807))+((r21*x7808))+(((-1.0)*r22*x7806)));
evalcond[1]=((((-1.0)*r02*x7806))+((x7799*x7802))+(((-1.0)*x7804*x7807)));
evalcond[2]=(((x7800*x7801))+(((-1.0)*r12*x7807))+(((-1.0)*r11*sj5*x7806)));
evalcond[3]=((1.0)+(((-1.0)*x7801*x7807))+((r11*x7808))+(((-1.0)*r12*x7806)));
evalcond[4]=(((x7800*x7805))+(((-1.0)*r21*sj5*x7806))+(((-1.0)*cj1*x7803))+((sj1*sj2))+(((-1.0)*r22*x7807)));
evalcond[5]=(((x7800*x7804))+(((-1.0)*r02*x7807))+(((-1.0)*cj1*sj2))+(((-1.0)*x7802*x7806))+(((-1.0)*sj1*x7803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7809=((1.0)*cj5);
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7809)))),-1);
if(!x7810.valid){
continue;
}
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7809))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7810.value)))+(x7811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7812=IKsin(j4);
IkReal x7813=IKcos(j4);
IkReal x7814=(cj5*r10);
IkReal x7815=(r01*sj5);
IkReal x7816=((1.0)*cj2);
IkReal x7817=(cj5*r00);
IkReal x7818=(cj5*r20);
IkReal x7819=((1.0)*x7813);
IkReal x7820=((1.0)*x7812);
IkReal x7821=(sj5*x7812);
evalcond[0]=(((r21*x7821))+(((-1.0)*r22*x7819))+(((-1.0)*x7818*x7820)));
evalcond[1]=(((x7812*x7815))+(((-1.0)*r02*x7819))+(((-1.0)*x7817*x7820)));
evalcond[2]=(((x7813*x7814))+(((-1.0)*r12*x7820))+(((-1.0)*r11*sj5*x7819)));
evalcond[3]=((1.0)+((r11*x7821))+(((-1.0)*r12*x7819))+(((-1.0)*x7814*x7820)));
evalcond[4]=(((x7813*x7818))+(((-1.0)*r21*sj5*x7819))+((sj1*sj2))+(((-1.0)*cj1*x7816))+(((-1.0)*r22*x7820)));
evalcond[5]=(((x7813*x7817))+(((-1.0)*r02*x7820))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x7816))+(((-1.0)*x7815*x7819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7822.valid){
continue;
}
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7822.value)))+(x7823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7824=IKsin(j4);
IkReal x7825=IKcos(j4);
IkReal x7826=(cj5*r10);
IkReal x7827=(r01*sj5);
IkReal x7828=((1.0)*cj2);
IkReal x7829=(cj5*r00);
IkReal x7830=(cj5*r20);
IkReal x7831=((1.0)*x7825);
IkReal x7832=((1.0)*x7824);
IkReal x7833=(sj5*x7824);
evalcond[0]=(((r21*x7833))+(((-1.0)*r22*x7831))+(((-1.0)*x7830*x7832)));
evalcond[1]=((((-1.0)*x7829*x7832))+(((-1.0)*r02*x7831))+((x7824*x7827)));
evalcond[2]=(((x7825*x7826))+(((-1.0)*r11*sj5*x7831))+(((-1.0)*r12*x7832)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7831))+(((-1.0)*x7826*x7832))+((r11*x7833)));
evalcond[4]=((((-1.0)*r22*x7832))+(((-1.0)*cj1*x7828))+((sj1*sj2))+(((-1.0)*r21*sj5*x7831))+((x7825*x7830)));
evalcond[5]=(((x7825*x7829))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7832))+(((-1.0)*sj1*x7828))+(((-1.0)*x7827*x7831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7834=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7834;
j4eval[1]=IKsign(x7834);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7835=((1.0)*cj5);
IkReal x7836=((((-1.0)*r21*x7835))+(((-1.0)*r20*sj5)));
j4eval[0]=x7836;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7835))))));
j4eval[2]=IKsign(x7836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7837=cj5*cj5;
IkReal x7838=r11*r11;
IkReal x7839=(cj5*r10);
IkReal x7840=(r11*sj5);
IkReal x7841=((((-1.0)*x7838))+(((-1.0)*(r12*r12)))+((x7837*x7838))+(((-1.0)*x7837*(r10*r10)))+(((2.0)*x7839*x7840)));
j4eval[0]=x7841;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7840))+x7839))));
j4eval[2]=IKsign(x7841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7842=cj5*cj5;
IkReal x7843=r11*r11;
IkReal x7844=(cj5*r10);
IkReal x7845=(r11*sj5);
CheckValue<IkReal> x7846=IKPowWithIntegerCheck(IKsign((((x7842*x7843))+(((-1.0)*x7843))+(((-1.0)*(r12*r12)))+(((2.0)*x7844*x7845))+(((-1.0)*x7842*(r10*r10))))),-1);
if(!x7846.valid){
continue;
}
CheckValue<IkReal> x7847 = IKatan2WithCheck(IkReal(((((-1.0)*x7845))+x7844)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7846.value)))+(x7847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7848=IKsin(j4);
IkReal x7849=IKcos(j4);
IkReal x7850=(cj5*r10);
IkReal x7851=(r01*sj5);
IkReal x7852=(cj5*r00);
IkReal x7853=(cj5*r20);
IkReal x7854=((1.0)*x7849);
IkReal x7855=((1.0)*x7848);
IkReal x7856=(sj5*x7848);
evalcond[0]=(((r21*x7856))+(((-1.0)*x7853*x7855))+(((-1.0)*r22*x7854)));
evalcond[1]=(((x7848*x7851))+(((-1.0)*r02*x7854))+(((-1.0)*x7852*x7855)));
evalcond[2]=((((-1.0)*r11*sj5*x7854))+((x7849*x7850))+(((-1.0)*r12*x7855)));
evalcond[3]=((-1.0)+((r11*x7856))+(((-1.0)*x7850*x7855))+(((-1.0)*r12*x7854)));
evalcond[4]=(((cj2*sj1))+((x7849*x7852))+((cj1*sj2))+(((-1.0)*x7851*x7854))+(((-1.0)*r02*x7855)));
evalcond[5]=(((x7849*x7853))+(((-1.0)*r21*sj5*x7854))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x7855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7857=((1.0)*cj5);
CheckValue<IkReal> x7858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7857))+(((-1.0)*r20*sj5)))),-1);
if(!x7858.valid){
continue;
}
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7858.value)))+(x7859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7860=IKsin(j4);
IkReal x7861=IKcos(j4);
IkReal x7862=(cj5*r10);
IkReal x7863=(r01*sj5);
IkReal x7864=(cj5*r00);
IkReal x7865=(cj5*r20);
IkReal x7866=((1.0)*x7861);
IkReal x7867=((1.0)*x7860);
IkReal x7868=(sj5*x7860);
evalcond[0]=(((r21*x7868))+(((-1.0)*x7865*x7867))+(((-1.0)*r22*x7866)));
evalcond[1]=(((x7860*x7863))+(((-1.0)*x7864*x7867))+(((-1.0)*r02*x7866)));
evalcond[2]=(((x7861*x7862))+(((-1.0)*r11*sj5*x7866))+(((-1.0)*r12*x7867)));
evalcond[3]=((-1.0)+(((-1.0)*x7862*x7867))+((r11*x7868))+(((-1.0)*r12*x7866)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7863*x7866))+((x7861*x7864))+((cj1*sj2))+(((-1.0)*r02*x7867)));
evalcond[5]=(((x7861*x7865))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7866))+(((-1.0)*r22*x7867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7869 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7869.valid){
continue;
}
CheckValue<IkReal> x7870=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7869.value)+(((1.5707963267949)*(x7870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7871=IKsin(j4);
IkReal x7872=IKcos(j4);
IkReal x7873=(cj5*r10);
IkReal x7874=(r01*sj5);
IkReal x7875=(cj5*r00);
IkReal x7876=(cj5*r20);
IkReal x7877=((1.0)*x7872);
IkReal x7878=((1.0)*x7871);
IkReal x7879=(sj5*x7871);
evalcond[0]=((((-1.0)*r22*x7877))+(((-1.0)*x7876*x7878))+((r21*x7879)));
evalcond[1]=((((-1.0)*x7875*x7878))+(((-1.0)*r02*x7877))+((x7871*x7874)));
evalcond[2]=((((-1.0)*r11*sj5*x7877))+(((-1.0)*r12*x7878))+((x7872*x7873)));
evalcond[3]=((-1.0)+(((-1.0)*x7873*x7878))+((r11*x7879))+(((-1.0)*r12*x7877)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x7874*x7877))+((cj1*sj2))+(((-1.0)*r02*x7878))+((x7872*x7875)));
evalcond[5]=((((-1.0)*r22*x7878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7872*x7876))+(((-1.0)*r21*sj5*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7880=((-1.0)*r00);
IkReal x7882 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7882)==0){
continue;
}
IkReal x7881=pow(x7882,-0.5);
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7880),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7883.value));
IkReal gconst145=(r01*x7881);
IkReal gconst146=(x7880*x7881);
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7884.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7885=((-1.0)*r00);
IkReal x7886=x7881;
CheckValue<IkReal> x7888 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7885),IKFAST_ATAN2_MAGTHRESH);
if(!x7888.valid){
continue;
}
IkReal x7887=((-1.0)*(x7888.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7887;
IkReal gconst144=x7887;
IkReal gconst145=(r01*x7886);
IkReal gconst146=(x7885*x7886);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7889=((1.0)*sj0);
IkReal x7890=((1.0)*gconst145);
CheckValue<IkReal> x7891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7890))+(((-1.0)*gconst146*r21)))),-1);
if(!x7891.valid){
continue;
}
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7889)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7890))+(((-1.0)*gconst145*r11*x7889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7891.value)))+(x7892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7893=IKsin(j4);
IkReal x7894=IKcos(j4);
IkReal x7895=(gconst146*r10);
IkReal x7896=((1.0)*cj2);
IkReal x7897=(gconst146*r20);
IkReal x7898=((1.0)*sj0);
IkReal x7899=(gconst146*r00);
IkReal x7900=(cj1*sj2);
IkReal x7901=((1.0)*x7894);
IkReal x7902=((1.0)*x7893);
IkReal x7903=(gconst145*x7893);
evalcond[0]=(((r21*x7903))+(((-1.0)*x7897*x7902))+(((-1.0)*r22*x7901)));
evalcond[1]=((((-1.0)*r12*x7901))+cj0+(((-1.0)*x7895*x7902))+((r11*x7903)));
evalcond[2]=((((-1.0)*x7898))+(((-1.0)*x7899*x7902))+((r01*x7903))+(((-1.0)*r02*x7901)));
evalcond[3]=((((-1.0)*gconst145*r21*x7901))+((sj1*sj2))+(((-1.0)*r22*x7902))+((x7894*x7897))+(((-1.0)*cj1*x7896)));
evalcond[4]=(((x7894*x7899))+(((-1.0)*gconst145*r01*x7901))+(((-1.0)*cj0*x7900))+(((-1.0)*cj0*sj1*x7896))+(((-1.0)*r02*x7902)));
evalcond[5]=((((-1.0)*x7898*x7900))+(((-1.0)*r12*x7902))+(((-1.0)*sj0*sj1*x7896))+(((-1.0)*gconst145*r11*x7901))+((x7894*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7904=((1.0)*gconst146);
CheckValue<IkReal> x7905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7904))+(((-1.0)*gconst145*r10)))),-1);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x7904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7905.value)))+(x7906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(gconst146*r10);
IkReal x7910=((1.0)*cj2);
IkReal x7911=(gconst146*r20);
IkReal x7912=((1.0)*sj0);
IkReal x7913=(gconst146*r00);
IkReal x7914=(cj1*sj2);
IkReal x7915=((1.0)*x7908);
IkReal x7916=((1.0)*x7907);
IkReal x7917=(gconst145*x7907);
evalcond[0]=(((r21*x7917))+(((-1.0)*r22*x7915))+(((-1.0)*x7911*x7916)));
evalcond[1]=(cj0+((r11*x7917))+(((-1.0)*r12*x7915))+(((-1.0)*x7909*x7916)));
evalcond[2]=((((-1.0)*x7912))+(((-1.0)*r02*x7915))+(((-1.0)*x7913*x7916))+((r01*x7917)));
evalcond[3]=((((-1.0)*r22*x7916))+((sj1*sj2))+(((-1.0)*cj1*x7910))+((x7908*x7911))+(((-1.0)*gconst145*r21*x7915)));
evalcond[4]=((((-1.0)*r02*x7916))+(((-1.0)*gconst145*r01*x7915))+((x7908*x7913))+(((-1.0)*cj0*sj1*x7910))+(((-1.0)*cj0*x7914)));
evalcond[5]=(((x7908*x7909))+(((-1.0)*gconst145*r11*x7915))+(((-1.0)*x7912*x7914))+(((-1.0)*r12*x7916))+(((-1.0)*sj0*sj1*x7910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7918=((-1.0)*r01);
IkReal x7920 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7920)==0){
continue;
}
IkReal x7919=pow(x7920,-0.5);
CheckValue<IkReal> x7921 = IKatan2WithCheck(IkReal(x7918),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7921.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7921.value))));
IkReal gconst148=(x7918*x7919);
IkReal gconst149=((1.0)*r00*x7919);
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7923=((-1.0)*r01);
CheckValue<IkReal> x7926 = IKatan2WithCheck(IkReal(x7923),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7926.valid){
continue;
}
IkReal x7924=((1.0)*(x7926.value));
IkReal x7925=x7919;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7924)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7924)));
IkReal gconst148=(x7923*x7925);
IkReal gconst149=((1.0)*r00*x7925);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7927=((-1.0)*r01);
CheckValue<IkReal> x7930 = IKatan2WithCheck(IkReal(x7927),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7930.valid){
continue;
}
IkReal x7928=((1.0)*(x7930.value));
IkReal x7929=x7919;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7928)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7928)));
IkReal gconst148=(x7927*x7929);
IkReal gconst149=((1.0)*r00*x7929);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7931=((-1.0)*r01);
CheckValue<IkReal> x7934 = IKatan2WithCheck(IkReal(x7931),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7934.valid){
continue;
}
IkReal x7932=((1.0)*(x7934.value));
IkReal x7933=x7919;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7932)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7932)));
IkReal gconst148=(x7931*x7933);
IkReal gconst149=((1.0)*r00*x7933);
IkReal x7935=r02*r02;
IkReal x7936=(r12*sj0);
IkReal x7937=((1.0)*cj0);
IkReal x7938=x7919;
j4eval[0]=((IKabs((((r02*x7936*x7938))+(((-1.0)*x7937*x7938))+((cj0*x7935*x7938)))))+(IKabs(((((-1.0)*r02*x7937))+(((-1.0)*x7936))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7939=((1.0)*sj0);
IkReal x7940=((1.0)*gconst148);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7939))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7940))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7940)))),-1);
if(!x7942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7941.value)+(((1.5707963267949)*(x7942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7943=IKsin(j4);
IkReal x7944=IKcos(j4);
IkReal x7945=(gconst148*r11);
IkReal x7946=((1.0)*cj2);
IkReal x7947=((1.0)*sj0);
IkReal x7948=(cj1*sj2);
IkReal x7949=((1.0)*x7944);
IkReal x7950=(gconst149*x7944);
IkReal x7951=(gconst148*x7943);
IkReal x7952=((1.0)*x7943);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*gconst149*r20*x7952))+((r21*x7951)));
evalcond[1]=(cj0+(((-1.0)*r12*x7949))+(((-1.0)*gconst149*r10*x7952))+((x7943*x7945)));
evalcond[2]=(((r01*x7951))+(((-1.0)*r02*x7949))+(((-1.0)*gconst149*r00*x7952))+(((-1.0)*x7947)));
evalcond[3]=((((-1.0)*r22*x7952))+((sj1*sj2))+(((-1.0)*gconst148*r21*x7949))+(((-1.0)*cj1*x7946))+((r20*x7950)));
evalcond[4]=((((-1.0)*cj0*x7948))+((r00*x7950))+(((-1.0)*r02*x7952))+(((-1.0)*gconst148*r01*x7949))+(((-1.0)*cj0*sj1*x7946)));
evalcond[5]=((((-1.0)*x7947*x7948))+((r10*x7950))+(((-1.0)*sj0*sj1*x7946))+(((-1.0)*r12*x7952))+(((-1.0)*x7945*x7949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7953=((1.0)*gconst149);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7953))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
CheckValue<IkReal> x7955=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x7953)))),-1);
if(!x7955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7954.value)+(((1.5707963267949)*(x7955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKsin(j4);
IkReal x7957=IKcos(j4);
IkReal x7958=(gconst148*r11);
IkReal x7959=((1.0)*cj2);
IkReal x7960=((1.0)*sj0);
IkReal x7961=(cj1*sj2);
IkReal x7962=((1.0)*x7957);
IkReal x7963=(gconst149*x7957);
IkReal x7964=(gconst148*x7956);
IkReal x7965=((1.0)*x7956);
evalcond[0]=(((r21*x7964))+(((-1.0)*r22*x7962))+(((-1.0)*gconst149*r20*x7965)));
evalcond[1]=(cj0+(((-1.0)*r12*x7962))+(((-1.0)*gconst149*r10*x7965))+((x7956*x7958)));
evalcond[2]=(((r01*x7964))+(((-1.0)*x7960))+(((-1.0)*gconst149*r00*x7965))+(((-1.0)*r02*x7962)));
evalcond[3]=((((-1.0)*cj1*x7959))+(((-1.0)*r22*x7965))+((sj1*sj2))+((r20*x7963))+(((-1.0)*gconst148*r21*x7962)));
evalcond[4]=((((-1.0)*cj0*sj1*x7959))+((r00*x7963))+(((-1.0)*cj0*x7961))+(((-1.0)*r02*x7965))+(((-1.0)*gconst148*r01*x7962)));
evalcond[5]=((((-1.0)*x7960*x7961))+(((-1.0)*sj0*sj1*x7959))+(((-1.0)*x7958*x7962))+(((-1.0)*r12*x7965))+((r10*x7963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7966=((1.0)*gconst149);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x7966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
CheckValue<IkReal> x7968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x7966)))),-1);
if(!x7968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7967.value)+(((1.5707963267949)*(x7968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7969=IKsin(j4);
IkReal x7970=IKcos(j4);
IkReal x7971=(gconst148*r11);
IkReal x7972=((1.0)*cj2);
IkReal x7973=((1.0)*sj0);
IkReal x7974=(cj1*sj2);
IkReal x7975=((1.0)*x7970);
IkReal x7976=(gconst149*x7970);
IkReal x7977=(gconst148*x7969);
IkReal x7978=((1.0)*x7969);
evalcond[0]=((((-1.0)*r22*x7975))+(((-1.0)*gconst149*r20*x7978))+((r21*x7977)));
evalcond[1]=(cj0+((x7969*x7971))+(((-1.0)*r12*x7975))+(((-1.0)*gconst149*r10*x7978)));
evalcond[2]=(((r01*x7977))+(((-1.0)*x7973))+(((-1.0)*r02*x7975))+(((-1.0)*gconst149*r00*x7978)));
evalcond[3]=((((-1.0)*r22*x7978))+(((-1.0)*cj1*x7972))+((sj1*sj2))+((r20*x7976))+(((-1.0)*gconst148*r21*x7975)));
evalcond[4]=((((-1.0)*gconst148*r01*x7975))+((r00*x7976))+(((-1.0)*cj0*x7974))+(((-1.0)*r02*x7978))+(((-1.0)*cj0*sj1*x7972)));
evalcond[5]=((((-1.0)*sj0*sj1*x7972))+(((-1.0)*x7973*x7974))+(((-1.0)*r12*x7978))+((r10*x7976))+(((-1.0)*x7971*x7975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7979=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7979;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7980=((1.0)*cj5);
IkReal x7981=((((-1.0)*r11*x7980))+(((-1.0)*r10*sj5)));
j4eval[0]=x7981;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7980))+((r21*sj5))))));
j4eval[2]=IKsign(x7981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7982=cj5*cj5;
IkReal x7983=r01*r01;
IkReal x7984=(r01*sj5);
IkReal x7985=(cj5*r00);
IkReal x7986=((((2.0)*x7984*x7985))+((x7982*x7983))+(((-1.0)*(r02*r02)))+(((-1.0)*x7982*(r00*r00)))+(((-1.0)*x7983)));
j4eval[0]=x7986;
j4eval[1]=IKsign(x7986);
j4eval[2]=((IKabs(r02))+(IKabs((x7985+(((-1.0)*x7984))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7987=cj5*cj5;
IkReal x7988=r01*r01;
IkReal x7989=(r01*sj5);
IkReal x7990=(cj5*r00);
CheckValue<IkReal> x7991=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7987*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x7989*x7990))+(((-1.0)*x7988))+((x7987*x7988)))),-1);
if(!x7991.valid){
continue;
}
CheckValue<IkReal> x7992 = IKatan2WithCheck(IkReal((x7990+(((-1.0)*x7989)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7991.value)))+(x7992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7993=IKsin(j4);
IkReal x7994=IKcos(j4);
IkReal x7995=(cj5*r10);
IkReal x7996=(r01*sj5);
IkReal x7997=((1.0)*cj2);
IkReal x7998=(cj5*r00);
IkReal x7999=(cj5*r20);
IkReal x8000=((1.0)*x7994);
IkReal x8001=((1.0)*x7993);
IkReal x8002=(sj5*x7993);
evalcond[0]=(((r21*x8002))+(((-1.0)*x7999*x8001))+(((-1.0)*r22*x8000)));
evalcond[1]=((((-1.0)*x7995*x8001))+((r11*x8002))+(((-1.0)*r12*x8000)));
evalcond[2]=((((-1.0)*x7996*x8000))+((x7994*x7998))+(((-1.0)*r02*x8001)));
evalcond[3]=((-1.0)+(((-1.0)*x7998*x8001))+((x7993*x7996))+(((-1.0)*r02*x8000)));
evalcond[4]=(((x7994*x7999))+(((-1.0)*r21*sj5*x8000))+((sj1*sj2))+(((-1.0)*cj1*x7997))+(((-1.0)*r22*x8001)));
evalcond[5]=((((-1.0)*sj1*x7997))+(((-1.0)*r11*sj5*x8000))+((x7994*x7995))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8003=((1.0)*cj5);
CheckValue<IkReal> x8004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8003)))),-1);
if(!x8004.valid){
continue;
}
CheckValue<IkReal> x8005 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8004.value)))+(x8005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8006=IKsin(j4);
IkReal x8007=IKcos(j4);
IkReal x8008=(cj5*r10);
IkReal x8009=(r01*sj5);
IkReal x8010=((1.0)*cj2);
IkReal x8011=(cj5*r00);
IkReal x8012=(cj5*r20);
IkReal x8013=((1.0)*x8007);
IkReal x8014=((1.0)*x8006);
IkReal x8015=(sj5*x8006);
evalcond[0]=((((-1.0)*r22*x8013))+(((-1.0)*x8012*x8014))+((r21*x8015)));
evalcond[1]=((((-1.0)*x8008*x8014))+((r11*x8015))+(((-1.0)*r12*x8013)));
evalcond[2]=((((-1.0)*x8009*x8013))+(((-1.0)*r02*x8014))+((x8007*x8011)));
evalcond[3]=((-1.0)+(((-1.0)*x8011*x8014))+(((-1.0)*r02*x8013))+((x8006*x8009)));
evalcond[4]=((((-1.0)*r22*x8014))+(((-1.0)*cj1*x8010))+((sj1*sj2))+((x8007*x8012))+(((-1.0)*r21*sj5*x8013)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x8013))+(((-1.0)*sj1*x8010))+(((-1.0)*r12*x8014))+((x8007*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8016=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8016.value)))+(x8017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(cj5*r10);
IkReal x8021=(r01*sj5);
IkReal x8022=((1.0)*cj2);
IkReal x8023=(cj5*r00);
IkReal x8024=(cj5*r20);
IkReal x8025=((1.0)*x8019);
IkReal x8026=((1.0)*x8018);
IkReal x8027=(sj5*x8018);
evalcond[0]=(((r21*x8027))+(((-1.0)*r22*x8025))+(((-1.0)*x8024*x8026)));
evalcond[1]=((((-1.0)*r12*x8025))+(((-1.0)*x8020*x8026))+((r11*x8027)));
evalcond[2]=((((-1.0)*r02*x8026))+(((-1.0)*x8021*x8025))+((x8019*x8023)));
evalcond[3]=((-1.0)+((x8018*x8021))+(((-1.0)*r02*x8025))+(((-1.0)*x8023*x8026)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8022))+(((-1.0)*r21*sj5*x8025))+(((-1.0)*r22*x8026))+((x8019*x8024)));
evalcond[5]=((((-1.0)*sj1*x8022))+(((-1.0)*r12*x8026))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x8025))+((x8019*x8020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8028=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8028;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8029=((1.0)*cj5);
IkReal x8030=((((-1.0)*r21*x8029))+(((-1.0)*r20*sj5)));
j4eval[0]=x8030;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8029))))));
j4eval[2]=IKsign(x8030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8031=cj5*cj5;
IkReal x8032=r01*r01;
IkReal x8033=(cj5*r00);
IkReal x8034=(r01*sj5);
IkReal x8035=(((x8031*(r00*r00)))+(((-2.0)*x8033*x8034))+x8032+(r02*r02)+(((-1.0)*x8031*x8032)));
j4eval[0]=x8035;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8034))+x8033))));
j4eval[2]=IKsign(x8035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8036=cj5*cj5;
IkReal x8037=r01*r01;
IkReal x8038=(r01*sj5);
IkReal x8039=(cj5*r00);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(((((-1.0)*x8038))+x8039)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign((((x8036*(r00*r00)))+x8037+(r02*r02)+(((-2.0)*x8038*x8039))+(((-1.0)*x8036*x8037)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=(cj5*r10);
IkReal x8045=(r01*sj5);
IkReal x8046=(cj5*r00);
IkReal x8047=(cj5*r20);
IkReal x8048=((1.0)*x8043);
IkReal x8049=((1.0)*x8042);
IkReal x8050=(sj5*x8042);
evalcond[0]=((((-1.0)*x8047*x8049))+((r21*x8050))+(((-1.0)*r22*x8048)));
evalcond[1]=(((r11*x8050))+(((-1.0)*x8044*x8049))+(((-1.0)*r12*x8048)));
evalcond[2]=((((-1.0)*x8045*x8048))+(((-1.0)*r02*x8049))+((x8043*x8046)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8048))+((x8042*x8045))+(((-1.0)*x8046*x8049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x8048))+((x8043*x8044))+(((-1.0)*r12*x8049)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8048))+((x8043*x8047))+(((-1.0)*r22*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8051=((1.0)*cj5);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8051))+(((-1.0)*r20*sj5)))),-1);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8052.value)))+(x8053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8054=IKsin(j4);
IkReal x8055=IKcos(j4);
IkReal x8056=(cj5*r10);
IkReal x8057=(r01*sj5);
IkReal x8058=(cj5*r00);
IkReal x8059=(cj5*r20);
IkReal x8060=((1.0)*x8055);
IkReal x8061=((1.0)*x8054);
IkReal x8062=(sj5*x8054);
evalcond[0]=(((r21*x8062))+(((-1.0)*r22*x8060))+(((-1.0)*x8059*x8061)));
evalcond[1]=((((-1.0)*r12*x8060))+(((-1.0)*x8056*x8061))+((r11*x8062)));
evalcond[2]=((((-1.0)*x8057*x8060))+((x8055*x8058))+(((-1.0)*r02*x8061)));
evalcond[3]=((1.0)+((x8054*x8057))+(((-1.0)*x8058*x8061))+(((-1.0)*r02*x8060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x8061))+(((-1.0)*r11*sj5*x8060))+((x8055*x8056)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8060))+(((-1.0)*r22*x8061))+((x8055*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
CheckValue<IkReal> x8064=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8063.value)+(((1.5707963267949)*(x8064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8065=IKsin(j4);
IkReal x8066=IKcos(j4);
IkReal x8067=(cj5*r10);
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
IkReal x8070=(cj5*r20);
IkReal x8071=((1.0)*x8066);
IkReal x8072=((1.0)*x8065);
IkReal x8073=(sj5*x8065);
evalcond[0]=((((-1.0)*x8070*x8072))+((r21*x8073))+(((-1.0)*r22*x8071)));
evalcond[1]=((((-1.0)*x8067*x8072))+((r11*x8073))+(((-1.0)*r12*x8071)));
evalcond[2]=((((-1.0)*r02*x8072))+(((-1.0)*x8068*x8071))+((x8066*x8069)));
evalcond[3]=((1.0)+((x8065*x8068))+(((-1.0)*r02*x8071))+(((-1.0)*x8069*x8072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x8071))+((x8066*x8067))+(((-1.0)*r12*x8072)));
evalcond[5]=(((x8066*x8070))+(((-1.0)*r21*sj5*x8071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8074=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8074);
rxp1_1=(px*r21);
rxp1_2=(r11*x8074);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8075=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8075);
rxp1_1=(px*r21);
rxp1_2=(r11*x8075);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8076=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8076);
rxp1_1=(px*r21);
rxp1_2=(r11*x8076);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8079=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8079.valid){
continue;
}
IkReal x8077=x8079.value;
IkReal x8078=(sj0*x8077);
cj4array[0]=(((cj2*sj1*x8078))+((cj1*sj2*x8078)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8080=IKsin(j4);
IkReal x8081=IKcos(j4);
IkReal x8082=(cj5*r20);
IkReal x8083=(r21*sj5);
IkReal x8084=((1.0)*x8080);
IkReal x8085=((1.0)*x8081);
evalcond[0]=((-1.0)*r02*x8080);
evalcond[1]=((((-1.0)*r02*x8085))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8082*x8084))+((x8080*x8083)));
evalcond[3]=((((-1.0)*cj5*r10*x8084))+((r11*sj5*x8080)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8083*x8085))+((x8081*x8082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8087=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8087.valid){
continue;
}
IkReal x8086=x8087.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8086))+((cj1*cj2*x8086)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8088=IKsin(j4);
IkReal x8089=IKcos(j4);
IkReal x8090=(r11*sj5);
IkReal x8091=((1.0)*sj0);
IkReal x8092=((1.0)*x8089);
IkReal x8093=((1.0)*cj5*x8088);
evalcond[0]=((-1.0)*r02*x8088);
evalcond[1]=((((-1.0)*r02*x8092))+(((-1.0)*x8091)));
evalcond[2]=(((r21*sj5*x8088))+(((-1.0)*r20*x8093)));
evalcond[3]=(((x8088*x8090))+(((-1.0)*r10*x8093)));
evalcond[4]=((((-1.0)*cj2*sj1*x8091))+(((-1.0)*cj1*sj2*x8091))+(((-1.0)*x8090*x8092))+((cj5*r10*x8089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8094=IKPowWithIntegerCheck(r02,-1);
if(!x8094.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8094.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=((1.0)*sj0);
IkReal x8098=(cj5*x8096);
IkReal x8099=(sj5*x8095);
IkReal x8100=((1.0)*sj5*x8096);
IkReal x8101=((1.0)*cj5*x8095);
evalcond[0]=((-1.0)*r02*x8095);
evalcond[1]=((((-1.0)*r20*x8101))+((r21*x8099)));
evalcond[2]=(((r11*x8099))+(((-1.0)*r10*x8101)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8100))+((r20*x8098)));
evalcond[4]=((((-1.0)*r11*x8100))+(((-1.0)*cj2*sj1*x8097))+((r10*x8098))+(((-1.0)*cj1*sj2*x8097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8102=((1.0)*sj0);
IkReal x8103=((1.0)*cj0);
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8103))+(((-1.0)*r12*x8102)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8103))+(((-1.0)*r11*sj5*x8102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8104.value)+(((1.5707963267949)*(x8105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8106=IKsin(j4);
IkReal x8107=IKcos(j4);
IkReal x8108=(cj5*r10);
IkReal x8109=(r01*sj5);
IkReal x8110=((1.0)*cj2);
IkReal x8111=(cj5*r00);
IkReal x8112=((1.0)*sj0);
IkReal x8113=(cj5*r20);
IkReal x8114=(cj1*sj2);
IkReal x8115=((1.0)*x8107);
IkReal x8116=((1.0)*x8106);
IkReal x8117=(sj5*x8106);
evalcond[0]=((((-1.0)*x8113*x8116))+((r21*x8117))+(((-1.0)*r22*x8115)));
evalcond[1]=(cj0+(((-1.0)*r12*x8115))+(((-1.0)*x8108*x8116))+((r11*x8117)));
evalcond[2]=(((x8106*x8109))+(((-1.0)*x8112))+(((-1.0)*x8111*x8116))+(((-1.0)*r02*x8115)));
evalcond[3]=((((-1.0)*r21*sj5*x8115))+((sj1*sj2))+(((-1.0)*r22*x8116))+((x8107*x8113))+(((-1.0)*cj1*x8110)));
evalcond[4]=((((-1.0)*x8109*x8115))+(((-1.0)*cj0*sj1*x8110))+(((-1.0)*r02*x8116))+((x8107*x8111))+(((-1.0)*cj0*x8114)));
evalcond[5]=((((-1.0)*x8112*x8114))+(((-1.0)*r11*sj5*x8115))+(((-1.0)*r12*x8116))+((x8107*x8108))+(((-1.0)*sj0*sj1*x8110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8118=((1.0)*cj5);
CheckValue<IkReal> x8119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8118))+(((-1.0)*r10*sj5)))),-1);
if(!x8119.valid){
continue;
}
CheckValue<IkReal> x8120 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8118))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8119.value)))+(x8120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8121=IKsin(j4);
IkReal x8122=IKcos(j4);
IkReal x8123=(cj5*r10);
IkReal x8124=(r01*sj5);
IkReal x8125=((1.0)*cj2);
IkReal x8126=(cj5*r00);
IkReal x8127=((1.0)*sj0);
IkReal x8128=(cj5*r20);
IkReal x8129=(cj1*sj2);
IkReal x8130=((1.0)*x8122);
IkReal x8131=((1.0)*x8121);
IkReal x8132=(sj5*x8121);
evalcond[0]=((((-1.0)*r22*x8130))+((r21*x8132))+(((-1.0)*x8128*x8131)));
evalcond[1]=((((-1.0)*x8123*x8131))+((r11*x8132))+cj0+(((-1.0)*r12*x8130)));
evalcond[2]=((((-1.0)*r02*x8130))+((x8121*x8124))+(((-1.0)*x8127))+(((-1.0)*x8126*x8131)));
evalcond[3]=(((x8122*x8128))+(((-1.0)*r22*x8131))+(((-1.0)*r21*sj5*x8130))+((sj1*sj2))+(((-1.0)*cj1*x8125)));
evalcond[4]=((((-1.0)*r02*x8131))+((x8122*x8126))+(((-1.0)*x8124*x8130))+(((-1.0)*cj0*sj1*x8125))+(((-1.0)*cj0*x8129)));
evalcond[5]=(((x8122*x8123))+(((-1.0)*r12*x8131))+(((-1.0)*sj0*sj1*x8125))+(((-1.0)*r11*sj5*x8130))+(((-1.0)*x8127*x8129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8133=((1.0)*cj5);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8133)))),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKsin(j4);
IkReal x8137=IKcos(j4);
IkReal x8138=(cj5*r10);
IkReal x8139=(r01*sj5);
IkReal x8140=((1.0)*cj2);
IkReal x8141=(cj5*r00);
IkReal x8142=((1.0)*sj0);
IkReal x8143=(cj5*r20);
IkReal x8144=(cj1*sj2);
IkReal x8145=((1.0)*x8137);
IkReal x8146=((1.0)*x8136);
IkReal x8147=(sj5*x8136);
evalcond[0]=((((-1.0)*x8143*x8146))+(((-1.0)*r22*x8145))+((r21*x8147)));
evalcond[1]=(cj0+(((-1.0)*x8138*x8146))+((r11*x8147))+(((-1.0)*r12*x8145)));
evalcond[2]=(((x8136*x8139))+(((-1.0)*x8141*x8146))+(((-1.0)*r02*x8145))+(((-1.0)*x8142)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x8146))+(((-1.0)*r21*sj5*x8145))+(((-1.0)*cj1*x8140))+((x8137*x8143)));
evalcond[4]=((((-1.0)*x8139*x8145))+(((-1.0)*r02*x8146))+(((-1.0)*cj0*sj1*x8140))+(((-1.0)*cj0*x8144))+((x8137*x8141)));
evalcond[5]=((((-1.0)*sj0*sj1*x8140))+(((-1.0)*r11*sj5*x8145))+((x8137*x8138))+(((-1.0)*r12*x8146))+(((-1.0)*x8142*x8144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8148=cj1*cj1;
IkReal x8149=cj2*cj2;
IkReal x8150=((170000000.0)*sj1);
IkReal x8151=(cj1*sj2);
IkReal x8152=((14850585.0)*sj5);
IkReal x8153=((4132419.0)*sj5);
IkReal x8154=((4132419.0)*cj5);
IkReal x8155=(cj2*sj1);
IkReal x8156=((14850585.0)*cj5);
IkReal x8157=((133365000.0)*cj2);
IkReal x8158=((16090500.0)*cj5*sj1);
IkReal x8159=((156900000.0)*x8155);
IkReal x8160=((16090500.0)*sj1*sj5);
CheckValue<IkReal> x8161 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((r10*x8160))+((r11*x8155*x8156))+((r10*x8151*x8152))+((r11*x8151*x8156))+(((156900000.0)*py*x8151))+((py*x8159))+((py*x8150))+((r11*x8158))+((r10*x8152*x8155))+(((-1.0)*r00*x8153))+(((-1.0)*r01*x8154)))),IkReal((((r00*x8152*x8155))+((r01*x8155*x8156))+(((43660000.0)*py))+((r10*x8153))+((r00*x8160))+((r01*x8158))+(((156900000.0)*px*x8151))+((r11*x8154))+((r00*x8151*x8152))+((px*x8159))+((px*x8150))+((r01*x8151*x8156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8161.valid){
continue;
}
CheckValue<IkReal> x8162=IKPowWithIntegerCheck(IKsign(((77015489.0)+(((133365000.0)*sj1*x8151))+(((-1.0)*x8148*x8157))+(((123088050.0)*x8151*x8155))+x8157+(((-123088050.0)*x8148*x8149))+(((61544025.0)*x8149))+(((-10705975.0)*x8148)))),-1);
if(!x8162.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8161.value)+(((1.5707963267949)*(x8162.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8163=IKcos(j0);
IkReal x8164=IKsin(j0);
IkReal x8165=(cj2*sj1);
IkReal x8166=(cj1*sj2);
IkReal x8167=((0.09465)*cj5);
IkReal x8168=((0.425)*sj1);
IkReal x8169=((0.09465)*sj5);
IkReal x8170=((0.39225)*x8164);
IkReal x8171=((0.39225)*x8163);
evalcond[0]=(((x8163*x8168))+((x8165*x8171))+(((-1.0)*r01*x8167))+((x8166*x8171))+(((-1.0)*r00*x8169))+(((-0.10915)*x8164))+(((-1.0)*px)));
evalcond[1]=(((x8164*x8168))+((x8165*x8170))+(((0.10915)*x8163))+(((-1.0)*r11*x8167))+(((-1.0)*r10*x8169))+((x8166*x8170))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8172=((1.0)*cj5);
IkReal x8173=((((-1.0)*r01*x8172))+(((-1.0)*r00*sj5)));
j4eval[0]=x8173;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8172)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8174=((1.0)*cj5);
IkReal x8175=((((-1.0)*r11*x8174))+(((-1.0)*r10*sj5)));
j4eval[0]=x8175;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8174))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8176=((1.0)*sj0);
IkReal x8177=((1.0)*cj0);
IkReal x8178=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8178;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8177))+(((-1.0)*r11*sj5*x8176)))))+(IKabs(((((-1.0)*r12*x8176))+(((-1.0)*r02*x8177))))));
j4eval[2]=IKsign(x8178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8179=((-1.0)*r20);
IkReal x8181 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8181)==0){
continue;
}
IkReal x8180=pow(x8181,-0.5);
CheckValue<IkReal> x8182 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8179),IKFAST_ATAN2_MAGTHRESH);
if(!x8182.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8182.value));
IkReal gconst1=(r21*x8180);
IkReal gconst2=(x8179*x8180);
CheckValue<IkReal> x8183 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8183.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8183.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8184=((-1.0)*r20);
IkReal x8185=x8180;
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8184),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
IkReal x8186=((-1.0)*(x8187.value));
sj5=gconst1;
cj5=gconst2;
j5=x8186;
IkReal gconst0=x8186;
IkReal gconst1=(r21*x8185);
IkReal gconst2=(x8184*x8185);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8188=((-1.0)*r20);
IkReal x8189=x8180;
CheckValue<IkReal> x8191 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8188),IKFAST_ATAN2_MAGTHRESH);
if(!x8191.valid){
continue;
}
IkReal x8190=((-1.0)*(x8191.value));
sj5=gconst1;
cj5=gconst2;
j5=x8190;
IkReal gconst0=x8190;
IkReal gconst1=(r21*x8189);
IkReal gconst2=(x8188*x8189);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8192=((-1.0)*r20);
IkReal x8193=x8180;
CheckValue<IkReal> x8195 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8192),IKFAST_ATAN2_MAGTHRESH);
if(!x8195.valid){
continue;
}
IkReal x8194=((-1.0)*(x8195.value));
sj5=gconst1;
cj5=gconst2;
j5=x8194;
IkReal gconst0=x8194;
IkReal gconst1=(r21*x8193);
IkReal gconst2=(x8192*x8193);
IkReal x8196=r22*r22;
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8196))),-1);
if(!x8200.valid){
continue;
}
IkReal x8197=x8200.value;
IkReal x8198=(sj3*x8197);
IkReal x8199=(((sj3*x8196))+((x8198*(r21*r21*r21*r21)))+((x8198*(r20*r20*r20*r20)))+(((2.0)*x8198*(r20*r20)*(r21*r21))));
j4eval[0]=x8199;
j4eval[1]=IKsign(x8199);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8201=((-1.0)*r20);
IkReal x8202=x8180;
CheckValue<IkReal> x8204 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8201),IKFAST_ATAN2_MAGTHRESH);
if(!x8204.valid){
continue;
}
IkReal x8203=((-1.0)*(x8204.value));
sj5=gconst1;
cj5=gconst2;
j5=x8203;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8203;
IkReal gconst1=(r21*x8202);
IkReal gconst2=(x8201*x8202);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8205=((-1.0)*r20);
IkReal x8206=x8180;
CheckValue<IkReal> x8208 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8205),IKFAST_ATAN2_MAGTHRESH);
if(!x8208.valid){
continue;
}
IkReal x8207=((-1.0)*(x8208.value));
sj5=gconst1;
cj5=gconst2;
j5=x8207;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8207;
IkReal gconst1=(r21*x8206);
IkReal gconst2=(x8205*x8206);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8209=((-1.0)*r20);
IkReal x8210=x8180;
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8209),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
IkReal x8211=((-1.0)*(x8212.value));
sj5=gconst1;
cj5=gconst2;
j5=x8211;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8211;
IkReal gconst1=(r21*x8210);
IkReal gconst2=(x8209*x8210);
IkReal x8213=((1.0)*(r22*r22));
CheckValue<IkReal> x8217=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8213))),-1);
if(!x8217.valid){
continue;
}
IkReal x8214=x8217.value;
IkReal x8215=((1.0)*x8214);
IkReal x8216=((((-2.0)*x8214*(r20*r20)*(r21*r21)))+(((-1.0)*x8215*(r21*r21*r21*r21)))+(((-1.0)*x8213))+(((-1.0)*x8215*(r20*r20*r20*r20))));
j4eval[0]=x8216;
j4eval[1]=IKsign(x8216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8218=((-1.0)*r20);
IkReal x8219=x8180;
CheckValue<IkReal> x8221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8218),IKFAST_ATAN2_MAGTHRESH);
if(!x8221.valid){
continue;
}
IkReal x8220=((-1.0)*(x8221.value));
sj5=gconst1;
cj5=gconst2;
j5=x8220;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8220;
IkReal gconst1=(r21*x8219);
IkReal gconst2=(x8218*x8219);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8222=((-1.0)*r20);
IkReal x8223=x8180;
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8222),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
IkReal x8224=((-1.0)*(x8225.value));
sj5=gconst1;
cj5=gconst2;
j5=x8224;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8224;
IkReal gconst1=(r21*x8223);
IkReal gconst2=(x8222*x8223);
IkReal x8226=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8230=IKPowWithIntegerCheck(x8226,-1);
if(!x8230.valid){
continue;
}
IkReal x8227=x8230.value;
IkReal x8228=((1.0)*x8227);
IkReal x8229=((((-1.0)*x8228*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8227))+(((-1.0)*(r12*r12)))+(((-1.0)*x8228*(r10*r10)*(r20*r20))));
j4eval[0]=x8229;
j4eval[1]=r12;
j4eval[2]=x8226;
j4eval[3]=IKsign(x8229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8231=((-1.0)*r20);
IkReal x8232=x8180;
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8231),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
IkReal x8233=((-1.0)*(x8234.value));
sj5=gconst1;
cj5=gconst2;
j5=x8233;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8233;
IkReal gconst1=(r21*x8232);
IkReal gconst2=(x8231*x8232);
IkReal x8235=r22*r22;
IkReal x8236=(cj1*cj2*r12);
IkReal x8237=(r12*sj1*sj2);
CheckValue<IkReal> x8241=IKPowWithIntegerCheck(((-1.0)+x8235),-1);
if(!x8241.valid){
continue;
}
IkReal x8238=x8241.value;
if((((1.0)+(((-1.0)*x8235)))) < -0.00001)
continue;
IkReal x8239=IKsqrt(((1.0)+(((-1.0)*x8235))));
IkReal x8240=(r22*x8238*x8239);
j4eval[0]=((IKabs((((x8237*x8240))+(((-1.0)*x8236*x8240)))))+(IKabs(((((-1.0)*x8237))+x8236))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8242=(sj1*sj2);
IkReal x8243=(gconst1*r11);
IkReal x8244=(cj1*cj2);
IkReal x8245=(gconst2*r10);
CheckValue<IkReal> x8246=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8246.valid){
continue;
}
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal(((((-1.0)*x8243*x8244))+(((-1.0)*x8242*x8245))+((x8242*x8243))+((x8244*x8245)))),IkReal((((r12*x8244))+(((-1.0)*r12*x8242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8246.value)))+(x8247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8248=IKcos(j4);
IkReal x8249=IKsin(j4);
IkReal x8250=((1.0)*cj2);
IkReal x8251=((1.0)*x8248);
IkReal x8252=(gconst1*x8248);
IkReal x8253=(gconst1*x8249);
IkReal x8254=((1.0)*gconst2*x8249);
evalcond[0]=(((r11*x8252))+((r12*x8249))+(((-1.0)*gconst2*r10*x8251)));
evalcond[1]=(((r21*x8253))+(((-1.0)*r22*x8251))+(((-1.0)*r20*x8254)));
evalcond[2]=(((r01*x8253))+(((-1.0)*r00*x8254))+(((-1.0)*r02*x8251)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8251))+(((-1.0)*r10*x8254))+((r11*x8253)));
evalcond[4]=((((-1.0)*gconst2*r20*x8251))+((r21*x8252))+((sj1*sj2))+((r22*x8249))+(((-1.0)*cj1*x8250)));
evalcond[5]=(((r01*x8252))+((r02*x8249))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8250))+(((-1.0)*gconst2*r00*x8251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8255=(gconst2*r10);
IkReal x8256=(gconst1*r11);
CheckValue<IkReal> x8257=IKPowWithIntegerCheck(IKsign(((((2.0)*x8255*x8256))+(((-1.0)*(x8255*x8255)))+(((-1.0)*(x8256*x8256)))+(((-1.0)*(r12*r12))))),-1);
if(!x8257.valid){
continue;
}
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(((((-1.0)*x8255))+x8256)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8257.value)))+(x8258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8259=IKcos(j4);
IkReal x8260=IKsin(j4);
IkReal x8261=((1.0)*cj2);
IkReal x8262=((1.0)*x8259);
IkReal x8263=(gconst1*x8259);
IkReal x8264=(gconst1*x8260);
IkReal x8265=((1.0)*gconst2*x8260);
evalcond[0]=((((-1.0)*gconst2*r10*x8262))+((r12*x8260))+((r11*x8263)));
evalcond[1]=((((-1.0)*r20*x8265))+((r21*x8264))+(((-1.0)*r22*x8262)));
evalcond[2]=((((-1.0)*r02*x8262))+((r01*x8264))+(((-1.0)*r00*x8265)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8262))+(((-1.0)*r10*x8265))+((r11*x8264)));
evalcond[4]=((((-1.0)*gconst2*r20*x8262))+((r21*x8263))+((sj1*sj2))+(((-1.0)*cj1*x8261))+((r22*x8260)));
evalcond[5]=((((-1.0)*gconst2*r00*x8262))+(((-1.0)*sj1*x8261))+((r02*x8260))+(((-1.0)*cj1*sj2))+((r01*x8263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8266=((1.0)*gconst2);
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8266))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8266)))),-1);
if(!x8268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8267.value)+(((1.5707963267949)*(x8268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8269=IKcos(j4);
IkReal x8270=IKsin(j4);
IkReal x8271=((1.0)*cj2);
IkReal x8272=((1.0)*x8269);
IkReal x8273=(gconst1*x8269);
IkReal x8274=(gconst1*x8270);
IkReal x8275=((1.0)*gconst2*x8270);
evalcond[0]=((((-1.0)*gconst2*r10*x8272))+((r11*x8273))+((r12*x8270)));
evalcond[1]=((((-1.0)*r20*x8275))+(((-1.0)*r22*x8272))+((r21*x8274)));
evalcond[2]=((((-1.0)*r02*x8272))+(((-1.0)*r00*x8275))+((r01*x8274)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8275))+((r11*x8274))+(((-1.0)*r12*x8272)));
evalcond[4]=((((-1.0)*gconst2*r20*x8272))+((sj1*sj2))+((r22*x8270))+((r21*x8273))+(((-1.0)*cj1*x8271)));
evalcond[5]=((((-1.0)*gconst2*r00*x8272))+(((-1.0)*sj1*x8271))+((r02*x8270))+(((-1.0)*cj1*sj2))+((r01*x8273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8276=((-1.0)*r20);
IkReal x8277=x8180;
CheckValue<IkReal> x8279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8276),IKFAST_ATAN2_MAGTHRESH);
if(!x8279.valid){
continue;
}
IkReal x8278=((-1.0)*(x8279.value));
sj5=gconst1;
cj5=gconst2;
j5=x8278;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8278;
IkReal gconst1=(r21*x8277);
IkReal gconst2=(x8276*x8277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8280=((-1.0)*r20);
IkReal x8281=x8180;
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8280),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
IkReal x8282=((-1.0)*(x8283.value));
sj5=gconst1;
cj5=gconst2;
j5=x8282;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8282;
IkReal gconst1=(r21*x8281);
IkReal gconst2=(x8280*x8281);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8284=((-1.0)*r20);
IkReal x8285=x8180;
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8284),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
IkReal x8286=((-1.0)*(x8287.value));
sj5=gconst1;
cj5=gconst2;
j5=x8286;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8286;
IkReal gconst1=(r21*x8285);
IkReal gconst2=(x8284*x8285);
IkReal x8288=r22*r22;
IkReal x8289=(cj1*cj2*r12);
IkReal x8290=(r12*sj1*sj2);
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(((-1.0)+x8288),-1);
if(!x8294.valid){
continue;
}
IkReal x8291=x8294.value;
if((((1.0)+(((-1.0)*x8288)))) < -0.00001)
continue;
IkReal x8292=IKsqrt(((1.0)+(((-1.0)*x8288))));
IkReal x8293=(r22*x8291*x8292);
j4eval[0]=((IKabs(((((-1.0)*x8290))+x8289)))+(IKabs(((((-1.0)*x8289*x8293))+((x8290*x8293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8295=(sj1*sj2);
IkReal x8296=(gconst1*r11);
IkReal x8297=(cj1*cj2);
IkReal x8298=(gconst2*r10);
CheckValue<IkReal> x8299=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8299.valid){
continue;
}
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal((((x8297*x8298))+(((-1.0)*x8296*x8297))+(((-1.0)*x8295*x8298))+((x8295*x8296)))),IkReal((((r12*x8297))+(((-1.0)*r12*x8295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8299.value)))+(x8300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8301=IKcos(j4);
IkReal x8302=IKsin(j4);
IkReal x8303=((1.0)*x8301);
IkReal x8304=(gconst1*x8301);
IkReal x8305=(gconst1*x8302);
IkReal x8306=((1.0)*gconst2*x8302);
evalcond[0]=(((r12*x8302))+((r11*x8304))+(((-1.0)*gconst2*r10*x8303)));
evalcond[1]=((((-1.0)*r22*x8303))+((r21*x8305))+(((-1.0)*r20*x8306)));
evalcond[2]=((((-1.0)*r00*x8306))+((r01*x8305))+(((-1.0)*r02*x8303)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8303))+(((-1.0)*r10*x8306))+((r11*x8305)));
evalcond[4]=(((cj2*sj1))+((r02*x8302))+((cj1*sj2))+((r01*x8304))+(((-1.0)*gconst2*r00*x8303)));
evalcond[5]=(((r22*x8302))+((r21*x8304))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8307=(gconst1*r11);
IkReal x8308=(gconst2*r10);
CheckValue<IkReal> x8309=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8307*x8308))+(x8307*x8307)+(x8308*x8308))),-1);
if(!x8309.valid){
continue;
}
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal((x8307+(((-1.0)*x8308)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8309.value)))+(x8310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8311=IKcos(j4);
IkReal x8312=IKsin(j4);
IkReal x8313=((1.0)*x8311);
IkReal x8314=(gconst1*x8311);
IkReal x8315=(gconst1*x8312);
IkReal x8316=((1.0)*gconst2*x8312);
evalcond[0]=((((-1.0)*gconst2*r10*x8313))+((r11*x8314))+((r12*x8312)));
evalcond[1]=((((-1.0)*r20*x8316))+(((-1.0)*r22*x8313))+((r21*x8315)));
evalcond[2]=(((r01*x8315))+(((-1.0)*r02*x8313))+(((-1.0)*r00*x8316)));
evalcond[3]=((-1.0)+((r11*x8315))+(((-1.0)*r12*x8313))+(((-1.0)*r10*x8316)));
evalcond[4]=(((cj2*sj1))+((r01*x8314))+((cj1*sj2))+((r02*x8312))+(((-1.0)*gconst2*r00*x8313)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8314))+(((-1.0)*gconst2*r20*x8313))+((r22*x8312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8317.value)+(((1.5707963267949)*(x8318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8319=IKcos(j4);
IkReal x8320=IKsin(j4);
IkReal x8321=((1.0)*x8319);
IkReal x8322=(gconst1*x8319);
IkReal x8323=(gconst1*x8320);
IkReal x8324=((1.0)*gconst2*x8320);
evalcond[0]=((((-1.0)*gconst2*r10*x8321))+((r12*x8320))+((r11*x8322)));
evalcond[1]=((((-1.0)*r22*x8321))+((r21*x8323))+(((-1.0)*r20*x8324)));
evalcond[2]=((((-1.0)*r00*x8324))+((r01*x8323))+(((-1.0)*r02*x8321)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8324))+((r11*x8323))+(((-1.0)*r12*x8321)));
evalcond[4]=(((cj2*sj1))+((r02*x8320))+((cj1*sj2))+((r01*x8322))+(((-1.0)*gconst2*r00*x8321)));
evalcond[5]=(((r22*x8320))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8322))+(((-1.0)*gconst2*r20*x8321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8325=((-1.0)*r20);
IkReal x8326=x8180;
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8325),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
IkReal x8327=((-1.0)*(x8328.value));
sj5=gconst1;
cj5=gconst2;
j5=x8327;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8327;
IkReal gconst1=(r21*x8326);
IkReal gconst2=(x8325*x8326);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8329=((-1.0)*r20);
IkReal x8330=x8180;
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8329),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
IkReal x8331=((-1.0)*(x8332.value));
sj5=gconst1;
cj5=gconst2;
j5=x8331;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8331;
IkReal gconst1=(r21*x8330);
IkReal gconst2=(x8329*x8330);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8333=((-1.0)*r20);
IkReal x8334=x8180;
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8333),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
IkReal x8335=((-1.0)*(x8336.value));
sj5=gconst1;
cj5=gconst2;
j5=x8335;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8335;
IkReal gconst1=(r21*x8334);
IkReal gconst2=(x8333*x8334);
IkReal x8337=r22*r22;
IkReal x8338=(r02*sj1*sj2);
IkReal x8339=(cj1*cj2*r02);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(((-1.0)+x8337),-1);
if(!x8343.valid){
continue;
}
IkReal x8340=x8343.value;
if((((1.0)+(((-1.0)*x8337)))) < -0.00001)
continue;
IkReal x8341=IKsqrt(((1.0)+(((-1.0)*x8337))));
IkReal x8342=(r22*x8340*x8341);
j4eval[0]=((IKabs(((((-1.0)*x8339*x8342))+((x8338*x8342)))))+(IKabs((x8339+(((-1.0)*x8338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8344=(gconst2*r00);
IkReal x8345=(gconst1*r01);
IkReal x8346=(cj1*cj2);
IkReal x8347=((1.0)*sj1*sj2);
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8348.valid){
continue;
}
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal((((sj1*sj2*x8345))+((x8344*x8346))+(((-1.0)*x8345*x8346))+(((-1.0)*x8344*x8347)))),IkReal(((((-1.0)*r02*x8347))+((r02*x8346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8348.value)))+(x8349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8350=IKcos(j4);
IkReal x8351=IKsin(j4);
IkReal x8352=((1.0)*cj2);
IkReal x8353=((1.0)*x8350);
IkReal x8354=(gconst1*x8350);
IkReal x8355=(gconst1*x8351);
IkReal x8356=((1.0)*gconst2*x8351);
evalcond[0]=(((r02*x8351))+(((-1.0)*gconst2*r00*x8353))+((r01*x8354)));
evalcond[1]=((((-1.0)*r22*x8353))+(((-1.0)*r20*x8356))+((r21*x8355)));
evalcond[2]=(((r11*x8355))+(((-1.0)*r12*x8353))+(((-1.0)*r10*x8356)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8353))+(((-1.0)*r00*x8356))+((r01*x8355)));
evalcond[4]=(((r22*x8351))+((sj1*sj2))+(((-1.0)*cj1*x8352))+(((-1.0)*gconst2*r20*x8353))+((r21*x8354)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x8353))+((r11*x8354))+((r12*x8351))+(((-1.0)*sj1*x8352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8357=(gconst1*r01);
IkReal x8358=(gconst2*r00);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal((x8357+(((-1.0)*x8358)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8357*x8358))+(x8358*x8358)+(r02*r02)+(x8357*x8357))),-1);
if(!x8360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8359.value)+(((1.5707963267949)*(x8360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8361=IKcos(j4);
IkReal x8362=IKsin(j4);
IkReal x8363=((1.0)*cj2);
IkReal x8364=((1.0)*x8361);
IkReal x8365=(gconst1*x8361);
IkReal x8366=(gconst1*x8362);
IkReal x8367=((1.0)*gconst2*x8362);
evalcond[0]=(((r01*x8365))+((r02*x8362))+(((-1.0)*gconst2*r00*x8364)));
evalcond[1]=((((-1.0)*r20*x8367))+(((-1.0)*r22*x8364))+((r21*x8366)));
evalcond[2]=((((-1.0)*r12*x8364))+(((-1.0)*r10*x8367))+((r11*x8366)));
evalcond[3]=((-1.0)+((r01*x8366))+(((-1.0)*r00*x8367))+(((-1.0)*r02*x8364)));
evalcond[4]=((((-1.0)*cj1*x8363))+((r22*x8362))+((sj1*sj2))+((r21*x8365))+(((-1.0)*gconst2*r20*x8364)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r10*x8364))+(((-1.0)*sj1*x8363))+((r12*x8362))+((r11*x8365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8368=((1.0)*gconst2);
CheckValue<IkReal> x8369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8368))+(((-1.0)*gconst1*r10)))),-1);
if(!x8369.valid){
continue;
}
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8368))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8369.value)))+(x8370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8371=IKcos(j4);
IkReal x8372=IKsin(j4);
IkReal x8373=((1.0)*cj2);
IkReal x8374=((1.0)*x8371);
IkReal x8375=(gconst1*x8371);
IkReal x8376=(gconst1*x8372);
IkReal x8377=((1.0)*gconst2*x8372);
evalcond[0]=(((r02*x8372))+(((-1.0)*gconst2*r00*x8374))+((r01*x8375)));
evalcond[1]=((((-1.0)*r20*x8377))+(((-1.0)*r22*x8374))+((r21*x8376)));
evalcond[2]=((((-1.0)*r12*x8374))+(((-1.0)*r10*x8377))+((r11*x8376)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8374))+(((-1.0)*r00*x8377))+((r01*x8376)));
evalcond[4]=((((-1.0)*cj1*x8373))+((sj1*sj2))+((r21*x8375))+(((-1.0)*gconst2*r20*x8374))+((r22*x8372)));
evalcond[5]=((((-1.0)*gconst2*r10*x8374))+(((-1.0)*cj1*sj2))+((r12*x8372))+(((-1.0)*sj1*x8373))+((r11*x8375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8378=((-1.0)*r20);
IkReal x8379=x8180;
CheckValue<IkReal> x8381 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8378),IKFAST_ATAN2_MAGTHRESH);
if(!x8381.valid){
continue;
}
IkReal x8380=((-1.0)*(x8381.value));
sj5=gconst1;
cj5=gconst2;
j5=x8380;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8380;
IkReal gconst1=(r21*x8379);
IkReal gconst2=(x8378*x8379);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8382=((-1.0)*r20);
IkReal x8383=x8180;
CheckValue<IkReal> x8385 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8382),IKFAST_ATAN2_MAGTHRESH);
if(!x8385.valid){
continue;
}
IkReal x8384=((-1.0)*(x8385.value));
sj5=gconst1;
cj5=gconst2;
j5=x8384;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8384;
IkReal gconst1=(r21*x8383);
IkReal gconst2=(x8382*x8383);
IkReal x8386=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(x8386,-1);
if(!x8390.valid){
continue;
}
IkReal x8387=x8390.value;
IkReal x8388=((1.0)*x8387);
IkReal x8389=((((-1.0)*x8388*(r00*r00)*(r20*r20)))+(((-1.0)*x8388*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8387))+(((-1.0)*(r02*r02))));
j4eval[0]=x8389;
j4eval[1]=IKsign(x8389);
j4eval[2]=r02;
j4eval[3]=x8386;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8391=((-1.0)*r20);
IkReal x8392=x8180;
CheckValue<IkReal> x8394 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8391),IKFAST_ATAN2_MAGTHRESH);
if(!x8394.valid){
continue;
}
IkReal x8393=((-1.0)*(x8394.value));
sj5=gconst1;
cj5=gconst2;
j5=x8393;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8393;
IkReal gconst1=(r21*x8392);
IkReal gconst2=(x8391*x8392);
IkReal x8395=r22*r22;
IkReal x8396=(r02*sj1*sj2);
IkReal x8397=(cj1*cj2*r02);
CheckValue<IkReal> x8401=IKPowWithIntegerCheck(((-1.0)+x8395),-1);
if(!x8401.valid){
continue;
}
IkReal x8398=x8401.value;
if((((1.0)+(((-1.0)*x8395)))) < -0.00001)
continue;
IkReal x8399=IKsqrt(((1.0)+(((-1.0)*x8395))));
IkReal x8400=(r22*x8398*x8399);
j4eval[0]=((IKabs((((x8396*x8400))+(((-1.0)*x8397*x8400)))))+(IKabs((x8397+(((-1.0)*x8396))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8402=(gconst2*r00);
IkReal x8403=(gconst1*r01);
IkReal x8404=(cj1*cj2);
IkReal x8405=((1.0)*sj1*sj2);
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal((((sj1*sj2*x8403))+(((-1.0)*x8402*x8405))+((x8402*x8404))+(((-1.0)*x8403*x8404)))),IkReal(((((-1.0)*r02*x8405))+((r02*x8404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
CheckValue<IkReal> x8407=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8406.value)+(((1.5707963267949)*(x8407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8408=IKcos(j4);
IkReal x8409=IKsin(j4);
IkReal x8410=((1.0)*x8408);
IkReal x8411=(gconst1*x8408);
IkReal x8412=(gconst1*x8409);
IkReal x8413=((1.0)*gconst2*x8409);
evalcond[0]=(((r01*x8411))+((r02*x8409))+(((-1.0)*gconst2*r00*x8410)));
evalcond[1]=((((-1.0)*r20*x8413))+((r21*x8412))+(((-1.0)*r22*x8410)));
evalcond[2]=((((-1.0)*r12*x8410))+((r11*x8412))+(((-1.0)*r10*x8413)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8413))+(((-1.0)*r02*x8410))+((r01*x8412)));
evalcond[4]=(((cj2*sj1))+((r12*x8409))+((cj1*sj2))+((r11*x8411))+(((-1.0)*gconst2*r10*x8410)));
evalcond[5]=(((r22*x8409))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x8411))+(((-1.0)*gconst2*r20*x8410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8414=(gconst1*r01);
IkReal x8415=(gconst2*r00);
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(((((-1.0)*x8415))+x8414)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
CheckValue<IkReal> x8417=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8415*x8415)))+(((2.0)*x8414*x8415))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8414*x8414))))),-1);
if(!x8417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8416.value)+(((1.5707963267949)*(x8417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8418=IKcos(j4);
IkReal x8419=IKsin(j4);
IkReal x8420=((1.0)*x8418);
IkReal x8421=(gconst1*x8418);
IkReal x8422=(gconst1*x8419);
IkReal x8423=((1.0)*gconst2*x8419);
evalcond[0]=(((r02*x8419))+(((-1.0)*gconst2*r00*x8420))+((r01*x8421)));
evalcond[1]=(((r21*x8422))+(((-1.0)*r22*x8420))+(((-1.0)*r20*x8423)));
evalcond[2]=((((-1.0)*r10*x8423))+((r11*x8422))+(((-1.0)*r12*x8420)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8420))+((r01*x8422))+(((-1.0)*r00*x8423)));
evalcond[4]=(((cj2*sj1))+((r12*x8419))+((cj1*sj2))+((r11*x8421))+(((-1.0)*gconst2*r10*x8420)));
evalcond[5]=(((r21*x8421))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8420))+((r22*x8419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
CheckValue<IkReal> x8425=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8424.value)+(((1.5707963267949)*(x8425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8426=IKcos(j4);
IkReal x8427=IKsin(j4);
IkReal x8428=((1.0)*x8426);
IkReal x8429=(gconst1*x8426);
IkReal x8430=(gconst1*x8427);
IkReal x8431=((1.0)*gconst2*x8427);
evalcond[0]=(((r02*x8427))+(((-1.0)*gconst2*r00*x8428))+((r01*x8429)));
evalcond[1]=(((r21*x8430))+(((-1.0)*r20*x8431))+(((-1.0)*r22*x8428)));
evalcond[2]=((((-1.0)*r10*x8431))+((r11*x8430))+(((-1.0)*r12*x8428)));
evalcond[3]=((1.0)+((r01*x8430))+(((-1.0)*r00*x8431))+(((-1.0)*r02*x8428)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x8429))+((r12*x8427))+(((-1.0)*gconst2*r10*x8428)));
evalcond[5]=(((r21*x8429))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8428))+((r22*x8427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8432=((-1.0)*r20);
IkReal x8433=((-1.0)*px);
CheckValue<IkReal> x8435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8432),IKFAST_ATAN2_MAGTHRESH);
if(!x8435.valid){
continue;
}
IkReal x8434=((-1.0)*(x8435.value));
sj5=gconst1;
cj5=gconst2;
j5=x8434;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8433);
rxp1_1=(px*r21);
rxp1_2=(r11*x8433);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8434;
IkReal gconst1=r21;
IkReal gconst2=x8432;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8436=((-1.0)*r20);
IkReal x8437=((-1.0)*px);
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8436),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
IkReal x8438=((-1.0)*(x8439.value));
sj5=gconst1;
cj5=gconst2;
j5=x8438;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8437);
rxp1_1=(px*r21);
rxp1_2=(r11*x8437);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8438;
IkReal gconst1=r21;
IkReal gconst2=x8436;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8440=((-1.0)*r20);
IkReal x8441=((-1.0)*px);
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8440),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
IkReal x8442=((-1.0)*(x8443.value));
sj5=gconst1;
cj5=gconst2;
j5=x8442;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8441);
rxp1_1=(px*r21);
rxp1_2=(r11*x8441);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8442;
IkReal gconst1=r21;
IkReal gconst2=x8440;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8446=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8446.valid){
continue;
}
IkReal x8444=x8446.value;
IkReal x8445=(sj0*x8444);
cj4array[0]=(((cj2*sj1*x8445))+((cj1*sj2*x8445)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8447=IKsin(j4);
IkReal x8448=IKcos(j4);
IkReal x8449=((1.0)*gconst2);
IkReal x8450=(gconst1*r21);
evalcond[0]=(r02*x8447);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8448)));
evalcond[2]=((((-1.0)*r20*x8447*x8449))+((x8447*x8450)));
evalcond[3]=((((-1.0)*r10*x8447*x8449))+((gconst1*r11*x8447)));
evalcond[4]=(((x8448*x8450))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x8448*x8449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8452=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8452.valid){
continue;
}
IkReal x8451=x8452.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8451))+((cj1*cj2*x8451)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8453=IKsin(j4);
IkReal x8454=IKcos(j4);
IkReal x8455=((1.0)*sj0);
IkReal x8456=(gconst1*x8453);
IkReal x8457=((1.0)*x8454);
IkReal x8458=((1.0)*gconst2*x8453);
evalcond[0]=(r02*x8453);
evalcond[1]=((((-1.0)*r02*x8457))+(((-1.0)*x8455)));
evalcond[2]=(((r21*x8456))+(((-1.0)*r20*x8458)));
evalcond[3]=(((r11*x8456))+(((-1.0)*r10*x8458)));
evalcond[4]=(((gconst1*r11*x8454))+(((-1.0)*gconst2*r10*x8457))+(((-1.0)*cj1*sj2*x8455))+(((-1.0)*cj2*sj1*x8455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8459=IKPowWithIntegerCheck(r02,-1);
if(!x8459.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8459.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8460=IKsin(j4);
IkReal x8461=IKcos(j4);
IkReal x8462=(gconst1*r21);
IkReal x8463=((1.0)*sj0);
IkReal x8464=(gconst1*r11);
IkReal x8465=((1.0)*gconst2*r10);
IkReal x8466=((1.0)*gconst2*r20);
evalcond[0]=(r02*x8460);
evalcond[1]=(((x8460*x8462))+(((-1.0)*x8460*x8466)));
evalcond[2]=(((x8460*x8464))+(((-1.0)*x8460*x8465)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8461*x8462))+(((-1.0)*x8461*x8466)));
evalcond[4]=((((-1.0)*cj1*sj2*x8463))+((x8461*x8464))+(((-1.0)*cj2*sj1*x8463))+(((-1.0)*x8461*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8467=(gconst2*r20);
IkReal x8468=(cj1*cj2);
IkReal x8469=(sj1*sj2);
IkReal x8470=(gconst1*r21);
CheckValue<IkReal> x8471=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8470*x8470)))+(((-1.0)*(x8467*x8467)))+(((-1.0)*(r22*r22)))+(((2.0)*x8467*x8470)))),-1);
if(!x8471.valid){
continue;
}
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal((((r22*x8469))+(((-1.0)*r22*x8468)))),IkReal((((x8469*x8470))+((x8467*x8468))+(((-1.0)*x8468*x8470))+(((-1.0)*x8467*x8469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8471.value)))+(x8472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8473=IKsin(j4);
IkReal x8474=IKcos(j4);
IkReal x8475=(gconst2*r10);
IkReal x8476=((1.0)*cj2);
IkReal x8477=(gconst2*r00);
IkReal x8478=((1.0)*sj0);
IkReal x8479=(gconst2*r20);
IkReal x8480=(cj1*sj2);
IkReal x8481=((1.0)*x8474);
IkReal x8482=(gconst1*x8474);
IkReal x8483=(gconst1*x8473);
IkReal x8484=((1.0)*x8473);
evalcond[0]=((((-1.0)*r22*x8481))+(((-1.0)*x8479*x8484))+((r21*x8483)));
evalcond[1]=(cj0+(((-1.0)*r12*x8481))+((r11*x8483))+(((-1.0)*x8475*x8484)));
evalcond[2]=(((r01*x8483))+(((-1.0)*r02*x8481))+(((-1.0)*x8477*x8484))+(((-1.0)*x8478)));
evalcond[3]=(((r22*x8473))+(((-1.0)*cj1*x8476))+((sj1*sj2))+(((-1.0)*x8479*x8481))+((r21*x8482)));
evalcond[4]=(((r01*x8482))+(((-1.0)*cj0*x8480))+(((-1.0)*x8477*x8481))+((r02*x8473))+(((-1.0)*cj0*sj1*x8476)));
evalcond[5]=(((r12*x8473))+(((-1.0)*sj0*sj1*x8476))+(((-1.0)*x8478*x8480))+((r11*x8482))+(((-1.0)*x8475*x8481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8485=((1.0)*gconst2);
CheckValue<IkReal> x8486 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8485))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8486.valid){
continue;
}
CheckValue<IkReal> x8487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8485)))),-1);
if(!x8487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8486.value)+(((1.5707963267949)*(x8487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8488=IKsin(j4);
IkReal x8489=IKcos(j4);
IkReal x8490=(gconst2*r10);
IkReal x8491=((1.0)*cj2);
IkReal x8492=(gconst2*r00);
IkReal x8493=((1.0)*sj0);
IkReal x8494=(gconst2*r20);
IkReal x8495=(cj1*sj2);
IkReal x8496=((1.0)*x8489);
IkReal x8497=(gconst1*x8489);
IkReal x8498=(gconst1*x8488);
IkReal x8499=((1.0)*x8488);
evalcond[0]=((((-1.0)*r22*x8496))+(((-1.0)*x8494*x8499))+((r21*x8498)));
evalcond[1]=(cj0+(((-1.0)*x8490*x8499))+(((-1.0)*r12*x8496))+((r11*x8498)));
evalcond[2]=((((-1.0)*r02*x8496))+(((-1.0)*x8492*x8499))+((r01*x8498))+(((-1.0)*x8493)));
evalcond[3]=(((sj1*sj2))+((r22*x8488))+(((-1.0)*cj1*x8491))+(((-1.0)*x8494*x8496))+((r21*x8497)));
evalcond[4]=((((-1.0)*cj0*x8495))+(((-1.0)*x8492*x8496))+(((-1.0)*cj0*sj1*x8491))+((r02*x8488))+((r01*x8497)));
evalcond[5]=((((-1.0)*sj0*sj1*x8491))+(((-1.0)*x8493*x8495))+(((-1.0)*x8490*x8496))+((r12*x8488))+((r11*x8497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8500=((1.0)*gconst2);
CheckValue<IkReal> x8501=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8500)))),-1);
if(!x8501.valid){
continue;
}
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x8500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8501.value)))+(x8502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8503=IKsin(j4);
IkReal x8504=IKcos(j4);
IkReal x8505=(gconst2*r10);
IkReal x8506=((1.0)*cj2);
IkReal x8507=(gconst2*r00);
IkReal x8508=((1.0)*sj0);
IkReal x8509=(gconst2*r20);
IkReal x8510=(cj1*sj2);
IkReal x8511=((1.0)*x8504);
IkReal x8512=(gconst1*x8504);
IkReal x8513=(gconst1*x8503);
IkReal x8514=((1.0)*x8503);
evalcond[0]=(((r21*x8513))+(((-1.0)*x8509*x8514))+(((-1.0)*r22*x8511)));
evalcond[1]=(cj0+((r11*x8513))+(((-1.0)*r12*x8511))+(((-1.0)*x8505*x8514)));
evalcond[2]=((((-1.0)*x8508))+(((-1.0)*x8507*x8514))+(((-1.0)*r02*x8511))+((r01*x8513)));
evalcond[3]=(((r22*x8503))+(((-1.0)*cj1*x8506))+((r21*x8512))+((sj1*sj2))+(((-1.0)*x8509*x8511)));
evalcond[4]=(((r02*x8503))+(((-1.0)*cj0*sj1*x8506))+(((-1.0)*x8507*x8511))+(((-1.0)*cj0*x8510))+((r01*x8512)));
evalcond[5]=((((-1.0)*sj0*sj1*x8506))+((r11*x8512))+(((-1.0)*x8508*x8510))+((r12*x8503))+(((-1.0)*x8505*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8515=((-1.0)*r20);
IkReal x8516=x8180;
CheckValue<IkReal> x8518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8515),IKFAST_ATAN2_MAGTHRESH);
if(!x8518.valid){
continue;
}
IkReal x8517=((-1.0)*(x8518.value));
sj5=gconst1;
cj5=gconst2;
j5=x8517;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8517;
IkReal gconst1=(r21*x8516);
IkReal gconst2=(x8515*x8516);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8519=((-1.0)*r20);
IkReal x8520=x8180;
CheckValue<IkReal> x8522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8519),IKFAST_ATAN2_MAGTHRESH);
if(!x8522.valid){
continue;
}
IkReal x8521=((-1.0)*(x8522.value));
sj5=gconst1;
cj5=gconst2;
j5=x8521;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8521;
IkReal gconst1=(r21*x8520);
IkReal gconst2=(x8519*x8520);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8523=((-1.0)*r20);
IkReal x8524=x8180;
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8523),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
IkReal x8525=((-1.0)*(x8526.value));
sj5=gconst1;
cj5=gconst2;
j5=x8525;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8525;
IkReal gconst1=(r21*x8524);
IkReal gconst2=(x8523*x8524);
IkReal x8527=r22*r22;
CheckValue<IkReal> x8530=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8527))),-1);
if(!x8530.valid){
continue;
}
IkReal x8528=x8530.value;
IkReal x8529=(((x8528*(r21*r21*r21*r21)))+x8527+(((2.0)*x8528*(r20*r20)*(r21*r21)))+((x8528*(r20*r20*r20*r20))));
j4eval[0]=x8529;
j4eval[1]=IKsign(x8529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8531=((-1.0)*r20);
IkReal x8532=x8180;
CheckValue<IkReal> x8534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8531),IKFAST_ATAN2_MAGTHRESH);
if(!x8534.valid){
continue;
}
IkReal x8533=((-1.0)*(x8534.value));
sj5=gconst1;
cj5=gconst2;
j5=x8533;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8533;
IkReal gconst1=(r21*x8532);
IkReal gconst2=(x8531*x8532);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8535=((-1.0)*r20);
IkReal x8536=x8180;
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8535),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
IkReal x8537=((-1.0)*(x8538.value));
sj5=gconst1;
cj5=gconst2;
j5=x8537;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8537;
IkReal gconst1=(r21*x8536);
IkReal gconst2=(x8535*x8536);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8539=((-1.0)*r20);
IkReal x8540=x8180;
CheckValue<IkReal> x8542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8539),IKFAST_ATAN2_MAGTHRESH);
if(!x8542.valid){
continue;
}
IkReal x8541=((-1.0)*(x8542.value));
sj5=gconst1;
cj5=gconst2;
j5=x8541;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8541;
IkReal gconst1=(r21*x8540);
IkReal gconst2=(x8539*x8540);
IkReal x8543=r22*r22;
IkReal x8544=(r12*sj1*sj2);
IkReal x8545=(cj1*cj2*r12);
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(((-1.0)+x8543),-1);
if(!x8549.valid){
continue;
}
IkReal x8546=x8549.value;
if((((1.0)+(((-1.0)*x8543)))) < -0.00001)
continue;
IkReal x8547=IKsqrt(((1.0)+(((-1.0)*x8543))));
IkReal x8548=(r22*x8546*x8547);
j4eval[0]=((IKabs((x8544+(((-1.0)*x8545)))))+(IKabs((((x8545*x8548))+(((-1.0)*x8544*x8548))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8550=((1.0)*gconst1);
IkReal x8551=(gconst2*r10);
IkReal x8552=(sj1*sj2);
IkReal x8553=((1.0)*cj1*cj2);
CheckValue<IkReal> x8554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8550))+(((-1.0)*gconst2*r01)))),-1);
if(!x8554.valid){
continue;
}
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal((((x8551*x8552))+((cj1*cj2*gconst1*r11))+(((-1.0)*x8551*x8553))+(((-1.0)*r11*x8550*x8552)))),IkReal(((((-1.0)*r12*x8553))+((r12*x8552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8554.value)))+(x8555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8556=IKsin(j4);
IkReal x8557=IKcos(j4);
IkReal x8558=((1.0)*cj2);
IkReal x8559=((1.0)*x8557);
IkReal x8560=(gconst2*x8557);
IkReal x8561=(gconst1*x8556);
IkReal x8562=((1.0)*x8556);
evalcond[0]=((((-1.0)*r22*x8559))+(((-1.0)*gconst2*r20*x8562))+((r21*x8561)));
evalcond[1]=((((-1.0)*gconst2*r00*x8562))+(((-1.0)*r02*x8559))+((r01*x8561)));
evalcond[2]=((((-1.0)*r12*x8562))+((r10*x8560))+(((-1.0)*gconst1*r11*x8559)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8559))+(((-1.0)*gconst2*r10*x8562))+((r11*x8561)));
evalcond[4]=(((r20*x8560))+(((-1.0)*r22*x8562))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8559))+(((-1.0)*cj1*x8558)));
evalcond[5]=(((r00*x8560))+(((-1.0)*gconst1*r01*x8559))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8558))+(((-1.0)*r02*x8562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8563=(gconst1*r11);
IkReal x8564=(gconst2*r10);
CheckValue<IkReal> x8565=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8563*x8563)+(((-2.0)*x8563*x8564))+(x8564*x8564))),-1);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal((x8564+(((-1.0)*x8563)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8565.value)))+(x8566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=((1.0)*cj2);
IkReal x8570=((1.0)*x8568);
IkReal x8571=(gconst2*x8568);
IkReal x8572=(gconst1*x8567);
IkReal x8573=((1.0)*x8567);
evalcond[0]=(((r21*x8572))+(((-1.0)*gconst2*r20*x8573))+(((-1.0)*r22*x8570)));
evalcond[1]=((((-1.0)*gconst2*r00*x8573))+(((-1.0)*r02*x8570))+((r01*x8572)));
evalcond[2]=((((-1.0)*gconst1*r11*x8570))+((r10*x8571))+(((-1.0)*r12*x8573)));
evalcond[3]=((1.0)+((r11*x8572))+(((-1.0)*r12*x8570))+(((-1.0)*gconst2*r10*x8573)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8569))+((r20*x8571))+(((-1.0)*gconst1*r21*x8570))+(((-1.0)*r22*x8573)));
evalcond[5]=((((-1.0)*r02*x8573))+(((-1.0)*cj1*sj2))+((r00*x8571))+(((-1.0)*gconst1*r01*x8570))+(((-1.0)*sj1*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8574=((1.0)*gconst2);
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8574))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
CheckValue<IkReal> x8576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8574)))),-1);
if(!x8576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8575.value)+(((1.5707963267949)*(x8576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8577=IKsin(j4);
IkReal x8578=IKcos(j4);
IkReal x8579=((1.0)*cj2);
IkReal x8580=((1.0)*x8578);
IkReal x8581=(gconst2*x8578);
IkReal x8582=(gconst1*x8577);
IkReal x8583=((1.0)*x8577);
evalcond[0]=((((-1.0)*r22*x8580))+((r21*x8582))+(((-1.0)*gconst2*r20*x8583)));
evalcond[1]=((((-1.0)*gconst2*r00*x8583))+(((-1.0)*r02*x8580))+((r01*x8582)));
evalcond[2]=((((-1.0)*gconst1*r11*x8580))+((r10*x8581))+(((-1.0)*r12*x8583)));
evalcond[3]=((1.0)+((r11*x8582))+(((-1.0)*r12*x8580))+(((-1.0)*gconst2*r10*x8583)));
evalcond[4]=((((-1.0)*gconst1*r21*x8580))+(((-1.0)*r22*x8583))+((sj1*sj2))+((r20*x8581))+(((-1.0)*cj1*x8579)));
evalcond[5]=((((-1.0)*sj1*x8579))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x8583))+((r00*x8581))+(((-1.0)*gconst1*r01*x8580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8584=((-1.0)*r20);
IkReal x8585=x8180;
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8584),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
IkReal x8586=((-1.0)*(x8587.value));
sj5=gconst1;
cj5=gconst2;
j5=x8586;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8586;
IkReal gconst1=(r21*x8585);
IkReal gconst2=(x8584*x8585);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8588=((-1.0)*r20);
IkReal x8589=x8180;
CheckValue<IkReal> x8591 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8588),IKFAST_ATAN2_MAGTHRESH);
if(!x8591.valid){
continue;
}
IkReal x8590=((-1.0)*(x8591.value));
sj5=gconst1;
cj5=gconst2;
j5=x8590;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8590;
IkReal gconst1=(r21*x8589);
IkReal gconst2=(x8588*x8589);
IkReal x8592=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(x8592,-1);
if(!x8596.valid){
continue;
}
IkReal x8593=x8596.value;
IkReal x8594=((1.0)*x8593);
IkReal x8595=((((-2.0)*r10*r11*r20*r21*x8593))+(((-1.0)*x8594*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8594*(r11*r11)*(r21*r21))));
j4eval[0]=x8595;
j4eval[1]=r12;
j4eval[2]=x8592;
j4eval[3]=IKsign(x8595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8597=((-1.0)*r20);
IkReal x8598=x8180;
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8597),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
IkReal x8599=((-1.0)*(x8600.value));
sj5=gconst1;
cj5=gconst2;
j5=x8599;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8599;
IkReal gconst1=(r21*x8598);
IkReal gconst2=(x8597*x8598);
IkReal x8601=r22*r22;
IkReal x8602=(cj1*r02*sj2);
IkReal x8603=(cj2*r02*sj1);
CheckValue<IkReal> x8607=IKPowWithIntegerCheck(((-1.0)+x8601),-1);
if(!x8607.valid){
continue;
}
IkReal x8604=x8607.value;
if((((1.0)+(((-1.0)*x8601)))) < -0.00001)
continue;
IkReal x8605=IKsqrt(((1.0)+(((-1.0)*x8601))));
IkReal x8606=(r22*x8604*x8605);
j4eval[0]=((IKabs((((x8602*x8606))+((x8603*x8606)))))+(IKabs((x8602+x8603))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8608=(cj1*sj2);
IkReal x8609=(gconst2*r00);
IkReal x8610=(gconst1*r01);
IkReal x8611=(cj2*sj1);
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal((((r02*x8611))+((r02*x8608)))),IkReal(((((-1.0)*x8608*x8609))+((x8608*x8610))+((x8610*x8611))+(((-1.0)*x8609*x8611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
CheckValue<IkReal> x8613=IKPowWithIntegerCheck(IKsign(((x8610*x8610)+(x8609*x8609)+(((-2.0)*x8609*x8610))+(r02*r02))),-1);
if(!x8613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8612.value)+(((1.5707963267949)*(x8613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8614=IKsin(j4);
IkReal x8615=IKcos(j4);
IkReal x8616=((1.0)*x8615);
IkReal x8617=(gconst2*x8615);
IkReal x8618=(gconst1*x8614);
IkReal x8619=((1.0)*x8614);
evalcond[0]=((((-1.0)*r22*x8616))+((r21*x8618))+(((-1.0)*gconst2*r20*x8619)));
evalcond[1]=((((-1.0)*r02*x8616))+((r01*x8618))+(((-1.0)*gconst2*r00*x8619)));
evalcond[2]=((((-1.0)*gconst1*r11*x8616))+((r10*x8617))+(((-1.0)*r12*x8619)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x8619))+((r11*x8618))+(((-1.0)*r12*x8616)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8619))+((cj1*sj2))+((r00*x8617))+(((-1.0)*gconst1*r01*x8616)));
evalcond[5]=((((-1.0)*gconst1*r21*x8616))+((r20*x8617))+(((-1.0)*r22*x8619))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8620=(gconst1*r11);
IkReal x8621=(gconst2*r10);
CheckValue<IkReal> x8622=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8621*x8621)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8620*x8620)))+(((2.0)*x8620*x8621)))),-1);
if(!x8622.valid){
continue;
}
CheckValue<IkReal> x8623 = IKatan2WithCheck(IkReal(((((-1.0)*x8620))+x8621)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8622.value)))+(x8623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8624=IKsin(j4);
IkReal x8625=IKcos(j4);
IkReal x8626=((1.0)*x8625);
IkReal x8627=(gconst2*x8625);
IkReal x8628=(gconst1*x8624);
IkReal x8629=((1.0)*x8624);
evalcond[0]=(((r21*x8628))+(((-1.0)*r22*x8626))+(((-1.0)*gconst2*r20*x8629)));
evalcond[1]=((((-1.0)*gconst2*r00*x8629))+((r01*x8628))+(((-1.0)*r02*x8626)));
evalcond[2]=((((-1.0)*r12*x8629))+((r10*x8627))+(((-1.0)*gconst1*r11*x8626)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8626))+(((-1.0)*gconst2*r10*x8629))+((r11*x8628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x8627))+(((-1.0)*gconst1*r01*x8626))+(((-1.0)*r02*x8629)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8627))+(((-1.0)*r22*x8629))+(((-1.0)*gconst1*r21*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8630.value)+(((1.5707963267949)*(x8631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8632=IKsin(j4);
IkReal x8633=IKcos(j4);
IkReal x8634=((1.0)*x8633);
IkReal x8635=(gconst2*x8633);
IkReal x8636=(gconst1*x8632);
IkReal x8637=((1.0)*x8632);
evalcond[0]=(((r21*x8636))+(((-1.0)*r22*x8634))+(((-1.0)*gconst2*r20*x8637)));
evalcond[1]=((((-1.0)*gconst2*r00*x8637))+((r01*x8636))+(((-1.0)*r02*x8634)));
evalcond[2]=((((-1.0)*gconst1*r11*x8634))+(((-1.0)*r12*x8637))+((r10*x8635)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8634))+(((-1.0)*gconst2*r10*x8637))+((r11*x8636)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r01*x8634))+((r00*x8635))+(((-1.0)*r02*x8637)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8637))+((r20*x8635))+(((-1.0)*gconst1*r21*x8634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8638=((-1.0)*r20);
IkReal x8639=x8180;
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj5=gconst1;
cj5=gconst2;
j5=x8640;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8640;
IkReal gconst1=(r21*x8639);
IkReal gconst2=(x8638*x8639);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8642=((-1.0)*r20);
IkReal x8643=x8180;
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8642),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
IkReal x8644=((-1.0)*(x8645.value));
sj5=gconst1;
cj5=gconst2;
j5=x8644;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8644;
IkReal gconst1=(r21*x8643);
IkReal gconst2=(x8642*x8643);
IkReal x8646=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8650=IKPowWithIntegerCheck(x8646,-1);
if(!x8650.valid){
continue;
}
IkReal x8647=x8650.value;
IkReal x8648=((1.0)*x8647);
IkReal x8649=((((-1.0)*x8648*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8647))+(((-1.0)*x8648*(r00*r00)*(r20*r20))));
j4eval[0]=x8649;
j4eval[1]=IKsign(x8649);
j4eval[2]=r02;
j4eval[3]=x8646;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8651=((-1.0)*r20);
IkReal x8652=x8180;
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8651),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
IkReal x8653=((-1.0)*(x8654.value));
sj5=gconst1;
cj5=gconst2;
j5=x8653;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8653;
IkReal gconst1=(r21*x8652);
IkReal gconst2=(x8651*x8652);
IkReal x8655=r22*r22;
IkReal x8656=(r02*sj1*sj2);
IkReal x8657=(cj1*cj2*r02);
CheckValue<IkReal> x8661=IKPowWithIntegerCheck(((-1.0)+x8655),-1);
if(!x8661.valid){
continue;
}
IkReal x8658=x8661.value;
if((((1.0)+(((-1.0)*x8655)))) < -0.00001)
continue;
IkReal x8659=IKsqrt(((1.0)+(((-1.0)*x8655))));
IkReal x8660=(r22*x8658*x8659);
j4eval[0]=((IKabs((x8656+(((-1.0)*x8657)))))+(IKabs((((x8657*x8660))+(((-1.0)*x8656*x8660))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8662=(sj1*sj2);
IkReal x8663=(gconst1*r01);
IkReal x8664=(gconst2*r00);
IkReal x8665=((1.0)*cj1*cj2);
CheckValue<IkReal> x8666 = IKatan2WithCheck(IkReal((((cj1*cj2*x8663))+((x8662*x8664))+(((-1.0)*x8662*x8663))+(((-1.0)*x8664*x8665)))),IkReal(((((-1.0)*r02*x8665))+((r02*x8662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8666.valid){
continue;
}
CheckValue<IkReal> x8667=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8666.value)+(((1.5707963267949)*(x8667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8668=IKsin(j4);
IkReal x8669=IKcos(j4);
IkReal x8670=((1.0)*cj2);
IkReal x8671=((1.0)*x8669);
IkReal x8672=(gconst2*x8669);
IkReal x8673=(gconst1*x8668);
IkReal x8674=((1.0)*x8668);
evalcond[0]=((((-1.0)*r22*x8671))+(((-1.0)*gconst2*r20*x8674))+((r21*x8673)));
evalcond[1]=((((-1.0)*r12*x8671))+((r11*x8673))+(((-1.0)*gconst2*r10*x8674)));
evalcond[2]=((((-1.0)*r02*x8674))+((r00*x8672))+(((-1.0)*gconst1*r01*x8671)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8671))+(((-1.0)*gconst2*r00*x8674))+((r01*x8673)));
evalcond[4]=(((r20*x8672))+(((-1.0)*r22*x8674))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8671))+(((-1.0)*cj1*x8670)));
evalcond[5]=((((-1.0)*sj1*x8670))+(((-1.0)*r12*x8674))+(((-1.0)*cj1*sj2))+((r10*x8672))+(((-1.0)*gconst1*r11*x8671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8675=(gconst2*r00);
IkReal x8676=(gconst1*r01);
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal((x8675+(((-1.0)*x8676)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
CheckValue<IkReal> x8678=IKPowWithIntegerCheck(IKsign(((((2.0)*x8675*x8676))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8675*x8675)))+(((-1.0)*(x8676*x8676))))),-1);
if(!x8678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8677.value)+(((1.5707963267949)*(x8678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8679=IKsin(j4);
IkReal x8680=IKcos(j4);
IkReal x8681=((1.0)*cj2);
IkReal x8682=((1.0)*x8680);
IkReal x8683=(gconst2*x8680);
IkReal x8684=(gconst1*x8679);
IkReal x8685=((1.0)*x8679);
evalcond[0]=((((-1.0)*r22*x8682))+((r21*x8684))+(((-1.0)*gconst2*r20*x8685)));
evalcond[1]=((((-1.0)*r12*x8682))+((r11*x8684))+(((-1.0)*gconst2*r10*x8685)));
evalcond[2]=((((-1.0)*r02*x8685))+((r00*x8683))+(((-1.0)*gconst1*r01*x8682)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8682))+((r01*x8684))+(((-1.0)*gconst2*r00*x8685)));
evalcond[4]=((((-1.0)*gconst1*r21*x8682))+((r20*x8683))+((sj1*sj2))+(((-1.0)*r22*x8685))+(((-1.0)*cj1*x8681)));
evalcond[5]=((((-1.0)*sj1*x8681))+(((-1.0)*r12*x8685))+(((-1.0)*cj1*sj2))+((r10*x8683))+(((-1.0)*gconst1*r11*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8686=((1.0)*gconst2);
CheckValue<IkReal> x8687=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8686)))),-1);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8686))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8687.value)))+(x8688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKsin(j4);
IkReal x8690=IKcos(j4);
IkReal x8691=((1.0)*cj2);
IkReal x8692=((1.0)*x8690);
IkReal x8693=(gconst2*x8690);
IkReal x8694=(gconst1*x8689);
IkReal x8695=((1.0)*x8689);
evalcond[0]=((((-1.0)*gconst2*r20*x8695))+((r21*x8694))+(((-1.0)*r22*x8692)));
evalcond[1]=((((-1.0)*r12*x8692))+(((-1.0)*gconst2*r10*x8695))+((r11*x8694)));
evalcond[2]=(((r00*x8693))+(((-1.0)*r02*x8695))+(((-1.0)*gconst1*r01*x8692)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x8695))+(((-1.0)*r02*x8692))+((r01*x8694)));
evalcond[4]=(((sj1*sj2))+((r20*x8693))+(((-1.0)*gconst1*r21*x8692))+(((-1.0)*cj1*x8691))+(((-1.0)*r22*x8695)));
evalcond[5]=((((-1.0)*gconst1*r11*x8692))+(((-1.0)*cj1*sj2))+((r10*x8693))+(((-1.0)*r12*x8695))+(((-1.0)*sj1*x8691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8696=((-1.0)*r20);
IkReal x8697=x8180;
CheckValue<IkReal> x8699 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8696),IKFAST_ATAN2_MAGTHRESH);
if(!x8699.valid){
continue;
}
IkReal x8698=((-1.0)*(x8699.value));
sj5=gconst1;
cj5=gconst2;
j5=x8698;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8698;
IkReal gconst1=(r21*x8697);
IkReal gconst2=(x8696*x8697);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8700=((-1.0)*r20);
IkReal x8701=x8180;
CheckValue<IkReal> x8703 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8700),IKFAST_ATAN2_MAGTHRESH);
if(!x8703.valid){
continue;
}
IkReal x8702=((-1.0)*(x8703.value));
sj5=gconst1;
cj5=gconst2;
j5=x8702;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8702;
IkReal gconst1=(r21*x8701);
IkReal gconst2=(x8700*x8701);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8704=((-1.0)*r20);
IkReal x8705=x8180;
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8704),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
IkReal x8706=((-1.0)*(x8707.value));
sj5=gconst1;
cj5=gconst2;
j5=x8706;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8706;
IkReal gconst1=(r21*x8705);
IkReal gconst2=(x8704*x8705);
IkReal x8708=r22*r22;
IkReal x8709=(cj1*r12*sj2);
IkReal x8710=(cj2*r12*sj1);
CheckValue<IkReal> x8714=IKPowWithIntegerCheck(((-1.0)+x8708),-1);
if(!x8714.valid){
continue;
}
IkReal x8711=x8714.value;
if((((1.0)+(((-1.0)*x8708)))) < -0.00001)
continue;
IkReal x8712=IKsqrt(((1.0)+(((-1.0)*x8708))));
IkReal x8713=(r22*x8711*x8712);
j4eval[0]=((IKabs((x8709+x8710)))+(IKabs((((x8709*x8713))+((x8710*x8713))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8715=(cj1*sj2);
IkReal x8716=(cj2*sj1);
IkReal x8717=(gconst1*r11);
IkReal x8718=((1.0)*gconst2*r10);
CheckValue<IkReal> x8719=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*gconst2*r10*x8717))+(x8717*x8717)+(((gconst2*gconst2)*(r10*r10))))),-1);
if(!x8719.valid){
continue;
}
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal((((r12*x8716))+((r12*x8715)))),IkReal(((((-1.0)*x8715*x8718))+(((-1.0)*x8716*x8718))+((x8715*x8717))+((x8716*x8717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8719.value)))+(x8720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8721=IKsin(j4);
IkReal x8722=IKcos(j4);
IkReal x8723=(gconst1*r11);
IkReal x8724=(gconst1*r21);
IkReal x8725=(gconst1*r01);
IkReal x8726=((1.0)*x8722);
IkReal x8727=(gconst2*x8722);
IkReal x8728=((1.0)*x8721);
evalcond[0]=(((x8721*x8724))+(((-1.0)*r22*x8726))+(((-1.0)*gconst2*r20*x8728)));
evalcond[1]=(((x8721*x8723))+(((-1.0)*gconst2*r10*x8728))+(((-1.0)*r12*x8726)));
evalcond[2]=((((-1.0)*r02*x8728))+(((-1.0)*x8725*x8726))+((r00*x8727)));
evalcond[3]=((1.0)+((x8721*x8725))+(((-1.0)*gconst2*r00*x8728))+(((-1.0)*r02*x8726)));
evalcond[4]=((((-1.0)*x8723*x8726))+((cj2*sj1))+((r10*x8727))+((cj1*sj2))+(((-1.0)*r12*x8728)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8724*x8726))+((r20*x8727))+(((-1.0)*r22*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8729=(gconst1*r01);
IkReal x8730=(gconst2*r00);
CheckValue<IkReal> x8731 = IKatan2WithCheck(IkReal((x8730+(((-1.0)*x8729)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8731.valid){
continue;
}
CheckValue<IkReal> x8732=IKPowWithIntegerCheck(IKsign(((x8729*x8729)+(((-2.0)*x8729*x8730))+(r02*r02)+(x8730*x8730))),-1);
if(!x8732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8731.value)+(((1.5707963267949)*(x8732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8733=IKsin(j4);
IkReal x8734=IKcos(j4);
IkReal x8735=(gconst1*r11);
IkReal x8736=(gconst1*r21);
IkReal x8737=(gconst1*r01);
IkReal x8738=((1.0)*x8734);
IkReal x8739=(gconst2*x8734);
IkReal x8740=((1.0)*x8733);
evalcond[0]=(((x8733*x8736))+(((-1.0)*gconst2*r20*x8740))+(((-1.0)*r22*x8738)));
evalcond[1]=((((-1.0)*gconst2*r10*x8740))+((x8733*x8735))+(((-1.0)*r12*x8738)));
evalcond[2]=((((-1.0)*x8737*x8738))+((r00*x8739))+(((-1.0)*r02*x8740)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8740))+((x8733*x8737))+(((-1.0)*r02*x8738)));
evalcond[4]=(((cj2*sj1))+((r10*x8739))+(((-1.0)*r12*x8740))+((cj1*sj2))+(((-1.0)*x8735*x8738)));
evalcond[5]=((((-1.0)*x8736*x8738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8740))+((r20*x8739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8741 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8741.valid){
continue;
}
CheckValue<IkReal> x8742=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8741.value)+(((1.5707963267949)*(x8742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8743=IKsin(j4);
IkReal x8744=IKcos(j4);
IkReal x8745=(gconst1*r11);
IkReal x8746=(gconst1*r21);
IkReal x8747=(gconst1*r01);
IkReal x8748=((1.0)*x8744);
IkReal x8749=(gconst2*x8744);
IkReal x8750=((1.0)*x8743);
evalcond[0]=((((-1.0)*r22*x8748))+(((-1.0)*gconst2*r20*x8750))+((x8743*x8746)));
evalcond[1]=((((-1.0)*gconst2*r10*x8750))+(((-1.0)*r12*x8748))+((x8743*x8745)));
evalcond[2]=(((r00*x8749))+(((-1.0)*r02*x8750))+(((-1.0)*x8747*x8748)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x8750))+((x8743*x8747))+(((-1.0)*r02*x8748)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x8749))+(((-1.0)*x8745*x8748))+(((-1.0)*r12*x8750)));
evalcond[5]=(((r20*x8749))+(((-1.0)*r22*x8750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8746*x8748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8751=((-1.0)*r20);
IkReal x8752=((-1.0)*px);
CheckValue<IkReal> x8754 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8751),IKFAST_ATAN2_MAGTHRESH);
if(!x8754.valid){
continue;
}
IkReal x8753=((-1.0)*(x8754.value));
sj5=gconst1;
cj5=gconst2;
j5=x8753;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8752);
rxp1_1=(px*r21);
rxp1_2=(r11*x8752);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8753;
IkReal gconst1=r21;
IkReal gconst2=x8751;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8755=((-1.0)*r20);
IkReal x8756=((-1.0)*px);
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8755),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
IkReal x8757=((-1.0)*(x8758.value));
sj5=gconst1;
cj5=gconst2;
j5=x8757;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8756);
rxp1_1=(px*r21);
rxp1_2=(r11*x8756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8757;
IkReal gconst1=r21;
IkReal gconst2=x8755;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8759=((-1.0)*r20);
IkReal x8760=((-1.0)*px);
CheckValue<IkReal> x8762 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8759),IKFAST_ATAN2_MAGTHRESH);
if(!x8762.valid){
continue;
}
IkReal x8761=((-1.0)*(x8762.value));
sj5=gconst1;
cj5=gconst2;
j5=x8761;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8760);
rxp1_1=(px*r21);
rxp1_2=(r11*x8760);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8761;
IkReal gconst1=r21;
IkReal gconst2=x8759;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8765=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8765.valid){
continue;
}
IkReal x8763=x8765.value;
IkReal x8764=(sj0*x8763);
cj4array[0]=(((cj2*sj1*x8764))+((cj1*sj2*x8764)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(gconst1*x8766);
IkReal x8769=((1.0)*x8767);
IkReal x8770=((1.0)*gconst2*x8766);
evalcond[0]=((-1.0)*r02*x8766);
evalcond[1]=((((-1.0)*r02*x8769))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x8770))+((r21*x8768)));
evalcond[3]=((((-1.0)*r10*x8770))+((r11*x8768)));
evalcond[4]=(((gconst2*r20*x8767))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x8769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8772=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8772.valid){
continue;
}
IkReal x8771=x8772.value;
cj4array[0]=(((cj1*cj2*x8771))+(((-1.0)*sj1*sj2*x8771)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8773=IKsin(j4);
IkReal x8774=IKcos(j4);
IkReal x8775=(gconst2*r10);
IkReal x8776=((1.0)*sj0);
IkReal x8777=((1.0)*x8773);
IkReal x8778=(gconst1*x8773);
IkReal x8779=((1.0)*x8774);
evalcond[0]=((-1.0)*r02*x8773);
evalcond[1]=((((-1.0)*r02*x8779))+(((-1.0)*x8776)));
evalcond[2]=((((-1.0)*gconst2*r20*x8777))+((r21*x8778)));
evalcond[3]=((((-1.0)*x8775*x8777))+((r11*x8778)));
evalcond[4]=((((-1.0)*gconst1*r11*x8779))+(((-1.0)*cj2*sj1*x8776))+(((-1.0)*cj1*sj2*x8776))+((x8774*x8775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(r02,-1);
if(!x8780.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8780.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8781=IKsin(j4);
IkReal x8782=IKcos(j4);
IkReal x8783=(gconst2*r10);
IkReal x8784=((1.0)*sj0);
IkReal x8785=(gconst1*r11);
IkReal x8786=(gconst1*r21);
IkReal x8787=(gconst2*r20);
IkReal x8788=((1.0)*x8781);
IkReal x8789=((1.0)*x8782);
evalcond[0]=((-1.0)*r02*x8781);
evalcond[1]=(((x8781*x8786))+(((-1.0)*x8787*x8788)));
evalcond[2]=(((x8781*x8785))+(((-1.0)*x8783*x8788)));
evalcond[3]=((((-1.0)*x8786*x8789))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8782*x8787)));
evalcond[4]=((((-1.0)*x8785*x8789))+(((-1.0)*cj2*sj1*x8784))+(((-1.0)*cj1*sj2*x8784))+((x8782*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8790=(gconst2*r20);
IkReal x8791=(cj1*cj2);
IkReal x8792=(sj1*sj2);
IkReal x8793=(gconst1*r21);
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal((((r22*x8792))+(((-1.0)*r22*x8791)))),IkReal((((x8792*x8793))+(((-1.0)*x8790*x8792))+(((-1.0)*x8791*x8793))+((x8790*x8791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8790*x8790)+(((-2.0)*x8790*x8793))+(x8793*x8793))),-1);
if(!x8795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8794.value)+(((1.5707963267949)*(x8795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8796=IKsin(j4);
IkReal x8797=IKcos(j4);
IkReal x8798=((1.0)*cj2);
IkReal x8799=((1.0)*sj0);
IkReal x8800=(cj1*sj2);
IkReal x8801=((1.0)*x8797);
IkReal x8802=(gconst2*x8797);
IkReal x8803=(gconst1*x8796);
IkReal x8804=((1.0)*x8796);
evalcond[0]=(((r21*x8803))+(((-1.0)*r22*x8801))+(((-1.0)*gconst2*r20*x8804)));
evalcond[1]=((((-1.0)*r12*x8801))+cj0+((r11*x8803))+(((-1.0)*gconst2*r10*x8804)));
evalcond[2]=((((-1.0)*r02*x8801))+(((-1.0)*gconst2*r00*x8804))+((r01*x8803))+(((-1.0)*x8799)));
evalcond[3]=((((-1.0)*r22*x8804))+(((-1.0)*cj1*x8798))+((sj1*sj2))+((r20*x8802))+(((-1.0)*gconst1*r21*x8801)));
evalcond[4]=((((-1.0)*cj0*x8800))+(((-1.0)*cj0*sj1*x8798))+(((-1.0)*r02*x8804))+(((-1.0)*gconst1*r01*x8801))+((r00*x8802)));
evalcond[5]=((((-1.0)*r12*x8804))+((r10*x8802))+(((-1.0)*gconst1*r11*x8801))+(((-1.0)*sj0*sj1*x8798))+(((-1.0)*x8799*x8800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8805=((1.0)*gconst2);
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8805))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
CheckValue<IkReal> x8807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8805))+(((-1.0)*gconst1*r10)))),-1);
if(!x8807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8806.value)+(((1.5707963267949)*(x8807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8808=IKsin(j4);
IkReal x8809=IKcos(j4);
IkReal x8810=((1.0)*cj2);
IkReal x8811=((1.0)*sj0);
IkReal x8812=(cj1*sj2);
IkReal x8813=((1.0)*x8809);
IkReal x8814=(gconst2*x8809);
IkReal x8815=(gconst1*x8808);
IkReal x8816=((1.0)*x8808);
evalcond[0]=(((r21*x8815))+(((-1.0)*r22*x8813))+(((-1.0)*gconst2*r20*x8816)));
evalcond[1]=((((-1.0)*r12*x8813))+cj0+((r11*x8815))+(((-1.0)*gconst2*r10*x8816)));
evalcond[2]=((((-1.0)*r02*x8813))+((r01*x8815))+(((-1.0)*gconst2*r00*x8816))+(((-1.0)*x8811)));
evalcond[3]=((((-1.0)*r22*x8816))+(((-1.0)*cj1*x8810))+((sj1*sj2))+((r20*x8814))+(((-1.0)*gconst1*r21*x8813)));
evalcond[4]=((((-1.0)*cj0*x8812))+(((-1.0)*cj0*sj1*x8810))+(((-1.0)*r02*x8816))+(((-1.0)*gconst1*r01*x8813))+((r00*x8814)));
evalcond[5]=((((-1.0)*r12*x8816))+((r10*x8814))+(((-1.0)*x8811*x8812))+(((-1.0)*sj0*sj1*x8810))+(((-1.0)*gconst1*r11*x8813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8817=((1.0)*gconst2);
CheckValue<IkReal> x8818=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8817)))),-1);
if(!x8818.valid){
continue;
}
CheckValue<IkReal> x8819 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8817))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8818.value)))+(x8819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8820=IKsin(j4);
IkReal x8821=IKcos(j4);
IkReal x8822=((1.0)*cj2);
IkReal x8823=((1.0)*sj0);
IkReal x8824=(cj1*sj2);
IkReal x8825=((1.0)*x8821);
IkReal x8826=(gconst2*x8821);
IkReal x8827=(gconst1*x8820);
IkReal x8828=((1.0)*x8820);
evalcond[0]=((((-1.0)*gconst2*r20*x8828))+((r21*x8827))+(((-1.0)*r22*x8825)));
evalcond[1]=((((-1.0)*r12*x8825))+cj0+((r11*x8827))+(((-1.0)*gconst2*r10*x8828)));
evalcond[2]=((((-1.0)*r02*x8825))+((r01*x8827))+(((-1.0)*gconst2*r00*x8828))+(((-1.0)*x8823)));
evalcond[3]=((((-1.0)*cj1*x8822))+((sj1*sj2))+((r20*x8826))+(((-1.0)*gconst1*r21*x8825))+(((-1.0)*r22*x8828)));
evalcond[4]=((((-1.0)*cj0*x8824))+(((-1.0)*cj0*sj1*x8822))+(((-1.0)*r02*x8828))+(((-1.0)*gconst1*r01*x8825))+((r00*x8826)));
evalcond[5]=((((-1.0)*r12*x8828))+((r10*x8826))+(((-1.0)*sj0*sj1*x8822))+(((-1.0)*x8823*x8824))+(((-1.0)*gconst1*r11*x8825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8829=((-1.0)*r20);
IkReal x8830=x8180;
CheckValue<IkReal> x8832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8829),IKFAST_ATAN2_MAGTHRESH);
if(!x8832.valid){
continue;
}
IkReal x8831=((-1.0)*(x8832.value));
sj5=gconst1;
cj5=gconst2;
j5=x8831;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8831;
IkReal gconst1=(r21*x8830);
IkReal gconst2=(x8829*x8830);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8833=((-1.0)*r20);
IkReal x8834=x8180;
CheckValue<IkReal> x8836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8833),IKFAST_ATAN2_MAGTHRESH);
if(!x8836.valid){
continue;
}
IkReal x8835=((-1.0)*(x8836.value));
sj5=gconst1;
cj5=gconst2;
j5=x8835;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8835;
IkReal gconst1=(r21*x8834);
IkReal gconst2=(x8833*x8834);
CheckValue<IkReal> x8844=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8844.valid){
continue;
}
IkReal x8837=x8844.value;
IkReal x8838=(sj3*x8837);
IkReal x8839=(r11*x8838);
IkReal x8840=(r00*x8838);
IkReal x8841=(r01*x8838);
IkReal x8842=(r10*x8838);
IkReal x8843=(r20*r21*x8838);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x8841))+((r00*r20*r21*x8839))+((r10*x8840*(r20*r20)))+((r01*x8839*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8845=gconst2*gconst2;
IkReal x8846=gconst1*gconst1;
IkReal x8847=((1.0)*cj3);
IkReal x8848=((1.0)*sj3);
IkReal x8849=(r11*sj3);
IkReal x8850=(r10*sj3);
IkReal x8851=(gconst1*gconst2*r00);
IkReal x8852=(gconst1*gconst2*r01);
IkReal x8853=(r00*x8845);
IkReal x8854=(r01*x8846);
CheckValue<IkReal> x8855 = IKatan2WithCheck(IkReal((((gconst2*r02*x8849))+((gconst1*r02*x8850)))),IkReal((((x8850*x8854))+(((-1.0)*r11*x8848*x8853))+((x8849*x8852))+(((-1.0)*r10*x8848*x8851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8855.valid){
continue;
}
CheckValue<IkReal> x8856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8847*x8854))+((cj3*r11*x8851))+((cj3*r10*x8852))+(((-1.0)*r02*r12*x8847))+(((-1.0)*r10*x8847*x8853)))),-1);
if(!x8856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8855.value)+(((1.5707963267949)*(x8856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8857=IKsin(j4);
IkReal x8858=IKcos(j4);
IkReal x8859=(gconst1*sj3);
IkReal x8860=(cj3*gconst1);
IkReal x8861=(sj1*sj2);
IkReal x8862=(cj3*gconst2);
IkReal x8863=((1.0)*cj2);
IkReal x8864=(gconst2*sj3);
IkReal x8865=((1.0)*cj1*sj2);
IkReal x8866=(sj1*x8863);
IkReal x8867=((1.0)*x8858);
IkReal x8868=((1.0)*x8857);
IkReal x8869=(gconst1*x8857);
IkReal x8870=(cj3*x8857);
IkReal x8871=(x8858*x8864);
IkReal x8872=(x8866+x8865);
evalcond[0]=(((r21*x8869))+(((-1.0)*r22*x8867))+(((-1.0)*gconst2*r20*x8868)));
evalcond[1]=(((r01*x8869))+(((-1.0)*r02*x8867))+(((-1.0)*gconst2*r00*x8868)));
evalcond[2]=((1.0)+((r11*x8869))+(((-1.0)*r12*x8867))+(((-1.0)*gconst2*r10*x8868)));
evalcond[3]=(((r11*x8858*x8860))+((r11*x8864))+((r12*x8870))+(((-1.0)*r10*x8862*x8867))+((r10*x8859)));
evalcond[4]=(((r10*x8871))+(((-1.0)*r12*sj3*x8868))+(((-1.0)*r11*x8859*x8867))+((r11*x8862))+((r10*x8860)));
evalcond[5]=((((-1.0)*cj1*x8863))+(((-1.0)*r20*x8862*x8867))+((r21*x8858*x8860))+((r21*x8864))+x8861+((r22*x8870))+((r20*x8859)));
evalcond[6]=((((-1.0)*r02*sj3*x8868))+((r01*x8862))+((r00*x8860))+((r00*x8871))+(((-1.0)*r01*x8859*x8867))+((cj1*cj2))+(((-1.0)*x8861)));
evalcond[7]=(((r02*x8870))+(((-1.0)*r00*x8862*x8867))+((r01*x8864))+((r00*x8859))+(((-1.0)*x8872))+((r01*x8858*x8860)));
evalcond[8]=(((r20*x8871))+((r20*x8860))+(((-1.0)*r21*x8859*x8867))+((r21*x8862))+(((-1.0)*x8872))+(((-1.0)*r22*sj3*x8868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8873=gconst2*gconst2;
IkReal x8874=gconst1*gconst1;
IkReal x8875=(gconst2*r11);
IkReal x8876=(cj3*r02);
IkReal x8877=(gconst1*r01);
IkReal x8878=(cj3*r10);
IkReal x8879=(r10*sj3);
IkReal x8880=((1.0)*gconst1*r00);
IkReal x8881=(r01*x8874);
IkReal x8882=(r00*x8873);
CheckValue<IkReal> x8883=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x8875*x8880))+((r02*r12*sj3))+(((-1.0)*gconst2*x8877*x8879))+((r11*sj3*x8881))+((x8879*x8882)))),-1);
if(!x8883.valid){
continue;
}
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal((((gconst1*r10*x8876))+((x8875*x8876)))),IkReal(((((-1.0)*cj3*r11*x8882))+((x8878*x8881))+(((-1.0)*gconst2*x8878*x8880))+((cj3*x8875*x8877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8883.value)))+(x8884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8885=IKsin(j4);
IkReal x8886=IKcos(j4);
IkReal x8887=(gconst1*sj3);
IkReal x8888=(cj3*gconst1);
IkReal x8889=(sj1*sj2);
IkReal x8890=(cj3*gconst2);
IkReal x8891=((1.0)*cj2);
IkReal x8892=(gconst2*sj3);
IkReal x8893=((1.0)*cj1*sj2);
IkReal x8894=(sj1*x8891);
IkReal x8895=((1.0)*x8886);
IkReal x8896=((1.0)*x8885);
IkReal x8897=(gconst1*x8885);
IkReal x8898=(cj3*x8885);
IkReal x8899=(x8886*x8892);
IkReal x8900=(x8894+x8893);
evalcond[0]=(((r21*x8897))+(((-1.0)*gconst2*r20*x8896))+(((-1.0)*r22*x8895)));
evalcond[1]=(((r01*x8897))+(((-1.0)*gconst2*r00*x8896))+(((-1.0)*r02*x8895)));
evalcond[2]=((1.0)+(((-1.0)*r12*x8895))+((r11*x8897))+(((-1.0)*gconst2*r10*x8896)));
evalcond[3]=((((-1.0)*r10*x8890*x8895))+((r11*x8886*x8888))+((r12*x8898))+((r10*x8887))+((r11*x8892)));
evalcond[4]=((((-1.0)*r11*x8887*x8895))+(((-1.0)*r12*sj3*x8896))+((r10*x8888))+((r10*x8899))+((r11*x8890)));
evalcond[5]=((((-1.0)*r20*x8890*x8895))+x8889+((r22*x8898))+((r21*x8892))+((r20*x8887))+((r21*x8886*x8888))+(((-1.0)*cj1*x8891)));
evalcond[6]=(((r00*x8888))+((r01*x8890))+(((-1.0)*x8889))+((r00*x8899))+((cj1*cj2))+(((-1.0)*r01*x8887*x8895))+(((-1.0)*r02*sj3*x8896)));
evalcond[7]=(((r00*x8887))+((r01*x8892))+(((-1.0)*x8900))+(((-1.0)*r00*x8890*x8895))+((r02*x8898))+((r01*x8886*x8888)));
evalcond[8]=(((r20*x8899))+(((-1.0)*r22*sj3*x8896))+(((-1.0)*x8900))+(((-1.0)*r21*x8887*x8895))+((r21*x8890))+((r20*x8888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8901=((1.0)*gconst2);
CheckValue<IkReal> x8902=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8901)))),-1);
if(!x8902.valid){
continue;
}
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8901))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8902.value)))+(x8903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8904=IKsin(j4);
IkReal x8905=IKcos(j4);
IkReal x8906=(gconst1*sj3);
IkReal x8907=(cj3*gconst1);
IkReal x8908=(sj1*sj2);
IkReal x8909=(cj3*gconst2);
IkReal x8910=((1.0)*cj2);
IkReal x8911=(gconst2*sj3);
IkReal x8912=((1.0)*cj1*sj2);
IkReal x8913=(sj1*x8910);
IkReal x8914=((1.0)*x8905);
IkReal x8915=((1.0)*x8904);
IkReal x8916=(gconst1*x8904);
IkReal x8917=(cj3*x8904);
IkReal x8918=(x8905*x8911);
IkReal x8919=(x8912+x8913);
evalcond[0]=((((-1.0)*gconst2*r20*x8915))+((r21*x8916))+(((-1.0)*r22*x8914)));
evalcond[1]=(((r01*x8916))+(((-1.0)*r02*x8914))+(((-1.0)*gconst2*r00*x8915)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8915))+(((-1.0)*r12*x8914))+((r11*x8916)));
evalcond[3]=(((r11*x8905*x8907))+((r10*x8906))+((r11*x8911))+(((-1.0)*r10*x8909*x8914))+((r12*x8917)));
evalcond[4]=((((-1.0)*r12*sj3*x8915))+((r11*x8909))+((r10*x8907))+(((-1.0)*r11*x8906*x8914))+((r10*x8918)));
evalcond[5]=(((r22*x8917))+((r20*x8906))+x8908+(((-1.0)*r20*x8909*x8914))+((r21*x8911))+((r21*x8905*x8907))+(((-1.0)*cj1*x8910)));
evalcond[6]=(((r00*x8918))+(((-1.0)*r01*x8906*x8914))+(((-1.0)*r02*sj3*x8915))+((r00*x8907))+((r01*x8909))+(((-1.0)*x8908))+((cj1*cj2)));
evalcond[7]=(((r01*x8905*x8907))+(((-1.0)*x8919))+((r01*x8911))+((r02*x8917))+((r00*x8906))+(((-1.0)*r00*x8909*x8914)));
evalcond[8]=((((-1.0)*x8919))+((r21*x8909))+((r20*x8907))+(((-1.0)*r21*x8906*x8914))+(((-1.0)*r22*sj3*x8915))+((r20*x8918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8920=((-1.0)*r20);
IkReal x8921=x8180;
CheckValue<IkReal> x8923 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8920),IKFAST_ATAN2_MAGTHRESH);
if(!x8923.valid){
continue;
}
IkReal x8922=((-1.0)*(x8923.value));
sj5=gconst1;
cj5=gconst2;
j5=x8922;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8922;
IkReal gconst1=(r21*x8921);
IkReal gconst2=(x8920*x8921);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8924=((-1.0)*r20);
IkReal x8925=x8180;
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8924),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal x8926=((-1.0)*(x8927.value));
sj5=gconst1;
cj5=gconst2;
j5=x8926;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8926;
IkReal gconst1=(r21*x8925);
IkReal gconst2=(x8924*x8925);
CheckValue<IkReal> x8935=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8935.valid){
continue;
}
IkReal x8928=x8935.value;
IkReal x8929=(sj3*x8928);
IkReal x8930=(r11*x8929);
IkReal x8931=(r00*x8929);
IkReal x8932=(r01*x8929);
IkReal x8933=(r10*x8929);
IkReal x8934=(r20*r21*x8929);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x8930))+((r10*r20*r21*x8932))+((r10*x8931*(r20*r20)))+((r01*x8930*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8936=gconst2*gconst2;
IkReal x8937=gconst1*gconst1;
IkReal x8938=((1.0)*cj3);
IkReal x8939=((1.0)*sj3);
IkReal x8940=(r11*sj3);
IkReal x8941=(r10*sj3);
IkReal x8942=(gconst1*gconst2*r00);
IkReal x8943=(gconst1*gconst2*r01);
IkReal x8944=(r00*x8936);
IkReal x8945=(r01*x8937);
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal((((gconst1*r02*x8941))+((gconst2*r02*x8940)))),IkReal(((((-1.0)*r11*x8939*x8944))+((x8940*x8943))+(((-1.0)*r10*x8939*x8942))+((x8941*x8945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
CheckValue<IkReal> x8947=IKPowWithIntegerCheck(IKsign((((cj3*r10*x8943))+(((-1.0)*r11*x8938*x8945))+((cj3*r11*x8942))+(((-1.0)*r02*r12*x8938))+(((-1.0)*r10*x8938*x8944)))),-1);
if(!x8947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8946.value)+(((1.5707963267949)*(x8947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8948=IKsin(j4);
IkReal x8949=IKcos(j4);
IkReal x8950=(sj1*sj2);
IkReal x8951=(gconst1*sj3);
IkReal x8952=(cj3*gconst1);
IkReal x8953=(cj3*gconst2);
IkReal x8954=((1.0)*cj2);
IkReal x8955=(cj1*sj2);
IkReal x8956=(gconst2*sj3);
IkReal x8957=(cj1*x8954);
IkReal x8958=((1.0)*x8949);
IkReal x8959=((1.0)*x8948);
IkReal x8960=(gconst1*x8948);
IkReal x8961=(cj3*x8948);
IkReal x8962=(x8949*x8956);
evalcond[0]=((((-1.0)*r22*x8958))+(((-1.0)*gconst2*r20*x8959))+((r21*x8960)));
evalcond[1]=(((r01*x8960))+(((-1.0)*r02*x8958))+(((-1.0)*gconst2*r00*x8959)));
evalcond[2]=((-1.0)+((r11*x8960))+(((-1.0)*r12*x8958))+(((-1.0)*gconst2*r10*x8959)));
evalcond[3]=(((r11*x8949*x8952))+((r10*x8951))+(((-1.0)*r10*x8953*x8958))+((r12*x8961))+((r11*x8956)));
evalcond[4]=(((r10*x8962))+((r10*x8952))+(((-1.0)*r12*sj3*x8959))+(((-1.0)*r11*x8951*x8958))+((r11*x8953)));
evalcond[5]=(((cj2*sj1))+((r01*x8949*x8952))+((r02*x8961))+(((-1.0)*r00*x8953*x8958))+x8955+((r00*x8951))+((r01*x8956)));
evalcond[6]=(((r22*x8961))+x8950+((r21*x8949*x8952))+((r20*x8951))+(((-1.0)*r20*x8953*x8958))+((r21*x8956))+(((-1.0)*x8957)));
evalcond[7]=(x8950+(((-1.0)*r01*x8951*x8958))+(((-1.0)*r02*sj3*x8959))+((r00*x8962))+((r00*x8952))+((r01*x8953))+(((-1.0)*x8957)));
evalcond[8]=((((-1.0)*sj1*x8954))+(((-1.0)*r22*sj3*x8959))+(((-1.0)*r21*x8951*x8958))+(((-1.0)*x8955))+((r20*x8952))+((r20*x8962))+((r21*x8953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8963=gconst2*gconst2;
IkReal x8964=gconst1*gconst1;
IkReal x8965=(gconst2*r11);
IkReal x8966=(cj3*r02);
IkReal x8967=(gconst1*r01);
IkReal x8968=(cj3*r10);
IkReal x8969=(r10*sj3);
IkReal x8970=((1.0)*gconst1*r00);
IkReal x8971=(r01*x8964);
IkReal x8972=(r00*x8963);
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal((((gconst1*r10*x8966))+((x8965*x8966)))),IkReal(((((-1.0)*cj3*r11*x8972))+(((-1.0)*gconst2*x8968*x8970))+((x8968*x8971))+((cj3*x8965*x8967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x8971))+(((-1.0)*sj3*x8965*x8970))+((x8969*x8972))+(((-1.0)*gconst2*x8967*x8969)))),-1);
if(!x8974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8973.value)+(((1.5707963267949)*(x8974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8975=IKsin(j4);
IkReal x8976=IKcos(j4);
IkReal x8977=(sj1*sj2);
IkReal x8978=(gconst1*sj3);
IkReal x8979=(cj3*gconst1);
IkReal x8980=(cj3*gconst2);
IkReal x8981=((1.0)*cj2);
IkReal x8982=(cj1*sj2);
IkReal x8983=(gconst2*sj3);
IkReal x8984=(cj1*x8981);
IkReal x8985=((1.0)*x8976);
IkReal x8986=((1.0)*x8975);
IkReal x8987=(gconst1*x8975);
IkReal x8988=(cj3*x8975);
IkReal x8989=(x8976*x8983);
evalcond[0]=((((-1.0)*gconst2*r20*x8986))+((r21*x8987))+(((-1.0)*r22*x8985)));
evalcond[1]=(((r01*x8987))+(((-1.0)*r02*x8985))+(((-1.0)*gconst2*r00*x8986)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8986))+(((-1.0)*r12*x8985))+((r11*x8987)));
evalcond[3]=(((r10*x8978))+((r11*x8976*x8979))+(((-1.0)*r10*x8980*x8985))+((r11*x8983))+((r12*x8988)));
evalcond[4]=((((-1.0)*r12*sj3*x8986))+((r10*x8979))+(((-1.0)*r11*x8978*x8985))+((r11*x8980))+((r10*x8989)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x8980*x8985))+((r01*x8983))+((r01*x8976*x8979))+((r02*x8988))+x8982+((r00*x8978)));
evalcond[6]=((((-1.0)*x8984))+((r22*x8988))+((r20*x8978))+x8977+(((-1.0)*r20*x8980*x8985))+((r21*x8976*x8979))+((r21*x8983)));
evalcond[7]=((((-1.0)*r01*x8978*x8985))+((r00*x8989))+((r01*x8980))+(((-1.0)*x8984))+(((-1.0)*r02*sj3*x8986))+x8977+((r00*x8979)));
evalcond[8]=((((-1.0)*x8982))+((r20*x8979))+(((-1.0)*sj1*x8981))+(((-1.0)*r21*x8978*x8985))+((r21*x8980))+((r20*x8989))+(((-1.0)*r22*sj3*x8986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8990.value)+(((1.5707963267949)*(x8991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8992=IKsin(j4);
IkReal x8993=IKcos(j4);
IkReal x8994=(sj1*sj2);
IkReal x8995=(gconst1*sj3);
IkReal x8996=(cj3*gconst1);
IkReal x8997=(cj3*gconst2);
IkReal x8998=((1.0)*cj2);
IkReal x8999=(cj1*sj2);
IkReal x9000=(gconst2*sj3);
IkReal x9001=(cj1*x8998);
IkReal x9002=((1.0)*x8993);
IkReal x9003=((1.0)*x8992);
IkReal x9004=(gconst1*x8992);
IkReal x9005=(cj3*x8992);
IkReal x9006=(x8993*x9000);
evalcond[0]=((((-1.0)*r22*x9002))+((r21*x9004))+(((-1.0)*gconst2*r20*x9003)));
evalcond[1]=((((-1.0)*r02*x9002))+(((-1.0)*gconst2*r00*x9003))+((r01*x9004)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9003))+(((-1.0)*r12*x9002))+((r11*x9004)));
evalcond[3]=(((r10*x8995))+((r11*x8993*x8996))+((r11*x9000))+(((-1.0)*r10*x8997*x9002))+((r12*x9005)));
evalcond[4]=(((r11*x8997))+(((-1.0)*r11*x8995*x9002))+((r10*x8996))+((r10*x9006))+(((-1.0)*r12*sj3*x9003)));
evalcond[5]=(((cj2*sj1))+((r01*x8993*x8996))+x8999+((r02*x9005))+((r00*x8995))+(((-1.0)*r00*x8997*x9002))+((r01*x9000)));
evalcond[6]=((((-1.0)*x9001))+(((-1.0)*r20*x8997*x9002))+((r21*x9000))+((r22*x9005))+((r20*x8995))+x8994+((r21*x8993*x8996)));
evalcond[7]=((((-1.0)*x9001))+x8994+(((-1.0)*r01*x8995*x9002))+(((-1.0)*r02*sj3*x9003))+((r01*x8997))+((r00*x8996))+((r00*x9006)));
evalcond[8]=(((r21*x8997))+((r20*x8996))+(((-1.0)*r21*x8995*x9002))+(((-1.0)*r22*sj3*x9003))+(((-1.0)*x8999))+(((-1.0)*sj1*x8998))+((r20*x9006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9007=((-1.0)*r20);
IkReal x9008=x8180;
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9007),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
IkReal x9009=((-1.0)*(x9010.value));
sj5=gconst1;
cj5=gconst2;
j5=x9009;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9009;
IkReal gconst1=(r21*x9008);
IkReal gconst2=(x9007*x9008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*r20);
IkReal x9012=x8180;
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9011),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9013=((-1.0)*(x9014.value));
sj5=gconst1;
cj5=gconst2;
j5=x9013;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9013;
IkReal gconst1=(r21*x9012);
IkReal gconst2=(x9011*x9012);
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9022.valid){
continue;
}
IkReal x9015=x9022.value;
IkReal x9016=(sj3*x9015);
IkReal x9017=(r11*x9016);
IkReal x9018=(r00*x9016);
IkReal x9019=(r01*x9016);
IkReal x9020=(r10*x9016);
IkReal x9021=(r20*r21*x9016);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9019))+((r10*x9018*(r20*r20)))+((r01*x9017*(r21*r21)))+((r00*r20*r21*x9017))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9023=gconst1*gconst1;
IkReal x9024=gconst2*gconst2;
IkReal x9025=((1.0)*cj3);
IkReal x9026=(gconst2*r10);
IkReal x9027=(r01*sj3);
IkReal x9028=(gconst1*r00*sj3);
IkReal x9029=(gconst1*gconst2*r11);
IkReal x9030=(r10*x9024);
IkReal x9031=(r11*x9023);
CheckValue<IkReal> x9032 = IKatan2WithCheck(IkReal((((gconst2*r12*x9027))+((r12*x9028)))),IkReal((((x9027*x9029))+((r00*sj3*x9031))+(((-1.0)*x9026*x9028))+(((-1.0)*x9027*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9032.valid){
continue;
}
CheckValue<IkReal> x9033=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9029))+((cj3*gconst1*r01*x9026))+(((-1.0)*r01*x9025*x9031))+(((-1.0)*r02*r12*x9025))+(((-1.0)*r00*x9025*x9030)))),-1);
if(!x9033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9032.value)+(((1.5707963267949)*(x9033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9034=IKsin(j4);
IkReal x9035=IKcos(j4);
IkReal x9036=(gconst1*sj3);
IkReal x9037=(cj3*gconst1);
IkReal x9038=(sj1*sj2);
IkReal x9039=(cj3*gconst2);
IkReal x9040=((1.0)*cj2);
IkReal x9041=(gconst2*sj3);
IkReal x9042=((1.0)*cj1*sj2);
IkReal x9043=(sj1*x9040);
IkReal x9044=((1.0)*x9035);
IkReal x9045=((1.0)*x9034);
IkReal x9046=(gconst1*x9034);
IkReal x9047=(cj3*x9034);
IkReal x9048=(x9035*x9041);
IkReal x9049=(x9043+x9042);
evalcond[0]=((((-1.0)*r22*x9044))+((r21*x9046))+(((-1.0)*gconst2*r20*x9045)));
evalcond[1]=((((-1.0)*r12*x9044))+((r11*x9046))+(((-1.0)*gconst2*r10*x9045)));
evalcond[2]=((-1.0)+((r01*x9046))+(((-1.0)*gconst2*r00*x9045))+(((-1.0)*r02*x9044)));
evalcond[3]=(((r00*x9036))+((r01*x9035*x9037))+((r01*x9041))+(((-1.0)*r00*x9039*x9044))+((r02*x9047)));
evalcond[4]=(((r00*x9037))+((r01*x9039))+(((-1.0)*r01*x9036*x9044))+((r00*x9048))+(((-1.0)*r02*sj3*x9045)));
evalcond[5]=((((-1.0)*r20*x9039*x9044))+x9038+((r21*x9035*x9037))+(((-1.0)*cj1*x9040))+((r22*x9047))+((r21*x9041))+((r20*x9036)));
evalcond[6]=((((-1.0)*r11*x9036*x9044))+((r10*x9037))+((r10*x9048))+((r11*x9039))+((cj1*cj2))+(((-1.0)*x9038))+(((-1.0)*r12*sj3*x9045)));
evalcond[7]=(((r11*x9035*x9037))+((r12*x9047))+((r10*x9036))+(((-1.0)*x9049))+(((-1.0)*r10*x9039*x9044))+((r11*x9041)));
evalcond[8]=(((r20*x9048))+((r21*x9039))+(((-1.0)*r22*sj3*x9045))+(((-1.0)*x9049))+(((-1.0)*r21*x9036*x9044))+((r20*x9037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9050=gconst2*gconst2;
IkReal x9051=gconst1*gconst1;
IkReal x9052=(gconst1*r00);
IkReal x9053=(r11*sj3);
IkReal x9054=((1.0)*gconst2);
IkReal x9055=(cj3*r12);
IkReal x9056=(cj3*r11);
IkReal x9057=(gconst2*r01);
IkReal x9058=(cj3*r10);
IkReal x9059=(r10*sj3);
CheckValue<IkReal> x9060=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9051*x9053))+(((-1.0)*gconst1*r01*x9054*x9059))+((r00*x9050*x9059))+(((-1.0)*x9052*x9053*x9054)))),-1);
if(!x9060.valid){
continue;
}
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal((((x9055*x9057))+((x9052*x9055)))),IkReal((((gconst1*x9056*x9057))+(((-1.0)*x9052*x9054*x9058))+(((-1.0)*r01*x9050*x9058))+((r00*x9051*x9056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9060.value)))+(x9061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9062=IKsin(j4);
IkReal x9063=IKcos(j4);
IkReal x9064=(gconst1*sj3);
IkReal x9065=(cj3*gconst1);
IkReal x9066=(sj1*sj2);
IkReal x9067=(cj3*gconst2);
IkReal x9068=((1.0)*cj2);
IkReal x9069=(gconst2*sj3);
IkReal x9070=((1.0)*cj1*sj2);
IkReal x9071=(sj1*x9068);
IkReal x9072=((1.0)*x9063);
IkReal x9073=((1.0)*x9062);
IkReal x9074=(gconst1*x9062);
IkReal x9075=(cj3*x9062);
IkReal x9076=(x9063*x9069);
IkReal x9077=(x9070+x9071);
evalcond[0]=(((r21*x9074))+(((-1.0)*r22*x9072))+(((-1.0)*gconst2*r20*x9073)));
evalcond[1]=((((-1.0)*gconst2*r10*x9073))+(((-1.0)*r12*x9072))+((r11*x9074)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9072))+(((-1.0)*gconst2*r00*x9073))+((r01*x9074)));
evalcond[3]=(((r00*x9064))+((r01*x9069))+(((-1.0)*r00*x9067*x9072))+((r02*x9075))+((r01*x9063*x9065)));
evalcond[4]=(((r00*x9065))+((r01*x9067))+(((-1.0)*r01*x9064*x9072))+((r00*x9076))+(((-1.0)*r02*sj3*x9073)));
evalcond[5]=((((-1.0)*r20*x9067*x9072))+x9066+(((-1.0)*cj1*x9068))+((r21*x9063*x9065))+((r22*x9075))+((r21*x9069))+((r20*x9064)));
evalcond[6]=(((r11*x9067))+(((-1.0)*r12*sj3*x9073))+((r10*x9065))+(((-1.0)*x9066))+(((-1.0)*r11*x9064*x9072))+((r10*x9076))+((cj1*cj2)));
evalcond[7]=(((r11*x9069))+((r10*x9064))+(((-1.0)*x9077))+((r11*x9063*x9065))+(((-1.0)*r10*x9067*x9072))+((r12*x9075)));
evalcond[8]=((((-1.0)*r21*x9064*x9072))+((r20*x9076))+(((-1.0)*x9077))+((r21*x9067))+(((-1.0)*r22*sj3*x9073))+((r20*x9065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9078=((1.0)*gconst2);
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9078)))),-1);
if(!x9079.valid){
continue;
}
CheckValue<IkReal> x9080 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9079.value)))+(x9080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9081=IKsin(j4);
IkReal x9082=IKcos(j4);
IkReal x9083=(gconst1*sj3);
IkReal x9084=(cj3*gconst1);
IkReal x9085=(sj1*sj2);
IkReal x9086=(cj3*gconst2);
IkReal x9087=((1.0)*cj2);
IkReal x9088=(gconst2*sj3);
IkReal x9089=((1.0)*cj1*sj2);
IkReal x9090=(sj1*x9087);
IkReal x9091=((1.0)*x9082);
IkReal x9092=((1.0)*x9081);
IkReal x9093=(gconst1*x9081);
IkReal x9094=(cj3*x9081);
IkReal x9095=(x9082*x9088);
IkReal x9096=(x9090+x9089);
evalcond[0]=((((-1.0)*gconst2*r20*x9092))+((r21*x9093))+(((-1.0)*r22*x9091)));
evalcond[1]=(((r11*x9093))+(((-1.0)*gconst2*r10*x9092))+(((-1.0)*r12*x9091)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9092))+((r01*x9093))+(((-1.0)*r02*x9091)));
evalcond[3]=((((-1.0)*r00*x9086*x9091))+((r01*x9088))+((r00*x9083))+((r02*x9094))+((r01*x9082*x9084)));
evalcond[4]=(((r01*x9086))+((r00*x9095))+((r00*x9084))+(((-1.0)*r01*x9083*x9091))+(((-1.0)*r02*sj3*x9092)));
evalcond[5]=((((-1.0)*cj1*x9087))+(((-1.0)*r20*x9086*x9091))+((r20*x9083))+((r21*x9082*x9084))+x9085+((r21*x9088))+((r22*x9094)));
evalcond[6]=((((-1.0)*r12*sj3*x9092))+((r10*x9095))+((r11*x9086))+((r10*x9084))+((cj1*cj2))+(((-1.0)*x9085))+(((-1.0)*r11*x9083*x9091)));
evalcond[7]=(((r11*x9088))+((r10*x9083))+((r12*x9094))+(((-1.0)*x9096))+((r11*x9082*x9084))+(((-1.0)*r10*x9086*x9091)));
evalcond[8]=(((r20*x9084))+(((-1.0)*r21*x9083*x9091))+((r20*x9095))+(((-1.0)*r22*sj3*x9092))+(((-1.0)*x9096))+((r21*x9086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9097=((-1.0)*r20);
IkReal x9098=x8180;
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9097),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
IkReal x9099=((-1.0)*(x9100.value));
sj5=gconst1;
cj5=gconst2;
j5=x9099;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9099;
IkReal gconst1=(r21*x9098);
IkReal gconst2=(x9097*x9098);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9101=((-1.0)*r20);
IkReal x9102=x8180;
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9101),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9103=((-1.0)*(x9104.value));
sj5=gconst1;
cj5=gconst2;
j5=x9103;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9103;
IkReal gconst1=(r21*x9102);
IkReal gconst2=(x9101*x9102);
CheckValue<IkReal> x9112=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9112.valid){
continue;
}
IkReal x9105=x9112.value;
IkReal x9106=(sj3*x9105);
IkReal x9107=(r11*x9106);
IkReal x9108=(r00*x9106);
IkReal x9109=(r01*x9106);
IkReal x9110=(r10*x9106);
IkReal x9111=(r20*r21*x9106);
j4eval[0]=IKsign((((r10*x9108*(r20*r20)))+((r02*r12*sj3))+((r10*r20*r21*x9109))+((r00*r20*r21*x9107))+((r01*x9107*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9113=gconst1*gconst1;
IkReal x9114=gconst2*gconst2;
IkReal x9115=((1.0)*cj3);
IkReal x9116=(gconst2*r10);
IkReal x9117=(r01*sj3);
IkReal x9118=(gconst1*r00*sj3);
IkReal x9119=(gconst1*gconst2*r11);
IkReal x9120=(r10*x9114);
IkReal x9121=(r11*x9113);
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal((((gconst2*r12*x9117))+((r12*x9118)))),IkReal((((r00*sj3*x9121))+(((-1.0)*x9116*x9118))+((x9117*x9119))+(((-1.0)*x9117*x9120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9115*x9120))+(((-1.0)*r02*r12*x9115))+((cj3*r00*x9119))+(((-1.0)*r01*x9115*x9121))+((cj3*gconst1*r01*x9116)))),-1);
if(!x9123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9122.value)+(((1.5707963267949)*(x9123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9124=IKsin(j4);
IkReal x9125=IKcos(j4);
IkReal x9126=(sj1*sj2);
IkReal x9127=(gconst1*sj3);
IkReal x9128=(cj3*gconst1);
IkReal x9129=(cj3*gconst2);
IkReal x9130=((1.0)*cj2);
IkReal x9131=(cj1*sj2);
IkReal x9132=(gconst2*sj3);
IkReal x9133=(cj1*x9130);
IkReal x9134=((1.0)*x9125);
IkReal x9135=((1.0)*x9124);
IkReal x9136=(gconst1*x9124);
IkReal x9137=(cj3*x9124);
IkReal x9138=(x9125*x9132);
evalcond[0]=((((-1.0)*r22*x9134))+((r21*x9136))+(((-1.0)*gconst2*r20*x9135)));
evalcond[1]=((((-1.0)*gconst2*r10*x9135))+(((-1.0)*r12*x9134))+((r11*x9136)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9134))+(((-1.0)*gconst2*r00*x9135))+((r01*x9136)));
evalcond[3]=(((r02*x9137))+(((-1.0)*r00*x9129*x9134))+((r00*x9127))+((r01*x9125*x9128))+((r01*x9132)));
evalcond[4]=((((-1.0)*r02*sj3*x9135))+((r01*x9129))+((r00*x9128))+((r00*x9138))+(((-1.0)*r01*x9127*x9134)));
evalcond[5]=(((cj2*sj1))+((r10*x9127))+(((-1.0)*r10*x9129*x9134))+((r11*x9125*x9128))+x9131+((r12*x9137))+((r11*x9132)));
evalcond[6]=((((-1.0)*r20*x9129*x9134))+x9126+((r21*x9125*x9128))+((r22*x9137))+((r20*x9127))+((r21*x9132))+(((-1.0)*x9133)));
evalcond[7]=(((r10*x9128))+((r10*x9138))+x9126+(((-1.0)*r12*sj3*x9135))+(((-1.0)*r11*x9127*x9134))+((r11*x9129))+(((-1.0)*x9133)));
evalcond[8]=((((-1.0)*x9131))+(((-1.0)*sj1*x9130))+((r20*x9138))+((r20*x9128))+(((-1.0)*r22*sj3*x9135))+((r21*x9129))+(((-1.0)*r21*x9127*x9134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9139=gconst2*gconst2;
IkReal x9140=gconst1*gconst1;
IkReal x9141=(gconst1*r00);
IkReal x9142=(r11*sj3);
IkReal x9143=((1.0)*gconst2);
IkReal x9144=(cj3*r12);
IkReal x9145=(cj3*r11);
IkReal x9146=(gconst2*r01);
IkReal x9147=(cj3*r10);
IkReal x9148=(r10*sj3);
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal((((x9144*x9146))+((x9141*x9144)))),IkReal(((((-1.0)*x9141*x9143*x9147))+((gconst1*x9145*x9146))+((r00*x9140*x9145))+(((-1.0)*r01*x9139*x9147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
CheckValue<IkReal> x9150=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9139*x9148))+(((-1.0)*gconst1*r01*x9143*x9148))+(((-1.0)*x9141*x9142*x9143))+((r01*x9140*x9142)))),-1);
if(!x9150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9149.value)+(((1.5707963267949)*(x9150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9151=IKsin(j4);
IkReal x9152=IKcos(j4);
IkReal x9153=(sj1*sj2);
IkReal x9154=(gconst1*sj3);
IkReal x9155=(cj3*gconst1);
IkReal x9156=(cj3*gconst2);
IkReal x9157=((1.0)*cj2);
IkReal x9158=(cj1*sj2);
IkReal x9159=(gconst2*sj3);
IkReal x9160=(cj1*x9157);
IkReal x9161=((1.0)*x9152);
IkReal x9162=((1.0)*x9151);
IkReal x9163=(gconst1*x9151);
IkReal x9164=(cj3*x9151);
IkReal x9165=(x9152*x9159);
evalcond[0]=((((-1.0)*r22*x9161))+((r21*x9163))+(((-1.0)*gconst2*r20*x9162)));
evalcond[1]=((((-1.0)*r12*x9161))+(((-1.0)*gconst2*r10*x9162))+((r11*x9163)));
evalcond[2]=((1.0)+((r01*x9163))+(((-1.0)*r02*x9161))+(((-1.0)*gconst2*r00*x9162)));
evalcond[3]=((((-1.0)*r00*x9156*x9161))+((r02*x9164))+((r01*x9152*x9155))+((r01*x9159))+((r00*x9154)));
evalcond[4]=(((r00*x9165))+(((-1.0)*r02*sj3*x9162))+((r01*x9156))+((r00*x9155))+(((-1.0)*r01*x9154*x9161)));
evalcond[5]=(((r11*x9159))+((cj2*sj1))+x9158+(((-1.0)*r10*x9156*x9161))+((r12*x9164))+((r11*x9152*x9155))+((r10*x9154)));
evalcond[6]=(((r22*x9164))+x9153+((r21*x9152*x9155))+((r20*x9154))+(((-1.0)*r20*x9156*x9161))+(((-1.0)*x9160))+((r21*x9159)));
evalcond[7]=(((r11*x9156))+(((-1.0)*r11*x9154*x9161))+x9153+((r10*x9165))+(((-1.0)*r12*sj3*x9162))+(((-1.0)*x9160))+((r10*x9155)));
evalcond[8]=((((-1.0)*sj1*x9157))+((r20*x9155))+((r20*x9165))+((r21*x9156))+(((-1.0)*x9158))+(((-1.0)*r22*sj3*x9162))+(((-1.0)*r21*x9154*x9161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9166 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9166.valid){
continue;
}
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9166.value)+(((1.5707963267949)*(x9167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9168=IKsin(j4);
IkReal x9169=IKcos(j4);
IkReal x9170=(sj1*sj2);
IkReal x9171=(gconst1*sj3);
IkReal x9172=(cj3*gconst1);
IkReal x9173=(cj3*gconst2);
IkReal x9174=((1.0)*cj2);
IkReal x9175=(cj1*sj2);
IkReal x9176=(gconst2*sj3);
IkReal x9177=(cj1*x9174);
IkReal x9178=((1.0)*x9169);
IkReal x9179=((1.0)*x9168);
IkReal x9180=(gconst1*x9168);
IkReal x9181=(cj3*x9168);
IkReal x9182=(x9169*x9176);
evalcond[0]=((((-1.0)*gconst2*r20*x9179))+(((-1.0)*r22*x9178))+((r21*x9180)));
evalcond[1]=(((r11*x9180))+(((-1.0)*gconst2*r10*x9179))+(((-1.0)*r12*x9178)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9179))+(((-1.0)*r02*x9178))+((r01*x9180)));
evalcond[3]=(((r02*x9181))+((r00*x9171))+((r01*x9169*x9172))+((r01*x9176))+(((-1.0)*r00*x9173*x9178)));
evalcond[4]=(((r00*x9182))+((r00*x9172))+(((-1.0)*r01*x9171*x9178))+((r01*x9173))+(((-1.0)*r02*sj3*x9179)));
evalcond[5]=(((cj2*sj1))+((r10*x9171))+((r12*x9181))+x9175+(((-1.0)*r10*x9173*x9178))+((r11*x9169*x9172))+((r11*x9176)));
evalcond[6]=(x9170+(((-1.0)*x9177))+(((-1.0)*r20*x9173*x9178))+((r20*x9171))+((r21*x9176))+((r21*x9169*x9172))+((r22*x9181)));
evalcond[7]=(((r10*x9172))+x9170+(((-1.0)*x9177))+((r10*x9182))+(((-1.0)*r11*x9171*x9178))+((r11*x9173))+(((-1.0)*r12*sj3*x9179)));
evalcond[8]=((((-1.0)*x9175))+((r20*x9182))+((r20*x9172))+((r21*x9173))+(((-1.0)*r22*sj3*x9179))+(((-1.0)*r21*x9171*x9178))+(((-1.0)*sj1*x9174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9183=((-1.0)*r20);
IkReal x9184=((-1.0)*px);
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9183),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
IkReal x9185=((-1.0)*(x9186.value));
sj5=gconst1;
cj5=gconst2;
j5=x9185;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9184);
rxp1_1=(px*r21);
rxp1_2=(r11*x9184);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9185;
IkReal gconst1=r21;
IkReal gconst2=x9183;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9187=((-1.0)*r20);
IkReal x9188=((-1.0)*px);
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9187),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
IkReal x9189=((-1.0)*(x9190.value));
sj5=gconst1;
cj5=gconst2;
j5=x9189;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9188);
rxp1_1=(px*r21);
rxp1_2=(r11*x9188);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9189;
IkReal gconst1=r21;
IkReal gconst2=x9187;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9191=((-1.0)*r20);
IkReal x9192=((-1.0)*px);
CheckValue<IkReal> x9194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9191),IKFAST_ATAN2_MAGTHRESH);
if(!x9194.valid){
continue;
}
IkReal x9193=((-1.0)*(x9194.value));
sj5=gconst1;
cj5=gconst2;
j5=x9193;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9192);
rxp1_1=(px*r21);
rxp1_2=(r11*x9192);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9193;
IkReal gconst1=r21;
IkReal gconst2=x9191;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9195=((-1.0)*r20);
IkReal x9196=((-1.0)*px);
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9195),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
IkReal x9197=((-1.0)*(x9198.value));
sj5=gconst1;
cj5=gconst2;
j5=x9197;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9196);
rxp1_1=(px*r21);
rxp1_2=(r11*x9196);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9197;
IkReal gconst1=r21;
IkReal gconst2=x9195;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9199=((-1.0)*r20);
IkReal x9200=((-1.0)*px);
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9199),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
IkReal x9201=((-1.0)*(x9202.value));
sj5=gconst1;
cj5=gconst2;
j5=x9201;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9200);
rxp1_1=(px*r21);
rxp1_2=(r11*x9200);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9201;
IkReal gconst1=r21;
IkReal gconst2=x9199;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9203=((-1.0)*r20);
IkReal x9204=((-1.0)*px);
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9203),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
IkReal x9205=((-1.0)*(x9206.value));
sj5=gconst1;
cj5=gconst2;
j5=x9205;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9204);
rxp1_1=(px*r21);
rxp1_2=(r11*x9204);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9205;
IkReal gconst1=r21;
IkReal gconst2=x9203;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9209=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9209.valid){
continue;
}
IkReal x9207=x9209.value;
IkReal x9208=(sj0*x9207);
cj4array[0]=(((sj1*sj2*x9208))+(((-1.0)*cj1*cj2*x9208)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9210=IKsin(j4);
IkReal x9211=IKcos(j4);
IkReal x9212=(gconst1*x9210);
IkReal x9213=((1.0)*x9211);
IkReal x9214=((1.0)*gconst2*x9210);
evalcond[0]=((-1.0)*r02*x9210);
evalcond[1]=((((-1.0)*r02*x9213))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x9212))+(((-1.0)*r20*x9214)));
evalcond[3]=((((-1.0)*r10*x9214))+((r11*x9212)));
evalcond[4]=((((-1.0)*cj2*sj1))+((gconst2*r20*x9211))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x9213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9216=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9216.valid){
continue;
}
IkReal x9215=x9216.value;
cj4array[0]=(((cj2*sj1*x9215))+((cj1*sj2*x9215)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9217=IKsin(j4);
IkReal x9218=IKcos(j4);
IkReal x9219=(gconst2*r10);
IkReal x9220=((1.0)*sj0);
IkReal x9221=((1.0)*x9217);
IkReal x9222=(gconst1*x9217);
IkReal x9223=((1.0)*x9218);
evalcond[0]=((-1.0)*r02*x9217);
evalcond[1]=((((-1.0)*x9220))+(((-1.0)*r02*x9223)));
evalcond[2]=((((-1.0)*gconst2*r20*x9221))+((r21*x9222)));
evalcond[3]=((((-1.0)*x9219*x9221))+((r11*x9222)));
evalcond[4]=(((cj1*cj2*sj0))+((x9218*x9219))+(((-1.0)*sj1*sj2*x9220))+(((-1.0)*gconst1*r11*x9223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9224=IKPowWithIntegerCheck(r02,-1);
if(!x9224.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9224.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9225=IKsin(j4);
IkReal x9226=IKcos(j4);
IkReal x9227=(gconst2*r10);
IkReal x9228=((1.0)*sj1);
IkReal x9229=(gconst1*r11);
IkReal x9230=(gconst1*r21);
IkReal x9231=(gconst2*r20);
IkReal x9232=((1.0)*x9225);
IkReal x9233=((1.0)*x9226);
evalcond[0]=((-1.0)*r02*x9225);
evalcond[1]=(((x9225*x9230))+(((-1.0)*x9231*x9232)));
evalcond[2]=((((-1.0)*x9227*x9232))+((x9225*x9229)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9228))+((x9226*x9231))+(((-1.0)*x9230*x9233)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x9228))+((x9226*x9227))+(((-1.0)*x9229*x9233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9234=((-1.0)*r20);
IkReal x9235=((-1.0)*px);
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9234),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
IkReal x9236=((-1.0)*(x9237.value));
sj5=gconst1;
cj5=gconst2;
j5=x9236;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9235);
rxp1_1=(px*r21);
rxp1_2=(r11*x9235);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9236;
IkReal gconst1=r21;
IkReal gconst2=x9234;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9238=((-1.0)*r20);
IkReal x9239=((-1.0)*px);
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj5=gconst1;
cj5=gconst2;
j5=x9240;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9239);
rxp1_1=(px*r21);
rxp1_2=(r11*x9239);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9240;
IkReal gconst1=r21;
IkReal gconst2=x9238;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9242=((-1.0)*r20);
IkReal x9243=((-1.0)*px);
CheckValue<IkReal> x9245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9242),IKFAST_ATAN2_MAGTHRESH);
if(!x9245.valid){
continue;
}
IkReal x9244=((-1.0)*(x9245.value));
sj5=gconst1;
cj5=gconst2;
j5=x9244;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9243);
rxp1_1=(px*r21);
rxp1_2=(r11*x9243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9244;
IkReal gconst1=r21;
IkReal gconst2=x9242;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9248=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9248.valid){
continue;
}
IkReal x9246=x9248.value;
IkReal x9247=(sj0*x9246);
cj4array[0]=((((-1.0)*cj1*cj2*x9247))+((sj1*sj2*x9247)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9249=IKsin(j4);
IkReal x9250=IKcos(j4);
IkReal x9251=((1.0)*gconst2);
IkReal x9252=(gconst1*r21);
evalcond[0]=(r02*x9249);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9250)));
evalcond[2]=((((-1.0)*r20*x9249*x9251))+((x9249*x9252)));
evalcond[3]=((((-1.0)*r10*x9249*x9251))+((gconst1*r11*x9249)));
evalcond[4]=(((x9250*x9252))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x9250*x9251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9254.valid){
continue;
}
IkReal x9253=x9254.value;
cj4array[0]=(((cj2*sj1*x9253))+((cj1*sj2*x9253)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9255=IKsin(j4);
IkReal x9256=IKcos(j4);
IkReal x9257=((1.0)*sj0);
IkReal x9258=(gconst1*x9255);
IkReal x9259=((1.0)*x9256);
IkReal x9260=((1.0)*gconst2*x9255);
evalcond[0]=(r02*x9255);
evalcond[1]=((((-1.0)*x9257))+(((-1.0)*r02*x9259)));
evalcond[2]=((((-1.0)*r20*x9260))+((r21*x9258)));
evalcond[3]=((((-1.0)*r10*x9260))+((r11*x9258)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst2*r10*x9259))+(((-1.0)*sj1*sj2*x9257))+((gconst1*r11*x9256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9261=IKPowWithIntegerCheck(r02,-1);
if(!x9261.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9261.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9262=IKsin(j4);
IkReal x9263=IKcos(j4);
IkReal x9264=((1.0)*gconst2);
IkReal x9265=(gconst1*r21);
IkReal x9266=((1.0)*sj1);
IkReal x9267=(gconst1*r11);
evalcond[0]=(r02*x9262);
evalcond[1]=(((x9262*x9265))+(((-1.0)*r20*x9262*x9264)));
evalcond[2]=(((x9262*x9267))+(((-1.0)*r10*x9262*x9264)));
evalcond[3]=(((x9263*x9265))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x9263*x9264))+(((-1.0)*cj2*x9266)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x9263*x9264))+((x9263*x9267))+(((-1.0)*sj0*sj2*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(r02,-1);
if(!x9269.valid){
continue;
}
IkReal x9268=x9269.value;
CheckValue<IkReal> x9270=IKPowWithIntegerCheck(cj3,-1);
if(!x9270.valid){
continue;
}
if( IKabs((x9268*(x9270.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9268)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9268*(x9270.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x9268))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9268*(x9270.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x9268));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9271=IKsin(j4);
IkReal x9272=IKcos(j4);
IkReal x9273=(gconst2*r10);
IkReal x9274=(gconst1*r11);
IkReal x9275=(cj1*cj2);
IkReal x9276=(cj3*gconst1);
IkReal x9277=(sj1*sj2);
IkReal x9278=(gconst2*r20);
IkReal x9279=(gconst1*sj3);
IkReal x9280=(gconst2*r11);
IkReal x9281=(gconst1*r21);
IkReal x9282=((1.0)*sj0);
IkReal x9283=(gconst2*r21);
IkReal x9284=(sj3*x9272);
IkReal x9285=(cj3*x9272);
IkReal x9286=((1.0)*cj2*sj1);
IkReal x9287=((1.0)*cj1*sj2);
IkReal x9288=(r02*x9271);
IkReal x9289=((1.0)*x9271);
evalcond[0]=((((-1.0)*x9282))+(((-1.0)*r02*x9272)));
evalcond[1]=((((-1.0)*x9278*x9289))+((x9271*x9281)));
evalcond[2]=(cj0+(((-1.0)*x9273*x9289))+((x9271*x9274)));
evalcond[3]=(((cj0*x9275))+(((-1.0)*sj3*x9288))+(((-1.0)*cj0*x9277)));
evalcond[4]=(((cj3*x9288))+(((-1.0)*cj0*x9287))+(((-1.0)*cj0*x9286)));
evalcond[5]=((((-1.0)*x9278*x9285))+x9277+((r20*x9279))+(((-1.0)*x9275))+((r21*x9272*x9276))+((sj3*x9283)));
evalcond[6]=((((-1.0)*x9287))+(((-1.0)*x9286))+((cj3*x9283))+((r20*x9276))+((x9278*x9284))+(((-1.0)*r21*x9272*x9279)));
evalcond[7]=(((sj0*x9275))+((cj3*x9280))+((r10*x9276))+(((-1.0)*x9277*x9282))+((x9273*x9284))+(((-1.0)*x9274*x9284)));
evalcond[8]=((((-1.0)*x9273*x9285))+((r10*x9279))+(((-1.0)*cj2*sj1*x9282))+((sj3*x9280))+((x9274*x9285))+(((-1.0)*cj1*sj2*x9282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9290=((1.0)*sj3);
IkReal x9291=((1.0)*gconst2);
CheckValue<IkReal> x9292=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9291))),-1);
if(!x9292.valid){
continue;
}
CheckValue<IkReal> x9293=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9291))),-1);
if(!x9293.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9293.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r20*x9290))+((cj1*cj2))+(((-1.0)*gconst2*r21*x9290)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9292.value)))+IKsqr(((x9293.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r20*x9290))+((cj1*cj2))+(((-1.0)*gconst2*r21*x9290))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9292.value)), ((x9293.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r20*x9290))+((cj1*cj2))+(((-1.0)*gconst2*r21*x9290))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9294=IKsin(j4);
IkReal x9295=IKcos(j4);
IkReal x9296=(gconst2*r10);
IkReal x9297=(gconst1*r11);
IkReal x9298=(cj1*cj2);
IkReal x9299=(cj3*gconst1);
IkReal x9300=(sj1*sj2);
IkReal x9301=(gconst2*r20);
IkReal x9302=(gconst1*sj3);
IkReal x9303=(gconst2*r11);
IkReal x9304=(gconst1*r21);
IkReal x9305=((1.0)*sj0);
IkReal x9306=(gconst2*r21);
IkReal x9307=(sj3*x9295);
IkReal x9308=(cj3*x9295);
IkReal x9309=((1.0)*cj2*sj1);
IkReal x9310=((1.0)*cj1*sj2);
IkReal x9311=(r02*x9294);
IkReal x9312=((1.0)*x9294);
evalcond[0]=((((-1.0)*x9305))+(((-1.0)*r02*x9295)));
evalcond[1]=((((-1.0)*x9301*x9312))+((x9294*x9304)));
evalcond[2]=((((-1.0)*x9296*x9312))+cj0+((x9294*x9297)));
evalcond[3]=((((-1.0)*sj3*x9311))+(((-1.0)*cj0*x9300))+((cj0*x9298)));
evalcond[4]=(((cj3*x9311))+(((-1.0)*cj0*x9309))+(((-1.0)*cj0*x9310)));
evalcond[5]=(x9300+(((-1.0)*x9298))+((r21*x9295*x9299))+((r20*x9302))+(((-1.0)*x9301*x9308))+((sj3*x9306)));
evalcond[6]=(((x9301*x9307))+((cj3*x9306))+((r20*x9299))+(((-1.0)*x9309))+(((-1.0)*x9310))+(((-1.0)*r21*x9295*x9302)));
evalcond[7]=((((-1.0)*x9300*x9305))+((cj3*x9303))+((x9296*x9307))+((r10*x9299))+(((-1.0)*x9297*x9307))+((sj0*x9298)));
evalcond[8]=((((-1.0)*cj2*sj1*x9305))+(((-1.0)*x9296*x9308))+(((-1.0)*cj1*sj2*x9305))+((x9297*x9308))+((r10*x9302))+((sj3*x9303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9313=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9313.valid){
continue;
}
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(r02,-1);
if(!x9314.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9313.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9314.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9313.value)))+IKsqr(((-1.0)*sj0*(x9314.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9313.value)), ((-1.0)*sj0*(x9314.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9315=IKsin(j4);
IkReal x9316=IKcos(j4);
IkReal x9317=(gconst2*r10);
IkReal x9318=(gconst1*r11);
IkReal x9319=(cj1*cj2);
IkReal x9320=(cj3*gconst1);
IkReal x9321=(sj1*sj2);
IkReal x9322=(gconst2*r20);
IkReal x9323=(gconst1*sj3);
IkReal x9324=(gconst2*r11);
IkReal x9325=(gconst1*r21);
IkReal x9326=((1.0)*sj0);
IkReal x9327=(gconst2*r21);
IkReal x9328=(sj3*x9316);
IkReal x9329=(cj3*x9316);
IkReal x9330=((1.0)*cj2*sj1);
IkReal x9331=((1.0)*cj1*sj2);
IkReal x9332=(r02*x9315);
IkReal x9333=((1.0)*x9315);
evalcond[0]=((((-1.0)*x9326))+(((-1.0)*r02*x9316)));
evalcond[1]=((((-1.0)*x9322*x9333))+((x9315*x9325)));
evalcond[2]=(((x9315*x9318))+cj0+(((-1.0)*x9317*x9333)));
evalcond[3]=(((cj0*x9319))+(((-1.0)*sj3*x9332))+(((-1.0)*cj0*x9321)));
evalcond[4]=((((-1.0)*cj0*x9331))+(((-1.0)*cj0*x9330))+((cj3*x9332)));
evalcond[5]=(((r20*x9323))+x9321+((sj3*x9327))+(((-1.0)*x9322*x9329))+(((-1.0)*x9319))+((r21*x9316*x9320)));
evalcond[6]=(((r20*x9320))+((cj3*x9327))+((x9322*x9328))+(((-1.0)*r21*x9316*x9323))+(((-1.0)*x9330))+(((-1.0)*x9331)));
evalcond[7]=(((x9317*x9328))+((r10*x9320))+((sj0*x9319))+((cj3*x9324))+(((-1.0)*x9321*x9326))+(((-1.0)*x9318*x9328)));
evalcond[8]=((((-1.0)*x9317*x9329))+((sj3*x9324))+((x9318*x9329))+(((-1.0)*cj2*sj1*x9326))+((r10*x9323))+(((-1.0)*cj1*sj2*x9326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9334=gconst1*gconst1;
IkReal x9335=r21*r21;
IkReal x9336=gconst2*gconst2;
IkReal x9337=r20*r20;
IkReal x9338=((1.0)*r22);
IkReal x9339=(cj1*sj2);
IkReal x9340=(cj2*sj1);
IkReal x9341=(gconst2*r20);
IkReal x9342=(cj3*gconst2);
IkReal x9343=((1.0)*gconst1);
IkReal x9344=(cj3*r20);
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9334*x9335))+(((-2.0)*gconst1*r21*sj3*x9341))+((sj3*x9336*x9337)))),-1);
if(!x9345.valid){
continue;
}
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((((-1.0)*x9338*x9340))+(((-1.0)*x9338*x9339))+((gconst1*r22*x9344))+((r21*r22*x9342)))),IkReal(((((-1.0)*r21*x9336*x9344))+((x9339*x9341))+(((-1.0)*x9337*x9342*x9343))+((r21*x9334*x9344))+(((-1.0)*r21*x9339*x9343))+((x9340*x9341))+((gconst1*x9335*x9342))+(((-1.0)*r21*x9340*x9343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9345.value)))+(x9346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9347=IKsin(j4);
IkReal x9348=IKcos(j4);
IkReal x9349=(gconst1*sj3);
IkReal x9350=(cj1*cj2);
IkReal x9351=(cj3*gconst1);
IkReal x9352=(sj1*sj2);
IkReal x9353=(cj3*gconst2);
IkReal x9354=(gconst2*sj3);
IkReal x9355=((1.0)*sj0);
IkReal x9356=((1.0)*x9348);
IkReal x9357=((1.0)*x9347);
IkReal x9358=(gconst1*x9347);
IkReal x9359=(cj3*x9347);
IkReal x9360=((1.0)*cj2*sj1);
IkReal x9361=((1.0)*cj1*sj2);
IkReal x9362=(x9348*x9354);
evalcond[0]=((((-1.0)*r22*x9356))+(((-1.0)*gconst2*r20*x9357))+((r21*x9358)));
evalcond[1]=(((r11*x9358))+cj0+(((-1.0)*r12*x9356))+(((-1.0)*gconst2*r10*x9357)));
evalcond[2]=((((-1.0)*r02*x9356))+(((-1.0)*x9355))+((r01*x9358))+(((-1.0)*gconst2*r00*x9357)));
evalcond[3]=(((r21*x9348*x9351))+x9352+(((-1.0)*r20*x9353*x9356))+(((-1.0)*x9350))+((r20*x9349))+((r21*x9354))+((r22*x9359)));
evalcond[4]=((((-1.0)*r21*x9349*x9356))+(((-1.0)*r22*sj3*x9357))+(((-1.0)*x9360))+(((-1.0)*x9361))+((r20*x9351))+((r21*x9353))+((r20*x9362)));
evalcond[5]=(((cj0*x9350))+((r01*x9353))+((r00*x9351))+(((-1.0)*r02*sj3*x9357))+(((-1.0)*cj0*x9352))+((r00*x9362))+(((-1.0)*r01*x9349*x9356)));
evalcond[6]=(((r01*x9348*x9351))+((r00*x9349))+((r01*x9354))+(((-1.0)*cj0*x9361))+(((-1.0)*cj0*x9360))+((r02*x9359))+(((-1.0)*r00*x9353*x9356)));
evalcond[7]=(((r11*x9353))+(((-1.0)*r12*sj3*x9357))+(((-1.0)*r11*x9349*x9356))+((r10*x9351))+((sj0*x9350))+((r10*x9362))+(((-1.0)*x9352*x9355)));
evalcond[8]=(((r11*x9354))+((r11*x9348*x9351))+(((-1.0)*cj2*sj1*x9355))+((r10*x9349))+(((-1.0)*cj1*sj2*x9355))+(((-1.0)*r10*x9353*x9356))+((r12*x9359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9363=((1.0)*gconst2);
CheckValue<IkReal> x9364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9363)))),-1);
if(!x9364.valid){
continue;
}
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9363))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9364.value)))+(x9365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9366=IKsin(j4);
IkReal x9367=IKcos(j4);
IkReal x9368=(gconst1*sj3);
IkReal x9369=(cj1*cj2);
IkReal x9370=(cj3*gconst1);
IkReal x9371=(sj1*sj2);
IkReal x9372=(cj3*gconst2);
IkReal x9373=(gconst2*sj3);
IkReal x9374=((1.0)*sj0);
IkReal x9375=((1.0)*x9367);
IkReal x9376=((1.0)*x9366);
IkReal x9377=(gconst1*x9366);
IkReal x9378=(cj3*x9366);
IkReal x9379=((1.0)*cj2*sj1);
IkReal x9380=((1.0)*cj1*sj2);
IkReal x9381=(x9367*x9373);
evalcond[0]=(((r21*x9377))+(((-1.0)*r22*x9375))+(((-1.0)*gconst2*r20*x9376)));
evalcond[1]=((((-1.0)*gconst2*r10*x9376))+cj0+((r11*x9377))+(((-1.0)*r12*x9375)));
evalcond[2]=((((-1.0)*x9374))+(((-1.0)*r02*x9375))+(((-1.0)*gconst2*r00*x9376))+((r01*x9377)));
evalcond[3]=((((-1.0)*r20*x9372*x9375))+x9371+((r21*x9373))+((r22*x9378))+((r21*x9367*x9370))+(((-1.0)*x9369))+((r20*x9368)));
evalcond[4]=((((-1.0)*r21*x9368*x9375))+(((-1.0)*r22*sj3*x9376))+(((-1.0)*x9380))+((r21*x9372))+(((-1.0)*x9379))+((r20*x9381))+((r20*x9370)));
evalcond[5]=((((-1.0)*r01*x9368*x9375))+(((-1.0)*cj0*x9371))+((cj0*x9369))+((r00*x9370))+((r00*x9381))+(((-1.0)*r02*sj3*x9376))+((r01*x9372)));
evalcond[6]=((((-1.0)*r00*x9372*x9375))+((r01*x9367*x9370))+((r02*x9378))+(((-1.0)*cj0*x9380))+(((-1.0)*cj0*x9379))+((r00*x9368))+((r01*x9373)));
evalcond[7]=(((r10*x9381))+(((-1.0)*r11*x9368*x9375))+((r11*x9372))+((sj0*x9369))+(((-1.0)*x9371*x9374))+(((-1.0)*r12*sj3*x9376))+((r10*x9370)));
evalcond[8]=((((-1.0)*cj2*sj1*x9374))+((r11*x9367*x9370))+(((-1.0)*cj1*sj2*x9374))+((r11*x9373))+(((-1.0)*r10*x9372*x9375))+((r12*x9378))+((r10*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9382=((1.0)*gconst2);
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9382)))),-1);
if(!x9383.valid){
continue;
}
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9383.value)))+(x9384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9385=IKsin(j4);
IkReal x9386=IKcos(j4);
IkReal x9387=(gconst1*sj3);
IkReal x9388=(cj1*cj2);
IkReal x9389=(cj3*gconst1);
IkReal x9390=(sj1*sj2);
IkReal x9391=(cj3*gconst2);
IkReal x9392=(gconst2*sj3);
IkReal x9393=((1.0)*sj0);
IkReal x9394=((1.0)*x9386);
IkReal x9395=((1.0)*x9385);
IkReal x9396=(gconst1*x9385);
IkReal x9397=(cj3*x9385);
IkReal x9398=((1.0)*cj2*sj1);
IkReal x9399=((1.0)*cj1*sj2);
IkReal x9400=(x9386*x9392);
evalcond[0]=((((-1.0)*gconst2*r20*x9395))+(((-1.0)*r22*x9394))+((r21*x9396)));
evalcond[1]=((((-1.0)*r12*x9394))+((r11*x9396))+cj0+(((-1.0)*gconst2*r10*x9395)));
evalcond[2]=(((r01*x9396))+(((-1.0)*gconst2*r00*x9395))+(((-1.0)*x9393))+(((-1.0)*r02*x9394)));
evalcond[3]=(x9390+((r21*x9386*x9389))+(((-1.0)*x9388))+((r22*x9397))+(((-1.0)*r20*x9391*x9394))+((r20*x9387))+((r21*x9392)));
evalcond[4]=((((-1.0)*r22*sj3*x9395))+((r20*x9400))+(((-1.0)*x9398))+(((-1.0)*x9399))+((r20*x9389))+((r21*x9391))+(((-1.0)*r21*x9387*x9394)));
evalcond[5]=(((r01*x9391))+(((-1.0)*r02*sj3*x9395))+(((-1.0)*r01*x9387*x9394))+(((-1.0)*cj0*x9390))+((r00*x9389))+((r00*x9400))+((cj0*x9388)));
evalcond[6]=(((r01*x9392))+((r02*x9397))+(((-1.0)*r00*x9391*x9394))+((r01*x9386*x9389))+((r00*x9387))+(((-1.0)*cj0*x9398))+(((-1.0)*cj0*x9399)));
evalcond[7]=(((r10*x9389))+((r11*x9391))+(((-1.0)*r11*x9387*x9394))+(((-1.0)*x9390*x9393))+((sj0*x9388))+((r10*x9400))+(((-1.0)*r12*sj3*x9395)));
evalcond[8]=(((r12*x9397))+((r11*x9386*x9389))+((r10*x9387))+((r11*x9392))+(((-1.0)*r10*x9391*x9394))+(((-1.0)*cj2*sj1*x9393))+(((-1.0)*cj1*sj2*x9393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9401=((-1.0)*r21);
IkReal x9403 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9403)==0){
continue;
}
IkReal x9402=pow(x9403,-0.5);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(x9401),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9404.value))));
IkReal gconst4=(x9401*x9402);
IkReal gconst5=((1.0)*r20*x9402);
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9405.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9406=((-1.0)*r21);
CheckValue<IkReal> x9409 = IKatan2WithCheck(IkReal(x9406),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9409.valid){
continue;
}
IkReal x9407=((1.0)*(x9409.value));
IkReal x9408=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9407)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9407)));
IkReal gconst4=(x9406*x9408);
IkReal gconst5=((1.0)*r20*x9408);
IkReal x9410=r22*r22;
IkReal x9411=((1.0)*x9410);
CheckValue<IkReal> x9415=IKPowWithIntegerCheck(((-1.0)+x9410),-1);
if(!x9415.valid){
continue;
}
IkReal x9412=x9415.value;
if((((1.0)+(((-1.0)*x9411)))) < -0.00001)
continue;
IkReal x9413=IKsqrt(((1.0)+(((-1.0)*x9411))));
IkReal x9414=(cj0*x9412*x9413);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x9414+(((-1.0)*x9411*x9414))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9416=((-1.0)*r21);
CheckValue<IkReal> x9419 = IKatan2WithCheck(IkReal(x9416),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9419.valid){
continue;
}
IkReal x9417=((1.0)*(x9419.value));
IkReal x9418=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9417)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9417)));
IkReal gconst4=(x9416*x9418);
IkReal gconst5=((1.0)*r20*x9418);
IkReal x9420=r22*r22;
IkReal x9421=((1.0)*x9420);
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(((-1.0)+x9420),-1);
if(!x9425.valid){
continue;
}
IkReal x9422=x9425.value;
if((((1.0)+(((-1.0)*x9421)))) < -0.00001)
continue;
IkReal x9423=IKsqrt(((1.0)+(((-1.0)*x9421))));
IkReal x9424=(sj0*x9422*x9423);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9421*x9424))+x9424))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9426=((-1.0)*r21);
CheckValue<IkReal> x9429 = IKatan2WithCheck(IkReal(x9426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9429.valid){
continue;
}
IkReal x9427=((1.0)*(x9429.value));
IkReal x9428=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9427)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9427)));
IkReal gconst4=(x9426*x9428);
IkReal gconst5=((1.0)*r20*x9428);
IkReal x9430=r22*r22;
IkReal x9431=((1.0)*x9430);
CheckValue<IkReal> x9436=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9431))),-1);
if(!x9436.valid){
continue;
}
IkReal x9432=x9436.value;
IkReal x9433=(cj3*x9432);
IkReal x9434=((1.0)*x9433);
IkReal x9435=((((-1.0)*x9434*(r20*r20*r20*r20)))+(((-1.0)*cj3*x9431))+(((-2.0)*x9433*(r20*r20)*(r21*r21)))+(((-1.0)*x9434*(r21*r21*r21*r21))));
j4eval[0]=x9435;
j4eval[1]=IKsign(x9435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9437=((-1.0)*r21);
CheckValue<IkReal> x9440 = IKatan2WithCheck(IkReal(x9437),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9440.valid){
continue;
}
IkReal x9438=((1.0)*(x9440.value));
IkReal x9439=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9438)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9438)));
IkReal gconst4=(x9437*x9439);
IkReal gconst5=((1.0)*r20*x9439);
IkReal x9441=r22*r22;
IkReal x9442=((1.0)*x9441);
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(((-1.0)+x9441),-1);
if(!x9446.valid){
continue;
}
IkReal x9443=x9446.value;
if((((1.0)+(((-1.0)*x9442)))) < -0.00001)
continue;
IkReal x9444=IKsqrt(((1.0)+(((-1.0)*x9442))));
IkReal x9445=(cj0*x9443*x9444);
j4eval[0]=((IKabs(((((-1.0)*x9442*x9445))+x9445)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9447=((-1.0)*r21);
CheckValue<IkReal> x9450 = IKatan2WithCheck(IkReal(x9447),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9450.valid){
continue;
}
IkReal x9448=((1.0)*(x9450.value));
IkReal x9449=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9448)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9448)));
IkReal gconst4=(x9447*x9449);
IkReal gconst5=((1.0)*r20*x9449);
IkReal x9451=r22*r22;
IkReal x9452=((1.0)*x9451);
CheckValue<IkReal> x9456=IKPowWithIntegerCheck(((-1.0)+x9451),-1);
if(!x9456.valid){
continue;
}
IkReal x9453=x9456.value;
if((((1.0)+(((-1.0)*x9452)))) < -0.00001)
continue;
IkReal x9454=IKsqrt(((1.0)+(((-1.0)*x9452))));
IkReal x9455=(sj0*x9453*x9454);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9452*x9455))+x9455))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9457=((-1.0)*r21);
CheckValue<IkReal> x9460 = IKatan2WithCheck(IkReal(x9457),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9460.valid){
continue;
}
IkReal x9458=((1.0)*(x9460.value));
IkReal x9459=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9458)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9458)));
IkReal gconst4=(x9457*x9459);
IkReal gconst5=((1.0)*r20*x9459);
IkReal x9461=r22*r22;
CheckValue<IkReal> x9464=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9461))),-1);
if(!x9464.valid){
continue;
}
IkReal x9462=x9464.value;
IkReal x9463=((1.0)*x9462);
j4eval[0]=IKsign((((x9463*(r21*r21*r21*r21)))+((x9463*(r20*r20*r20*r20)))+x9461+(((2.0)*x9462*(r20*r20)*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9465=((-1.0)*r21);
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal(x9465),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
IkReal x9466=((1.0)*(x9468.value));
IkReal x9467=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9466)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9466)));
IkReal gconst4=(x9465*x9467);
IkReal gconst5=((1.0)*r20*x9467);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9469=((-1.0)*r21);
CheckValue<IkReal> x9472 = IKatan2WithCheck(IkReal(x9469),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9472.valid){
continue;
}
IkReal x9470=((1.0)*(x9472.value));
IkReal x9471=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9470)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9470)));
IkReal gconst4=(x9469*x9471);
IkReal gconst5=((1.0)*r20*x9471);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9473=((-1.0)*r21);
CheckValue<IkReal> x9476 = IKatan2WithCheck(IkReal(x9473),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9476.valid){
continue;
}
IkReal x9474=((1.0)*(x9476.value));
IkReal x9475=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9474)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9474)));
IkReal gconst4=(x9473*x9475);
IkReal gconst5=((1.0)*r20*x9475);
IkReal x9477=r22*r22;
IkReal x9478=(r02*sj1*sj2);
IkReal x9479=(cj1*cj2*r02);
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(((-1.0)+x9477),-1);
if(!x9483.valid){
continue;
}
IkReal x9480=x9483.value;
if((((1.0)+(((-1.0)*x9477)))) < -0.00001)
continue;
IkReal x9481=IKsqrt(((1.0)+(((-1.0)*x9477))));
IkReal x9482=(r22*x9480*x9481);
j4eval[0]=((IKabs((((x9478*x9482))+(((-1.0)*x9479*x9482)))))+(IKabs(((((-1.0)*x9478))+x9479))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9484=(gconst4*r01);
IkReal x9485=(gconst5*r00);
IkReal x9486=(cj1*cj2);
IkReal x9487=((1.0)*sj1*sj2);
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9487))+((r02*x9486)))),IkReal(((((-1.0)*x9484*x9487))+(((-1.0)*x9485*x9486))+((sj1*sj2*x9485))+((x9484*x9486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(IKsign(((x9484*x9484)+(x9485*x9485)+(r02*r02)+(((-2.0)*x9484*x9485)))),-1);
if(!x9489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9488.value)+(((1.5707963267949)*(x9489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9490=IKsin(j4);
IkReal x9491=IKcos(j4);
IkReal x9492=(gconst4*r11);
IkReal x9493=(gconst5*r10);
IkReal x9494=((1.0)*sj2);
IkReal x9495=(gconst5*r00);
IkReal x9496=(gconst5*r20);
IkReal x9497=((1.0)*x9491);
IkReal x9498=(gconst4*x9490);
IkReal x9499=((1.0)*x9490);
evalcond[0]=((((-1.0)*r22*x9497))+(((-1.0)*x9496*x9499))+((r21*x9498)));
evalcond[1]=((((-1.0)*r02*x9497))+(((-1.0)*x9495*x9499))+((r01*x9498)));
evalcond[2]=((((-1.0)*x9492*x9497))+((x9491*x9493))+(((-1.0)*r12*x9499)));
evalcond[3]=((1.0)+(((-1.0)*x9493*x9499))+((x9490*x9492))+(((-1.0)*r12*x9497)));
evalcond[4]=((((-1.0)*r02*x9499))+((x9491*x9495))+((cj1*cj2))+(((-1.0)*sj1*x9494))+(((-1.0)*gconst4*r01*x9497)));
evalcond[5]=((((-1.0)*cj1*x9494))+(((-1.0)*r22*x9499))+(((-1.0)*cj2*sj1))+((x9491*x9496))+(((-1.0)*gconst4*r21*x9497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9500=(gconst5*r10);
IkReal x9501=(gconst4*r11);
CheckValue<IkReal> x9502=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9501*x9501)+(((-2.0)*x9500*x9501))+(x9500*x9500))),-1);
if(!x9502.valid){
continue;
}
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((((-1.0)*x9501))+x9500)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9502.value)))+(x9503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9504=IKsin(j4);
IkReal x9505=IKcos(j4);
IkReal x9506=(gconst4*r11);
IkReal x9507=(gconst5*r10);
IkReal x9508=((1.0)*sj2);
IkReal x9509=(gconst5*r00);
IkReal x9510=(gconst5*r20);
IkReal x9511=((1.0)*x9505);
IkReal x9512=(gconst4*x9504);
IkReal x9513=((1.0)*x9504);
evalcond[0]=(((r21*x9512))+(((-1.0)*x9510*x9513))+(((-1.0)*r22*x9511)));
evalcond[1]=((((-1.0)*r02*x9511))+((r01*x9512))+(((-1.0)*x9509*x9513)));
evalcond[2]=(((x9505*x9507))+(((-1.0)*r12*x9513))+(((-1.0)*x9506*x9511)));
evalcond[3]=((1.0)+(((-1.0)*x9507*x9513))+((x9504*x9506))+(((-1.0)*r12*x9511)));
evalcond[4]=((((-1.0)*r02*x9513))+((x9505*x9509))+(((-1.0)*gconst4*r01*x9511))+(((-1.0)*sj1*x9508))+((cj1*cj2)));
evalcond[5]=(((x9505*x9510))+(((-1.0)*gconst4*r21*x9511))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9513))+(((-1.0)*cj1*x9508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9514=((1.0)*gconst5);
CheckValue<IkReal> x9515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9514)))),-1);
if(!x9515.valid){
continue;
}
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9514))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9515.value)))+(x9516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9517=IKsin(j4);
IkReal x9518=IKcos(j4);
IkReal x9519=(gconst4*r11);
IkReal x9520=(gconst5*r10);
IkReal x9521=((1.0)*sj2);
IkReal x9522=(gconst5*r00);
IkReal x9523=(gconst5*r20);
IkReal x9524=((1.0)*x9518);
IkReal x9525=(gconst4*x9517);
IkReal x9526=((1.0)*x9517);
evalcond[0]=((((-1.0)*r22*x9524))+((r21*x9525))+(((-1.0)*x9523*x9526)));
evalcond[1]=((((-1.0)*r02*x9524))+((r01*x9525))+(((-1.0)*x9522*x9526)));
evalcond[2]=((((-1.0)*r12*x9526))+((x9518*x9520))+(((-1.0)*x9519*x9524)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9524))+((x9517*x9519))+(((-1.0)*x9520*x9526)));
evalcond[4]=(((x9518*x9522))+(((-1.0)*r02*x9526))+(((-1.0)*gconst4*r01*x9524))+((cj1*cj2))+(((-1.0)*sj1*x9521)));
evalcond[5]=(((x9518*x9523))+(((-1.0)*r22*x9526))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r21*x9524))+(((-1.0)*cj1*x9521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9527=((-1.0)*r21);
CheckValue<IkReal> x9530 = IKatan2WithCheck(IkReal(x9527),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9530.valid){
continue;
}
IkReal x9528=((1.0)*(x9530.value));
IkReal x9529=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9528)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9528)));
IkReal gconst4=(x9527*x9529);
IkReal gconst5=((1.0)*r20*x9529);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9531=((-1.0)*r21);
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal(x9531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
IkReal x9532=((1.0)*(x9534.value));
IkReal x9533=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9532)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9532)));
IkReal gconst4=(x9531*x9533);
IkReal gconst5=((1.0)*r20*x9533);
IkReal x9535=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9539=IKPowWithIntegerCheck(x9535,-1);
if(!x9539.valid){
continue;
}
IkReal x9536=x9539.value;
IkReal x9537=((1.0)*x9536);
IkReal x9538=((((-1.0)*x9537*(r10*r10)*(r20*r20)))+(((-1.0)*x9537*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9536)));
j4eval[0]=x9538;
j4eval[1]=r12;
j4eval[2]=x9535;
j4eval[3]=IKsign(x9538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9540=((-1.0)*r21);
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal(x9540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
IkReal x9541=((1.0)*(x9543.value));
IkReal x9542=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9541)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9541)));
IkReal gconst4=(x9540*x9542);
IkReal gconst5=((1.0)*r20*x9542);
IkReal x9544=r22*r22;
IkReal x9545=(r02*sj1*sj2);
IkReal x9546=(cj1*cj2*r02);
CheckValue<IkReal> x9550=IKPowWithIntegerCheck(((-1.0)+x9544),-1);
if(!x9550.valid){
continue;
}
IkReal x9547=x9550.value;
if((((1.0)+(((-1.0)*x9544)))) < -0.00001)
continue;
IkReal x9548=IKsqrt(((1.0)+(((-1.0)*x9544))));
IkReal x9549=(r22*x9547*x9548);
j4eval[0]=((IKabs((((x9546*x9549))+(((-1.0)*x9545*x9549)))))+(IKabs((x9545+(((-1.0)*x9546))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9551=(gconst5*r00);
IkReal x9552=(sj1*sj2);
IkReal x9553=(gconst4*r01);
IkReal x9554=(cj1*cj2);
CheckValue<IkReal> x9555 = IKatan2WithCheck(IkReal((((r02*x9552))+(((-1.0)*r02*x9554)))),IkReal(((((-1.0)*x9551*x9552))+((x9552*x9553))+((x9551*x9554))+(((-1.0)*x9553*x9554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9555.valid){
continue;
}
CheckValue<IkReal> x9556=IKPowWithIntegerCheck(IKsign(((x9551*x9551)+(x9553*x9553)+(r02*r02)+(((-2.0)*x9551*x9553)))),-1);
if(!x9556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9555.value)+(((1.5707963267949)*(x9556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9557=IKsin(j4);
IkReal x9558=IKcos(j4);
IkReal x9559=(gconst4*r11);
IkReal x9560=((1.0)*cj1);
IkReal x9561=(gconst5*r10);
IkReal x9562=(gconst4*r01);
IkReal x9563=(gconst5*r00);
IkReal x9564=(gconst4*r21);
IkReal x9565=(gconst5*r20);
IkReal x9566=((1.0)*x9558);
IkReal x9567=((1.0)*x9557);
evalcond[0]=((((-1.0)*r22*x9566))+((x9557*x9564))+(((-1.0)*x9565*x9567)));
evalcond[1]=((((-1.0)*x9563*x9567))+((x9557*x9562))+(((-1.0)*r02*x9566)));
evalcond[2]=(((x9558*x9561))+(((-1.0)*r12*x9567))+(((-1.0)*x9559*x9566)));
evalcond[3]=((-1.0)+((x9557*x9559))+(((-1.0)*r12*x9566))+(((-1.0)*x9561*x9567)));
evalcond[4]=(((x9558*x9563))+(((-1.0)*cj2*x9560))+((sj1*sj2))+(((-1.0)*x9562*x9566))+(((-1.0)*r02*x9567)));
evalcond[5]=(((x9558*x9565))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9567))+(((-1.0)*x9564*x9566))+(((-1.0)*sj2*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9568=(gconst5*r10);
IkReal x9569=(gconst4*r11);
CheckValue<IkReal> x9570=IKPowWithIntegerCheck(IKsign(((((2.0)*x9568*x9569))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9569*x9569)))+(((-1.0)*(x9568*x9568))))),-1);
if(!x9570.valid){
continue;
}
CheckValue<IkReal> x9571 = IKatan2WithCheck(IkReal(((((-1.0)*x9569))+x9568)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9570.value)))+(x9571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9572=IKsin(j4);
IkReal x9573=IKcos(j4);
IkReal x9574=(gconst4*r11);
IkReal x9575=((1.0)*cj1);
IkReal x9576=(gconst5*r10);
IkReal x9577=(gconst4*r01);
IkReal x9578=(gconst5*r00);
IkReal x9579=(gconst4*r21);
IkReal x9580=(gconst5*r20);
IkReal x9581=((1.0)*x9573);
IkReal x9582=((1.0)*x9572);
evalcond[0]=(((x9572*x9579))+(((-1.0)*r22*x9581))+(((-1.0)*x9580*x9582)));
evalcond[1]=(((x9572*x9577))+(((-1.0)*x9578*x9582))+(((-1.0)*r02*x9581)));
evalcond[2]=((((-1.0)*x9574*x9581))+((x9573*x9576))+(((-1.0)*r12*x9582)));
evalcond[3]=((-1.0)+((x9572*x9574))+(((-1.0)*x9576*x9582))+(((-1.0)*r12*x9581)));
evalcond[4]=((((-1.0)*cj2*x9575))+((x9573*x9578))+((sj1*sj2))+(((-1.0)*x9577*x9581))+(((-1.0)*r02*x9582)));
evalcond[5]=((((-1.0)*r22*x9582))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9575))+(((-1.0)*x9579*x9581))+((x9573*x9580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9583=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9583.valid){
continue;
}
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9583.value)))+(x9584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9585=IKsin(j4);
IkReal x9586=IKcos(j4);
IkReal x9587=(gconst4*r11);
IkReal x9588=((1.0)*cj1);
IkReal x9589=(gconst5*r10);
IkReal x9590=(gconst4*r01);
IkReal x9591=(gconst5*r00);
IkReal x9592=(gconst4*r21);
IkReal x9593=(gconst5*r20);
IkReal x9594=((1.0)*x9586);
IkReal x9595=((1.0)*x9585);
evalcond[0]=((((-1.0)*x9593*x9595))+(((-1.0)*r22*x9594))+((x9585*x9592)));
evalcond[1]=(((x9585*x9590))+(((-1.0)*x9591*x9595))+(((-1.0)*r02*x9594)));
evalcond[2]=((((-1.0)*x9587*x9594))+((x9586*x9589))+(((-1.0)*r12*x9595)));
evalcond[3]=((-1.0)+((x9585*x9587))+(((-1.0)*x9589*x9595))+(((-1.0)*r12*x9594)));
evalcond[4]=((((-1.0)*x9590*x9594))+((x9586*x9591))+(((-1.0)*cj2*x9588))+((sj1*sj2))+(((-1.0)*r02*x9595)));
evalcond[5]=((((-1.0)*sj2*x9588))+(((-1.0)*r22*x9595))+(((-1.0)*x9592*x9594))+((x9586*x9593))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9596=((-1.0)*r21);
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(x9596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
IkReal x9597=((1.0)*(x9599.value));
IkReal x9598=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9597)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9597)));
IkReal gconst4=(x9596*x9598);
IkReal gconst5=((1.0)*r20*x9598);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9600=((-1.0)*r21);
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal(x9600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
IkReal x9601=((1.0)*(x9603.value));
IkReal x9602=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9601)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9601)));
IkReal gconst4=(x9600*x9602);
IkReal gconst5=((1.0)*r20*x9602);
IkReal x9604=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9608=IKPowWithIntegerCheck(x9604,-1);
if(!x9608.valid){
continue;
}
IkReal x9605=x9608.value;
IkReal x9606=((1.0)*x9605);
IkReal x9607=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9605))+(((-1.0)*x9606*(r00*r00)*(r20*r20)))+(((-1.0)*x9606*(r01*r01)*(r21*r21))));
j4eval[0]=x9607;
j4eval[1]=r02;
j4eval[2]=x9604;
j4eval[3]=IKsign(x9607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9609=((-1.0)*r21);
CheckValue<IkReal> x9612 = IKatan2WithCheck(IkReal(x9609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9612.valid){
continue;
}
IkReal x9610=((1.0)*(x9612.value));
IkReal x9611=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9610)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9610)));
IkReal gconst4=(x9609*x9611);
IkReal gconst5=((1.0)*r20*x9611);
IkReal x9613=r22*r22;
IkReal x9614=(cj1*cj2*r12);
IkReal x9615=(r12*sj1*sj2);
CheckValue<IkReal> x9619=IKPowWithIntegerCheck(((-1.0)+x9613),-1);
if(!x9619.valid){
continue;
}
IkReal x9616=x9619.value;
if((((1.0)+(((-1.0)*x9613)))) < -0.00001)
continue;
IkReal x9617=IKsqrt(((1.0)+(((-1.0)*x9613))));
IkReal x9618=(r22*x9616*x9617);
j4eval[0]=((IKabs(((((-1.0)*x9615))+x9614)))+(IKabs(((((-1.0)*x9614*x9618))+((x9615*x9618))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9620=(sj1*sj2);
IkReal x9621=(gconst5*r10);
IkReal x9622=(cj1*cj2);
IkReal x9623=(gconst4*r11);
CheckValue<IkReal> x9624 = IKatan2WithCheck(IkReal((((r12*x9622))+(((-1.0)*r12*x9620)))),IkReal(((((-1.0)*x9621*x9622))+((x9622*x9623))+((x9620*x9621))+(((-1.0)*x9620*x9623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9624.valid){
continue;
}
CheckValue<IkReal> x9625=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9621*x9621)+(x9623*x9623)+(((-2.0)*x9621*x9623)))),-1);
if(!x9625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9624.value)+(((1.5707963267949)*(x9625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9626=IKsin(j4);
IkReal x9627=IKcos(j4);
IkReal x9628=(gconst4*r11);
IkReal x9629=(gconst5*r10);
IkReal x9630=((1.0)*sj2);
IkReal x9631=(gconst5*r00);
IkReal x9632=(gconst5*r20);
IkReal x9633=((1.0)*x9627);
IkReal x9634=(gconst4*x9626);
IkReal x9635=((1.0)*x9626);
evalcond[0]=((((-1.0)*r22*x9633))+((r21*x9634))+(((-1.0)*x9632*x9635)));
evalcond[1]=((((-1.0)*x9629*x9635))+(((-1.0)*r12*x9633))+((x9626*x9628)));
evalcond[2]=((((-1.0)*r02*x9635))+((x9627*x9631))+(((-1.0)*gconst4*r01*x9633)));
evalcond[3]=((-1.0)+((r01*x9634))+(((-1.0)*r02*x9633))+(((-1.0)*x9631*x9635)));
evalcond[4]=((((-1.0)*x9628*x9633))+(((-1.0)*r12*x9635))+((x9627*x9629))+((cj1*cj2))+(((-1.0)*sj1*x9630)));
evalcond[5]=((((-1.0)*r22*x9635))+(((-1.0)*cj2*sj1))+((x9627*x9632))+(((-1.0)*cj1*x9630))+(((-1.0)*gconst4*r21*x9633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9636=(gconst5*r00);
IkReal x9637=(gconst4*r01);
CheckValue<IkReal> x9638=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9636*x9637))+(((-1.0)*(x9636*x9636)))+(((-1.0)*(x9637*x9637))))),-1);
if(!x9638.valid){
continue;
}
CheckValue<IkReal> x9639 = IKatan2WithCheck(IkReal(((((-1.0)*x9637))+x9636)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9638.value)))+(x9639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9640=IKsin(j4);
IkReal x9641=IKcos(j4);
IkReal x9642=(gconst4*r11);
IkReal x9643=(gconst5*r10);
IkReal x9644=((1.0)*sj2);
IkReal x9645=(gconst5*r00);
IkReal x9646=(gconst5*r20);
IkReal x9647=((1.0)*x9641);
IkReal x9648=(gconst4*x9640);
IkReal x9649=((1.0)*x9640);
evalcond[0]=((((-1.0)*x9646*x9649))+((r21*x9648))+(((-1.0)*r22*x9647)));
evalcond[1]=((((-1.0)*r12*x9647))+((x9640*x9642))+(((-1.0)*x9643*x9649)));
evalcond[2]=(((x9641*x9645))+(((-1.0)*gconst4*r01*x9647))+(((-1.0)*r02*x9649)));
evalcond[3]=((-1.0)+((r01*x9648))+(((-1.0)*x9645*x9649))+(((-1.0)*r02*x9647)));
evalcond[4]=((((-1.0)*r12*x9649))+((x9641*x9643))+(((-1.0)*sj1*x9644))+(((-1.0)*x9642*x9647))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9644))+((x9641*x9646))+(((-1.0)*gconst4*r21*x9647))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9650=((1.0)*gconst5);
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9650))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9650))+(((-1.0)*gconst4*r10)))),-1);
if(!x9652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9651.value)+(((1.5707963267949)*(x9652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9653=IKsin(j4);
IkReal x9654=IKcos(j4);
IkReal x9655=(gconst4*r11);
IkReal x9656=(gconst5*r10);
IkReal x9657=((1.0)*sj2);
IkReal x9658=(gconst5*r00);
IkReal x9659=(gconst5*r20);
IkReal x9660=((1.0)*x9654);
IkReal x9661=(gconst4*x9653);
IkReal x9662=((1.0)*x9653);
evalcond[0]=(((r21*x9661))+(((-1.0)*r22*x9660))+(((-1.0)*x9659*x9662)));
evalcond[1]=((((-1.0)*r12*x9660))+(((-1.0)*x9656*x9662))+((x9653*x9655)));
evalcond[2]=(((x9654*x9658))+(((-1.0)*gconst4*r01*x9660))+(((-1.0)*r02*x9662)));
evalcond[3]=((-1.0)+(((-1.0)*x9658*x9662))+((r01*x9661))+(((-1.0)*r02*x9660)));
evalcond[4]=((((-1.0)*x9655*x9660))+((x9654*x9656))+(((-1.0)*r12*x9662))+((cj1*cj2))+(((-1.0)*sj1*x9657)));
evalcond[5]=((((-1.0)*cj1*x9657))+(((-1.0)*gconst4*r21*x9660))+((x9654*x9659))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9663=((-1.0)*r21);
CheckValue<IkReal> x9666 = IKatan2WithCheck(IkReal(x9663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9666.valid){
continue;
}
IkReal x9664=((1.0)*(x9666.value));
IkReal x9665=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9664)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9664)));
IkReal gconst4=(x9663*x9665);
IkReal gconst5=((1.0)*r20*x9665);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9667=((-1.0)*r21);
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal(x9667),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
IkReal x9668=((1.0)*(x9670.value));
IkReal x9669=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9668)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9668)));
IkReal gconst4=(x9667*x9669);
IkReal gconst5=((1.0)*r20*x9669);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9671=((-1.0)*r21);
CheckValue<IkReal> x9674 = IKatan2WithCheck(IkReal(x9671),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9674.valid){
continue;
}
IkReal x9672=((1.0)*(x9674.value));
IkReal x9673=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9672)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9672)));
IkReal gconst4=(x9671*x9673);
IkReal gconst5=((1.0)*r20*x9673);
IkReal x9675=r22*r22;
IkReal x9676=(r12*sj1*sj2);
IkReal x9677=(cj1*cj2*r12);
CheckValue<IkReal> x9681=IKPowWithIntegerCheck(((-1.0)+x9675),-1);
if(!x9681.valid){
continue;
}
IkReal x9678=x9681.value;
if((((1.0)+(((-1.0)*x9675)))) < -0.00001)
continue;
IkReal x9679=IKsqrt(((1.0)+(((-1.0)*x9675))));
IkReal x9680=(r22*x9678*x9679);
j4eval[0]=((IKabs((x9676+(((-1.0)*x9677)))))+(IKabs((((x9677*x9680))+(((-1.0)*x9676*x9680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9682=(gconst5*r10);
IkReal x9683=(gconst4*r11);
IkReal x9684=(sj1*sj2);
IkReal x9685=(cj1*cj2);
CheckValue<IkReal> x9686 = IKatan2WithCheck(IkReal((((r12*x9684))+(((-1.0)*r12*x9685)))),IkReal((((x9682*x9685))+(((-1.0)*x9682*x9684))+(((-1.0)*x9683*x9685))+((x9683*x9684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9686.valid){
continue;
}
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9682*x9683))+(x9683*x9683)+(x9682*x9682))),-1);
if(!x9687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9686.value)+(((1.5707963267949)*(x9687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9688=IKsin(j4);
IkReal x9689=IKcos(j4);
IkReal x9690=(gconst4*r11);
IkReal x9691=((1.0)*cj1);
IkReal x9692=(gconst5*r10);
IkReal x9693=(gconst4*r01);
IkReal x9694=(gconst5*r00);
IkReal x9695=(gconst4*r21);
IkReal x9696=(gconst5*r20);
IkReal x9697=((1.0)*x9689);
IkReal x9698=((1.0)*x9688);
evalcond[0]=((((-1.0)*r22*x9697))+((x9688*x9695))+(((-1.0)*x9696*x9698)));
evalcond[1]=((((-1.0)*x9692*x9698))+(((-1.0)*r12*x9697))+((x9688*x9690)));
evalcond[2]=(((x9689*x9694))+(((-1.0)*r02*x9698))+(((-1.0)*x9693*x9697)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9697))+((x9688*x9693))+(((-1.0)*x9694*x9698)));
evalcond[4]=(((x9689*x9692))+(((-1.0)*x9690*x9697))+(((-1.0)*r12*x9698))+((sj1*sj2))+(((-1.0)*cj2*x9691)));
evalcond[5]=(((x9689*x9696))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9691))+(((-1.0)*r22*x9698))+(((-1.0)*x9695*x9697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9699=(gconst5*r00);
IkReal x9700=(gconst4*r01);
CheckValue<IkReal> x9701 = IKatan2WithCheck(IkReal(((((-1.0)*x9700))+x9699)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9701.valid){
continue;
}
CheckValue<IkReal> x9702=IKPowWithIntegerCheck(IKsign(((x9699*x9699)+(x9700*x9700)+(r02*r02)+(((-2.0)*x9699*x9700)))),-1);
if(!x9702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9701.value)+(((1.5707963267949)*(x9702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9703=IKsin(j4);
IkReal x9704=IKcos(j4);
IkReal x9705=(gconst4*r11);
IkReal x9706=((1.0)*cj1);
IkReal x9707=(gconst5*r10);
IkReal x9708=(gconst4*r01);
IkReal x9709=(gconst5*r00);
IkReal x9710=(gconst4*r21);
IkReal x9711=(gconst5*r20);
IkReal x9712=((1.0)*x9704);
IkReal x9713=((1.0)*x9703);
evalcond[0]=((((-1.0)*r22*x9712))+(((-1.0)*x9711*x9713))+((x9703*x9710)));
evalcond[1]=(((x9703*x9705))+(((-1.0)*x9707*x9713))+(((-1.0)*r12*x9712)));
evalcond[2]=(((x9704*x9709))+(((-1.0)*r02*x9713))+(((-1.0)*x9708*x9712)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9712))+(((-1.0)*x9709*x9713))+((x9703*x9708)));
evalcond[4]=((((-1.0)*cj2*x9706))+((x9704*x9707))+((sj1*sj2))+(((-1.0)*r12*x9713))+(((-1.0)*x9705*x9712)));
evalcond[5]=((((-1.0)*sj2*x9706))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9713))+(((-1.0)*x9710*x9712))+((x9704*x9711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9714=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9714.valid){
continue;
}
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9714.value)))+(x9715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9716=IKsin(j4);
IkReal x9717=IKcos(j4);
IkReal x9718=(gconst4*r11);
IkReal x9719=((1.0)*cj1);
IkReal x9720=(gconst5*r10);
IkReal x9721=(gconst4*r01);
IkReal x9722=(gconst5*r00);
IkReal x9723=(gconst4*r21);
IkReal x9724=(gconst5*r20);
IkReal x9725=((1.0)*x9717);
IkReal x9726=((1.0)*x9716);
evalcond[0]=((((-1.0)*x9724*x9726))+((x9716*x9723))+(((-1.0)*r22*x9725)));
evalcond[1]=((((-1.0)*r12*x9725))+((x9716*x9718))+(((-1.0)*x9720*x9726)));
evalcond[2]=(((x9717*x9722))+(((-1.0)*r02*x9726))+(((-1.0)*x9721*x9725)));
evalcond[3]=((1.0)+(((-1.0)*x9722*x9726))+(((-1.0)*r02*x9725))+((x9716*x9721)));
evalcond[4]=((((-1.0)*cj2*x9719))+((x9717*x9720))+(((-1.0)*r12*x9726))+((sj1*sj2))+(((-1.0)*x9718*x9725)));
evalcond[5]=(((x9717*x9724))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9719))+(((-1.0)*r22*x9726))+(((-1.0)*x9723*x9725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9727=((-1.0)*r21);
IkReal x9728=((-1.0)*px);
CheckValue<IkReal> x9730 = IKatan2WithCheck(IkReal(x9727),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9730.valid){
continue;
}
IkReal x9729=((1.0)*(x9730.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9729)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9728);
rxp1_1=(px*r21);
rxp1_2=(r11*x9728);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9729)));
IkReal gconst4=x9727;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9731=((-1.0)*r21);
IkReal x9732=((-1.0)*px);
CheckValue<IkReal> x9734 = IKatan2WithCheck(IkReal(x9731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9734.valid){
continue;
}
IkReal x9733=((1.0)*(x9734.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9733)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9732);
rxp1_1=(px*r21);
rxp1_2=(r11*x9732);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9733)));
IkReal gconst4=x9731;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9735=((-1.0)*r21);
IkReal x9736=((-1.0)*px);
CheckValue<IkReal> x9738 = IKatan2WithCheck(IkReal(x9735),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9738.valid){
continue;
}
IkReal x9737=((1.0)*(x9738.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9737)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9736);
rxp1_1=(px*r21);
rxp1_2=(r11*x9736);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9737)));
IkReal gconst4=x9735;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9741=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x9741.valid){
continue;
}
IkReal x9739=x9741.value;
IkReal x9740=(sj0*x9739);
cj4array[0]=(((sj1*sj2*x9740))+(((-1.0)*cj1*cj2*x9740)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9742=IKsin(j4);
IkReal x9743=IKcos(j4);
IkReal x9744=(gconst5*r20);
IkReal x9745=(gconst4*x9742);
IkReal x9746=((1.0)*x9743);
IkReal x9747=((1.0)*x9742);
evalcond[0]=((-1.0)*r02*x9742);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9746)));
evalcond[2]=((((-1.0)*x9744*x9747))+((r21*x9745)));
evalcond[3]=(((r11*x9745))+(((-1.0)*gconst5*r10*x9747)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x9746))+((x9743*x9744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9749=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x9749.valid){
continue;
}
IkReal x9748=x9749.value;
cj4array[0]=(((cj1*sj2*x9748))+((cj2*sj1*x9748)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9750=IKsin(j4);
IkReal x9751=IKcos(j4);
IkReal x9752=(gconst5*r10);
IkReal x9753=((1.0)*sj0);
IkReal x9754=(gconst4*x9750);
IkReal x9755=((1.0)*x9751);
IkReal x9756=((1.0)*x9750);
evalcond[0]=((-1.0)*r02*x9750);
evalcond[1]=((((-1.0)*r02*x9755))+(((-1.0)*x9753)));
evalcond[2]=((((-1.0)*gconst5*r20*x9756))+((r21*x9754)));
evalcond[3]=(((r11*x9754))+(((-1.0)*x9752*x9756)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst4*r11*x9755))+((x9751*x9752))+(((-1.0)*sj1*sj2*x9753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(r02,-1);
if(!x9757.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9757.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9758=IKsin(j4);
IkReal x9759=IKcos(j4);
IkReal x9760=((1.0)*sj1);
IkReal x9761=(gconst5*x9759);
IkReal x9762=(gconst4*x9758);
IkReal x9763=((1.0)*gconst4*x9759);
IkReal x9764=((1.0)*gconst5*x9758);
evalcond[0]=((-1.0)*r02*x9758);
evalcond[1]=(((r21*x9762))+(((-1.0)*r20*x9764)));
evalcond[2]=((((-1.0)*r10*x9764))+((r11*x9762)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x9763))+(((-1.0)*cj2*x9760))+((r20*x9761)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x9761))+(((-1.0)*r11*x9763))+(((-1.0)*sj0*sj2*x9760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9765=(cj1*sj2);
IkReal x9766=((1.0)*r22);
IkReal x9767=(gconst4*r21);
IkReal x9768=(gconst5*r20);
IkReal x9769=(cj2*sj1);
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal(((((-1.0)*x9765*x9766))+(((-1.0)*x9766*x9769)))),IkReal((((x9765*x9768))+((x9768*x9769))+(((-1.0)*x9767*x9769))+(((-1.0)*x9765*x9767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x9767*x9768))+(x9768*x9768)+(x9767*x9767))),-1);
if(!x9771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9770.value)+(((1.5707963267949)*(x9771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9772=IKsin(j4);
IkReal x9773=IKcos(j4);
IkReal x9774=(gconst4*r11);
IkReal x9775=(cj1*cj2);
IkReal x9776=(gconst5*r10);
IkReal x9777=(gconst4*r01);
IkReal x9778=((1.0)*sj2);
IkReal x9779=(gconst5*r00);
IkReal x9780=(gconst4*r21);
IkReal x9781=(gconst5*r20);
IkReal x9782=((1.0)*x9773);
IkReal x9783=((1.0)*x9772);
evalcond[0]=((((-1.0)*x9781*x9783))+((x9772*x9780))+(((-1.0)*r22*x9782)));
evalcond[1]=(((x9772*x9774))+(((-1.0)*r12*x9782))+cj0+(((-1.0)*x9776*x9783)));
evalcond[2]=(((x9772*x9777))+(((-1.0)*sj0))+(((-1.0)*r02*x9782))+(((-1.0)*x9779*x9783)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x9783))+(((-1.0)*cj1*x9778))+(((-1.0)*x9780*x9782))+((x9773*x9781)));
evalcond[4]=(((x9773*x9779))+(((-1.0)*x9777*x9782))+(((-1.0)*cj0*sj1*x9778))+((cj0*x9775))+(((-1.0)*r02*x9783)));
evalcond[5]=((((-1.0)*r12*x9783))+((x9773*x9776))+((sj0*x9775))+(((-1.0)*x9774*x9782))+(((-1.0)*sj0*sj1*x9778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9784=((1.0)*gconst5);
CheckValue<IkReal> x9785 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9784))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9785.valid){
continue;
}
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9784))+(((-1.0)*gconst4*r10)))),-1);
if(!x9786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9785.value)+(((1.5707963267949)*(x9786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9787=IKsin(j4);
IkReal x9788=IKcos(j4);
IkReal x9789=(gconst4*r11);
IkReal x9790=(cj1*cj2);
IkReal x9791=(gconst5*r10);
IkReal x9792=(gconst4*r01);
IkReal x9793=((1.0)*sj2);
IkReal x9794=(gconst5*r00);
IkReal x9795=(gconst4*r21);
IkReal x9796=(gconst5*r20);
IkReal x9797=((1.0)*x9788);
IkReal x9798=((1.0)*x9787);
evalcond[0]=(((x9787*x9795))+(((-1.0)*x9796*x9798))+(((-1.0)*r22*x9797)));
evalcond[1]=(cj0+(((-1.0)*x9791*x9798))+(((-1.0)*r12*x9797))+((x9787*x9789)));
evalcond[2]=((((-1.0)*sj0))+((x9787*x9792))+(((-1.0)*r02*x9797))+(((-1.0)*x9794*x9798)));
evalcond[3]=(((x9788*x9796))+(((-1.0)*cj1*x9793))+(((-1.0)*cj2*sj1))+(((-1.0)*x9795*x9797))+(((-1.0)*r22*x9798)));
evalcond[4]=(((x9788*x9794))+(((-1.0)*x9792*x9797))+(((-1.0)*r02*x9798))+((cj0*x9790))+(((-1.0)*cj0*sj1*x9793)));
evalcond[5]=(((x9788*x9791))+(((-1.0)*x9789*x9797))+(((-1.0)*r12*x9798))+((sj0*x9790))+(((-1.0)*sj0*sj1*x9793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9799=((1.0)*gconst5);
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9799))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
CheckValue<IkReal> x9801=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9799)))),-1);
if(!x9801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9800.value)+(((1.5707963267949)*(x9801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9802=IKsin(j4);
IkReal x9803=IKcos(j4);
IkReal x9804=(gconst4*r11);
IkReal x9805=(cj1*cj2);
IkReal x9806=(gconst5*r10);
IkReal x9807=(gconst4*r01);
IkReal x9808=((1.0)*sj2);
IkReal x9809=(gconst5*r00);
IkReal x9810=(gconst4*r21);
IkReal x9811=(gconst5*r20);
IkReal x9812=((1.0)*x9803);
IkReal x9813=((1.0)*x9802);
evalcond[0]=((((-1.0)*r22*x9812))+(((-1.0)*x9811*x9813))+((x9802*x9810)));
evalcond[1]=(cj0+(((-1.0)*x9806*x9813))+((x9802*x9804))+(((-1.0)*r12*x9812)));
evalcond[2]=((((-1.0)*x9809*x9813))+(((-1.0)*sj0))+(((-1.0)*r02*x9812))+((x9802*x9807)));
evalcond[3]=((((-1.0)*cj1*x9808))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9813))+((x9803*x9811))+(((-1.0)*x9810*x9812)));
evalcond[4]=((((-1.0)*r02*x9813))+(((-1.0)*cj0*sj1*x9808))+((x9803*x9809))+(((-1.0)*x9807*x9812))+((cj0*x9805)));
evalcond[5]=(((sj0*x9805))+((x9803*x9806))+(((-1.0)*sj0*sj1*x9808))+(((-1.0)*x9804*x9812))+(((-1.0)*r12*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9814=((-1.0)*r21);
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal(x9814),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
IkReal x9815=((1.0)*(x9817.value));
IkReal x9816=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9815)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9815)));
IkReal gconst4=(x9814*x9816);
IkReal gconst5=((1.0)*r20*x9816);
IkReal x9818=r22*r22;
IkReal x9819=((1.0)*x9818);
CheckValue<IkReal> x9823=IKPowWithIntegerCheck(((-1.0)+x9818),-1);
if(!x9823.valid){
continue;
}
IkReal x9820=x9823.value;
if((((1.0)+(((-1.0)*x9819)))) < -0.00001)
continue;
IkReal x9821=IKsqrt(((1.0)+(((-1.0)*x9819))));
IkReal x9822=(cj0*x9820*x9821);
j4eval[0]=((IKabs(((((-1.0)*x9819*x9822))+x9822)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9824=((-1.0)*r21);
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(x9824),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
IkReal x9825=((1.0)*(x9827.value));
IkReal x9826=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9825)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9825)));
IkReal gconst4=(x9824*x9826);
IkReal gconst5=((1.0)*r20*x9826);
IkReal x9828=r22*r22;
IkReal x9829=((1.0)*x9828);
CheckValue<IkReal> x9833=IKPowWithIntegerCheck(((-1.0)+x9828),-1);
if(!x9833.valid){
continue;
}
IkReal x9830=x9833.value;
if((((1.0)+(((-1.0)*x9829)))) < -0.00001)
continue;
IkReal x9831=IKsqrt(((1.0)+(((-1.0)*x9829))));
IkReal x9832=(sj0*x9830*x9831);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x9829*x9832))+x9832))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9834=((-1.0)*r21);
CheckValue<IkReal> x9837 = IKatan2WithCheck(IkReal(x9834),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9837.valid){
continue;
}
IkReal x9835=((1.0)*(x9837.value));
IkReal x9836=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9835)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9835)));
IkReal gconst4=(x9834*x9836);
IkReal gconst5=((1.0)*r20*x9836);
IkReal x9838=((1.0)*(r22*r22));
CheckValue<IkReal> x9842=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9838))),-1);
if(!x9842.valid){
continue;
}
IkReal x9839=x9842.value;
IkReal x9840=((1.0)*x9839);
IkReal x9841=((((-1.0)*x9838))+(((-2.0)*x9839*(r20*r20)*(r21*r21)))+(((-1.0)*x9840*(r20*r20*r20*r20)))+(((-1.0)*x9840*(r21*r21*r21*r21))));
j4eval[0]=x9841;
j4eval[1]=IKsign(x9841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9843=((-1.0)*r21);
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal(x9843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
IkReal x9844=((1.0)*(x9846.value));
IkReal x9845=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9844)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9844)));
IkReal gconst4=(x9843*x9845);
IkReal gconst5=((1.0)*r20*x9845);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9847=((-1.0)*r21);
CheckValue<IkReal> x9850 = IKatan2WithCheck(IkReal(x9847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9850.valid){
continue;
}
IkReal x9848=((1.0)*(x9850.value));
IkReal x9849=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9848)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9848)));
IkReal gconst4=(x9847*x9849);
IkReal gconst5=((1.0)*r20*x9849);
IkReal x9851=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9855=IKPowWithIntegerCheck(x9851,-1);
if(!x9855.valid){
continue;
}
IkReal x9852=x9855.value;
IkReal x9853=((1.0)*x9852);
IkReal x9854=((((-1.0)*x9853*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9852))+(((-1.0)*x9853*(r11*r11)*(r21*r21))));
j4eval[0]=x9854;
j4eval[1]=r12;
j4eval[2]=x9851;
j4eval[3]=IKsign(x9854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9856=((-1.0)*r21);
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(x9856),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
IkReal x9857=((1.0)*(x9859.value));
IkReal x9858=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9857)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9857)));
IkReal gconst4=(x9856*x9858);
IkReal gconst5=((1.0)*r20*x9858);
IkReal x9860=r22*r22;
IkReal x9861=(cj1*r12*sj2);
IkReal x9862=(cj2*r12*sj1);
CheckValue<IkReal> x9866=IKPowWithIntegerCheck(((-1.0)+x9860),-1);
if(!x9866.valid){
continue;
}
IkReal x9863=x9866.value;
if((((1.0)+(((-1.0)*x9860)))) < -0.00001)
continue;
IkReal x9864=IKsqrt(((1.0)+(((-1.0)*x9860))));
IkReal x9865=(r22*x9863*x9864);
j4eval[0]=((IKabs((((x9861*x9865))+((x9862*x9865)))))+(IKabs((x9861+x9862))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9867=((1.0)*gconst4);
IkReal x9868=(cj1*sj2);
IkReal x9869=(cj2*sj1);
IkReal x9870=(gconst5*r10);
CheckValue<IkReal> x9871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9867))+(((-1.0)*gconst5*r01)))),-1);
if(!x9871.valid){
continue;
}
CheckValue<IkReal> x9872 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9867*x9868))+(((-1.0)*r11*x9867*x9869))+((x9869*x9870))+((x9868*x9870)))),IkReal((((r12*x9869))+((r12*x9868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9871.value)))+(x9872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9873=IKcos(j4);
IkReal x9874=IKsin(j4);
IkReal x9875=(gconst5*r10);
IkReal x9876=((1.0)*sj2);
IkReal x9877=(gconst5*r00);
IkReal x9878=(gconst5*r20);
IkReal x9879=((1.0)*x9873);
IkReal x9880=(gconst4*x9874);
IkReal x9881=(gconst4*x9873);
IkReal x9882=((1.0)*x9874);
evalcond[0]=(((r12*x9874))+((r11*x9881))+(((-1.0)*x9875*x9879)));
evalcond[1]=(((r21*x9880))+(((-1.0)*x9878*x9882))+(((-1.0)*r22*x9879)));
evalcond[2]=(((r01*x9880))+(((-1.0)*r02*x9879))+(((-1.0)*x9877*x9882)));
evalcond[3]=((1.0)+((r11*x9880))+(((-1.0)*x9875*x9882))+(((-1.0)*r12*x9879)));
evalcond[4]=((((-1.0)*x9877*x9879))+((r02*x9874))+(((-1.0)*sj1*x9876))+((r01*x9881))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9878*x9879))+((r21*x9881))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9876))+((r22*x9874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9883=(gconst5*r10);
IkReal x9884=(gconst4*r11);
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9884*x9884)))+(((-1.0)*(r12*r12)))+(((2.0)*x9883*x9884))+(((-1.0)*(x9883*x9883))))),-1);
if(!x9885.valid){
continue;
}
CheckValue<IkReal> x9886 = IKatan2WithCheck(IkReal(((((-1.0)*x9883))+x9884)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9885.value)))+(x9886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9887=IKcos(j4);
IkReal x9888=IKsin(j4);
IkReal x9889=(gconst5*r10);
IkReal x9890=((1.0)*sj2);
IkReal x9891=(gconst5*r00);
IkReal x9892=(gconst5*r20);
IkReal x9893=((1.0)*x9887);
IkReal x9894=(gconst4*x9888);
IkReal x9895=(gconst4*x9887);
IkReal x9896=((1.0)*x9888);
evalcond[0]=(((r12*x9888))+(((-1.0)*x9889*x9893))+((r11*x9895)));
evalcond[1]=((((-1.0)*x9892*x9896))+((r21*x9894))+(((-1.0)*r22*x9893)));
evalcond[2]=(((r01*x9894))+(((-1.0)*x9891*x9896))+(((-1.0)*r02*x9893)));
evalcond[3]=((1.0)+(((-1.0)*x9889*x9896))+(((-1.0)*r12*x9893))+((r11*x9894)));
evalcond[4]=(((r01*x9895))+(((-1.0)*x9891*x9893))+((cj1*cj2))+(((-1.0)*sj1*x9890))+((r02*x9888)));
evalcond[5]=((((-1.0)*cj1*x9890))+(((-1.0)*cj2*sj1))+(((-1.0)*x9892*x9893))+((r22*x9888))+((r21*x9895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9897=((1.0)*gconst5);
CheckValue<IkReal> x9898=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9897)))),-1);
if(!x9898.valid){
continue;
}
CheckValue<IkReal> x9899 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9897))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9898.value)))+(x9899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9900=IKcos(j4);
IkReal x9901=IKsin(j4);
IkReal x9902=(gconst5*r10);
IkReal x9903=((1.0)*sj2);
IkReal x9904=(gconst5*r00);
IkReal x9905=(gconst5*r20);
IkReal x9906=((1.0)*x9900);
IkReal x9907=(gconst4*x9901);
IkReal x9908=(gconst4*x9900);
IkReal x9909=((1.0)*x9901);
evalcond[0]=((((-1.0)*x9902*x9906))+((r12*x9901))+((r11*x9908)));
evalcond[1]=((((-1.0)*x9905*x9909))+(((-1.0)*r22*x9906))+((r21*x9907)));
evalcond[2]=(((r01*x9907))+(((-1.0)*x9904*x9909))+(((-1.0)*r02*x9906)));
evalcond[3]=((1.0)+(((-1.0)*x9902*x9909))+(((-1.0)*r12*x9906))+((r11*x9907)));
evalcond[4]=(((r02*x9901))+((r01*x9908))+(((-1.0)*x9904*x9906))+((cj1*cj2))+(((-1.0)*sj1*x9903)));
evalcond[5]=((((-1.0)*x9905*x9906))+(((-1.0)*cj2*sj1))+((r22*x9901))+((r21*x9908))+(((-1.0)*cj1*x9903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9910=((-1.0)*r21);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(x9910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9911=((1.0)*(x9913.value));
IkReal x9912=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9911)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9911)));
IkReal gconst4=(x9910*x9912);
IkReal gconst5=((1.0)*r20*x9912);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9914=((-1.0)*r21);
CheckValue<IkReal> x9917 = IKatan2WithCheck(IkReal(x9914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9917.valid){
continue;
}
IkReal x9915=((1.0)*(x9917.value));
IkReal x9916=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9915)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9915)));
IkReal gconst4=(x9914*x9916);
IkReal gconst5=((1.0)*r20*x9916);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9918=((-1.0)*r21);
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal(x9918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
IkReal x9919=((1.0)*(x9921.value));
IkReal x9920=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9919)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9919)));
IkReal gconst4=(x9918*x9920);
IkReal gconst5=((1.0)*r20*x9920);
IkReal x9922=r22*r22;
IkReal x9923=(cj1*r12*sj2);
IkReal x9924=(cj2*r12*sj1);
CheckValue<IkReal> x9928=IKPowWithIntegerCheck(((-1.0)+x9922),-1);
if(!x9928.valid){
continue;
}
IkReal x9925=x9928.value;
if((((1.0)+(((-1.0)*x9922)))) < -0.00001)
continue;
IkReal x9926=IKsqrt(((1.0)+(((-1.0)*x9922))));
IkReal x9927=(r22*x9925*x9926);
j4eval[0]=((IKabs((x9923+x9924)))+(IKabs((((x9924*x9927))+((x9923*x9927))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9929=((1.0)*gconst4);
IkReal x9930=(cj1*sj2);
IkReal x9931=(cj2*sj1);
IkReal x9932=(gconst5*r10);
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9929*x9931))+(((-1.0)*r11*x9929*x9930))+((x9930*x9932))+((x9931*x9932)))),IkReal((((r12*x9930))+((r12*x9931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
CheckValue<IkReal> x9934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9929))+(((-1.0)*gconst5*r01)))),-1);
if(!x9934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9933.value)+(((1.5707963267949)*(x9934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9935=IKcos(j4);
IkReal x9936=IKsin(j4);
IkReal x9937=(gconst4*r11);
IkReal x9938=(gconst5*r10);
IkReal x9939=((1.0)*cj1);
IkReal x9940=(gconst5*r00);
IkReal x9941=(gconst5*r20);
IkReal x9942=((1.0)*x9935);
IkReal x9943=(gconst4*x9935);
IkReal x9944=((1.0)*x9936);
IkReal x9945=(gconst4*x9936);
evalcond[0]=(((r12*x9936))+(((-1.0)*x9938*x9942))+((x9935*x9937)));
evalcond[1]=((((-1.0)*x9941*x9944))+(((-1.0)*r22*x9942))+((r21*x9945)));
evalcond[2]=((((-1.0)*x9940*x9944))+((r01*x9945))+(((-1.0)*r02*x9942)));
evalcond[3]=((-1.0)+((x9936*x9937))+(((-1.0)*x9938*x9944))+(((-1.0)*r12*x9942)));
evalcond[4]=((((-1.0)*x9940*x9942))+(((-1.0)*cj2*x9939))+((sj1*sj2))+((r01*x9943))+((r02*x9936)));
evalcond[5]=((((-1.0)*x9941*x9942))+(((-1.0)*cj2*sj1))+((r22*x9936))+((r21*x9943))+(((-1.0)*sj2*x9939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9946=(gconst5*r10);
IkReal x9947=(gconst4*r11);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((((-1.0)*x9946))+x9947)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9946*x9947))+(x9947*x9947)+(x9946*x9946))),-1);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9948.value)+(((1.5707963267949)*(x9949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9950=IKcos(j4);
IkReal x9951=IKsin(j4);
IkReal x9952=(gconst4*r11);
IkReal x9953=(gconst5*r10);
IkReal x9954=((1.0)*cj1);
IkReal x9955=(gconst5*r00);
IkReal x9956=(gconst5*r20);
IkReal x9957=((1.0)*x9950);
IkReal x9958=(gconst4*x9950);
IkReal x9959=((1.0)*x9951);
IkReal x9960=(gconst4*x9951);
evalcond[0]=(((x9950*x9952))+(((-1.0)*x9953*x9957))+((r12*x9951)));
evalcond[1]=(((r21*x9960))+(((-1.0)*r22*x9957))+(((-1.0)*x9956*x9959)));
evalcond[2]=((((-1.0)*x9955*x9959))+(((-1.0)*r02*x9957))+((r01*x9960)));
evalcond[3]=((-1.0)+((x9951*x9952))+(((-1.0)*x9953*x9959))+(((-1.0)*r12*x9957)));
evalcond[4]=((((-1.0)*x9955*x9957))+((r02*x9951))+((sj1*sj2))+(((-1.0)*cj2*x9954))+((r01*x9958)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9954))+(((-1.0)*x9956*x9957))+((r21*x9958))+((r22*x9951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9961=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9961.valid){
continue;
}
CheckValue<IkReal> x9962 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9961.value)))+(x9962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9963=IKcos(j4);
IkReal x9964=IKsin(j4);
IkReal x9965=(gconst4*r11);
IkReal x9966=(gconst5*r10);
IkReal x9967=((1.0)*cj1);
IkReal x9968=(gconst5*r00);
IkReal x9969=(gconst5*r20);
IkReal x9970=((1.0)*x9963);
IkReal x9971=(gconst4*x9963);
IkReal x9972=((1.0)*x9964);
IkReal x9973=(gconst4*x9964);
evalcond[0]=((((-1.0)*x9966*x9970))+((x9963*x9965))+((r12*x9964)));
evalcond[1]=((((-1.0)*x9969*x9972))+(((-1.0)*r22*x9970))+((r21*x9973)));
evalcond[2]=((((-1.0)*r02*x9970))+(((-1.0)*x9968*x9972))+((r01*x9973)));
evalcond[3]=((-1.0)+(((-1.0)*x9966*x9972))+((x9964*x9965))+(((-1.0)*r12*x9970)));
evalcond[4]=(((r02*x9964))+(((-1.0)*x9968*x9970))+(((-1.0)*cj2*x9967))+((sj1*sj2))+((r01*x9971)));
evalcond[5]=((((-1.0)*sj2*x9967))+(((-1.0)*cj2*sj1))+(((-1.0)*x9969*x9970))+((r22*x9964))+((r21*x9971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9974=((-1.0)*r21);
CheckValue<IkReal> x9977 = IKatan2WithCheck(IkReal(x9974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9977.valid){
continue;
}
IkReal x9975=((1.0)*(x9977.value));
IkReal x9976=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9975)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9975)));
IkReal gconst4=(x9974*x9976);
IkReal gconst5=((1.0)*r20*x9976);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9978=((-1.0)*r21);
CheckValue<IkReal> x9981 = IKatan2WithCheck(IkReal(x9978),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9981.valid){
continue;
}
IkReal x9979=((1.0)*(x9981.value));
IkReal x9980=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9979)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9979)));
IkReal gconst4=(x9978*x9980);
IkReal gconst5=((1.0)*r20*x9980);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9982=((-1.0)*r21);
CheckValue<IkReal> x9985 = IKatan2WithCheck(IkReal(x9982),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9985.valid){
continue;
}
IkReal x9983=((1.0)*(x9985.value));
IkReal x9984=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9983)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9983)));
IkReal gconst4=(x9982*x9984);
IkReal gconst5=((1.0)*r20*x9984);
IkReal x9986=r22*r22;
IkReal x9987=(cj1*r02*sj2);
IkReal x9988=(cj2*r02*sj1);
CheckValue<IkReal> x9992=IKPowWithIntegerCheck(((-1.0)+x9986),-1);
if(!x9992.valid){
continue;
}
IkReal x9989=x9992.value;
if((((1.0)+(((-1.0)*x9986)))) < -0.00001)
continue;
IkReal x9990=IKsqrt(((1.0)+(((-1.0)*x9986))));
IkReal x9991=(r22*x9989*x9990);
j4eval[0]=((IKabs((((x9987*x9991))+((x9988*x9991)))))+(IKabs((x9988+x9987))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9993=(cj2*sj1);
IkReal x9994=(gconst5*r00);
IkReal x9995=(cj1*sj2);
IkReal x9996=((1.0)*gconst4*r01);
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9997.valid){
continue;
}
CheckValue<IkReal> x9998 = IKatan2WithCheck(IkReal(((((-1.0)*x9995*x9996))+(((-1.0)*x9993*x9996))+((x9994*x9995))+((x9993*x9994)))),IkReal((((r02*x9993))+((r02*x9995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9997.value)))+(x9998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9999=IKcos(j4);
IkReal x10000=IKsin(j4);
IkReal x10001=(gconst5*r10);
IkReal x10002=((1.0)*sj2);
IkReal x10003=(gconst5*r00);
IkReal x10004=(gconst5*r20);
IkReal x10005=((1.0)*x9999);
IkReal x10006=(gconst4*x10000);
IkReal x10007=(gconst4*x9999);
IkReal x10008=((1.0)*x10000);
evalcond[0]=(((r02*x10000))+(((-1.0)*x10003*x10005))+((r01*x10007)));
evalcond[1]=((((-1.0)*x10004*x10008))+(((-1.0)*r22*x10005))+((r21*x10006)));
evalcond[2]=((((-1.0)*r12*x10005))+((r11*x10006))+(((-1.0)*x10001*x10008)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10005))+(((-1.0)*x10003*x10008))+((r01*x10006)));
evalcond[4]=((((-1.0)*sj1*x10002))+((r12*x10000))+((r11*x10007))+((cj1*cj2))+(((-1.0)*x10001*x10005)));
evalcond[5]=(((r22*x10000))+(((-1.0)*cj2*sj1))+(((-1.0)*x10004*x10005))+((r21*x10007))+(((-1.0)*cj1*x10002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10009=(gconst4*r01);
IkReal x10010=(gconst5*r00);
CheckValue<IkReal> x10011 = IKatan2WithCheck(IkReal(((((-1.0)*x10010))+x10009)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10011.valid){
continue;
}
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(IKsign(((x10009*x10009)+(x10010*x10010)+(((-2.0)*x10009*x10010))+(r02*r02))),-1);
if(!x10012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10011.value)+(((1.5707963267949)*(x10012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10013=IKcos(j4);
IkReal x10014=IKsin(j4);
IkReal x10015=(gconst5*r10);
IkReal x10016=((1.0)*sj2);
IkReal x10017=(gconst5*r00);
IkReal x10018=(gconst5*r20);
IkReal x10019=((1.0)*x10013);
IkReal x10020=(gconst4*x10014);
IkReal x10021=(gconst4*x10013);
IkReal x10022=((1.0)*x10014);
evalcond[0]=(((r02*x10014))+((r01*x10021))+(((-1.0)*x10017*x10019)));
evalcond[1]=(((r21*x10020))+(((-1.0)*x10018*x10022))+(((-1.0)*r22*x10019)));
evalcond[2]=((((-1.0)*r12*x10019))+((r11*x10020))+(((-1.0)*x10015*x10022)));
evalcond[3]=((-1.0)+(((-1.0)*x10017*x10022))+(((-1.0)*r02*x10019))+((r01*x10020)));
evalcond[4]=((((-1.0)*x10015*x10019))+(((-1.0)*sj1*x10016))+((r12*x10014))+((r11*x10021))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x10018*x10019))+((r22*x10014))+(((-1.0)*cj2*sj1))+((r21*x10021))+(((-1.0)*cj1*x10016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10023=((1.0)*gconst5);
CheckValue<IkReal> x10024 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10024.valid){
continue;
}
CheckValue<IkReal> x10025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10023))+(((-1.0)*gconst4*r10)))),-1);
if(!x10025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10024.value)+(((1.5707963267949)*(x10025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10026=IKcos(j4);
IkReal x10027=IKsin(j4);
IkReal x10028=(gconst5*r10);
IkReal x10029=((1.0)*sj2);
IkReal x10030=(gconst5*r00);
IkReal x10031=(gconst5*r20);
IkReal x10032=((1.0)*x10026);
IkReal x10033=(gconst4*x10027);
IkReal x10034=(gconst4*x10026);
IkReal x10035=((1.0)*x10027);
evalcond[0]=((((-1.0)*x10030*x10032))+((r01*x10034))+((r02*x10027)));
evalcond[1]=(((r21*x10033))+(((-1.0)*r22*x10032))+(((-1.0)*x10031*x10035)));
evalcond[2]=((((-1.0)*x10028*x10035))+((r11*x10033))+(((-1.0)*r12*x10032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10032))+(((-1.0)*x10030*x10035))+((r01*x10033)));
evalcond[4]=((((-1.0)*x10028*x10032))+((r11*x10034))+((r12*x10027))+((cj1*cj2))+(((-1.0)*sj1*x10029)));
evalcond[5]=((((-1.0)*cj1*x10029))+(((-1.0)*cj2*sj1))+((r21*x10034))+(((-1.0)*x10031*x10032))+((r22*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10036=((-1.0)*r21);
CheckValue<IkReal> x10039 = IKatan2WithCheck(IkReal(x10036),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10039.valid){
continue;
}
IkReal x10037=((1.0)*(x10039.value));
IkReal x10038=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10037)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10037)));
IkReal gconst4=(x10036*x10038);
IkReal gconst5=((1.0)*r20*x10038);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10040=((-1.0)*r21);
CheckValue<IkReal> x10043 = IKatan2WithCheck(IkReal(x10040),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10043.valid){
continue;
}
IkReal x10041=((1.0)*(x10043.value));
IkReal x10042=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10041)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10041)));
IkReal gconst4=(x10040*x10042);
IkReal gconst5=((1.0)*r20*x10042);
IkReal x10044=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10048=IKPowWithIntegerCheck(x10044,-1);
if(!x10048.valid){
continue;
}
IkReal x10045=x10048.value;
IkReal x10046=((1.0)*x10045);
IkReal x10047=((((-1.0)*x10046*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10046*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10045)));
j4eval[0]=x10047;
j4eval[1]=IKsign(x10047);
j4eval[2]=r02;
j4eval[3]=x10044;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10049=((-1.0)*r21);
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal(x10049),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
IkReal x10050=((1.0)*(x10052.value));
IkReal x10051=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10050)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10050)));
IkReal gconst4=(x10049*x10051);
IkReal gconst5=((1.0)*r20*x10051);
IkReal x10053=r22*r22;
IkReal x10054=(cj1*r02*sj2);
IkReal x10055=(cj2*r02*sj1);
CheckValue<IkReal> x10059=IKPowWithIntegerCheck(((-1.0)+x10053),-1);
if(!x10059.valid){
continue;
}
IkReal x10056=x10059.value;
if((((1.0)+(((-1.0)*x10053)))) < -0.00001)
continue;
IkReal x10057=IKsqrt(((1.0)+(((-1.0)*x10053))));
IkReal x10058=(r22*x10056*x10057);
j4eval[0]=((IKabs((((x10054*x10058))+((x10055*x10058)))))+(IKabs((x10055+x10054))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10060=(cj2*sj1);
IkReal x10061=(gconst5*r00);
IkReal x10062=(cj1*sj2);
IkReal x10063=((1.0)*gconst4*r01);
CheckValue<IkReal> x10064=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10064.valid){
continue;
}
CheckValue<IkReal> x10065 = IKatan2WithCheck(IkReal((((x10060*x10061))+(((-1.0)*x10060*x10063))+(((-1.0)*x10062*x10063))+((x10061*x10062)))),IkReal((((r02*x10062))+((r02*x10060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10064.value)))+(x10065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10066=IKcos(j4);
IkReal x10067=IKsin(j4);
IkReal x10068=(gconst4*r11);
IkReal x10069=(gconst5*r10);
IkReal x10070=((1.0)*cj1);
IkReal x10071=(gconst5*r00);
IkReal x10072=(gconst5*r20);
IkReal x10073=((1.0)*x10066);
IkReal x10074=(gconst4*x10066);
IkReal x10075=((1.0)*x10067);
IkReal x10076=(gconst4*x10067);
evalcond[0]=(((r01*x10074))+((r02*x10067))+(((-1.0)*x10071*x10073)));
evalcond[1]=((((-1.0)*x10072*x10075))+((r21*x10076))+(((-1.0)*r22*x10073)));
evalcond[2]=(((x10067*x10068))+(((-1.0)*r12*x10073))+(((-1.0)*x10069*x10075)));
evalcond[3]=((1.0)+((r01*x10076))+(((-1.0)*r02*x10073))+(((-1.0)*x10071*x10075)));
evalcond[4]=(((r12*x10067))+(((-1.0)*cj2*x10070))+((x10066*x10068))+((sj1*sj2))+(((-1.0)*x10069*x10073)));
evalcond[5]=((((-1.0)*x10072*x10073))+(((-1.0)*cj2*sj1))+((r22*x10067))+(((-1.0)*sj2*x10070))+((r21*x10074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10077=(gconst4*r01);
IkReal x10078=(gconst5*r00);
CheckValue<IkReal> x10079 = IKatan2WithCheck(IkReal((x10077+(((-1.0)*x10078)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10079.valid){
continue;
}
CheckValue<IkReal> x10080=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10077*x10077)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10078*x10078)))+(((2.0)*x10077*x10078)))),-1);
if(!x10080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10079.value)+(((1.5707963267949)*(x10080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10081=IKcos(j4);
IkReal x10082=IKsin(j4);
IkReal x10083=(gconst4*r11);
IkReal x10084=(gconst5*r10);
IkReal x10085=((1.0)*cj1);
IkReal x10086=(gconst5*r00);
IkReal x10087=(gconst5*r20);
IkReal x10088=((1.0)*x10081);
IkReal x10089=(gconst4*x10081);
IkReal x10090=((1.0)*x10082);
IkReal x10091=(gconst4*x10082);
evalcond[0]=(((r01*x10089))+(((-1.0)*x10086*x10088))+((r02*x10082)));
evalcond[1]=((((-1.0)*x10087*x10090))+((r21*x10091))+(((-1.0)*r22*x10088)));
evalcond[2]=((((-1.0)*x10084*x10090))+((x10082*x10083))+(((-1.0)*r12*x10088)));
evalcond[3]=((1.0)+(((-1.0)*x10086*x10090))+(((-1.0)*r02*x10088))+((r01*x10091)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10084*x10088))+(((-1.0)*cj2*x10085))+((x10081*x10083))+((r12*x10082)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10087*x10088))+((r21*x10089))+((r22*x10082))+(((-1.0)*sj2*x10085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10092=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10092.valid){
continue;
}
CheckValue<IkReal> x10093 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10092.value)))+(x10093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10094=IKcos(j4);
IkReal x10095=IKsin(j4);
IkReal x10096=(gconst4*r11);
IkReal x10097=(gconst5*r10);
IkReal x10098=((1.0)*cj1);
IkReal x10099=(gconst5*r00);
IkReal x10100=(gconst5*r20);
IkReal x10101=((1.0)*x10094);
IkReal x10102=(gconst4*x10094);
IkReal x10103=((1.0)*x10095);
IkReal x10104=(gconst4*x10095);
evalcond[0]=(((r01*x10102))+((r02*x10095))+(((-1.0)*x10099*x10101)));
evalcond[1]=(((r21*x10104))+(((-1.0)*x10100*x10103))+(((-1.0)*r22*x10101)));
evalcond[2]=((((-1.0)*r12*x10101))+((x10095*x10096))+(((-1.0)*x10097*x10103)));
evalcond[3]=((1.0)+((r01*x10104))+(((-1.0)*r02*x10101))+(((-1.0)*x10099*x10103)));
evalcond[4]=((((-1.0)*cj2*x10098))+((r12*x10095))+((x10094*x10096))+((sj1*sj2))+(((-1.0)*x10097*x10101)));
evalcond[5]=(((r21*x10102))+(((-1.0)*cj2*sj1))+(((-1.0)*x10100*x10101))+(((-1.0)*sj2*x10098))+((r22*x10095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10105=((-1.0)*r21);
IkReal x10106=((-1.0)*px);
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal(x10105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
IkReal x10107=((1.0)*(x10108.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10107)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10106);
rxp1_1=(px*r21);
rxp1_2=(r11*x10106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10107)));
IkReal gconst4=x10105;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10109=((-1.0)*r21);
IkReal x10110=((-1.0)*px);
CheckValue<IkReal> x10112 = IKatan2WithCheck(IkReal(x10109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10112.valid){
continue;
}
IkReal x10111=((1.0)*(x10112.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10111)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10110);
rxp1_1=(px*r21);
rxp1_2=(r11*x10110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10111)));
IkReal gconst4=x10109;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10113=((-1.0)*r21);
IkReal x10114=((-1.0)*px);
CheckValue<IkReal> x10116 = IKatan2WithCheck(IkReal(x10113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10116.valid){
continue;
}
IkReal x10115=((1.0)*(x10116.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10115)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10114);
rxp1_1=(px*r21);
rxp1_2=(r11*x10114);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10115)));
IkReal gconst4=x10113;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10119=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10119.valid){
continue;
}
IkReal x10117=x10119.value;
IkReal x10118=(sj0*x10117);
cj4array[0]=(((sj1*sj2*x10118))+(((-1.0)*cj1*cj2*x10118)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10120=IKsin(j4);
IkReal x10121=IKcos(j4);
IkReal x10122=(gconst5*r20);
IkReal x10123=(gconst4*x10120);
IkReal x10124=((1.0)*x10121);
IkReal x10125=((1.0)*x10120);
evalcond[0]=(r02*x10120);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10124)));
evalcond[2]=(((r21*x10123))+(((-1.0)*x10122*x10125)));
evalcond[3]=((((-1.0)*gconst5*r10*x10125))+((r11*x10123)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst4*r21*x10121))+(((-1.0)*x10122*x10124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10127=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10127.valid){
continue;
}
IkReal x10126=x10127.value;
cj4array[0]=(((cj1*sj2*x10126))+((cj2*sj1*x10126)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10128=IKsin(j4);
IkReal x10129=IKcos(j4);
IkReal x10130=(gconst4*r11);
IkReal x10131=((1.0)*sj0);
IkReal x10132=(gconst5*r10);
IkReal x10133=((1.0)*x10129);
IkReal x10134=((1.0)*x10128);
evalcond[0]=(r02*x10128);
evalcond[1]=((((-1.0)*r02*x10133))+(((-1.0)*x10131)));
evalcond[2]=((((-1.0)*gconst5*r20*x10134))+((gconst4*r21*x10128)));
evalcond[3]=((((-1.0)*x10132*x10134))+((x10128*x10130)));
evalcond[4]=((((-1.0)*x10132*x10133))+((cj1*cj2*sj0))+((x10129*x10130))+(((-1.0)*sj1*sj2*x10131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10135=IKPowWithIntegerCheck(r02,-1);
if(!x10135.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10135.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10136=IKsin(j4);
IkReal x10137=IKcos(j4);
IkReal x10138=(gconst4*r11);
IkReal x10139=((1.0)*sj1);
IkReal x10140=(gconst4*r21);
IkReal x10141=((1.0)*gconst5*x10137);
IkReal x10142=((1.0)*gconst5*x10136);
evalcond[0]=(r02*x10136);
evalcond[1]=(((x10136*x10140))+(((-1.0)*r20*x10142)));
evalcond[2]=(((x10136*x10138))+(((-1.0)*r10*x10142)));
evalcond[3]=((((-1.0)*cj2*x10139))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x10141))+((x10137*x10140)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x10141))+(((-1.0)*sj0*sj2*x10139))+((x10137*x10138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10143=(cj1*sj2);
IkReal x10144=((1.0)*r22);
IkReal x10145=(gconst4*r21);
IkReal x10146=(gconst5*r20);
IkReal x10147=(cj2*sj1);
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10145*x10145)))+(((2.0)*x10145*x10146))+(((-1.0)*(x10146*x10146)))+(((-1.0)*r22*x10144)))),-1);
if(!x10148.valid){
continue;
}
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal(((((-1.0)*x10143*x10144))+(((-1.0)*x10144*x10147)))),IkReal(((((-1.0)*x10143*x10145))+(((-1.0)*x10145*x10147))+((x10143*x10146))+((x10146*x10147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10148.value)))+(x10149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10150=IKsin(j4);
IkReal x10151=IKcos(j4);
IkReal x10152=(gconst4*r11);
IkReal x10153=(cj1*cj2);
IkReal x10154=(gconst5*r10);
IkReal x10155=((1.0)*sj2);
IkReal x10156=(gconst5*r00);
IkReal x10157=(gconst5*r20);
IkReal x10158=((1.0)*x10151);
IkReal x10159=(gconst4*x10151);
IkReal x10160=((1.0)*x10150);
IkReal x10161=(gconst4*x10150);
evalcond[0]=((((-1.0)*x10157*x10160))+(((-1.0)*r22*x10158))+((r21*x10161)));
evalcond[1]=(((x10150*x10152))+cj0+(((-1.0)*x10154*x10160))+(((-1.0)*r12*x10158)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x10156*x10160))+((r01*x10161))+(((-1.0)*r02*x10158)));
evalcond[3]=(((r21*x10159))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10155))+((r22*x10150))+(((-1.0)*x10157*x10158)));
evalcond[4]=((((-1.0)*cj0*sj1*x10155))+((r02*x10150))+(((-1.0)*x10156*x10158))+((r01*x10159))+((cj0*x10153)));
evalcond[5]=(((r12*x10150))+((x10151*x10152))+(((-1.0)*x10154*x10158))+(((-1.0)*sj0*sj1*x10155))+((sj0*x10153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10162=((1.0)*gconst5);
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10162))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10162))+(((-1.0)*gconst4*r10)))),-1);
if(!x10164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10163.value)+(((1.5707963267949)*(x10164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10165=IKsin(j4);
IkReal x10166=IKcos(j4);
IkReal x10167=(gconst4*r11);
IkReal x10168=(cj1*cj2);
IkReal x10169=(gconst5*r10);
IkReal x10170=((1.0)*sj2);
IkReal x10171=(gconst5*r00);
IkReal x10172=(gconst5*r20);
IkReal x10173=((1.0)*x10166);
IkReal x10174=(gconst4*x10166);
IkReal x10175=((1.0)*x10165);
IkReal x10176=(gconst4*x10165);
evalcond[0]=((((-1.0)*r22*x10173))+(((-1.0)*x10172*x10175))+((r21*x10176)));
evalcond[1]=((((-1.0)*x10169*x10175))+cj0+((x10165*x10167))+(((-1.0)*r12*x10173)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10176))+(((-1.0)*x10171*x10175))+(((-1.0)*r02*x10173)));
evalcond[3]=((((-1.0)*cj1*x10170))+((r22*x10165))+(((-1.0)*x10172*x10173))+(((-1.0)*cj2*sj1))+((r21*x10174)));
evalcond[4]=((((-1.0)*cj0*sj1*x10170))+((cj0*x10168))+((r01*x10174))+((r02*x10165))+(((-1.0)*x10171*x10173)));
evalcond[5]=((((-1.0)*x10169*x10173))+((x10166*x10167))+((sj0*x10168))+((r12*x10165))+(((-1.0)*sj0*sj1*x10170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10177=((1.0)*gconst5);
CheckValue<IkReal> x10178=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10177)))),-1);
if(!x10178.valid){
continue;
}
CheckValue<IkReal> x10179 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10177))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10178.value)))+(x10179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10180=IKsin(j4);
IkReal x10181=IKcos(j4);
IkReal x10182=(gconst4*r11);
IkReal x10183=(cj1*cj2);
IkReal x10184=(gconst5*r10);
IkReal x10185=((1.0)*sj2);
IkReal x10186=(gconst5*r00);
IkReal x10187=(gconst5*r20);
IkReal x10188=((1.0)*x10181);
IkReal x10189=(gconst4*x10181);
IkReal x10190=((1.0)*x10180);
IkReal x10191=(gconst4*x10180);
evalcond[0]=((((-1.0)*x10187*x10190))+((r21*x10191))+(((-1.0)*r22*x10188)));
evalcond[1]=(cj0+(((-1.0)*x10184*x10190))+(((-1.0)*r12*x10188))+((x10180*x10182)));
evalcond[2]=((((-1.0)*r02*x10188))+(((-1.0)*sj0))+(((-1.0)*x10186*x10190))+((r01*x10191)));
evalcond[3]=((((-1.0)*cj1*x10185))+((r22*x10180))+(((-1.0)*cj2*sj1))+(((-1.0)*x10187*x10188))+((r21*x10189)));
evalcond[4]=(((r02*x10180))+(((-1.0)*x10186*x10188))+((cj0*x10183))+((r01*x10189))+(((-1.0)*cj0*sj1*x10185)));
evalcond[5]=(((x10181*x10182))+((sj0*x10183))+((r12*x10180))+(((-1.0)*x10184*x10188))+(((-1.0)*sj0*sj1*x10185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10193)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10197)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10200=((-1.0)*r21);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10201=((1.0)*(x10203.value));
IkReal x10202=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10201)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10201)));
IkReal gconst4=(x10200*x10202);
IkReal gconst5=((1.0)*r20*x10202);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10204=((-1.0)*r21);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(x10204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
IkReal x10205=((1.0)*(x10207.value));
IkReal x10206=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10205)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10205)));
IkReal gconst4=(x10204*x10206);
IkReal gconst5=((1.0)*r20*x10206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10208=((-1.0)*r21);
CheckValue<IkReal> x10211 = IKatan2WithCheck(IkReal(x10208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10211.valid){
continue;
}
IkReal x10209=((1.0)*(x10211.value));
IkReal x10210=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10209)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10209)));
IkReal gconst4=(x10208*x10210);
IkReal gconst5=((1.0)*r20*x10210);
IkReal x10212=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10216=IKPowWithIntegerCheck(x10212,-1);
if(!x10216.valid){
continue;
}
IkReal x10213=x10216.value;
IkReal x10214=((1.0)*x10213);
IkReal x10215=((((-1.0)*x10214*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10213))+(((-1.0)*(r12*r12)))+(((-1.0)*x10214*(r10*r10)*(r20*r20))));
j4eval[0]=x10215;
j4eval[1]=r12;
j4eval[2]=x10212;
j4eval[3]=IKsign(x10215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10217=((-1.0)*r21);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(x10217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10218=((1.0)*(x10220.value));
IkReal x10219=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10218)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10218)));
IkReal gconst4=(x10217*x10219);
IkReal gconst5=((1.0)*r20*x10219);
IkReal x10221=r22*r22;
IkReal x10222=(cj1*cj2*r12);
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(((-1.0)+x10221),-1);
if(!x10227.valid){
continue;
}
IkReal x10223=x10227.value;
IkReal x10224=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x10221)))) < -0.00001)
continue;
IkReal x10225=IKsqrt(((1.0)+(((-1.0)*x10221))));
IkReal x10226=(r22*x10223*x10225);
j4eval[0]=((IKabs(((((-1.0)*x10224*x10226))+((x10222*x10226)))))+(IKabs(((((-1.0)*x10224))+x10222))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10228=((1.0)*gconst4);
IkReal x10229=((1.0)*gconst5);
IkReal x10230=(sj1*sj2);
IkReal x10231=(cj1*cj2);
CheckValue<IkReal> x10232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10228))+(((-1.0)*r01*x10229)))),-1);
if(!x10232.valid){
continue;
}
CheckValue<IkReal> x10233 = IKatan2WithCheck(IkReal((((gconst4*r11*x10230))+(((-1.0)*r10*x10229*x10230))+((gconst5*r10*x10231))+(((-1.0)*r11*x10228*x10231)))),IkReal(((((-1.0)*r12*x10230))+((r12*x10231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10232.value)))+(x10233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10234=IKcos(j4);
IkReal x10235=IKsin(j4);
IkReal x10236=(gconst4*r11);
IkReal x10237=(gconst5*r10);
IkReal x10238=((1.0)*cj1);
IkReal x10239=(gconst5*r00);
IkReal x10240=(gconst5*r20);
IkReal x10241=((1.0)*x10234);
IkReal x10242=(gconst4*x10234);
IkReal x10243=((1.0)*x10235);
IkReal x10244=(gconst4*x10235);
evalcond[0]=((((-1.0)*x10237*x10241))+((x10234*x10236))+((r12*x10235)));
evalcond[1]=((((-1.0)*x10240*x10243))+((r21*x10244))+(((-1.0)*r22*x10241)));
evalcond[2]=((((-1.0)*x10239*x10243))+((r01*x10244))+(((-1.0)*r02*x10241)));
evalcond[3]=((1.0)+(((-1.0)*x10237*x10243))+((x10235*x10236))+(((-1.0)*r12*x10241)));
evalcond[4]=((((-1.0)*x10240*x10241))+((r22*x10235))+((sj1*sj2))+(((-1.0)*cj2*x10238))+((r21*x10242)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10235))+(((-1.0)*x10239*x10241))+((r01*x10242))+(((-1.0)*sj2*x10238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10245=(gconst5*r10);
IkReal x10246=(gconst4*r11);
CheckValue<IkReal> x10247 = IKatan2WithCheck(IkReal((x10246+(((-1.0)*x10245)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10247.valid){
continue;
}
CheckValue<IkReal> x10248=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10246*x10246)))+(((2.0)*x10245*x10246))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10245*x10245))))),-1);
if(!x10248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10247.value)+(((1.5707963267949)*(x10248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10249=IKcos(j4);
IkReal x10250=IKsin(j4);
IkReal x10251=(gconst4*r11);
IkReal x10252=(gconst5*r10);
IkReal x10253=((1.0)*cj1);
IkReal x10254=(gconst5*r00);
IkReal x10255=(gconst5*r20);
IkReal x10256=((1.0)*x10249);
IkReal x10257=(gconst4*x10249);
IkReal x10258=((1.0)*x10250);
IkReal x10259=(gconst4*x10250);
evalcond[0]=(((r12*x10250))+(((-1.0)*x10252*x10256))+((x10249*x10251)));
evalcond[1]=((((-1.0)*x10255*x10258))+((r21*x10259))+(((-1.0)*r22*x10256)));
evalcond[2]=((((-1.0)*r02*x10256))+(((-1.0)*x10254*x10258))+((r01*x10259)));
evalcond[3]=((1.0)+(((-1.0)*x10252*x10258))+(((-1.0)*r12*x10256))+((x10250*x10251)));
evalcond[4]=(((r22*x10250))+(((-1.0)*x10255*x10256))+(((-1.0)*cj2*x10253))+((sj1*sj2))+((r21*x10257)));
evalcond[5]=((((-1.0)*x10254*x10256))+((r02*x10250))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10253))+((r01*x10257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10260=((1.0)*gconst5);
CheckValue<IkReal> x10261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10260)))),-1);
if(!x10261.valid){
continue;
}
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10260))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10261.value)))+(x10262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10263=IKcos(j4);
IkReal x10264=IKsin(j4);
IkReal x10265=(gconst4*r11);
IkReal x10266=(gconst5*r10);
IkReal x10267=((1.0)*cj1);
IkReal x10268=(gconst5*r00);
IkReal x10269=(gconst5*r20);
IkReal x10270=((1.0)*x10263);
IkReal x10271=(gconst4*x10263);
IkReal x10272=((1.0)*x10264);
IkReal x10273=(gconst4*x10264);
evalcond[0]=(((r12*x10264))+((x10263*x10265))+(((-1.0)*x10266*x10270)));
evalcond[1]=((((-1.0)*x10269*x10272))+(((-1.0)*r22*x10270))+((r21*x10273)));
evalcond[2]=(((r01*x10273))+(((-1.0)*x10268*x10272))+(((-1.0)*r02*x10270)));
evalcond[3]=((1.0)+((x10264*x10265))+(((-1.0)*r12*x10270))+(((-1.0)*x10266*x10272)));
evalcond[4]=(((r22*x10264))+((sj1*sj2))+(((-1.0)*x10269*x10270))+((r21*x10271))+(((-1.0)*cj2*x10267)));
evalcond[5]=(((r02*x10264))+((r01*x10271))+(((-1.0)*cj2*sj1))+(((-1.0)*x10268*x10270))+(((-1.0)*sj2*x10267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10274=((-1.0)*r21);
CheckValue<IkReal> x10277 = IKatan2WithCheck(IkReal(x10274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10277.valid){
continue;
}
IkReal x10275=((1.0)*(x10277.value));
IkReal x10276=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10275)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10275)));
IkReal gconst4=(x10274*x10276);
IkReal gconst5=((1.0)*r20*x10276);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10278=((-1.0)*r21);
CheckValue<IkReal> x10281 = IKatan2WithCheck(IkReal(x10278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10281.valid){
continue;
}
IkReal x10279=((1.0)*(x10281.value));
IkReal x10280=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10279)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10279)));
IkReal gconst4=(x10278*x10280);
IkReal gconst5=((1.0)*r20*x10280);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10282=((-1.0)*r21);
CheckValue<IkReal> x10285 = IKatan2WithCheck(IkReal(x10282),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10285.valid){
continue;
}
IkReal x10283=((1.0)*(x10285.value));
IkReal x10284=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10283)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10283)));
IkReal gconst4=(x10282*x10284);
IkReal gconst5=((1.0)*r20*x10284);
IkReal x10286=r22*r22;
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x10286))),-1);
if(!x10289.valid){
continue;
}
IkReal x10287=x10289.value;
IkReal x10288=((1.0)*x10287);
j4eval[0]=IKsign((((x10288*(r20*r20*r20*r20)))+x10286+(((2.0)*x10287*(r20*r20)*(r21*r21)))+((x10288*(r21*r21*r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10290=(gconst4*r21);
IkReal x10291=(sj1*sj2);
IkReal x10292=(cj1*cj2);
IkReal x10293=(gconst5*r20);
CheckValue<IkReal> x10294=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x10293*x10293)+(x10290*x10290)+(((-2.0)*x10290*x10293)))),-1);
if(!x10294.valid){
continue;
}
CheckValue<IkReal> x10295 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10292))+((r22*x10291)))),IkReal(((((-1.0)*x10290*x10292))+((x10292*x10293))+((x10290*x10291))+(((-1.0)*x10291*x10293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10294.value)))+(x10295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10296=IKsin(j4);
IkReal x10297=IKcos(j4);
IkReal x10298=(gconst4*r11);
IkReal x10299=((1.0)*cj1);
IkReal x10300=(gconst5*r10);
IkReal x10301=(gconst4*r01);
IkReal x10302=(gconst5*r00);
IkReal x10303=(gconst4*r21);
IkReal x10304=(gconst5*r20);
IkReal x10305=((1.0)*x10297);
IkReal x10306=((1.0)*x10296);
evalcond[0]=(((x10296*x10303))+(((-1.0)*r22*x10305))+(((-1.0)*x10304*x10306)));
evalcond[1]=(((x10296*x10301))+(((-1.0)*r02*x10305))+(((-1.0)*x10302*x10306)));
evalcond[2]=((((-1.0)*r12*x10306))+((x10297*x10300))+(((-1.0)*x10298*x10305)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10305))+(((-1.0)*x10300*x10306))+((x10296*x10298)));
evalcond[4]=(((x10297*x10304))+(((-1.0)*r22*x10306))+((sj1*sj2))+(((-1.0)*cj2*x10299))+(((-1.0)*x10303*x10305)));
evalcond[5]=(((x10297*x10302))+(((-1.0)*sj2*x10299))+(((-1.0)*r02*x10306))+(((-1.0)*x10301*x10305))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10307=(gconst5*r10);
IkReal x10308=(gconst4*r11);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(((((-1.0)*x10308))+x10307)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10307*x10307)+(x10308*x10308)+(((-2.0)*x10307*x10308)))),-1);
if(!x10310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10309.value)+(((1.5707963267949)*(x10310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10311=IKsin(j4);
IkReal x10312=IKcos(j4);
IkReal x10313=(gconst4*r11);
IkReal x10314=((1.0)*cj1);
IkReal x10315=(gconst5*r10);
IkReal x10316=(gconst4*r01);
IkReal x10317=(gconst5*r00);
IkReal x10318=(gconst4*r21);
IkReal x10319=(gconst5*r20);
IkReal x10320=((1.0)*x10312);
IkReal x10321=((1.0)*x10311);
evalcond[0]=((((-1.0)*r22*x10320))+(((-1.0)*x10319*x10321))+((x10311*x10318)));
evalcond[1]=((((-1.0)*r02*x10320))+((x10311*x10316))+(((-1.0)*x10317*x10321)));
evalcond[2]=((((-1.0)*r12*x10321))+((x10312*x10315))+(((-1.0)*x10313*x10320)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10320))+(((-1.0)*x10315*x10321))+((x10311*x10313)));
evalcond[4]=((((-1.0)*x10318*x10320))+(((-1.0)*r22*x10321))+((sj1*sj2))+(((-1.0)*cj2*x10314))+((x10312*x10319)));
evalcond[5]=((((-1.0)*r02*x10321))+(((-1.0)*cj2*sj1))+((x10312*x10317))+(((-1.0)*sj2*x10314))+(((-1.0)*x10316*x10320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10322=((1.0)*gconst5);
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
CheckValue<IkReal> x10324=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10322)))),-1);
if(!x10324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10323.value)+(((1.5707963267949)*(x10324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10325=IKsin(j4);
IkReal x10326=IKcos(j4);
IkReal x10327=(gconst4*r11);
IkReal x10328=((1.0)*cj1);
IkReal x10329=(gconst5*r10);
IkReal x10330=(gconst4*r01);
IkReal x10331=(gconst5*r00);
IkReal x10332=(gconst4*r21);
IkReal x10333=(gconst5*r20);
IkReal x10334=((1.0)*x10326);
IkReal x10335=((1.0)*x10325);
evalcond[0]=(((x10325*x10332))+(((-1.0)*x10333*x10335))+(((-1.0)*r22*x10334)));
evalcond[1]=(((x10325*x10330))+(((-1.0)*x10331*x10335))+(((-1.0)*r02*x10334)));
evalcond[2]=((((-1.0)*r12*x10335))+((x10326*x10329))+(((-1.0)*x10327*x10334)));
evalcond[3]=((1.0)+((x10325*x10327))+(((-1.0)*r12*x10334))+(((-1.0)*x10329*x10335)));
evalcond[4]=(((x10326*x10333))+(((-1.0)*r22*x10335))+(((-1.0)*cj2*x10328))+((sj1*sj2))+(((-1.0)*x10332*x10334)));
evalcond[5]=(((x10326*x10331))+(((-1.0)*sj2*x10328))+(((-1.0)*cj2*sj1))+(((-1.0)*x10330*x10334))+(((-1.0)*r02*x10335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10336=((-1.0)*r21);
IkReal x10337=((-1.0)*px);
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(x10336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
IkReal x10338=((1.0)*(x10339.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10338)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10337);
rxp1_1=(px*r21);
rxp1_2=(r11*x10337);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10338)));
IkReal gconst4=x10336;
IkReal gconst5=((1.0)*r20);
IkReal x10340=((1.0)*r11*r21);
IkReal x10341=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10340))+(((-1.0)*x10341)));
j4eval[1]=(((sj3*x10340))+((sj3*x10341)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10342=((-1.0)*r21);
IkReal x10343=((-1.0)*px);
CheckValue<IkReal> x10345 = IKatan2WithCheck(IkReal(x10342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10345.valid){
continue;
}
IkReal x10344=((1.0)*(x10345.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10344)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10343);
rxp1_1=(px*r21);
rxp1_2=(r11*x10343);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10344)));
IkReal gconst4=x10342;
IkReal gconst5=((1.0)*r20);
IkReal x10346=((1.0)*cj3);
IkReal x10347=(r10*r20);
IkReal x10348=(r11*r21);
j4eval[0]=((((-1.0)*x10347))+(((-1.0)*x10348)));
j4eval[1]=((((-1.0)*x10346*x10347))+(((-1.0)*x10346*x10348)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10349=((-1.0)*r21);
IkReal x10350=((-1.0)*px);
CheckValue<IkReal> x10352 = IKatan2WithCheck(IkReal(x10349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10352.valid){
continue;
}
IkReal x10351=((1.0)*(x10352.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10351)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10350);
rxp1_1=(px*r21);
rxp1_2=(r11*x10350);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10351)));
IkReal gconst4=x10349;
IkReal gconst5=((1.0)*r20);
IkReal x10353=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10353))+((r10*r20*x10353)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10354=((1.0)*r11);
CheckValue<IkReal> x10355=IKPowWithIntegerCheck(r02,-1);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356=IKPowWithIntegerCheck(sj3,-1);
if(!x10356.valid){
continue;
}
CheckValue<IkReal> x10357=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10354))+((gconst5*r10*sj3))),-1);
if(!x10357.valid){
continue;
}
if( IKabs(((x10355.value)*(x10356.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10357.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10354)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10355.value)*(x10356.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10357.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10354))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10355.value)*(x10356.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10357.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10354))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10358=IKsin(j4);
IkReal x10359=IKcos(j4);
IkReal x10360=(gconst5*sj3);
IkReal x10361=(gconst4*r11);
IkReal x10362=(sj1*sj2);
IkReal x10363=((1.0)*gconst5);
IkReal x10364=(cj1*cj2);
IkReal x10365=(gconst4*r21);
IkReal x10366=(cj3*gconst4);
IkReal x10367=(gconst4*sj3);
IkReal x10368=(cj3*gconst5);
IkReal x10369=((1.0)*cj1*sj2);
IkReal x10370=((1.0)*cj2*sj1);
IkReal x10371=(r20*x10359);
IkReal x10372=(r10*x10359);
IkReal x10373=(cj3*x10359);
IkReal x10374=(r02*x10358);
IkReal x10375=((1.0)*sj3*x10359);
IkReal x10376=(x10369+x10370);
evalcond[0]=((-1.0)*r02*x10359);
evalcond[1]=((((-1.0)*r20*x10358*x10363))+((x10358*x10365)));
evalcond[2]=((1.0)+((x10358*x10361))+(((-1.0)*r10*x10358*x10363)));
evalcond[3]=((((-1.0)*sj3*x10374))+(((-1.0)*x10362))+x10364);
evalcond[4]=((((-1.0)*x10376))+((cj3*x10374)));
evalcond[5]=((((-1.0)*x10361*x10375))+((r10*x10366))+((r11*x10368))+((x10360*x10372)));
evalcond[6]=(((r10*x10367))+((r11*x10360))+(((-1.0)*cj3*x10363*x10372))+((x10361*x10373)));
evalcond[7]=(((r21*x10360))+((x10365*x10373))+(((-1.0)*x10364))+x10362+((r20*x10367))+(((-1.0)*cj3*x10363*x10371)));
evalcond[8]=(((r21*x10368))+((r20*x10366))+(((-1.0)*x10365*x10375))+(((-1.0)*x10376))+((x10360*x10371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10377=((1.0)*r10);
IkReal x10378=(gconst4*r11);
CheckValue<IkReal> x10379=IKPowWithIntegerCheck(((((-1.0)*gconst5*x10377))+x10378),-1);
if(!x10379.valid){
continue;
}
CheckValue<IkReal> x10380=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10377))+((cj3*x10378))),-1);
if(!x10380.valid){
continue;
}
if( IKabs(((-1.0)*(x10379.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10380.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10377)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10379.value)))+IKsqr(((x10380.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10377))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10379.value)), ((x10380.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10377))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10381=IKsin(j4);
IkReal x10382=IKcos(j4);
IkReal x10383=(gconst5*sj3);
IkReal x10384=(gconst4*r11);
IkReal x10385=(sj1*sj2);
IkReal x10386=((1.0)*gconst5);
IkReal x10387=(cj1*cj2);
IkReal x10388=(gconst4*r21);
IkReal x10389=(cj3*gconst4);
IkReal x10390=(gconst4*sj3);
IkReal x10391=(cj3*gconst5);
IkReal x10392=((1.0)*cj1*sj2);
IkReal x10393=((1.0)*cj2*sj1);
IkReal x10394=(r20*x10382);
IkReal x10395=(r10*x10382);
IkReal x10396=(cj3*x10382);
IkReal x10397=(r02*x10381);
IkReal x10398=((1.0)*sj3*x10382);
IkReal x10399=(x10392+x10393);
evalcond[0]=((-1.0)*r02*x10382);
evalcond[1]=(((x10381*x10388))+(((-1.0)*r20*x10381*x10386)));
evalcond[2]=((1.0)+((x10381*x10384))+(((-1.0)*r10*x10381*x10386)));
evalcond[3]=((((-1.0)*x10385))+x10387+(((-1.0)*sj3*x10397)));
evalcond[4]=((((-1.0)*x10399))+((cj3*x10397)));
evalcond[5]=(((r11*x10391))+(((-1.0)*x10384*x10398))+((r10*x10389))+((x10383*x10395)));
evalcond[6]=((((-1.0)*cj3*x10386*x10395))+((r11*x10383))+((x10384*x10396))+((r10*x10390)));
evalcond[7]=((((-1.0)*cj3*x10386*x10394))+((r21*x10383))+(((-1.0)*x10387))+x10385+((r20*x10390))+((x10388*x10396)));
evalcond[8]=((((-1.0)*x10399))+((r21*x10391))+((x10383*x10394))+(((-1.0)*x10388*x10398))+((r20*x10389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10400=((1.0)*gconst5);
IkReal x10401=(gconst4*r11);
CheckValue<IkReal> x10402=IKPowWithIntegerCheck(((((-1.0)*r10*x10400))+x10401),-1);
if(!x10402.valid){
continue;
}
CheckValue<IkReal> x10403=IKPowWithIntegerCheck(((((-1.0)*sj3*x10401))+((gconst5*r10*sj3))),-1);
if(!x10403.valid){
continue;
}
if( IKabs(((-1.0)*(x10402.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10403.value)*(((((-1.0)*cj3*r11*x10400))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10402.value)))+IKsqr(((x10403.value)*(((((-1.0)*cj3*r11*x10400))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10402.value)), ((x10403.value)*(((((-1.0)*cj3*r11*x10400))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10404=IKsin(j4);
IkReal x10405=IKcos(j4);
IkReal x10406=(gconst5*sj3);
IkReal x10407=(gconst4*r11);
IkReal x10408=(sj1*sj2);
IkReal x10409=((1.0)*gconst5);
IkReal x10410=(cj1*cj2);
IkReal x10411=(gconst4*r21);
IkReal x10412=(cj3*gconst4);
IkReal x10413=(gconst4*sj3);
IkReal x10414=(cj3*gconst5);
IkReal x10415=((1.0)*cj1*sj2);
IkReal x10416=((1.0)*cj2*sj1);
IkReal x10417=(r20*x10405);
IkReal x10418=(r10*x10405);
IkReal x10419=(cj3*x10405);
IkReal x10420=(r02*x10404);
IkReal x10421=((1.0)*sj3*x10405);
IkReal x10422=(x10415+x10416);
evalcond[0]=((-1.0)*r02*x10405);
evalcond[1]=(((x10404*x10411))+(((-1.0)*r20*x10404*x10409)));
evalcond[2]=((1.0)+((x10404*x10407))+(((-1.0)*r10*x10404*x10409)));
evalcond[3]=((((-1.0)*sj3*x10420))+x10410+(((-1.0)*x10408)));
evalcond[4]=(((cj3*x10420))+(((-1.0)*x10422)));
evalcond[5]=(((x10406*x10418))+((r11*x10414))+((r10*x10412))+(((-1.0)*x10407*x10421)));
evalcond[6]=((((-1.0)*cj3*x10409*x10418))+((x10407*x10419))+((r11*x10406))+((r10*x10413)));
evalcond[7]=((((-1.0)*cj3*x10409*x10417))+((r21*x10406))+((x10411*x10419))+x10408+((r20*x10413))+(((-1.0)*x10410)));
evalcond[8]=(((r21*x10414))+((x10406*x10417))+(((-1.0)*x10422))+((r20*x10412))+(((-1.0)*x10411*x10421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10423=gconst4*gconst4;
IkReal x10424=gconst5*gconst5;
IkReal x10425=(r10*r21);
IkReal x10426=((1.0)*cj3);
IkReal x10427=(r11*r21);
IkReal x10428=(r11*r20);
IkReal x10429=(r22*sj3);
IkReal x10430=(gconst4*r10);
IkReal x10431=((1.0)*sj3);
IkReal x10432=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10424*x10426))+((x10425*x10432))+(((-1.0)*x10423*x10426*x10427))+((x10428*x10432))+(((-1.0)*r12*r22*x10426)))),-1);
if(!x10433.valid){
continue;
}
CheckValue<IkReal> x10434 = IKatan2WithCheck(IkReal((((gconst5*r11*x10429))+((x10429*x10430)))),IkReal((((sj3*x10423*x10425))+(((-1.0)*gconst5*r20*x10430*x10431))+((gconst4*gconst5*sj3*x10427))+(((-1.0)*x10424*x10428*x10431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10433.value)))+(x10434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10435=IKsin(j4);
IkReal x10436=IKcos(j4);
IkReal x10437=(gconst5*sj3);
IkReal x10438=((1.0)*cj1);
IkReal x10439=(gconst4*r11);
IkReal x10440=(sj1*sj2);
IkReal x10441=(gconst5*r10);
IkReal x10442=(gconst4*r01);
IkReal x10443=(gconst4*r21);
IkReal x10444=(gconst5*r00);
IkReal x10445=(cj3*gconst5);
IkReal x10446=(gconst4*sj3);
IkReal x10447=(cj3*gconst4);
IkReal x10448=(sj2*x10438);
IkReal x10449=((1.0)*cj2*sj1);
IkReal x10450=((1.0)*x10436);
IkReal x10451=((1.0)*x10435);
IkReal x10452=(cj3*x10435);
IkReal x10453=(cj3*x10436);
IkReal x10454=(x10448+x10449);
evalcond[0]=((((-1.0)*gconst5*r20*x10451))+(((-1.0)*r22*x10450))+((x10435*x10443)));
evalcond[1]=((((-1.0)*r02*x10450))+(((-1.0)*x10444*x10451))+((x10435*x10442)));
evalcond[2]=((1.0)+(((-1.0)*x10441*x10451))+((x10435*x10439))+(((-1.0)*r12*x10450)));
evalcond[3]=(((x10439*x10453))+((r12*x10452))+(((-1.0)*cj3*x10441*x10450))+((r11*x10437))+((r10*x10446)));
evalcond[4]=(((r10*x10436*x10437))+(((-1.0)*sj3*x10439*x10450))+((r11*x10445))+((r10*x10447))+(((-1.0)*r12*sj3*x10451)));
evalcond[5]=((((-1.0)*cj2*x10438))+((x10443*x10453))+((r22*x10452))+((r20*x10446))+x10440+(((-1.0)*r20*x10445*x10450))+((r21*x10437)));
evalcond[6]=((((-1.0)*x10440))+(((-1.0)*r02*sj3*x10451))+((r00*x10447))+((r01*x10445))+((cj1*cj2))+((r00*x10436*x10437))+(((-1.0)*sj3*x10442*x10450)));
evalcond[7]=(((r01*x10437))+((x10442*x10453))+((r00*x10446))+(((-1.0)*cj3*x10444*x10450))+((r02*x10452))+(((-1.0)*x10454)));
evalcond[8]=(((r20*x10436*x10437))+((r20*x10447))+(((-1.0)*r22*sj3*x10451))+((r21*x10445))+(((-1.0)*sj3*x10443*x10450))+(((-1.0)*x10454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10455=gconst4*gconst4;
IkReal x10456=gconst5*gconst5;
IkReal x10457=(cj3*r22);
IkReal x10458=(gconst5*r11);
IkReal x10459=(r10*sj3);
IkReal x10460=(gconst4*r10);
IkReal x10461=((1.0)*gconst4);
IkReal x10462=((1.0)*cj3);
IkReal x10463=(r20*x10456);
IkReal x10464=(r21*x10455);
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal((((x10457*x10460))+((x10457*x10458)))),IkReal(((((-1.0)*r11*x10462*x10463))+((cj3*gconst4*r21*x10458))+(((-1.0)*gconst5*r20*x10460*x10462))+((cj3*r10*x10464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
CheckValue<IkReal> x10466=IKPowWithIntegerCheck(IKsign((((x10459*x10463))+(((-1.0)*r20*sj3*x10458*x10461))+((r12*r22*sj3))+(((-1.0)*gconst5*r21*x10459*x10461))+((r11*sj3*x10464)))),-1);
if(!x10466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10465.value)+(((1.5707963267949)*(x10466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10467=IKsin(j4);
IkReal x10468=IKcos(j4);
IkReal x10469=(gconst5*sj3);
IkReal x10470=((1.0)*cj1);
IkReal x10471=(gconst4*r11);
IkReal x10472=(sj1*sj2);
IkReal x10473=(gconst5*r10);
IkReal x10474=(gconst4*r01);
IkReal x10475=(gconst4*r21);
IkReal x10476=(gconst5*r00);
IkReal x10477=(cj3*gconst5);
IkReal x10478=(gconst4*sj3);
IkReal x10479=(cj3*gconst4);
IkReal x10480=(sj2*x10470);
IkReal x10481=((1.0)*cj2*sj1);
IkReal x10482=((1.0)*x10468);
IkReal x10483=((1.0)*x10467);
IkReal x10484=(cj3*x10467);
IkReal x10485=(cj3*x10468);
IkReal x10486=(x10480+x10481);
evalcond[0]=((((-1.0)*r22*x10482))+((x10467*x10475))+(((-1.0)*gconst5*r20*x10483)));
evalcond[1]=((((-1.0)*x10476*x10483))+((x10467*x10474))+(((-1.0)*r02*x10482)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10482))+((x10467*x10471))+(((-1.0)*x10473*x10483)));
evalcond[3]=(((r12*x10484))+((r11*x10469))+(((-1.0)*cj3*x10473*x10482))+((x10471*x10485))+((r10*x10478)));
evalcond[4]=(((r10*x10468*x10469))+((r11*x10477))+(((-1.0)*sj3*x10471*x10482))+(((-1.0)*r12*sj3*x10483))+((r10*x10479)));
evalcond[5]=(((r20*x10478))+(((-1.0)*r20*x10477*x10482))+((x10475*x10485))+((r22*x10484))+((r21*x10469))+x10472+(((-1.0)*cj2*x10470)));
evalcond[6]=((((-1.0)*x10472))+((r01*x10477))+(((-1.0)*sj3*x10474*x10482))+((r00*x10479))+((r00*x10468*x10469))+((cj1*cj2))+(((-1.0)*r02*sj3*x10483)));
evalcond[7]=(((x10474*x10485))+((r01*x10469))+((r00*x10478))+(((-1.0)*x10486))+((r02*x10484))+(((-1.0)*cj3*x10476*x10482)));
evalcond[8]=(((r20*x10479))+(((-1.0)*r22*sj3*x10483))+((r20*x10468*x10469))+(((-1.0)*x10486))+((r21*x10477))+(((-1.0)*sj3*x10475*x10482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10487=((1.0)*gconst5);
CheckValue<IkReal> x10488=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10487)))),-1);
if(!x10488.valid){
continue;
}
CheckValue<IkReal> x10489 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10487))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10488.value)))+(x10489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10490=IKsin(j4);
IkReal x10491=IKcos(j4);
IkReal x10492=(gconst5*sj3);
IkReal x10493=((1.0)*cj1);
IkReal x10494=(gconst4*r11);
IkReal x10495=(sj1*sj2);
IkReal x10496=(gconst5*r10);
IkReal x10497=(gconst4*r01);
IkReal x10498=(gconst4*r21);
IkReal x10499=(gconst5*r00);
IkReal x10500=(cj3*gconst5);
IkReal x10501=(gconst4*sj3);
IkReal x10502=(cj3*gconst4);
IkReal x10503=(sj2*x10493);
IkReal x10504=((1.0)*cj2*sj1);
IkReal x10505=((1.0)*x10491);
IkReal x10506=((1.0)*x10490);
IkReal x10507=(cj3*x10490);
IkReal x10508=(cj3*x10491);
IkReal x10509=(x10503+x10504);
evalcond[0]=((((-1.0)*r22*x10505))+(((-1.0)*gconst5*r20*x10506))+((x10490*x10498)));
evalcond[1]=(((x10490*x10497))+(((-1.0)*r02*x10505))+(((-1.0)*x10499*x10506)));
evalcond[2]=((1.0)+(((-1.0)*x10496*x10506))+(((-1.0)*r12*x10505))+((x10490*x10494)));
evalcond[3]=((((-1.0)*cj3*x10496*x10505))+((r10*x10501))+((r11*x10492))+((x10494*x10508))+((r12*x10507)));
evalcond[4]=(((r10*x10502))+(((-1.0)*r12*sj3*x10506))+((r11*x10500))+(((-1.0)*sj3*x10494*x10505))+((r10*x10491*x10492)));
evalcond[5]=(((r20*x10501))+((x10498*x10508))+(((-1.0)*r20*x10500*x10505))+((r21*x10492))+((r22*x10507))+(((-1.0)*cj2*x10493))+x10495);
evalcond[6]=((((-1.0)*sj3*x10497*x10505))+((r01*x10500))+((r00*x10502))+((r00*x10491*x10492))+(((-1.0)*x10495))+(((-1.0)*r02*sj3*x10506))+((cj1*cj2)));
evalcond[7]=(((r01*x10492))+((r00*x10501))+(((-1.0)*x10509))+((x10497*x10508))+(((-1.0)*cj3*x10499*x10505))+((r02*x10507)));
evalcond[8]=(((r20*x10491*x10492))+((r20*x10502))+(((-1.0)*r22*sj3*x10506))+(((-1.0)*x10509))+((r21*x10500))+(((-1.0)*sj3*x10498*x10505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10510=((-1.0)*r21);
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(x10510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
IkReal x10511=((1.0)*(x10513.value));
IkReal x10512=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10511)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10511)));
IkReal gconst4=(x10510*x10512);
IkReal gconst5=((1.0)*r20*x10512);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10514=((-1.0)*r21);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(x10514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
IkReal x10515=((1.0)*(x10517.value));
IkReal x10516=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10515)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10515)));
IkReal gconst4=(x10514*x10516);
IkReal gconst5=((1.0)*r20*x10516);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10518=((-1.0)*r21);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(x10518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=(x10518*x10520);
IkReal gconst5=((1.0)*r20*x10520);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10522=((-1.0)*r21);
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(x10522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
IkReal x10523=((1.0)*(x10525.value));
IkReal x10524=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10523)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10523)));
IkReal gconst4=(x10522*x10524);
IkReal gconst5=((1.0)*r20*x10524);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10526=((-1.0)*r21);
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal(x10526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
IkReal x10527=((1.0)*(x10529.value));
IkReal x10528=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10527)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10527)));
IkReal gconst4=(x10526*x10528);
IkReal gconst5=((1.0)*r20*x10528);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10530=((-1.0)*r21);
CheckValue<IkReal> x10533 = IKatan2WithCheck(IkReal(x10530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10533.valid){
continue;
}
IkReal x10531=((1.0)*(x10533.value));
IkReal x10532=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10531)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10531)));
IkReal gconst4=(x10530*x10532);
IkReal gconst5=((1.0)*r20*x10532);
IkReal x10534=r22*r22;
IkReal x10535=(cj1*cj2*r12);
CheckValue<IkReal> x10540=IKPowWithIntegerCheck(((-1.0)+x10534),-1);
if(!x10540.valid){
continue;
}
IkReal x10536=x10540.value;
IkReal x10537=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x10534)))) < -0.00001)
continue;
IkReal x10538=IKsqrt(((1.0)+(((-1.0)*x10534))));
IkReal x10539=(r22*x10536*x10538);
j4eval[0]=((IKabs(((((-1.0)*x10537*x10539))+((x10535*x10539)))))+(IKabs(((((-1.0)*x10537))+x10535))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10541=((1.0)*gconst4);
IkReal x10542=((1.0)*gconst5);
IkReal x10543=(sj1*sj2);
IkReal x10544=(cj1*cj2);
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x10541*x10544))+((gconst4*r11*x10543))+((gconst5*r10*x10544))+(((-1.0)*r10*x10542*x10543)))),IkReal((((r12*x10544))+(((-1.0)*r12*x10543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10541))+(((-1.0)*r01*x10542)))),-1);
if(!x10546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10545.value)+(((1.5707963267949)*(x10546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10547=IKcos(j4);
IkReal x10548=IKsin(j4);
IkReal x10549=(gconst4*r11);
IkReal x10550=(gconst5*r10);
IkReal x10551=(gconst5*r00);
IkReal x10552=(gconst5*r20);
IkReal x10553=((1.0)*x10547);
IkReal x10554=(gconst4*x10547);
IkReal x10555=((1.0)*x10548);
IkReal x10556=(gconst4*x10548);
evalcond[0]=(((r12*x10548))+(((-1.0)*x10550*x10553))+((x10547*x10549)));
evalcond[1]=(((r21*x10556))+(((-1.0)*x10552*x10555))+(((-1.0)*r22*x10553)));
evalcond[2]=((((-1.0)*x10551*x10555))+(((-1.0)*r02*x10553))+((r01*x10556)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10553))+((x10548*x10549))+(((-1.0)*x10550*x10555)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10551*x10553))+((cj1*sj2))+((r02*x10548))+((r01*x10554)));
evalcond[5]=(((r22*x10548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10554))+(((-1.0)*x10552*x10553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10557=(gconst5*r10);
IkReal x10558=(gconst4*r11);
CheckValue<IkReal> x10559=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10557*x10557)+(((-2.0)*x10557*x10558))+(x10558*x10558))),-1);
if(!x10559.valid){
continue;
}
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(((((-1.0)*x10557))+x10558)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10559.value)))+(x10560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10561=IKcos(j4);
IkReal x10562=IKsin(j4);
IkReal x10563=(gconst4*r11);
IkReal x10564=(gconst5*r10);
IkReal x10565=(gconst5*r00);
IkReal x10566=(gconst5*r20);
IkReal x10567=((1.0)*x10561);
IkReal x10568=(gconst4*x10561);
IkReal x10569=((1.0)*x10562);
IkReal x10570=(gconst4*x10562);
evalcond[0]=(((x10561*x10563))+(((-1.0)*x10564*x10567))+((r12*x10562)));
evalcond[1]=((((-1.0)*r22*x10567))+((r21*x10570))+(((-1.0)*x10566*x10569)));
evalcond[2]=(((r01*x10570))+(((-1.0)*x10565*x10569))+(((-1.0)*r02*x10567)));
evalcond[3]=((-1.0)+(((-1.0)*x10564*x10569))+(((-1.0)*r12*x10567))+((x10562*x10563)));
evalcond[4]=(((r01*x10568))+((cj2*sj1))+((cj1*sj2))+((r02*x10562))+(((-1.0)*x10565*x10567)));
evalcond[5]=(((r21*x10568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10562))+(((-1.0)*x10566*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10571=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10571.valid){
continue;
}
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10571.value)))+(x10572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10573=IKcos(j4);
IkReal x10574=IKsin(j4);
IkReal x10575=(gconst4*r11);
IkReal x10576=(gconst5*r10);
IkReal x10577=(gconst5*r00);
IkReal x10578=(gconst5*r20);
IkReal x10579=((1.0)*x10573);
IkReal x10580=(gconst4*x10573);
IkReal x10581=((1.0)*x10574);
IkReal x10582=(gconst4*x10574);
evalcond[0]=((((-1.0)*x10576*x10579))+((x10573*x10575))+((r12*x10574)));
evalcond[1]=((((-1.0)*x10578*x10581))+(((-1.0)*r22*x10579))+((r21*x10582)));
evalcond[2]=((((-1.0)*x10577*x10581))+(((-1.0)*r02*x10579))+((r01*x10582)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10579))+((x10574*x10575))+(((-1.0)*x10576*x10581)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10577*x10579))+((r02*x10574))+((r01*x10580)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10580))+((r22*x10574))+(((-1.0)*x10578*x10579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10583=((-1.0)*r21);
CheckValue<IkReal> x10586 = IKatan2WithCheck(IkReal(x10583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10586.valid){
continue;
}
IkReal x10584=((1.0)*(x10586.value));
IkReal x10585=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10584)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10584)));
IkReal gconst4=(x10583*x10585);
IkReal gconst5=((1.0)*r20*x10585);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10587=((-1.0)*r21);
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal(x10587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
IkReal x10588=((1.0)*(x10590.value));
IkReal x10589=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10588)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10588)));
IkReal gconst4=(x10587*x10589);
IkReal gconst5=((1.0)*r20*x10589);
IkReal x10591=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(x10591,-1);
if(!x10595.valid){
continue;
}
IkReal x10592=x10595.value;
IkReal x10593=((1.0)*x10592);
IkReal x10594=((((-1.0)*x10593*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10592))+(((-1.0)*x10593*(r10*r10)*(r20*r20))));
j4eval[0]=x10594;
j4eval[1]=r12;
j4eval[2]=x10591;
j4eval[3]=IKsign(x10594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10596=((-1.0)*r21);
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(x10596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
IkReal x10597=((1.0)*(x10599.value));
IkReal x10598=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10597)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10597)));
IkReal gconst4=(x10596*x10598);
IkReal gconst5=((1.0)*r20*x10598);
IkReal x10600=r22*r22;
IkReal x10601=(cj1*r02*sj2);
IkReal x10602=(cj2*r02*sj1);
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(((-1.0)+x10600),-1);
if(!x10606.valid){
continue;
}
IkReal x10603=x10606.value;
if((((1.0)+(((-1.0)*x10600)))) < -0.00001)
continue;
IkReal x10604=IKsqrt(((1.0)+(((-1.0)*x10600))));
IkReal x10605=((1.0)*r22*x10603*x10604);
j4eval[0]=((IKabs((x10601+x10602)))+(IKabs(((((-1.0)*x10602*x10605))+(((-1.0)*x10601*x10605))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10607=(gconst4*r01);
IkReal x10608=(cj1*sj2);
IkReal x10609=(cj2*sj1);
IkReal x10610=(gconst5*r00);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal((((r02*x10609))+((r02*x10608)))),IkReal((((x10607*x10608))+((x10607*x10609))+(((-1.0)*x10608*x10610))+(((-1.0)*x10609*x10610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign(((x10607*x10607)+(x10610*x10610)+(r02*r02)+(((-2.0)*x10607*x10610)))),-1);
if(!x10612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10611.value)+(((1.5707963267949)*(x10612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10613=IKsin(j4);
IkReal x10614=IKcos(j4);
IkReal x10615=(gconst4*r11);
IkReal x10616=(gconst5*r10);
IkReal x10617=(gconst4*r01);
IkReal x10618=(gconst5*r00);
IkReal x10619=(gconst4*r21);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10614);
IkReal x10622=((1.0)*x10613);
evalcond[0]=(((x10613*x10619))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10622)));
evalcond[1]=((((-1.0)*r02*x10621))+(((-1.0)*x10618*x10622))+((x10613*x10617)));
evalcond[2]=(((x10614*x10616))+(((-1.0)*r12*x10622))+(((-1.0)*x10615*x10621)));
evalcond[3]=((-1.0)+((x10613*x10615))+(((-1.0)*r12*x10621))+(((-1.0)*x10616*x10622)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10622))+((x10614*x10618))+(((-1.0)*x10617*x10621))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10619*x10621))+(((-1.0)*r22*x10622))+((x10614*x10620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10623=(gconst5*r10);
IkReal x10624=(gconst4*r11);
CheckValue<IkReal> x10625=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x10623*x10624))+(((-1.0)*(x10623*x10623)))+(((-1.0)*(x10624*x10624))))),-1);
if(!x10625.valid){
continue;
}
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(((((-1.0)*x10624))+x10623)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10625.value)))+(x10626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10627=IKsin(j4);
IkReal x10628=IKcos(j4);
IkReal x10629=(gconst4*r11);
IkReal x10630=(gconst5*r10);
IkReal x10631=(gconst4*r01);
IkReal x10632=(gconst5*r00);
IkReal x10633=(gconst4*r21);
IkReal x10634=(gconst5*r20);
IkReal x10635=((1.0)*x10628);
IkReal x10636=((1.0)*x10627);
evalcond[0]=((((-1.0)*x10634*x10636))+((x10627*x10633))+(((-1.0)*r22*x10635)));
evalcond[1]=((((-1.0)*r02*x10635))+((x10627*x10631))+(((-1.0)*x10632*x10636)));
evalcond[2]=(((x10628*x10630))+(((-1.0)*r12*x10636))+(((-1.0)*x10629*x10635)));
evalcond[3]=((-1.0)+((x10627*x10629))+(((-1.0)*r12*x10635))+(((-1.0)*x10630*x10636)));
evalcond[4]=((((-1.0)*r02*x10636))+((cj2*sj1))+((x10628*x10632))+((cj1*sj2))+(((-1.0)*x10631*x10635)));
evalcond[5]=(((x10628*x10634))+(((-1.0)*x10633*x10635))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10637=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10637.valid){
continue;
}
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10637.value)))+(x10638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10639=IKsin(j4);
IkReal x10640=IKcos(j4);
IkReal x10641=(gconst4*r11);
IkReal x10642=(gconst5*r10);
IkReal x10643=(gconst4*r01);
IkReal x10644=(gconst5*r00);
IkReal x10645=(gconst4*r21);
IkReal x10646=(gconst5*r20);
IkReal x10647=((1.0)*x10640);
IkReal x10648=((1.0)*x10639);
evalcond[0]=(((x10639*x10645))+(((-1.0)*r22*x10647))+(((-1.0)*x10646*x10648)));
evalcond[1]=((((-1.0)*r02*x10647))+((x10639*x10643))+(((-1.0)*x10644*x10648)));
evalcond[2]=(((x10640*x10642))+(((-1.0)*x10641*x10647))+(((-1.0)*r12*x10648)));
evalcond[3]=((-1.0)+((x10639*x10641))+(((-1.0)*r12*x10647))+(((-1.0)*x10642*x10648)));
evalcond[4]=(((x10640*x10644))+((cj2*sj1))+(((-1.0)*r02*x10648))+((cj1*sj2))+(((-1.0)*x10643*x10647)));
evalcond[5]=(((x10640*x10646))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10648))+(((-1.0)*x10645*x10647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10649=((-1.0)*r21);
IkReal x10650=((-1.0)*px);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal(x10649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
IkReal x10651=((1.0)*(x10652.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10651)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10650);
rxp1_1=(px*r21);
rxp1_2=(r11*x10650);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10651)));
IkReal gconst4=x10649;
IkReal gconst5=((1.0)*r20);
IkReal x10653=((1.0)*r11*r21);
IkReal x10654=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10653))+(((-1.0)*x10654)));
j4eval[1]=(((sj3*x10653))+((sj3*x10654)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10655=((-1.0)*r21);
IkReal x10656=((-1.0)*px);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(x10655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10657=((1.0)*(x10658.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10657)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10656);
rxp1_1=(px*r21);
rxp1_2=(r11*x10656);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10657)));
IkReal gconst4=x10655;
IkReal gconst5=((1.0)*r20);
IkReal x10659=((1.0)*cj3);
IkReal x10660=(r10*r20);
IkReal x10661=(r11*r21);
j4eval[0]=((((-1.0)*x10660))+(((-1.0)*x10661)));
j4eval[1]=((((-1.0)*x10659*x10661))+(((-1.0)*x10659*x10660)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10662=((-1.0)*r21);
IkReal x10663=((-1.0)*px);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(x10662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
IkReal x10664=((1.0)*(x10665.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10664)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10663);
rxp1_1=(px*r21);
rxp1_2=(r11*x10663);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10664)));
IkReal gconst4=x10662;
IkReal gconst5=((1.0)*r20);
IkReal x10666=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x10666))+((r10*r20*x10666)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10667=((1.0)*r11);
CheckValue<IkReal> x10668=IKPowWithIntegerCheck(cj3,-1);
if(!x10668.valid){
continue;
}
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(r02,-1);
if(!x10669.valid){
continue;
}
CheckValue<IkReal> x10670=IKPowWithIntegerCheck(((((-1.0)*gconst4*sj3*x10667))+((gconst5*r10*sj3))),-1);
if(!x10670.valid){
continue;
}
if( IKabs(((x10668.value)*(x10669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10670.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10667)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10668.value)*(x10669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x10670.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10667))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10668.value)*(x10669.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x10670.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*gconst5*x10667))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10671=IKsin(j4);
IkReal x10672=IKcos(j4);
IkReal x10673=(sj1*sj2);
IkReal x10674=(gconst5*sj3);
IkReal x10675=(gconst4*r11);
IkReal x10676=((1.0)*gconst5);
IkReal x10677=((1.0)*cj2);
IkReal x10678=(cj1*sj2);
IkReal x10679=(gconst4*r21);
IkReal x10680=(cj3*gconst4);
IkReal x10681=(gconst4*sj3);
IkReal x10682=(cj3*gconst5);
IkReal x10683=(cj1*x10677);
IkReal x10684=(r20*x10672);
IkReal x10685=(r10*x10672);
IkReal x10686=(cj3*x10672);
IkReal x10687=(r02*x10671);
IkReal x10688=((1.0)*sj3*x10672);
evalcond[0]=((-1.0)*r02*x10672);
evalcond[1]=(((cj2*sj1))+((cj3*x10687))+x10678);
evalcond[2]=((((-1.0)*r20*x10671*x10676))+((x10671*x10679)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10671*x10676))+((x10671*x10675)));
evalcond[4]=((((-1.0)*x10683))+(((-1.0)*sj3*x10687))+x10673);
evalcond[5]=(((x10674*x10685))+(((-1.0)*x10675*x10688))+((r11*x10682))+((r10*x10680)));
evalcond[6]=(((r11*x10674))+(((-1.0)*cj3*x10676*x10685))+((r10*x10681))+((x10675*x10686)));
evalcond[7]=(((r20*x10681))+(((-1.0)*x10683))+(((-1.0)*cj3*x10676*x10684))+((x10679*x10686))+((r21*x10674))+x10673);
evalcond[8]=(((x10674*x10684))+(((-1.0)*sj1*x10677))+(((-1.0)*x10679*x10688))+((r20*x10680))+(((-1.0)*x10678))+((r21*x10682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10689=((1.0)*sj3);
IkReal x10690=(gconst4*r11);
IkReal x10691=((1.0)*gconst5*r10);
CheckValue<IkReal> x10692=IKPowWithIntegerCheck(((((-1.0)*x10691))+x10690),-1);
if(!x10692.valid){
continue;
}
CheckValue<IkReal> x10693=IKPowWithIntegerCheck((((cj3*x10690))+(((-1.0)*cj3*x10691))),-1);
if(!x10693.valid){
continue;
}
if( IKabs(x10692.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10693.value)*(((((-1.0)*gconst4*r10*x10689))+(((-1.0)*gconst5*r11*x10689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10692.value)+IKsqr(((x10693.value)*(((((-1.0)*gconst4*r10*x10689))+(((-1.0)*gconst5*r11*x10689))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10692.value, ((x10693.value)*(((((-1.0)*gconst4*r10*x10689))+(((-1.0)*gconst5*r11*x10689))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10694=IKsin(j4);
IkReal x10695=IKcos(j4);
IkReal x10696=(sj1*sj2);
IkReal x10697=(gconst5*sj3);
IkReal x10698=(gconst4*r11);
IkReal x10699=((1.0)*gconst5);
IkReal x10700=((1.0)*cj2);
IkReal x10701=(cj1*sj2);
IkReal x10702=(gconst4*r21);
IkReal x10703=(cj3*gconst4);
IkReal x10704=(gconst4*sj3);
IkReal x10705=(cj3*gconst5);
IkReal x10706=(cj1*x10700);
IkReal x10707=(r20*x10695);
IkReal x10708=(r10*x10695);
IkReal x10709=(cj3*x10695);
IkReal x10710=(r02*x10694);
IkReal x10711=((1.0)*sj3*x10695);
evalcond[0]=((-1.0)*r02*x10695);
evalcond[1]=(((cj2*sj1))+((cj3*x10710))+x10701);
evalcond[2]=((((-1.0)*r20*x10694*x10699))+((x10694*x10702)));
evalcond[3]=((-1.0)+((x10694*x10698))+(((-1.0)*r10*x10694*x10699)));
evalcond[4]=((((-1.0)*sj3*x10710))+x10696+(((-1.0)*x10706)));
evalcond[5]=((((-1.0)*x10698*x10711))+((r11*x10705))+((r10*x10703))+((x10697*x10708)));
evalcond[6]=(((r11*x10697))+((x10698*x10709))+((r10*x10704))+(((-1.0)*cj3*x10699*x10708)));
evalcond[7]=(((r21*x10697))+((x10702*x10709))+(((-1.0)*cj3*x10699*x10707))+((r20*x10704))+x10696+(((-1.0)*x10706)));
evalcond[8]=((((-1.0)*sj1*x10700))+(((-1.0)*x10701))+((x10697*x10707))+(((-1.0)*x10702*x10711))+((r21*x10705))+((r20*x10703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10712=((1.0)*gconst5);
IkReal x10713=(gconst4*r11);
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(((((-1.0)*r10*x10712))+x10713),-1);
if(!x10714.valid){
continue;
}
CheckValue<IkReal> x10715=IKPowWithIntegerCheck(((((-1.0)*sj3*x10713))+((gconst5*r10*sj3))),-1);
if(!x10715.valid){
continue;
}
if( IKabs(x10714.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10714.value)+IKsqr(((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10714.value, ((x10715.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10712))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10716=IKsin(j4);
IkReal x10717=IKcos(j4);
IkReal x10718=(sj1*sj2);
IkReal x10719=(gconst5*sj3);
IkReal x10720=(gconst4*r11);
IkReal x10721=((1.0)*gconst5);
IkReal x10722=((1.0)*cj2);
IkReal x10723=(cj1*sj2);
IkReal x10724=(gconst4*r21);
IkReal x10725=(cj3*gconst4);
IkReal x10726=(gconst4*sj3);
IkReal x10727=(cj3*gconst5);
IkReal x10728=(cj1*x10722);
IkReal x10729=(r20*x10717);
IkReal x10730=(r10*x10717);
IkReal x10731=(cj3*x10717);
IkReal x10732=(r02*x10716);
IkReal x10733=((1.0)*sj3*x10717);
evalcond[0]=((-1.0)*r02*x10717);
evalcond[1]=(((cj2*sj1))+x10723+((cj3*x10732)));
evalcond[2]=(((x10716*x10724))+(((-1.0)*r20*x10716*x10721)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10716*x10721))+((x10716*x10720)));
evalcond[4]=((((-1.0)*sj3*x10732))+(((-1.0)*x10728))+x10718);
evalcond[5]=(((r10*x10725))+(((-1.0)*x10720*x10733))+((x10719*x10730))+((r11*x10727)));
evalcond[6]=(((r10*x10726))+((r11*x10719))+((x10720*x10731))+(((-1.0)*cj3*x10721*x10730)));
evalcond[7]=(((x10724*x10731))+((r21*x10719))+((r20*x10726))+(((-1.0)*cj3*x10721*x10729))+(((-1.0)*x10728))+x10718);
evalcond[8]=((((-1.0)*x10724*x10733))+((x10719*x10729))+((r21*x10727))+(((-1.0)*x10723))+((r20*x10725))+(((-1.0)*sj1*x10722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10734=gconst4*gconst4;
IkReal x10735=gconst5*gconst5;
IkReal x10736=(r10*r21);
IkReal x10737=((1.0)*cj3);
IkReal x10738=(r11*r21);
IkReal x10739=(r11*r20);
IkReal x10740=(r22*sj3);
IkReal x10741=(gconst4*r10);
IkReal x10742=((1.0)*sj3);
IkReal x10743=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal((((gconst5*r11*x10740))+((x10740*x10741)))),IkReal((((sj3*x10734*x10736))+(((-1.0)*gconst5*r20*x10741*x10742))+((gconst4*gconst5*sj3*x10738))+(((-1.0)*x10735*x10739*x10742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(IKsign((((x10736*x10743))+(((-1.0)*r10*r20*x10735*x10737))+(((-1.0)*x10734*x10737*x10738))+((x10739*x10743))+(((-1.0)*r12*r22*x10737)))),-1);
if(!x10745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10744.value)+(((1.5707963267949)*(x10745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10746=IKsin(j4);
IkReal x10747=IKcos(j4);
IkReal x10748=(sj1*sj2);
IkReal x10749=(gconst5*sj3);
IkReal x10750=(gconst4*r11);
IkReal x10751=(gconst5*r10);
IkReal x10752=((1.0)*cj1);
IkReal x10753=(gconst4*r01);
IkReal x10754=(cj2*sj1);
IkReal x10755=(gconst5*r00);
IkReal x10756=(gconst4*sj3);
IkReal x10757=(cj3*gconst5);
IkReal x10758=(cj3*gconst4);
IkReal x10759=(gconst4*r21);
IkReal x10760=(cj2*x10752);
IkReal x10761=((1.0)*x10747);
IkReal x10762=((1.0)*x10746);
IkReal x10763=(cj3*x10746);
IkReal x10764=(cj3*x10747);
evalcond[0]=(((x10746*x10759))+(((-1.0)*gconst5*r20*x10762))+(((-1.0)*r22*x10761)));
evalcond[1]=(((x10746*x10753))+(((-1.0)*x10755*x10762))+(((-1.0)*r02*x10761)));
evalcond[2]=((-1.0)+(((-1.0)*x10751*x10762))+((x10746*x10750))+(((-1.0)*r12*x10761)));
evalcond[3]=(((x10750*x10764))+((r12*x10763))+((r10*x10756))+(((-1.0)*cj3*x10751*x10761))+((r11*x10749)));
evalcond[4]=(((r10*x10758))+((r10*x10747*x10749))+(((-1.0)*sj3*x10750*x10761))+((r11*x10757))+(((-1.0)*r12*sj3*x10762)));
evalcond[5]=(((cj1*sj2))+x10754+(((-1.0)*cj3*x10755*x10761))+((r02*x10763))+((x10753*x10764))+((r01*x10749))+((r00*x10756)));
evalcond[6]=((((-1.0)*r20*x10757*x10761))+(((-1.0)*x10760))+((r20*x10756))+((r22*x10763))+((r21*x10747*x10758))+x10748+((r21*x10749)));
evalcond[7]=((((-1.0)*sj3*x10753*x10761))+(((-1.0)*r02*sj3*x10762))+(((-1.0)*x10760))+x10748+((r00*x10747*x10749))+((r01*x10757))+((r00*x10758)));
evalcond[8]=((((-1.0)*r21*x10756*x10761))+((r20*x10758))+(((-1.0)*r22*sj3*x10762))+((r20*x10747*x10749))+((r21*x10757))+(((-1.0)*sj2*x10752))+(((-1.0)*x10754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10765=gconst4*gconst4;
IkReal x10766=gconst5*gconst5;
IkReal x10767=(cj3*r22);
IkReal x10768=(gconst5*r11);
IkReal x10769=(r10*sj3);
IkReal x10770=(gconst4*r10);
IkReal x10771=((1.0)*gconst4);
IkReal x10772=((1.0)*cj3);
IkReal x10773=(r20*x10766);
IkReal x10774=(r21*x10765);
CheckValue<IkReal> x10775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj3*x10768*x10771))+(((-1.0)*gconst5*r21*x10769*x10771))+((r12*r22*sj3))+((x10769*x10773))+((r11*sj3*x10774)))),-1);
if(!x10775.valid){
continue;
}
CheckValue<IkReal> x10776 = IKatan2WithCheck(IkReal((((x10767*x10768))+((x10767*x10770)))),IkReal((((cj3*gconst4*r21*x10768))+((cj3*r10*x10774))+(((-1.0)*gconst5*r20*x10770*x10772))+(((-1.0)*r11*x10772*x10773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10775.value)))+(x10776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10777=IKsin(j4);
IkReal x10778=IKcos(j4);
IkReal x10779=(sj1*sj2);
IkReal x10780=(gconst5*sj3);
IkReal x10781=(gconst4*r11);
IkReal x10782=(gconst5*r10);
IkReal x10783=((1.0)*cj1);
IkReal x10784=(gconst4*r01);
IkReal x10785=(cj2*sj1);
IkReal x10786=(gconst5*r00);
IkReal x10787=(gconst4*sj3);
IkReal x10788=(cj3*gconst5);
IkReal x10789=(cj3*gconst4);
IkReal x10790=(gconst4*r21);
IkReal x10791=(cj2*x10783);
IkReal x10792=((1.0)*x10778);
IkReal x10793=((1.0)*x10777);
IkReal x10794=(cj3*x10777);
IkReal x10795=(cj3*x10778);
evalcond[0]=(((x10777*x10790))+(((-1.0)*gconst5*r20*x10793))+(((-1.0)*r22*x10792)));
evalcond[1]=((((-1.0)*r02*x10792))+((x10777*x10784))+(((-1.0)*x10786*x10793)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10792))+((x10777*x10781))+(((-1.0)*x10782*x10793)));
evalcond[3]=(((r11*x10780))+(((-1.0)*cj3*x10782*x10792))+((r12*x10794))+((x10781*x10795))+((r10*x10787)));
evalcond[4]=(((r11*x10788))+(((-1.0)*sj3*x10781*x10792))+((r10*x10778*x10780))+(((-1.0)*r12*sj3*x10793))+((r10*x10789)));
evalcond[5]=(((r02*x10794))+((cj1*sj2))+((x10784*x10795))+((r01*x10780))+((r00*x10787))+x10785+(((-1.0)*cj3*x10786*x10792)));
evalcond[6]=(((r21*x10780))+((r20*x10787))+(((-1.0)*x10791))+x10779+(((-1.0)*r20*x10788*x10792))+((r22*x10794))+((r21*x10778*x10789)));
evalcond[7]=((((-1.0)*r02*sj3*x10793))+(((-1.0)*sj3*x10784*x10792))+(((-1.0)*x10791))+((r01*x10788))+((r00*x10789))+x10779+((r00*x10778*x10780)));
evalcond[8]=(((r20*x10778*x10780))+((r21*x10788))+(((-1.0)*r21*x10787*x10792))+((r20*x10789))+(((-1.0)*r22*sj3*x10793))+(((-1.0)*x10785))+(((-1.0)*sj2*x10783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10796=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10796.valid){
continue;
}
CheckValue<IkReal> x10797 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10796.value)))+(x10797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10798=IKsin(j4);
IkReal x10799=IKcos(j4);
IkReal x10800=(sj1*sj2);
IkReal x10801=(gconst5*sj3);
IkReal x10802=(gconst4*r11);
IkReal x10803=(gconst5*r10);
IkReal x10804=((1.0)*cj1);
IkReal x10805=(gconst4*r01);
IkReal x10806=(cj2*sj1);
IkReal x10807=(gconst5*r00);
IkReal x10808=(gconst4*sj3);
IkReal x10809=(cj3*gconst5);
IkReal x10810=(cj3*gconst4);
IkReal x10811=(gconst4*r21);
IkReal x10812=(cj2*x10804);
IkReal x10813=((1.0)*x10799);
IkReal x10814=((1.0)*x10798);
IkReal x10815=(cj3*x10798);
IkReal x10816=(cj3*x10799);
evalcond[0]=(((x10798*x10811))+(((-1.0)*gconst5*r20*x10814))+(((-1.0)*r22*x10813)));
evalcond[1]=((((-1.0)*r02*x10813))+((x10798*x10805))+(((-1.0)*x10807*x10814)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10813))+((x10798*x10802))+(((-1.0)*x10803*x10814)));
evalcond[3]=(((r10*x10808))+(((-1.0)*cj3*x10803*x10813))+((r11*x10801))+((x10802*x10816))+((r12*x10815)));
evalcond[4]=((((-1.0)*sj3*x10802*x10813))+((r11*x10809))+((r10*x10810))+(((-1.0)*r12*sj3*x10814))+((r10*x10799*x10801)));
evalcond[5]=(((x10805*x10816))+((r02*x10815))+((cj1*sj2))+((r01*x10801))+((r00*x10808))+(((-1.0)*cj3*x10807*x10813))+x10806);
evalcond[6]=(((r22*x10815))+((r20*x10808))+((r21*x10801))+((r21*x10799*x10810))+(((-1.0)*x10812))+(((-1.0)*r20*x10809*x10813))+x10800);
evalcond[7]=((((-1.0)*sj3*x10805*x10813))+((r00*x10799*x10801))+((r01*x10809))+(((-1.0)*r02*sj3*x10814))+(((-1.0)*x10812))+((r00*x10810))+x10800);
evalcond[8]=((((-1.0)*sj2*x10804))+(((-1.0)*r22*sj3*x10814))+((r20*x10810))+((r21*x10809))+(((-1.0)*x10806))+((r20*x10799*x10801))+(((-1.0)*r21*x10808*x10813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10817=((-1.0)*r21);
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal(x10817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
IkReal x10818=((1.0)*(x10820.value));
IkReal x10819=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10818)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10818)));
IkReal gconst4=(x10817*x10819);
IkReal gconst5=((1.0)*r20*x10819);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10821=((-1.0)*r21);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(x10821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
IkReal x10822=((1.0)*(x10824.value));
IkReal x10823=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10822)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10822)));
IkReal gconst4=(x10821*x10823);
IkReal gconst5=((1.0)*r20*x10823);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10825=((-1.0)*r21);
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(x10825),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
IkReal x10826=((1.0)*(x10828.value));
IkReal x10827=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10826)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10826)));
IkReal gconst4=(x10825*x10827);
IkReal gconst5=((1.0)*r20*x10827);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10829=((-1.0)*r21);
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(x10829),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
IkReal x10830=((1.0)*(x10832.value));
IkReal x10831=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10830)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10830)));
IkReal gconst4=(x10829*x10831);
IkReal gconst5=((1.0)*r20*x10831);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10833=((-1.0)*r21);
CheckValue<IkReal> x10836 = IKatan2WithCheck(IkReal(x10833),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10836.valid){
continue;
}
IkReal x10834=((1.0)*(x10836.value));
IkReal x10835=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10834)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10834)));
IkReal gconst4=(x10833*x10835);
IkReal gconst5=((1.0)*r20*x10835);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10837=((-1.0)*r21);
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(x10837),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
IkReal x10838=((1.0)*(x10840.value));
IkReal x10839=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10838)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10838)));
IkReal gconst4=(x10837*x10839);
IkReal gconst5=((1.0)*r20*x10839);
IkReal x10841=r22*r22;
IkReal x10842=(cj1*cj2*r02);
CheckValue<IkReal> x10847=IKPowWithIntegerCheck(((-1.0)+x10841),-1);
if(!x10847.valid){
continue;
}
IkReal x10843=x10847.value;
IkReal x10844=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x10841)))) < -0.00001)
continue;
IkReal x10845=IKsqrt(((1.0)+(((-1.0)*x10841))));
IkReal x10846=(r22*x10843*x10845);
j4eval[0]=((IKabs(((((-1.0)*x10844))+x10842)))+(IKabs(((((-1.0)*x10844*x10846))+((x10842*x10846))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10848=(gconst5*r00);
IkReal x10849=(cj1*cj2);
IkReal x10850=(gconst4*r01);
IkReal x10851=((1.0)*sj1*sj2);
CheckValue<IkReal> x10852=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal((((x10848*x10849))+(((-1.0)*x10848*x10851))+((sj1*sj2*x10850))+(((-1.0)*x10849*x10850)))),IkReal((((r02*x10849))+(((-1.0)*r02*x10851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10852.value)))+(x10853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10854=IKcos(j4);
IkReal x10855=IKsin(j4);
IkReal x10856=(gconst4*r11);
IkReal x10857=(gconst5*r10);
IkReal x10858=((1.0)*cj1);
IkReal x10859=(gconst5*r00);
IkReal x10860=(gconst5*r20);
IkReal x10861=((1.0)*x10854);
IkReal x10862=(gconst4*x10854);
IkReal x10863=((1.0)*x10855);
IkReal x10864=(gconst4*x10855);
evalcond[0]=((((-1.0)*x10859*x10861))+((r01*x10862))+((r02*x10855)));
evalcond[1]=((((-1.0)*r22*x10861))+((r21*x10864))+(((-1.0)*x10860*x10863)));
evalcond[2]=((((-1.0)*r12*x10861))+((x10855*x10856))+(((-1.0)*x10857*x10863)));
evalcond[3]=((-1.0)+(((-1.0)*x10859*x10863))+((r01*x10864))+(((-1.0)*r02*x10861)));
evalcond[4]=(((r21*x10862))+(((-1.0)*x10860*x10861))+((sj1*sj2))+((r22*x10855))+(((-1.0)*cj2*x10858)));
evalcond[5]=(((x10854*x10856))+((r12*x10855))+(((-1.0)*cj2*sj1))+(((-1.0)*x10857*x10861))+(((-1.0)*sj2*x10858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=(gconst4*r01);
IkReal x10866=(gconst5*r00);
CheckValue<IkReal> x10867=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10865*x10866))+(x10866*x10866)+(x10865*x10865)+(r02*r02))),-1);
if(!x10867.valid){
continue;
}
CheckValue<IkReal> x10868 = IKatan2WithCheck(IkReal(((((-1.0)*x10866))+x10865)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10867.value)))+(x10868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10869=IKcos(j4);
IkReal x10870=IKsin(j4);
IkReal x10871=(gconst4*r11);
IkReal x10872=(gconst5*r10);
IkReal x10873=((1.0)*cj1);
IkReal x10874=(gconst5*r00);
IkReal x10875=(gconst5*r20);
IkReal x10876=((1.0)*x10869);
IkReal x10877=(gconst4*x10869);
IkReal x10878=((1.0)*x10870);
IkReal x10879=(gconst4*x10870);
evalcond[0]=(((r02*x10870))+(((-1.0)*x10874*x10876))+((r01*x10877)));
evalcond[1]=(((r21*x10879))+(((-1.0)*r22*x10876))+(((-1.0)*x10875*x10878)));
evalcond[2]=(((x10870*x10871))+(((-1.0)*r12*x10876))+(((-1.0)*x10872*x10878)));
evalcond[3]=((-1.0)+(((-1.0)*x10874*x10878))+((r01*x10879))+(((-1.0)*r02*x10876)));
evalcond[4]=(((r21*x10877))+((sj1*sj2))+(((-1.0)*x10875*x10876))+((r22*x10870))+(((-1.0)*cj2*x10873)));
evalcond[5]=(((r12*x10870))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10873))+((x10869*x10871))+(((-1.0)*x10872*x10876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10880=((1.0)*gconst5);
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10880))+(((-1.0)*gconst4*r10)))),-1);
if(!x10881.valid){
continue;
}
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10881.value)))+(x10882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10883=IKcos(j4);
IkReal x10884=IKsin(j4);
IkReal x10885=(gconst4*r11);
IkReal x10886=(gconst5*r10);
IkReal x10887=((1.0)*cj1);
IkReal x10888=(gconst5*r00);
IkReal x10889=(gconst5*r20);
IkReal x10890=((1.0)*x10883);
IkReal x10891=(gconst4*x10883);
IkReal x10892=((1.0)*x10884);
IkReal x10893=(gconst4*x10884);
evalcond[0]=(((r01*x10891))+(((-1.0)*x10888*x10890))+((r02*x10884)));
evalcond[1]=((((-1.0)*x10889*x10892))+((r21*x10893))+(((-1.0)*r22*x10890)));
evalcond[2]=((((-1.0)*x10886*x10892))+(((-1.0)*r12*x10890))+((x10884*x10885)));
evalcond[3]=((-1.0)+((r01*x10893))+(((-1.0)*x10888*x10892))+(((-1.0)*r02*x10890)));
evalcond[4]=((((-1.0)*x10889*x10890))+((sj1*sj2))+((r22*x10884))+((r21*x10891))+(((-1.0)*cj2*x10887)));
evalcond[5]=(((x10883*x10885))+(((-1.0)*sj2*x10887))+(((-1.0)*x10886*x10890))+(((-1.0)*cj2*sj1))+((r12*x10884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10894=((-1.0)*r21);
CheckValue<IkReal> x10897 = IKatan2WithCheck(IkReal(x10894),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10897.valid){
continue;
}
IkReal x10895=((1.0)*(x10897.value));
IkReal x10896=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10895)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10895)));
IkReal gconst4=(x10894*x10896);
IkReal gconst5=((1.0)*r20*x10896);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10898=((-1.0)*r21);
CheckValue<IkReal> x10901 = IKatan2WithCheck(IkReal(x10898),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10901.valid){
continue;
}
IkReal x10899=((1.0)*(x10901.value));
IkReal x10900=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10899)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10899)));
IkReal gconst4=(x10898*x10900);
IkReal gconst5=((1.0)*r20*x10900);
IkReal x10902=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10906=IKPowWithIntegerCheck(x10902,-1);
if(!x10906.valid){
continue;
}
IkReal x10903=x10906.value;
IkReal x10904=((1.0)*x10903);
IkReal x10905=((((-1.0)*x10904*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10903))+(((-1.0)*(r02*r02)))+(((-1.0)*x10904*(r00*r00)*(r20*r20))));
j4eval[0]=x10905;
j4eval[1]=r02;
j4eval[2]=x10902;
j4eval[3]=IKsign(x10905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10907=((-1.0)*r21);
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(x10907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
IkReal x10908=((1.0)*(x10910.value));
IkReal x10909=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10908)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10908)));
IkReal gconst4=(x10907*x10909);
IkReal gconst5=((1.0)*r20*x10909);
IkReal x10911=r22*r22;
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x10911))),-1);
if(!x10914.valid){
continue;
}
IkReal x10912=x10914.value;
IkReal x10913=((1.0)*x10912);
j4eval[0]=IKsign(((((2.0)*x10912*(r20*r20)*(r21*r21)))+((x10913*(r21*r21*r21*r21)))+((x10913*(r20*r20*r20*r20)))+x10911));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10915=(gconst4*r21);
IkReal x10916=(sj1*sj2);
IkReal x10917=(cj1*cj2);
IkReal x10918=(gconst5*r20);
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal((((r22*x10916))+(((-1.0)*r22*x10917)))),IkReal(((((-1.0)*x10916*x10918))+((x10915*x10916))+(((-1.0)*x10915*x10917))+((x10917*x10918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x10915*x10918))+(x10918*x10918)+(x10915*x10915))),-1);
if(!x10920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10919.value)+(((1.5707963267949)*(x10920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10921=IKsin(j4);
IkReal x10922=IKcos(j4);
IkReal x10923=(gconst4*r11);
IkReal x10924=((1.0)*cj1);
IkReal x10925=(gconst5*r10);
IkReal x10926=(gconst4*r01);
IkReal x10927=(gconst5*r00);
IkReal x10928=(gconst4*r21);
IkReal x10929=(gconst5*r20);
IkReal x10930=((1.0)*x10922);
IkReal x10931=((1.0)*x10921);
evalcond[0]=((((-1.0)*x10929*x10931))+(((-1.0)*r22*x10930))+((x10921*x10928)));
evalcond[1]=((((-1.0)*x10925*x10931))+(((-1.0)*r12*x10930))+((x10921*x10923)));
evalcond[2]=((((-1.0)*x10926*x10930))+(((-1.0)*r02*x10931))+((x10922*x10927)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10930))+(((-1.0)*x10927*x10931))+((x10921*x10926)));
evalcond[4]=((((-1.0)*r22*x10931))+((sj1*sj2))+(((-1.0)*x10928*x10930))+(((-1.0)*cj2*x10924))+((x10922*x10929)));
evalcond[5]=((((-1.0)*sj2*x10924))+(((-1.0)*r12*x10931))+(((-1.0)*cj2*sj1))+(((-1.0)*x10923*x10930))+((x10922*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10932=(gconst5*r00);
IkReal x10933=(gconst4*r01);
CheckValue<IkReal> x10934 = IKatan2WithCheck(IkReal(((((-1.0)*x10933))+x10932)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10932*x10932)))+(((-1.0)*(x10933*x10933)))+(((2.0)*x10932*x10933)))),-1);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10934.value)+(((1.5707963267949)*(x10935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10936=IKsin(j4);
IkReal x10937=IKcos(j4);
IkReal x10938=(gconst4*r11);
IkReal x10939=((1.0)*cj1);
IkReal x10940=(gconst5*r10);
IkReal x10941=(gconst4*r01);
IkReal x10942=(gconst5*r00);
IkReal x10943=(gconst4*r21);
IkReal x10944=(gconst5*r20);
IkReal x10945=((1.0)*x10937);
IkReal x10946=((1.0)*x10936);
evalcond[0]=(((x10936*x10943))+(((-1.0)*r22*x10945))+(((-1.0)*x10944*x10946)));
evalcond[1]=((((-1.0)*r12*x10945))+((x10936*x10938))+(((-1.0)*x10940*x10946)));
evalcond[2]=(((x10937*x10942))+(((-1.0)*x10941*x10945))+(((-1.0)*r02*x10946)));
evalcond[3]=((-1.0)+((x10936*x10941))+(((-1.0)*x10942*x10946))+(((-1.0)*r02*x10945)));
evalcond[4]=(((x10937*x10944))+((sj1*sj2))+(((-1.0)*r22*x10946))+(((-1.0)*x10943*x10945))+(((-1.0)*cj2*x10939)));
evalcond[5]=(((x10937*x10940))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10946))+(((-1.0)*x10938*x10945))+(((-1.0)*sj2*x10939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10947=((1.0)*gconst5);
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10947))+(((-1.0)*gconst4*r10)))),-1);
if(!x10948.valid){
continue;
}
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10948.value)))+(x10949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10950=IKsin(j4);
IkReal x10951=IKcos(j4);
IkReal x10952=(gconst4*r11);
IkReal x10953=((1.0)*cj1);
IkReal x10954=(gconst5*r10);
IkReal x10955=(gconst4*r01);
IkReal x10956=(gconst5*r00);
IkReal x10957=(gconst4*r21);
IkReal x10958=(gconst5*r20);
IkReal x10959=((1.0)*x10951);
IkReal x10960=((1.0)*x10950);
evalcond[0]=((((-1.0)*r22*x10959))+(((-1.0)*x10958*x10960))+((x10950*x10957)));
evalcond[1]=(((x10950*x10952))+(((-1.0)*r12*x10959))+(((-1.0)*x10954*x10960)));
evalcond[2]=((((-1.0)*x10955*x10959))+(((-1.0)*r02*x10960))+((x10951*x10956)));
evalcond[3]=((-1.0)+((x10950*x10955))+(((-1.0)*x10956*x10960))+(((-1.0)*r02*x10959)));
evalcond[4]=((((-1.0)*cj2*x10953))+((sj1*sj2))+(((-1.0)*x10957*x10959))+(((-1.0)*r22*x10960))+((x10951*x10958)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10953))+(((-1.0)*x10952*x10959))+(((-1.0)*r12*x10960))+((x10951*x10954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10961=((-1.0)*r21);
IkReal x10962=((-1.0)*r20);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(x10961),IkReal(x10962),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
IkReal x10963=((1.0)*(x10964.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10963)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10962);
rxp0_2=(py*r00);
rxp1_0=(py*x10961);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10963)));
IkReal gconst4=x10961;
IkReal gconst5=((1.0)*r20);
IkReal x10965=((1.0)*r01*r21);
IkReal x10966=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10965))+(((-1.0)*x10966)));
j4eval[1]=(((sj3*x10965))+((sj3*x10966)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10967=((-1.0)*r21);
IkReal x10968=((-1.0)*r20);
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(x10967),IkReal(x10968),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
IkReal x10969=((1.0)*(x10970.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10969)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10968);
rxp0_2=(py*r00);
rxp1_0=(py*x10967);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10969)));
IkReal gconst4=x10967;
IkReal gconst5=((1.0)*r20);
IkReal x10971=((1.0)*r01*r21);
IkReal x10972=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10972))+(((-1.0)*x10971)));
j4eval[1]=((((-1.0)*cj3*x10971))+(((-1.0)*cj3*x10972)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10973=((-1.0)*r21);
IkReal x10974=((-1.0)*r20);
CheckValue<IkReal> x10976 = IKatan2WithCheck(IkReal(x10973),IkReal(x10974),IKFAST_ATAN2_MAGTHRESH);
if(!x10976.valid){
continue;
}
IkReal x10975=((1.0)*(x10976.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10975)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10974);
rxp0_2=(py*r00);
rxp1_0=(py*x10973);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10975)));
IkReal gconst4=x10973;
IkReal gconst5=((1.0)*r20);
IkReal x10977=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r00*r20*x10977))+((r01*r21*x10977)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10978=((1.0)*r01);
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(r12,-1);
if(!x10979.valid){
continue;
}
CheckValue<IkReal> x10980=IKPowWithIntegerCheck(sj3,-1);
if(!x10980.valid){
continue;
}
CheckValue<IkReal> x10981=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x10978))),-1);
if(!x10981.valid){
continue;
}
if( IKabs(((x10979.value)*(x10980.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10981.value)*(((((-1.0)*cj3*gconst5*x10978))+(((-1.0)*cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10979.value)*(x10980.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10981.value)*(((((-1.0)*cj3*gconst5*x10978))+(((-1.0)*cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10979.value)*(x10980.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10981.value)*(((((-1.0)*cj3*gconst5*x10978))+(((-1.0)*cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10982=IKsin(j4);
IkReal x10983=IKcos(j4);
IkReal x10984=(sj1*sj2);
IkReal x10985=((1.0)*cj1);
IkReal x10986=(gconst5*r00);
IkReal x10987=(gconst5*sj3);
IkReal x10988=(cj3*gconst5);
IkReal x10989=(gconst4*sj3);
IkReal x10990=(cj3*gconst4);
IkReal x10991=(sj2*x10985);
IkReal x10992=((1.0)*cj2*sj1);
IkReal x10993=((1.0)*x10982);
IkReal x10994=(gconst4*x10982);
IkReal x10995=((1.0)*x10983);
IkReal x10996=(x10983*x10987);
IkReal x10997=(x10983*x10990);
IkReal x10998=(x10991+x10992);
evalcond[0]=((-1.0)*r12*x10983);
evalcond[1]=(((r21*x10994))+(((-1.0)*gconst5*r20*x10993)));
evalcond[2]=((-1.0)+((r01*x10994))+(((-1.0)*x10986*x10993)));
evalcond[3]=((((-1.0)*r12*sj3*x10993))+(((-1.0)*x10984))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10998))+((cj3*r12*x10982)));
evalcond[5]=(((r00*x10990))+((r01*x10988))+((sj3*x10983*x10986))+(((-1.0)*r01*x10989*x10995)));
evalcond[6]=(((r00*x10989))+((r01*x10997))+((r01*x10987))+(((-1.0)*cj3*x10986*x10995)));
evalcond[7]=((((-1.0)*r20*x10988*x10995))+((r21*x10997))+((r21*x10987))+(((-1.0)*cj2*x10985))+((r20*x10989))+x10984);
evalcond[8]=(((r21*x10988))+(((-1.0)*r21*x10989*x10995))+((r20*x10996))+((r20*x10990))+(((-1.0)*x10998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10999=((1.0)*gconst5);
IkReal x11000=(gconst4*r01);
CheckValue<IkReal> x11001=IKPowWithIntegerCheck(((((-1.0)*r00*x10999))+x11000),-1);
if(!x11001.valid){
continue;
}
CheckValue<IkReal> x11002=IKPowWithIntegerCheck((((cj3*x11000))+(((-1.0)*cj3*r00*x10999))),-1);
if(!x11002.valid){
continue;
}
if( IKabs(x11001.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11002.value)*(((((-1.0)*r01*sj3*x10999))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11001.value)+IKsqr(((x11002.value)*(((((-1.0)*r01*sj3*x10999))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11001.value, ((x11002.value)*(((((-1.0)*r01*sj3*x10999))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11003=IKsin(j4);
IkReal x11004=IKcos(j4);
IkReal x11005=(sj1*sj2);
IkReal x11006=((1.0)*cj1);
IkReal x11007=(gconst5*r00);
IkReal x11008=(gconst5*sj3);
IkReal x11009=(cj3*gconst5);
IkReal x11010=(gconst4*sj3);
IkReal x11011=(cj3*gconst4);
IkReal x11012=(sj2*x11006);
IkReal x11013=((1.0)*cj2*sj1);
IkReal x11014=((1.0)*x11003);
IkReal x11015=(gconst4*x11003);
IkReal x11016=((1.0)*x11004);
IkReal x11017=(x11004*x11008);
IkReal x11018=(x11004*x11011);
IkReal x11019=(x11012+x11013);
evalcond[0]=((-1.0)*r12*x11004);
evalcond[1]=(((r21*x11015))+(((-1.0)*gconst5*r20*x11014)));
evalcond[2]=((-1.0)+(((-1.0)*x11007*x11014))+((r01*x11015)));
evalcond[3]=((((-1.0)*r12*sj3*x11014))+((cj1*cj2))+(((-1.0)*x11005)));
evalcond[4]=((((-1.0)*x11019))+((cj3*r12*x11003)));
evalcond[5]=((((-1.0)*r01*x11010*x11016))+((sj3*x11004*x11007))+((r01*x11009))+((r00*x11011)));
evalcond[6]=((((-1.0)*cj3*x11007*x11016))+((r01*x11008))+((r00*x11010))+((r01*x11018)));
evalcond[7]=(((r20*x11010))+((r21*x11008))+x11005+(((-1.0)*r20*x11009*x11016))+((r21*x11018))+(((-1.0)*cj2*x11006)));
evalcond[8]=((((-1.0)*x11019))+(((-1.0)*r21*x11010*x11016))+((r20*x11011))+((r20*x11017))+((r21*x11009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11020=(gconst4*r01);
IkReal x11021=(gconst5*r00);
IkReal x11022=((1.0)*cj3);
CheckValue<IkReal> x11023=IKPowWithIntegerCheck(((((-1.0)*x11021))+x11020),-1);
if(!x11023.valid){
continue;
}
CheckValue<IkReal> x11024=IKPowWithIntegerCheck((((sj3*x11021))+(((-1.0)*sj3*x11020))),-1);
if(!x11024.valid){
continue;
}
if( IKabs(x11023.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11024.value)*(((((-1.0)*gconst5*r01*x11022))+(((-1.0)*gconst4*r00*x11022)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11023.value)+IKsqr(((x11024.value)*(((((-1.0)*gconst5*r01*x11022))+(((-1.0)*gconst4*r00*x11022))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11023.value, ((x11024.value)*(((((-1.0)*gconst5*r01*x11022))+(((-1.0)*gconst4*r00*x11022))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11025=IKsin(j4);
IkReal x11026=IKcos(j4);
IkReal x11027=(sj1*sj2);
IkReal x11028=((1.0)*cj1);
IkReal x11029=(gconst5*r00);
IkReal x11030=(gconst5*sj3);
IkReal x11031=(cj3*gconst5);
IkReal x11032=(gconst4*sj3);
IkReal x11033=(cj3*gconst4);
IkReal x11034=(sj2*x11028);
IkReal x11035=((1.0)*cj2*sj1);
IkReal x11036=((1.0)*x11025);
IkReal x11037=(gconst4*x11025);
IkReal x11038=((1.0)*x11026);
IkReal x11039=(x11026*x11030);
IkReal x11040=(x11026*x11033);
IkReal x11041=(x11034+x11035);
evalcond[0]=((-1.0)*r12*x11026);
evalcond[1]=(((r21*x11037))+(((-1.0)*gconst5*r20*x11036)));
evalcond[2]=((-1.0)+((r01*x11037))+(((-1.0)*x11029*x11036)));
evalcond[3]=((((-1.0)*r12*sj3*x11036))+(((-1.0)*x11027))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x11041))+((cj3*r12*x11025)));
evalcond[5]=(((r01*x11031))+((r00*x11033))+(((-1.0)*r01*x11032*x11038))+((sj3*x11026*x11029)));
evalcond[6]=(((r01*x11030))+((r00*x11032))+((r01*x11040))+(((-1.0)*cj3*x11029*x11038)));
evalcond[7]=(((r20*x11032))+((r21*x11030))+x11027+((r21*x11040))+(((-1.0)*cj2*x11028))+(((-1.0)*r20*x11031*x11038)));
evalcond[8]=((((-1.0)*x11041))+((r20*x11039))+((r20*x11033))+((r21*x11031))+(((-1.0)*r21*x11032*x11038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11042=gconst4*gconst4;
IkReal x11043=gconst5*gconst5;
IkReal x11044=(r01*r20);
IkReal x11045=(gconst4*sj3);
IkReal x11046=(r01*r21);
IkReal x11047=((1.0)*cj3);
IkReal x11048=(r00*r21);
IkReal x11049=(r00*r20);
IkReal x11050=(cj3*gconst4*gconst5);
IkReal x11051=((1.0)*x11043);
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11047))+(((-1.0)*x11042*x11046*x11047))+((x11044*x11050))+(((-1.0)*x11043*x11047*x11049))+((x11048*x11050)))),-1);
if(!x11052.valid){
continue;
}
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal((((r00*r22*x11045))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11045*x11046))+((sj3*x11042*x11048))+(((-1.0)*sj3*x11044*x11051))+(((-1.0)*gconst5*x11045*x11049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11052.value)))+(x11053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11054=IKsin(j4);
IkReal x11055=IKcos(j4);
IkReal x11056=((1.0)*cj1);
IkReal x11057=(gconst4*r11);
IkReal x11058=(sj1*sj2);
IkReal x11059=(gconst5*r10);
IkReal x11060=(gconst4*r01);
IkReal x11061=(gconst5*sj3);
IkReal x11062=(gconst5*r00);
IkReal x11063=(gconst4*sj3);
IkReal x11064=(cj3*gconst5);
IkReal x11065=(cj3*gconst4);
IkReal x11066=(gconst4*r21);
IkReal x11067=(sj2*x11056);
IkReal x11068=((1.0)*cj2*sj1);
IkReal x11069=((1.0)*x11055);
IkReal x11070=((1.0)*x11054);
IkReal x11071=(cj3*x11054);
IkReal x11072=(cj3*x11055);
IkReal x11073=(x11055*x11061);
IkReal x11074=(x11068+x11067);
evalcond[0]=((((-1.0)*r22*x11069))+((x11054*x11066))+(((-1.0)*gconst5*r20*x11070)));
evalcond[1]=((((-1.0)*x11059*x11070))+((x11054*x11057))+(((-1.0)*r12*x11069)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11069))+((x11054*x11060))+(((-1.0)*x11062*x11070)));
evalcond[3]=((((-1.0)*cj3*x11062*x11069))+((r02*x11071))+((x11060*x11072))+((r01*x11061))+((r00*x11063)));
evalcond[4]=((((-1.0)*sj3*x11060*x11069))+((r01*x11064))+((r00*x11065))+((r00*x11073))+(((-1.0)*r02*sj3*x11070)));
evalcond[5]=(((r20*x11063))+((r21*x11055*x11065))+x11058+(((-1.0)*r20*x11064*x11069))+((r21*x11061))+((r22*x11071))+(((-1.0)*cj2*x11056)));
evalcond[6]=(((sj3*x11055*x11059))+(((-1.0)*r12*sj3*x11070))+(((-1.0)*sj3*x11057*x11069))+((r10*x11065))+(((-1.0)*x11058))+((r11*x11064))+((cj1*cj2)));
evalcond[7]=(((r12*x11071))+((r10*x11063))+((x11057*x11072))+(((-1.0)*x11074))+((r11*x11061))+(((-1.0)*cj3*x11059*x11069)));
evalcond[8]=(((r20*x11065))+(((-1.0)*r21*x11063*x11069))+(((-1.0)*r22*sj3*x11070))+((r21*x11064))+(((-1.0)*x11074))+((r20*x11073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11075=gconst4*gconst4;
IkReal x11076=gconst5*gconst5;
IkReal x11077=(cj3*r01);
IkReal x11078=(r00*sj3);
IkReal x11079=(r01*sj3);
IkReal x11080=(cj3*r00);
IkReal x11081=(gconst4*gconst5*r21);
IkReal x11082=(r20*x11076);
IkReal x11083=(r21*x11075);
IkReal x11084=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x11085=IKPowWithIntegerCheck(IKsign((((x11079*x11083))+(((-1.0)*x11079*x11084))+(((-1.0)*x11078*x11081))+((x11078*x11082))+((r02*r22*sj3)))),-1);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086 = IKatan2WithCheck(IkReal((((gconst4*r22*x11080))+((gconst5*r22*x11077)))),IkReal(((((-1.0)*x11080*x11084))+((x11077*x11081))+(((-1.0)*x11077*x11082))+((x11080*x11083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11085.value)))+(x11086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=((1.0)*cj1);
IkReal x11090=(gconst4*r11);
IkReal x11091=(sj1*sj2);
IkReal x11092=(gconst5*r10);
IkReal x11093=(gconst4*r01);
IkReal x11094=(gconst5*sj3);
IkReal x11095=(gconst5*r00);
IkReal x11096=(gconst4*sj3);
IkReal x11097=(cj3*gconst5);
IkReal x11098=(cj3*gconst4);
IkReal x11099=(gconst4*r21);
IkReal x11100=(sj2*x11089);
IkReal x11101=((1.0)*cj2*sj1);
IkReal x11102=((1.0)*x11088);
IkReal x11103=((1.0)*x11087);
IkReal x11104=(cj3*x11087);
IkReal x11105=(cj3*x11088);
IkReal x11106=(x11088*x11094);
IkReal x11107=(x11100+x11101);
evalcond[0]=((((-1.0)*gconst5*r20*x11103))+(((-1.0)*r22*x11102))+((x11087*x11099)));
evalcond[1]=((((-1.0)*r12*x11102))+(((-1.0)*x11092*x11103))+((x11087*x11090)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11102))+((x11087*x11093))+(((-1.0)*x11095*x11103)));
evalcond[3]=(((r02*x11104))+((x11093*x11105))+((r00*x11096))+((r01*x11094))+(((-1.0)*cj3*x11095*x11102)));
evalcond[4]=((((-1.0)*r02*sj3*x11103))+(((-1.0)*sj3*x11093*x11102))+((r00*x11098))+((r01*x11097))+((r00*x11106)));
evalcond[5]=(((r20*x11096))+x11091+(((-1.0)*cj2*x11089))+(((-1.0)*r20*x11097*x11102))+((r21*x11088*x11098))+((r22*x11104))+((r21*x11094)));
evalcond[6]=((((-1.0)*sj3*x11090*x11102))+(((-1.0)*r12*sj3*x11103))+(((-1.0)*x11091))+((r11*x11097))+((sj3*x11088*x11092))+((r10*x11098))+((cj1*cj2)));
evalcond[7]=(((x11090*x11105))+((r11*x11094))+(((-1.0)*cj3*x11092*x11102))+((r10*x11096))+(((-1.0)*x11107))+((r12*x11104)));
evalcond[8]=(((r20*x11098))+(((-1.0)*r21*x11096*x11102))+(((-1.0)*r22*sj3*x11103))+((r20*x11106))+(((-1.0)*x11107))+((r21*x11097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11108=((1.0)*gconst5);
CheckValue<IkReal> x11109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11108))+(((-1.0)*gconst4*r10)))),-1);
if(!x11109.valid){
continue;
}
CheckValue<IkReal> x11110 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11109.value)))+(x11110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11111=IKsin(j4);
IkReal x11112=IKcos(j4);
IkReal x11113=((1.0)*cj1);
IkReal x11114=(gconst4*r11);
IkReal x11115=(sj1*sj2);
IkReal x11116=(gconst5*r10);
IkReal x11117=(gconst4*r01);
IkReal x11118=(gconst5*sj3);
IkReal x11119=(gconst5*r00);
IkReal x11120=(gconst4*sj3);
IkReal x11121=(cj3*gconst5);
IkReal x11122=(cj3*gconst4);
IkReal x11123=(gconst4*r21);
IkReal x11124=(sj2*x11113);
IkReal x11125=((1.0)*cj2*sj1);
IkReal x11126=((1.0)*x11112);
IkReal x11127=((1.0)*x11111);
IkReal x11128=(cj3*x11111);
IkReal x11129=(cj3*x11112);
IkReal x11130=(x11112*x11118);
IkReal x11131=(x11124+x11125);
evalcond[0]=((((-1.0)*gconst5*r20*x11127))+(((-1.0)*r22*x11126))+((x11111*x11123)));
evalcond[1]=((((-1.0)*r12*x11126))+((x11111*x11114))+(((-1.0)*x11116*x11127)));
evalcond[2]=((-1.0)+((x11111*x11117))+(((-1.0)*x11119*x11127))+(((-1.0)*r02*x11126)));
evalcond[3]=(((x11117*x11129))+((r02*x11128))+((r00*x11120))+(((-1.0)*cj3*x11119*x11126))+((r01*x11118)));
evalcond[4]=((((-1.0)*r02*sj3*x11127))+(((-1.0)*sj3*x11117*x11126))+((r00*x11122))+((r01*x11121))+((r00*x11130)));
evalcond[5]=((((-1.0)*r20*x11121*x11126))+(((-1.0)*cj2*x11113))+((r22*x11128))+x11115+((r21*x11118))+((r21*x11112*x11122))+((r20*x11120)));
evalcond[6]=((((-1.0)*x11115))+(((-1.0)*r12*sj3*x11127))+(((-1.0)*sj3*x11114*x11126))+((r10*x11122))+((sj3*x11112*x11116))+((r11*x11121))+((cj1*cj2)));
evalcond[7]=(((x11114*x11129))+(((-1.0)*cj3*x11116*x11126))+((r12*x11128))+((r10*x11120))+(((-1.0)*x11131))+((r11*x11118)));
evalcond[8]=((((-1.0)*r21*x11120*x11126))+((r21*x11121))+((r20*x11130))+(((-1.0)*x11131))+(((-1.0)*r22*sj3*x11127))+((r20*x11122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11132=((-1.0)*r21);
CheckValue<IkReal> x11135 = IKatan2WithCheck(IkReal(x11132),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11135.valid){
continue;
}
IkReal x11133=((1.0)*(x11135.value));
IkReal x11134=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11133)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11133)));
IkReal gconst4=(x11132*x11134);
IkReal gconst5=((1.0)*r20*x11134);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11136=((-1.0)*r21);
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(x11136),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
IkReal x11137=((1.0)*(x11139.value));
IkReal x11138=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11137)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11137)));
IkReal gconst4=(x11136*x11138);
IkReal gconst5=((1.0)*r20*x11138);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11140=((-1.0)*r21);
CheckValue<IkReal> x11143 = IKatan2WithCheck(IkReal(x11140),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11143.valid){
continue;
}
IkReal x11141=((1.0)*(x11143.value));
IkReal x11142=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11141)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11141)));
IkReal gconst4=(x11140*x11142);
IkReal gconst5=((1.0)*r20*x11142);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11144=((-1.0)*r21);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(x11144),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
IkReal x11145=((1.0)*(x11147.value));
IkReal x11146=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11145)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11145)));
IkReal gconst4=(x11144*x11146);
IkReal gconst5=((1.0)*r20*x11146);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11148=((-1.0)*r21);
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(x11148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
IkReal x11149=((1.0)*(x11151.value));
IkReal x11150=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11149)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11149)));
IkReal gconst4=(x11148*x11150);
IkReal gconst5=((1.0)*r20*x11150);
IkReal x11152=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11156=IKPowWithIntegerCheck(x11152,-1);
if(!x11156.valid){
continue;
}
IkReal x11153=x11156.value;
IkReal x11154=((1.0)*x11153);
IkReal x11155=((((-1.0)*(r02*r02)))+(((-1.0)*x11154*(r00*r00)*(r20*r20)))+(((-1.0)*x11154*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11153)));
j4eval[0]=x11155;
j4eval[1]=IKsign(x11155);
j4eval[2]=r02;
j4eval[3]=x11152;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11157=((-1.0)*r21);
CheckValue<IkReal> x11160 = IKatan2WithCheck(IkReal(x11157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11160.valid){
continue;
}
IkReal x11158=((1.0)*(x11160.value));
IkReal x11159=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11158)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11158)));
IkReal gconst4=(x11157*x11159);
IkReal gconst5=((1.0)*r20*x11159);
IkReal x11161=r22*r22;
IkReal x11162=(cj1*cj2*r02);
CheckValue<IkReal> x11167=IKPowWithIntegerCheck(((-1.0)+x11161),-1);
if(!x11167.valid){
continue;
}
IkReal x11163=x11167.value;
IkReal x11164=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x11161)))) < -0.00001)
continue;
IkReal x11165=IKsqrt(((1.0)+(((-1.0)*x11161))));
IkReal x11166=(r22*x11163*x11165);
j4eval[0]=((IKabs((((x11162*x11166))+(((-1.0)*x11164*x11166)))))+(IKabs(((((-1.0)*x11164))+x11162))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11168=(gconst5*r00);
IkReal x11169=(cj1*cj2);
IkReal x11170=(gconst4*r01);
IkReal x11171=((1.0)*sj1*sj2);
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11172.valid){
continue;
}
CheckValue<IkReal> x11173 = IKatan2WithCheck(IkReal((((sj1*sj2*x11170))+(((-1.0)*x11168*x11171))+(((-1.0)*x11169*x11170))+((x11168*x11169)))),IkReal((((r02*x11169))+(((-1.0)*r02*x11171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11172.value)))+(x11173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11174=IKcos(j4);
IkReal x11175=IKsin(j4);
IkReal x11176=(gconst4*r11);
IkReal x11177=(gconst5*r10);
IkReal x11178=(gconst5*r00);
IkReal x11179=(gconst5*r20);
IkReal x11180=((1.0)*x11174);
IkReal x11181=(gconst4*x11174);
IkReal x11182=((1.0)*x11175);
IkReal x11183=(gconst4*x11175);
evalcond[0]=(((r01*x11181))+((r02*x11175))+(((-1.0)*x11178*x11180)));
evalcond[1]=((((-1.0)*r22*x11180))+(((-1.0)*x11179*x11182))+((r21*x11183)));
evalcond[2]=(((x11175*x11176))+(((-1.0)*r12*x11180))+(((-1.0)*x11177*x11182)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11180))+((r01*x11183))+(((-1.0)*x11178*x11182)));
evalcond[4]=(((cj2*sj1))+((r12*x11175))+((x11174*x11176))+((cj1*sj2))+(((-1.0)*x11177*x11180)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11175))+(((-1.0)*x11179*x11180))+((r21*x11181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11184=(gconst4*r01);
IkReal x11185=(gconst5*r00);
CheckValue<IkReal> x11186 = IKatan2WithCheck(IkReal((x11184+(((-1.0)*x11185)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11186.valid){
continue;
}
CheckValue<IkReal> x11187=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11185*x11185)))+(((2.0)*x11184*x11185))+(((-1.0)*(x11184*x11184))))),-1);
if(!x11187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11186.value)+(((1.5707963267949)*(x11187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11188=IKcos(j4);
IkReal x11189=IKsin(j4);
IkReal x11190=(gconst4*r11);
IkReal x11191=(gconst5*r10);
IkReal x11192=(gconst5*r00);
IkReal x11193=(gconst5*r20);
IkReal x11194=((1.0)*x11188);
IkReal x11195=(gconst4*x11188);
IkReal x11196=((1.0)*x11189);
IkReal x11197=(gconst4*x11189);
evalcond[0]=(((r01*x11195))+((r02*x11189))+(((-1.0)*x11192*x11194)));
evalcond[1]=(((r21*x11197))+(((-1.0)*r22*x11194))+(((-1.0)*x11193*x11196)));
evalcond[2]=((((-1.0)*r12*x11194))+(((-1.0)*x11191*x11196))+((x11189*x11190)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11194))+((r01*x11197))+(((-1.0)*x11192*x11196)));
evalcond[4]=(((cj2*sj1))+((r12*x11189))+((cj1*sj2))+(((-1.0)*x11191*x11194))+((x11188*x11190)));
evalcond[5]=(((r21*x11195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11189))+(((-1.0)*x11193*x11194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11198=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11198.valid){
continue;
}
CheckValue<IkReal> x11199 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11198.value)))+(x11199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11200=IKcos(j4);
IkReal x11201=IKsin(j4);
IkReal x11202=(gconst4*r11);
IkReal x11203=(gconst5*r10);
IkReal x11204=(gconst5*r00);
IkReal x11205=(gconst5*r20);
IkReal x11206=((1.0)*x11200);
IkReal x11207=(gconst4*x11200);
IkReal x11208=((1.0)*x11201);
IkReal x11209=(gconst4*x11201);
evalcond[0]=(((r02*x11201))+((r01*x11207))+(((-1.0)*x11204*x11206)));
evalcond[1]=((((-1.0)*r22*x11206))+((r21*x11209))+(((-1.0)*x11205*x11208)));
evalcond[2]=((((-1.0)*x11203*x11208))+((x11201*x11202))+(((-1.0)*r12*x11206)));
evalcond[3]=((1.0)+((r01*x11209))+(((-1.0)*r02*x11206))+(((-1.0)*x11204*x11208)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11203*x11206))+((x11200*x11202))+((cj1*sj2))+((r12*x11201)));
evalcond[5]=(((r21*x11207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11201))+(((-1.0)*x11205*x11206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11210=((-1.0)*r21);
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(x11210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
IkReal x11211=((1.0)*(x11213.value));
IkReal x11212=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11211)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11211)));
IkReal gconst4=(x11210*x11212);
IkReal gconst5=((1.0)*r20*x11212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11214=((-1.0)*r21);
CheckValue<IkReal> x11217 = IKatan2WithCheck(IkReal(x11214),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11217.valid){
continue;
}
IkReal x11215=((1.0)*(x11217.value));
IkReal x11216=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11215)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11215)));
IkReal gconst4=(x11214*x11216);
IkReal gconst5=((1.0)*r20*x11216);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11218=((-1.0)*r21);
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(x11218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
IkReal x11219=((1.0)*(x11221.value));
IkReal x11220=x9402;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11219)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11219)));
IkReal gconst4=(x11218*x11220);
IkReal gconst5=((1.0)*r20*x11220);
IkReal x11222=r22*r22;
IkReal x11223=(cj1*r12*sj2);
IkReal x11224=(cj2*r12*sj1);
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(((-1.0)+x11222),-1);
if(!x11228.valid){
continue;
}
IkReal x11225=x11228.value;
if((((1.0)+(((-1.0)*x11222)))) < -0.00001)
continue;
IkReal x11226=IKsqrt(((1.0)+(((-1.0)*x11222))));
IkReal x11227=((1.0)*r22*x11225*x11226);
j4eval[0]=((IKabs(((((-1.0)*x11223*x11227))+(((-1.0)*x11224*x11227)))))+(IKabs((x11224+x11223))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11229=(gconst5*r10);
IkReal x11230=(gconst4*r11);
IkReal x11231=(cj2*sj1);
IkReal x11232=(cj1*sj2);
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal((((r12*x11232))+((r12*x11231)))),IkReal(((((-1.0)*x11229*x11231))+(((-1.0)*x11229*x11232))+((x11230*x11231))+((x11230*x11232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
CheckValue<IkReal> x11234=IKPowWithIntegerCheck(IKsign(((x11230*x11230)+(r12*r12)+(x11229*x11229)+(((-2.0)*x11229*x11230)))),-1);
if(!x11234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11233.value)+(((1.5707963267949)*(x11234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11235=IKsin(j4);
IkReal x11236=IKcos(j4);
IkReal x11237=(gconst4*r11);
IkReal x11238=(gconst5*r10);
IkReal x11239=(gconst4*r01);
IkReal x11240=(gconst5*r00);
IkReal x11241=(gconst4*r21);
IkReal x11242=(gconst5*r20);
IkReal x11243=((1.0)*x11236);
IkReal x11244=((1.0)*x11235);
evalcond[0]=(((x11235*x11241))+(((-1.0)*x11242*x11244))+(((-1.0)*r22*x11243)));
evalcond[1]=(((x11235*x11237))+(((-1.0)*x11238*x11244))+(((-1.0)*r12*x11243)));
evalcond[2]=((((-1.0)*r02*x11244))+((x11236*x11240))+(((-1.0)*x11239*x11243)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11243))+((x11235*x11239))+(((-1.0)*x11240*x11244)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11236*x11238))+(((-1.0)*r12*x11244))+(((-1.0)*x11237*x11243)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11236*x11242))+(((-1.0)*x11241*x11243))+(((-1.0)*r22*x11244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11245=(gconst5*r00);
IkReal x11246=(gconst4*r01);
CheckValue<IkReal> x11247=IKPowWithIntegerCheck(IKsign(((x11245*x11245)+(x11246*x11246)+(((-2.0)*x11245*x11246))+(r02*r02))),-1);
if(!x11247.valid){
continue;
}
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal(((((-1.0)*x11246))+x11245)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11247.value)))+(x11248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11249=IKsin(j4);
IkReal x11250=IKcos(j4);
IkReal x11251=(gconst4*r11);
IkReal x11252=(gconst5*r10);
IkReal x11253=(gconst4*r01);
IkReal x11254=(gconst5*r00);
IkReal x11255=(gconst4*r21);
IkReal x11256=(gconst5*r20);
IkReal x11257=((1.0)*x11250);
IkReal x11258=((1.0)*x11249);
evalcond[0]=(((x11249*x11255))+(((-1.0)*x11256*x11258))+(((-1.0)*r22*x11257)));
evalcond[1]=(((x11249*x11251))+(((-1.0)*x11252*x11258))+(((-1.0)*r12*x11257)));
evalcond[2]=((((-1.0)*r02*x11258))+((x11250*x11254))+(((-1.0)*x11253*x11257)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11257))+((x11249*x11253))+(((-1.0)*x11254*x11258)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11251*x11257))+((x11250*x11252))+(((-1.0)*r12*x11258)));
evalcond[5]=(((x11250*x11256))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11258))+(((-1.0)*x11255*x11257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11259=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11259.valid){
continue;
}
CheckValue<IkReal> x11260 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11259.value)))+(x11260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11261=IKsin(j4);
IkReal x11262=IKcos(j4);
IkReal x11263=(gconst4*r11);
IkReal x11264=(gconst5*r10);
IkReal x11265=(gconst4*r01);
IkReal x11266=(gconst5*r00);
IkReal x11267=(gconst4*r21);
IkReal x11268=(gconst5*r20);
IkReal x11269=((1.0)*x11262);
IkReal x11270=((1.0)*x11261);
evalcond[0]=(((x11261*x11267))+(((-1.0)*x11268*x11270))+(((-1.0)*r22*x11269)));
evalcond[1]=(((x11261*x11263))+(((-1.0)*r12*x11269))+(((-1.0)*x11264*x11270)));
evalcond[2]=(((x11262*x11266))+(((-1.0)*r02*x11270))+(((-1.0)*x11265*x11269)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11269))+((x11261*x11265))+(((-1.0)*x11266*x11270)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11270))+((x11262*x11264))+((cj1*sj2))+(((-1.0)*x11263*x11269)));
evalcond[5]=(((x11262*x11268))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11270))+(((-1.0)*x11267*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11271=((-1.0)*r21);
IkReal x11272=((-1.0)*r20);
CheckValue<IkReal> x11274 = IKatan2WithCheck(IkReal(x11271),IkReal(x11272),IKFAST_ATAN2_MAGTHRESH);
if(!x11274.valid){
continue;
}
IkReal x11273=((1.0)*(x11274.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11273)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11272);
rxp0_2=(py*r00);
rxp1_0=(py*x11271);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11273)));
IkReal gconst4=x11271;
IkReal gconst5=((1.0)*r20);
IkReal x11275=((1.0)*r01*r21);
IkReal x11276=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11275))+(((-1.0)*x11276)));
j4eval[1]=(((sj3*x11276))+((sj3*x11275)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11277=((-1.0)*r21);
IkReal x11278=((-1.0)*r20);
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal(x11277),IkReal(x11278),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
IkReal x11279=((1.0)*(x11280.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11279)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11278);
rxp0_2=(py*r00);
rxp1_0=(py*x11277);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11279)));
IkReal gconst4=x11277;
IkReal gconst5=((1.0)*r20);
IkReal x11281=((1.0)*r01*r21);
IkReal x11282=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11281))+(((-1.0)*x11282)));
j4eval[1]=((((-1.0)*cj3*x11282))+(((-1.0)*cj3*x11281)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11283=((-1.0)*r21);
IkReal x11284=((-1.0)*r20);
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(x11283),IkReal(x11284),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
IkReal x11285=((1.0)*(x11286.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11285)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11284);
rxp0_2=(py*r00);
rxp1_0=(py*x11283);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11285)));
IkReal gconst4=x11283;
IkReal gconst5=((1.0)*r20);
IkReal x11287=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r01*r21*x11287))+((r00*r20*x11287)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11288=((1.0)*r01);
CheckValue<IkReal> x11289=IKPowWithIntegerCheck(cj3,-1);
if(!x11289.valid){
continue;
}
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(r12,-1);
if(!x11290.valid){
continue;
}
CheckValue<IkReal> x11291=IKPowWithIntegerCheck((((gconst5*r00*sj3))+(((-1.0)*gconst4*sj3*x11288))),-1);
if(!x11291.valid){
continue;
}
if( IKabs(((x11289.value)*(x11290.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11291.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11288)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11289.value)*(x11290.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x11291.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11288))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11289.value)*(x11290.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x11291.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*gconst5*x11288))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11292=IKsin(j4);
IkReal x11293=IKcos(j4);
IkReal x11294=(sj1*sj2);
IkReal x11295=((1.0)*cj1);
IkReal x11296=(gconst4*r01);
IkReal x11297=(cj2*sj1);
IkReal x11298=(gconst4*r21);
IkReal x11299=(gconst5*r00);
IkReal x11300=(gconst5*sj3);
IkReal x11301=(cj3*gconst5);
IkReal x11302=(gconst4*r00);
IkReal x11303=(gconst5*r20);
IkReal x11304=(gconst4*r20);
IkReal x11305=(cj2*x11295);
IkReal x11306=((1.0)*x11292);
IkReal x11307=(cj3*x11293);
IkReal x11308=(x11293*x11300);
IkReal x11309=((1.0)*sj3*x11293);
evalcond[0]=((-1.0)*r12*x11293);
evalcond[1]=(x11297+((cj1*sj2))+((cj3*r12*x11292)));
evalcond[2]=((((-1.0)*x11303*x11306))+((x11292*x11298)));
evalcond[3]=((1.0)+(((-1.0)*x11299*x11306))+((x11292*x11296)));
evalcond[4]=(x11294+(((-1.0)*x11305))+(((-1.0)*r12*sj3*x11306)));
evalcond[5]=((((-1.0)*x11296*x11309))+((r01*x11301))+((sj3*x11293*x11299))+((cj3*x11302)));
evalcond[6]=(((sj3*x11302))+((r01*x11300))+((x11296*x11307))+(((-1.0)*x11299*x11307)));
evalcond[7]=((((-1.0)*r20*x11293*x11301))+((sj3*x11304))+x11294+(((-1.0)*x11305))+((r21*x11300))+((x11298*x11307)));
evalcond[8]=((((-1.0)*x11298*x11309))+((r20*x11308))+(((-1.0)*x11297))+((r21*x11301))+(((-1.0)*sj2*x11295))+((cj3*x11304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11310=((1.0)*gconst5);
IkReal x11311=(gconst4*r01);
CheckValue<IkReal> x11312=IKPowWithIntegerCheck((x11311+(((-1.0)*r00*x11310))),-1);
if(!x11312.valid){
continue;
}
CheckValue<IkReal> x11313=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11310))+((cj3*x11311))),-1);
if(!x11313.valid){
continue;
}
if( IKabs(((-1.0)*(x11312.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11313.value)*(((((-1.0)*r01*sj3*x11310))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11312.value)))+IKsqr(((x11313.value)*(((((-1.0)*r01*sj3*x11310))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11312.value)), ((x11313.value)*(((((-1.0)*r01*sj3*x11310))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11314=IKsin(j4);
IkReal x11315=IKcos(j4);
IkReal x11316=(sj1*sj2);
IkReal x11317=((1.0)*cj1);
IkReal x11318=(gconst4*r01);
IkReal x11319=(cj2*sj1);
IkReal x11320=(gconst4*r21);
IkReal x11321=(gconst5*r00);
IkReal x11322=(gconst5*sj3);
IkReal x11323=(cj3*gconst5);
IkReal x11324=(gconst4*r00);
IkReal x11325=(gconst5*r20);
IkReal x11326=(gconst4*r20);
IkReal x11327=(cj2*x11317);
IkReal x11328=((1.0)*x11314);
IkReal x11329=(cj3*x11315);
IkReal x11330=(x11315*x11322);
IkReal x11331=((1.0)*sj3*x11315);
evalcond[0]=((-1.0)*r12*x11315);
evalcond[1]=(((cj1*sj2))+x11319+((cj3*r12*x11314)));
evalcond[2]=((((-1.0)*x11325*x11328))+((x11314*x11320)));
evalcond[3]=((1.0)+((x11314*x11318))+(((-1.0)*x11321*x11328)));
evalcond[4]=((((-1.0)*r12*sj3*x11328))+x11316+(((-1.0)*x11327)));
evalcond[5]=(((cj3*x11324))+((sj3*x11315*x11321))+(((-1.0)*x11318*x11331))+((r01*x11323)));
evalcond[6]=((((-1.0)*x11321*x11329))+((sj3*x11324))+((x11318*x11329))+((r01*x11322)));
evalcond[7]=(((x11320*x11329))+x11316+((r21*x11322))+((sj3*x11326))+(((-1.0)*r20*x11315*x11323))+(((-1.0)*x11327)));
evalcond[8]=(((r20*x11330))+((r21*x11323))+((cj3*x11326))+(((-1.0)*x11320*x11331))+(((-1.0)*x11319))+(((-1.0)*sj2*x11317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11332=((1.0)*gconst4);
IkReal x11333=(gconst5*r00);
CheckValue<IkReal> x11334=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11333))),-1);
if(!x11334.valid){
continue;
}
CheckValue<IkReal> x11335=IKPowWithIntegerCheck((((sj3*x11333))+(((-1.0)*r01*sj3*x11332))),-1);
if(!x11335.valid){
continue;
}
if( IKabs(((-1.0)*(x11334.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11335.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11332)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11334.value)))+IKsqr(((x11335.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11332))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11334.value)), ((x11335.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11332))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11336=IKsin(j4);
IkReal x11337=IKcos(j4);
IkReal x11338=(sj1*sj2);
IkReal x11339=((1.0)*cj1);
IkReal x11340=(gconst4*r01);
IkReal x11341=(cj2*sj1);
IkReal x11342=(gconst4*r21);
IkReal x11343=(gconst5*r00);
IkReal x11344=(gconst5*sj3);
IkReal x11345=(cj3*gconst5);
IkReal x11346=(gconst4*r00);
IkReal x11347=(gconst5*r20);
IkReal x11348=(gconst4*r20);
IkReal x11349=(cj2*x11339);
IkReal x11350=((1.0)*x11336);
IkReal x11351=(cj3*x11337);
IkReal x11352=(x11337*x11344);
IkReal x11353=((1.0)*sj3*x11337);
evalcond[0]=((-1.0)*r12*x11337);
evalcond[1]=(((cj1*sj2))+x11341+((cj3*r12*x11336)));
evalcond[2]=((((-1.0)*x11347*x11350))+((x11336*x11342)));
evalcond[3]=((1.0)+(((-1.0)*x11343*x11350))+((x11336*x11340)));
evalcond[4]=(x11338+(((-1.0)*x11349))+(((-1.0)*r12*sj3*x11350)));
evalcond[5]=((((-1.0)*x11340*x11353))+((cj3*x11346))+((r01*x11345))+((sj3*x11337*x11343)));
evalcond[6]=(((sj3*x11346))+(((-1.0)*x11343*x11351))+((x11340*x11351))+((r01*x11344)));
evalcond[7]=(((sj3*x11348))+(((-1.0)*r20*x11337*x11345))+x11338+((x11342*x11351))+(((-1.0)*x11349))+((r21*x11344)));
evalcond[8]=((((-1.0)*x11342*x11353))+((r20*x11352))+(((-1.0)*sj2*x11339))+((cj3*x11348))+(((-1.0)*x11341))+((r21*x11345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11354=gconst4*gconst4;
IkReal x11355=gconst5*gconst5;
IkReal x11356=(r01*r20);
IkReal x11357=(gconst4*sj3);
IkReal x11358=(r01*r21);
IkReal x11359=((1.0)*cj3);
IkReal x11360=(r00*r21);
IkReal x11361=(r00*r20);
IkReal x11362=(cj3*gconst4*gconst5);
IkReal x11363=((1.0)*x11355);
CheckValue<IkReal> x11364=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11354*x11358*x11359))+(((-1.0)*r02*r22*x11359))+((x11356*x11362))+((x11360*x11362))+(((-1.0)*x11355*x11359*x11361)))),-1);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal((((r00*r22*x11357))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11357*x11361))+((sj3*x11354*x11360))+((gconst5*x11357*x11358))+(((-1.0)*sj3*x11356*x11363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11364.value)))+(x11365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11366=IKsin(j4);
IkReal x11367=IKcos(j4);
IkReal x11368=(sj1*sj2);
IkReal x11369=(gconst5*sj3);
IkReal x11370=(gconst4*r11);
IkReal x11371=(gconst5*r10);
IkReal x11372=((1.0)*cj1);
IkReal x11373=(gconst4*r01);
IkReal x11374=(cj2*sj1);
IkReal x11375=(gconst5*r00);
IkReal x11376=(gconst4*sj3);
IkReal x11377=(cj3*gconst5);
IkReal x11378=(cj3*gconst4);
IkReal x11379=(gconst4*r21);
IkReal x11380=(cj2*x11372);
IkReal x11381=((1.0)*x11367);
IkReal x11382=((1.0)*x11366);
IkReal x11383=(cj3*x11366);
IkReal x11384=(cj3*x11367);
evalcond[0]=((((-1.0)*gconst5*r20*x11382))+(((-1.0)*r22*x11381))+((x11366*x11379)));
evalcond[1]=(((x11366*x11370))+(((-1.0)*r12*x11381))+(((-1.0)*x11371*x11382)));
evalcond[2]=((1.0)+(((-1.0)*x11375*x11382))+((x11366*x11373))+(((-1.0)*r02*x11381)));
evalcond[3]=(((r02*x11383))+((r00*x11376))+((x11373*x11384))+((r01*x11369))+(((-1.0)*cj3*x11375*x11381)));
evalcond[4]=(((r00*x11378))+(((-1.0)*sj3*x11373*x11381))+((r01*x11377))+(((-1.0)*r02*sj3*x11382))+((r00*x11367*x11369)));
evalcond[5]=(((r12*x11383))+((cj1*sj2))+x11374+((r10*x11376))+(((-1.0)*cj3*x11371*x11381))+((r11*x11369))+((x11370*x11384)));
evalcond[6]=(((r20*x11376))+((r21*x11369))+(((-1.0)*r20*x11377*x11381))+((r21*x11367*x11378))+x11368+(((-1.0)*x11380))+((r22*x11383)));
evalcond[7]=((((-1.0)*r12*sj3*x11382))+(((-1.0)*sj3*x11370*x11381))+x11368+(((-1.0)*x11380))+((r10*x11378))+((r11*x11377))+((r10*x11367*x11369)));
evalcond[8]=((((-1.0)*sj2*x11372))+((r20*x11378))+(((-1.0)*x11374))+((r21*x11377))+((r20*x11367*x11369))+(((-1.0)*r21*x11376*x11381))+(((-1.0)*r22*sj3*x11382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11385=gconst4*gconst4;
IkReal x11386=gconst5*gconst5;
IkReal x11387=(cj3*r01);
IkReal x11388=(r00*sj3);
IkReal x11389=(r01*sj3);
IkReal x11390=(cj3*r00);
IkReal x11391=(gconst4*gconst5*r21);
IkReal x11392=(r20*x11386);
IkReal x11393=(r21*x11385);
IkReal x11394=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x11395=IKPowWithIntegerCheck(IKsign((((x11388*x11392))+((x11389*x11393))+(((-1.0)*x11388*x11391))+((r02*r22*sj3))+(((-1.0)*x11389*x11394)))),-1);
if(!x11395.valid){
continue;
}
CheckValue<IkReal> x11396 = IKatan2WithCheck(IkReal((((gconst5*r22*x11387))+((gconst4*r22*x11390)))),IkReal(((((-1.0)*x11390*x11394))+((x11387*x11391))+((x11390*x11393))+(((-1.0)*x11387*x11392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11395.value)))+(x11396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11397=IKsin(j4);
IkReal x11398=IKcos(j4);
IkReal x11399=(sj1*sj2);
IkReal x11400=(gconst5*sj3);
IkReal x11401=(gconst4*r11);
IkReal x11402=(gconst5*r10);
IkReal x11403=((1.0)*cj1);
IkReal x11404=(gconst4*r01);
IkReal x11405=(cj2*sj1);
IkReal x11406=(gconst5*r00);
IkReal x11407=(gconst4*sj3);
IkReal x11408=(cj3*gconst5);
IkReal x11409=(cj3*gconst4);
IkReal x11410=(gconst4*r21);
IkReal x11411=(cj2*x11403);
IkReal x11412=((1.0)*x11398);
IkReal x11413=((1.0)*x11397);
IkReal x11414=(cj3*x11397);
IkReal x11415=(cj3*x11398);
evalcond[0]=((((-1.0)*gconst5*r20*x11413))+((x11397*x11410))+(((-1.0)*r22*x11412)));
evalcond[1]=((((-1.0)*x11402*x11413))+(((-1.0)*r12*x11412))+((x11397*x11401)));
evalcond[2]=((1.0)+(((-1.0)*x11406*x11413))+((x11397*x11404))+(((-1.0)*r02*x11412)));
evalcond[3]=((((-1.0)*cj3*x11406*x11412))+((x11404*x11415))+((r02*x11414))+((r01*x11400))+((r00*x11407)));
evalcond[4]=((((-1.0)*r02*sj3*x11413))+(((-1.0)*sj3*x11404*x11412))+((r00*x11398*x11400))+((r01*x11408))+((r00*x11409)));
evalcond[5]=(x11405+((cj1*sj2))+((r10*x11407))+((r12*x11414))+((r11*x11400))+((x11401*x11415))+(((-1.0)*cj3*x11402*x11412)));
evalcond[6]=((((-1.0)*r20*x11408*x11412))+((r21*x11400))+((r21*x11398*x11409))+x11399+((r22*x11414))+((r20*x11407))+(((-1.0)*x11411)));
evalcond[7]=(((r10*x11398*x11400))+((r10*x11409))+x11399+((r11*x11408))+(((-1.0)*x11411))+(((-1.0)*r12*sj3*x11413))+(((-1.0)*sj3*x11401*x11412)));
evalcond[8]=((((-1.0)*r22*sj3*x11413))+((r21*x11408))+(((-1.0)*sj2*x11403))+((r20*x11409))+(((-1.0)*r21*x11407*x11412))+(((-1.0)*x11405))+((r20*x11398*x11400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11416.valid){
continue;
}
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11416.value)))+(x11417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11418=IKsin(j4);
IkReal x11419=IKcos(j4);
IkReal x11420=(sj1*sj2);
IkReal x11421=(gconst5*sj3);
IkReal x11422=(gconst4*r11);
IkReal x11423=(gconst5*r10);
IkReal x11424=((1.0)*cj1);
IkReal x11425=(gconst4*r01);
IkReal x11426=(cj2*sj1);
IkReal x11427=(gconst5*r00);
IkReal x11428=(gconst4*sj3);
IkReal x11429=(cj3*gconst5);
IkReal x11430=(cj3*gconst4);
IkReal x11431=(gconst4*r21);
IkReal x11432=(cj2*x11424);
IkReal x11433=((1.0)*x11419);
IkReal x11434=((1.0)*x11418);
IkReal x11435=(cj3*x11418);
IkReal x11436=(cj3*x11419);
evalcond[0]=((((-1.0)*gconst5*r20*x11434))+((x11418*x11431))+(((-1.0)*r22*x11433)));
evalcond[1]=((((-1.0)*x11423*x11434))+(((-1.0)*r12*x11433))+((x11418*x11422)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11433))+(((-1.0)*x11427*x11434))+((x11418*x11425)));
evalcond[3]=(((r02*x11435))+(((-1.0)*cj3*x11427*x11433))+((x11425*x11436))+((r01*x11421))+((r00*x11428)));
evalcond[4]=(((r01*x11429))+((r00*x11430))+(((-1.0)*sj3*x11425*x11433))+((r00*x11419*x11421))+(((-1.0)*r02*sj3*x11434)));
evalcond[5]=(x11426+((r10*x11428))+(((-1.0)*cj3*x11423*x11433))+((x11422*x11436))+((cj1*sj2))+((r11*x11421))+((r12*x11435)));
evalcond[6]=((((-1.0)*r20*x11429*x11433))+((r20*x11428))+x11420+((r21*x11419*x11430))+((r21*x11421))+((r22*x11435))+(((-1.0)*x11432)));
evalcond[7]=(x11420+((r10*x11419*x11421))+((r10*x11430))+(((-1.0)*r12*sj3*x11434))+((r11*x11429))+(((-1.0)*sj3*x11422*x11433))+(((-1.0)*x11432)));
evalcond[8]=((((-1.0)*r21*x11428*x11433))+((r20*x11430))+((r20*x11419*x11421))+((r21*x11429))+(((-1.0)*x11426))+(((-1.0)*r22*sj3*x11434))+(((-1.0)*sj2*x11424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11437=((-1.0)*r21);
IkReal x11438=((-1.0)*px);
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(x11437),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
IkReal x11439=((1.0)*(x11440.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11439)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11438);
rxp1_1=(px*r21);
rxp1_2=(r11*x11438);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11439)));
IkReal gconst4=x11437;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11441=((-1.0)*r21);
IkReal x11442=((-1.0)*px);
CheckValue<IkReal> x11444 = IKatan2WithCheck(IkReal(x11441),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11444.valid){
continue;
}
IkReal x11443=((1.0)*(x11444.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11443)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11442);
rxp1_1=(px*r21);
rxp1_2=(r11*x11442);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11443)));
IkReal gconst4=x11441;
IkReal gconst5=((1.0)*r20);
IkReal x11445=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11445*(r10*r10)))+(((-1.0)*x11445*(r21*r21)))+(((-1.0)*x11445)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11446=((-1.0)*r21);
IkReal x11447=((-1.0)*px);
CheckValue<IkReal> x11449 = IKatan2WithCheck(IkReal(x11446),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11449.valid){
continue;
}
IkReal x11448=((1.0)*(x11449.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11448)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11447);
rxp1_1=(px*r21);
rxp1_2=(r11*x11447);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11448)));
IkReal gconst4=x11446;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11451=IKPowWithIntegerCheck(r02,-1);
if(!x11451.valid){
continue;
}
IkReal x11450=x11451.value;
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(cj3,-1);
if(!x11452.valid){
continue;
}
if( IKabs((x11450*(x11452.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11450)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11450*(x11452.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x11450))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11450*(x11452.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x11450));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11453=IKsin(j4);
IkReal x11454=IKcos(j4);
IkReal x11455=(gconst5*sj3);
IkReal x11456=(gconst4*r11);
IkReal x11457=(cj1*cj2);
IkReal x11458=(sj1*sj2);
IkReal x11459=((1.0)*gconst5);
IkReal x11460=(gconst4*r21);
IkReal x11461=((1.0)*sj0);
IkReal x11462=(cj3*gconst4);
IkReal x11463=(gconst4*sj3);
IkReal x11464=(cj3*gconst5);
IkReal x11465=(r20*x11454);
IkReal x11466=(r10*x11454);
IkReal x11467=((1.0)*cj2*sj1);
IkReal x11468=((1.0)*cj1*sj2);
IkReal x11469=(cj3*x11454);
IkReal x11470=(r02*x11453);
IkReal x11471=((1.0)*sj3*x11454);
evalcond[0]=((((-1.0)*r02*x11454))+(((-1.0)*x11461)));
evalcond[1]=((((-1.0)*r20*x11453*x11459))+((x11453*x11460)));
evalcond[2]=(cj0+((x11453*x11456))+(((-1.0)*r10*x11453*x11459)));
evalcond[3]=(((cj0*x11457))+(((-1.0)*cj0*x11458))+(((-1.0)*sj3*x11470)));
evalcond[4]=(((cj3*x11470))+(((-1.0)*cj0*x11467))+(((-1.0)*cj0*x11468)));
evalcond[5]=(x11458+((r21*x11455))+((x11460*x11469))+(((-1.0)*x11457))+(((-1.0)*cj3*x11459*x11465))+((r20*x11463)));
evalcond[6]=((((-1.0)*x11467))+(((-1.0)*x11468))+(((-1.0)*x11460*x11471))+((r20*x11462))+((x11455*x11465))+((r21*x11464)));
evalcond[7]=((((-1.0)*x11458*x11461))+((sj0*x11457))+((r11*x11464))+((r10*x11462))+(((-1.0)*x11456*x11471))+((x11455*x11466)));
evalcond[8]=(((x11456*x11469))+(((-1.0)*cj1*sj2*x11461))+((r10*x11463))+(((-1.0)*cj3*x11459*x11466))+(((-1.0)*cj2*sj1*x11461))+((r11*x11455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11472=((1.0)*gconst5);
CheckValue<IkReal> x11473=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11472))),-1);
if(!x11473.valid){
continue;
}
CheckValue<IkReal> x11474=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11472))+((cj3*gconst4*r21))),-1);
if(!x11474.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11474.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11472))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11473.value)))+IKsqr(((x11474.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11472))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11473.value)), ((x11474.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11472))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11475=IKsin(j4);
IkReal x11476=IKcos(j4);
IkReal x11477=(gconst5*sj3);
IkReal x11478=(gconst4*r11);
IkReal x11479=(cj1*cj2);
IkReal x11480=(sj1*sj2);
IkReal x11481=((1.0)*gconst5);
IkReal x11482=(gconst4*r21);
IkReal x11483=((1.0)*sj0);
IkReal x11484=(cj3*gconst4);
IkReal x11485=(gconst4*sj3);
IkReal x11486=(cj3*gconst5);
IkReal x11487=(r20*x11476);
IkReal x11488=(r10*x11476);
IkReal x11489=((1.0)*cj2*sj1);
IkReal x11490=((1.0)*cj1*sj2);
IkReal x11491=(cj3*x11476);
IkReal x11492=(r02*x11475);
IkReal x11493=((1.0)*sj3*x11476);
evalcond[0]=((((-1.0)*x11483))+(((-1.0)*r02*x11476)));
evalcond[1]=(((x11475*x11482))+(((-1.0)*r20*x11475*x11481)));
evalcond[2]=(((x11475*x11478))+cj0+(((-1.0)*r10*x11475*x11481)));
evalcond[3]=((((-1.0)*sj3*x11492))+((cj0*x11479))+(((-1.0)*cj0*x11480)));
evalcond[4]=(((cj3*x11492))+(((-1.0)*cj0*x11489))+(((-1.0)*cj0*x11490)));
evalcond[5]=(((x11482*x11491))+(((-1.0)*x11479))+((r20*x11485))+x11480+(((-1.0)*cj3*x11481*x11487))+((r21*x11477)));
evalcond[6]=((((-1.0)*x11490))+(((-1.0)*x11482*x11493))+((r20*x11484))+((x11477*x11487))+(((-1.0)*x11489))+((r21*x11486)));
evalcond[7]=((((-1.0)*x11480*x11483))+((r11*x11486))+((sj0*x11479))+(((-1.0)*x11478*x11493))+((x11477*x11488))+((r10*x11484)));
evalcond[8]=(((x11478*x11491))+(((-1.0)*cj1*sj2*x11483))+((r11*x11477))+(((-1.0)*cj2*sj1*x11483))+(((-1.0)*cj3*x11481*x11488))+((r10*x11485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11494=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11494.valid){
continue;
}
CheckValue<IkReal> x11495=IKPowWithIntegerCheck(r02,-1);
if(!x11495.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11495.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11494.value)))+IKsqr(((-1.0)*sj0*(x11495.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11494.value)), ((-1.0)*sj0*(x11495.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11496=IKsin(j4);
IkReal x11497=IKcos(j4);
IkReal x11498=(gconst5*sj3);
IkReal x11499=(gconst4*r11);
IkReal x11500=(cj1*cj2);
IkReal x11501=(sj1*sj2);
IkReal x11502=((1.0)*gconst5);
IkReal x11503=(gconst4*r21);
IkReal x11504=((1.0)*sj0);
IkReal x11505=(cj3*gconst4);
IkReal x11506=(gconst4*sj3);
IkReal x11507=(cj3*gconst5);
IkReal x11508=(r20*x11497);
IkReal x11509=(r10*x11497);
IkReal x11510=((1.0)*cj2*sj1);
IkReal x11511=((1.0)*cj1*sj2);
IkReal x11512=(cj3*x11497);
IkReal x11513=(r02*x11496);
IkReal x11514=((1.0)*sj3*x11497);
evalcond[0]=((((-1.0)*x11504))+(((-1.0)*r02*x11497)));
evalcond[1]=(((x11496*x11503))+(((-1.0)*r20*x11496*x11502)));
evalcond[2]=(cj0+(((-1.0)*r10*x11496*x11502))+((x11496*x11499)));
evalcond[3]=((((-1.0)*sj3*x11513))+(((-1.0)*cj0*x11501))+((cj0*x11500)));
evalcond[4]=(((cj3*x11513))+(((-1.0)*cj0*x11510))+(((-1.0)*cj0*x11511)));
evalcond[5]=(x11501+((r21*x11498))+(((-1.0)*cj3*x11502*x11508))+(((-1.0)*x11500))+((r20*x11506))+((x11503*x11512)));
evalcond[6]=((((-1.0)*x11503*x11514))+((x11498*x11508))+((r21*x11507))+(((-1.0)*x11510))+(((-1.0)*x11511))+((r20*x11505)));
evalcond[7]=((((-1.0)*x11501*x11504))+(((-1.0)*x11499*x11514))+((x11498*x11509))+((r11*x11507))+((r10*x11505))+((sj0*x11500)));
evalcond[8]=((((-1.0)*cj1*sj2*x11504))+(((-1.0)*cj3*x11502*x11509))+((x11499*x11512))+((r11*x11498))+((r10*x11506))+(((-1.0)*cj2*sj1*x11504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11515=gconst5*gconst5;
IkReal x11516=r20*r20;
IkReal x11517=gconst4*gconst4;
IkReal x11518=r21*r21;
IkReal x11519=((1.0)*gconst4);
IkReal x11520=(gconst5*sj3);
IkReal x11521=(gconst4*r21);
IkReal x11522=(sj1*sj2);
IkReal x11523=(cj1*cj2);
IkReal x11524=(gconst5*r20);
IkReal x11525=((1.0)*cj3);
IkReal x11526=(r20*sj3);
CheckValue<IkReal> x11527=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x11521*x11524))+(((-1.0)*x11515*x11516*x11525))+(((-1.0)*x11517*x11518*x11525))+(((-1.0)*x11525*(r22*r22))))),-1);
if(!x11527.valid){
continue;
}
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal((((r21*r22*x11520))+((gconst4*r22*x11526))+(((-1.0)*r22*x11523))+((r22*x11522)))),IkReal(((((-1.0)*x11516*x11519*x11520))+(((-1.0)*x11522*x11524))+((x11521*x11522))+((r21*x11517*x11526))+(((-1.0)*r21*x11515*x11526))+((x11523*x11524))+((gconst4*x11518*x11520))+(((-1.0)*r21*x11519*x11523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11527.value)))+(x11528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11529=IKsin(j4);
IkReal x11530=IKcos(j4);
IkReal x11531=(gconst4*r11);
IkReal x11532=(cj1*cj2);
IkReal x11533=(sj1*sj2);
IkReal x11534=(gconst4*sj3);
IkReal x11535=(gconst5*r10);
IkReal x11536=((1.0)*sj0);
IkReal x11537=(cj2*sj1);
IkReal x11538=(gconst4*r01);
IkReal x11539=(gconst4*r21);
IkReal x11540=((1.0)*cj0);
IkReal x11541=(gconst5*r00);
IkReal x11542=(gconst5*sj3);
IkReal x11543=(cj3*gconst5);
IkReal x11544=(cj3*gconst4);
IkReal x11545=((1.0)*x11530);
IkReal x11546=((1.0)*x11529);
IkReal x11547=(cj3*x11529);
IkReal x11548=((1.0)*cj1*sj2);
IkReal x11549=(cj3*x11530);
IkReal x11550=(x11530*x11542);
evalcond[0]=(((x11529*x11539))+(((-1.0)*gconst5*r20*x11546))+(((-1.0)*r22*x11545)));
evalcond[1]=(((x11529*x11531))+(((-1.0)*x11535*x11546))+cj0+(((-1.0)*r12*x11545)));
evalcond[2]=(((x11529*x11538))+(((-1.0)*x11541*x11546))+(((-1.0)*r02*x11545))+(((-1.0)*x11536)));
evalcond[3]=(x11533+(((-1.0)*r20*x11543*x11545))+((x11539*x11549))+((r21*x11542))+((r20*x11534))+((r22*x11547))+(((-1.0)*x11532)));
evalcond[4]=((((-1.0)*r21*x11534*x11545))+((r20*x11544))+(((-1.0)*r22*sj3*x11546))+((r21*x11543))+(((-1.0)*x11537))+(((-1.0)*x11548))+((r20*x11550)));
evalcond[5]=(((sj3*x11530*x11541))+((r00*x11544))+((r01*x11543))+(((-1.0)*r02*sj3*x11546))+((cj0*x11532))+(((-1.0)*x11533*x11540))+(((-1.0)*r01*x11534*x11545)));
evalcond[6]=((((-1.0)*cj3*x11541*x11545))+((r01*x11542))+((x11538*x11549))+(((-1.0)*cj1*sj2*x11540))+(((-1.0)*x11537*x11540))+((r00*x11534))+((r02*x11547)));
evalcond[7]=(((r10*x11544))+((sj3*x11530*x11535))+(((-1.0)*sj3*x11531*x11545))+(((-1.0)*x11533*x11536))+((r11*x11543))+(((-1.0)*r12*sj3*x11546))+((sj0*x11532)));
evalcond[8]=((((-1.0)*cj1*sj2*x11536))+((r10*x11534))+((r12*x11547))+((r11*x11542))+((x11531*x11549))+(((-1.0)*cj3*x11535*x11545))+(((-1.0)*x11536*x11537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11551=((1.0)*gconst5);
CheckValue<IkReal> x11552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11551))+(((-1.0)*gconst4*r10)))),-1);
if(!x11552.valid){
continue;
}
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11551))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11552.value)))+(x11553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11554=IKsin(j4);
IkReal x11555=IKcos(j4);
IkReal x11556=(gconst4*r11);
IkReal x11557=(cj1*cj2);
IkReal x11558=(sj1*sj2);
IkReal x11559=(gconst4*sj3);
IkReal x11560=(gconst5*r10);
IkReal x11561=((1.0)*sj0);
IkReal x11562=(cj2*sj1);
IkReal x11563=(gconst4*r01);
IkReal x11564=(gconst4*r21);
IkReal x11565=((1.0)*cj0);
IkReal x11566=(gconst5*r00);
IkReal x11567=(gconst5*sj3);
IkReal x11568=(cj3*gconst5);
IkReal x11569=(cj3*gconst4);
IkReal x11570=((1.0)*x11555);
IkReal x11571=((1.0)*x11554);
IkReal x11572=(cj3*x11554);
IkReal x11573=((1.0)*cj1*sj2);
IkReal x11574=(cj3*x11555);
IkReal x11575=(x11555*x11567);
evalcond[0]=(((x11554*x11564))+(((-1.0)*gconst5*r20*x11571))+(((-1.0)*r22*x11570)));
evalcond[1]=(cj0+((x11554*x11556))+(((-1.0)*r12*x11570))+(((-1.0)*x11560*x11571)));
evalcond[2]=((((-1.0)*x11566*x11571))+((x11554*x11563))+(((-1.0)*x11561))+(((-1.0)*r02*x11570)));
evalcond[3]=(((x11564*x11574))+x11558+(((-1.0)*r20*x11568*x11570))+((r21*x11567))+((r22*x11572))+((r20*x11559))+(((-1.0)*x11557)));
evalcond[4]=(((r20*x11569))+((r20*x11575))+(((-1.0)*r22*sj3*x11571))+(((-1.0)*r21*x11559*x11570))+(((-1.0)*x11562))+(((-1.0)*x11573))+((r21*x11568)));
evalcond[5]=(((r00*x11569))+((r01*x11568))+(((-1.0)*x11558*x11565))+(((-1.0)*r02*sj3*x11571))+(((-1.0)*r01*x11559*x11570))+((sj3*x11555*x11566))+((cj0*x11557)));
evalcond[6]=(((x11563*x11574))+(((-1.0)*cj3*x11566*x11570))+((r01*x11567))+(((-1.0)*x11562*x11565))+(((-1.0)*cj1*sj2*x11565))+((r00*x11559))+((r02*x11572)));
evalcond[7]=(((r10*x11569))+(((-1.0)*x11558*x11561))+((r11*x11568))+((sj3*x11555*x11560))+((sj0*x11557))+(((-1.0)*r12*sj3*x11571))+(((-1.0)*sj3*x11556*x11570)));
evalcond[8]=(((x11556*x11574))+((r12*x11572))+((r11*x11567))+(((-1.0)*cj1*sj2*x11561))+((r10*x11559))+(((-1.0)*x11561*x11562))+(((-1.0)*cj3*x11560*x11570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11576=((1.0)*gconst5);
CheckValue<IkReal> x11577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11576)))),-1);
if(!x11577.valid){
continue;
}
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11576))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11577.value)))+(x11578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11579=IKsin(j4);
IkReal x11580=IKcos(j4);
IkReal x11581=(gconst4*r11);
IkReal x11582=(cj1*cj2);
IkReal x11583=(sj1*sj2);
IkReal x11584=(gconst4*sj3);
IkReal x11585=(gconst5*r10);
IkReal x11586=((1.0)*sj0);
IkReal x11587=(cj2*sj1);
IkReal x11588=(gconst4*r01);
IkReal x11589=(gconst4*r21);
IkReal x11590=((1.0)*cj0);
IkReal x11591=(gconst5*r00);
IkReal x11592=(gconst5*sj3);
IkReal x11593=(cj3*gconst5);
IkReal x11594=(cj3*gconst4);
IkReal x11595=((1.0)*x11580);
IkReal x11596=((1.0)*x11579);
IkReal x11597=(cj3*x11579);
IkReal x11598=((1.0)*cj1*sj2);
IkReal x11599=(cj3*x11580);
IkReal x11600=(x11580*x11592);
evalcond[0]=((((-1.0)*gconst5*r20*x11596))+((x11579*x11589))+(((-1.0)*r22*x11595)));
evalcond[1]=(cj0+((x11579*x11581))+(((-1.0)*x11585*x11596))+(((-1.0)*r12*x11595)));
evalcond[2]=((((-1.0)*x11586))+((x11579*x11588))+(((-1.0)*x11591*x11596))+(((-1.0)*r02*x11595)));
evalcond[3]=(((x11589*x11599))+((r20*x11584))+x11583+(((-1.0)*x11582))+(((-1.0)*r20*x11593*x11595))+((r21*x11592))+((r22*x11597)));
evalcond[4]=((((-1.0)*x11587))+((r20*x11594))+(((-1.0)*r22*sj3*x11596))+(((-1.0)*x11598))+(((-1.0)*r21*x11584*x11595))+((r21*x11593))+((r20*x11600)));
evalcond[5]=(((sj3*x11580*x11591))+((cj0*x11582))+((r01*x11593))+((r00*x11594))+(((-1.0)*r02*sj3*x11596))+(((-1.0)*x11583*x11590))+(((-1.0)*r01*x11584*x11595)));
evalcond[6]=(((r01*x11592))+(((-1.0)*cj3*x11591*x11595))+((x11588*x11599))+((r02*x11597))+(((-1.0)*x11587*x11590))+(((-1.0)*cj1*sj2*x11590))+((r00*x11584)));
evalcond[7]=(((sj0*x11582))+(((-1.0)*x11583*x11586))+((r10*x11594))+(((-1.0)*sj3*x11581*x11595))+((r11*x11593))+((sj3*x11580*x11585))+(((-1.0)*r12*sj3*x11596)));
evalcond[8]=(((x11581*x11599))+(((-1.0)*x11586*x11587))+(((-1.0)*cj1*sj2*x11586))+(((-1.0)*cj3*x11585*x11595))+((r11*x11592))+((r12*x11597))+((r10*x11584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11601=((-1.0)*r10);
IkReal x11603 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11603)==0){
continue;
}
IkReal x11602=pow(x11603,-0.5);
CheckValue<IkReal> x11604 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11601),IKFAST_ATAN2_MAGTHRESH);
if(!x11604.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11604.value));
IkReal gconst7=(r11*x11602);
IkReal gconst8=(x11601*x11602);
CheckValue<IkReal> x11605 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11606=((-1.0)*r10);
IkReal x11607=x11602;
CheckValue<IkReal> x11609 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11606),IKFAST_ATAN2_MAGTHRESH);
if(!x11609.valid){
continue;
}
IkReal x11608=((-1.0)*(x11609.value));
sj5=gconst7;
cj5=gconst8;
j5=x11608;
IkReal gconst6=x11608;
IkReal gconst7=(r11*x11607);
IkReal gconst8=(x11606*x11607);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11610=((1.0)*sj0);
IkReal x11611=((1.0)*gconst7);
CheckValue<IkReal> x11612 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11610))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11610))+(((-1.0)*cj0*r01*x11611))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11612.valid){
continue;
}
CheckValue<IkReal> x11613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11611))+(((-1.0)*gconst8*r21)))),-1);
if(!x11613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11612.value)+(((1.5707963267949)*(x11613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11614=IKsin(j4);
IkReal x11615=IKcos(j4);
IkReal x11616=(gconst7*sj3);
IkReal x11617=(cj3*gconst8);
IkReal x11618=(gconst8*sj3);
IkReal x11619=(cj1*cj2);
IkReal x11620=(cj3*gconst7);
IkReal x11621=(sj1*sj2);
IkReal x11622=((1.0)*sj0);
IkReal x11623=((1.0)*x11615);
IkReal x11624=((1.0)*x11614);
IkReal x11625=(cj3*x11614);
IkReal x11626=(gconst7*x11614);
IkReal x11627=((1.0)*cj2*sj1);
IkReal x11628=((1.0)*cj1*sj2);
evalcond[0]=(((r21*x11626))+(((-1.0)*r22*x11623))+(((-1.0)*gconst8*r20*x11624)));
evalcond[1]=(((r11*x11626))+(((-1.0)*r12*x11623))+cj0+(((-1.0)*gconst8*r10*x11624)));
evalcond[2]=((((-1.0)*x11622))+(((-1.0)*gconst8*r00*x11624))+((r01*x11626))+(((-1.0)*r02*x11623)));
evalcond[3]=(((r21*x11615*x11620))+x11621+(((-1.0)*x11619))+(((-1.0)*r20*x11617*x11623))+((r21*x11618))+((r22*x11625))+((r20*x11616)));
evalcond[4]=((((-1.0)*x11628))+(((-1.0)*x11627))+((r21*x11617))+(((-1.0)*r22*sj3*x11624))+((r20*x11620))+((r20*x11615*x11618))+(((-1.0)*r21*x11616*x11623)));
evalcond[5]=((((-1.0)*r02*sj3*x11624))+(((-1.0)*r01*x11616*x11623))+((cj0*x11619))+((r00*x11620))+(((-1.0)*cj0*x11621))+((r01*x11617))+((r00*x11615*x11618)));
evalcond[6]=((((-1.0)*cj0*x11627))+(((-1.0)*cj0*x11628))+(((-1.0)*r00*x11617*x11623))+((r02*x11625))+((r01*x11615*x11620))+((r00*x11616))+((r01*x11618)));
evalcond[7]=(((r11*x11617))+((sj0*x11619))+(((-1.0)*r11*x11616*x11623))+((r10*x11615*x11618))+(((-1.0)*x11621*x11622))+((r10*x11620))+(((-1.0)*r12*sj3*x11624)));
evalcond[8]=((((-1.0)*r10*x11617*x11623))+((r12*x11625))+((r11*x11618))+((r11*x11615*x11620))+(((-1.0)*cj1*sj2*x11622))+(((-1.0)*cj2*sj1*x11622))+((r10*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11629=((1.0)*gconst8);
CheckValue<IkReal> x11630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11629)))),-1);
if(!x11630.valid){
continue;
}
CheckValue<IkReal> x11631 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11630.value)))+(x11631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11632=IKsin(j4);
IkReal x11633=IKcos(j4);
IkReal x11634=(gconst7*sj3);
IkReal x11635=(cj3*gconst8);
IkReal x11636=(gconst8*sj3);
IkReal x11637=(cj1*cj2);
IkReal x11638=(cj3*gconst7);
IkReal x11639=(sj1*sj2);
IkReal x11640=((1.0)*sj0);
IkReal x11641=((1.0)*x11633);
IkReal x11642=((1.0)*x11632);
IkReal x11643=(cj3*x11632);
IkReal x11644=(gconst7*x11632);
IkReal x11645=((1.0)*cj2*sj1);
IkReal x11646=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x11641))+((r21*x11644))+(((-1.0)*gconst8*r20*x11642)));
evalcond[1]=((((-1.0)*r12*x11641))+((r11*x11644))+cj0+(((-1.0)*gconst8*r10*x11642)));
evalcond[2]=((((-1.0)*gconst8*r00*x11642))+((r01*x11644))+(((-1.0)*r02*x11641))+(((-1.0)*x11640)));
evalcond[3]=(x11639+((r21*x11633*x11638))+(((-1.0)*x11637))+((r22*x11643))+(((-1.0)*r20*x11635*x11641))+((r21*x11636))+((r20*x11634)));
evalcond[4]=((((-1.0)*r21*x11634*x11641))+((r21*x11635))+((r20*x11638))+(((-1.0)*r22*sj3*x11642))+((r20*x11633*x11636))+(((-1.0)*x11645))+(((-1.0)*x11646)));
evalcond[5]=((((-1.0)*r01*x11634*x11641))+((cj0*x11637))+((r00*x11633*x11636))+(((-1.0)*r02*sj3*x11642))+(((-1.0)*cj0*x11639))+((r00*x11638))+((r01*x11635)));
evalcond[6]=((((-1.0)*cj0*x11645))+(((-1.0)*cj0*x11646))+((r02*x11643))+((r01*x11633*x11638))+(((-1.0)*r00*x11635*x11641))+((r00*x11634))+((r01*x11636)));
evalcond[7]=(((r11*x11635))+((r10*x11638))+(((-1.0)*x11639*x11640))+(((-1.0)*r12*sj3*x11642))+(((-1.0)*r11*x11634*x11641))+((sj0*x11637))+((r10*x11633*x11636)));
evalcond[8]=((((-1.0)*r10*x11635*x11641))+((r11*x11636))+(((-1.0)*cj2*sj1*x11640))+((r10*x11634))+((r11*x11633*x11638))+((r12*x11643))+(((-1.0)*cj1*sj2*x11640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11647=((-1.0)*r11);
IkReal x11649 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11649)==0){
continue;
}
IkReal x11648=pow(x11649,-0.5);
CheckValue<IkReal> x11650 = IKatan2WithCheck(IkReal(x11647),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11650.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11650.value))));
IkReal gconst10=(x11647*x11648);
IkReal gconst11=((1.0)*r10*x11648);
CheckValue<IkReal> x11651 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11651.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11651.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11652=((-1.0)*r11);
CheckValue<IkReal> x11655 = IKatan2WithCheck(IkReal(x11652),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11655.valid){
continue;
}
IkReal x11653=((1.0)*(x11655.value));
IkReal x11654=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11653)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11653)));
IkReal gconst10=(x11652*x11654);
IkReal gconst11=((1.0)*r10*x11654);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x11656=((-1.0)*r11);
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal(x11656),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
IkReal x11657=((1.0)*(x11659.value));
IkReal x11658=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11657)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11657)));
IkReal gconst10=(x11656*x11658);
IkReal gconst11=((1.0)*r10*x11658);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11660=((-1.0)*r11);
CheckValue<IkReal> x11663 = IKatan2WithCheck(IkReal(x11660),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11663.valid){
continue;
}
IkReal x11661=((1.0)*(x11663.value));
IkReal x11662=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11661)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11661)));
IkReal gconst10=(x11660*x11662);
IkReal gconst11=((1.0)*r10*x11662);
IkReal x11664=r12*r12;
IkReal x11665=((1.0)*sj0);
IkReal x11666=(cj0*r02);
IkReal x11667=x11648;
j4eval[0]=((IKabs((((r12*x11666*x11667))+(((-1.0)*x11665*x11667))+((sj0*x11664*x11667)))))+(IKabs(((((-1.0)*r12*x11665))+(((-1.0)*x11666))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst10*r21))+(((-2.0)*gconst11*r20)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r22;
op[1]=((((2.0)*gconst10*r21))+(((-2.0)*gconst11*r20)));
op[2]=((-1.0)*r22);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11668=((-1.0)*r11);
CheckValue<IkReal> x11671 = IKatan2WithCheck(IkReal(x11668),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11671.valid){
continue;
}
IkReal x11669=((1.0)*(x11671.value));
IkReal x11670=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11669)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11669)));
IkReal gconst10=(x11668*x11670);
IkReal gconst11=((1.0)*r10*x11670);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11672=((-1.0)*r11);
CheckValue<IkReal> x11675 = IKatan2WithCheck(IkReal(x11672),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11675.valid){
continue;
}
IkReal x11673=((1.0)*(x11675.value));
IkReal x11674=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11673)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11673)));
IkReal gconst10=(x11672*x11674);
IkReal gconst11=((1.0)*r10*x11674);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11676=gconst11*gconst11;
IkReal x11677=gconst10*gconst10;
IkReal x11678=(gconst11*r01);
IkReal x11679=(cj3*gconst10);
IkReal x11680=(r00*r21);
IkReal x11681=(r22*sj3);
IkReal x11682=(gconst10*sj3);
IkReal x11683=((1.0)*cj3);
IkReal x11684=(r20*x11676);
CheckValue<IkReal> x11685 = IKatan2WithCheck(IkReal((((x11678*x11681))+((gconst10*r00*x11681)))),IkReal((((r21*x11678*x11682))+((sj3*x11677*x11680))+(((-1.0)*r01*sj3*x11684))+(((-1.0)*gconst11*r00*r20*x11682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11685.valid){
continue;
}
CheckValue<IkReal> x11686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11683))+((gconst11*x11679*x11680))+((r20*x11678*x11679))+(((-1.0)*r01*r21*x11677*x11683))+(((-1.0)*r00*x11683*x11684)))),-1);
if(!x11686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11685.value)+(((1.5707963267949)*(x11686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11687=IKsin(j4);
IkReal x11688=IKcos(j4);
IkReal x11689=(gconst10*sj3);
IkReal x11690=(cj3*gconst10);
IkReal x11691=(gconst11*r20);
IkReal x11692=(gconst11*r21);
IkReal x11693=(gconst11*r00);
IkReal x11694=(sj1*sj2);
IkReal x11695=(cj3*gconst11);
IkReal x11696=(gconst11*r10);
IkReal x11697=((1.0)*cj1);
IkReal x11698=(gconst11*sj3);
IkReal x11699=(sj2*x11697);
IkReal x11700=((1.0)*cj2*sj1);
IkReal x11701=((1.0)*x11688);
IkReal x11702=((1.0)*x11687);
IkReal x11703=(gconst10*x11687);
IkReal x11704=(cj3*x11687);
IkReal x11705=(sj3*x11688);
IkReal x11706=(x11700+x11699);
evalcond[0]=((((-1.0)*r22*x11701))+((r21*x11703))+(((-1.0)*x11691*x11702)));
evalcond[1]=(((r11*x11703))+(((-1.0)*x11696*x11702))+(((-1.0)*r12*x11701)));
evalcond[2]=((-1.0)+((r01*x11703))+(((-1.0)*x11693*x11702))+(((-1.0)*r02*x11701)));
evalcond[3]=(((r00*x11689))+(((-1.0)*cj3*x11693*x11701))+((r01*x11698))+((r02*x11704))+((r01*x11688*x11690)));
evalcond[4]=((((-1.0)*r01*x11689*x11701))+((x11693*x11705))+((r01*x11695))+((r00*x11690))+(((-1.0)*r02*sj3*x11702)));
evalcond[5]=(((r21*x11688*x11690))+x11694+((r22*x11704))+((sj3*x11692))+(((-1.0)*cj3*x11691*x11701))+(((-1.0)*cj2*x11697))+((r20*x11689)));
evalcond[6]=(((x11696*x11705))+(((-1.0)*r12*sj3*x11702))+(((-1.0)*x11694))+(((-1.0)*r11*x11689*x11701))+((r10*x11690))+((r11*x11695))+((cj1*cj2)));
evalcond[7]=(((r10*x11689))+(((-1.0)*r10*x11695*x11701))+(((-1.0)*x11706))+((r12*x11704))+((r11*x11698))+((r11*x11688*x11690)));
evalcond[8]=(((x11691*x11705))+(((-1.0)*r21*x11689*x11701))+((r20*x11690))+(((-1.0)*x11706))+(((-1.0)*r22*sj3*x11702))+((cj3*x11692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11707=((1.0)*gconst11);
CheckValue<IkReal> x11708=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x11707)))),-1);
if(!x11708.valid){
continue;
}
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*r20*x11707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11708.value)))+(x11709.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11710=IKsin(j4);
IkReal x11711=IKcos(j4);
IkReal x11712=(gconst10*sj3);
IkReal x11713=(cj3*gconst10);
IkReal x11714=(gconst11*r20);
IkReal x11715=(gconst11*r21);
IkReal x11716=(gconst11*r00);
IkReal x11717=(sj1*sj2);
IkReal x11718=(cj3*gconst11);
IkReal x11719=(gconst11*r10);
IkReal x11720=((1.0)*cj1);
IkReal x11721=(gconst11*sj3);
IkReal x11722=(sj2*x11720);
IkReal x11723=((1.0)*cj2*sj1);
IkReal x11724=((1.0)*x11711);
IkReal x11725=((1.0)*x11710);
IkReal x11726=(gconst10*x11710);
IkReal x11727=(cj3*x11710);
IkReal x11728=(sj3*x11711);
IkReal x11729=(x11722+x11723);
evalcond[0]=((((-1.0)*x11714*x11725))+(((-1.0)*r22*x11724))+((r21*x11726)));
evalcond[1]=((((-1.0)*r12*x11724))+((r11*x11726))+(((-1.0)*x11719*x11725)));
evalcond[2]=((-1.0)+((r01*x11726))+(((-1.0)*x11716*x11725))+(((-1.0)*r02*x11724)));
evalcond[3]=(((r01*x11711*x11713))+(((-1.0)*cj3*x11716*x11724))+((r01*x11721))+((r00*x11712))+((r02*x11727)));
evalcond[4]=(((x11716*x11728))+((r01*x11718))+(((-1.0)*r02*sj3*x11725))+((r00*x11713))+(((-1.0)*r01*x11712*x11724)));
evalcond[5]=(x11717+(((-1.0)*cj2*x11720))+((r20*x11712))+(((-1.0)*cj3*x11714*x11724))+((r22*x11727))+((sj3*x11715))+((r21*x11711*x11713)));
evalcond[6]=((((-1.0)*r12*sj3*x11725))+((x11719*x11728))+(((-1.0)*x11717))+(((-1.0)*r11*x11712*x11724))+((r10*x11713))+((cj1*cj2))+((r11*x11718)));
evalcond[7]=(((r12*x11727))+(((-1.0)*x11729))+(((-1.0)*r10*x11718*x11724))+((r11*x11711*x11713))+((r10*x11712))+((r11*x11721)));
evalcond[8]=((((-1.0)*x11729))+((r20*x11713))+(((-1.0)*r21*x11712*x11724))+((cj3*x11715))+(((-1.0)*r22*sj3*x11725))+((x11714*x11728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11730 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11730.valid){
continue;
}
CheckValue<IkReal> x11731=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11730.value)+(((1.5707963267949)*(x11731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11732=IKsin(j4);
IkReal x11733=IKcos(j4);
IkReal x11734=(gconst10*sj3);
IkReal x11735=(cj3*gconst10);
IkReal x11736=(gconst11*r20);
IkReal x11737=(gconst11*r21);
IkReal x11738=(gconst11*r00);
IkReal x11739=(sj1*sj2);
IkReal x11740=(cj3*gconst11);
IkReal x11741=(gconst11*r10);
IkReal x11742=((1.0)*cj1);
IkReal x11743=(gconst11*sj3);
IkReal x11744=(sj2*x11742);
IkReal x11745=((1.0)*cj2*sj1);
IkReal x11746=((1.0)*x11733);
IkReal x11747=((1.0)*x11732);
IkReal x11748=(gconst10*x11732);
IkReal x11749=(cj3*x11732);
IkReal x11750=(sj3*x11733);
IkReal x11751=(x11744+x11745);
evalcond[0]=((((-1.0)*r22*x11746))+((r21*x11748))+(((-1.0)*x11736*x11747)));
evalcond[1]=((((-1.0)*x11741*x11747))+(((-1.0)*r12*x11746))+((r11*x11748)));
evalcond[2]=((-1.0)+(((-1.0)*x11738*x11747))+((r01*x11748))+(((-1.0)*r02*x11746)));
evalcond[3]=(((r01*x11743))+((r00*x11734))+((r01*x11733*x11735))+((r02*x11749))+(((-1.0)*cj3*x11738*x11746)));
evalcond[4]=(((r01*x11740))+(((-1.0)*r02*sj3*x11747))+((r00*x11735))+(((-1.0)*r01*x11734*x11746))+((x11738*x11750)));
evalcond[5]=(x11739+(((-1.0)*cj3*x11736*x11746))+(((-1.0)*cj2*x11742))+((r21*x11733*x11735))+((r20*x11734))+((r22*x11749))+((sj3*x11737)));
evalcond[6]=((((-1.0)*x11739))+((x11741*x11750))+(((-1.0)*r11*x11734*x11746))+((r10*x11735))+((cj1*cj2))+((r11*x11740))+(((-1.0)*r12*sj3*x11747)));
evalcond[7]=(((r11*x11733*x11735))+((r10*x11734))+(((-1.0)*x11751))+(((-1.0)*r10*x11740*x11746))+((r12*x11749))+((r11*x11743)));
evalcond[8]=((((-1.0)*r21*x11734*x11746))+((x11736*x11750))+((r20*x11735))+(((-1.0)*r22*sj3*x11747))+(((-1.0)*x11751))+((cj3*x11737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11752=((-1.0)*r11);
CheckValue<IkReal> x11755 = IKatan2WithCheck(IkReal(x11752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11755.valid){
continue;
}
IkReal x11753=((1.0)*(x11755.value));
IkReal x11754=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11753)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11753)));
IkReal gconst10=(x11752*x11754);
IkReal gconst11=((1.0)*r10*x11754);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11756=((-1.0)*r11);
CheckValue<IkReal> x11759 = IKatan2WithCheck(IkReal(x11756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11759.valid){
continue;
}
IkReal x11757=((1.0)*(x11759.value));
IkReal x11758=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11757)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11757)));
IkReal gconst10=(x11756*x11758);
IkReal gconst11=((1.0)*r10*x11758);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11760=gconst11*gconst11;
IkReal x11761=gconst10*gconst10;
IkReal x11762=(gconst11*r01);
IkReal x11763=(cj3*gconst10);
IkReal x11764=(r00*r21);
IkReal x11765=(r22*sj3);
IkReal x11766=(gconst10*sj3);
IkReal x11767=((1.0)*cj3);
IkReal x11768=(r20*x11760);
CheckValue<IkReal> x11769 = IKatan2WithCheck(IkReal((((x11762*x11765))+((gconst10*r00*x11765)))),IkReal((((r21*x11762*x11766))+(((-1.0)*gconst11*r00*r20*x11766))+(((-1.0)*r01*sj3*x11768))+((sj3*x11761*x11764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11769.valid){
continue;
}
CheckValue<IkReal> x11770=IKPowWithIntegerCheck(IKsign((((r20*x11762*x11763))+((gconst11*x11763*x11764))+(((-1.0)*r00*x11767*x11768))+(((-1.0)*r02*r22*x11767))+(((-1.0)*r01*r21*x11761*x11767)))),-1);
if(!x11770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11769.value)+(((1.5707963267949)*(x11770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11771=IKsin(j4);
IkReal x11772=IKcos(j4);
IkReal x11773=(sj1*sj2);
IkReal x11774=(gconst10*sj3);
IkReal x11775=(cj3*r10);
IkReal x11776=(gconst11*r20);
IkReal x11777=(gconst10*r01);
IkReal x11778=(cj3*gconst11);
IkReal x11779=(gconst11*r00);
IkReal x11780=(gconst11*r10);
IkReal x11781=((1.0)*cj1);
IkReal x11782=(cj2*sj1);
IkReal x11783=(cj3*gconst10);
IkReal x11784=(gconst11*sj3);
IkReal x11785=(cj2*x11781);
IkReal x11786=((1.0)*x11772);
IkReal x11787=((1.0)*x11771);
IkReal x11788=(cj3*x11771);
IkReal x11789=(cj3*x11772);
IkReal x11790=(sj3*x11772);
IkReal x11791=(gconst10*x11771);
evalcond[0]=((((-1.0)*r22*x11786))+(((-1.0)*x11776*x11787))+((r21*x11791)));
evalcond[1]=(((r11*x11791))+(((-1.0)*r12*x11786))+(((-1.0)*x11780*x11787)));
evalcond[2]=((1.0)+(((-1.0)*x11779*x11787))+((x11771*x11777))+(((-1.0)*r02*x11786)));
evalcond[3]=((((-1.0)*r00*x11778*x11786))+((r02*x11788))+((r00*x11774))+((x11777*x11789))+((r01*x11784)));
evalcond[4]=(((x11779*x11790))+(((-1.0)*r01*x11774*x11786))+(((-1.0)*r02*sj3*x11787))+((r01*x11778))+((r00*x11783)));
evalcond[5]=(((r11*x11784))+x11782+((r10*x11774))+((r12*x11788))+((cj1*sj2))+((r11*x11772*x11783))+(((-1.0)*gconst11*x11775*x11786)));
evalcond[6]=(((r21*x11784))+x11773+((r20*x11774))+(((-1.0)*cj3*x11776*x11786))+((r22*x11788))+((r21*x11772*x11783))+(((-1.0)*x11785)));
evalcond[7]=(x11773+((gconst10*x11775))+(((-1.0)*r11*x11774*x11786))+((x11780*x11790))+((r11*x11778))+(((-1.0)*r12*sj3*x11787))+(((-1.0)*x11785)));
evalcond[8]=(((x11776*x11790))+(((-1.0)*sj2*x11781))+((r20*x11783))+(((-1.0)*x11782))+((r21*x11778))+(((-1.0)*r22*sj3*x11787))+(((-1.0)*r21*x11774*x11786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11792=((1.0)*gconst11);
CheckValue<IkReal> x11793=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11792)))),-1);
if(!x11793.valid){
continue;
}
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11793.value)))+(x11794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11795=IKsin(j4);
IkReal x11796=IKcos(j4);
IkReal x11797=(sj1*sj2);
IkReal x11798=(gconst10*sj3);
IkReal x11799=(cj3*r10);
IkReal x11800=(gconst11*r20);
IkReal x11801=(gconst10*r01);
IkReal x11802=(cj3*gconst11);
IkReal x11803=(gconst11*r00);
IkReal x11804=(gconst11*r10);
IkReal x11805=((1.0)*cj1);
IkReal x11806=(cj2*sj1);
IkReal x11807=(cj3*gconst10);
IkReal x11808=(gconst11*sj3);
IkReal x11809=(cj2*x11805);
IkReal x11810=((1.0)*x11796);
IkReal x11811=((1.0)*x11795);
IkReal x11812=(cj3*x11795);
IkReal x11813=(cj3*x11796);
IkReal x11814=(sj3*x11796);
IkReal x11815=(gconst10*x11795);
evalcond[0]=((((-1.0)*r22*x11810))+((r21*x11815))+(((-1.0)*x11800*x11811)));
evalcond[1]=((((-1.0)*x11804*x11811))+(((-1.0)*r12*x11810))+((r11*x11815)));
evalcond[2]=((1.0)+((x11795*x11801))+(((-1.0)*r02*x11810))+(((-1.0)*x11803*x11811)));
evalcond[3]=(((r02*x11812))+(((-1.0)*r00*x11802*x11810))+((x11801*x11813))+((r01*x11808))+((r00*x11798)));
evalcond[4]=(((r00*x11807))+(((-1.0)*r01*x11798*x11810))+((x11803*x11814))+((r01*x11802))+(((-1.0)*r02*sj3*x11811)));
evalcond[5]=((((-1.0)*gconst11*x11799*x11810))+((r11*x11796*x11807))+((r10*x11798))+((cj1*sj2))+((r11*x11808))+((r12*x11812))+x11806);
evalcond[6]=((((-1.0)*cj3*x11800*x11810))+x11797+((r21*x11808))+((r20*x11798))+((r22*x11812))+((r21*x11796*x11807))+(((-1.0)*x11809)));
evalcond[7]=(((gconst10*x11799))+x11797+(((-1.0)*r11*x11798*x11810))+(((-1.0)*x11809))+((r11*x11802))+((x11804*x11814))+(((-1.0)*r12*sj3*x11811)));
evalcond[8]=((((-1.0)*r22*sj3*x11811))+((r21*x11802))+(((-1.0)*r21*x11798*x11810))+((x11800*x11814))+(((-1.0)*sj2*x11805))+(((-1.0)*x11806))+((r20*x11807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11816 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11816.valid){
continue;
}
CheckValue<IkReal> x11817=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11816.value)+(((1.5707963267949)*(x11817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11818=IKsin(j4);
IkReal x11819=IKcos(j4);
IkReal x11820=(sj1*sj2);
IkReal x11821=(gconst10*sj3);
IkReal x11822=(cj3*r10);
IkReal x11823=(gconst11*r20);
IkReal x11824=(gconst10*r01);
IkReal x11825=(cj3*gconst11);
IkReal x11826=(gconst11*r00);
IkReal x11827=(gconst11*r10);
IkReal x11828=((1.0)*cj1);
IkReal x11829=(cj2*sj1);
IkReal x11830=(cj3*gconst10);
IkReal x11831=(gconst11*sj3);
IkReal x11832=(cj2*x11828);
IkReal x11833=((1.0)*x11819);
IkReal x11834=((1.0)*x11818);
IkReal x11835=(cj3*x11818);
IkReal x11836=(cj3*x11819);
IkReal x11837=(sj3*x11819);
IkReal x11838=(gconst10*x11818);
evalcond[0]=(((r21*x11838))+(((-1.0)*r22*x11833))+(((-1.0)*x11823*x11834)));
evalcond[1]=((((-1.0)*x11827*x11834))+(((-1.0)*r12*x11833))+((r11*x11838)));
evalcond[2]=((1.0)+((x11818*x11824))+(((-1.0)*x11826*x11834))+(((-1.0)*r02*x11833)));
evalcond[3]=(((x11824*x11836))+(((-1.0)*r00*x11825*x11833))+((r02*x11835))+((r00*x11821))+((r01*x11831)));
evalcond[4]=((((-1.0)*r02*sj3*x11834))+(((-1.0)*r01*x11821*x11833))+((x11826*x11837))+((r01*x11825))+((r00*x11830)));
evalcond[5]=(((cj1*sj2))+((r10*x11821))+((r11*x11831))+((r11*x11819*x11830))+(((-1.0)*gconst11*x11822*x11833))+((r12*x11835))+x11829);
evalcond[6]=(((r21*x11831))+((r22*x11835))+(((-1.0)*cj3*x11823*x11833))+((r21*x11819*x11830))+(((-1.0)*x11832))+((r20*x11821))+x11820);
evalcond[7]=(((gconst10*x11822))+(((-1.0)*r11*x11821*x11833))+((x11827*x11837))+(((-1.0)*x11832))+(((-1.0)*r12*sj3*x11834))+((r11*x11825))+x11820);
evalcond[8]=(((x11823*x11837))+(((-1.0)*r21*x11821*x11833))+(((-1.0)*x11829))+(((-1.0)*r22*sj3*x11834))+((r20*x11830))+(((-1.0)*sj2*x11828))+((r21*x11825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11839=((-1.0)*r11);
IkReal x11840=((-1.0)*r10);
CheckValue<IkReal> x11842 = IKatan2WithCheck(IkReal(x11839),IkReal(x11840),IKFAST_ATAN2_MAGTHRESH);
if(!x11842.valid){
continue;
}
IkReal x11841=((1.0)*(x11842.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11841)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11840);
rxp1_1=(px*r21);
rxp1_2=(px*x11839);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11841)));
IkReal gconst10=x11839;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11843=((-1.0)*r11);
IkReal x11844=((-1.0)*r10);
CheckValue<IkReal> x11846 = IKatan2WithCheck(IkReal(x11843),IkReal(x11844),IKFAST_ATAN2_MAGTHRESH);
if(!x11846.valid){
continue;
}
IkReal x11845=((1.0)*(x11846.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11845)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11844);
rxp1_1=(px*r21);
rxp1_2=(px*x11843);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11845)));
IkReal gconst10=x11843;
IkReal gconst11=((1.0)*r10);
IkReal x11847=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x11847))+(((-1.0)*r11*r21*x11847)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11848=((-1.0)*r11);
IkReal x11849=((-1.0)*r10);
CheckValue<IkReal> x11851 = IKatan2WithCheck(IkReal(x11848),IkReal(x11849),IKFAST_ATAN2_MAGTHRESH);
if(!x11851.valid){
continue;
}
IkReal x11850=((1.0)*(x11851.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11850)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11849);
rxp1_1=(px*r21);
rxp1_2=(px*x11848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11850)));
IkReal gconst10=x11848;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11852=((-1.0)*r11);
IkReal x11853=((-1.0)*r10);
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(x11852),IkReal(x11853),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
IkReal x11854=((1.0)*(x11855.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11853);
rxp1_1=(px*r21);
rxp1_2=(px*x11852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=x11852;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11856=((-1.0)*r11);
IkReal x11857=((-1.0)*r10);
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal(x11856),IkReal(x11857),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
IkReal x11858=((1.0)*(x11859.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11858)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11857);
rxp1_1=(px*r21);
rxp1_2=(px*x11856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11858)));
IkReal gconst10=x11856;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11860=((-1.0)*r11);
IkReal x11861=((-1.0)*r10);
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(x11860),IkReal(x11861),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
IkReal x11862=((1.0)*(x11863.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11862)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11861);
rxp1_1=(px*r21);
rxp1_2=(px*x11860);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11862)));
IkReal gconst10=x11860;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11866=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11866.valid){
continue;
}
IkReal x11864=x11866.value;
IkReal x11865=(sj0*x11864);
cj4array[0]=(((sj1*sj2*x11865))+(((-1.0)*cj1*cj2*x11865)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11867=IKsin(j4);
IkReal x11868=IKcos(j4);
IkReal x11869=(gconst10*r21);
IkReal x11870=(gconst11*r20);
IkReal x11871=((1.0)*x11867);
IkReal x11872=((1.0)*x11868);
evalcond[0]=((-1.0)*r02*x11867);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11872)));
evalcond[2]=((((-1.0)*x11870*x11871))+((x11867*x11869)));
evalcond[3]=(((gconst10*r11*x11867))+(((-1.0)*gconst11*r10*x11871)));
evalcond[4]=(((x11868*x11870))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x11869*x11872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11874=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11874.valid){
continue;
}
IkReal x11873=x11874.value;
cj4array[0]=(((cj1*sj2*x11873))+((cj2*sj1*x11873)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11875=IKsin(j4);
IkReal x11876=IKcos(j4);
IkReal x11877=((1.0)*sj0);
IkReal x11878=(gconst10*x11875);
IkReal x11879=((1.0)*x11876);
IkReal x11880=((1.0)*gconst11*x11875);
evalcond[0]=((-1.0)*r02*x11875);
evalcond[1]=((((-1.0)*x11877))+(((-1.0)*r02*x11879)));
evalcond[2]=(((r21*x11878))+(((-1.0)*r20*x11880)));
evalcond[3]=(((r11*x11878))+(((-1.0)*r10*x11880)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*gconst10*r11*x11879))+((gconst11*r10*x11876))+(((-1.0)*sj1*sj2*x11877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(r02,-1);
if(!x11881.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11881.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11882=IKsin(j4);
IkReal x11883=IKcos(j4);
IkReal x11884=((1.0)*sj1);
IkReal x11885=(gconst10*x11882);
IkReal x11886=(gconst11*x11883);
IkReal x11887=((1.0)*gconst11*x11882);
IkReal x11888=((1.0)*gconst10*x11883);
evalcond[0]=((-1.0)*r02*x11882);
evalcond[1]=(((r21*x11885))+(((-1.0)*r20*x11887)));
evalcond[2]=(((r11*x11885))+(((-1.0)*r10*x11887)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x11888))+(((-1.0)*cj2*x11884))+((r20*x11886)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x11888))+((r10*x11886))+(((-1.0)*sj0*sj2*x11884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11889=((-1.0)*r11);
IkReal x11890=((-1.0)*r10);
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal(x11889),IkReal(x11890),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
IkReal x11891=((1.0)*(x11892.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11891)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11890);
rxp1_1=(px*r21);
rxp1_2=(px*x11889);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11891)));
IkReal gconst10=x11889;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11893=((-1.0)*r11);
IkReal x11894=((-1.0)*r10);
CheckValue<IkReal> x11896 = IKatan2WithCheck(IkReal(x11893),IkReal(x11894),IKFAST_ATAN2_MAGTHRESH);
if(!x11896.valid){
continue;
}
IkReal x11895=((1.0)*(x11896.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11895)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11894);
rxp1_1=(px*r21);
rxp1_2=(px*x11893);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11895)));
IkReal gconst10=x11893;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11897=((-1.0)*r11);
IkReal x11898=((-1.0)*r10);
CheckValue<IkReal> x11900 = IKatan2WithCheck(IkReal(x11897),IkReal(x11898),IKFAST_ATAN2_MAGTHRESH);
if(!x11900.valid){
continue;
}
IkReal x11899=((1.0)*(x11900.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11899)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11898);
rxp1_1=(px*r21);
rxp1_2=(px*x11897);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11899)));
IkReal gconst10=x11897;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11903=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11903.valid){
continue;
}
IkReal x11901=x11903.value;
IkReal x11902=(sj0*x11901);
cj4array[0]=((((-1.0)*cj1*cj2*x11902))+((sj1*sj2*x11902)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11904=IKsin(j4);
IkReal x11905=IKcos(j4);
IkReal x11906=(gconst10*r21);
IkReal x11907=((1.0)*x11905);
IkReal x11908=((1.0)*gconst11*x11904);
evalcond[0]=(r02*x11904);
evalcond[1]=((((-1.0)*r02*x11907))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x11908))+((x11904*x11906)));
evalcond[3]=(((gconst10*r11*x11904))+(((-1.0)*r10*x11908)));
evalcond[4]=((((-1.0)*cj2*sj1))+((x11905*x11906))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r20*x11907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11910=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11910.valid){
continue;
}
IkReal x11909=x11910.value;
cj4array[0]=(((cj2*sj1*x11909))+((cj1*sj2*x11909)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11911=IKsin(j4);
IkReal x11912=IKcos(j4);
IkReal x11913=((1.0)*sj0);
IkReal x11914=(gconst10*x11911);
IkReal x11915=((1.0)*x11912);
IkReal x11916=((1.0)*gconst11*x11911);
evalcond[0]=(r02*x11911);
evalcond[1]=((((-1.0)*r02*x11915))+(((-1.0)*x11913)));
evalcond[2]=((((-1.0)*r20*x11916))+((r21*x11914)));
evalcond[3]=(((r11*x11914))+(((-1.0)*r10*x11916)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst10*r11*x11912))+(((-1.0)*sj1*sj2*x11913))+(((-1.0)*gconst11*r10*x11915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11917=IKPowWithIntegerCheck(r02,-1);
if(!x11917.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11917.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11918=IKsin(j4);
IkReal x11919=IKcos(j4);
IkReal x11920=(gconst10*r21);
IkReal x11921=((1.0)*sj1);
IkReal x11922=(gconst10*r11);
IkReal x11923=((1.0)*gconst11*x11918);
IkReal x11924=((1.0)*gconst11*x11919);
evalcond[0]=(r02*x11918);
evalcond[1]=((((-1.0)*r20*x11923))+((x11918*x11920)));
evalcond[2]=(((x11918*x11922))+(((-1.0)*r10*x11923)));
evalcond[3]=((((-1.0)*r20*x11924))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11921))+((x11919*x11920)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x11924))+(((-1.0)*sj0*sj2*x11921))+((x11919*x11922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11926=IKPowWithIntegerCheck(r02,-1);
if(!x11926.valid){
continue;
}
IkReal x11925=x11926.value;
CheckValue<IkReal> x11927=IKPowWithIntegerCheck(cj3,-1);
if(!x11927.valid){
continue;
}
if( IKabs((x11925*(x11927.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11925)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11925*(x11927.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x11925))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11925*(x11927.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x11925));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11928=IKsin(j4);
IkReal x11929=IKcos(j4);
IkReal x11930=(cj3*r10);
IkReal x11931=(cj1*cj2);
IkReal x11932=((1.0)*gconst11);
IkReal x11933=(sj1*sj2);
IkReal x11934=(gconst11*sj3);
IkReal x11935=(cj3*r11);
IkReal x11936=(gconst10*r20);
IkReal x11937=(gconst10*sj3);
IkReal x11938=((1.0)*sj0);
IkReal x11939=(cj3*r21);
IkReal x11940=(r20*x11929);
IkReal x11941=(gconst10*x11928);
IkReal x11942=((1.0)*cj2*sj1);
IkReal x11943=((1.0)*cj1*sj2);
IkReal x11944=(gconst10*x11929);
IkReal x11945=(r02*x11928);
IkReal x11946=((1.0)*x11929);
evalcond[0]=((((-1.0)*x11938))+(((-1.0)*r02*x11946)));
evalcond[1]=(((r21*x11941))+(((-1.0)*r20*x11928*x11932)));
evalcond[2]=(((r11*x11941))+cj0+(((-1.0)*r10*x11928*x11932)));
evalcond[3]=(((cj0*x11931))+(((-1.0)*cj0*x11933))+(((-1.0)*sj3*x11945)));
evalcond[4]=((((-1.0)*cj0*x11942))+(((-1.0)*cj0*x11943))+((cj3*x11945)));
evalcond[5]=(x11933+((r21*x11934))+(((-1.0)*cj3*x11932*x11940))+((x11939*x11944))+(((-1.0)*x11931))+((sj3*x11936)));
evalcond[6]=((((-1.0)*x11943))+(((-1.0)*x11942))+(((-1.0)*r21*x11937*x11946))+((gconst11*x11939))+((cj3*x11936))+((x11934*x11940)));
evalcond[7]=((((-1.0)*r11*x11937*x11946))+(((-1.0)*x11933*x11938))+((gconst10*x11930))+((gconst11*x11935))+((r10*x11929*x11934))+((sj0*x11931)));
evalcond[8]=(((r10*x11937))+((r11*x11934))+(((-1.0)*cj2*sj1*x11938))+(((-1.0)*x11929*x11930*x11932))+((x11935*x11944))+(((-1.0)*cj1*sj2*x11938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11947=((1.0)*r20);
IkReal x11948=((1.0)*gconst11);
CheckValue<IkReal> x11949=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x11948))),-1);
if(!x11949.valid){
continue;
}
CheckValue<IkReal> x11950=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x11947))+((cj3*gconst10*r21))),-1);
if(!x11950.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11949.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11950.value)*(((((-1.0)*gconst10*sj3*x11947))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj3*x11948))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11949.value)))+IKsqr(((x11950.value)*(((((-1.0)*gconst10*sj3*x11947))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj3*x11948))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11949.value)), ((x11950.value)*(((((-1.0)*gconst10*sj3*x11947))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*sj3*x11948))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11951=IKsin(j4);
IkReal x11952=IKcos(j4);
IkReal x11953=(cj3*r10);
IkReal x11954=(cj1*cj2);
IkReal x11955=((1.0)*gconst11);
IkReal x11956=(sj1*sj2);
IkReal x11957=(gconst11*sj3);
IkReal x11958=(cj3*r11);
IkReal x11959=(gconst10*r20);
IkReal x11960=(gconst10*sj3);
IkReal x11961=((1.0)*sj0);
IkReal x11962=(cj3*r21);
IkReal x11963=(r20*x11952);
IkReal x11964=(gconst10*x11951);
IkReal x11965=((1.0)*cj2*sj1);
IkReal x11966=((1.0)*cj1*sj2);
IkReal x11967=(gconst10*x11952);
IkReal x11968=(r02*x11951);
IkReal x11969=((1.0)*x11952);
evalcond[0]=((((-1.0)*x11961))+(((-1.0)*r02*x11969)));
evalcond[1]=((((-1.0)*r20*x11951*x11955))+((r21*x11964)));
evalcond[2]=((((-1.0)*r10*x11951*x11955))+cj0+((r11*x11964)));
evalcond[3]=((((-1.0)*cj0*x11956))+((cj0*x11954))+(((-1.0)*sj3*x11968)));
evalcond[4]=(((cj3*x11968))+(((-1.0)*cj0*x11965))+(((-1.0)*cj0*x11966)));
evalcond[5]=(x11956+((x11962*x11967))+((r21*x11957))+(((-1.0)*x11954))+(((-1.0)*cj3*x11955*x11963))+((sj3*x11959)));
evalcond[6]=((((-1.0)*r21*x11960*x11969))+((x11957*x11963))+(((-1.0)*x11965))+(((-1.0)*x11966))+((cj3*x11959))+((gconst11*x11962)));
evalcond[7]=(((gconst10*x11953))+(((-1.0)*r11*x11960*x11969))+(((-1.0)*x11956*x11961))+((r10*x11952*x11957))+((gconst11*x11958))+((sj0*x11954)));
evalcond[8]=(((x11958*x11967))+((r11*x11957))+((r10*x11960))+(((-1.0)*cj2*sj1*x11961))+(((-1.0)*x11952*x11953*x11955))+(((-1.0)*cj1*sj2*x11961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11970=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11970.valid){
continue;
}
CheckValue<IkReal> x11971=IKPowWithIntegerCheck(r02,-1);
if(!x11971.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11970.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11971.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11970.value)))+IKsqr(((-1.0)*sj0*(x11971.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11970.value)), ((-1.0)*sj0*(x11971.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11972=IKsin(j4);
IkReal x11973=IKcos(j4);
IkReal x11974=(cj3*r10);
IkReal x11975=(cj1*cj2);
IkReal x11976=((1.0)*gconst11);
IkReal x11977=(sj1*sj2);
IkReal x11978=(gconst11*sj3);
IkReal x11979=(cj3*r11);
IkReal x11980=(gconst10*r20);
IkReal x11981=(gconst10*sj3);
IkReal x11982=((1.0)*sj0);
IkReal x11983=(cj3*r21);
IkReal x11984=(r20*x11973);
IkReal x11985=(gconst10*x11972);
IkReal x11986=((1.0)*cj2*sj1);
IkReal x11987=((1.0)*cj1*sj2);
IkReal x11988=(gconst10*x11973);
IkReal x11989=(r02*x11972);
IkReal x11990=((1.0)*x11973);
evalcond[0]=((((-1.0)*r02*x11990))+(((-1.0)*x11982)));
evalcond[1]=(((r21*x11985))+(((-1.0)*r20*x11972*x11976)));
evalcond[2]=(cj0+(((-1.0)*r10*x11972*x11976))+((r11*x11985)));
evalcond[3]=(((cj0*x11975))+(((-1.0)*cj0*x11977))+(((-1.0)*sj3*x11989)));
evalcond[4]=((((-1.0)*cj0*x11986))+(((-1.0)*cj0*x11987))+((cj3*x11989)));
evalcond[5]=(x11977+((sj3*x11980))+(((-1.0)*x11975))+((x11983*x11988))+((r21*x11978))+(((-1.0)*cj3*x11976*x11984)));
evalcond[6]=(((gconst11*x11983))+(((-1.0)*x11987))+(((-1.0)*x11986))+((x11978*x11984))+(((-1.0)*r21*x11981*x11990))+((cj3*x11980)));
evalcond[7]=((((-1.0)*x11977*x11982))+((gconst10*x11974))+((sj0*x11975))+((r10*x11973*x11978))+((gconst11*x11979))+(((-1.0)*r11*x11981*x11990)));
evalcond[8]=(((r10*x11981))+((r11*x11978))+(((-1.0)*cj2*sj1*x11982))+((x11979*x11988))+(((-1.0)*x11973*x11974*x11976))+(((-1.0)*cj1*sj2*x11982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11991=((-1.0)*r11);
CheckValue<IkReal> x11994 = IKatan2WithCheck(IkReal(x11991),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11994.valid){
continue;
}
IkReal x11992=((1.0)*(x11994.value));
IkReal x11993=x11648;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11992)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11992)));
IkReal gconst10=(x11991*x11993);
IkReal gconst11=((1.0)*r10*x11993);
IkReal x11995=r12*r12;
IkReal x11996=((1.0)*sj0);
IkReal x11997=(cj0*r02);
IkReal x11998=x11648;
j4eval[0]=((IKabs(((((-1.0)*x11996*x11998))+((sj0*x11995*x11998))+((r12*x11997*x11998)))))+(IKabs(((((-1.0)*x11997))+(((-1.0)*r12*x11996))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11999=(gconst11*r21);
IkReal x12000=(gconst10*sj3);
IkReal x12001=((1.0)*cj3);
IkReal x12002=(cj2*sj1);
IkReal x12003=(cj1*sj2);
IkReal x12004=(gconst11*r20);
IkReal x12005=((1.0)*sj3);
IkReal x12006=(gconst10*r20);
IkReal x12007=(r21*x12005);
CheckValue<IkReal> x12008=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11*r21*x12000))+((r11*x12000*x12004))+((r10*x11999*x12000))+(((-1.0)*gconst11*r10*x12004*x12005))),-1);
if(!x12008.valid){
continue;
}
CheckValue<IkReal> x12009=IKPowWithIntegerCheck(((((-1.0)*r21*x12000))+((sj3*x12004))),-1);
if(!x12009.valid){
continue;
}
if( IKabs(((x12008.value)*(((((-1.0)*r12*x11999*x12001))+(((-1.0)*cj0*x12004*x12005))+((r12*x12002))+((r12*x12003))+(((-1.0)*r12*x12001*x12006))+((cj0*r21*x12000)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12009.value)*(((((-1.0)*x12001*x12006))+(((-1.0)*x11999*x12001))+x12002+x12003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12008.value)*(((((-1.0)*r12*x11999*x12001))+(((-1.0)*cj0*x12004*x12005))+((r12*x12002))+((r12*x12003))+(((-1.0)*r12*x12001*x12006))+((cj0*r21*x12000))))))+IKsqr(((x12009.value)*(((((-1.0)*x12001*x12006))+(((-1.0)*x11999*x12001))+x12002+x12003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12008.value)*(((((-1.0)*r12*x11999*x12001))+(((-1.0)*cj0*x12004*x12005))+((r12*x12002))+((r12*x12003))+(((-1.0)*r12*x12001*x12006))+((cj0*r21*x12000))))), ((x12009.value)*(((((-1.0)*x12001*x12006))+(((-1.0)*x11999*x12001))+x12002+x12003))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12010=IKsin(j4);
IkReal x12011=IKcos(j4);
IkReal x12012=(gconst10*sj3);
IkReal x12013=(cj3*r10);
IkReal x12014=(cj1*cj2);
IkReal x12015=((1.0)*gconst11);
IkReal x12016=(sj1*sj2);
IkReal x12017=(gconst11*sj3);
IkReal x12018=(cj3*gconst11);
IkReal x12019=((1.0)*sj0);
IkReal x12020=(cj2*sj1);
IkReal x12021=(cj1*sj2);
IkReal x12022=(cj3*gconst10);
IkReal x12023=((1.0)*r12);
IkReal x12024=((1.0)*cj0);
IkReal x12025=(gconst10*x12010);
IkReal x12026=(cj3*x12011);
IkReal x12027=(r02*x12010);
IkReal x12028=((1.0)*x12011);
evalcond[0]=((((-1.0)*r20*x12010*x12015))+((r21*x12025)));
evalcond[1]=((((-1.0)*r10*x12010*x12015))+cj0+((r11*x12025))+(((-1.0)*x12011*x12023)));
evalcond[2]=(((r01*x12025))+(((-1.0)*r02*x12028))+(((-1.0)*x12019))+(((-1.0)*r00*x12010*x12015)));
evalcond[3]=((((-1.0)*r20*x12015*x12026))+((r21*x12017))+x12016+(((-1.0)*x12014))+((r20*x12012))+((r21*x12011*x12022)));
evalcond[4]=((((-1.0)*r21*x12012*x12028))+((r20*x12022))+(((-1.0)*x12020))+(((-1.0)*x12021))+((r20*x12011*x12017))+((r21*x12018)));
evalcond[5]=((((-1.0)*x12016*x12024))+((r00*x12011*x12017))+(((-1.0)*r01*x12012*x12028))+((r00*x12022))+((cj0*x12014))+((r01*x12018))+(((-1.0)*sj3*x12027)));
evalcond[6]=(((r01*x12011*x12022))+(((-1.0)*r00*x12015*x12026))+(((-1.0)*x12020*x12024))+(((-1.0)*x12021*x12024))+((r00*x12012))+((r01*x12017))+((cj3*x12027)));
evalcond[7]=(((sj0*x12014))+((r11*x12018))+(((-1.0)*x12016*x12019))+(((-1.0)*r11*x12012*x12028))+((r10*x12011*x12017))+(((-1.0)*sj3*x12010*x12023))+((gconst10*x12013)));
evalcond[8]=(((cj3*r12*x12010))+(((-1.0)*x12011*x12013*x12015))+((r10*x12012))+((r11*x12017))+((r11*x12011*x12022))+(((-1.0)*x12019*x12020))+(((-1.0)*x12019*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12029=((1.0)*sj0);
IkReal x12030=((1.0)*gconst10);
CheckValue<IkReal> x12031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12030))+(((-1.0)*gconst11*r21)))),-1);
if(!x12031.valid){
continue;
}
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12029)))),IkReal(((((-1.0)*gconst10*r11*x12029))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12031.value)))+(x12032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12033=IKsin(j4);
IkReal x12034=IKcos(j4);
IkReal x12035=(gconst10*sj3);
IkReal x12036=(cj3*r10);
IkReal x12037=(cj1*cj2);
IkReal x12038=((1.0)*gconst11);
IkReal x12039=(sj1*sj2);
IkReal x12040=(gconst11*sj3);
IkReal x12041=(cj3*gconst11);
IkReal x12042=((1.0)*sj0);
IkReal x12043=(cj2*sj1);
IkReal x12044=(cj1*sj2);
IkReal x12045=(cj3*gconst10);
IkReal x12046=((1.0)*r12);
IkReal x12047=((1.0)*cj0);
IkReal x12048=(gconst10*x12033);
IkReal x12049=(cj3*x12034);
IkReal x12050=(r02*x12033);
IkReal x12051=((1.0)*x12034);
evalcond[0]=(((r21*x12048))+(((-1.0)*r20*x12033*x12038)));
evalcond[1]=((((-1.0)*r10*x12033*x12038))+cj0+(((-1.0)*x12034*x12046))+((r11*x12048)));
evalcond[2]=((((-1.0)*r00*x12033*x12038))+(((-1.0)*x12042))+((r01*x12048))+(((-1.0)*r02*x12051)));
evalcond[3]=((((-1.0)*x12037))+((r20*x12035))+x12039+((r21*x12040))+(((-1.0)*r20*x12038*x12049))+((r21*x12034*x12045)));
evalcond[4]=((((-1.0)*x12043))+(((-1.0)*x12044))+((r20*x12045))+((r20*x12034*x12040))+((r21*x12041))+(((-1.0)*r21*x12035*x12051)));
evalcond[5]=(((cj0*x12037))+(((-1.0)*sj3*x12050))+((r00*x12045))+(((-1.0)*r01*x12035*x12051))+((r01*x12041))+((r00*x12034*x12040))+(((-1.0)*x12039*x12047)));
evalcond[6]=(((r01*x12034*x12045))+(((-1.0)*r00*x12038*x12049))+((r00*x12035))+((r01*x12040))+(((-1.0)*x12043*x12047))+(((-1.0)*x12044*x12047))+((cj3*x12050)));
evalcond[7]=(((gconst10*x12036))+((r10*x12034*x12040))+((sj0*x12037))+((r11*x12041))+(((-1.0)*sj3*x12033*x12046))+(((-1.0)*r11*x12035*x12051))+(((-1.0)*x12039*x12042)));
evalcond[8]=(((r11*x12040))+((cj3*r12*x12033))+(((-1.0)*x12034*x12036*x12038))+((r11*x12034*x12045))+(((-1.0)*x12042*x12043))+(((-1.0)*x12042*x12044))+((r10*x12035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12052=((1.0)*sj0);
IkReal x12053=((1.0)*gconst10);
CheckValue<IkReal> x12054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12053))+(((-1.0)*gconst11*r21)))),-1);
if(!x12054.valid){
continue;
}
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12052)))),IkReal(((((-1.0)*gconst10*r11*x12052))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12053))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12054.value)))+(x12055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12056=IKsin(j4);
IkReal x12057=IKcos(j4);
IkReal x12058=(gconst10*sj3);
IkReal x12059=(cj3*r10);
IkReal x12060=(cj1*cj2);
IkReal x12061=(gconst11*r20);
IkReal x12062=(gconst11*r00);
IkReal x12063=(sj1*sj2);
IkReal x12064=(gconst11*sj3);
IkReal x12065=(cj3*gconst11);
IkReal x12066=(gconst11*r10);
IkReal x12067=((1.0)*sj0);
IkReal x12068=(cj2*sj1);
IkReal x12069=(cj1*sj2);
IkReal x12070=(cj3*gconst10);
IkReal x12071=((1.0)*cj0);
IkReal x12072=((1.0)*x12057);
IkReal x12073=((1.0)*x12056);
IkReal x12074=(gconst10*x12056);
IkReal x12075=(cj3*x12056);
IkReal x12076=(sj3*x12057);
evalcond[0]=((((-1.0)*r22*x12072))+((r21*x12074))+(((-1.0)*x12061*x12073)));
evalcond[1]=(cj0+((r11*x12074))+(((-1.0)*x12066*x12073))+(((-1.0)*r12*x12072)));
evalcond[2]=((((-1.0)*x12062*x12073))+(((-1.0)*r02*x12072))+(((-1.0)*x12067))+((r01*x12074)));
evalcond[3]=(((r21*x12064))+((r20*x12058))+(((-1.0)*x12060))+((r21*x12057*x12070))+((r22*x12075))+x12063+(((-1.0)*cj3*x12061*x12072)));
evalcond[4]=(((r21*x12065))+((x12061*x12076))+(((-1.0)*x12068))+(((-1.0)*x12069))+(((-1.0)*r21*x12058*x12072))+((r20*x12070))+(((-1.0)*r22*sj3*x12073)));
evalcond[5]=(((r01*x12065))+(((-1.0)*r02*sj3*x12073))+((x12062*x12076))+(((-1.0)*x12063*x12071))+((cj0*x12060))+(((-1.0)*r01*x12058*x12072))+((r00*x12070)));
evalcond[6]=(((r01*x12064))+(((-1.0)*x12069*x12071))+((r01*x12057*x12070))+((r00*x12058))+(((-1.0)*cj3*x12062*x12072))+((r02*x12075))+(((-1.0)*x12068*x12071)));
evalcond[7]=(((gconst10*x12059))+(((-1.0)*r12*sj3*x12073))+(((-1.0)*r11*x12058*x12072))+((r10*x12057*x12064))+(((-1.0)*x12063*x12067))+((sj0*x12060))+((r11*x12065)));
evalcond[8]=(((r10*x12058))+(((-1.0)*x12067*x12069))+(((-1.0)*x12067*x12068))+(((-1.0)*gconst11*x12059*x12072))+((r11*x12057*x12070))+((r11*x12064))+((r12*x12075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12077=((1.0)*gconst11);
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x12077)))),-1);
if(!x12078.valid){
continue;
}
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x12077))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12078.value)))+(x12079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12080=IKsin(j4);
IkReal x12081=IKcos(j4);
IkReal x12082=(gconst10*sj3);
IkReal x12083=(cj3*r10);
IkReal x12084=(cj1*cj2);
IkReal x12085=(gconst11*r20);
IkReal x12086=(gconst11*r00);
IkReal x12087=(sj1*sj2);
IkReal x12088=(gconst11*sj3);
IkReal x12089=(cj3*gconst11);
IkReal x12090=(gconst11*r10);
IkReal x12091=((1.0)*sj0);
IkReal x12092=(cj2*sj1);
IkReal x12093=(cj1*sj2);
IkReal x12094=(cj3*gconst10);
IkReal x12095=((1.0)*cj0);
IkReal x12096=((1.0)*x12081);
IkReal x12097=((1.0)*x12080);
IkReal x12098=(gconst10*x12080);
IkReal x12099=(cj3*x12080);
IkReal x12100=(sj3*x12081);
evalcond[0]=((((-1.0)*r22*x12096))+(((-1.0)*x12085*x12097))+((r21*x12098)));
evalcond[1]=(((r11*x12098))+cj0+(((-1.0)*x12090*x12097))+(((-1.0)*r12*x12096)));
evalcond[2]=(((r01*x12098))+(((-1.0)*x12086*x12097))+(((-1.0)*r02*x12096))+(((-1.0)*x12091)));
evalcond[3]=(((r20*x12082))+(((-1.0)*x12084))+((r22*x12099))+x12087+(((-1.0)*cj3*x12085*x12096))+((r21*x12088))+((r21*x12081*x12094)));
evalcond[4]=(((x12085*x12100))+(((-1.0)*x12093))+(((-1.0)*x12092))+(((-1.0)*r21*x12082*x12096))+((r20*x12094))+((r21*x12089))+(((-1.0)*r22*sj3*x12097)));
evalcond[5]=((((-1.0)*x12087*x12095))+((x12086*x12100))+((r00*x12094))+((r01*x12089))+(((-1.0)*r02*sj3*x12097))+(((-1.0)*r01*x12082*x12096))+((cj0*x12084)));
evalcond[6]=((((-1.0)*x12093*x12095))+(((-1.0)*x12092*x12095))+(((-1.0)*cj3*x12086*x12096))+((r00*x12082))+((r01*x12088))+((r02*x12099))+((r01*x12081*x12094)));
evalcond[7]=((((-1.0)*x12087*x12091))+(((-1.0)*r12*sj3*x12097))+(((-1.0)*r11*x12082*x12096))+((sj0*x12084))+((gconst10*x12083))+((r11*x12089))+((r10*x12081*x12088)));
evalcond[8]=(((r12*x12099))+(((-1.0)*gconst11*x12083*x12096))+((r10*x12082))+((r11*x12081*x12094))+((r11*x12088))+(((-1.0)*x12091*x12093))+(((-1.0)*x12091*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12101=((1.0)*gconst11);
CheckValue<IkReal> x12102=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12101)))),-1);
if(!x12102.valid){
continue;
}
CheckValue<IkReal> x12103 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12101))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12102.value)))+(x12103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12104=IKsin(j4);
IkReal x12105=IKcos(j4);
IkReal x12106=(gconst10*sj3);
IkReal x12107=(cj3*r10);
IkReal x12108=(cj1*cj2);
IkReal x12109=(gconst11*r20);
IkReal x12110=(gconst11*r00);
IkReal x12111=(sj1*sj2);
IkReal x12112=(gconst11*sj3);
IkReal x12113=(cj3*gconst11);
IkReal x12114=(gconst11*r10);
IkReal x12115=((1.0)*sj0);
IkReal x12116=(cj2*sj1);
IkReal x12117=(cj1*sj2);
IkReal x12118=(cj3*gconst10);
IkReal x12119=((1.0)*cj0);
IkReal x12120=((1.0)*x12105);
IkReal x12121=((1.0)*x12104);
IkReal x12122=(gconst10*x12104);
IkReal x12123=(cj3*x12104);
IkReal x12124=(sj3*x12105);
evalcond[0]=(((r21*x12122))+(((-1.0)*r22*x12120))+(((-1.0)*x12109*x12121)));
evalcond[1]=(cj0+(((-1.0)*r12*x12120))+(((-1.0)*x12114*x12121))+((r11*x12122)));
evalcond[2]=(((r01*x12122))+(((-1.0)*x12115))+(((-1.0)*r02*x12120))+(((-1.0)*x12110*x12121)));
evalcond[3]=(((r21*x12105*x12118))+((r20*x12106))+x12111+((r22*x12123))+((r21*x12112))+(((-1.0)*cj3*x12109*x12120))+(((-1.0)*x12108)));
evalcond[4]=((((-1.0)*x12116))+(((-1.0)*x12117))+(((-1.0)*r22*sj3*x12121))+((x12109*x12124))+(((-1.0)*r21*x12106*x12120))+((r20*x12118))+((r21*x12113)));
evalcond[5]=((((-1.0)*r01*x12106*x12120))+(((-1.0)*r02*sj3*x12121))+((cj0*x12108))+((r01*x12113))+((r00*x12118))+(((-1.0)*x12111*x12119))+((x12110*x12124)));
evalcond[6]=(((r01*x12105*x12118))+(((-1.0)*x12116*x12119))+(((-1.0)*cj3*x12110*x12120))+((r00*x12106))+((r01*x12112))+((r02*x12123))+(((-1.0)*x12117*x12119)));
evalcond[7]=(((sj0*x12108))+(((-1.0)*x12111*x12115))+(((-1.0)*r11*x12106*x12120))+((r10*x12105*x12112))+((gconst10*x12107))+(((-1.0)*r12*sj3*x12121))+((r11*x12113)));
evalcond[8]=(((r10*x12106))+((r12*x12123))+(((-1.0)*x12115*x12117))+(((-1.0)*x12115*x12116))+(((-1.0)*gconst11*x12107*x12120))+((r11*x12112))+((r11*x12105*x12118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12125=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12125;
j4eval[1]=IKsign(x12125);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12126=((1.0)*cj5);
IkReal x12127=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12126)));
j4eval[0]=x12127;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12126))+((r21*sj5))))));
j4eval[2]=IKsign(x12127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12128=cj5*cj5;
IkReal x12129=(cj3*r21);
IkReal x12130=(cj5*sj5);
IkReal x12131=((1.0)*cj3);
IkReal x12132=((((-1.0)*r10*r20*x12128*x12131))+((cj3*r11*r20*x12130))+((r11*x12128*x12129))+(((-1.0)*r12*r22*x12131))+(((-1.0)*r11*x12129))+((r10*x12129*x12130)));
j4eval[0]=x12132;
j4eval[1]=IKsign(x12132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12133=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12133;
j4eval[1]=IKsign(x12133);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12134=((1.0)*cj5);
IkReal x12135=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12134)));
j4eval[0]=x12135;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12134)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12136=cj5*cj5;
IkReal x12137=r11*r11;
IkReal x12138=(r11*sj5);
IkReal x12139=(cj5*r10);
IkReal x12140=((r12*r12)+(((-2.0)*x12138*x12139))+x12137+((x12136*(r10*r10)))+(((-1.0)*x12136*x12137)));
j4eval[0]=x12140;
j4eval[1]=IKsign(x12140);
j4eval[2]=((IKabs(r12))+(IKabs((x12139+(((-1.0)*x12138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12141=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12141);
rxp1_1=(px*r21);
rxp1_2=(r11*x12141);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12142=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12142);
rxp1_1=(px*r21);
rxp1_2=(r11*x12142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(r02,-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12144.valid){
continue;
}
if( IKabs(((x12143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12144.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12144.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12143.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12144.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12145=IKsin(j4);
IkReal x12146=IKcos(j4);
IkReal x12147=(cj5*r20);
IkReal x12148=((1.0)*sj2);
IkReal x12149=(cj5*r10);
IkReal x12150=((1.0)*x12145);
IkReal x12151=(sj5*x12145);
IkReal x12152=((1.0)*sj5*x12146);
evalcond[0]=((-1.0)*r02*x12146);
evalcond[1]=(((r21*x12151))+(((-1.0)*x12147*x12150)));
evalcond[2]=((((-1.0)*r02*x12150))+(((-1.0)*sj1*x12148))+((cj1*cj2)));
evalcond[3]=((((-1.0)*r11*x12152))+((x12146*x12149)));
evalcond[4]=((1.0)+((r11*x12151))+(((-1.0)*x12149*x12150)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x12146*x12147))+(((-1.0)*cj1*x12148))+(((-1.0)*r21*x12152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12153=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12153.valid){
continue;
}
CheckValue<IkReal> x12154=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12154.valid){
continue;
}
if( IKabs(((-1.0)*(x12153.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12154.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12153.value)))+IKsqr(((x12154.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12153.value)), ((x12154.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12155=IKsin(j4);
IkReal x12156=IKcos(j4);
IkReal x12157=(cj5*r20);
IkReal x12158=((1.0)*sj2);
IkReal x12159=(cj5*r10);
IkReal x12160=((1.0)*x12155);
IkReal x12161=(sj5*x12155);
IkReal x12162=((1.0)*sj5*x12156);
evalcond[0]=((-1.0)*r02*x12156);
evalcond[1]=(((r21*x12161))+(((-1.0)*x12157*x12160)));
evalcond[2]=((((-1.0)*sj1*x12158))+((cj1*cj2))+(((-1.0)*r02*x12160)));
evalcond[3]=(((x12156*x12159))+(((-1.0)*r11*x12162)));
evalcond[4]=((1.0)+((r11*x12161))+(((-1.0)*x12159*x12160)));
evalcond[5]=(((x12156*x12157))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x12162))+(((-1.0)*cj1*x12158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12163=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12164=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12165=((1.0)*cj2);
CheckValue<IkReal> x12166=IKPowWithIntegerCheck(r22,-1);
if(!x12166.valid){
continue;
}
CheckValue<IkReal> x12167=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12167.valid){
continue;
}
if( IKabs(((x12166.value)*(((((-1.0)*sj1*x12165))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12167.value)*((((sj1*sj2))+(((-1.0)*cj1*x12165)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12166.value)*(((((-1.0)*sj1*x12165))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12167.value)*((((sj1*sj2))+(((-1.0)*cj1*x12165))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12166.value)*(((((-1.0)*sj1*x12165))+(((-1.0)*cj1*sj2))))), ((x12167.value)*((((sj1*sj2))+(((-1.0)*cj1*x12165))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12168=IKsin(j4);
IkReal x12169=IKcos(j4);
IkReal x12170=(cj5*r00);
IkReal x12171=((1.0)*sj1);
IkReal x12172=(cj5*r10);
IkReal x12173=((1.0)*x12168);
IkReal x12174=(sj5*x12168);
IkReal x12175=((1.0)*sj5*x12169);
evalcond[0]=((-1.0)*r22*x12169);
evalcond[1]=((((-1.0)*x12170*x12173))+((r01*x12174)));
evalcond[2]=(((x12169*x12172))+(((-1.0)*r11*x12175)));
evalcond[3]=((1.0)+((r11*x12174))+(((-1.0)*x12172*x12173)));
evalcond[4]=((((-1.0)*r22*x12173))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12171)));
evalcond[5]=(((x12169*x12170))+(((-1.0)*sj2*x12171))+(((-1.0)*r01*x12175))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12176.valid){
continue;
}
CheckValue<IkReal> x12177=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12177.valid){
continue;
}
if( IKabs(((-1.0)*(x12176.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12177.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12176.value)))+IKsqr(((x12177.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12176.value)), ((x12177.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12178=IKsin(j4);
IkReal x12179=IKcos(j4);
IkReal x12180=(cj5*r00);
IkReal x12181=((1.0)*sj1);
IkReal x12182=(cj5*r10);
IkReal x12183=((1.0)*x12178);
IkReal x12184=(sj5*x12178);
IkReal x12185=((1.0)*sj5*x12179);
evalcond[0]=((-1.0)*r22*x12179);
evalcond[1]=(((r01*x12184))+(((-1.0)*x12180*x12183)));
evalcond[2]=((((-1.0)*r11*x12185))+((x12179*x12182)));
evalcond[3]=((1.0)+(((-1.0)*x12182*x12183))+((r11*x12184)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12181))+(((-1.0)*r22*x12183)));
evalcond[5]=((((-1.0)*sj2*x12181))+((cj1*cj2))+((x12179*x12180))+(((-1.0)*r01*x12185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12186=cj5*cj5;
IkReal x12187=r11*r11;
IkReal x12188=(cj5*r10);
IkReal x12189=(r11*sj5);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal((x12188+(((-1.0)*x12189)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(IKsign(((r12*r12)+x12187+((x12186*(r10*r10)))+(((-2.0)*x12188*x12189))+(((-1.0)*x12186*x12187)))),-1);
if(!x12191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12190.value)+(((1.5707963267949)*(x12191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12192=IKsin(j4);
IkReal x12193=IKcos(j4);
IkReal x12194=(cj5*r10);
IkReal x12195=(r01*sj5);
IkReal x12196=((1.0)*sj1);
IkReal x12197=(cj5*r00);
IkReal x12198=(cj5*r20);
IkReal x12199=((1.0)*x12193);
IkReal x12200=((1.0)*x12192);
IkReal x12201=(sj5*x12192);
evalcond[0]=(((r21*x12201))+(((-1.0)*r22*x12199))+(((-1.0)*x12198*x12200)));
evalcond[1]=((((-1.0)*x12197*x12200))+(((-1.0)*r02*x12199))+((x12192*x12195)));
evalcond[2]=((((-1.0)*r12*x12200))+((x12193*x12194))+(((-1.0)*r11*sj5*x12199)));
evalcond[3]=((1.0)+(((-1.0)*x12194*x12200))+(((-1.0)*r12*x12199))+((r11*x12201)));
evalcond[4]=((((-1.0)*r02*x12200))+((x12193*x12197))+((cj1*cj2))+(((-1.0)*sj2*x12196))+(((-1.0)*x12195*x12199)));
evalcond[5]=((((-1.0)*r22*x12200))+(((-1.0)*cj2*x12196))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x12199))+((x12193*x12198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12202=((1.0)*cj5);
CheckValue<IkReal> x12203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12202)))),-1);
if(!x12203.valid){
continue;
}
CheckValue<IkReal> x12204 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12203.value)))+(x12204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12205=IKsin(j4);
IkReal x12206=IKcos(j4);
IkReal x12207=(cj5*r10);
IkReal x12208=(r01*sj5);
IkReal x12209=((1.0)*sj1);
IkReal x12210=(cj5*r00);
IkReal x12211=(cj5*r20);
IkReal x12212=((1.0)*x12206);
IkReal x12213=((1.0)*x12205);
IkReal x12214=(sj5*x12205);
evalcond[0]=((((-1.0)*r22*x12212))+(((-1.0)*x12211*x12213))+((r21*x12214)));
evalcond[1]=((((-1.0)*r02*x12212))+((x12205*x12208))+(((-1.0)*x12210*x12213)));
evalcond[2]=((((-1.0)*r11*sj5*x12212))+(((-1.0)*r12*x12213))+((x12206*x12207)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12212))+(((-1.0)*x12207*x12213))+((r11*x12214)));
evalcond[4]=((((-1.0)*sj2*x12209))+(((-1.0)*r02*x12213))+((x12206*x12210))+((cj1*cj2))+(((-1.0)*x12208*x12212)));
evalcond[5]=((((-1.0)*r21*sj5*x12212))+(((-1.0)*cj2*x12209))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12213))+((x12206*x12211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12215=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12215.valid){
continue;
}
CheckValue<IkReal> x12216 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12215.value)))+(x12216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12217=IKsin(j4);
IkReal x12218=IKcos(j4);
IkReal x12219=(cj5*r10);
IkReal x12220=(r01*sj5);
IkReal x12221=((1.0)*sj1);
IkReal x12222=(cj5*r00);
IkReal x12223=(cj5*r20);
IkReal x12224=((1.0)*x12218);
IkReal x12225=((1.0)*x12217);
IkReal x12226=(sj5*x12217);
evalcond[0]=((((-1.0)*r22*x12224))+((r21*x12226))+(((-1.0)*x12223*x12225)));
evalcond[1]=(((x12217*x12220))+(((-1.0)*r02*x12224))+(((-1.0)*x12222*x12225)));
evalcond[2]=(((x12218*x12219))+(((-1.0)*r11*sj5*x12224))+(((-1.0)*r12*x12225)));
evalcond[3]=((1.0)+((r11*x12226))+(((-1.0)*r12*x12224))+(((-1.0)*x12219*x12225)));
evalcond[4]=((((-1.0)*x12220*x12224))+(((-1.0)*sj2*x12221))+((x12218*x12222))+((cj1*cj2))+(((-1.0)*r02*x12225)));
evalcond[5]=((((-1.0)*r21*sj5*x12224))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x12225))+(((-1.0)*cj2*x12221))+((x12218*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12227=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12227;
j4eval[1]=IKsign(x12227);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12228=((1.0)*cj5);
IkReal x12229=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12228)));
j4eval[0]=x12229;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12228))))));
j4eval[2]=IKsign(x12229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12230=(cj5*r10);
IkReal x12231=(sj1*sj2);
IkReal x12232=(r11*sj5);
IkReal x12233=((1.0)*cj1*cj2);
IkReal x12234=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12234;
j4eval[1]=((IKabs(((((-1.0)*r12*x12233))+((r12*x12231)))))+(IKabs((((x12230*x12231))+(((-1.0)*x12230*x12233))+((cj1*cj2*x12232))+(((-1.0)*x12231*x12232))))));
j4eval[2]=IKsign(x12234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12235=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12235);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12235);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12236=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12236);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12236);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12237=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12237)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x12237)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12238=((1.0)*cj5);
CheckValue<IkReal> x12239=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12238))),-1);
if(!x12239.valid){
continue;
}
CheckValue<IkReal> x12240=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12238))),-1);
if(!x12240.valid){
continue;
}
if( IKabs(((-1.0)*(x12239.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12240.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12239.value)))+IKsqr(((x12240.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12239.value)), ((x12240.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12241=IKsin(j4);
IkReal x12242=IKcos(j4);
IkReal x12243=((1.0)*sj1);
IkReal x12244=((1.0)*cj5*r00);
IkReal x12245=(sj5*x12242);
IkReal x12246=((1.0)*cj5*r10);
IkReal x12247=(sj5*x12241);
evalcond[0]=((-1.0)*r22*x12242);
evalcond[1]=(((r01*x12247))+(((-1.0)*x12241*x12244)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12243))+((r22*x12241)));
evalcond[3]=(((r11*x12245))+(((-1.0)*x12242*x12246)));
evalcond[4]=((1.0)+((r11*x12247))+(((-1.0)*x12241*x12246)));
evalcond[5]=((((-1.0)*x12242*x12244))+((r01*x12245))+(((-1.0)*sj2*x12243))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(r22,-1);
if(!x12248.valid){
continue;
}
CheckValue<IkReal> x12249=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12249.valid){
continue;
}
if( IKabs(((x12248.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12248.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12248.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12250=IKsin(j4);
IkReal x12251=IKcos(j4);
IkReal x12252=((1.0)*sj1);
IkReal x12253=((1.0)*cj5*r00);
IkReal x12254=(sj5*x12251);
IkReal x12255=((1.0)*cj5*r10);
IkReal x12256=(sj5*x12250);
evalcond[0]=((-1.0)*r22*x12251);
evalcond[1]=((((-1.0)*x12250*x12253))+((r01*x12256)));
evalcond[2]=(((r22*x12250))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12252)));
evalcond[3]=((((-1.0)*x12251*x12255))+((r11*x12254)));
evalcond[4]=((1.0)+(((-1.0)*x12250*x12255))+((r11*x12256)));
evalcond[5]=((((-1.0)*x12251*x12253))+((r01*x12254))+((cj1*cj2))+(((-1.0)*sj2*x12252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12257=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12257;
j4eval[1]=IKsign(x12257);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12258=((1.0)*cj5);
IkReal x12259=((((-1.0)*r11*x12258))+(((-1.0)*r10*sj5)));
j4eval[0]=x12259;
j4eval[1]=IKsign(x12259);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12258))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12260=cj5*cj5;
IkReal x12261=(r01*r11);
IkReal x12262=(r01*sj5);
IkReal x12263=((1.0)*r00);
IkReal x12264=((((-1.0)*r10*x12260*x12263))+(((-1.0)*r02*r12))+((cj5*r10*x12262))+((x12260*x12261))+(((-1.0)*x12261))+((cj5*r00*r11*sj5)));
j4eval[0]=x12264;
j4eval[1]=IKsign(x12264);
j4eval[2]=((IKabs(((((-1.0)*cj5*x12263))+x12262)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12265=cj5*cj5;
IkReal x12266=(r01*r11);
IkReal x12267=(r01*sj5);
IkReal x12268=((1.0)*r00);
CheckValue<IkReal> x12269 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12268))+x12267)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12269.valid){
continue;
}
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12265*x12268))+(((-1.0)*r02*r12))+((cj5*r10*x12267))+((x12265*x12266))+(((-1.0)*x12266))+((cj5*r00*r11*sj5)))),-1);
if(!x12270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12269.value)+(((1.5707963267949)*(x12270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12271=IKcos(j4);
IkReal x12272=IKsin(j4);
IkReal x12273=(cj5*r00);
IkReal x12274=(cj5*r10);
IkReal x12275=(cj5*r20);
IkReal x12276=((1.0)*x12271);
IkReal x12277=((1.0)*x12272);
IkReal x12278=(sj5*x12271);
IkReal x12279=(sj5*x12272);
evalcond[0]=((((-1.0)*x12273*x12276))+((r02*x12272))+((r01*x12278)));
evalcond[1]=(((r12*x12272))+((r11*x12278))+(((-1.0)*x12274*x12276)));
evalcond[2]=(((r21*x12279))+(((-1.0)*r22*x12276))+(((-1.0)*x12275*x12277)));
evalcond[3]=((((-1.0)*x12273*x12277))+(((-1.0)*r02*x12276))+((r01*x12279)));
evalcond[4]=((-1.0)+((r21*x12278))+((r22*x12272))+(((-1.0)*x12275*x12276)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12276))+((r11*x12279))+(((-1.0)*x12274*x12277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12280=((1.0)*cj5);
CheckValue<IkReal> x12281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12280)))),-1);
if(!x12281.valid){
continue;
}
CheckValue<IkReal> x12282 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12280)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12281.value)))+(x12282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12283=IKcos(j4);
IkReal x12284=IKsin(j4);
IkReal x12285=(cj5*r00);
IkReal x12286=(cj5*r10);
IkReal x12287=(cj5*r20);
IkReal x12288=((1.0)*x12283);
IkReal x12289=((1.0)*x12284);
IkReal x12290=(sj5*x12283);
IkReal x12291=(sj5*x12284);
evalcond[0]=(((r01*x12290))+((r02*x12284))+(((-1.0)*x12285*x12288)));
evalcond[1]=(((r11*x12290))+((r12*x12284))+(((-1.0)*x12286*x12288)));
evalcond[2]=(((r21*x12291))+(((-1.0)*r22*x12288))+(((-1.0)*x12287*x12289)));
evalcond[3]=(((r01*x12291))+(((-1.0)*x12285*x12289))+(((-1.0)*r02*x12288)));
evalcond[4]=((-1.0)+((r21*x12290))+((r22*x12284))+(((-1.0)*x12287*x12288)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12288))+((r11*x12291))+(((-1.0)*x12286*x12289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12292=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12292.valid){
continue;
}
CheckValue<IkReal> x12293 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12292.value)))+(x12293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12294=IKcos(j4);
IkReal x12295=IKsin(j4);
IkReal x12296=(cj5*r00);
IkReal x12297=(cj5*r10);
IkReal x12298=(cj5*r20);
IkReal x12299=((1.0)*x12294);
IkReal x12300=((1.0)*x12295);
IkReal x12301=(sj5*x12294);
IkReal x12302=(sj5*x12295);
evalcond[0]=((((-1.0)*x12296*x12299))+((r02*x12295))+((r01*x12301)));
evalcond[1]=(((r11*x12301))+((r12*x12295))+(((-1.0)*x12297*x12299)));
evalcond[2]=(((r21*x12302))+(((-1.0)*x12298*x12300))+(((-1.0)*r22*x12299)));
evalcond[3]=((((-1.0)*x12296*x12300))+(((-1.0)*r02*x12299))+((r01*x12302)));
evalcond[4]=((-1.0)+(((-1.0)*x12298*x12299))+((r21*x12301))+((r22*x12295)));
evalcond[5]=((1.0)+(((-1.0)*x12297*x12300))+((r11*x12302))+(((-1.0)*r12*x12299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12303=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12303;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12304=((1.0)*cj5);
IkReal x12305=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12304)));
j4eval[0]=x12305;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12304)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12306=cj5*cj5;
IkReal x12307=(r01*r11);
IkReal x12308=(r01*sj5);
IkReal x12309=((1.0)*r00);
IkReal x12310=((((-1.0)*x12307))+(((-1.0)*r02*r12))+((x12306*x12307))+(((-1.0)*r10*x12306*x12309))+((cj5*r10*x12308))+((cj5*r00*r11*sj5)));
j4eval[0]=x12310;
j4eval[1]=IKsign(x12310);
j4eval[2]=((IKabs(r02))+(IKabs((x12308+(((-1.0)*cj5*x12309))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12311=cj5*cj5;
IkReal x12312=(r01*r11);
IkReal x12313=(r01*sj5);
IkReal x12314=((1.0)*r00);
CheckValue<IkReal> x12315 = IKatan2WithCheck(IkReal((x12313+(((-1.0)*cj5*x12314)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12315.valid){
continue;
}
CheckValue<IkReal> x12316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x12312))+((cj5*r10*x12313))+((x12311*x12312))+(((-1.0)*r10*x12311*x12314))+((cj5*r00*r11*sj5)))),-1);
if(!x12316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12315.value)+(((1.5707963267949)*(x12316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12317=IKcos(j4);
IkReal x12318=IKsin(j4);
IkReal x12319=(cj5*r00);
IkReal x12320=(cj5*r10);
IkReal x12321=(cj5*r20);
IkReal x12322=((1.0)*x12317);
IkReal x12323=((1.0)*x12318);
IkReal x12324=(sj5*x12317);
IkReal x12325=(sj5*x12318);
evalcond[0]=((((-1.0)*x12319*x12322))+((r01*x12324))+((r02*x12318)));
evalcond[1]=(((r12*x12318))+(((-1.0)*x12320*x12322))+((r11*x12324)));
evalcond[2]=((((-1.0)*r22*x12322))+(((-1.0)*x12321*x12323))+((r21*x12325)));
evalcond[3]=((((-1.0)*x12319*x12323))+((r01*x12325))+(((-1.0)*r02*x12322)));
evalcond[4]=((1.0)+((r22*x12318))+(((-1.0)*x12321*x12322))+((r21*x12324)));
evalcond[5]=((1.0)+(((-1.0)*x12320*x12323))+(((-1.0)*r12*x12322))+((r11*x12325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12326=((1.0)*cj5);
CheckValue<IkReal> x12327 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12326)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12326)))),-1);
if(!x12328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12327.value)+(((1.5707963267949)*(x12328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12329=IKcos(j4);
IkReal x12330=IKsin(j4);
IkReal x12331=(cj5*r00);
IkReal x12332=(cj5*r10);
IkReal x12333=(cj5*r20);
IkReal x12334=((1.0)*x12329);
IkReal x12335=((1.0)*x12330);
IkReal x12336=(sj5*x12329);
IkReal x12337=(sj5*x12330);
evalcond[0]=(((r01*x12336))+(((-1.0)*x12331*x12334))+((r02*x12330)));
evalcond[1]=((((-1.0)*x12332*x12334))+((r12*x12330))+((r11*x12336)));
evalcond[2]=((((-1.0)*r22*x12334))+((r21*x12337))+(((-1.0)*x12333*x12335)));
evalcond[3]=(((r01*x12337))+(((-1.0)*x12331*x12335))+(((-1.0)*r02*x12334)));
evalcond[4]=((1.0)+((r21*x12336))+(((-1.0)*x12333*x12334))+((r22*x12330)));
evalcond[5]=((1.0)+(((-1.0)*x12332*x12335))+((r11*x12337))+(((-1.0)*r12*x12334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12338 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12338.value)+(((1.5707963267949)*(x12339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12340=IKcos(j4);
IkReal x12341=IKsin(j4);
IkReal x12342=(cj5*r00);
IkReal x12343=(cj5*r10);
IkReal x12344=(cj5*r20);
IkReal x12345=((1.0)*x12340);
IkReal x12346=((1.0)*x12341);
IkReal x12347=(sj5*x12340);
IkReal x12348=(sj5*x12341);
evalcond[0]=((((-1.0)*x12342*x12345))+((r01*x12347))+((r02*x12341)));
evalcond[1]=((((-1.0)*x12343*x12345))+((r11*x12347))+((r12*x12341)));
evalcond[2]=((((-1.0)*x12344*x12346))+((r21*x12348))+(((-1.0)*r22*x12345)));
evalcond[3]=((((-1.0)*r02*x12345))+(((-1.0)*x12342*x12346))+((r01*x12348)));
evalcond[4]=((1.0)+(((-1.0)*x12344*x12345))+((r22*x12341))+((r21*x12347)));
evalcond[5]=((1.0)+(((-1.0)*x12343*x12346))+(((-1.0)*r12*x12345))+((r11*x12348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12349=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12349;
j4eval[1]=IKsign(x12349);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12350=((1.0)*cj5);
IkReal x12351=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12350)));
j4eval[0]=x12351;
j4eval[1]=IKsign(x12351);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12350))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12352=cj5*cj5;
IkReal x12353=(r01*r11);
IkReal x12354=(r01*sj5);
IkReal x12355=((1.0)*r00);
IkReal x12356=((((-1.0)*x12353))+((cj5*r10*x12354))+((x12352*x12353))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12352*x12355))+((cj5*r00*r11*sj5)));
j4eval[0]=x12356;
j4eval[1]=IKsign(x12356);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12355))+x12354))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12357=cj5*cj5;
IkReal x12358=(r01*r11);
IkReal x12359=(r01*sj5);
IkReal x12360=((1.0)*r00);
CheckValue<IkReal> x12361=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12358))+((cj5*r10*x12359))+(((-1.0)*r02*r12))+((x12357*x12358))+(((-1.0)*r10*x12357*x12360))+((cj5*r00*r11*sj5)))),-1);
if(!x12361.valid){
continue;
}
CheckValue<IkReal> x12362 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12360))+x12359)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12361.value)))+(x12362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12363=IKcos(j4);
IkReal x12364=IKsin(j4);
IkReal x12365=(cj5*r00);
IkReal x12366=(cj5*r10);
IkReal x12367=(cj5*r20);
IkReal x12368=((1.0)*x12363);
IkReal x12369=((1.0)*x12364);
IkReal x12370=(sj5*x12363);
IkReal x12371=(sj5*x12364);
evalcond[0]=((((-1.0)*x12365*x12368))+((r02*x12364))+((r01*x12370)));
evalcond[1]=(((r11*x12370))+(((-1.0)*x12366*x12368))+((r12*x12364)));
evalcond[2]=((((-1.0)*r22*x12368))+((r21*x12371))+(((-1.0)*x12367*x12369)));
evalcond[3]=((((-1.0)*x12365*x12369))+(((-1.0)*r02*x12368))+((r01*x12371)));
evalcond[4]=((-1.0)+((r21*x12370))+((r22*x12364))+(((-1.0)*x12367*x12368)));
evalcond[5]=((1.0)+((r11*x12371))+(((-1.0)*x12366*x12369))+(((-1.0)*r12*x12368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12372=((1.0)*cj5);
CheckValue<IkReal> x12373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12372)))),-1);
if(!x12373.valid){
continue;
}
CheckValue<IkReal> x12374 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12372)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12373.value)))+(x12374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12375=IKcos(j4);
IkReal x12376=IKsin(j4);
IkReal x12377=(cj5*r00);
IkReal x12378=(cj5*r10);
IkReal x12379=(cj5*r20);
IkReal x12380=((1.0)*x12375);
IkReal x12381=((1.0)*x12376);
IkReal x12382=(sj5*x12375);
IkReal x12383=(sj5*x12376);
evalcond[0]=(((r01*x12382))+((r02*x12376))+(((-1.0)*x12377*x12380)));
evalcond[1]=(((r11*x12382))+(((-1.0)*x12378*x12380))+((r12*x12376)));
evalcond[2]=(((r21*x12383))+(((-1.0)*r22*x12380))+(((-1.0)*x12379*x12381)));
evalcond[3]=((((-1.0)*r02*x12380))+((r01*x12383))+(((-1.0)*x12377*x12381)));
evalcond[4]=((-1.0)+((r21*x12382))+((r22*x12376))+(((-1.0)*x12379*x12380)));
evalcond[5]=((1.0)+((r11*x12383))+(((-1.0)*x12378*x12381))+(((-1.0)*r12*x12380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12386=IKcos(j4);
IkReal x12387=IKsin(j4);
IkReal x12388=(cj5*r00);
IkReal x12389=(cj5*r10);
IkReal x12390=(cj5*r20);
IkReal x12391=((1.0)*x12386);
IkReal x12392=((1.0)*x12387);
IkReal x12393=(sj5*x12386);
IkReal x12394=(sj5*x12387);
evalcond[0]=(((r02*x12387))+((r01*x12393))+(((-1.0)*x12388*x12391)));
evalcond[1]=(((r12*x12387))+((r11*x12393))+(((-1.0)*x12389*x12391)));
evalcond[2]=((((-1.0)*r22*x12391))+((r21*x12394))+(((-1.0)*x12390*x12392)));
evalcond[3]=((((-1.0)*r02*x12391))+((r01*x12394))+(((-1.0)*x12388*x12392)));
evalcond[4]=((-1.0)+((r21*x12393))+(((-1.0)*x12390*x12391))+((r22*x12387)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12391))+((r11*x12394))+(((-1.0)*x12389*x12392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12395=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12395;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12396=((1.0)*cj5);
IkReal x12397=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12396)));
j4eval[0]=x12397;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12396))))));
j4eval[2]=IKsign(x12397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12398=cj5*cj5;
IkReal x12399=(r01*r11);
IkReal x12400=(r01*sj5);
IkReal x12401=((1.0)*r00);
IkReal x12402=(((cj5*r10*x12400))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12398*x12401))+(((-1.0)*x12399))+((x12398*x12399))+((cj5*r00*r11*sj5)));
j4eval[0]=x12402;
j4eval[1]=IKsign(x12402);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12401))+x12400))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12403=cj5*cj5;
IkReal x12404=(r01*r11);
IkReal x12405=(r01*sj5);
IkReal x12406=((1.0)*r00);
CheckValue<IkReal> x12407 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12406))+x12405)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12407.valid){
continue;
}
CheckValue<IkReal> x12408=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12405))+(((-1.0)*r02*r12))+((x12403*x12404))+(((-1.0)*r10*x12403*x12406))+(((-1.0)*x12404))+((cj5*r00*r11*sj5)))),-1);
if(!x12408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12407.value)+(((1.5707963267949)*(x12408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12409=IKcos(j4);
IkReal x12410=IKsin(j4);
IkReal x12411=(cj5*r00);
IkReal x12412=(cj5*r10);
IkReal x12413=(cj5*r20);
IkReal x12414=((1.0)*x12409);
IkReal x12415=((1.0)*x12410);
IkReal x12416=(sj5*x12409);
IkReal x12417=(sj5*x12410);
evalcond[0]=((((-1.0)*x12411*x12414))+((r01*x12416))+((r02*x12410)));
evalcond[1]=(((r11*x12416))+((r12*x12410))+(((-1.0)*x12412*x12414)));
evalcond[2]=((((-1.0)*r22*x12414))+((r21*x12417))+(((-1.0)*x12413*x12415)));
evalcond[3]=((((-1.0)*x12411*x12415))+((r01*x12417))+(((-1.0)*r02*x12414)));
evalcond[4]=((1.0)+((r21*x12416))+((r22*x12410))+(((-1.0)*x12413*x12414)));
evalcond[5]=((1.0)+((r11*x12417))+(((-1.0)*x12412*x12415))+(((-1.0)*r12*x12414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12418=((1.0)*cj5);
CheckValue<IkReal> x12419 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12418))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12419.valid){
continue;
}
CheckValue<IkReal> x12420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12418))+(((-1.0)*r00*sj5)))),-1);
if(!x12420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12419.value)+(((1.5707963267949)*(x12420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12421=IKcos(j4);
IkReal x12422=IKsin(j4);
IkReal x12423=(cj5*r00);
IkReal x12424=(cj5*r10);
IkReal x12425=(cj5*r20);
IkReal x12426=((1.0)*x12421);
IkReal x12427=((1.0)*x12422);
IkReal x12428=(sj5*x12421);
IkReal x12429=(sj5*x12422);
evalcond[0]=((((-1.0)*x12423*x12426))+((r02*x12422))+((r01*x12428)));
evalcond[1]=((((-1.0)*x12424*x12426))+((r12*x12422))+((r11*x12428)));
evalcond[2]=(((r21*x12429))+(((-1.0)*x12425*x12427))+(((-1.0)*r22*x12426)));
evalcond[3]=((((-1.0)*x12423*x12427))+((r01*x12429))+(((-1.0)*r02*x12426)));
evalcond[4]=((1.0)+((r21*x12428))+(((-1.0)*x12425*x12426))+((r22*x12422)));
evalcond[5]=((1.0)+(((-1.0)*x12424*x12427))+((r11*x12429))+(((-1.0)*r12*x12426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12430 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12430.valid){
continue;
}
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12430.value)+(((1.5707963267949)*(x12431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12432=IKcos(j4);
IkReal x12433=IKsin(j4);
IkReal x12434=(cj5*r00);
IkReal x12435=(cj5*r10);
IkReal x12436=(cj5*r20);
IkReal x12437=((1.0)*x12432);
IkReal x12438=((1.0)*x12433);
IkReal x12439=(sj5*x12432);
IkReal x12440=(sj5*x12433);
evalcond[0]=((((-1.0)*x12434*x12437))+((r02*x12433))+((r01*x12439)));
evalcond[1]=((((-1.0)*x12435*x12437))+((r12*x12433))+((r11*x12439)));
evalcond[2]=(((r21*x12440))+(((-1.0)*r22*x12437))+(((-1.0)*x12436*x12438)));
evalcond[3]=(((r01*x12440))+(((-1.0)*x12434*x12438))+(((-1.0)*r02*x12437)));
evalcond[4]=((1.0)+((r21*x12439))+((r22*x12433))+(((-1.0)*x12436*x12437)));
evalcond[5]=((1.0)+(((-1.0)*x12435*x12438))+((r11*x12440))+(((-1.0)*r12*x12437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12441=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12441;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12442=((1.0)*cj5);
IkReal x12443=((((-1.0)*r01*x12442))+(((-1.0)*r00*sj5)));
j4eval[0]=x12443;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12442))+((r11*sj5))))));
j4eval[2]=IKsign(x12443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12444=cj5*cj5;
IkReal x12445=(r01*r11);
IkReal x12446=(r01*sj5);
IkReal x12447=((1.0)*r00);
IkReal x12448=((((-1.0)*x12445))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12444*x12447))+((x12444*x12445))+((cj5*r10*x12446))+((cj5*r00*r11*sj5)));
j4eval[0]=x12448;
j4eval[1]=IKsign(x12448);
j4eval[2]=((IKabs(r02))+(IKabs((x12446+(((-1.0)*cj5*x12447))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12449=cj5*cj5;
IkReal x12450=(r01*r11);
IkReal x12451=(r01*sj5);
IkReal x12452=((1.0)*r00);
CheckValue<IkReal> x12453 = IKatan2WithCheck(IkReal((x12451+(((-1.0)*cj5*x12452)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12453.valid){
continue;
}
CheckValue<IkReal> x12454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((cj5*r10*x12451))+(((-1.0)*x12450))+(((-1.0)*r10*x12449*x12452))+((x12449*x12450))+((cj5*r00*r11*sj5)))),-1);
if(!x12454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12453.value)+(((1.5707963267949)*(x12454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12455=IKcos(j4);
IkReal x12456=IKsin(j4);
IkReal x12457=(cj5*r00);
IkReal x12458=(cj5*r10);
IkReal x12459=(cj5*r20);
IkReal x12460=((1.0)*x12455);
IkReal x12461=((1.0)*x12456);
IkReal x12462=(sj5*x12455);
IkReal x12463=(sj5*x12456);
evalcond[0]=(((r02*x12456))+((r01*x12462))+(((-1.0)*x12457*x12460)));
evalcond[1]=((((-1.0)*x12458*x12460))+((r11*x12462))+((r12*x12456)));
evalcond[2]=((((-1.0)*r22*x12460))+(((-1.0)*x12459*x12461))+((r21*x12463)));
evalcond[3]=((((-1.0)*r02*x12460))+((r01*x12463))+(((-1.0)*x12457*x12461)));
evalcond[4]=((1.0)+((r22*x12456))+(((-1.0)*x12459*x12460))+((r21*x12462)));
evalcond[5]=((1.0)+(((-1.0)*x12458*x12461))+((r11*x12463))+(((-1.0)*r12*x12460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12464=((1.0)*cj5);
CheckValue<IkReal> x12465 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12464)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12464)))),-1);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12465.value)+(((1.5707963267949)*(x12466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKcos(j4);
IkReal x12468=IKsin(j4);
IkReal x12469=(cj5*r00);
IkReal x12470=(cj5*r10);
IkReal x12471=(cj5*r20);
IkReal x12472=((1.0)*x12467);
IkReal x12473=((1.0)*x12468);
IkReal x12474=(sj5*x12467);
IkReal x12475=(sj5*x12468);
evalcond[0]=(((r01*x12474))+((r02*x12468))+(((-1.0)*x12469*x12472)));
evalcond[1]=(((r12*x12468))+((r11*x12474))+(((-1.0)*x12470*x12472)));
evalcond[2]=((((-1.0)*r22*x12472))+(((-1.0)*x12471*x12473))+((r21*x12475)));
evalcond[3]=(((r01*x12475))+(((-1.0)*r02*x12472))+(((-1.0)*x12469*x12473)));
evalcond[4]=((1.0)+(((-1.0)*x12471*x12472))+((r22*x12468))+((r21*x12474)));
evalcond[5]=((1.0)+((r11*x12475))+(((-1.0)*x12470*x12473))+(((-1.0)*r12*x12472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12476 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12476.valid){
continue;
}
CheckValue<IkReal> x12477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12476.value)+(((1.5707963267949)*(x12477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12478=IKcos(j4);
IkReal x12479=IKsin(j4);
IkReal x12480=(cj5*r00);
IkReal x12481=(cj5*r10);
IkReal x12482=(cj5*r20);
IkReal x12483=((1.0)*x12478);
IkReal x12484=((1.0)*x12479);
IkReal x12485=(sj5*x12478);
IkReal x12486=(sj5*x12479);
evalcond[0]=((((-1.0)*x12480*x12483))+((r01*x12485))+((r02*x12479)));
evalcond[1]=(((r12*x12479))+(((-1.0)*x12481*x12483))+((r11*x12485)));
evalcond[2]=((((-1.0)*x12482*x12484))+(((-1.0)*r22*x12483))+((r21*x12486)));
evalcond[3]=((((-1.0)*x12480*x12484))+(((-1.0)*r02*x12483))+((r01*x12486)));
evalcond[4]=((1.0)+(((-1.0)*x12482*x12483))+((r22*x12479))+((r21*x12485)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12483))+(((-1.0)*x12481*x12484))+((r11*x12486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12487=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12487;
j4eval[1]=IKsign(x12487);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12488=((1.0)*cj5);
IkReal x12489=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12488)));
j4eval[0]=x12489;
j4eval[1]=IKsign(x12489);
j4eval[2]=((IKabs((((r01*sj5))+(((-1.0)*r00*x12488)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12490=cj5*cj5;
IkReal x12491=(r01*r11);
IkReal x12492=(r01*sj5);
IkReal x12493=((1.0)*r00);
IkReal x12494=((((-1.0)*r02*r12))+((x12490*x12491))+((cj5*r10*x12492))+(((-1.0)*x12491))+(((-1.0)*r10*x12490*x12493))+((cj5*r00*r11*sj5)));
j4eval[0]=x12494;
j4eval[1]=IKsign(x12494);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12493))+x12492))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12495=cj5*cj5;
IkReal x12496=(r01*r11);
IkReal x12497=(r01*sj5);
IkReal x12498=((1.0)*r00);
CheckValue<IkReal> x12499 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12498))+x12497)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*r10*x12495*x12498))+((x12495*x12496))+((cj5*r10*x12497))+(((-1.0)*x12496))+((cj5*r00*r11*sj5)))),-1);
if(!x12500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12499.value)+(((1.5707963267949)*(x12500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12501=IKcos(j4);
IkReal x12502=IKsin(j4);
IkReal x12503=(cj5*r00);
IkReal x12504=(cj5*r10);
IkReal x12505=(cj5*r20);
IkReal x12506=((1.0)*x12501);
IkReal x12507=((1.0)*x12502);
IkReal x12508=(sj5*x12501);
IkReal x12509=(sj5*x12502);
evalcond[0]=(((r01*x12508))+(((-1.0)*x12503*x12506))+((r02*x12502)));
evalcond[1]=(((r11*x12508))+(((-1.0)*x12504*x12506))+((r12*x12502)));
evalcond[2]=((((-1.0)*r22*x12506))+(((-1.0)*x12505*x12507))+((r21*x12509)));
evalcond[3]=((((-1.0)*r02*x12506))+((r01*x12509))+(((-1.0)*x12503*x12507)));
evalcond[4]=((-1.0)+(((-1.0)*x12505*x12506))+((r21*x12508))+((r22*x12502)));
evalcond[5]=((1.0)+((r11*x12509))+(((-1.0)*r12*x12506))+(((-1.0)*x12504*x12507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12510=((1.0)*cj5);
CheckValue<IkReal> x12511 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12510)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12511.valid){
continue;
}
CheckValue<IkReal> x12512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12510)))),-1);
if(!x12512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12511.value)+(((1.5707963267949)*(x12512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12513=IKcos(j4);
IkReal x12514=IKsin(j4);
IkReal x12515=(cj5*r00);
IkReal x12516=(cj5*r10);
IkReal x12517=(cj5*r20);
IkReal x12518=((1.0)*x12513);
IkReal x12519=((1.0)*x12514);
IkReal x12520=(sj5*x12513);
IkReal x12521=(sj5*x12514);
evalcond[0]=(((r01*x12520))+((r02*x12514))+(((-1.0)*x12515*x12518)));
evalcond[1]=((((-1.0)*x12516*x12518))+((r12*x12514))+((r11*x12520)));
evalcond[2]=((((-1.0)*r22*x12518))+((r21*x12521))+(((-1.0)*x12517*x12519)));
evalcond[3]=((((-1.0)*r02*x12518))+((r01*x12521))+(((-1.0)*x12515*x12519)));
evalcond[4]=((-1.0)+((r21*x12520))+((r22*x12514))+(((-1.0)*x12517*x12518)));
evalcond[5]=((1.0)+(((-1.0)*x12516*x12519))+(((-1.0)*r12*x12518))+((r11*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12522=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12522.valid){
continue;
}
CheckValue<IkReal> x12523 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12522.value)))+(x12523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12524=IKcos(j4);
IkReal x12525=IKsin(j4);
IkReal x12526=(cj5*r00);
IkReal x12527=(cj5*r10);
IkReal x12528=(cj5*r20);
IkReal x12529=((1.0)*x12524);
IkReal x12530=((1.0)*x12525);
IkReal x12531=(sj5*x12524);
IkReal x12532=(sj5*x12525);
evalcond[0]=((((-1.0)*x12526*x12529))+((r01*x12531))+((r02*x12525)));
evalcond[1]=(((r11*x12531))+((r12*x12525))+(((-1.0)*x12527*x12529)));
evalcond[2]=((((-1.0)*x12528*x12530))+((r21*x12532))+(((-1.0)*r22*x12529)));
evalcond[3]=((((-1.0)*x12526*x12530))+(((-1.0)*r02*x12529))+((r01*x12532)));
evalcond[4]=((-1.0)+((r22*x12525))+(((-1.0)*x12528*x12529))+((r21*x12531)));
evalcond[5]=((1.0)+((r11*x12532))+(((-1.0)*x12527*x12530))+(((-1.0)*r12*x12529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12533=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12533;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12534=((1.0)*cj5);
IkReal x12535=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12534)));
j4eval[0]=x12535;
j4eval[1]=((IKabs(((((-1.0)*r10*x12534))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12536=cj5*cj5;
IkReal x12537=(r01*r11);
IkReal x12538=(r01*sj5);
IkReal x12539=((1.0)*r00);
IkReal x12540=((((-1.0)*r10*x12536*x12539))+(((-1.0)*r02*r12))+((x12536*x12537))+(((-1.0)*x12537))+((cj5*r10*x12538))+((cj5*r00*r11*sj5)));
j4eval[0]=x12540;
j4eval[1]=IKsign(x12540);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*x12539))+x12538))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12541=cj5*cj5;
IkReal x12542=(r01*r11);
IkReal x12543=(r01*sj5);
IkReal x12544=((1.0)*r00);
CheckValue<IkReal> x12545=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12542))+(((-1.0)*r02*r12))+(((-1.0)*r10*x12541*x12544))+((x12541*x12542))+((cj5*r10*x12543))+((cj5*r00*r11*sj5)))),-1);
if(!x12545.valid){
continue;
}
CheckValue<IkReal> x12546 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12544))+x12543)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12545.value)))+(x12546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12547=IKcos(j4);
IkReal x12548=IKsin(j4);
IkReal x12549=(cj5*r00);
IkReal x12550=(cj5*r10);
IkReal x12551=(cj5*r20);
IkReal x12552=((1.0)*x12547);
IkReal x12553=((1.0)*x12548);
IkReal x12554=(sj5*x12547);
IkReal x12555=(sj5*x12548);
evalcond[0]=(((r01*x12554))+((r02*x12548))+(((-1.0)*x12549*x12552)));
evalcond[1]=(((r12*x12548))+((r11*x12554))+(((-1.0)*x12550*x12552)));
evalcond[2]=((((-1.0)*r22*x12552))+((r21*x12555))+(((-1.0)*x12551*x12553)));
evalcond[3]=(((r01*x12555))+(((-1.0)*r02*x12552))+(((-1.0)*x12549*x12553)));
evalcond[4]=((1.0)+((r22*x12548))+((r21*x12554))+(((-1.0)*x12551*x12552)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12552))+((r11*x12555))+(((-1.0)*x12550*x12553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=((1.0)*cj5);
CheckValue<IkReal> x12557 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12556))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12557.valid){
continue;
}
CheckValue<IkReal> x12558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12556))+(((-1.0)*r00*sj5)))),-1);
if(!x12558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12557.value)+(((1.5707963267949)*(x12558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12559=IKcos(j4);
IkReal x12560=IKsin(j4);
IkReal x12561=(cj5*r00);
IkReal x12562=(cj5*r10);
IkReal x12563=(cj5*r20);
IkReal x12564=((1.0)*x12559);
IkReal x12565=((1.0)*x12560);
IkReal x12566=(sj5*x12559);
IkReal x12567=(sj5*x12560);
evalcond[0]=((((-1.0)*x12561*x12564))+((r01*x12566))+((r02*x12560)));
evalcond[1]=(((r11*x12566))+((r12*x12560))+(((-1.0)*x12562*x12564)));
evalcond[2]=((((-1.0)*r22*x12564))+(((-1.0)*x12563*x12565))+((r21*x12567)));
evalcond[3]=((((-1.0)*x12561*x12565))+(((-1.0)*r02*x12564))+((r01*x12567)));
evalcond[4]=((1.0)+(((-1.0)*x12563*x12564))+((r21*x12566))+((r22*x12560)));
evalcond[5]=((1.0)+((r11*x12567))+(((-1.0)*r12*x12564))+(((-1.0)*x12562*x12565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12568 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12568.value)+(((1.5707963267949)*(x12569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12570=IKcos(j4);
IkReal x12571=IKsin(j4);
IkReal x12572=(cj5*r00);
IkReal x12573=(cj5*r10);
IkReal x12574=(cj5*r20);
IkReal x12575=((1.0)*x12570);
IkReal x12576=((1.0)*x12571);
IkReal x12577=(sj5*x12570);
IkReal x12578=(sj5*x12571);
evalcond[0]=(((r02*x12571))+(((-1.0)*x12572*x12575))+((r01*x12577)));
evalcond[1]=((((-1.0)*x12573*x12575))+((r12*x12571))+((r11*x12577)));
evalcond[2]=(((r21*x12578))+(((-1.0)*x12574*x12576))+(((-1.0)*r22*x12575)));
evalcond[3]=((((-1.0)*x12572*x12576))+(((-1.0)*r02*x12575))+((r01*x12578)));
evalcond[4]=((1.0)+((r22*x12571))+((r21*x12577))+(((-1.0)*x12574*x12575)));
evalcond[5]=((1.0)+(((-1.0)*x12573*x12576))+(((-1.0)*r12*x12575))+((r11*x12578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12579=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12579;
j4eval[1]=IKsign(x12579);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12580=((1.0)*cj5);
IkReal x12581=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12580)));
j4eval[0]=x12581;
j4eval[1]=IKsign(x12581);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12582=cj5*cj5;
IkReal x12583=(r01*r11);
IkReal x12584=(r01*sj5);
IkReal x12585=((1.0)*r00);
IkReal x12586=((((-1.0)*r02*r12))+(((-1.0)*r10*x12582*x12585))+((cj5*r10*x12584))+((x12582*x12583))+(((-1.0)*x12583))+((cj5*r00*r11*sj5)));
j4eval[0]=x12586;
j4eval[1]=IKsign(x12586);
j4eval[2]=((IKabs(r02))+(IKabs((x12584+(((-1.0)*cj5*x12585))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12587=cj5*cj5;
IkReal x12588=(r01*r11);
IkReal x12589=(r01*sj5);
IkReal x12590=((1.0)*r00);
CheckValue<IkReal> x12591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((x12587*x12588))+((cj5*r10*x12589))+(((-1.0)*r10*x12587*x12590))+(((-1.0)*x12588))+((cj5*r00*r11*sj5)))),-1);
if(!x12591.valid){
continue;
}
CheckValue<IkReal> x12592 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12590))+x12589)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12591.value)))+(x12592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12593=IKcos(j4);
IkReal x12594=IKsin(j4);
IkReal x12595=(cj5*r00);
IkReal x12596=(cj5*r10);
IkReal x12597=(cj5*r20);
IkReal x12598=((1.0)*x12593);
IkReal x12599=((1.0)*x12594);
IkReal x12600=(sj5*x12593);
IkReal x12601=(sj5*x12594);
evalcond[0]=(((r01*x12600))+(((-1.0)*x12595*x12598))+((r02*x12594)));
evalcond[1]=(((r12*x12594))+(((-1.0)*x12596*x12598))+((r11*x12600)));
evalcond[2]=((((-1.0)*x12597*x12599))+(((-1.0)*r22*x12598))+((r21*x12601)));
evalcond[3]=(((r01*x12601))+(((-1.0)*x12595*x12599))+(((-1.0)*r02*x12598)));
evalcond[4]=((-1.0)+(((-1.0)*x12597*x12598))+((r22*x12594))+((r21*x12600)));
evalcond[5]=((1.0)+(((-1.0)*x12596*x12599))+((r11*x12601))+(((-1.0)*r12*x12598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12602=((1.0)*cj5);
CheckValue<IkReal> x12603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12602)))),-1);
if(!x12603.valid){
continue;
}
CheckValue<IkReal> x12604 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12602)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12603.value)))+(x12604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12605=IKcos(j4);
IkReal x12606=IKsin(j4);
IkReal x12607=(cj5*r00);
IkReal x12608=(cj5*r10);
IkReal x12609=(cj5*r20);
IkReal x12610=((1.0)*x12605);
IkReal x12611=((1.0)*x12606);
IkReal x12612=(sj5*x12605);
IkReal x12613=(sj5*x12606);
evalcond[0]=((((-1.0)*x12607*x12610))+((r02*x12606))+((r01*x12612)));
evalcond[1]=(((r12*x12606))+((r11*x12612))+(((-1.0)*x12608*x12610)));
evalcond[2]=((((-1.0)*r22*x12610))+((r21*x12613))+(((-1.0)*x12609*x12611)));
evalcond[3]=((((-1.0)*r02*x12610))+(((-1.0)*x12607*x12611))+((r01*x12613)));
evalcond[4]=((-1.0)+((r21*x12612))+((r22*x12606))+(((-1.0)*x12609*x12610)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12610))+((r11*x12613))+(((-1.0)*x12608*x12611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12614=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12614.valid){
continue;
}
CheckValue<IkReal> x12615 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12614.value)))+(x12615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12616=IKcos(j4);
IkReal x12617=IKsin(j4);
IkReal x12618=(cj5*r00);
IkReal x12619=(cj5*r10);
IkReal x12620=(cj5*r20);
IkReal x12621=((1.0)*x12616);
IkReal x12622=((1.0)*x12617);
IkReal x12623=(sj5*x12616);
IkReal x12624=(sj5*x12617);
evalcond[0]=(((r02*x12617))+((r01*x12623))+(((-1.0)*x12618*x12621)));
evalcond[1]=((((-1.0)*x12619*x12621))+((r11*x12623))+((r12*x12617)));
evalcond[2]=((((-1.0)*x12620*x12622))+(((-1.0)*r22*x12621))+((r21*x12624)));
evalcond[3]=((((-1.0)*r02*x12621))+((r01*x12624))+(((-1.0)*x12618*x12622)));
evalcond[4]=((-1.0)+(((-1.0)*x12620*x12621))+((r21*x12623))+((r22*x12617)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12621))+(((-1.0)*x12619*x12622))+((r11*x12624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12625=(cj5*r10);
IkReal x12626=(sj1*sj2);
IkReal x12627=(r11*sj5);
IkReal x12628=((1.0)*cj1*cj2);
CheckValue<IkReal> x12629=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12629.valid){
continue;
}
CheckValue<IkReal> x12630 = IKatan2WithCheck(IkReal(((((-1.0)*x12625*x12628))+((x12625*x12626))+((cj1*cj2*x12627))+(((-1.0)*x12626*x12627)))),IkReal(((((-1.0)*r12*x12628))+((r12*x12626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12629.value)))+(x12630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12631=IKcos(j4);
IkReal x12632=IKsin(j4);
IkReal x12633=(cj5*r00);
IkReal x12634=(cj5*r10);
IkReal x12635=(r21*sj5);
IkReal x12636=((1.0)*sj1);
IkReal x12637=(cj5*r20);
IkReal x12638=((1.0)*x12631);
IkReal x12639=((1.0)*x12632);
IkReal x12640=(sj5*x12632);
IkReal x12641=(sj5*x12631);
evalcond[0]=(((r12*x12632))+(((-1.0)*x12634*x12638))+((r11*x12641)));
evalcond[1]=((((-1.0)*x12637*x12639))+(((-1.0)*r22*x12638))+((x12632*x12635)));
evalcond[2]=((((-1.0)*x12633*x12639))+((r01*x12640))+(((-1.0)*r02*x12638)));
evalcond[3]=((1.0)+(((-1.0)*x12634*x12639))+((r11*x12640))+(((-1.0)*r12*x12638)));
evalcond[4]=((((-1.0)*sj2*x12636))+(((-1.0)*x12633*x12638))+((r01*x12641))+((r02*x12632))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x12637*x12638))+(((-1.0)*cj2*x12636))+(((-1.0)*cj1*sj2))+((r22*x12632))+((x12631*x12635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12642=((1.0)*cj5);
CheckValue<IkReal> x12643 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12642))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12643.valid){
continue;
}
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12642)))),-1);
if(!x12644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12643.value)+(((1.5707963267949)*(x12644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12645=IKcos(j4);
IkReal x12646=IKsin(j4);
IkReal x12647=(cj5*r00);
IkReal x12648=(cj5*r10);
IkReal x12649=(r21*sj5);
IkReal x12650=((1.0)*sj1);
IkReal x12651=(cj5*r20);
IkReal x12652=((1.0)*x12645);
IkReal x12653=((1.0)*x12646);
IkReal x12654=(sj5*x12646);
IkReal x12655=(sj5*x12645);
evalcond[0]=(((r12*x12646))+((r11*x12655))+(((-1.0)*x12648*x12652)));
evalcond[1]=((((-1.0)*x12651*x12653))+((x12646*x12649))+(((-1.0)*r22*x12652)));
evalcond[2]=((((-1.0)*x12647*x12653))+(((-1.0)*r02*x12652))+((r01*x12654)));
evalcond[3]=((1.0)+((r11*x12654))+(((-1.0)*r12*x12652))+(((-1.0)*x12648*x12653)));
evalcond[4]=((((-1.0)*x12647*x12652))+(((-1.0)*sj2*x12650))+((r02*x12646))+((cj1*cj2))+((r01*x12655)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x12645*x12649))+((r22*x12646))+(((-1.0)*x12651*x12652))+(((-1.0)*cj2*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12656=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12656.valid){
continue;
}
CheckValue<IkReal> x12657 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12656.value)))+(x12657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12658=IKcos(j4);
IkReal x12659=IKsin(j4);
IkReal x12660=(cj5*r00);
IkReal x12661=(cj5*r10);
IkReal x12662=(r21*sj5);
IkReal x12663=((1.0)*sj1);
IkReal x12664=(cj5*r20);
IkReal x12665=((1.0)*x12658);
IkReal x12666=((1.0)*x12659);
IkReal x12667=(sj5*x12659);
IkReal x12668=(sj5*x12658);
evalcond[0]=((((-1.0)*x12661*x12665))+((r11*x12668))+((r12*x12659)));
evalcond[1]=((((-1.0)*r22*x12665))+((x12659*x12662))+(((-1.0)*x12664*x12666)));
evalcond[2]=((((-1.0)*r02*x12665))+(((-1.0)*x12660*x12666))+((r01*x12667)));
evalcond[3]=((1.0)+(((-1.0)*x12661*x12666))+((r11*x12667))+(((-1.0)*r12*x12665)));
evalcond[4]=(((r02*x12659))+(((-1.0)*x12660*x12665))+((cj1*cj2))+((r01*x12668))+(((-1.0)*sj2*x12663)));
evalcond[5]=((((-1.0)*cj2*x12663))+((r22*x12659))+((x12658*x12662))+(((-1.0)*cj1*sj2))+(((-1.0)*x12664*x12665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12669=((-1.0)*r00);
IkReal x12671 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12671)==0){
continue;
}
IkReal x12670=pow(x12671,-0.5);
CheckValue<IkReal> x12672 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12669),IKFAST_ATAN2_MAGTHRESH);
if(!x12672.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12672.value));
IkReal gconst19=(r01*x12670);
IkReal gconst20=(x12669*x12670);
CheckValue<IkReal> x12673 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12673.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12674=((-1.0)*r00);
IkReal x12675=x12670;
CheckValue<IkReal> x12677 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12674),IKFAST_ATAN2_MAGTHRESH);
if(!x12677.valid){
continue;
}
IkReal x12676=((-1.0)*(x12677.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12676;
IkReal gconst18=x12676;
IkReal gconst19=(r01*x12675);
IkReal gconst20=(x12674*x12675);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12678=((-1.0)*r00);
IkReal x12679=x12670;
CheckValue<IkReal> x12681 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12678),IKFAST_ATAN2_MAGTHRESH);
if(!x12681.valid){
continue;
}
IkReal x12680=((-1.0)*(x12681.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x12680;
IkReal gconst18=x12680;
IkReal gconst19=(r01*x12679);
IkReal gconst20=(x12678*x12679);
CheckValue<IkReal> x12689=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12689.valid){
continue;
}
IkReal x12682=x12689.value;
IkReal x12683=(sj3*x12682);
IkReal x12684=(r11*x12683);
IkReal x12685=(r21*x12683);
IkReal x12686=(r20*x12683);
IkReal x12687=(r10*x12683);
IkReal x12688=(r00*r01*x12683);
j4eval[0]=IKsign((((r21*x12684*(r01*r01)))+((r10*x12686*(r00*r00)))+((r00*r01*r20*x12684))+((r12*r22*sj3))+((r00*r01*r10*x12685))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12690=gconst19*gconst19;
IkReal x12691=gconst20*gconst20;
IkReal x12692=(gconst20*sj3);
IkReal x12693=((1.0)*cj3);
IkReal x12694=(r10*sj3);
IkReal x12695=(gconst19*r21);
IkReal x12696=(r11*r20);
IkReal x12697=(cj3*gconst20);
IkReal x12698=((1.0)*r10*r20);
IkReal x12699=(r21*x12690);
CheckValue<IkReal> x12700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x12693))+(((-1.0)*r10*r20*x12691*x12693))+(((-1.0)*r11*x12693*x12699))+((gconst19*x12696*x12697))+((r10*x12695*x12697)))),-1);
if(!x12700.valid){
continue;
}
CheckValue<IkReal> x12701 = IKatan2WithCheck(IkReal((((gconst19*r22*x12694))+((r11*r22*x12692)))),IkReal((((r11*x12692*x12695))+((x12694*x12699))+(((-1.0)*gconst19*x12692*x12698))+(((-1.0)*sj3*x12691*x12696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12700.value)))+(x12701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12702=IKsin(j4);
IkReal x12703=IKcos(j4);
IkReal x12704=((1.0)*r22);
IkReal x12705=(gconst20*sj3);
IkReal x12706=(gconst19*r21);
IkReal x12707=(gconst20*r10);
IkReal x12708=(sj1*sj2);
IkReal x12709=(cj3*gconst19);
IkReal x12710=(gconst19*sj3);
IkReal x12711=((1.0)*cj1);
IkReal x12712=(cj3*gconst20);
IkReal x12713=(sj2*x12711);
IkReal x12714=((1.0)*cj2*sj1);
IkReal x12715=((1.0)*x12702);
IkReal x12716=(r00*x12703);
IkReal x12717=(cj3*x12702);
IkReal x12718=(r11*x12703);
IkReal x12719=((1.0)*x12703);
IkReal x12720=(gconst19*x12702);
IkReal x12721=(x12713+x12714);
evalcond[0]=((((-1.0)*x12703*x12704))+((x12702*x12706))+(((-1.0)*gconst20*r20*x12715)));
evalcond[1]=((((-1.0)*gconst20*r00*x12715))+((r01*x12720))+(((-1.0)*r02*x12719)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12719))+(((-1.0)*x12707*x12715))+((r11*x12720)));
evalcond[3]=((((-1.0)*cj3*x12707*x12719))+((r12*x12717))+((x12709*x12718))+((r11*x12705))+((r10*x12710)));
evalcond[4]=(((r10*x12703*x12705))+((r11*x12712))+((r10*x12709))+(((-1.0)*x12710*x12718))+(((-1.0)*r12*sj3*x12715)));
evalcond[5]=((((-1.0)*cj2*x12711))+((r21*x12705))+((r22*x12717))+(((-1.0)*r20*x12712*x12719))+((cj3*x12703*x12706))+((r20*x12710))+x12708);
evalcond[6]=((((-1.0)*r02*sj3*x12715))+(((-1.0)*r01*x12710*x12719))+((r00*x12709))+((r01*x12712))+((x12705*x12716))+((cj1*cj2))+(((-1.0)*x12708)));
evalcond[7]=(((r01*x12703*x12709))+(((-1.0)*x12721))+((r02*x12717))+(((-1.0)*x12712*x12716))+((r00*x12710))+((r01*x12705)));
evalcond[8]=(((r21*x12712))+(((-1.0)*x12721))+(((-1.0)*sj3*x12702*x12704))+((r20*x12709))+((r20*x12703*x12705))+(((-1.0)*sj3*x12706*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12722=gconst19*gconst19;
IkReal x12723=gconst20*gconst20;
IkReal x12724=(r21*sj3);
IkReal x12725=(cj3*r11);
IkReal x12726=(gconst19*gconst20);
IkReal x12727=((1.0)*r10);
IkReal x12728=(cj3*r10);
IkReal x12729=(r20*x12723);
CheckValue<IkReal> x12730=IKPowWithIntegerCheck(IKsign((((r11*x12722*x12724))+(((-1.0)*x12724*x12726*x12727))+(((-1.0)*r11*r20*sj3*x12726))+((r12*r22*sj3))+((r10*sj3*x12729)))),-1);
if(!x12730.valid){
continue;
}
CheckValue<IkReal> x12731 = IKatan2WithCheck(IkReal((((gconst20*r22*x12725))+((gconst19*r22*x12728)))),IkReal(((((-1.0)*cj3*r20*x12726*x12727))+((r21*x12722*x12728))+(((-1.0)*x12725*x12729))+((r21*x12725*x12726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12730.value)))+(x12731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12732=IKsin(j4);
IkReal x12733=IKcos(j4);
IkReal x12734=((1.0)*r22);
IkReal x12735=(gconst20*sj3);
IkReal x12736=(gconst19*r21);
IkReal x12737=(gconst20*r10);
IkReal x12738=(sj1*sj2);
IkReal x12739=(cj3*gconst19);
IkReal x12740=(gconst19*sj3);
IkReal x12741=((1.0)*cj1);
IkReal x12742=(cj3*gconst20);
IkReal x12743=(sj2*x12741);
IkReal x12744=((1.0)*cj2*sj1);
IkReal x12745=((1.0)*x12732);
IkReal x12746=(r00*x12733);
IkReal x12747=(cj3*x12732);
IkReal x12748=(r11*x12733);
IkReal x12749=((1.0)*x12733);
IkReal x12750=(gconst19*x12732);
IkReal x12751=(x12744+x12743);
evalcond[0]=(((x12732*x12736))+(((-1.0)*gconst20*r20*x12745))+(((-1.0)*x12733*x12734)));
evalcond[1]=((((-1.0)*r02*x12749))+((r01*x12750))+(((-1.0)*gconst20*r00*x12745)));
evalcond[2]=((1.0)+((r11*x12750))+(((-1.0)*r12*x12749))+(((-1.0)*x12737*x12745)));
evalcond[3]=(((r11*x12735))+(((-1.0)*cj3*x12737*x12749))+((r10*x12740))+((x12739*x12748))+((r12*x12747)));
evalcond[4]=((((-1.0)*x12740*x12748))+((r11*x12742))+((r10*x12733*x12735))+((r10*x12739))+(((-1.0)*r12*sj3*x12745)));
evalcond[5]=((((-1.0)*r20*x12742*x12749))+((r21*x12735))+((r22*x12747))+((cj3*x12733*x12736))+x12738+((r20*x12740))+(((-1.0)*cj2*x12741)));
evalcond[6]=((((-1.0)*x12738))+((x12735*x12746))+(((-1.0)*r01*x12740*x12749))+((r00*x12739))+(((-1.0)*r02*sj3*x12745))+((cj1*cj2))+((r01*x12742)));
evalcond[7]=(((r01*x12733*x12739))+(((-1.0)*x12751))+((r02*x12747))+((r00*x12740))+((r01*x12735))+(((-1.0)*x12742*x12746)));
evalcond[8]=((((-1.0)*sj3*x12736*x12749))+((r20*x12733*x12735))+((r20*x12739))+(((-1.0)*x12751))+(((-1.0)*sj3*x12732*x12734))+((r21*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12752 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12752.value)+(((1.5707963267949)*(x12753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12754=IKsin(j4);
IkReal x12755=IKcos(j4);
IkReal x12756=((1.0)*r22);
IkReal x12757=(gconst20*sj3);
IkReal x12758=(gconst19*r21);
IkReal x12759=(gconst20*r10);
IkReal x12760=(sj1*sj2);
IkReal x12761=(cj3*gconst19);
IkReal x12762=(gconst19*sj3);
IkReal x12763=((1.0)*cj1);
IkReal x12764=(cj3*gconst20);
IkReal x12765=(sj2*x12763);
IkReal x12766=((1.0)*cj2*sj1);
IkReal x12767=((1.0)*x12754);
IkReal x12768=(r00*x12755);
IkReal x12769=(cj3*x12754);
IkReal x12770=(r11*x12755);
IkReal x12771=((1.0)*x12755);
IkReal x12772=(gconst19*x12754);
IkReal x12773=(x12765+x12766);
evalcond[0]=(((x12754*x12758))+(((-1.0)*gconst20*r20*x12767))+(((-1.0)*x12755*x12756)));
evalcond[1]=(((r01*x12772))+(((-1.0)*r02*x12771))+(((-1.0)*gconst20*r00*x12767)));
evalcond[2]=((1.0)+(((-1.0)*x12759*x12767))+(((-1.0)*r12*x12771))+((r11*x12772)));
evalcond[3]=(((x12761*x12770))+((r12*x12769))+((r11*x12757))+(((-1.0)*cj3*x12759*x12771))+((r10*x12762)));
evalcond[4]=((((-1.0)*r12*sj3*x12767))+(((-1.0)*x12762*x12770))+((r10*x12755*x12757))+((r11*x12764))+((r10*x12761)));
evalcond[5]=(((r22*x12769))+(((-1.0)*r20*x12764*x12771))+((r20*x12762))+((cj3*x12755*x12758))+x12760+((r21*x12757))+(((-1.0)*cj2*x12763)));
evalcond[6]=((((-1.0)*r01*x12762*x12771))+(((-1.0)*x12760))+((x12757*x12768))+((cj1*cj2))+(((-1.0)*r02*sj3*x12767))+((r00*x12761))+((r01*x12764)));
evalcond[7]=((((-1.0)*x12764*x12768))+((r01*x12755*x12761))+((r02*x12769))+((r01*x12757))+(((-1.0)*x12773))+((r00*x12762)));
evalcond[8]=((((-1.0)*sj3*x12754*x12756))+((r21*x12764))+((r20*x12761))+(((-1.0)*x12773))+(((-1.0)*sj3*x12758*x12771))+((r20*x12755*x12757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12774=((-1.0)*r01);
IkReal x12776 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12776)==0){
continue;
}
IkReal x12775=pow(x12776,-0.5);
CheckValue<IkReal> x12777 = IKatan2WithCheck(IkReal(x12774),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12777.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12777.value))));
IkReal gconst22=(x12774*x12775);
IkReal gconst23=((1.0)*r00*x12775);
CheckValue<IkReal> x12778 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12778.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12778.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12779=((-1.0)*r01);
CheckValue<IkReal> x12782 = IKatan2WithCheck(IkReal(x12779),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12782.valid){
continue;
}
IkReal x12780=((1.0)*(x12782.value));
IkReal x12781=x12775;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12780)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12780)));
IkReal gconst22=(x12779*x12781);
IkReal gconst23=((1.0)*r00*x12781);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12783=((-1.0)*r01);
CheckValue<IkReal> x12786 = IKatan2WithCheck(IkReal(x12783),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12786.valid){
continue;
}
IkReal x12784=((1.0)*(x12786.value));
IkReal x12785=x12775;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x12784)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12784)));
IkReal gconst22=(x12783*x12785);
IkReal gconst23=((1.0)*r00*x12785);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12787=gconst22*gconst22;
IkReal x12788=gconst23*gconst23;
IkReal x12789=(r21*sj3);
IkReal x12790=((1.0)*cj3);
IkReal x12791=(gconst23*r11);
IkReal x12792=(r22*sj3);
IkReal x12793=(gconst22*r10);
IkReal x12794=((1.0)*r20*sj3);
CheckValue<IkReal> x12795=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x12791))+((cj3*gconst23*r21*x12793))+(((-1.0)*r10*r20*x12788*x12790))+(((-1.0)*r12*r22*x12790))+(((-1.0)*r11*r21*x12787*x12790)))),-1);
if(!x12795.valid){
continue;
}
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal((((x12792*x12793))+((x12791*x12792)))),IkReal(((((-1.0)*r11*x12788*x12794))+(((-1.0)*gconst23*x12793*x12794))+((r10*x12787*x12789))+((gconst22*x12789*x12791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12795.value)))+(x12796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12797=IKsin(j4);
IkReal x12798=IKcos(j4);
IkReal x12799=(gconst23*r21);
IkReal x12800=(gconst23*r20);
IkReal x12801=(sj1*sj2);
IkReal x12802=(gconst22*r00);
IkReal x12803=((1.0)*cj2);
IkReal x12804=(gconst22*sj3);
IkReal x12805=(gconst23*sj3);
IkReal x12806=(gconst23*r10);
IkReal x12807=(cj3*gconst23);
IkReal x12808=(cj3*gconst22);
IkReal x12809=(gconst23*r00);
IkReal x12810=((1.0)*cj1*sj2);
IkReal x12811=(sj1*x12803);
IkReal x12812=((1.0)*x12798);
IkReal x12813=(sj3*x12798);
IkReal x12814=(cj3*x12797);
IkReal x12815=((1.0)*x12797);
IkReal x12816=(gconst22*x12797);
IkReal x12817=(sj3*x12815);
IkReal x12818=(x12798*x12808);
IkReal x12819=(x12811+x12810);
evalcond[0]=((((-1.0)*x12800*x12815))+((r21*x12816))+(((-1.0)*r22*x12812)));
evalcond[1]=((((-1.0)*x12809*x12815))+(((-1.0)*r02*x12812))+((r01*x12816)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12812))+((r11*x12816))+(((-1.0)*x12806*x12815)));
evalcond[3]=(((r10*x12804))+((r12*x12814))+((r11*x12805))+((r11*x12818))+(((-1.0)*cj3*x12806*x12812)));
evalcond[4]=(((r10*x12808))+((r11*x12807))+(((-1.0)*r12*x12817))+(((-1.0)*r11*x12804*x12812))+((r10*x12798*x12805)));
evalcond[5]=(x12801+((r20*x12804))+((r21*x12818))+(((-1.0)*cj3*x12800*x12812))+(((-1.0)*cj1*x12803))+((sj3*x12799))+((r22*x12814)));
evalcond[6]=(((cj3*x12802))+(((-1.0)*r02*x12817))+((r01*x12807))+(((-1.0)*r01*x12804*x12812))+(((-1.0)*x12801))+((cj1*cj2))+((r00*x12798*x12805)));
evalcond[7]=(((r02*x12814))+(((-1.0)*x12819))+((r01*x12818))+((r01*x12805))+(((-1.0)*r00*x12807*x12812))+((sj3*x12802)));
evalcond[8]=((((-1.0)*r21*x12804*x12812))+((r20*x12808))+((x12800*x12813))+(((-1.0)*x12819))+(((-1.0)*r22*x12817))+((cj3*x12799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=((1.0)*gconst23);
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x12820)))),-1);
if(!x12821.valid){
continue;
}
CheckValue<IkReal> x12822 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12820))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12821.value)))+(x12822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12823=IKsin(j4);
IkReal x12824=IKcos(j4);
IkReal x12825=(gconst23*r21);
IkReal x12826=(gconst23*r20);
IkReal x12827=(sj1*sj2);
IkReal x12828=(gconst22*r00);
IkReal x12829=((1.0)*cj2);
IkReal x12830=(gconst22*sj3);
IkReal x12831=(gconst23*sj3);
IkReal x12832=(gconst23*r10);
IkReal x12833=(cj3*gconst23);
IkReal x12834=(cj3*gconst22);
IkReal x12835=(gconst23*r00);
IkReal x12836=((1.0)*cj1*sj2);
IkReal x12837=(sj1*x12829);
IkReal x12838=((1.0)*x12824);
IkReal x12839=(sj3*x12824);
IkReal x12840=(cj3*x12823);
IkReal x12841=((1.0)*x12823);
IkReal x12842=(gconst22*x12823);
IkReal x12843=(sj3*x12841);
IkReal x12844=(x12824*x12834);
IkReal x12845=(x12837+x12836);
evalcond[0]=((((-1.0)*r22*x12838))+(((-1.0)*x12826*x12841))+((r21*x12842)));
evalcond[1]=(((r01*x12842))+(((-1.0)*r02*x12838))+(((-1.0)*x12835*x12841)));
evalcond[2]=((1.0)+((r11*x12842))+(((-1.0)*x12832*x12841))+(((-1.0)*r12*x12838)));
evalcond[3]=(((r10*x12830))+((r11*x12831))+((r11*x12844))+((r12*x12840))+(((-1.0)*cj3*x12832*x12838)));
evalcond[4]=(((r10*x12834))+(((-1.0)*r12*x12843))+((r11*x12833))+((r10*x12824*x12831))+(((-1.0)*r11*x12830*x12838)));
evalcond[5]=(x12827+((r22*x12840))+(((-1.0)*cj1*x12829))+(((-1.0)*cj3*x12826*x12838))+((r21*x12844))+((r20*x12830))+((sj3*x12825)));
evalcond[6]=(((cj3*x12828))+(((-1.0)*r02*x12843))+(((-1.0)*x12827))+((r00*x12824*x12831))+(((-1.0)*r01*x12830*x12838))+((r01*x12833))+((cj1*cj2)));
evalcond[7]=(((r01*x12844))+(((-1.0)*r00*x12833*x12838))+((r02*x12840))+(((-1.0)*x12845))+((sj3*x12828))+((r01*x12831)));
evalcond[8]=((((-1.0)*r22*x12843))+((cj3*x12825))+((x12826*x12839))+((r20*x12834))+(((-1.0)*x12845))+(((-1.0)*r21*x12830*x12838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12846=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12846.valid){
continue;
}
CheckValue<IkReal> x12847 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12846.value)))+(x12847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12848=IKsin(j4);
IkReal x12849=IKcos(j4);
IkReal x12850=(gconst23*r21);
IkReal x12851=(gconst23*r20);
IkReal x12852=(sj1*sj2);
IkReal x12853=(gconst22*r00);
IkReal x12854=((1.0)*cj2);
IkReal x12855=(gconst22*sj3);
IkReal x12856=(gconst23*sj3);
IkReal x12857=(gconst23*r10);
IkReal x12858=(cj3*gconst23);
IkReal x12859=(cj3*gconst22);
IkReal x12860=(gconst23*r00);
IkReal x12861=((1.0)*cj1*sj2);
IkReal x12862=(sj1*x12854);
IkReal x12863=((1.0)*x12849);
IkReal x12864=(sj3*x12849);
IkReal x12865=(cj3*x12848);
IkReal x12866=((1.0)*x12848);
IkReal x12867=(gconst22*x12848);
IkReal x12868=(sj3*x12866);
IkReal x12869=(x12849*x12859);
IkReal x12870=(x12862+x12861);
evalcond[0]=(((r21*x12867))+(((-1.0)*r22*x12863))+(((-1.0)*x12851*x12866)));
evalcond[1]=((((-1.0)*x12860*x12866))+(((-1.0)*r02*x12863))+((r01*x12867)));
evalcond[2]=((1.0)+((r11*x12867))+(((-1.0)*r12*x12863))+(((-1.0)*x12857*x12866)));
evalcond[3]=(((r11*x12869))+((r12*x12865))+((r10*x12855))+((r11*x12856))+(((-1.0)*cj3*x12857*x12863)));
evalcond[4]=((((-1.0)*r11*x12855*x12863))+((r10*x12859))+((r10*x12849*x12856))+((r11*x12858))+(((-1.0)*r12*x12868)));
evalcond[5]=(x12852+((r21*x12869))+(((-1.0)*cj1*x12854))+((sj3*x12850))+(((-1.0)*cj3*x12851*x12863))+((r22*x12865))+((r20*x12855)));
evalcond[6]=(((r01*x12858))+(((-1.0)*r01*x12855*x12863))+(((-1.0)*x12852))+(((-1.0)*r02*x12868))+((r00*x12849*x12856))+((cj1*cj2))+((cj3*x12853)));
evalcond[7]=(((r01*x12856))+((sj3*x12853))+(((-1.0)*r00*x12858*x12863))+(((-1.0)*x12870))+((r01*x12869))+((r02*x12865)));
evalcond[8]=(((x12851*x12864))+(((-1.0)*r21*x12855*x12863))+(((-1.0)*r22*x12868))+(((-1.0)*x12870))+((r20*x12859))+((cj3*x12850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12872 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12872)==0){
continue;
}
IkReal x12871=pow(x12872,-0.5);
CheckValue<IkReal> x12873 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12873.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12873.value));
IkReal gconst25=((-1.0)*r21*x12871);
IkReal gconst26=(r20*x12871);
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12874.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
IkReal x12875=((-1.0)*(x12877.value));
IkReal x12876=x12871;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12875;
IkReal gconst24=x12875;
IkReal gconst25=((-1.0)*r21*x12876);
IkReal gconst26=(r20*x12876);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12880.valid){
continue;
}
IkReal x12878=((-1.0)*(x12880.value));
IkReal x12879=x12871;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x12878;
IkReal gconst24=x12878;
IkReal gconst25=((-1.0)*r21*x12879);
IkReal gconst26=(r20*x12879);
CheckValue<IkReal> x12888=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12888.valid){
continue;
}
IkReal x12881=x12888.value;
IkReal x12882=(sj3*x12881);
IkReal x12883=(r11*x12882);
IkReal x12884=(r00*x12882);
IkReal x12885=(r01*x12882);
IkReal x12886=(r10*x12882);
IkReal x12887=(r20*r21*x12882);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x12883))+((r10*x12884*(r20*r20)))+((r10*r20*r21*x12885))+((r01*x12883*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12889=gconst25*gconst25;
IkReal x12890=gconst26*gconst26;
IkReal x12891=(r00*r11);
IkReal x12892=(r01*r10);
IkReal x12893=(r02*sj3);
IkReal x12894=(gconst25*r10);
IkReal x12895=(gconst26*r11);
IkReal x12896=((1.0)*sj3);
IkReal x12897=((1.0)*cj3);
IkReal x12898=(cj3*gconst25*gconst26);
CheckValue<IkReal> x12899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x12890*x12897))+(((-1.0)*r02*r12*x12897))+(((-1.0)*r01*r11*x12889*x12897))+((x12891*x12898))+((x12892*x12898)))),-1);
if(!x12899.valid){
continue;
}
CheckValue<IkReal> x12900 = IKatan2WithCheck(IkReal((((x12893*x12894))+((x12893*x12895)))),IkReal(((((-1.0)*x12890*x12891*x12896))+((sj3*x12889*x12892))+(((-1.0)*gconst26*r00*x12894*x12896))+((gconst25*r01*sj3*x12895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12899.value)))+(x12900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12901=IKsin(j4);
IkReal x12902=IKcos(j4);
IkReal x12903=(gconst26*sj3);
IkReal x12904=(gconst25*sj3);
IkReal x12905=(gconst26*r10);
IkReal x12906=(gconst25*r11);
IkReal x12907=(sj1*sj2);
IkReal x12908=(cj3*gconst25);
IkReal x12909=(cj1*cj2);
IkReal x12910=(gconst26*r00);
IkReal x12911=(gconst26*r20);
IkReal x12912=(cj3*gconst26);
IkReal x12913=((1.0)*cj1*sj2);
IkReal x12914=((1.0)*cj2*sj1);
IkReal x12915=((1.0)*x12902);
IkReal x12916=((1.0)*x12901);
IkReal x12917=(cj3*x12901);
IkReal x12918=(gconst25*x12901);
IkReal x12919=(x12913+x12914);
evalcond[0]=((((-1.0)*x12911*x12916))+((r21*x12918))+(((-1.0)*r22*x12915)));
evalcond[1]=((((-1.0)*x12910*x12916))+(((-1.0)*r02*x12915))+((r01*x12918)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12915))+(((-1.0)*x12905*x12916))+((x12901*x12906)));
evalcond[3]=(((cj3*x12902*x12906))+(((-1.0)*cj3*x12905*x12915))+((r12*x12917))+((r10*x12904))+((r11*x12903)));
evalcond[4]=((((-1.0)*r12*sj3*x12916))+((r10*x12902*x12903))+(((-1.0)*r11*x12904*x12915))+((r10*x12908))+((r11*x12912)));
evalcond[5]=(x12907+(((-1.0)*x12909))+(((-1.0)*cj3*x12911*x12915))+((r20*x12904))+((r21*x12902*x12908))+((r21*x12903))+((r22*x12917)));
evalcond[6]=(x12909+((r00*x12908))+(((-1.0)*x12907))+((r00*x12902*x12903))+(((-1.0)*r01*x12904*x12915))+(((-1.0)*r02*sj3*x12916))+((r01*x12912)));
evalcond[7]=(((r00*x12904))+(((-1.0)*cj3*x12910*x12915))+((r01*x12903))+(((-1.0)*x12919))+((r02*x12917))+((r01*x12902*x12908)));
evalcond[8]=((((-1.0)*x12919))+((r20*x12902*x12903))+((r20*x12908))+(((-1.0)*r21*x12904*x12915))+((r21*x12912))+(((-1.0)*r22*sj3*x12916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12920=gconst26*gconst26;
IkReal x12921=gconst25*gconst25;
IkReal x12922=(r01*r10);
IkReal x12923=(cj3*r11);
IkReal x12924=(gconst25*gconst26);
IkReal x12925=(cj3*r10);
IkReal x12926=(r00*x12920);
IkReal x12927=((1.0)*sj3*x12924);
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x12921))+(((-1.0)*x12922*x12927))+(((-1.0)*r00*r11*x12927))+((r10*sj3*x12926)))),-1);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929 = IKatan2WithCheck(IkReal((((gconst26*r02*x12923))+((gconst25*r02*x12925)))),IkReal(((((-1.0)*x12923*x12926))+((cj3*x12921*x12922))+(((-1.0)*r00*x12924*x12925))+((r01*x12923*x12924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12928.value)))+(x12929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12930=IKsin(j4);
IkReal x12931=IKcos(j4);
IkReal x12932=(gconst26*sj3);
IkReal x12933=(gconst25*sj3);
IkReal x12934=(gconst26*r10);
IkReal x12935=(gconst25*r11);
IkReal x12936=(sj1*sj2);
IkReal x12937=(cj3*gconst25);
IkReal x12938=(cj1*cj2);
IkReal x12939=(gconst26*r00);
IkReal x12940=(gconst26*r20);
IkReal x12941=(cj3*gconst26);
IkReal x12942=((1.0)*cj1*sj2);
IkReal x12943=((1.0)*cj2*sj1);
IkReal x12944=((1.0)*x12931);
IkReal x12945=((1.0)*x12930);
IkReal x12946=(cj3*x12930);
IkReal x12947=(gconst25*x12930);
IkReal x12948=(x12943+x12942);
evalcond[0]=(((r21*x12947))+(((-1.0)*r22*x12944))+(((-1.0)*x12940*x12945)));
evalcond[1]=((((-1.0)*x12939*x12945))+((r01*x12947))+(((-1.0)*r02*x12944)));
evalcond[2]=((1.0)+((x12930*x12935))+(((-1.0)*x12934*x12945))+(((-1.0)*r12*x12944)));
evalcond[3]=(((r11*x12932))+((r12*x12946))+((r10*x12933))+((cj3*x12931*x12935))+(((-1.0)*cj3*x12934*x12944)));
evalcond[4]=(((r10*x12931*x12932))+(((-1.0)*r12*sj3*x12945))+((r11*x12941))+((r10*x12937))+(((-1.0)*r11*x12933*x12944)));
evalcond[5]=(x12936+((r20*x12933))+((r22*x12946))+(((-1.0)*x12938))+((r21*x12932))+(((-1.0)*cj3*x12940*x12944))+((r21*x12931*x12937)));
evalcond[6]=(x12938+(((-1.0)*r01*x12933*x12944))+((r01*x12941))+(((-1.0)*x12936))+(((-1.0)*r02*sj3*x12945))+((r00*x12931*x12932))+((r00*x12937)));
evalcond[7]=((((-1.0)*cj3*x12939*x12944))+(((-1.0)*x12948))+((r01*x12932))+((r00*x12933))+((r02*x12946))+((r01*x12931*x12937)));
evalcond[8]=(((r20*x12937))+(((-1.0)*r22*sj3*x12945))+((r21*x12941))+(((-1.0)*x12948))+((r20*x12931*x12932))+(((-1.0)*r21*x12933*x12944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12949=((1.0)*gconst26);
CheckValue<IkReal> x12950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12949))+(((-1.0)*gconst25*r00)))),-1);
if(!x12950.valid){
continue;
}
CheckValue<IkReal> x12951 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12949))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12950.value)))+(x12951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12952=IKsin(j4);
IkReal x12953=IKcos(j4);
IkReal x12954=(gconst26*sj3);
IkReal x12955=(gconst25*sj3);
IkReal x12956=(gconst26*r10);
IkReal x12957=(gconst25*r11);
IkReal x12958=(sj1*sj2);
IkReal x12959=(cj3*gconst25);
IkReal x12960=(cj1*cj2);
IkReal x12961=(gconst26*r00);
IkReal x12962=(gconst26*r20);
IkReal x12963=(cj3*gconst26);
IkReal x12964=((1.0)*cj1*sj2);
IkReal x12965=((1.0)*cj2*sj1);
IkReal x12966=((1.0)*x12953);
IkReal x12967=((1.0)*x12952);
IkReal x12968=(cj3*x12952);
IkReal x12969=(gconst25*x12952);
IkReal x12970=(x12965+x12964);
evalcond[0]=((((-1.0)*x12962*x12967))+(((-1.0)*r22*x12966))+((r21*x12969)));
evalcond[1]=(((r01*x12969))+(((-1.0)*x12961*x12967))+(((-1.0)*r02*x12966)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12966))+((x12952*x12957))+(((-1.0)*x12956*x12967)));
evalcond[3]=(((r10*x12955))+((cj3*x12953*x12957))+((r11*x12954))+((r12*x12968))+(((-1.0)*cj3*x12956*x12966)));
evalcond[4]=(((r10*x12959))+(((-1.0)*r11*x12955*x12966))+(((-1.0)*r12*sj3*x12967))+((r10*x12953*x12954))+((r11*x12963)));
evalcond[5]=(x12958+((r21*x12954))+(((-1.0)*x12960))+(((-1.0)*cj3*x12962*x12966))+((r22*x12968))+((r20*x12955))+((r21*x12953*x12959)));
evalcond[6]=(x12960+(((-1.0)*r02*sj3*x12967))+((r00*x12953*x12954))+((r01*x12963))+((r00*x12959))+(((-1.0)*x12958))+(((-1.0)*r01*x12955*x12966)));
evalcond[7]=((((-1.0)*x12970))+((r01*x12953*x12959))+((r01*x12954))+((r00*x12955))+((r02*x12968))+(((-1.0)*cj3*x12961*x12966)));
evalcond[8]=((((-1.0)*x12970))+(((-1.0)*r21*x12955*x12966))+((r20*x12953*x12954))+((r20*x12959))+((r21*x12963))+(((-1.0)*r22*sj3*x12967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12972 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12972)==0){
continue;
}
IkReal x12971=pow(x12972,-0.5);
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12973.value))));
IkReal gconst28=((1.0)*r21*x12971);
IkReal gconst29=((-1.0)*r20*x12971);
CheckValue<IkReal> x12974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12974.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12974.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12977 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12977.valid){
continue;
}
IkReal x12975=((1.0)*(x12977.value));
IkReal x12976=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12975)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12975)));
IkReal gconst28=((1.0)*r21*x12976);
IkReal gconst29=((-1.0)*r20*x12976);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12980 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12980.valid){
continue;
}
IkReal x12978=((1.0)*(x12980.value));
IkReal x12979=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12978)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12978)));
IkReal gconst28=((1.0)*r21*x12979);
IkReal gconst29=((-1.0)*r20*x12979);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12983.valid){
continue;
}
IkReal x12981=((1.0)*(x12983.value));
IkReal x12982=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12981)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12981)));
IkReal gconst28=((1.0)*r21*x12982);
IkReal gconst29=((-1.0)*r20*x12982);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
IkReal x12984=((1.0)*(x12986.value));
IkReal x12985=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12984)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12984)));
IkReal gconst28=((1.0)*r21*x12985);
IkReal gconst29=((-1.0)*r20*x12985);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
IkReal x12987=((1.0)*(x12989.value));
IkReal x12988=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12987)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12987)));
IkReal gconst28=((1.0)*r21*x12988);
IkReal gconst29=((-1.0)*r20*x12988);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
IkReal x12990=((1.0)*(x12992.value));
IkReal x12991=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x12990)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12990)));
IkReal gconst28=((1.0)*r21*x12991);
IkReal gconst29=((-1.0)*r20*x12991);
IkReal x12993=r22*r22;
IkReal x12994=(cj1*cj2*r02);
CheckValue<IkReal> x12999=IKPowWithIntegerCheck(((-1.0)+x12993),-1);
if(!x12999.valid){
continue;
}
IkReal x12995=x12999.value;
IkReal x12996=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x12993)))) < -0.00001)
continue;
IkReal x12997=IKsqrt(((1.0)+(((-1.0)*x12993))));
IkReal x12998=(r22*x12995*x12997);
j4eval[0]=((IKabs((x12994+(((-1.0)*x12996)))))+(IKabs((((x12994*x12998))+(((-1.0)*x12996*x12998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13000=(sj1*sj2);
IkReal x13001=(gconst29*r00);
IkReal x13002=(gconst28*r01);
IkReal x13003=(cj1*cj2);
CheckValue<IkReal> x13004 = IKatan2WithCheck(IkReal((((r02*x13003))+(((-1.0)*r02*x13000)))),IkReal(((((-1.0)*x13001*x13003))+((x13000*x13001))+(((-1.0)*x13000*x13002))+((x13002*x13003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13004.valid){
continue;
}
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(IKsign(((x13002*x13002)+(x13001*x13001)+(r02*r02)+(((-2.0)*x13001*x13002)))),-1);
if(!x13005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13004.value)+(((1.5707963267949)*(x13005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13006=IKsin(j4);
IkReal x13007=IKcos(j4);
IkReal x13008=(gconst28*r11);
IkReal x13009=((1.0)*sj1);
IkReal x13010=((1.0)*x13007);
IkReal x13011=(gconst29*x13007);
IkReal x13012=(gconst28*x13006);
IkReal x13013=((1.0)*x13006);
IkReal x13014=(gconst29*x13013);
evalcond[0]=((((-1.0)*r22*x13010))+((r21*x13012))+(((-1.0)*r20*x13014)));
evalcond[1]=(((r01*x13012))+(((-1.0)*r00*x13014))+(((-1.0)*r02*x13010)));
evalcond[2]=((((-1.0)*x13008*x13010))+((r10*x13011))+(((-1.0)*r12*x13013)));
evalcond[3]=((1.0)+((x13006*x13008))+(((-1.0)*r10*x13014))+(((-1.0)*r12*x13010)));
evalcond[4]=(((r00*x13011))+(((-1.0)*sj2*x13009))+((cj1*cj2))+(((-1.0)*r02*x13013))+(((-1.0)*gconst28*r01*x13010)));
evalcond[5]=((((-1.0)*r22*x13013))+((r20*x13011))+(((-1.0)*cj2*x13009))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x13010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13015=(gconst29*r10);
IkReal x13016=(gconst28*r11);
CheckValue<IkReal> x13017=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13015*x13015)+(x13016*x13016)+(((-2.0)*x13015*x13016)))),-1);
if(!x13017.valid){
continue;
}
CheckValue<IkReal> x13018 = IKatan2WithCheck(IkReal(((((-1.0)*x13016))+x13015)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13017.value)))+(x13018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13019=IKsin(j4);
IkReal x13020=IKcos(j4);
IkReal x13021=(gconst28*r11);
IkReal x13022=((1.0)*sj1);
IkReal x13023=((1.0)*x13020);
IkReal x13024=(gconst29*x13020);
IkReal x13025=(gconst28*x13019);
IkReal x13026=((1.0)*x13019);
IkReal x13027=(gconst29*x13026);
evalcond[0]=((((-1.0)*r22*x13023))+((r21*x13025))+(((-1.0)*r20*x13027)));
evalcond[1]=(((r01*x13025))+(((-1.0)*r00*x13027))+(((-1.0)*r02*x13023)));
evalcond[2]=((((-1.0)*x13021*x13023))+(((-1.0)*r12*x13026))+((r10*x13024)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13027))+((x13019*x13021))+(((-1.0)*r12*x13023)));
evalcond[4]=(((r00*x13024))+(((-1.0)*sj2*x13022))+((cj1*cj2))+(((-1.0)*r02*x13026))+(((-1.0)*gconst28*r01*x13023)));
evalcond[5]=((((-1.0)*r22*x13026))+((r20*x13024))+(((-1.0)*cj2*x13022))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r21*x13023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13028=((1.0)*gconst29);
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13028))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13028)))),-1);
if(!x13030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13029.value)+(((1.5707963267949)*(x13030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13031=IKsin(j4);
IkReal x13032=IKcos(j4);
IkReal x13033=(gconst28*r11);
IkReal x13034=((1.0)*sj1);
IkReal x13035=((1.0)*x13032);
IkReal x13036=(gconst29*x13032);
IkReal x13037=(gconst28*x13031);
IkReal x13038=((1.0)*x13031);
IkReal x13039=(gconst29*x13038);
evalcond[0]=((((-1.0)*r20*x13039))+(((-1.0)*r22*x13035))+((r21*x13037)));
evalcond[1]=((((-1.0)*r00*x13039))+(((-1.0)*r02*x13035))+((r01*x13037)));
evalcond[2]=((((-1.0)*x13033*x13035))+(((-1.0)*r12*x13038))+((r10*x13036)));
evalcond[3]=((1.0)+((x13031*x13033))+(((-1.0)*r12*x13035))+(((-1.0)*r10*x13039)));
evalcond[4]=((((-1.0)*gconst28*r01*x13035))+(((-1.0)*r02*x13038))+((r00*x13036))+((cj1*cj2))+(((-1.0)*sj2*x13034)));
evalcond[5]=((((-1.0)*gconst28*r21*x13035))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x13038))+(((-1.0)*cj2*x13034))+((r20*x13036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13042.valid){
continue;
}
IkReal x13040=((1.0)*(x13042.value));
IkReal x13041=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13040)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13040)));
IkReal gconst28=((1.0)*r21*x13041);
IkReal gconst29=((-1.0)*r20*x13041);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13045 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13045.valid){
continue;
}
IkReal x13043=((1.0)*(x13045.value));
IkReal x13044=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13043)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13043)));
IkReal gconst28=((1.0)*r21*x13044);
IkReal gconst29=((-1.0)*r20*x13044);
IkReal x13046=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13050=IKPowWithIntegerCheck(x13046,-1);
if(!x13050.valid){
continue;
}
IkReal x13047=x13050.value;
IkReal x13048=((1.0)*x13047);
IkReal x13049=((((-1.0)*x13048*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13047))+(((-1.0)*x13048*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13049;
j4eval[1]=r12;
j4eval[2]=x13046;
j4eval[3]=IKsign(x13049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13053 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13053.valid){
continue;
}
IkReal x13051=((1.0)*(x13053.value));
IkReal x13052=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13051)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13051)));
IkReal gconst28=((1.0)*r21*x13052);
IkReal gconst29=((-1.0)*r20*x13052);
IkReal x13054=r22*r22;
IkReal x13055=(cj1*r12*sj2);
IkReal x13056=(cj2*r12*sj1);
CheckValue<IkReal> x13060=IKPowWithIntegerCheck(((-1.0)+x13054),-1);
if(!x13060.valid){
continue;
}
IkReal x13057=x13060.value;
if((((1.0)+(((-1.0)*x13054)))) < -0.00001)
continue;
IkReal x13058=IKsqrt(((1.0)+(((-1.0)*x13054))));
IkReal x13059=((1.0)*r22*x13057*x13058);
j4eval[0]=((IKabs(((((-1.0)*x13056*x13059))+(((-1.0)*x13055*x13059)))))+(IKabs((x13055+x13056))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13061=((1.0)*gconst28);
IkReal x13062=(cj2*sj1);
IkReal x13063=(gconst29*r10);
IkReal x13064=(cj1*sj2);
CheckValue<IkReal> x13065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13061))+(((-1.0)*gconst29*r01)))),-1);
if(!x13065.valid){
continue;
}
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal((((x13063*x13064))+(((-1.0)*r11*x13061*x13064))+(((-1.0)*r11*x13061*x13062))+((x13062*x13063)))),IkReal((((r12*x13062))+((r12*x13064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13065.value)))+(x13066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13067=IKcos(j4);
IkReal x13068=IKsin(j4);
IkReal x13069=(gconst29*r10);
IkReal x13070=(gconst29*r20);
IkReal x13071=(gconst28*r21);
IkReal x13072=((1.0)*sj1);
IkReal x13073=(gconst29*r00);
IkReal x13074=((1.0)*x13067);
IkReal x13075=((1.0)*x13068);
IkReal x13076=(gconst28*x13067);
IkReal x13077=(gconst28*x13068);
evalcond[0]=(((r12*x13068))+(((-1.0)*x13069*x13074))+((r11*x13076)));
evalcond[1]=((((-1.0)*x13070*x13075))+((x13068*x13071))+(((-1.0)*r22*x13074)));
evalcond[2]=((((-1.0)*r02*x13074))+((r01*x13077))+(((-1.0)*x13073*x13075)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13074))+(((-1.0)*x13069*x13075))+((r11*x13077)));
evalcond[4]=(((r02*x13068))+((r01*x13076))+(((-1.0)*sj2*x13072))+(((-1.0)*x13073*x13074))+((cj1*cj2)));
evalcond[5]=(((x13067*x13071))+(((-1.0)*cj1*sj2))+((r22*x13068))+(((-1.0)*x13070*x13074))+(((-1.0)*cj2*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13078=(gconst28*r11);
IkReal x13079=(gconst29*r10);
CheckValue<IkReal> x13080 = IKatan2WithCheck(IkReal(((((-1.0)*x13079))+x13078)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13080.valid){
continue;
}
CheckValue<IkReal> x13081=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13078*x13078)))+(((2.0)*x13078*x13079))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13079*x13079))))),-1);
if(!x13081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13080.value)+(((1.5707963267949)*(x13081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13082=IKcos(j4);
IkReal x13083=IKsin(j4);
IkReal x13084=(gconst29*r10);
IkReal x13085=(gconst29*r20);
IkReal x13086=(gconst28*r21);
IkReal x13087=((1.0)*sj1);
IkReal x13088=(gconst29*r00);
IkReal x13089=((1.0)*x13082);
IkReal x13090=((1.0)*x13083);
IkReal x13091=(gconst28*x13082);
IkReal x13092=(gconst28*x13083);
evalcond[0]=((((-1.0)*x13084*x13089))+((r11*x13091))+((r12*x13083)));
evalcond[1]=(((x13083*x13086))+(((-1.0)*x13085*x13090))+(((-1.0)*r22*x13089)));
evalcond[2]=((((-1.0)*r02*x13089))+((r01*x13092))+(((-1.0)*x13088*x13090)));
evalcond[3]=((1.0)+(((-1.0)*x13084*x13090))+((r11*x13092))+(((-1.0)*r12*x13089)));
evalcond[4]=(((r02*x13083))+((r01*x13091))+((cj1*cj2))+(((-1.0)*x13088*x13089))+(((-1.0)*sj2*x13087)));
evalcond[5]=((((-1.0)*cj2*x13087))+(((-1.0)*x13085*x13089))+(((-1.0)*cj1*sj2))+((r22*x13083))+((x13082*x13086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13093=((1.0)*gconst29);
CheckValue<IkReal> x13094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13093))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13093))+(((-1.0)*gconst28*r00)))),-1);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13094.value)+(((1.5707963267949)*(x13095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKcos(j4);
IkReal x13097=IKsin(j4);
IkReal x13098=(gconst29*r10);
IkReal x13099=(gconst29*r20);
IkReal x13100=(gconst28*r21);
IkReal x13101=((1.0)*sj1);
IkReal x13102=(gconst29*r00);
IkReal x13103=((1.0)*x13096);
IkReal x13104=((1.0)*x13097);
IkReal x13105=(gconst28*x13096);
IkReal x13106=(gconst28*x13097);
evalcond[0]=((((-1.0)*x13098*x13103))+((r12*x13097))+((r11*x13105)));
evalcond[1]=(((x13097*x13100))+(((-1.0)*x13099*x13104))+(((-1.0)*r22*x13103)));
evalcond[2]=(((r01*x13106))+(((-1.0)*x13102*x13104))+(((-1.0)*r02*x13103)));
evalcond[3]=((1.0)+(((-1.0)*x13098*x13104))+(((-1.0)*r12*x13103))+((r11*x13106)));
evalcond[4]=(((r02*x13097))+((r01*x13105))+(((-1.0)*sj2*x13101))+(((-1.0)*x13102*x13103))+((cj1*cj2)));
evalcond[5]=(((x13096*x13100))+(((-1.0)*x13099*x13103))+(((-1.0)*cj2*x13101))+(((-1.0)*cj1*sj2))+((r22*x13097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13109.valid){
continue;
}
IkReal x13107=((1.0)*(x13109.value));
IkReal x13108=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13107)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13107)));
IkReal gconst28=((1.0)*r21*x13108);
IkReal gconst29=((-1.0)*r20*x13108);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
IkReal x13110=((1.0)*(x13112.value));
IkReal x13111=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13110)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13110)));
IkReal gconst28=((1.0)*r21*x13111);
IkReal gconst29=((-1.0)*r20*x13111);
IkReal x13113=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13117=IKPowWithIntegerCheck(x13113,-1);
if(!x13117.valid){
continue;
}
IkReal x13114=x13117.value;
IkReal x13115=((1.0)*x13114);
IkReal x13116=((((-1.0)*x13115*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13115*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13114)));
j4eval[0]=x13116;
j4eval[1]=r12;
j4eval[2]=x13113;
j4eval[3]=IKsign(x13116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13120 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13120.valid){
continue;
}
IkReal x13118=((1.0)*(x13120.value));
IkReal x13119=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13118)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13118)));
IkReal gconst28=((1.0)*r21*x13119);
IkReal gconst29=((-1.0)*r20*x13119);
IkReal x13121=r22*r22;
IkReal x13122=(cj1*cj2*r12);
IkReal x13123=(r12*sj1*sj2);
CheckValue<IkReal> x13127=IKPowWithIntegerCheck(((-1.0)+x13121),-1);
if(!x13127.valid){
continue;
}
IkReal x13124=x13127.value;
if((((1.0)+(((-1.0)*x13121)))) < -0.00001)
continue;
IkReal x13125=IKsqrt(((1.0)+(((-1.0)*x13121))));
IkReal x13126=(r22*x13124*x13125);
j4eval[0]=((IKabs((x13122+(((-1.0)*x13123)))))+(IKabs((((x13123*x13126))+(((-1.0)*x13122*x13126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13128=(sj1*sj2);
IkReal x13129=(gconst28*r11);
IkReal x13130=(cj1*cj2);
IkReal x13131=(gconst29*r10);
CheckValue<IkReal> x13132=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*gconst29*r01)))),-1);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133 = IKatan2WithCheck(IkReal((((x13130*x13131))+(((-1.0)*x13128*x13131))+((x13128*x13129))+(((-1.0)*x13129*x13130)))),IkReal(((((-1.0)*r12*x13128))+((r12*x13130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13132.value)))+(x13133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13134=IKcos(j4);
IkReal x13135=IKsin(j4);
IkReal x13136=(gconst29*r10);
IkReal x13137=(gconst29*r20);
IkReal x13138=(gconst28*r21);
IkReal x13139=((1.0)*cj2);
IkReal x13140=(gconst29*r00);
IkReal x13141=((1.0)*x13134);
IkReal x13142=((1.0)*x13135);
IkReal x13143=(gconst28*x13134);
IkReal x13144=(gconst28*x13135);
evalcond[0]=(((r12*x13135))+((r11*x13143))+(((-1.0)*x13136*x13141)));
evalcond[1]=(((x13135*x13138))+(((-1.0)*x13137*x13142))+(((-1.0)*r22*x13141)));
evalcond[2]=((((-1.0)*x13140*x13142))+(((-1.0)*r02*x13141))+((r01*x13144)));
evalcond[3]=((1.0)+((r11*x13144))+(((-1.0)*r12*x13141))+(((-1.0)*x13136*x13142)));
evalcond[4]=((((-1.0)*cj1*x13139))+((x13134*x13138))+((sj1*sj2))+(((-1.0)*x13137*x13141))+((r22*x13135)));
evalcond[5]=((((-1.0)*x13140*x13141))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13139))+((r02*x13135))+((r01*x13143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13145=(gconst28*r11);
IkReal x13146=(gconst29*r10);
CheckValue<IkReal> x13147=IKPowWithIntegerCheck(IKsign(((((2.0)*x13145*x13146))+(((-1.0)*(x13146*x13146)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13145*x13145))))),-1);
if(!x13147.valid){
continue;
}
CheckValue<IkReal> x13148 = IKatan2WithCheck(IkReal((x13145+(((-1.0)*x13146)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13147.value)))+(x13148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13149=IKcos(j4);
IkReal x13150=IKsin(j4);
IkReal x13151=(gconst29*r10);
IkReal x13152=(gconst29*r20);
IkReal x13153=(gconst28*r21);
IkReal x13154=((1.0)*cj2);
IkReal x13155=(gconst29*r00);
IkReal x13156=((1.0)*x13149);
IkReal x13157=((1.0)*x13150);
IkReal x13158=(gconst28*x13149);
IkReal x13159=(gconst28*x13150);
evalcond[0]=((((-1.0)*x13151*x13156))+((r11*x13158))+((r12*x13150)));
evalcond[1]=(((x13150*x13153))+(((-1.0)*x13152*x13157))+(((-1.0)*r22*x13156)));
evalcond[2]=((((-1.0)*r02*x13156))+((r01*x13159))+(((-1.0)*x13155*x13157)));
evalcond[3]=((1.0)+(((-1.0)*x13151*x13157))+(((-1.0)*r12*x13156))+((r11*x13159)));
evalcond[4]=(((x13149*x13153))+(((-1.0)*x13152*x13156))+((sj1*sj2))+(((-1.0)*cj1*x13154))+((r22*x13150)));
evalcond[5]=((((-1.0)*sj1*x13154))+((r02*x13150))+(((-1.0)*cj1*sj2))+((r01*x13158))+(((-1.0)*x13155*x13156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13160=((1.0)*gconst29);
CheckValue<IkReal> x13161 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13160))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13161.valid){
continue;
}
CheckValue<IkReal> x13162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13160))+(((-1.0)*gconst28*r00)))),-1);
if(!x13162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13161.value)+(((1.5707963267949)*(x13162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13163=IKcos(j4);
IkReal x13164=IKsin(j4);
IkReal x13165=(gconst29*r10);
IkReal x13166=(gconst29*r20);
IkReal x13167=(gconst28*r21);
IkReal x13168=((1.0)*cj2);
IkReal x13169=(gconst29*r00);
IkReal x13170=((1.0)*x13163);
IkReal x13171=((1.0)*x13164);
IkReal x13172=(gconst28*x13163);
IkReal x13173=(gconst28*x13164);
evalcond[0]=((((-1.0)*x13165*x13170))+((r11*x13172))+((r12*x13164)));
evalcond[1]=((((-1.0)*x13166*x13171))+(((-1.0)*r22*x13170))+((x13164*x13167)));
evalcond[2]=(((r01*x13173))+(((-1.0)*x13169*x13171))+(((-1.0)*r02*x13170)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13170))+(((-1.0)*x13165*x13171))+((r11*x13173)));
evalcond[4]=((((-1.0)*cj1*x13168))+((r22*x13164))+((sj1*sj2))+(((-1.0)*x13166*x13170))+((x13163*x13167)));
evalcond[5]=(((r01*x13172))+(((-1.0)*x13169*x13170))+(((-1.0)*sj1*x13168))+(((-1.0)*cj1*sj2))+((r02*x13164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13176 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13176.valid){
continue;
}
IkReal x13174=((1.0)*(x13176.value));
IkReal x13175=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13174)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13174)));
IkReal gconst28=((1.0)*r21*x13175);
IkReal gconst29=((-1.0)*r20*x13175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13179 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13179.valid){
continue;
}
IkReal x13177=((1.0)*(x13179.value));
IkReal x13178=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13177)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13177)));
IkReal gconst28=((1.0)*r21*x13178);
IkReal gconst29=((-1.0)*r20*x13178);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13182 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13182.valid){
continue;
}
IkReal x13180=((1.0)*(x13182.value));
IkReal x13181=x12971;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13180)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13180)));
IkReal gconst28=((1.0)*r21*x13181);
IkReal gconst29=((-1.0)*r20*x13181);
IkReal x13183=r22*r22;
CheckValue<IkReal> x13186=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x13183))),-1);
if(!x13186.valid){
continue;
}
IkReal x13184=x13186.value;
IkReal x13185=((1.0)*x13184);
j4eval[0]=IKsign((((x13185*(r20*r20*r20*r20)))+(((2.0)*x13184*(r20*r20)*(r21*r21)))+x13183+((x13185*(r21*r21*r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13187=(sj1*sj2);
IkReal x13188=(gconst28*r21);
IkReal x13189=(gconst29*r20);
IkReal x13190=(cj1*cj2);
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x13189*x13189)+(((-2.0)*x13188*x13189))+(x13188*x13188))),-1);
if(!x13191.valid){
continue;
}
CheckValue<IkReal> x13192 = IKatan2WithCheck(IkReal((((r22*x13187))+(((-1.0)*r22*x13190)))),IkReal(((((-1.0)*x13187*x13189))+((x13187*x13188))+(((-1.0)*x13188*x13190))+((x13189*x13190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13191.value)))+(x13192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13193=IKsin(j4);
IkReal x13194=IKcos(j4);
IkReal x13195=(gconst28*r11);
IkReal x13196=((1.0)*cj2);
IkReal x13197=((1.0)*x13194);
IkReal x13198=(gconst29*x13194);
IkReal x13199=(gconst28*x13193);
IkReal x13200=((1.0)*x13193);
IkReal x13201=(gconst29*x13200);
evalcond[0]=(((r21*x13199))+(((-1.0)*r22*x13197))+(((-1.0)*r20*x13201)));
evalcond[1]=((((-1.0)*r02*x13197))+(((-1.0)*r00*x13201))+((r01*x13199)));
evalcond[2]=((((-1.0)*x13195*x13197))+((r10*x13198))+(((-1.0)*r12*x13200)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13197))+(((-1.0)*r10*x13201))+((x13193*x13195)));
evalcond[4]=((((-1.0)*cj1*x13196))+((sj1*sj2))+((r20*x13198))+(((-1.0)*r22*x13200))+(((-1.0)*gconst28*r21*x13197)));
evalcond[5]=((((-1.0)*r02*x13200))+(((-1.0)*cj1*sj2))+((r00*x13198))+(((-1.0)*gconst28*r01*x13197))+(((-1.0)*sj1*x13196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13202=(gconst29*r10);
IkReal x13203=(gconst28*r11);
CheckValue<IkReal> x13204 = IKatan2WithCheck(IkReal((x13202+(((-1.0)*x13203)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13204.valid){
continue;
}
CheckValue<IkReal> x13205=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13203*x13203)+(((-2.0)*x13202*x13203))+(x13202*x13202))),-1);
if(!x13205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13204.value)+(((1.5707963267949)*(x13205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13206=IKsin(j4);
IkReal x13207=IKcos(j4);
IkReal x13208=(gconst28*r11);
IkReal x13209=((1.0)*cj2);
IkReal x13210=((1.0)*x13207);
IkReal x13211=(gconst29*x13207);
IkReal x13212=(gconst28*x13206);
IkReal x13213=((1.0)*x13206);
IkReal x13214=(gconst29*x13213);
evalcond[0]=(((r21*x13212))+(((-1.0)*r22*x13210))+(((-1.0)*r20*x13214)));
evalcond[1]=(((r01*x13212))+(((-1.0)*r02*x13210))+(((-1.0)*r00*x13214)));
evalcond[2]=(((r10*x13211))+(((-1.0)*x13208*x13210))+(((-1.0)*r12*x13213)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13214))+(((-1.0)*r12*x13210))+((x13206*x13208)));
evalcond[4]=((((-1.0)*cj1*x13209))+((sj1*sj2))+((r20*x13211))+(((-1.0)*r22*x13213))+(((-1.0)*gconst28*r21*x13210)));
evalcond[5]=(((r00*x13211))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13213))+(((-1.0)*gconst28*r01*x13210))+(((-1.0)*sj1*x13209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13215=((1.0)*gconst29);
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
CheckValue<IkReal> x13217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13215)))),-1);
if(!x13217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13216.value)+(((1.5707963267949)*(x13217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13218=IKsin(j4);
IkReal x13219=IKcos(j4);
IkReal x13220=(gconst28*r11);
IkReal x13221=((1.0)*cj2);
IkReal x13222=((1.0)*x13219);
IkReal x13223=(gconst29*x13219);
IkReal x13224=(gconst28*x13218);
IkReal x13225=((1.0)*x13218);
IkReal x13226=(gconst29*x13225);
evalcond[0]=(((r21*x13224))+(((-1.0)*r22*x13222))+(((-1.0)*r20*x13226)));
evalcond[1]=((((-1.0)*r00*x13226))+(((-1.0)*r02*x13222))+((r01*x13224)));
evalcond[2]=((((-1.0)*x13220*x13222))+((r10*x13223))+(((-1.0)*r12*x13225)));
evalcond[3]=((1.0)+((x13218*x13220))+(((-1.0)*r12*x13222))+(((-1.0)*r10*x13226)));
evalcond[4]=((((-1.0)*cj1*x13221))+(((-1.0)*r22*x13225))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13222))+((r20*x13223)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x13225))+((r00*x13223))+(((-1.0)*gconst28*r01*x13222))+(((-1.0)*sj1*x13221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x13229 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13229.valid){
continue;
}
IkReal x13227=((1.0)*(x13229.value));
IkReal x13228=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13227)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13228);
rxp1_1=(px*r21);
rxp1_2=(r11*x13228);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13227)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x13230=((1.0)*r11*r21);
IkReal x13231=((1.0)*r10*r20);
j4eval[0]=(x13230+x13231);
j4eval[1]=((((-1.0)*sj3*x13231))+(((-1.0)*sj3*x13230)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13234 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13234.valid){
continue;
}
IkReal x13232=((1.0)*(x13234.value));
IkReal x13233=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13232)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13233);
rxp1_1=(px*r21);
rxp1_2=(r11*x13233);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13232)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x13235=((1.0)*cj3);
IkReal x13236=(r10*r20);
IkReal x13237=(r11*r21);
j4eval[0]=((((1.0)*x13237))+(((1.0)*x13236)));
j4eval[1]=(((x13235*x13236))+((x13235*x13237)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13240 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13240.valid){
continue;
}
IkReal x13238=((1.0)*(x13240.value));
IkReal x13239=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13238)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13239);
rxp1_1=(px*r21);
rxp1_2=(r11*x13239);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13238)));
IkReal gconst28=((1.0)*r21);
IkReal gconst29=((-1.0)*r20);
IkReal x13241=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x13241))+(((-1.0)*r10*r20*x13241)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13242=((1.0)*r11);
CheckValue<IkReal> x13243=IKPowWithIntegerCheck(r02,-1);
if(!x13243.valid){
continue;
}
CheckValue<IkReal> x13244=IKPowWithIntegerCheck(sj3,-1);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245=IKPowWithIntegerCheck((((gconst29*r10*sj3))+(((-1.0)*gconst28*sj3*x13242))),-1);
if(!x13245.valid){
continue;
}
if( IKabs(((x13243.value)*(x13244.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13245.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13242)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13243.value)*(x13244.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13245.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13242))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13243.value)*(x13244.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13245.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13242))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13246=IKsin(j4);
IkReal x13247=IKcos(j4);
IkReal x13248=(gconst28*sj3);
IkReal x13249=(sj1*sj2);
IkReal x13250=((1.0)*cj2);
IkReal x13251=(gconst29*r10);
IkReal x13252=(gconst29*r11);
IkReal x13253=(cj3*gconst28);
IkReal x13254=(gconst29*r21);
IkReal x13255=((1.0)*cj1*sj2);
IkReal x13256=(sj1*x13250);
IkReal x13257=((1.0)*gconst29*r20);
IkReal x13258=(gconst28*x13246);
IkReal x13259=((1.0)*x13247);
IkReal x13260=(cj3*x13247);
IkReal x13261=((1.0)*x13246);
IkReal x13262=(sj3*x13247);
IkReal x13263=(x13256+x13255);
evalcond[0]=((-1.0)*r02*x13247);
evalcond[1]=(((r21*x13258))+(((-1.0)*x13246*x13257)));
evalcond[2]=((1.0)+(((-1.0)*x13251*x13261))+((r11*x13258)));
evalcond[3]=((((-1.0)*x13249))+(((-1.0)*r02*sj3*x13261))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x13263))+((cj3*r02*x13246)));
evalcond[5]=(((cj3*x13252))+((r10*x13253))+((x13251*x13262))+(((-1.0)*r11*x13248*x13259)));
evalcond[6]=(((sj3*x13252))+((r10*x13248))+(((-1.0)*cj3*x13251*x13259))+((r11*x13247*x13253)));
evalcond[7]=(((sj3*x13254))+((r21*x13247*x13253))+x13249+(((-1.0)*x13257*x13260))+((r20*x13248))+(((-1.0)*cj1*x13250)));
evalcond[8]=((((-1.0)*x13263))+((cj3*x13254))+(((-1.0)*r21*x13248*x13259))+((gconst29*r20*x13262))+((r20*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13264=(gconst28*r11);
IkReal x13265=((1.0)*gconst29);
CheckValue<IkReal> x13266=IKPowWithIntegerCheck((x13264+(((-1.0)*r10*x13265))),-1);
if(!x13266.valid){
continue;
}
CheckValue<IkReal> x13267=IKPowWithIntegerCheck((((cj3*x13264))+(((-1.0)*cj3*r10*x13265))),-1);
if(!x13267.valid){
continue;
}
if( IKabs(((-1.0)*(x13266.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13267.value)*(((((-1.0)*gconst28*r10*sj3))+(((-1.0)*r11*sj3*x13265)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13266.value)))+IKsqr(((x13267.value)*(((((-1.0)*gconst28*r10*sj3))+(((-1.0)*r11*sj3*x13265))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13266.value)), ((x13267.value)*(((((-1.0)*gconst28*r10*sj3))+(((-1.0)*r11*sj3*x13265))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13268=IKsin(j4);
IkReal x13269=IKcos(j4);
IkReal x13270=(gconst28*sj3);
IkReal x13271=(sj1*sj2);
IkReal x13272=((1.0)*cj2);
IkReal x13273=(gconst29*r10);
IkReal x13274=(gconst29*r11);
IkReal x13275=(cj3*gconst28);
IkReal x13276=(gconst29*r21);
IkReal x13277=((1.0)*cj1*sj2);
IkReal x13278=(sj1*x13272);
IkReal x13279=((1.0)*gconst29*r20);
IkReal x13280=(gconst28*x13268);
IkReal x13281=((1.0)*x13269);
IkReal x13282=(cj3*x13269);
IkReal x13283=((1.0)*x13268);
IkReal x13284=(sj3*x13269);
IkReal x13285=(x13277+x13278);
evalcond[0]=((-1.0)*r02*x13269);
evalcond[1]=((((-1.0)*x13268*x13279))+((r21*x13280)));
evalcond[2]=((1.0)+(((-1.0)*x13273*x13283))+((r11*x13280)));
evalcond[3]=((((-1.0)*x13271))+((cj1*cj2))+(((-1.0)*r02*sj3*x13283)));
evalcond[4]=(((cj3*r02*x13268))+(((-1.0)*x13285)));
evalcond[5]=(((x13273*x13284))+((r10*x13275))+((cj3*x13274))+(((-1.0)*r11*x13270*x13281)));
evalcond[6]=((((-1.0)*cj3*x13273*x13281))+((r11*x13269*x13275))+((r10*x13270))+((sj3*x13274)));
evalcond[7]=(((r20*x13270))+(((-1.0)*cj1*x13272))+((sj3*x13276))+(((-1.0)*x13279*x13282))+x13271+((r21*x13269*x13275)));
evalcond[8]=(((gconst29*r20*x13284))+((r20*x13275))+((cj3*x13276))+(((-1.0)*r21*x13270*x13281))+(((-1.0)*x13285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13286=((1.0)*r11);
IkReal x13287=(gconst29*r10);
CheckValue<IkReal> x13288=IKPowWithIntegerCheck(((((-1.0)*x13287))+((gconst28*r11))),-1);
if(!x13288.valid){
continue;
}
CheckValue<IkReal> x13289=IKPowWithIntegerCheck((((sj3*x13287))+(((-1.0)*gconst28*sj3*x13286))),-1);
if(!x13289.valid){
continue;
}
if( IKabs(((-1.0)*(x13288.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13289.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13286)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13288.value)))+IKsqr(((x13289.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13286))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13288.value)), ((x13289.value)*(((((-1.0)*cj3*gconst28*r10))+(((-1.0)*cj3*gconst29*x13286))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13290=IKsin(j4);
IkReal x13291=IKcos(j4);
IkReal x13292=(gconst28*sj3);
IkReal x13293=(sj1*sj2);
IkReal x13294=((1.0)*cj2);
IkReal x13295=(gconst29*r10);
IkReal x13296=(gconst29*r11);
IkReal x13297=(cj3*gconst28);
IkReal x13298=(gconst29*r21);
IkReal x13299=((1.0)*cj1*sj2);
IkReal x13300=(sj1*x13294);
IkReal x13301=((1.0)*gconst29*r20);
IkReal x13302=(gconst28*x13290);
IkReal x13303=((1.0)*x13291);
IkReal x13304=(cj3*x13291);
IkReal x13305=((1.0)*x13290);
IkReal x13306=(sj3*x13291);
IkReal x13307=(x13299+x13300);
evalcond[0]=((-1.0)*r02*x13291);
evalcond[1]=(((r21*x13302))+(((-1.0)*x13290*x13301)));
evalcond[2]=((1.0)+(((-1.0)*x13295*x13305))+((r11*x13302)));
evalcond[3]=((((-1.0)*r02*sj3*x13305))+(((-1.0)*x13293))+((cj1*cj2)));
evalcond[4]=(((cj3*r02*x13290))+(((-1.0)*x13307)));
evalcond[5]=((((-1.0)*r11*x13292*x13303))+((r10*x13297))+((cj3*x13296))+((x13295*x13306)));
evalcond[6]=(((sj3*x13296))+((r11*x13291*x13297))+((r10*x13292))+(((-1.0)*cj3*x13295*x13303)));
evalcond[7]=(((r20*x13292))+((sj3*x13298))+((r21*x13291*x13297))+(((-1.0)*cj1*x13294))+x13293+(((-1.0)*x13301*x13304)));
evalcond[8]=(((r20*x13297))+(((-1.0)*r21*x13292*x13303))+((gconst29*r20*x13306))+((cj3*x13298))+(((-1.0)*x13307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13308=gconst28*gconst28;
IkReal x13309=gconst29*gconst29;
IkReal x13310=(r11*r21);
IkReal x13311=(gconst29*sj3);
IkReal x13312=((1.0)*cj3);
IkReal x13313=(r10*r20);
IkReal x13314=(r10*r21);
IkReal x13315=(r11*r20);
IkReal x13316=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13317=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13308*x13310*x13312))+(((-1.0)*r12*r22*x13312))+((x13314*x13316))+(((-1.0)*x13309*x13312*x13313))+((x13315*x13316)))),-1);
if(!x13317.valid){
continue;
}
CheckValue<IkReal> x13318 = IKatan2WithCheck(IkReal((((r11*r22*x13311))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13310*x13311))+(((-1.0)*sj3*x13309*x13315))+(((-1.0)*gconst28*x13311*x13313))+((sj3*x13308*x13314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13317.value)))+(x13318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13319=IKsin(j4);
IkReal x13320=IKcos(j4);
IkReal x13321=(gconst29*r20);
IkReal x13322=(gconst28*r20);
IkReal x13323=(sj1*sj2);
IkReal x13324=(gconst29*r01);
IkReal x13325=((1.0)*cj2);
IkReal x13326=(r11*sj3);
IkReal x13327=(gconst29*r10);
IkReal x13328=(cj3*gconst28);
IkReal x13329=(cj3*gconst29);
IkReal x13330=(gconst28*sj3);
IkReal x13331=(gconst29*r00);
IkReal x13332=((1.0)*cj1*sj2);
IkReal x13333=(sj1*x13325);
IkReal x13334=((1.0)*x13320);
IkReal x13335=((1.0)*x13319);
IkReal x13336=(cj3*x13319);
IkReal x13337=(gconst28*x13319);
IkReal x13338=(sj3*x13320);
IkReal x13339=(x13333+x13332);
evalcond[0]=((((-1.0)*x13321*x13335))+(((-1.0)*r22*x13334))+((r21*x13337)));
evalcond[1]=(((r01*x13337))+(((-1.0)*x13331*x13335))+(((-1.0)*r02*x13334)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13334))+(((-1.0)*x13327*x13335))+((r11*x13337)));
evalcond[3]=(((r10*x13330))+((gconst29*x13326))+(((-1.0)*cj3*x13327*x13334))+((r11*x13320*x13328))+((r12*x13336)));
evalcond[4]=(((r10*x13328))+(((-1.0)*gconst28*x13326*x13334))+(((-1.0)*r12*sj3*x13335))+((r11*x13329))+((x13327*x13338)));
evalcond[5]=(((r21*x13320*x13328))+((r22*x13336))+((gconst29*r21*sj3))+((sj3*x13322))+(((-1.0)*cj3*x13321*x13334))+(((-1.0)*cj1*x13325))+x13323);
evalcond[6]=((((-1.0)*r01*x13330*x13334))+((cj3*x13324))+(((-1.0)*x13323))+(((-1.0)*r02*sj3*x13335))+((r00*x13328))+((cj1*cj2))+((x13331*x13338)));
evalcond[7]=((((-1.0)*x13339))+((r02*x13336))+((r01*x13320*x13328))+(((-1.0)*r00*x13329*x13334))+((r00*x13330))+((sj3*x13324)));
evalcond[8]=((((-1.0)*x13339))+((cj3*x13322))+((x13321*x13338))+((r21*x13329))+(((-1.0)*r22*sj3*x13335))+(((-1.0)*r21*x13330*x13334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13340=gconst28*gconst28;
IkReal x13341=gconst29*gconst29;
IkReal x13342=(r10*sj3);
IkReal x13343=(gconst29*r11);
IkReal x13344=(cj3*r22);
IkReal x13345=((1.0)*gconst28);
IkReal x13346=(cj3*r10);
IkReal x13347=(r20*x13341);
IkReal x13348=(r21*x13340);
CheckValue<IkReal> x13349 = IKatan2WithCheck(IkReal((((gconst28*r10*x13344))+((x13343*x13344)))),IkReal((((cj3*gconst28*r21*x13343))+(((-1.0)*gconst29*r20*x13345*x13346))+((x13346*x13348))+(((-1.0)*cj3*r11*x13347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13349.valid){
continue;
}
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst29*r21*x13342*x13345))+((r11*sj3*x13348))+((x13342*x13347))+((r12*r22*sj3))+(((-1.0)*r20*sj3*x13343*x13345)))),-1);
if(!x13350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13349.value)+(((1.5707963267949)*(x13350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13351=IKsin(j4);
IkReal x13352=IKcos(j4);
IkReal x13353=(gconst29*r20);
IkReal x13354=(gconst28*r20);
IkReal x13355=(sj1*sj2);
IkReal x13356=(gconst29*r01);
IkReal x13357=((1.0)*cj2);
IkReal x13358=(r11*sj3);
IkReal x13359=(gconst29*r10);
IkReal x13360=(cj3*gconst28);
IkReal x13361=(cj3*gconst29);
IkReal x13362=(gconst28*sj3);
IkReal x13363=(gconst29*r00);
IkReal x13364=((1.0)*cj1*sj2);
IkReal x13365=(sj1*x13357);
IkReal x13366=((1.0)*x13352);
IkReal x13367=((1.0)*x13351);
IkReal x13368=(cj3*x13351);
IkReal x13369=(gconst28*x13351);
IkReal x13370=(sj3*x13352);
IkReal x13371=(x13364+x13365);
evalcond[0]=((((-1.0)*x13353*x13367))+(((-1.0)*r22*x13366))+((r21*x13369)));
evalcond[1]=((((-1.0)*x13363*x13367))+((r01*x13369))+(((-1.0)*r02*x13366)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13366))+((r11*x13369))+(((-1.0)*x13359*x13367)));
evalcond[3]=(((r12*x13368))+((r10*x13362))+((gconst29*x13358))+((r11*x13352*x13360))+(((-1.0)*cj3*x13359*x13366)));
evalcond[4]=(((r10*x13360))+((r11*x13361))+(((-1.0)*gconst28*x13358*x13366))+((x13359*x13370))+(((-1.0)*r12*sj3*x13367)));
evalcond[5]=(((gconst29*r21*sj3))+((r21*x13352*x13360))+(((-1.0)*cj3*x13353*x13366))+((sj3*x13354))+(((-1.0)*cj1*x13357))+((r22*x13368))+x13355);
evalcond[6]=((((-1.0)*r01*x13362*x13366))+((cj3*x13356))+((r00*x13360))+(((-1.0)*x13355))+((x13363*x13370))+((cj1*cj2))+(((-1.0)*r02*sj3*x13367)));
evalcond[7]=(((r00*x13362))+(((-1.0)*r00*x13361*x13366))+((sj3*x13356))+(((-1.0)*x13371))+((r02*x13368))+((r01*x13352*x13360)));
evalcond[8]=(((x13353*x13370))+((cj3*x13354))+(((-1.0)*r22*sj3*x13367))+(((-1.0)*r21*x13362*x13366))+(((-1.0)*x13371))+((r21*x13361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13372=((1.0)*gconst29);
CheckValue<IkReal> x13373 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13372))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13373.valid){
continue;
}
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13372))+(((-1.0)*gconst28*r00)))),-1);
if(!x13374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13373.value)+(((1.5707963267949)*(x13374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13375=IKsin(j4);
IkReal x13376=IKcos(j4);
IkReal x13377=(gconst29*r20);
IkReal x13378=(gconst28*r20);
IkReal x13379=(sj1*sj2);
IkReal x13380=(gconst29*r01);
IkReal x13381=((1.0)*cj2);
IkReal x13382=(r11*sj3);
IkReal x13383=(gconst29*r10);
IkReal x13384=(cj3*gconst28);
IkReal x13385=(cj3*gconst29);
IkReal x13386=(gconst28*sj3);
IkReal x13387=(gconst29*r00);
IkReal x13388=((1.0)*cj1*sj2);
IkReal x13389=(sj1*x13381);
IkReal x13390=((1.0)*x13376);
IkReal x13391=((1.0)*x13375);
IkReal x13392=(cj3*x13375);
IkReal x13393=(gconst28*x13375);
IkReal x13394=(sj3*x13376);
IkReal x13395=(x13388+x13389);
evalcond[0]=(((r21*x13393))+(((-1.0)*r22*x13390))+(((-1.0)*x13377*x13391)));
evalcond[1]=((((-1.0)*x13387*x13391))+((r01*x13393))+(((-1.0)*r02*x13390)));
evalcond[2]=((1.0)+((r11*x13393))+(((-1.0)*x13383*x13391))+(((-1.0)*r12*x13390)));
evalcond[3]=(((gconst29*x13382))+((r10*x13386))+((r12*x13392))+(((-1.0)*cj3*x13383*x13390))+((r11*x13376*x13384)));
evalcond[4]=(((r11*x13385))+((r10*x13384))+(((-1.0)*gconst28*x13382*x13390))+((x13383*x13394))+(((-1.0)*r12*sj3*x13391)));
evalcond[5]=(((gconst29*r21*sj3))+(((-1.0)*cj3*x13377*x13390))+((r21*x13376*x13384))+((sj3*x13378))+((r22*x13392))+(((-1.0)*cj1*x13381))+x13379);
evalcond[6]=(((x13387*x13394))+(((-1.0)*r01*x13386*x13390))+((cj3*x13380))+((r00*x13384))+((cj1*cj2))+(((-1.0)*r02*sj3*x13391))+(((-1.0)*x13379)));
evalcond[7]=(((r01*x13376*x13384))+((sj3*x13380))+((r00*x13386))+(((-1.0)*x13395))+((r02*x13392))+(((-1.0)*r00*x13385*x13390)));
evalcond[8]=((((-1.0)*r21*x13386*x13390))+((cj3*x13378))+((x13377*x13394))+(((-1.0)*r22*sj3*x13391))+(((-1.0)*x13395))+((r21*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13396=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13397=(cj5*r10);
IkReal x13398=(r11*sj5);
j4eval[0]=((((-1.0)*x13397))+x13398);
j4eval[1]=(((sj3*x13397))+(((-1.0)*sj3*x13398)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13399=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13399);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13399);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13400=(r11*sj5);
IkReal x13401=((1.0)*cj5*r10);
j4eval[0]=(x13400+(((-1.0)*x13401)));
j4eval[1]=((((-1.0)*cj3*x13401))+((cj3*x13400)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13402=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13402);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13402);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13403=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13403);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13403);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13404=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13404);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13404);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13405=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13405)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13405)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13406=((1.0)*cj5);
CheckValue<IkReal> x13407=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13406))),-1);
if(!x13407.valid){
continue;
}
CheckValue<IkReal> x13408=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13406))),-1);
if(!x13408.valid){
continue;
}
if( IKabs(((-1.0)*(x13407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13408.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13407.value)))+IKsqr(((x13408.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13407.value)), ((x13408.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13409=IKsin(j4);
IkReal x13410=IKcos(j4);
IkReal x13411=((1.0)*cj5);
IkReal x13412=((1.0)*cj2);
IkReal x13413=(sj5*x13410);
IkReal x13414=(sj5*x13409);
evalcond[0]=((-1.0)*r22*x13410);
evalcond[1]=(((sj1*sj2))+((r22*x13409))+(((-1.0)*cj1*x13412)));
evalcond[2]=((((-1.0)*r00*x13409*x13411))+((r01*x13414)));
evalcond[3]=((((-1.0)*r10*x13410*x13411))+((r11*x13413)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13409*x13411))+((r11*x13414)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13410*x13411))+((r01*x13413))+(((-1.0)*sj1*x13412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(r22,-1);
if(!x13415.valid){
continue;
}
CheckValue<IkReal> x13416=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13416.valid){
continue;
}
if( IKabs(((x13415.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13416.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13415.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13416.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13415.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13416.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13417=IKsin(j4);
IkReal x13418=IKcos(j4);
IkReal x13419=((1.0)*cj5);
IkReal x13420=((1.0)*cj2);
IkReal x13421=(sj5*x13418);
IkReal x13422=(sj5*x13417);
evalcond[0]=((-1.0)*r22*x13418);
evalcond[1]=(((r22*x13417))+((sj1*sj2))+(((-1.0)*cj1*x13420)));
evalcond[2]=((((-1.0)*r00*x13417*x13419))+((r01*x13422)));
evalcond[3]=((((-1.0)*r10*x13418*x13419))+((r11*x13421)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13417*x13419))+((r11*x13422)));
evalcond[5]=((((-1.0)*r00*x13418*x13419))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13420))+((r01*x13421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13423=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13423);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13423);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13424=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13424);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13424);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(r22,-1);
if(!x13425.valid){
continue;
}
CheckValue<IkReal> x13426=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13426.valid){
continue;
}
if( IKabs(((x13425.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13426.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13425.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13426.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13425.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13426.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13427=IKsin(j4);
IkReal x13428=IKcos(j4);
IkReal x13429=((1.0)*cj2);
IkReal x13430=(cj5*x13428);
IkReal x13431=(sj5*x13427);
IkReal x13432=((1.0)*sj5*x13428);
IkReal x13433=((1.0)*cj5*x13427);
evalcond[0]=((-1.0)*r22*x13428);
evalcond[1]=(((r01*x13431))+(((-1.0)*r00*x13433)));
evalcond[2]=((((-1.0)*r22*x13427))+((sj1*sj2))+(((-1.0)*cj1*x13429)));
evalcond[3]=((((-1.0)*r11*x13432))+((r10*x13430)));
evalcond[4]=((1.0)+((r11*x13431))+(((-1.0)*r10*x13433)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13429))+(((-1.0)*r01*x13432))+((r00*x13430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13434=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13434.valid){
continue;
}
CheckValue<IkReal> x13435=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13435.valid){
continue;
}
if( IKabs(((-1.0)*(x13434.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13435.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13434.value)))+IKsqr(((x13435.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13434.value)), ((x13435.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13436=IKsin(j4);
IkReal x13437=IKcos(j4);
IkReal x13438=((1.0)*cj2);
IkReal x13439=(cj5*x13437);
IkReal x13440=(sj5*x13436);
IkReal x13441=((1.0)*sj5*x13437);
IkReal x13442=((1.0)*cj5*x13436);
evalcond[0]=((-1.0)*r22*x13437);
evalcond[1]=(((r01*x13440))+(((-1.0)*r00*x13442)));
evalcond[2]=((((-1.0)*cj1*x13438))+(((-1.0)*r22*x13436))+((sj1*sj2)));
evalcond[3]=((((-1.0)*r11*x13441))+((r10*x13439)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13442))+((r11*x13440)));
evalcond[5]=((((-1.0)*sj1*x13438))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x13441))+((r00*x13439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13443=((1.0)*r11);
CheckValue<IkReal> x13444=IKPowWithIntegerCheck(cj3,-1);
if(!x13444.valid){
continue;
}
CheckValue<IkReal> x13445=IKPowWithIntegerCheck(r22,-1);
if(!x13445.valid){
continue;
}
CheckValue<IkReal> x13446=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13443))+((cj5*r10*sj3))),-1);
if(!x13446.valid){
continue;
}
if( IKabs(((x13444.value)*(x13445.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13446.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13444.value)*(x13445.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13446.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13443))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13444.value)*(x13445.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13446.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13443))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13447=IKsin(j4);
IkReal x13448=IKcos(j4);
IkReal x13449=(cj5*sj3);
IkReal x13450=(r00*sj5);
IkReal x13451=(sj1*sj2);
IkReal x13452=(r11*sj5);
IkReal x13453=(cj3*cj5);
IkReal x13454=(r10*sj5);
IkReal x13455=((1.0)*cj2);
IkReal x13456=((1.0)*cj5);
IkReal x13457=((1.0)*sj3);
IkReal x13458=(r01*sj5);
IkReal x13459=((1.0)*cj1*sj2);
IkReal x13460=(sj1*x13455);
IkReal x13461=(r22*x13447);
IkReal x13462=(cj3*x13448);
IkReal x13463=(x13447*x13456);
IkReal x13464=(x13459+x13460);
evalcond[0]=((-1.0)*r22*x13448);
evalcond[1]=((((-1.0)*r00*x13463))+((x13447*x13458)));
evalcond[2]=(x13451+(((-1.0)*cj1*x13455))+((cj3*x13461)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13463))+((x13447*x13452)));
evalcond[4]=((((-1.0)*x13464))+(((-1.0)*x13457*x13461)));
evalcond[5]=(((r11*x13453))+(((-1.0)*x13448*x13452*x13457))+((r10*x13448*x13449))+((cj3*x13454)));
evalcond[6]=(((sj3*x13454))+(((-1.0)*r10*x13448*x13453))+((x13452*x13462))+((r11*x13449)));
evalcond[7]=(((r00*x13448*x13449))+(((-1.0)*x13451))+(((-1.0)*x13448*x13457*x13458))+((cj1*cj2))+((cj3*x13450))+((r01*x13453)));
evalcond[8]=(((sj3*x13450))+((x13458*x13462))+(((-1.0)*x13464))+((r01*x13449))+(((-1.0)*r00*x13448*x13453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13465=((1.0)*sj3);
IkReal x13466=(r11*sj5);
IkReal x13467=((1.0)*cj5*r10);
CheckValue<IkReal> x13468=IKPowWithIntegerCheck((x13466+(((-1.0)*x13467))),-1);
if(!x13468.valid){
continue;
}
CheckValue<IkReal> x13469=IKPowWithIntegerCheck(((((-1.0)*cj3*x13467))+((cj3*x13466))),-1);
if(!x13469.valid){
continue;
}
if( IKabs(((-1.0)*(x13468.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13469.value)*(((((-1.0)*r10*sj5*x13465))+(((-1.0)*cj5*r11*x13465)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13468.value)))+IKsqr(((x13469.value)*(((((-1.0)*r10*sj5*x13465))+(((-1.0)*cj5*r11*x13465))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13468.value)), ((x13469.value)*(((((-1.0)*r10*sj5*x13465))+(((-1.0)*cj5*r11*x13465))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13470=IKsin(j4);
IkReal x13471=IKcos(j4);
IkReal x13472=(cj5*sj3);
IkReal x13473=(r00*sj5);
IkReal x13474=(sj1*sj2);
IkReal x13475=(r11*sj5);
IkReal x13476=(cj3*cj5);
IkReal x13477=(r10*sj5);
IkReal x13478=((1.0)*cj2);
IkReal x13479=((1.0)*cj5);
IkReal x13480=((1.0)*sj3);
IkReal x13481=(r01*sj5);
IkReal x13482=((1.0)*cj1*sj2);
IkReal x13483=(sj1*x13478);
IkReal x13484=(r22*x13470);
IkReal x13485=(cj3*x13471);
IkReal x13486=(x13470*x13479);
IkReal x13487=(x13483+x13482);
evalcond[0]=((-1.0)*r22*x13471);
evalcond[1]=((((-1.0)*r00*x13486))+((x13470*x13481)));
evalcond[2]=(x13474+(((-1.0)*cj1*x13478))+((cj3*x13484)));
evalcond[3]=((1.0)+((x13470*x13475))+(((-1.0)*r10*x13486)));
evalcond[4]=((((-1.0)*x13487))+(((-1.0)*x13480*x13484)));
evalcond[5]=(((r11*x13476))+((r10*x13471*x13472))+(((-1.0)*x13471*x13475*x13480))+((cj3*x13477)));
evalcond[6]=(((sj3*x13477))+((r11*x13472))+((x13475*x13485))+(((-1.0)*r10*x13471*x13476)));
evalcond[7]=(((r01*x13476))+(((-1.0)*x13474))+((r00*x13471*x13472))+(((-1.0)*x13471*x13480*x13481))+((cj1*cj2))+((cj3*x13473)));
evalcond[8]=(((sj3*x13473))+(((-1.0)*r00*x13471*x13476))+(((-1.0)*x13487))+((r01*x13472))+((x13481*x13485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13488=(cj5*r10);
IkReal x13489=((1.0)*r11);
CheckValue<IkReal> x13490=IKPowWithIntegerCheck(((((-1.0)*x13488))+((r11*sj5))),-1);
if(!x13490.valid){
continue;
}
CheckValue<IkReal> x13491=IKPowWithIntegerCheck((((sj3*x13488))+(((-1.0)*sj3*sj5*x13489))),-1);
if(!x13491.valid){
continue;
}
if( IKabs(((-1.0)*(x13490.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13491.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13489)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13490.value)))+IKsqr(((x13491.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13489))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13490.value)), ((x13491.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13489))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13492=IKsin(j4);
IkReal x13493=IKcos(j4);
IkReal x13494=(cj5*sj3);
IkReal x13495=(r00*sj5);
IkReal x13496=(sj1*sj2);
IkReal x13497=(r11*sj5);
IkReal x13498=(cj3*cj5);
IkReal x13499=(r10*sj5);
IkReal x13500=((1.0)*cj2);
IkReal x13501=((1.0)*cj5);
IkReal x13502=((1.0)*sj3);
IkReal x13503=(r01*sj5);
IkReal x13504=((1.0)*cj1*sj2);
IkReal x13505=(sj1*x13500);
IkReal x13506=(r22*x13492);
IkReal x13507=(cj3*x13493);
IkReal x13508=(x13492*x13501);
IkReal x13509=(x13504+x13505);
evalcond[0]=((-1.0)*r22*x13493);
evalcond[1]=(((x13492*x13503))+(((-1.0)*r00*x13508)));
evalcond[2]=(x13496+(((-1.0)*cj1*x13500))+((cj3*x13506)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13508))+((x13492*x13497)));
evalcond[4]=((((-1.0)*x13502*x13506))+(((-1.0)*x13509)));
evalcond[5]=(((cj3*x13499))+((r10*x13493*x13494))+((r11*x13498))+(((-1.0)*x13493*x13497*x13502)));
evalcond[6]=((((-1.0)*r10*x13493*x13498))+((sj3*x13499))+((x13497*x13507))+((r11*x13494)));
evalcond[7]=((((-1.0)*x13496))+((r00*x13493*x13494))+((cj3*x13495))+((r01*x13498))+(((-1.0)*x13493*x13502*x13503))+((cj1*cj2)));
evalcond[8]=((((-1.0)*r00*x13493*x13498))+((sj3*x13495))+(((-1.0)*x13509))+((r01*x13494))+((x13503*x13507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13510=cj5*cj5;
IkReal x13511=((1.0)*cj3);
IkReal x13512=(r10*r21);
IkReal x13513=(cj5*sj5);
IkReal x13514=(r11*r21);
IkReal x13515=(r11*r20);
IkReal x13516=(r22*sj3);
IkReal x13517=(r10*r20);
IkReal x13518=((1.0)*sj3*x13510);
CheckValue<IkReal> x13519 = IKatan2WithCheck(IkReal((((r10*sj5*x13516))+((cj5*r11*x13516)))),IkReal((((sj3*x13513*x13514))+(((-1.0)*x13515*x13518))+(((-1.0)*sj3*x13513*x13517))+((sj3*x13512))+(((-1.0)*x13512*x13518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13519.valid){
continue;
}
CheckValue<IkReal> x13520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13511))+((cj3*x13512*x13513))+(((-1.0)*x13511*x13514))+((cj3*x13513*x13515))+((cj3*x13510*x13514))+(((-1.0)*x13510*x13511*x13517)))),-1);
if(!x13520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13519.value)+(((1.5707963267949)*(x13520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13521=IKsin(j4);
IkReal x13522=IKcos(j4);
IkReal x13523=(cj5*sj3);
IkReal x13524=(cj5*r10);
IkReal x13525=(r00*sj5);
IkReal x13526=(sj1*sj2);
IkReal x13527=(r11*sj5);
IkReal x13528=(cj3*cj5);
IkReal x13529=((1.0)*cj1);
IkReal x13530=(cj3*sj5);
IkReal x13531=(r21*sj5);
IkReal x13532=(sj3*sj5);
IkReal x13533=(r01*sj5);
IkReal x13534=(sj2*x13529);
IkReal x13535=((1.0)*cj2*sj1);
IkReal x13536=((1.0)*x13522);
IkReal x13537=((1.0)*x13521);
IkReal x13538=(cj3*x13521);
IkReal x13539=(cj3*x13522);
IkReal x13540=(x13535+x13534);
evalcond[0]=((((-1.0)*r22*x13536))+(((-1.0)*cj5*r20*x13537))+((x13521*x13531)));
evalcond[1]=((((-1.0)*cj5*r00*x13537))+(((-1.0)*r02*x13536))+((x13521*x13533)));
evalcond[2]=((1.0)+((x13521*x13527))+(((-1.0)*r12*x13536))+(((-1.0)*x13524*x13537)));
evalcond[3]=(((x13527*x13539))+((r12*x13538))+((r11*x13523))+((r10*x13532))+(((-1.0)*cj3*x13524*x13536)));
evalcond[4]=(((r10*x13522*x13523))+(((-1.0)*sj3*x13527*x13536))+(((-1.0)*r12*sj3*x13537))+((r11*x13528))+((r10*x13530)));
evalcond[5]=(((r21*x13523))+x13526+((r21*x13522*x13530))+((r20*x13532))+(((-1.0)*cj2*x13529))+(((-1.0)*r20*x13528*x13536))+((r22*x13538)));
evalcond[6]=(((r01*x13528))+(((-1.0)*x13526))+(((-1.0)*r02*sj3*x13537))+(((-1.0)*r01*x13532*x13536))+((cj3*x13525))+((cj1*cj2))+((r00*x13522*x13523)));
evalcond[7]=(((r01*x13523))+(((-1.0)*r00*x13528*x13536))+(((-1.0)*x13540))+((r02*x13538))+((r01*x13522*x13530))+((sj3*x13525)));
evalcond[8]=(((r21*x13528))+(((-1.0)*x13540))+((r20*x13530))+((r20*x13522*x13523))+(((-1.0)*r22*sj3*x13537))+(((-1.0)*sj3*x13531*x13536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13541=((1.0)*cj5);
CheckValue<IkReal> x13542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13541))+(((-1.0)*r00*sj5)))),-1);
if(!x13542.valid){
continue;
}
CheckValue<IkReal> x13543 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13542.value)))+(x13543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13544=IKsin(j4);
IkReal x13545=IKcos(j4);
IkReal x13546=(cj5*sj3);
IkReal x13547=(cj5*r10);
IkReal x13548=(r00*sj5);
IkReal x13549=(sj1*sj2);
IkReal x13550=(r11*sj5);
IkReal x13551=(cj3*cj5);
IkReal x13552=((1.0)*cj1);
IkReal x13553=(cj3*sj5);
IkReal x13554=(r21*sj5);
IkReal x13555=(sj3*sj5);
IkReal x13556=(r01*sj5);
IkReal x13557=(sj2*x13552);
IkReal x13558=((1.0)*cj2*sj1);
IkReal x13559=((1.0)*x13545);
IkReal x13560=((1.0)*x13544);
IkReal x13561=(cj3*x13544);
IkReal x13562=(cj3*x13545);
IkReal x13563=(x13558+x13557);
evalcond[0]=((((-1.0)*cj5*r20*x13560))+((x13544*x13554))+(((-1.0)*r22*x13559)));
evalcond[1]=((((-1.0)*cj5*r00*x13560))+(((-1.0)*r02*x13559))+((x13544*x13556)));
evalcond[2]=((1.0)+(((-1.0)*x13547*x13560))+((x13544*x13550))+(((-1.0)*r12*x13559)));
evalcond[3]=(((r10*x13555))+(((-1.0)*cj3*x13547*x13559))+((r11*x13546))+((r12*x13561))+((x13550*x13562)));
evalcond[4]=(((r10*x13553))+((r11*x13551))+((r10*x13545*x13546))+(((-1.0)*r12*sj3*x13560))+(((-1.0)*sj3*x13550*x13559)));
evalcond[5]=(x13549+(((-1.0)*cj2*x13552))+((r21*x13546))+(((-1.0)*r20*x13551*x13559))+((r21*x13545*x13553))+((r22*x13561))+((r20*x13555)));
evalcond[6]=((((-1.0)*r01*x13555*x13559))+(((-1.0)*r02*sj3*x13560))+((r01*x13551))+((cj3*x13548))+((r00*x13545*x13546))+((cj1*cj2))+(((-1.0)*x13549)));
evalcond[7]=((((-1.0)*r00*x13551*x13559))+((r01*x13546))+((r02*x13561))+((sj3*x13548))+(((-1.0)*x13563))+((r01*x13545*x13553)));
evalcond[8]=(((r20*x13545*x13546))+((r21*x13551))+(((-1.0)*r22*sj3*x13560))+((r20*x13553))+(((-1.0)*sj3*x13554*x13559))+(((-1.0)*x13563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13564=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13564.valid){
continue;
}
CheckValue<IkReal> x13565 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13564.value)))+(x13565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13566=IKsin(j4);
IkReal x13567=IKcos(j4);
IkReal x13568=(cj5*sj3);
IkReal x13569=(cj5*r10);
IkReal x13570=(r00*sj5);
IkReal x13571=(sj1*sj2);
IkReal x13572=(r11*sj5);
IkReal x13573=(cj3*cj5);
IkReal x13574=((1.0)*cj1);
IkReal x13575=(cj3*sj5);
IkReal x13576=(r21*sj5);
IkReal x13577=(sj3*sj5);
IkReal x13578=(r01*sj5);
IkReal x13579=(sj2*x13574);
IkReal x13580=((1.0)*cj2*sj1);
IkReal x13581=((1.0)*x13567);
IkReal x13582=((1.0)*x13566);
IkReal x13583=(cj3*x13566);
IkReal x13584=(cj3*x13567);
IkReal x13585=(x13579+x13580);
evalcond[0]=((((-1.0)*cj5*r20*x13582))+((x13566*x13576))+(((-1.0)*r22*x13581)));
evalcond[1]=((((-1.0)*r02*x13581))+(((-1.0)*cj5*r00*x13582))+((x13566*x13578)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13581))+((x13566*x13572))+(((-1.0)*x13569*x13582)));
evalcond[3]=(((r10*x13577))+((r12*x13583))+((r11*x13568))+(((-1.0)*cj3*x13569*x13581))+((x13572*x13584)));
evalcond[4]=(((r10*x13575))+((r10*x13567*x13568))+(((-1.0)*sj3*x13572*x13581))+((r11*x13573))+(((-1.0)*r12*sj3*x13582)));
evalcond[5]=(x13571+((r20*x13577))+(((-1.0)*cj2*x13574))+((r21*x13567*x13575))+(((-1.0)*r20*x13573*x13581))+((r21*x13568))+((r22*x13583)));
evalcond[6]=((((-1.0)*r01*x13577*x13581))+(((-1.0)*x13571))+((r00*x13567*x13568))+((cj3*x13570))+((cj1*cj2))+((r01*x13573))+(((-1.0)*r02*sj3*x13582)));
evalcond[7]=(((r01*x13567*x13575))+((r01*x13568))+((sj3*x13570))+((r02*x13583))+(((-1.0)*r00*x13573*x13581))+(((-1.0)*x13585)));
evalcond[8]=(((r20*x13567*x13568))+(((-1.0)*sj3*x13576*x13581))+((r20*x13575))+((r21*x13573))+(((-1.0)*x13585))+(((-1.0)*r22*sj3*x13582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13586=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13586;
j4eval[1]=IKsign(x13586);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13587=((1.0)*cj5);
IkReal x13588=((((-1.0)*r21*x13587))+(((-1.0)*r20*sj5)));
j4eval[0]=x13588;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13587))))));
j4eval[2]=IKsign(x13588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13589=cj5*cj5;
IkReal x13590=(cj3*r21);
IkReal x13591=(cj5*sj5);
IkReal x13592=((1.0)*cj3);
IkReal x13593=(((r10*x13590*x13591))+(((-1.0)*r12*r22*x13592))+((r11*x13589*x13590))+(((-1.0)*r11*x13590))+((cj3*r11*r20*x13591))+(((-1.0)*r10*r20*x13589*x13592)));
j4eval[0]=x13593;
j4eval[1]=IKsign(x13593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13594=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13594;
j4eval[1]=IKsign(x13594);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13595=((1.0)*cj5);
IkReal x13596=((((-1.0)*r21*x13595))+(((-1.0)*r20*sj5)));
j4eval[0]=x13596;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13595))))));
j4eval[2]=IKsign(x13596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13597=cj5*cj5;
IkReal x13598=r11*r11;
IkReal x13599=(cj5*r10);
IkReal x13600=(r11*sj5);
IkReal x13601=((((-1.0)*x13597*(r10*r10)))+((x13597*x13598))+(((-1.0)*x13598))+(((-1.0)*(r12*r12)))+(((2.0)*x13599*x13600)));
j4eval[0]=x13601;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13600))+x13599))));
j4eval[2]=IKsign(x13601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13602=cj5*cj5;
IkReal x13603=r11*r11;
IkReal x13604=(cj5*r10);
IkReal x13605=(r11*sj5);
CheckValue<IkReal> x13606=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13603))+(((-1.0)*(r12*r12)))+(((2.0)*x13604*x13605))+(((-1.0)*x13602*(r10*r10)))+((x13602*x13603)))),-1);
if(!x13606.valid){
continue;
}
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal(((((-1.0)*x13605))+x13604)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13606.value)))+(x13607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13608=IKsin(j4);
IkReal x13609=IKcos(j4);
IkReal x13610=(cj5*r10);
IkReal x13611=(r01*sj5);
IkReal x13612=((1.0)*cj2);
IkReal x13613=(cj5*r00);
IkReal x13614=(cj5*r20);
IkReal x13615=((1.0)*x13609);
IkReal x13616=((1.0)*x13608);
IkReal x13617=(sj5*x13608);
evalcond[0]=(((r21*x13617))+(((-1.0)*x13614*x13616))+(((-1.0)*r22*x13615)));
evalcond[1]=(((x13608*x13611))+(((-1.0)*r02*x13615))+(((-1.0)*x13613*x13616)));
evalcond[2]=(((x13609*x13610))+(((-1.0)*r11*sj5*x13615))+(((-1.0)*r12*x13616)));
evalcond[3]=((-1.0)+((r11*x13617))+(((-1.0)*x13610*x13616))+(((-1.0)*r12*x13615)));
evalcond[4]=((((-1.0)*cj1*x13612))+((x13609*x13613))+((sj1*sj2))+(((-1.0)*r02*x13616))+(((-1.0)*x13611*x13615)));
evalcond[5]=(((x13609*x13614))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x13615))+(((-1.0)*r22*x13616))+(((-1.0)*sj1*x13612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13618=((1.0)*cj5);
CheckValue<IkReal> x13619 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13619.valid){
continue;
}
CheckValue<IkReal> x13620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13618))+(((-1.0)*r20*sj5)))),-1);
if(!x13620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13619.value)+(((1.5707963267949)*(x13620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13621=IKsin(j4);
IkReal x13622=IKcos(j4);
IkReal x13623=(cj5*r10);
IkReal x13624=(r01*sj5);
IkReal x13625=((1.0)*cj2);
IkReal x13626=(cj5*r00);
IkReal x13627=(cj5*r20);
IkReal x13628=((1.0)*x13622);
IkReal x13629=((1.0)*x13621);
IkReal x13630=(sj5*x13621);
evalcond[0]=(((r21*x13630))+(((-1.0)*r22*x13628))+(((-1.0)*x13627*x13629)));
evalcond[1]=((((-1.0)*x13626*x13629))+((x13621*x13624))+(((-1.0)*r02*x13628)));
evalcond[2]=((((-1.0)*r11*sj5*x13628))+((x13622*x13623))+(((-1.0)*r12*x13629)));
evalcond[3]=((-1.0)+((r11*x13630))+(((-1.0)*x13623*x13629))+(((-1.0)*r12*x13628)));
evalcond[4]=((((-1.0)*x13624*x13628))+(((-1.0)*cj1*x13625))+((sj1*sj2))+((x13622*x13626))+(((-1.0)*r02*x13629)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x13628))+((x13622*x13627))+(((-1.0)*sj1*x13625))+(((-1.0)*r22*x13629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13631.value)+(((1.5707963267949)*(x13632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13633=IKsin(j4);
IkReal x13634=IKcos(j4);
IkReal x13635=(cj5*r10);
IkReal x13636=(r01*sj5);
IkReal x13637=((1.0)*cj2);
IkReal x13638=(cj5*r00);
IkReal x13639=(cj5*r20);
IkReal x13640=((1.0)*x13634);
IkReal x13641=((1.0)*x13633);
IkReal x13642=(sj5*x13633);
evalcond[0]=((((-1.0)*x13639*x13641))+(((-1.0)*r22*x13640))+((r21*x13642)));
evalcond[1]=((((-1.0)*x13638*x13641))+(((-1.0)*r02*x13640))+((x13633*x13636)));
evalcond[2]=((((-1.0)*r12*x13641))+((x13634*x13635))+(((-1.0)*r11*sj5*x13640)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13640))+(((-1.0)*x13635*x13641))+((r11*x13642)));
evalcond[4]=((((-1.0)*x13636*x13640))+(((-1.0)*cj1*x13637))+((x13634*x13638))+((sj1*sj2))+(((-1.0)*r02*x13641)));
evalcond[5]=((((-1.0)*r21*sj5*x13640))+((x13634*x13639))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13637))+(((-1.0)*r22*x13641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13643=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13643;
j4eval[1]=IKsign(x13643);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13644=((1.0)*cj5);
IkReal x13645=((((-1.0)*r21*x13644))+(((-1.0)*r20*sj5)));
j4eval[0]=x13645;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13644))))));
j4eval[2]=IKsign(x13645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13646=cj5*cj5;
IkReal x13647=r11*r11;
IkReal x13648=(r11*sj5);
IkReal x13649=(cj5*r10);
IkReal x13650=((((-2.0)*x13648*x13649))+(r12*r12)+x13647+((x13646*(r10*r10)))+(((-1.0)*x13646*x13647)));
j4eval[0]=x13650;
j4eval[1]=IKsign(x13650);
j4eval[2]=((IKabs((x13648+(((-1.0)*x13649)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13651=cj5*cj5;
IkReal x13652=r11*r11;
IkReal x13653=(cj5*r10);
IkReal x13654=(r11*sj5);
CheckValue<IkReal> x13655=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13652+(((-2.0)*x13653*x13654))+((x13651*(r10*r10)))+(((-1.0)*x13651*x13652)))),-1);
if(!x13655.valid){
continue;
}
CheckValue<IkReal> x13656 = IKatan2WithCheck(IkReal((x13654+(((-1.0)*x13653)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13655.value)))+(x13656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13657=IKcos(j4);
IkReal x13658=IKsin(j4);
IkReal x13659=(cj5*r00);
IkReal x13660=(cj5*r10);
IkReal x13661=(r21*sj5);
IkReal x13662=((1.0)*cj2);
IkReal x13663=(cj5*r20);
IkReal x13664=((1.0)*x13657);
IkReal x13665=((1.0)*x13658);
IkReal x13666=(sj5*x13658);
IkReal x13667=(sj5*x13657);
evalcond[0]=(((r12*x13658))+((r11*x13667))+(((-1.0)*x13660*x13664)));
evalcond[1]=((((-1.0)*r22*x13664))+(((-1.0)*x13663*x13665))+((x13658*x13661)));
evalcond[2]=(((r01*x13666))+(((-1.0)*r02*x13664))+(((-1.0)*x13659*x13665)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13664))+((r11*x13666))+(((-1.0)*x13660*x13665)));
evalcond[4]=(((sj1*sj2))+((r01*x13667))+((r02*x13658))+(((-1.0)*x13659*x13664))+(((-1.0)*cj1*x13662)));
evalcond[5]=((((-1.0)*sj1*x13662))+(((-1.0)*cj1*sj2))+((r22*x13658))+(((-1.0)*x13663*x13664))+((x13657*x13661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=((1.0)*cj5);
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
CheckValue<IkReal> x13670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13668))+(((-1.0)*r20*sj5)))),-1);
if(!x13670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13669.value)+(((1.5707963267949)*(x13670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13671=IKcos(j4);
IkReal x13672=IKsin(j4);
IkReal x13673=(cj5*r00);
IkReal x13674=(cj5*r10);
IkReal x13675=(r21*sj5);
IkReal x13676=((1.0)*cj2);
IkReal x13677=(cj5*r20);
IkReal x13678=((1.0)*x13671);
IkReal x13679=((1.0)*x13672);
IkReal x13680=(sj5*x13672);
IkReal x13681=(sj5*x13671);
evalcond[0]=((((-1.0)*x13674*x13678))+((r12*x13672))+((r11*x13681)));
evalcond[1]=((((-1.0)*x13677*x13679))+((x13672*x13675))+(((-1.0)*r22*x13678)));
evalcond[2]=((((-1.0)*r02*x13678))+((r01*x13680))+(((-1.0)*x13673*x13679)));
evalcond[3]=((-1.0)+(((-1.0)*x13674*x13679))+((r11*x13680))+(((-1.0)*r12*x13678)));
evalcond[4]=(((r02*x13672))+((sj1*sj2))+((r01*x13681))+(((-1.0)*x13673*x13678))+(((-1.0)*cj1*x13676)));
evalcond[5]=((((-1.0)*sj1*x13676))+((r22*x13672))+(((-1.0)*cj1*sj2))+(((-1.0)*x13677*x13678))+((x13671*x13675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13682 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13682.valid){
continue;
}
CheckValue<IkReal> x13683=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13682.value)+(((1.5707963267949)*(x13683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13684=IKcos(j4);
IkReal x13685=IKsin(j4);
IkReal x13686=(cj5*r00);
IkReal x13687=(cj5*r10);
IkReal x13688=(r21*sj5);
IkReal x13689=((1.0)*cj2);
IkReal x13690=(cj5*r20);
IkReal x13691=((1.0)*x13684);
IkReal x13692=((1.0)*x13685);
IkReal x13693=(sj5*x13685);
IkReal x13694=(sj5*x13684);
evalcond[0]=((((-1.0)*x13687*x13691))+((r12*x13685))+((r11*x13694)));
evalcond[1]=((((-1.0)*x13690*x13692))+((x13685*x13688))+(((-1.0)*r22*x13691)));
evalcond[2]=(((r01*x13693))+(((-1.0)*r02*x13691))+(((-1.0)*x13686*x13692)));
evalcond[3]=((-1.0)+(((-1.0)*x13687*x13692))+((r11*x13693))+(((-1.0)*r12*x13691)));
evalcond[4]=((((-1.0)*cj1*x13689))+((r01*x13694))+((r02*x13685))+((sj1*sj2))+(((-1.0)*x13686*x13691)));
evalcond[5]=((((-1.0)*sj1*x13689))+((r22*x13685))+(((-1.0)*x13690*x13691))+(((-1.0)*cj1*sj2))+((x13684*x13688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13696 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13696)==0){
continue;
}
IkReal x13695=pow(x13696,-0.5);
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13697.value));
IkReal gconst37=((-1.0)*r01*x13695);
IkReal gconst38=(r00*x13695);
CheckValue<IkReal> x13698 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13698.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13698.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
IkReal x13699=((-1.0)*(x13701.value));
IkReal x13700=x13695;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13699;
IkReal gconst36=x13699;
IkReal gconst37=((-1.0)*r01*x13700);
IkReal gconst38=(r00*x13700);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13704 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13704.valid){
continue;
}
IkReal x13702=((-1.0)*(x13704.value));
IkReal x13703=x13695;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x13702;
IkReal gconst36=x13702;
IkReal gconst37=((-1.0)*r01*x13703);
IkReal gconst38=(r00*x13703);
CheckValue<IkReal> x13712=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13712.valid){
continue;
}
IkReal x13705=x13712.value;
IkReal x13706=(sj3*x13705);
IkReal x13707=(r11*x13706);
IkReal x13708=(r21*x13706);
IkReal x13709=(r20*x13706);
IkReal x13710=(r10*x13706);
IkReal x13711=(r00*r01*x13706);
j4eval[0]=IKsign((((r10*x13709*(r00*r00)))+((r21*x13707*(r01*r01)))+((r00*r01*r20*x13707))+((r12*r22*sj3))+((r00*r01*r10*x13708))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13713=gconst38*gconst38;
IkReal x13714=gconst37*gconst37;
IkReal x13715=((1.0)*cj3);
IkReal x13716=(r11*r20);
IkReal x13717=(r10*sj3);
IkReal x13718=(gconst37*gconst38);
IkReal x13719=(r11*sj3);
IkReal x13720=(r21*x13714);
IkReal x13721=(cj3*x13718);
CheckValue<IkReal> x13722 = IKatan2WithCheck(IkReal((((gconst37*r22*x13717))+((gconst38*r22*x13719)))),IkReal(((((-1.0)*r20*x13717*x13718))+((r21*x13718*x13719))+((x13717*x13720))+(((-1.0)*sj3*x13713*x13716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13722.valid){
continue;
}
CheckValue<IkReal> x13723=IKPowWithIntegerCheck(IKsign((((x13716*x13721))+(((-1.0)*r11*x13715*x13720))+(((-1.0)*r10*r20*x13713*x13715))+((r10*r21*x13721))+(((-1.0)*r12*r22*x13715)))),-1);
if(!x13723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13722.value)+(((1.5707963267949)*(x13723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13724=IKsin(j4);
IkReal x13725=IKcos(j4);
IkReal x13726=(sj1*sj2);
IkReal x13727=(gconst38*r21);
IkReal x13728=(cj3*r20);
IkReal x13729=(gconst38*r10);
IkReal x13730=(cj3*gconst37);
IkReal x13731=((1.0)*cj1);
IkReal x13732=(gconst38*r00);
IkReal x13733=(gconst37*sj3);
IkReal x13734=(cj2*sj1);
IkReal x13735=(gconst38*r20);
IkReal x13736=(gconst38*r01);
IkReal x13737=(gconst38*r11);
IkReal x13738=(cj2*x13731);
IkReal x13739=((1.0)*x13725);
IkReal x13740=((1.0)*x13724);
IkReal x13741=(cj3*x13724);
IkReal x13742=(sj3*x13725);
IkReal x13743=(gconst37*x13724);
evalcond[0]=((((-1.0)*r22*x13739))+(((-1.0)*x13735*x13740))+((r21*x13743)));
evalcond[1]=(((r01*x13743))+(((-1.0)*r02*x13739))+(((-1.0)*x13732*x13740)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13739))+(((-1.0)*x13729*x13740))+((r11*x13743)));
evalcond[3]=(((r10*x13733))+((r11*x13725*x13730))+((sj3*x13737))+((r12*x13741))+(((-1.0)*cj3*x13729*x13739)));
evalcond[4]=(((r10*x13730))+(((-1.0)*r11*x13733*x13739))+((x13729*x13742))+(((-1.0)*r12*sj3*x13740))+((cj3*x13737)));
evalcond[5]=(((r00*x13733))+x13734+((cj1*sj2))+((sj3*x13736))+((r01*x13725*x13730))+((r02*x13741))+(((-1.0)*cj3*x13732*x13739)));
evalcond[6]=(x13726+(((-1.0)*x13738))+((r20*x13733))+((r21*x13725*x13730))+((r22*x13741))+(((-1.0)*gconst38*x13728*x13739))+((sj3*x13727)));
evalcond[7]=(((r00*x13730))+(((-1.0)*r02*sj3*x13740))+x13726+(((-1.0)*x13738))+((cj3*x13736))+((x13732*x13742))+(((-1.0)*r01*x13733*x13739)));
evalcond[8]=(((gconst37*x13728))+(((-1.0)*sj2*x13731))+(((-1.0)*r21*x13733*x13739))+(((-1.0)*r22*sj3*x13740))+((x13735*x13742))+(((-1.0)*x13734))+((cj3*x13727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13744=gconst38*gconst38;
IkReal x13745=gconst37*gconst37;
IkReal x13746=(gconst37*r10);
IkReal x13747=(cj3*r22);
IkReal x13748=((1.0)*gconst38);
IkReal x13749=(r21*sj3);
IkReal x13750=(gconst38*r11);
IkReal x13751=(cj3*r20);
IkReal x13752=(cj3*r21);
IkReal x13753=(r20*sj3);
CheckValue<IkReal> x13754=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13746*x13748*x13749))+(((-1.0)*gconst37*r11*x13748*x13753))+((r11*x13745*x13749))+((r10*x13744*x13753))+((r12*r22*sj3)))),-1);
if(!x13754.valid){
continue;
}
CheckValue<IkReal> x13755 = IKatan2WithCheck(IkReal((((x13747*x13750))+((x13746*x13747)))),IkReal((((r10*x13745*x13752))+(((-1.0)*x13746*x13748*x13751))+((gconst37*x13750*x13752))+(((-1.0)*r11*x13744*x13751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13754.value)))+(x13755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13756=IKsin(j4);
IkReal x13757=IKcos(j4);
IkReal x13758=(sj1*sj2);
IkReal x13759=(gconst38*r21);
IkReal x13760=(cj3*r20);
IkReal x13761=(gconst38*r10);
IkReal x13762=(cj3*gconst37);
IkReal x13763=((1.0)*cj1);
IkReal x13764=(gconst38*r00);
IkReal x13765=(gconst37*sj3);
IkReal x13766=(cj2*sj1);
IkReal x13767=(gconst38*r20);
IkReal x13768=(gconst38*r01);
IkReal x13769=(gconst38*r11);
IkReal x13770=(cj2*x13763);
IkReal x13771=((1.0)*x13757);
IkReal x13772=((1.0)*x13756);
IkReal x13773=(cj3*x13756);
IkReal x13774=(sj3*x13757);
IkReal x13775=(gconst37*x13756);
evalcond[0]=((((-1.0)*r22*x13771))+(((-1.0)*x13767*x13772))+((r21*x13775)));
evalcond[1]=(((r01*x13775))+(((-1.0)*r02*x13771))+(((-1.0)*x13764*x13772)));
evalcond[2]=((-1.0)+((r11*x13775))+(((-1.0)*r12*x13771))+(((-1.0)*x13761*x13772)));
evalcond[3]=(((r11*x13757*x13762))+((sj3*x13769))+(((-1.0)*cj3*x13761*x13771))+((r10*x13765))+((r12*x13773)));
evalcond[4]=(((r10*x13762))+((cj3*x13769))+((x13761*x13774))+(((-1.0)*r11*x13765*x13771))+(((-1.0)*r12*sj3*x13772)));
evalcond[5]=(x13766+((cj1*sj2))+((r00*x13765))+((sj3*x13768))+((r01*x13757*x13762))+(((-1.0)*cj3*x13764*x13771))+((r02*x13773)));
evalcond[6]=((((-1.0)*x13770))+x13758+((r21*x13757*x13762))+((r20*x13765))+((sj3*x13759))+((r22*x13773))+(((-1.0)*gconst38*x13760*x13771)));
evalcond[7]=((((-1.0)*x13770))+x13758+((r00*x13762))+((cj3*x13768))+((x13764*x13774))+(((-1.0)*r02*sj3*x13772))+(((-1.0)*r01*x13765*x13771)));
evalcond[8]=((((-1.0)*x13766))+(((-1.0)*sj2*x13763))+(((-1.0)*r22*sj3*x13772))+((x13767*x13774))+((gconst37*x13760))+(((-1.0)*r21*x13765*x13771))+((cj3*x13759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13776=((1.0)*gconst38);
CheckValue<IkReal> x13777=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x13776)))),-1);
if(!x13777.valid){
continue;
}
CheckValue<IkReal> x13778 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13776))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13777.value)))+(x13778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13779=IKsin(j4);
IkReal x13780=IKcos(j4);
IkReal x13781=(sj1*sj2);
IkReal x13782=(gconst38*r21);
IkReal x13783=(cj3*r20);
IkReal x13784=(gconst38*r10);
IkReal x13785=(cj3*gconst37);
IkReal x13786=((1.0)*cj1);
IkReal x13787=(gconst38*r00);
IkReal x13788=(gconst37*sj3);
IkReal x13789=(cj2*sj1);
IkReal x13790=(gconst38*r20);
IkReal x13791=(gconst38*r01);
IkReal x13792=(gconst38*r11);
IkReal x13793=(cj2*x13786);
IkReal x13794=((1.0)*x13780);
IkReal x13795=((1.0)*x13779);
IkReal x13796=(cj3*x13779);
IkReal x13797=(sj3*x13780);
IkReal x13798=(gconst37*x13779);
evalcond[0]=((((-1.0)*x13790*x13795))+((r21*x13798))+(((-1.0)*r22*x13794)));
evalcond[1]=((((-1.0)*r02*x13794))+((r01*x13798))+(((-1.0)*x13787*x13795)));
evalcond[2]=((-1.0)+(((-1.0)*x13784*x13795))+((r11*x13798))+(((-1.0)*r12*x13794)));
evalcond[3]=(((r11*x13780*x13785))+(((-1.0)*cj3*x13784*x13794))+((sj3*x13792))+((r12*x13796))+((r10*x13788)));
evalcond[4]=(((x13784*x13797))+(((-1.0)*r11*x13788*x13794))+((cj3*x13792))+(((-1.0)*r12*sj3*x13795))+((r10*x13785)));
evalcond[5]=((((-1.0)*cj3*x13787*x13794))+x13789+((r00*x13788))+((r01*x13780*x13785))+((cj1*sj2))+((r02*x13796))+((sj3*x13791)));
evalcond[6]=(x13781+((r22*x13796))+(((-1.0)*x13793))+((sj3*x13782))+((r20*x13788))+(((-1.0)*gconst38*x13783*x13794))+((r21*x13780*x13785)));
evalcond[7]=(x13781+((r00*x13785))+(((-1.0)*r01*x13788*x13794))+(((-1.0)*r02*sj3*x13795))+(((-1.0)*x13793))+((cj3*x13791))+((x13787*x13797)));
evalcond[8]=(((x13790*x13797))+(((-1.0)*sj2*x13786))+((gconst37*x13783))+(((-1.0)*x13789))+(((-1.0)*r22*sj3*x13795))+((cj3*x13782))+(((-1.0)*r21*x13788*x13794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13800 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13800)==0){
continue;
}
IkReal x13799=pow(x13800,-0.5);
CheckValue<IkReal> x13801 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13801.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13801.value))));
IkReal gconst40=((1.0)*r01*x13799);
IkReal gconst41=((-1.0)*r00*x13799);
CheckValue<IkReal> x13802 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13802.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13802.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13805 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13805.valid){
continue;
}
IkReal x13803=((1.0)*(x13805.value));
IkReal x13804=x13799;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13803)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13803)));
IkReal gconst40=((1.0)*r01*x13804);
IkReal gconst41=((-1.0)*r00*x13804);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13808 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13808.valid){
continue;
}
IkReal x13806=((1.0)*(x13808.value));
IkReal x13807=x13799;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x13806)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13806)));
IkReal gconst40=((1.0)*r01*x13807);
IkReal gconst41=((-1.0)*r00*x13807);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13809=gconst41*gconst41;
IkReal x13810=gconst40*gconst40;
IkReal x13811=(gconst40*r10);
IkReal x13812=(r22*sj3);
IkReal x13813=(r11*sj3);
IkReal x13814=((1.0)*cj3);
IkReal x13815=(gconst41*r21);
IkReal x13816=(gconst41*r20);
IkReal x13817=(r21*x13810);
IkReal x13818=((1.0)*r20*x13809);
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13809*x13814))+(((-1.0)*r11*x13814*x13817))+(((-1.0)*r12*r22*x13814))+((cj3*x13811*x13815))+((cj3*gconst40*r11*x13816)))),-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820 = IKatan2WithCheck(IkReal((((x13811*x13812))+((gconst41*r11*x13812)))),IkReal((((r10*sj3*x13817))+(((-1.0)*x13813*x13818))+((gconst40*x13813*x13815))+(((-1.0)*sj3*x13811*x13816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13819.value)))+(x13820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13821=IKsin(j4);
IkReal x13822=IKcos(j4);
IkReal x13823=(sj1*sj2);
IkReal x13824=(gconst40*sj3);
IkReal x13825=(gconst41*sj3);
IkReal x13826=(gconst41*r20);
IkReal x13827=(cj3*gconst41);
IkReal x13828=((1.0)*cj2);
IkReal x13829=(cj1*sj2);
IkReal x13830=(cj3*gconst40);
IkReal x13831=(cj1*x13828);
IkReal x13832=((1.0)*x13822);
IkReal x13833=((1.0)*x13821);
IkReal x13834=(cj3*x13821);
IkReal x13835=(gconst40*x13821);
IkReal x13836=(x13822*x13830);
evalcond[0]=(((r21*x13835))+(((-1.0)*r22*x13832))+(((-1.0)*x13826*x13833)));
evalcond[1]=(((r01*x13835))+(((-1.0)*gconst41*r00*x13833))+(((-1.0)*r02*x13832)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13832))+(((-1.0)*gconst41*r10*x13833))+((r11*x13835)));
evalcond[3]=(((r10*x13824))+((r11*x13825))+((r12*x13834))+((r11*x13836))+(((-1.0)*r10*x13827*x13832)));
evalcond[4]=(((r11*x13827))+(((-1.0)*r12*sj3*x13833))+((r10*x13830))+((r10*x13822*x13825))+(((-1.0)*r11*x13824*x13832)));
evalcond[5]=(((r01*x13836))+((cj2*sj1))+((r01*x13825))+x13829+((r00*x13824))+(((-1.0)*r00*x13827*x13832))+((r02*x13834)));
evalcond[6]=((((-1.0)*cj3*x13826*x13832))+(((-1.0)*x13831))+((r21*x13825))+x13823+((r22*x13834))+((r21*x13836))+((r20*x13824)));
evalcond[7]=((((-1.0)*x13831))+((r01*x13827))+x13823+(((-1.0)*r01*x13824*x13832))+(((-1.0)*r02*sj3*x13833))+((r00*x13822*x13825))+((r00*x13830)));
evalcond[8]=((((-1.0)*r21*x13824*x13832))+((r21*x13827))+(((-1.0)*sj1*x13828))+(((-1.0)*x13829))+((r20*x13822*x13825))+(((-1.0)*r22*sj3*x13833))+((r20*x13830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13837=((1.0)*gconst41);
CheckValue<IkReal> x13838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13837))+(((-1.0)*gconst40*r20)))),-1);
if(!x13838.valid){
continue;
}
CheckValue<IkReal> x13839 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x13837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13838.value)))+(x13839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13840=IKsin(j4);
IkReal x13841=IKcos(j4);
IkReal x13842=(sj1*sj2);
IkReal x13843=(gconst40*sj3);
IkReal x13844=(gconst41*sj3);
IkReal x13845=(gconst41*r20);
IkReal x13846=(cj3*gconst41);
IkReal x13847=((1.0)*cj2);
IkReal x13848=(cj1*sj2);
IkReal x13849=(cj3*gconst40);
IkReal x13850=(cj1*x13847);
IkReal x13851=((1.0)*x13841);
IkReal x13852=((1.0)*x13840);
IkReal x13853=(cj3*x13840);
IkReal x13854=(gconst40*x13840);
IkReal x13855=(x13841*x13849);
evalcond[0]=((((-1.0)*x13845*x13852))+(((-1.0)*r22*x13851))+((r21*x13854)));
evalcond[1]=((((-1.0)*gconst41*r00*x13852))+((r01*x13854))+(((-1.0)*r02*x13851)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13851))+(((-1.0)*gconst41*r10*x13852))+((r11*x13854)));
evalcond[3]=((((-1.0)*r10*x13846*x13851))+((r11*x13855))+((r12*x13853))+((r11*x13844))+((r10*x13843)));
evalcond[4]=((((-1.0)*r12*sj3*x13852))+((r11*x13846))+(((-1.0)*r11*x13843*x13851))+((r10*x13849))+((r10*x13841*x13844)));
evalcond[5]=(((cj2*sj1))+((r01*x13855))+x13848+(((-1.0)*r00*x13846*x13851))+((r02*x13853))+((r01*x13844))+((r00*x13843)));
evalcond[6]=(((r22*x13853))+x13842+((r21*x13844))+((r21*x13855))+((r20*x13843))+(((-1.0)*x13850))+(((-1.0)*cj3*x13845*x13851)));
evalcond[7]=(((r00*x13841*x13844))+x13842+(((-1.0)*r02*sj3*x13852))+(((-1.0)*x13850))+((r01*x13846))+(((-1.0)*r01*x13843*x13851))+((r00*x13849)));
evalcond[8]=(((r21*x13846))+(((-1.0)*sj1*x13847))+(((-1.0)*r22*sj3*x13852))+((r20*x13849))+(((-1.0)*r21*x13843*x13851))+(((-1.0)*x13848))+((r20*x13841*x13844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13856 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13856.valid){
continue;
}
CheckValue<IkReal> x13857=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13856.value)+(((1.5707963267949)*(x13857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13858=IKsin(j4);
IkReal x13859=IKcos(j4);
IkReal x13860=(sj1*sj2);
IkReal x13861=(gconst40*sj3);
IkReal x13862=(gconst41*sj3);
IkReal x13863=(gconst41*r20);
IkReal x13864=(cj3*gconst41);
IkReal x13865=((1.0)*cj2);
IkReal x13866=(cj1*sj2);
IkReal x13867=(cj3*gconst40);
IkReal x13868=(cj1*x13865);
IkReal x13869=((1.0)*x13859);
IkReal x13870=((1.0)*x13858);
IkReal x13871=(cj3*x13858);
IkReal x13872=(gconst40*x13858);
IkReal x13873=(x13859*x13867);
evalcond[0]=((((-1.0)*r22*x13869))+((r21*x13872))+(((-1.0)*x13863*x13870)));
evalcond[1]=((((-1.0)*gconst41*r00*x13870))+(((-1.0)*r02*x13869))+((r01*x13872)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13869))+((r11*x13872))+(((-1.0)*gconst41*r10*x13870)));
evalcond[3]=((((-1.0)*r10*x13864*x13869))+((r11*x13862))+((r11*x13873))+((r12*x13871))+((r10*x13861)));
evalcond[4]=(((r10*x13859*x13862))+((r11*x13864))+(((-1.0)*r12*sj3*x13870))+(((-1.0)*r11*x13861*x13869))+((r10*x13867)));
evalcond[5]=(((cj2*sj1))+((r01*x13862))+((r00*x13861))+x13866+((r01*x13873))+(((-1.0)*r00*x13864*x13869))+((r02*x13871)));
evalcond[6]=(x13860+((r21*x13873))+((r21*x13862))+((r20*x13861))+(((-1.0)*cj3*x13863*x13869))+(((-1.0)*x13868))+((r22*x13871)));
evalcond[7]=(((r01*x13864))+((r00*x13867))+x13860+(((-1.0)*r02*sj3*x13870))+(((-1.0)*r01*x13861*x13869))+(((-1.0)*x13868))+((r00*x13859*x13862)));
evalcond[8]=((((-1.0)*r21*x13861*x13869))+(((-1.0)*x13866))+(((-1.0)*sj1*x13865))+((r20*x13859*x13862))+((r21*x13864))+((r20*x13867))+(((-1.0)*r22*sj3*x13870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13874=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13874);
rxp1_1=(px*r21);
rxp1_2=(r11*x13874);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13875=(cj5*r10);
IkReal x13876=(r11*sj5);
j4eval[0]=(x13876+(((-1.0)*x13875)));
j4eval[1]=(((sj3*x13875))+(((-1.0)*sj3*x13876)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13877=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13877);
rxp1_1=(px*r21);
rxp1_2=(r11*x13877);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13878=(r11*sj5);
IkReal x13879=((1.0)*cj5*r10);
j4eval[0]=(x13878+(((-1.0)*x13879)));
j4eval[1]=(((cj3*x13878))+(((-1.0)*cj3*x13879)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13880=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13880);
rxp1_1=(px*r21);
rxp1_2=(r11*x13880);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13881=((1.0)*r11);
CheckValue<IkReal> x13882=IKPowWithIntegerCheck(cj3,-1);
if(!x13882.valid){
continue;
}
CheckValue<IkReal> x13883=IKPowWithIntegerCheck(r02,-1);
if(!x13883.valid){
continue;
}
CheckValue<IkReal> x13884=IKPowWithIntegerCheck((((cj5*r10*sj3))+(((-1.0)*sj3*sj5*x13881))),-1);
if(!x13884.valid){
continue;
}
if( IKabs(((x13882.value)*(x13883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13884.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13882.value)*(x13883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13884.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13881))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13882.value)*(x13883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13884.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13881))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13885=IKsin(j4);
IkReal x13886=IKcos(j4);
IkReal x13887=(sj1*sj2);
IkReal x13888=(cj5*r10);
IkReal x13889=(cj5*sj3);
IkReal x13890=(r11*sj5);
IkReal x13891=((1.0)*cj1);
IkReal x13892=(cj3*sj5);
IkReal x13893=(r21*sj5);
IkReal x13894=(cj2*sj1);
IkReal x13895=(cj3*cj5);
IkReal x13896=(sj3*sj5);
IkReal x13897=(cj2*x13891);
IkReal x13898=((1.0)*x13885);
IkReal x13899=(r20*x13886);
IkReal x13900=(cj3*x13886);
IkReal x13901=(sj3*x13886);
evalcond[0]=((-1.0)*r02*x13886);
evalcond[1]=(x13894+((cj3*r02*x13885))+((cj1*sj2)));
evalcond[2]=(((x13885*x13893))+(((-1.0)*cj5*r20*x13898)));
evalcond[3]=((-1.0)+(((-1.0)*x13888*x13898))+((x13885*x13890)));
evalcond[4]=((((-1.0)*r02*sj3*x13898))+x13887+(((-1.0)*x13897)));
evalcond[5]=(((x13888*x13901))+(((-1.0)*x13890*x13901))+((r10*x13892))+((r11*x13895)));
evalcond[6]=(((r10*x13896))+((r11*x13889))+(((-1.0)*x13888*x13900))+((x13890*x13900)));
evalcond[7]=((((-1.0)*x13895*x13899))+x13887+((r21*x13886*x13892))+((r20*x13896))+((r21*x13889))+(((-1.0)*x13897)));
evalcond[8]=((((-1.0)*x13893*x13901))+(((-1.0)*sj2*x13891))+((r20*x13892))+((r21*x13895))+(((-1.0)*x13894))+((x13889*x13899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13902=((1.0)*r10);
IkReal x13903=(r11*sj5);
CheckValue<IkReal> x13904=IKPowWithIntegerCheck((x13903+(((-1.0)*cj5*x13902))),-1);
if(!x13904.valid){
continue;
}
CheckValue<IkReal> x13905=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13902))+((cj3*x13903))),-1);
if(!x13905.valid){
continue;
}
if( IKabs(x13904.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13905.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13902)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13904.value)+IKsqr(((x13905.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13902))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13904.value, ((x13905.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13902))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13906=IKsin(j4);
IkReal x13907=IKcos(j4);
IkReal x13908=(sj1*sj2);
IkReal x13909=(cj5*r10);
IkReal x13910=(cj5*sj3);
IkReal x13911=(r11*sj5);
IkReal x13912=((1.0)*cj1);
IkReal x13913=(cj3*sj5);
IkReal x13914=(r21*sj5);
IkReal x13915=(cj2*sj1);
IkReal x13916=(cj3*cj5);
IkReal x13917=(sj3*sj5);
IkReal x13918=(cj2*x13912);
IkReal x13919=((1.0)*x13906);
IkReal x13920=(r20*x13907);
IkReal x13921=(cj3*x13907);
IkReal x13922=(sj3*x13907);
evalcond[0]=((-1.0)*r02*x13907);
evalcond[1]=(((cj1*sj2))+((cj3*r02*x13906))+x13915);
evalcond[2]=(((x13906*x13914))+(((-1.0)*cj5*r20*x13919)));
evalcond[3]=((-1.0)+((x13906*x13911))+(((-1.0)*x13909*x13919)));
evalcond[4]=((((-1.0)*r02*sj3*x13919))+x13908+(((-1.0)*x13918)));
evalcond[5]=(((r10*x13913))+((x13909*x13922))+(((-1.0)*x13911*x13922))+((r11*x13916)));
evalcond[6]=(((r10*x13917))+((x13911*x13921))+(((-1.0)*x13909*x13921))+((r11*x13910)));
evalcond[7]=((((-1.0)*x13916*x13920))+x13908+((r20*x13917))+((r21*x13910))+(((-1.0)*x13918))+((r21*x13907*x13913)));
evalcond[8]=((((-1.0)*x13915))+(((-1.0)*sj2*x13912))+((r20*x13913))+((r21*x13916))+((x13910*x13920))+(((-1.0)*x13914*x13922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13923=(cj5*r10);
IkReal x13924=((1.0)*r11);
CheckValue<IkReal> x13925=IKPowWithIntegerCheck(((((-1.0)*x13923))+((r11*sj5))),-1);
if(!x13925.valid){
continue;
}
CheckValue<IkReal> x13926=IKPowWithIntegerCheck((((sj3*x13923))+(((-1.0)*sj3*sj5*x13924))),-1);
if(!x13926.valid){
continue;
}
if( IKabs(x13925.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13926.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13924)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13925.value)+IKsqr(((x13926.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13924))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13925.value, ((x13926.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13924))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13927=IKsin(j4);
IkReal x13928=IKcos(j4);
IkReal x13929=(sj1*sj2);
IkReal x13930=(cj5*r10);
IkReal x13931=(cj5*sj3);
IkReal x13932=(r11*sj5);
IkReal x13933=((1.0)*cj1);
IkReal x13934=(cj3*sj5);
IkReal x13935=(r21*sj5);
IkReal x13936=(cj2*sj1);
IkReal x13937=(cj3*cj5);
IkReal x13938=(sj3*sj5);
IkReal x13939=(cj2*x13933);
IkReal x13940=((1.0)*x13927);
IkReal x13941=(r20*x13928);
IkReal x13942=(cj3*x13928);
IkReal x13943=(sj3*x13928);
evalcond[0]=((-1.0)*r02*x13928);
evalcond[1]=(((cj1*sj2))+x13936+((cj3*r02*x13927)));
evalcond[2]=(((x13927*x13935))+(((-1.0)*cj5*r20*x13940)));
evalcond[3]=((-1.0)+((x13927*x13932))+(((-1.0)*x13930*x13940)));
evalcond[4]=(x13929+(((-1.0)*x13939))+(((-1.0)*r02*sj3*x13940)));
evalcond[5]=(((r11*x13937))+((r10*x13934))+(((-1.0)*x13932*x13943))+((x13930*x13943)));
evalcond[6]=(((r11*x13931))+(((-1.0)*x13930*x13942))+((r10*x13938))+((x13932*x13942)));
evalcond[7]=(((r20*x13938))+(((-1.0)*x13937*x13941))+((r21*x13931))+x13929+(((-1.0)*x13939))+((r21*x13928*x13934)));
evalcond[8]=(((r20*x13934))+(((-1.0)*sj2*x13933))+((x13931*x13941))+((r21*x13937))+(((-1.0)*x13936))+(((-1.0)*x13935*x13943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13944=cj5*cj5;
IkReal x13945=((1.0)*cj3);
IkReal x13946=(r10*r21);
IkReal x13947=(cj5*sj5);
IkReal x13948=(r11*r21);
IkReal x13949=(r11*r20);
IkReal x13950=(r22*sj3);
IkReal x13951=(r10*r20);
IkReal x13952=((1.0)*sj3*x13944);
CheckValue<IkReal> x13953 = IKatan2WithCheck(IkReal((((r10*sj5*x13950))+((cj5*r11*x13950)))),IkReal(((((-1.0)*x13949*x13952))+(((-1.0)*x13946*x13952))+((sj3*x13947*x13948))+((sj3*x13946))+(((-1.0)*sj3*x13947*x13951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13953.valid){
continue;
}
CheckValue<IkReal> x13954=IKPowWithIntegerCheck(IKsign((((cj3*x13947*x13949))+(((-1.0)*x13945*x13948))+((cj3*x13946*x13947))+(((-1.0)*r12*r22*x13945))+(((-1.0)*x13944*x13945*x13951))+((cj3*x13944*x13948)))),-1);
if(!x13954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13953.value)+(((1.5707963267949)*(x13954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13955=IKsin(j4);
IkReal x13956=IKcos(j4);
IkReal x13957=(sj1*sj2);
IkReal x13958=(r11*sj5);
IkReal x13959=(cj5*r10);
IkReal x13960=(r00*sj3);
IkReal x13961=(cj5*r01);
IkReal x13962=((1.0)*cj1);
IkReal x13963=(cj3*sj5);
IkReal x13964=(r21*sj5);
IkReal x13965=(cj5*r00);
IkReal x13966=(cj5*r11);
IkReal x13967=(cj2*sj1);
IkReal x13968=(cj5*r21);
IkReal x13969=(sj3*sj5);
IkReal x13970=(cj5*r20);
IkReal x13971=(r01*sj5);
IkReal x13972=(cj2*x13962);
IkReal x13973=((1.0)*x13956);
IkReal x13974=((1.0)*x13955);
IkReal x13975=(cj3*x13956);
IkReal x13976=(cj3*x13955);
IkReal x13977=(cj5*x13956);
evalcond[0]=(((x13955*x13964))+(((-1.0)*r22*x13973))+(((-1.0)*x13970*x13974)));
evalcond[1]=(((x13955*x13971))+(((-1.0)*r02*x13973))+(((-1.0)*x13965*x13974)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13973))+(((-1.0)*x13959*x13974))+((x13955*x13958)));
evalcond[3]=(((x13958*x13975))+((r10*x13969))+(((-1.0)*cj3*x13959*x13973))+((sj3*x13966))+((r12*x13976)));
evalcond[4]=(((r10*x13963))+((sj3*x13956*x13959))+(((-1.0)*r12*sj3*x13974))+((cj3*x13966))+(((-1.0)*sj3*x13958*x13973)));
evalcond[5]=(((r02*x13976))+(((-1.0)*cj3*x13965*x13973))+((cj1*sj2))+x13967+((sj3*x13961))+((sj5*x13960))+((r01*x13956*x13963)));
evalcond[6]=(((r21*x13956*x13963))+x13957+((r20*x13969))+((sj3*x13968))+(((-1.0)*cj3*x13970*x13973))+(((-1.0)*x13972))+((r22*x13976)));
evalcond[7]=((((-1.0)*r01*x13969*x13973))+x13957+(((-1.0)*r02*sj3*x13974))+((x13960*x13977))+((cj3*x13961))+(((-1.0)*x13972))+((r00*x13963)));
evalcond[8]=((((-1.0)*sj3*x13964*x13973))+(((-1.0)*sj2*x13962))+(((-1.0)*r22*sj3*x13974))+((r20*x13963))+(((-1.0)*x13967))+((cj3*x13968))+((sj3*x13956*x13970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13978=((1.0)*cj5);
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13978))+(((-1.0)*r20*sj5)))),-1);
if(!x13979.valid){
continue;
}
CheckValue<IkReal> x13980 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13979.value)))+(x13980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13981=IKsin(j4);
IkReal x13982=IKcos(j4);
IkReal x13983=(sj1*sj2);
IkReal x13984=(r11*sj5);
IkReal x13985=(cj5*r10);
IkReal x13986=(r00*sj3);
IkReal x13987=(cj5*r01);
IkReal x13988=((1.0)*cj1);
IkReal x13989=(cj3*sj5);
IkReal x13990=(r21*sj5);
IkReal x13991=(cj5*r00);
IkReal x13992=(cj5*r11);
IkReal x13993=(cj2*sj1);
IkReal x13994=(cj5*r21);
IkReal x13995=(sj3*sj5);
IkReal x13996=(cj5*r20);
IkReal x13997=(r01*sj5);
IkReal x13998=(cj2*x13988);
IkReal x13999=((1.0)*x13982);
IkReal x14000=((1.0)*x13981);
IkReal x14001=(cj3*x13982);
IkReal x14002=(cj3*x13981);
IkReal x14003=(cj5*x13982);
evalcond[0]=(((x13981*x13990))+(((-1.0)*x13996*x14000))+(((-1.0)*r22*x13999)));
evalcond[1]=(((x13981*x13997))+(((-1.0)*r02*x13999))+(((-1.0)*x13991*x14000)));
evalcond[2]=((-1.0)+(((-1.0)*x13985*x14000))+(((-1.0)*r12*x13999))+((x13981*x13984)));
evalcond[3]=((((-1.0)*cj3*x13985*x13999))+((r10*x13995))+((r12*x14002))+((sj3*x13992))+((x13984*x14001)));
evalcond[4]=((((-1.0)*r12*sj3*x14000))+((cj3*x13992))+((r10*x13989))+((sj3*x13982*x13985))+(((-1.0)*sj3*x13984*x13999)));
evalcond[5]=(((sj3*x13987))+((r02*x14002))+((cj1*sj2))+x13993+(((-1.0)*cj3*x13991*x13999))+((r01*x13982*x13989))+((sj5*x13986)));
evalcond[6]=(((r21*x13982*x13989))+x13983+((r22*x14002))+(((-1.0)*cj3*x13996*x13999))+((r20*x13995))+((sj3*x13994))+(((-1.0)*x13998)));
evalcond[7]=((((-1.0)*r02*sj3*x14000))+((r00*x13989))+((cj3*x13987))+x13983+((x13986*x14003))+(((-1.0)*x13998))+(((-1.0)*r01*x13995*x13999)));
evalcond[8]=((((-1.0)*sj3*x13990*x13999))+((r20*x13989))+(((-1.0)*r22*sj3*x14000))+((cj3*x13994))+((sj3*x13982*x13996))+(((-1.0)*sj2*x13988))+(((-1.0)*x13993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
CheckValue<IkReal> x14005=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14004.value)+(((1.5707963267949)*(x14005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14006=IKsin(j4);
IkReal x14007=IKcos(j4);
IkReal x14008=(sj1*sj2);
IkReal x14009=(r11*sj5);
IkReal x14010=(cj5*r10);
IkReal x14011=(r00*sj3);
IkReal x14012=(cj5*r01);
IkReal x14013=((1.0)*cj1);
IkReal x14014=(cj3*sj5);
IkReal x14015=(r21*sj5);
IkReal x14016=(cj5*r00);
IkReal x14017=(cj5*r11);
IkReal x14018=(cj2*sj1);
IkReal x14019=(cj5*r21);
IkReal x14020=(sj3*sj5);
IkReal x14021=(cj5*r20);
IkReal x14022=(r01*sj5);
IkReal x14023=(cj2*x14013);
IkReal x14024=((1.0)*x14007);
IkReal x14025=((1.0)*x14006);
IkReal x14026=(cj3*x14007);
IkReal x14027=(cj3*x14006);
IkReal x14028=(cj5*x14007);
evalcond[0]=(((x14006*x14015))+(((-1.0)*x14021*x14025))+(((-1.0)*r22*x14024)));
evalcond[1]=((((-1.0)*x14016*x14025))+(((-1.0)*r02*x14024))+((x14006*x14022)));
evalcond[2]=((-1.0)+((x14006*x14009))+(((-1.0)*x14010*x14025))+(((-1.0)*r12*x14024)));
evalcond[3]=((((-1.0)*cj3*x14010*x14024))+((r10*x14020))+((x14009*x14026))+((sj3*x14017))+((r12*x14027)));
evalcond[4]=((((-1.0)*sj3*x14009*x14024))+(((-1.0)*r12*sj3*x14025))+((sj3*x14007*x14010))+((cj3*x14017))+((r10*x14014)));
evalcond[5]=((((-1.0)*cj3*x14016*x14024))+((cj1*sj2))+((sj3*x14012))+((sj5*x14011))+x14018+((r02*x14027))+((r01*x14007*x14014)));
evalcond[6]=((((-1.0)*cj3*x14021*x14024))+((r22*x14027))+((r21*x14007*x14014))+((r20*x14020))+((sj3*x14019))+(((-1.0)*x14023))+x14008);
evalcond[7]=((((-1.0)*r01*x14020*x14024))+(((-1.0)*r02*sj3*x14025))+(((-1.0)*x14023))+((x14011*x14028))+((r00*x14014))+x14008+((cj3*x14012)));
evalcond[8]=((((-1.0)*sj2*x14013))+(((-1.0)*sj3*x14015*x14024))+(((-1.0)*r22*sj3*x14025))+(((-1.0)*x14018))+((cj3*x14019))+((r20*x14014))+((sj3*x14007*x14021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14029=((-1.0)*r00);
IkReal x14031 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14031)==0){
continue;
}
IkReal x14030=pow(x14031,-0.5);
CheckValue<IkReal> x14032 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14029),IKFAST_ATAN2_MAGTHRESH);
if(!x14032.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14032.value));
IkReal gconst13=(r01*x14030);
IkReal gconst14=(x14029*x14030);
CheckValue<IkReal> x14033 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14033.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14033.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14034=((-1.0)*r00);
IkReal x14035=x14030;
CheckValue<IkReal> x14037 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14034),IKFAST_ATAN2_MAGTHRESH);
if(!x14037.valid){
continue;
}
IkReal x14036=((-1.0)*(x14037.value));
sj5=gconst13;
cj5=gconst14;
j5=x14036;
IkReal gconst12=x14036;
IkReal gconst13=(r01*x14035);
IkReal gconst14=(x14034*x14035);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14038=((1.0)*sj0);
IkReal x14039=((1.0)*cj0);
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14038))+(((-1.0)*r02*x14039)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14038))+(((-1.0)*gconst13*r01*x14039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
CheckValue<IkReal> x14041=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14040.value)+(((1.5707963267949)*(x14041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14042=IKsin(j4);
IkReal x14043=IKcos(j4);
IkReal x14044=((1.0)*r22);
IkReal x14045=((1.0)*r12);
IkReal x14046=(cj3*gconst14);
IkReal x14047=(cj1*cj2);
IkReal x14048=(gconst13*sj3);
IkReal x14049=(gconst13*r01);
IkReal x14050=(sj1*sj2);
IkReal x14051=(gconst14*sj3);
IkReal x14052=(cj3*gconst13);
IkReal x14053=((1.0)*sj0);
IkReal x14054=(sj3*x14042);
IkReal x14055=(cj3*x14043);
IkReal x14056=(cj3*x14042);
IkReal x14057=(r10*x14043);
IkReal x14058=((1.0)*cj2*sj1);
IkReal x14059=(gconst13*x14042);
IkReal x14060=((1.0)*cj1*sj2);
IkReal x14061=((1.0)*x14043);
IkReal x14062=((1.0)*gconst14*x14042);
evalcond[0]=((((-1.0)*x14043*x14044))+(((-1.0)*r20*x14062))+((r21*x14059)));
evalcond[1]=((((-1.0)*x14043*x14045))+cj0+((r11*x14059))+(((-1.0)*r10*x14062)));
evalcond[2]=((((-1.0)*x14053))+(((-1.0)*r00*x14062))+((x14042*x14049))+(((-1.0)*r02*x14061)));
evalcond[3]=((((-1.0)*x14047))+((r20*x14048))+((r22*x14056))+((r21*x14043*x14052))+x14050+(((-1.0)*r20*x14046*x14061))+((r21*x14051)));
evalcond[4]=(((r20*x14043*x14051))+((r20*x14052))+(((-1.0)*x14058))+(((-1.0)*x14044*x14054))+((r21*x14046))+(((-1.0)*x14060))+(((-1.0)*r21*x14048*x14061)));
evalcond[5]=(((cj0*x14047))+(((-1.0)*cj0*x14050))+((r00*x14052))+((r01*x14046))+(((-1.0)*r01*x14048*x14061))+((r00*x14043*x14051))+(((-1.0)*r02*x14054)));
evalcond[6]=(((r00*x14048))+(((-1.0)*cj0*x14058))+((r02*x14056))+(((-1.0)*r00*x14046*x14061))+((x14049*x14055))+(((-1.0)*cj0*x14060))+((r01*x14051)));
evalcond[7]=(((r11*x14046))+((x14051*x14057))+(((-1.0)*x14050*x14053))+((r10*x14052))+((sj0*x14047))+(((-1.0)*x14045*x14054))+(((-1.0)*r11*x14048*x14061)));
evalcond[8]=(((r11*x14051))+((r10*x14048))+((r12*x14056))+((r11*x14043*x14052))+(((-1.0)*cj1*sj2*x14053))+(((-1.0)*x14046*x14057))+(((-1.0)*cj2*sj1*x14053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14063=((1.0)*gconst14);
CheckValue<IkReal> x14064 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14063))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14064.valid){
continue;
}
CheckValue<IkReal> x14065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14063)))),-1);
if(!x14065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14064.value)+(((1.5707963267949)*(x14065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14066=IKsin(j4);
IkReal x14067=IKcos(j4);
IkReal x14068=((1.0)*r22);
IkReal x14069=((1.0)*r12);
IkReal x14070=(cj3*gconst14);
IkReal x14071=(cj1*cj2);
IkReal x14072=(gconst13*sj3);
IkReal x14073=(gconst13*r01);
IkReal x14074=(sj1*sj2);
IkReal x14075=(gconst14*sj3);
IkReal x14076=(cj3*gconst13);
IkReal x14077=((1.0)*sj0);
IkReal x14078=(sj3*x14066);
IkReal x14079=(cj3*x14067);
IkReal x14080=(cj3*x14066);
IkReal x14081=(r10*x14067);
IkReal x14082=((1.0)*cj2*sj1);
IkReal x14083=(gconst13*x14066);
IkReal x14084=((1.0)*cj1*sj2);
IkReal x14085=((1.0)*x14067);
IkReal x14086=((1.0)*gconst14*x14066);
evalcond[0]=(((r21*x14083))+(((-1.0)*x14067*x14068))+(((-1.0)*r20*x14086)));
evalcond[1]=(cj0+((r11*x14083))+(((-1.0)*x14067*x14069))+(((-1.0)*r10*x14086)));
evalcond[2]=((((-1.0)*r02*x14085))+(((-1.0)*r00*x14086))+(((-1.0)*x14077))+((x14066*x14073)));
evalcond[3]=(((r21*x14075))+(((-1.0)*x14071))+((r22*x14080))+((r20*x14072))+x14074+((r21*x14067*x14076))+(((-1.0)*r20*x14070*x14085)));
evalcond[4]=((((-1.0)*x14068*x14078))+(((-1.0)*r21*x14072*x14085))+(((-1.0)*x14084))+(((-1.0)*x14082))+((r21*x14070))+((r20*x14076))+((r20*x14067*x14075)));
evalcond[5]=((((-1.0)*r02*x14078))+(((-1.0)*r01*x14072*x14085))+((cj0*x14071))+((r00*x14076))+((r00*x14067*x14075))+(((-1.0)*cj0*x14074))+((r01*x14070)));
evalcond[6]=((((-1.0)*cj0*x14082))+(((-1.0)*cj0*x14084))+((r02*x14080))+((r00*x14072))+(((-1.0)*r00*x14070*x14085))+((x14073*x14079))+((r01*x14075)));
evalcond[7]=(((sj0*x14071))+((x14075*x14081))+((r11*x14070))+(((-1.0)*x14074*x14077))+((r10*x14076))+(((-1.0)*r11*x14072*x14085))+(((-1.0)*x14069*x14078)));
evalcond[8]=((((-1.0)*cj1*sj2*x14077))+(((-1.0)*cj2*sj1*x14077))+((r11*x14075))+((r10*x14072))+((r12*x14080))+((r11*x14067*x14076))+(((-1.0)*x14070*x14081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14087=((-1.0)*r01);
IkReal x14089 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14089)==0){
continue;
}
IkReal x14088=pow(x14089,-0.5);
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(x14087),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14090.value))));
IkReal gconst16=(x14087*x14088);
IkReal gconst17=((1.0)*r00*x14088);
CheckValue<IkReal> x14091 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14091.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14091.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14092=((-1.0)*r01);
CheckValue<IkReal> x14095 = IKatan2WithCheck(IkReal(x14092),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14095.valid){
continue;
}
IkReal x14093=((1.0)*(x14095.value));
IkReal x14094=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14093)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14093)));
IkReal gconst16=(x14092*x14094);
IkReal gconst17=((1.0)*r00*x14094);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14096=((-1.0)*r01);
CheckValue<IkReal> x14099 = IKatan2WithCheck(IkReal(x14096),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14099.valid){
continue;
}
IkReal x14097=((1.0)*(x14099.value));
IkReal x14098=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14097)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14097)));
IkReal gconst16=(x14096*x14098);
IkReal gconst17=((1.0)*r00*x14098);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14100=((-1.0)*r01);
CheckValue<IkReal> x14103 = IKatan2WithCheck(IkReal(x14100),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14103.valid){
continue;
}
IkReal x14101=((1.0)*(x14103.value));
IkReal x14102=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14101)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14101)));
IkReal gconst16=(x14100*x14102);
IkReal gconst17=((1.0)*r00*x14102);
IkReal x14104=r02*r02;
IkReal x14105=(r12*sj0);
IkReal x14106=((1.0)*cj0);
IkReal x14107=x14088;
j4eval[0]=((IKabs((((cj0*x14104*x14107))+((r02*x14105*x14107))+(((-1.0)*x14106*x14107)))))+(IKabs(((((-1.0)*x14105))+(((-1.0)*r02*x14106))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14108=((-1.0)*r01);
CheckValue<IkReal> x14111 = IKatan2WithCheck(IkReal(x14108),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14111.valid){
continue;
}
IkReal x14109=((1.0)*(x14111.value));
IkReal x14110=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14109)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14109)));
IkReal gconst16=(x14108*x14110);
IkReal gconst17=((1.0)*r00*x14110);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14112=((-1.0)*r01);
CheckValue<IkReal> x14115 = IKatan2WithCheck(IkReal(x14112),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14115.valid){
continue;
}
IkReal x14113=((1.0)*(x14115.value));
IkReal x14114=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14113)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14113)));
IkReal gconst16=(x14112*x14114);
IkReal gconst17=((1.0)*r00*x14114);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14116=gconst16*gconst16;
IkReal x14117=gconst17*gconst17;
IkReal x14118=(r11*sj3);
IkReal x14119=(cj3*r10);
IkReal x14120=((1.0)*cj3);
IkReal x14121=(r10*sj3);
IkReal x14122=(gconst16*gconst17);
IkReal x14123=(r21*x14116);
IkReal x14124=((1.0)*r20*x14117);
CheckValue<IkReal> x14125 = IKatan2WithCheck(IkReal((((gconst17*r22*x14118))+((gconst16*r22*x14121)))),IkReal((((r21*x14118*x14122))+((x14121*x14123))+(((-1.0)*x14118*x14124))+(((-1.0)*r20*x14121*x14122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14125.valid){
continue;
}
CheckValue<IkReal> x14126=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14122))+(((-1.0)*r11*x14120*x14123))+((r21*x14119*x14122))+(((-1.0)*r12*r22*x14120))+(((-1.0)*x14119*x14124)))),-1);
if(!x14126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14125.value)+(((1.5707963267949)*(x14126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14127=IKsin(j4);
IkReal x14128=IKcos(j4);
IkReal x14129=(sj1*sj2);
IkReal x14130=((1.0)*cj1);
IkReal x14131=(gconst16*r21);
IkReal x14132=(cj3*gconst17);
IkReal x14133=(gconst16*r20);
IkReal x14134=(gconst17*r20);
IkReal x14135=(gconst17*sj3);
IkReal x14136=(gconst16*r10);
IkReal x14137=(cj2*sj1);
IkReal x14138=(gconst16*sj3);
IkReal x14139=(cj2*x14130);
IkReal x14140=((1.0)*x14128);
IkReal x14141=((1.0)*x14127);
IkReal x14142=(gconst16*x14127);
IkReal x14143=(cj3*x14128);
IkReal x14144=(cj3*x14127);
evalcond[0]=((((-1.0)*x14134*x14141))+((x14127*x14131))+(((-1.0)*r22*x14140)));
evalcond[1]=((((-1.0)*gconst17*r00*x14141))+((r01*x14142))+(((-1.0)*r02*x14140)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14141))+(((-1.0)*r12*x14140))+((r11*x14142)));
evalcond[3]=(((gconst16*r11*x14143))+((sj3*x14136))+((r11*x14135))+((r12*x14144))+(((-1.0)*r10*x14132*x14140)));
evalcond[4]=(((r10*x14128*x14135))+(((-1.0)*r11*x14138*x14140))+(((-1.0)*r12*sj3*x14141))+((r11*x14132))+((cj3*x14136)));
evalcond[5]=(((gconst16*r01*x14143))+((cj1*sj2))+((r02*x14144))+(((-1.0)*r00*x14132*x14140))+x14137+((r00*x14138))+((r01*x14135)));
evalcond[6]=((((-1.0)*r20*x14132*x14140))+((sj3*x14133))+((x14131*x14143))+((r21*x14135))+((r22*x14144))+x14129+(((-1.0)*x14139)));
evalcond[7]=((((-1.0)*r01*x14138*x14140))+(((-1.0)*r02*sj3*x14141))+((r00*x14128*x14135))+x14129+((cj3*gconst16*r00))+(((-1.0)*x14139))+((r01*x14132)));
evalcond[8]=((((-1.0)*x14137))+(((-1.0)*r22*sj3*x14141))+((sj3*x14128*x14134))+((r21*x14132))+(((-1.0)*sj3*x14131*x14140))+((cj3*x14133))+(((-1.0)*sj2*x14130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14145=((1.0)*gconst17);
CheckValue<IkReal> x14146=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14145)))),-1);
if(!x14146.valid){
continue;
}
CheckValue<IkReal> x14147 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14146.value)))+(x14147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14148=IKsin(j4);
IkReal x14149=IKcos(j4);
IkReal x14150=(sj1*sj2);
IkReal x14151=((1.0)*cj1);
IkReal x14152=(gconst16*r21);
IkReal x14153=(cj3*gconst17);
IkReal x14154=(gconst16*r20);
IkReal x14155=(gconst17*r20);
IkReal x14156=(gconst17*sj3);
IkReal x14157=(gconst16*r10);
IkReal x14158=(cj2*sj1);
IkReal x14159=(gconst16*sj3);
IkReal x14160=(cj2*x14151);
IkReal x14161=((1.0)*x14149);
IkReal x14162=((1.0)*x14148);
IkReal x14163=(gconst16*x14148);
IkReal x14164=(cj3*x14149);
IkReal x14165=(cj3*x14148);
evalcond[0]=((((-1.0)*r22*x14161))+((x14148*x14152))+(((-1.0)*x14155*x14162)));
evalcond[1]=((((-1.0)*gconst17*r00*x14162))+(((-1.0)*r02*x14161))+((r01*x14163)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14162))+(((-1.0)*r12*x14161))+((r11*x14163)));
evalcond[3]=(((sj3*x14157))+((gconst16*r11*x14164))+((r11*x14156))+((r12*x14165))+(((-1.0)*r10*x14153*x14161)));
evalcond[4]=(((cj3*x14157))+(((-1.0)*r12*sj3*x14162))+((r11*x14153))+((r10*x14149*x14156))+(((-1.0)*r11*x14159*x14161)));
evalcond[5]=(((gconst16*r01*x14164))+((r02*x14165))+((cj1*sj2))+((r00*x14159))+((r01*x14156))+x14158+(((-1.0)*r00*x14153*x14161)));
evalcond[6]=(((sj3*x14154))+(((-1.0)*r20*x14153*x14161))+((r22*x14165))+(((-1.0)*x14160))+x14150+((r21*x14156))+((x14152*x14164)));
evalcond[7]=((((-1.0)*r02*sj3*x14162))+(((-1.0)*r01*x14159*x14161))+(((-1.0)*x14160))+((r01*x14153))+x14150+((cj3*gconst16*r00))+((r00*x14149*x14156)));
evalcond[8]=(((cj3*x14154))+(((-1.0)*r22*sj3*x14162))+(((-1.0)*sj2*x14151))+((r21*x14153))+(((-1.0)*sj3*x14152*x14161))+((sj3*x14149*x14155))+(((-1.0)*x14158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14166=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14166.valid){
continue;
}
CheckValue<IkReal> x14167 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14166.value)))+(x14167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14168=IKsin(j4);
IkReal x14169=IKcos(j4);
IkReal x14170=(sj1*sj2);
IkReal x14171=((1.0)*cj1);
IkReal x14172=(gconst16*r21);
IkReal x14173=(cj3*gconst17);
IkReal x14174=(gconst16*r20);
IkReal x14175=(gconst17*r20);
IkReal x14176=(gconst17*sj3);
IkReal x14177=(gconst16*r10);
IkReal x14178=(cj2*sj1);
IkReal x14179=(gconst16*sj3);
IkReal x14180=(cj2*x14171);
IkReal x14181=((1.0)*x14169);
IkReal x14182=((1.0)*x14168);
IkReal x14183=(gconst16*x14168);
IkReal x14184=(cj3*x14169);
IkReal x14185=(cj3*x14168);
evalcond[0]=((((-1.0)*x14175*x14182))+(((-1.0)*r22*x14181))+((x14168*x14172)));
evalcond[1]=(((r01*x14183))+(((-1.0)*r02*x14181))+(((-1.0)*gconst17*r00*x14182)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14182))+(((-1.0)*r12*x14181))+((r11*x14183)));
evalcond[3]=(((gconst16*r11*x14184))+((r11*x14176))+((r12*x14185))+(((-1.0)*r10*x14173*x14181))+((sj3*x14177)));
evalcond[4]=((((-1.0)*r12*sj3*x14182))+((r11*x14173))+(((-1.0)*r11*x14179*x14181))+((r10*x14169*x14176))+((cj3*x14177)));
evalcond[5]=(((r02*x14185))+((r01*x14176))+(((-1.0)*r00*x14173*x14181))+((r00*x14179))+((cj1*sj2))+((gconst16*r01*x14184))+x14178);
evalcond[6]=((((-1.0)*r20*x14173*x14181))+((r21*x14176))+((x14172*x14184))+((r22*x14185))+x14170+((sj3*x14174))+(((-1.0)*x14180)));
evalcond[7]=((((-1.0)*r01*x14179*x14181))+((r01*x14173))+((r00*x14169*x14176))+(((-1.0)*r02*sj3*x14182))+x14170+(((-1.0)*x14180))+((cj3*gconst16*r00)));
evalcond[8]=(((r21*x14173))+(((-1.0)*sj2*x14171))+(((-1.0)*x14178))+(((-1.0)*sj3*x14172*x14181))+((cj3*x14174))+(((-1.0)*r22*sj3*x14182))+((sj3*x14169*x14175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14186=((-1.0)*r01);
CheckValue<IkReal> x14189 = IKatan2WithCheck(IkReal(x14186),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14189.valid){
continue;
}
IkReal x14187=((1.0)*(x14189.value));
IkReal x14188=x14088;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14187)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14187)));
IkReal gconst16=(x14186*x14188);
IkReal gconst17=((1.0)*r00*x14188);
IkReal x14190=r02*r02;
IkReal x14191=(r12*sj0);
IkReal x14192=((1.0)*cj0);
IkReal x14193=x14088;
j4eval[0]=((IKabs((((r02*x14191*x14193))+((cj0*x14190*x14193))+(((-1.0)*x14192*x14193)))))+(IKabs(((((-1.0)*x14191))+(((-1.0)*r02*x14192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14194=(cj1*sj2);
IkReal x14195=(gconst16*r20);
IkReal x14196=((1.0)*cj3);
IkReal x14197=(cj2*sj1);
IkReal x14198=(gconst17*sj3);
IkReal x14199=((1.0)*r20);
IkReal x14200=(gconst16*r21);
IkReal x14201=((1.0)*sj3);
IkReal x14202=(gconst17*r21);
CheckValue<IkReal> x14203=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10*x14198*x14199))+(((-1.0)*gconst16*r11*x14200*x14201))+((r10*x14198*x14200))+((r11*x14195*x14198))),-1);
if(!x14203.valid){
continue;
}
CheckValue<IkReal> x14204=IKPowWithIntegerCheck(((((-1.0)*x14200*x14201))+((r20*x14198))),-1);
if(!x14204.valid){
continue;
}
if( IKabs(((x14203.value)*(((((-1.0)*r12*x14195*x14196))+(((-1.0)*cj0*x14198*x14199))+((r12*x14194))+((r12*x14197))+((cj0*sj3*x14200))+(((-1.0)*r12*x14196*x14202)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14204.value)*(((((-1.0)*x14196*x14202))+(((-1.0)*x14195*x14196))+x14194+x14197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14203.value)*(((((-1.0)*r12*x14195*x14196))+(((-1.0)*cj0*x14198*x14199))+((r12*x14194))+((r12*x14197))+((cj0*sj3*x14200))+(((-1.0)*r12*x14196*x14202))))))+IKsqr(((x14204.value)*(((((-1.0)*x14196*x14202))+(((-1.0)*x14195*x14196))+x14194+x14197))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14203.value)*(((((-1.0)*r12*x14195*x14196))+(((-1.0)*cj0*x14198*x14199))+((r12*x14194))+((r12*x14197))+((cj0*sj3*x14200))+(((-1.0)*r12*x14196*x14202))))), ((x14204.value)*(((((-1.0)*x14196*x14202))+(((-1.0)*x14195*x14196))+x14194+x14197))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14205=IKsin(j4);
IkReal x14206=IKcos(j4);
IkReal x14207=((1.0)*gconst17);
IkReal x14208=(gconst17*sj3);
IkReal x14209=(gconst16*r21);
IkReal x14210=(cj3*gconst17);
IkReal x14211=(sj1*sj2);
IkReal x14212=((1.0)*sj0);
IkReal x14213=(cj1*cj2);
IkReal x14214=(gconst16*sj3);
IkReal x14215=(cj3*gconst16);
IkReal x14216=(cj2*sj1);
IkReal x14217=(cj1*sj2);
IkReal x14218=((1.0)*cj0);
IkReal x14219=((1.0)*sj3);
IkReal x14220=(cj3*x14206);
IkReal x14221=(gconst16*x14205);
IkReal x14222=((1.0)*x14206);
IkReal x14223=(r02*x14205);
IkReal x14224=(r12*x14205);
evalcond[0]=(((x14205*x14209))+(((-1.0)*r20*x14205*x14207)));
evalcond[1]=(cj0+(((-1.0)*r12*x14222))+((r11*x14221))+(((-1.0)*r10*x14205*x14207)));
evalcond[2]=((((-1.0)*r00*x14205*x14207))+(((-1.0)*r02*x14222))+(((-1.0)*x14212))+((r01*x14221)));
evalcond[3]=(((r21*x14208))+(((-1.0)*r20*x14207*x14220))+(((-1.0)*x14213))+((r20*x14214))+((x14209*x14220))+x14211);
evalcond[4]=(((r20*x14206*x14208))+(((-1.0)*x14217))+(((-1.0)*x14216))+(((-1.0)*x14206*x14209*x14219))+((r21*x14210))+((r20*x14215)));
evalcond[5]=((((-1.0)*x14219*x14223))+((cj0*x14213))+(((-1.0)*x14211*x14218))+((r00*x14206*x14208))+((r01*x14210))+((r00*x14215))+(((-1.0)*r01*x14214*x14222)));
evalcond[6]=((((-1.0)*r00*x14207*x14220))+(((-1.0)*x14216*x14218))+(((-1.0)*x14217*x14218))+((r01*x14206*x14215))+((cj3*x14223))+((r00*x14214))+((r01*x14208)));
evalcond[7]=(((r11*x14210))+(((-1.0)*x14219*x14224))+(((-1.0)*x14211*x14212))+((sj0*x14213))+((r10*x14215))+((r10*x14206*x14208))+(((-1.0)*r11*x14214*x14222)));
evalcond[8]=((((-1.0)*x14212*x14217))+(((-1.0)*x14212*x14216))+((r10*x14214))+((cj3*x14224))+((r11*x14206*x14215))+((r11*x14208))+(((-1.0)*r10*x14207*x14220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14225=((1.0)*sj0);
IkReal x14226=((1.0)*cj0);
CheckValue<IkReal> x14227 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14225))+(((-1.0)*r02*x14226)))),IkReal(((((-1.0)*gconst16*r01*x14226))+(((-1.0)*gconst16*r11*x14225))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14227.valid){
continue;
}
CheckValue<IkReal> x14228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14227.value)+(((1.5707963267949)*(x14228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14229=IKsin(j4);
IkReal x14230=IKcos(j4);
IkReal x14231=((1.0)*gconst17);
IkReal x14232=(gconst17*sj3);
IkReal x14233=(gconst16*r21);
IkReal x14234=(cj3*gconst17);
IkReal x14235=(sj1*sj2);
IkReal x14236=((1.0)*sj0);
IkReal x14237=(cj1*cj2);
IkReal x14238=(gconst16*sj3);
IkReal x14239=(cj3*gconst16);
IkReal x14240=(cj2*sj1);
IkReal x14241=(cj1*sj2);
IkReal x14242=((1.0)*cj0);
IkReal x14243=((1.0)*sj3);
IkReal x14244=(cj3*x14230);
IkReal x14245=(gconst16*x14229);
IkReal x14246=((1.0)*x14230);
IkReal x14247=(r02*x14229);
IkReal x14248=(r12*x14229);
evalcond[0]=(((x14229*x14233))+(((-1.0)*r20*x14229*x14231)));
evalcond[1]=(cj0+(((-1.0)*r10*x14229*x14231))+((r11*x14245))+(((-1.0)*r12*x14246)));
evalcond[2]=((((-1.0)*x14236))+(((-1.0)*r00*x14229*x14231))+((r01*x14245))+(((-1.0)*r02*x14246)));
evalcond[3]=(((r20*x14238))+((r21*x14232))+((x14233*x14244))+(((-1.0)*r20*x14231*x14244))+(((-1.0)*x14237))+x14235);
evalcond[4]=((((-1.0)*x14240))+(((-1.0)*x14241))+((r20*x14239))+((r21*x14234))+(((-1.0)*x14230*x14233*x14243))+((r20*x14230*x14232)));
evalcond[5]=((((-1.0)*r01*x14238*x14246))+((cj0*x14237))+(((-1.0)*x14235*x14242))+((r00*x14230*x14232))+((r01*x14234))+((r00*x14239))+(((-1.0)*x14243*x14247)));
evalcond[6]=(((r01*x14230*x14239))+((cj3*x14247))+((r01*x14232))+((r00*x14238))+(((-1.0)*r00*x14231*x14244))+(((-1.0)*x14241*x14242))+(((-1.0)*x14240*x14242)));
evalcond[7]=(((r10*x14239))+((r10*x14230*x14232))+(((-1.0)*r11*x14238*x14246))+(((-1.0)*x14243*x14248))+(((-1.0)*x14235*x14236))+((r11*x14234))+((sj0*x14237)));
evalcond[8]=(((r10*x14238))+((cj3*x14248))+(((-1.0)*r10*x14231*x14244))+(((-1.0)*x14236*x14241))+(((-1.0)*x14236*x14240))+((r11*x14230*x14239))+((r11*x14232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14249=((1.0)*sj0);
IkReal x14250=((1.0)*cj0);
CheckValue<IkReal> x14251=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14251.valid){
continue;
}
CheckValue<IkReal> x14252 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14249))+(((-1.0)*r02*x14250)))),IkReal(((((-1.0)*gconst16*r01*x14250))+(((-1.0)*gconst16*r11*x14249))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14251.value)))+(x14252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14253=IKsin(j4);
IkReal x14254=IKcos(j4);
IkReal x14255=(cj3*gconst17);
IkReal x14256=(gconst16*r21);
IkReal x14257=(gconst17*sj3);
IkReal x14258=(gconst16*r20);
IkReal x14259=(sj1*sj2);
IkReal x14260=((1.0)*cj2);
IkReal x14261=(gconst16*r10);
IkReal x14262=(gconst16*sj3);
IkReal x14263=((1.0)*sj0);
IkReal x14264=(cj1*cj2);
IkReal x14265=((1.0)*x14254);
IkReal x14266=(gconst16*x14253);
IkReal x14267=(cj3*x14254);
IkReal x14268=(cj3*x14253);
IkReal x14269=((1.0)*x14253);
IkReal x14270=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*gconst17*r20*x14269))+(((-1.0)*r22*x14265))+((x14253*x14256)));
evalcond[1]=(cj0+((r11*x14266))+(((-1.0)*r12*x14265))+(((-1.0)*gconst17*r10*x14269)));
evalcond[2]=((((-1.0)*r02*x14265))+(((-1.0)*x14263))+((r01*x14266))+(((-1.0)*gconst17*r00*x14269)));
evalcond[3]=(((r21*x14257))+(((-1.0)*r20*x14255*x14265))+((sj3*x14258))+(((-1.0)*cj1*x14260))+((x14256*x14267))+((r22*x14268))+x14259);
evalcond[4]=(((r21*x14255))+(((-1.0)*r22*sj3*x14269))+(((-1.0)*sj1*x14260))+(((-1.0)*x14270))+((cj3*x14258))+((r20*x14254*x14257))+(((-1.0)*sj3*x14256*x14265)));
evalcond[5]=((((-1.0)*r02*sj3*x14269))+(((-1.0)*r01*x14262*x14265))+((cj0*x14264))+(((-1.0)*cj0*x14259))+((r00*x14254*x14257))+((cj3*gconst16*r00))+((r01*x14255)));
evalcond[6]=((((-1.0)*cj0*x14270))+((r00*x14262))+((r02*x14268))+(((-1.0)*r00*x14255*x14265))+(((-1.0)*cj0*sj1*x14260))+((gconst16*r01*x14267))+((r01*x14257)));
evalcond[7]=((((-1.0)*r12*sj3*x14269))+((r10*x14254*x14257))+((cj3*x14261))+((r11*x14255))+(((-1.0)*x14259*x14263))+(((-1.0)*r11*x14262*x14265))+((sj0*x14264)));
evalcond[8]=(((sj3*x14261))+(((-1.0)*cj1*sj2*x14263))+(((-1.0)*r10*x14255*x14265))+((r12*x14268))+((r11*x14257))+((gconst16*r11*x14267))+(((-1.0)*sj0*sj1*x14260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14271=((1.0)*gconst17);
CheckValue<IkReal> x14272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14271)))),-1);
if(!x14272.valid){
continue;
}
CheckValue<IkReal> x14273 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14271))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14272.value)))+(x14273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14274=IKsin(j4);
IkReal x14275=IKcos(j4);
IkReal x14276=(cj3*gconst17);
IkReal x14277=(gconst16*r21);
IkReal x14278=(gconst17*sj3);
IkReal x14279=(gconst16*r20);
IkReal x14280=(sj1*sj2);
IkReal x14281=((1.0)*cj2);
IkReal x14282=(gconst16*r10);
IkReal x14283=(gconst16*sj3);
IkReal x14284=((1.0)*sj0);
IkReal x14285=(cj1*cj2);
IkReal x14286=((1.0)*x14275);
IkReal x14287=(gconst16*x14274);
IkReal x14288=(cj3*x14275);
IkReal x14289=(cj3*x14274);
IkReal x14290=((1.0)*x14274);
IkReal x14291=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x14286))+((x14274*x14277))+(((-1.0)*gconst17*r20*x14290)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x14290))+(((-1.0)*r12*x14286))+((r11*x14287)));
evalcond[2]=((((-1.0)*gconst17*r00*x14290))+((r01*x14287))+(((-1.0)*x14284))+(((-1.0)*r02*x14286)));
evalcond[3]=(((sj3*x14279))+((r21*x14278))+(((-1.0)*r20*x14276*x14286))+((r22*x14289))+x14280+((x14277*x14288))+(((-1.0)*cj1*x14281)));
evalcond[4]=(((r20*x14275*x14278))+((cj3*x14279))+((r21*x14276))+(((-1.0)*x14291))+(((-1.0)*sj3*x14277*x14286))+(((-1.0)*r22*sj3*x14290))+(((-1.0)*sj1*x14281)));
evalcond[5]=(((r01*x14276))+(((-1.0)*r01*x14283*x14286))+((r00*x14275*x14278))+(((-1.0)*cj0*x14280))+(((-1.0)*r02*sj3*x14290))+((cj0*x14285))+((cj3*gconst16*r00)));
evalcond[6]=(((r01*x14278))+((r00*x14283))+(((-1.0)*r00*x14276*x14286))+(((-1.0)*cj0*x14291))+(((-1.0)*cj0*sj1*x14281))+((gconst16*r01*x14288))+((r02*x14289)));
evalcond[7]=((((-1.0)*r11*x14283*x14286))+((cj3*x14282))+(((-1.0)*x14280*x14284))+((r10*x14275*x14278))+((r11*x14276))+((sj0*x14285))+(((-1.0)*r12*sj3*x14290)));
evalcond[8]=((((-1.0)*cj1*sj2*x14284))+(((-1.0)*sj0*sj1*x14281))+((r11*x14278))+((r12*x14289))+((sj3*x14282))+((gconst16*r11*x14288))+(((-1.0)*r10*x14276*x14286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14292=((1.0)*gconst17);
CheckValue<IkReal> x14293 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14292))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14293.valid){
continue;
}
CheckValue<IkReal> x14294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14292)))),-1);
if(!x14294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14293.value)+(((1.5707963267949)*(x14294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14295=IKsin(j4);
IkReal x14296=IKcos(j4);
IkReal x14297=(cj3*gconst17);
IkReal x14298=(gconst16*r21);
IkReal x14299=(gconst17*sj3);
IkReal x14300=(gconst16*r20);
IkReal x14301=(sj1*sj2);
IkReal x14302=((1.0)*cj2);
IkReal x14303=(gconst16*r10);
IkReal x14304=(gconst16*sj3);
IkReal x14305=((1.0)*sj0);
IkReal x14306=(cj1*cj2);
IkReal x14307=((1.0)*x14296);
IkReal x14308=(gconst16*x14295);
IkReal x14309=(cj3*x14296);
IkReal x14310=(cj3*x14295);
IkReal x14311=((1.0)*x14295);
IkReal x14312=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r22*x14307))+(((-1.0)*gconst17*r20*x14311))+((x14295*x14298)));
evalcond[1]=(cj0+((r11*x14308))+(((-1.0)*r12*x14307))+(((-1.0)*gconst17*r10*x14311)));
evalcond[2]=((((-1.0)*gconst17*r00*x14311))+(((-1.0)*r02*x14307))+((r01*x14308))+(((-1.0)*x14305)));
evalcond[3]=(((x14298*x14309))+(((-1.0)*cj1*x14302))+((r21*x14299))+(((-1.0)*r20*x14297*x14307))+x14301+((r22*x14310))+((sj3*x14300)));
evalcond[4]=((((-1.0)*sj1*x14302))+((r21*x14297))+(((-1.0)*sj3*x14298*x14307))+(((-1.0)*x14312))+((r20*x14296*x14299))+(((-1.0)*r22*sj3*x14311))+((cj3*x14300)));
evalcond[5]=((((-1.0)*cj0*x14301))+((r00*x14296*x14299))+((r01*x14297))+((cj0*x14306))+(((-1.0)*r02*sj3*x14311))+((cj3*gconst16*r00))+(((-1.0)*r01*x14304*x14307)));
evalcond[6]=(((gconst16*r01*x14309))+((r02*x14310))+((r01*x14299))+(((-1.0)*r00*x14297*x14307))+((r00*x14304))+(((-1.0)*cj0*x14312))+(((-1.0)*cj0*sj1*x14302)));
evalcond[7]=((((-1.0)*r11*x14304*x14307))+(((-1.0)*r12*sj3*x14311))+((r11*x14297))+((sj0*x14306))+(((-1.0)*x14301*x14305))+((r10*x14296*x14299))+((cj3*x14303)));
evalcond[8]=((((-1.0)*r10*x14297*x14307))+(((-1.0)*sj0*sj1*x14302))+((gconst16*r11*x14309))+((r11*x14299))+((r12*x14310))+(((-1.0)*cj1*sj2*x14305))+((sj3*x14303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14313=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14313;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14314=((1.0)*cj5);
IkReal x14315=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14314)));
j4eval[0]=x14315;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14314))))));
j4eval[2]=IKsign(x14315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14316=cj5*cj5;
IkReal x14317=(cj3*r01);
IkReal x14318=(cj5*sj5);
IkReal x14319=((1.0)*cj3);
IkReal x14320=(((r20*x14317*x14318))+((r21*x14316*x14317))+(((-1.0)*r00*r20*x14316*x14319))+(((-1.0)*r02*r22*x14319))+((cj3*r00*r21*x14318))+(((-1.0)*r21*x14317)));
j4eval[0]=x14320;
j4eval[1]=IKsign(x14320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14321=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14321;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14322=((1.0)*cj5);
IkReal x14323=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14322)));
j4eval[0]=x14323;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14322))+((r21*sj5))))));
j4eval[2]=IKsign(x14323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14324=cj5*cj5;
IkReal x14325=r01*r01;
IkReal x14326=(r01*sj5);
IkReal x14327=(cj5*r00);
IkReal x14328=((((-1.0)*(r02*r02)))+(((-1.0)*x14324*(r00*r00)))+(((2.0)*x14326*x14327))+((x14324*x14325))+(((-1.0)*x14325)));
j4eval[0]=x14328;
j4eval[1]=IKsign(x14328);
j4eval[2]=((IKabs(r02))+(IKabs((x14327+(((-1.0)*x14326))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14329=cj5*cj5;
IkReal x14330=r01*r01;
IkReal x14331=(r01*sj5);
IkReal x14332=(cj5*r00);
CheckValue<IkReal> x14333=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14329*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14330))+(((2.0)*x14331*x14332))+((x14329*x14330)))),-1);
if(!x14333.valid){
continue;
}
CheckValue<IkReal> x14334 = IKatan2WithCheck(IkReal(((((-1.0)*x14331))+x14332)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14333.value)))+(x14334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14335=IKsin(j4);
IkReal x14336=IKcos(j4);
IkReal x14337=(cj5*r10);
IkReal x14338=(r01*sj5);
IkReal x14339=((1.0)*sj1);
IkReal x14340=(cj5*r00);
IkReal x14341=(cj5*r20);
IkReal x14342=((1.0)*x14336);
IkReal x14343=((1.0)*x14335);
IkReal x14344=(sj5*x14335);
evalcond[0]=(((r21*x14344))+(((-1.0)*r22*x14342))+(((-1.0)*x14341*x14343)));
evalcond[1]=((((-1.0)*r12*x14342))+((r11*x14344))+(((-1.0)*x14337*x14343)));
evalcond[2]=((((-1.0)*x14338*x14342))+((x14336*x14340))+(((-1.0)*r02*x14343)));
evalcond[3]=((-1.0)+(((-1.0)*x14340*x14343))+((x14335*x14338))+(((-1.0)*r02*x14342)));
evalcond[4]=((((-1.0)*r12*x14343))+(((-1.0)*sj2*x14339))+((x14336*x14337))+(((-1.0)*r11*sj5*x14342))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x14339))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x14343))+((x14336*x14341))+(((-1.0)*r21*sj5*x14342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14345=((1.0)*cj5);
CheckValue<IkReal> x14346 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14345))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14346.valid){
continue;
}
CheckValue<IkReal> x14347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14345))+(((-1.0)*r10*sj5)))),-1);
if(!x14347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14346.value)+(((1.5707963267949)*(x14347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14348=IKsin(j4);
IkReal x14349=IKcos(j4);
IkReal x14350=(cj5*r10);
IkReal x14351=(r01*sj5);
IkReal x14352=((1.0)*sj1);
IkReal x14353=(cj5*r00);
IkReal x14354=(cj5*r20);
IkReal x14355=((1.0)*x14349);
IkReal x14356=((1.0)*x14348);
IkReal x14357=(sj5*x14348);
evalcond[0]=((((-1.0)*r22*x14355))+(((-1.0)*x14354*x14356))+((r21*x14357)));
evalcond[1]=(((r11*x14357))+(((-1.0)*r12*x14355))+(((-1.0)*x14350*x14356)));
evalcond[2]=((((-1.0)*r02*x14356))+(((-1.0)*x14351*x14355))+((x14349*x14353)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14355))+((x14348*x14351))+(((-1.0)*x14353*x14356)));
evalcond[4]=((((-1.0)*sj2*x14352))+(((-1.0)*r12*x14356))+(((-1.0)*r11*sj5*x14355))+((cj1*cj2))+((x14349*x14350)));
evalcond[5]=((((-1.0)*r21*sj5*x14355))+(((-1.0)*r22*x14356))+(((-1.0)*cj2*x14352))+(((-1.0)*cj1*sj2))+((x14349*x14354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14358=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14358.valid){
continue;
}
CheckValue<IkReal> x14359 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14358.value)))+(x14359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14360=IKsin(j4);
IkReal x14361=IKcos(j4);
IkReal x14362=(cj5*r10);
IkReal x14363=(r01*sj5);
IkReal x14364=((1.0)*sj1);
IkReal x14365=(cj5*r00);
IkReal x14366=(cj5*r20);
IkReal x14367=((1.0)*x14361);
IkReal x14368=((1.0)*x14360);
IkReal x14369=(sj5*x14360);
evalcond[0]=((((-1.0)*r22*x14367))+(((-1.0)*x14366*x14368))+((r21*x14369)));
evalcond[1]=(((r11*x14369))+(((-1.0)*x14362*x14368))+(((-1.0)*r12*x14367)));
evalcond[2]=((((-1.0)*r02*x14368))+((x14361*x14365))+(((-1.0)*x14363*x14367)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14367))+((x14360*x14363))+(((-1.0)*x14365*x14368)));
evalcond[4]=((((-1.0)*sj2*x14364))+((cj1*cj2))+(((-1.0)*r11*sj5*x14367))+(((-1.0)*r12*x14368))+((x14361*x14362)));
evalcond[5]=((((-1.0)*r22*x14368))+(((-1.0)*cj2*x14364))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj5*x14367))+((x14361*x14366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14370=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14370;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14371=((1.0)*cj5);
IkReal x14372=((((-1.0)*r11*x14371))+(((-1.0)*r10*sj5)));
j4eval[0]=x14372;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14371))+((r21*sj5))))));
j4eval[2]=IKsign(x14372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14373=cj5*cj5;
IkReal x14374=r01*r01;
IkReal x14375=(cj5*r00);
IkReal x14376=(r01*sj5);
IkReal x14377=((((-2.0)*x14375*x14376))+(((-1.0)*x14373*x14374))+(r02*r02)+((x14373*(r00*r00)))+x14374);
j4eval[0]=x14377;
j4eval[1]=IKsign(x14377);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14375))+x14376))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14378=cj5*cj5;
IkReal x14379=r01*r01;
IkReal x14380=(r01*sj5);
IkReal x14381=(cj5*r00);
CheckValue<IkReal> x14382 = IKatan2WithCheck(IkReal(((((-1.0)*x14381))+x14380)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14382.valid){
continue;
}
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(IKsign((((x14378*(r00*r00)))+(((-1.0)*x14378*x14379))+(((-2.0)*x14380*x14381))+(r02*r02)+x14379)),-1);
if(!x14383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14382.value)+(((1.5707963267949)*(x14383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14384=IKcos(j4);
IkReal x14385=IKsin(j4);
IkReal x14386=(cj5*r00);
IkReal x14387=(cj5*r10);
IkReal x14388=(r21*sj5);
IkReal x14389=((1.0)*sj1);
IkReal x14390=(cj5*r20);
IkReal x14391=((1.0)*x14384);
IkReal x14392=((1.0)*x14385);
IkReal x14393=(sj5*x14385);
IkReal x14394=(sj5*x14384);
evalcond[0]=(((r01*x14394))+((r02*x14385))+(((-1.0)*x14386*x14391)));
evalcond[1]=((((-1.0)*x14390*x14392))+((x14385*x14388))+(((-1.0)*r22*x14391)));
evalcond[2]=((((-1.0)*r12*x14391))+((r11*x14393))+(((-1.0)*x14387*x14392)));
evalcond[3]=((-1.0)+((r01*x14393))+(((-1.0)*r02*x14391))+(((-1.0)*x14386*x14392)));
evalcond[4]=(((r12*x14385))+((r11*x14394))+(((-1.0)*sj2*x14389))+((cj1*cj2))+(((-1.0)*x14387*x14391)));
evalcond[5]=((((-1.0)*x14390*x14391))+((x14384*x14388))+(((-1.0)*cj1*sj2))+((r22*x14385))+(((-1.0)*cj2*x14389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14395=((1.0)*cj5);
CheckValue<IkReal> x14396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14395)))),-1);
if(!x14396.valid){
continue;
}
CheckValue<IkReal> x14397 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14396.value)))+(x14397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14398=IKcos(j4);
IkReal x14399=IKsin(j4);
IkReal x14400=(cj5*r00);
IkReal x14401=(cj5*r10);
IkReal x14402=(r21*sj5);
IkReal x14403=((1.0)*sj1);
IkReal x14404=(cj5*r20);
IkReal x14405=((1.0)*x14398);
IkReal x14406=((1.0)*x14399);
IkReal x14407=(sj5*x14399);
IkReal x14408=(sj5*x14398);
evalcond[0]=((((-1.0)*x14400*x14405))+((r01*x14408))+((r02*x14399)));
evalcond[1]=((((-1.0)*r22*x14405))+((x14399*x14402))+(((-1.0)*x14404*x14406)));
evalcond[2]=((((-1.0)*x14401*x14406))+((r11*x14407))+(((-1.0)*r12*x14405)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14405))+(((-1.0)*x14400*x14406))+((r01*x14407)));
evalcond[4]=((((-1.0)*x14401*x14405))+((r11*x14408))+((r12*x14399))+((cj1*cj2))+(((-1.0)*sj2*x14403)));
evalcond[5]=(((x14398*x14402))+(((-1.0)*cj1*sj2))+((r22*x14399))+(((-1.0)*x14404*x14405))+(((-1.0)*cj2*x14403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14409=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14409.valid){
continue;
}
CheckValue<IkReal> x14410 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14409.value)))+(x14410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14411=IKcos(j4);
IkReal x14412=IKsin(j4);
IkReal x14413=(cj5*r00);
IkReal x14414=(cj5*r10);
IkReal x14415=(r21*sj5);
IkReal x14416=((1.0)*sj1);
IkReal x14417=(cj5*r20);
IkReal x14418=((1.0)*x14411);
IkReal x14419=((1.0)*x14412);
IkReal x14420=(sj5*x14412);
IkReal x14421=(sj5*x14411);
evalcond[0]=(((r02*x14412))+((r01*x14421))+(((-1.0)*x14413*x14418)));
evalcond[1]=((((-1.0)*x14417*x14419))+(((-1.0)*r22*x14418))+((x14412*x14415)));
evalcond[2]=(((r11*x14420))+(((-1.0)*r12*x14418))+(((-1.0)*x14414*x14419)));
evalcond[3]=((-1.0)+((r01*x14420))+(((-1.0)*r02*x14418))+(((-1.0)*x14413*x14419)));
evalcond[4]=(((r12*x14412))+((r11*x14421))+(((-1.0)*x14414*x14418))+((cj1*cj2))+(((-1.0)*sj2*x14416)));
evalcond[5]=((((-1.0)*x14417*x14418))+(((-1.0)*cj1*sj2))+((r22*x14412))+((x14411*x14415))+(((-1.0)*cj2*x14416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14423 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14423)==0){
continue;
}
IkReal x14422=pow(x14423,-0.5);
CheckValue<IkReal> x14424 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14424.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14424.value));
IkReal gconst49=((-1.0)*r21*x14422);
IkReal gconst50=(r20*x14422);
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14428 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14428.valid){
continue;
}
IkReal x14426=((-1.0)*(x14428.value));
IkReal x14427=x14422;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14426;
IkReal gconst48=x14426;
IkReal gconst49=((-1.0)*r21*x14427);
IkReal gconst50=(r20*x14427);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
IkReal x14429=((-1.0)*(x14431.value));
IkReal x14430=x14422;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14429;
IkReal gconst48=x14429;
IkReal gconst49=((-1.0)*r21*x14430);
IkReal gconst50=(r20*x14430);
CheckValue<IkReal> x14439=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14439.valid){
continue;
}
IkReal x14432=x14439.value;
IkReal x14433=(sj3*x14432);
IkReal x14434=(r11*x14433);
IkReal x14435=(r00*x14433);
IkReal x14436=(r01*x14433);
IkReal x14437=(r10*x14433);
IkReal x14438=(r20*r21*x14433);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14436))+((r01*x14434*(r21*r21)))+((r00*r20*r21*x14434))+((r10*x14435*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14440=gconst49*gconst49;
IkReal x14441=gconst50*gconst50;
IkReal x14442=((1.0)*cj3);
IkReal x14443=(gconst50*r01);
IkReal x14444=(gconst49*r10);
IkReal x14445=(r12*sj3);
IkReal x14446=(gconst49*r00);
IkReal x14447=(r00*sj3);
IkReal x14448=(r11*x14440);
IkReal x14449=(r10*x14441);
CheckValue<IkReal> x14450 = IKatan2WithCheck(IkReal((((x14445*x14446))+((x14443*x14445)))),IkReal(((((-1.0)*gconst50*x14444*x14447))+((x14447*x14448))+(((-1.0)*r01*sj3*x14449))+((gconst49*r11*sj3*x14443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14450.valid){
continue;
}
CheckValue<IkReal> x14451=IKPowWithIntegerCheck(IKsign((((cj3*x14443*x14444))+(((-1.0)*r01*x14442*x14448))+(((-1.0)*r00*x14442*x14449))+((cj3*gconst50*r11*x14446))+(((-1.0)*r02*r12*x14442)))),-1);
if(!x14451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14450.value)+(((1.5707963267949)*(x14451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14452=IKsin(j4);
IkReal x14453=IKcos(j4);
IkReal x14454=(gconst50*r20);
IkReal x14455=(gconst50*sj3);
IkReal x14456=(cj3*r01);
IkReal x14457=(gconst50*r10);
IkReal x14458=(gconst49*sj3);
IkReal x14459=(sj1*sj2);
IkReal x14460=((1.0)*cj2);
IkReal x14461=(cj3*r11);
IkReal x14462=(gconst50*r00);
IkReal x14463=(cj3*r21);
IkReal x14464=(cj3*gconst49);
IkReal x14465=((1.0)*cj1*sj2);
IkReal x14466=(sj1*x14460);
IkReal x14467=((1.0)*x14453);
IkReal x14468=((1.0)*x14452);
IkReal x14469=(gconst49*x14452);
IkReal x14470=(gconst49*x14453);
IkReal x14471=(cj3*x14452);
IkReal x14472=(x14465+x14466);
evalcond[0]=(((r21*x14469))+(((-1.0)*x14454*x14468))+(((-1.0)*r22*x14467)));
evalcond[1]=((((-1.0)*x14457*x14468))+((r11*x14469))+(((-1.0)*r12*x14467)));
evalcond[2]=((-1.0)+(((-1.0)*x14462*x14468))+((r01*x14469))+(((-1.0)*r02*x14467)));
evalcond[3]=((((-1.0)*cj3*x14462*x14467))+((x14456*x14470))+((r00*x14458))+((r01*x14455))+((r02*x14471)));
evalcond[4]=(((r00*x14464))+((r00*x14453*x14455))+((gconst50*x14456))+(((-1.0)*r02*sj3*x14468))+(((-1.0)*r01*x14458*x14467)));
evalcond[5]=((((-1.0)*cj3*x14454*x14467))+(((-1.0)*cj1*x14460))+((r22*x14471))+((r20*x14458))+x14459+((r21*x14455))+((x14463*x14470)));
evalcond[6]=(((r10*x14464))+(((-1.0)*r12*sj3*x14468))+(((-1.0)*r11*x14458*x14467))+((r10*x14453*x14455))+(((-1.0)*x14459))+((gconst50*x14461))+((cj1*cj2)));
evalcond[7]=(((r10*x14458))+((r11*x14455))+(((-1.0)*cj3*x14457*x14467))+((r12*x14471))+((x14461*x14470))+(((-1.0)*x14472)));
evalcond[8]=((((-1.0)*r21*x14458*x14467))+((sj3*x14453*x14454))+(((-1.0)*r22*sj3*x14468))+((gconst50*x14463))+(((-1.0)*x14472))+((r20*x14464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14473=gconst49*gconst49;
IkReal x14474=gconst50*gconst50;
IkReal x14475=(cj3*r12);
IkReal x14476=(gconst49*r00);
IkReal x14477=(r01*r11);
IkReal x14478=(r00*r11);
IkReal x14479=(cj3*gconst50);
IkReal x14480=((1.0)*r01*r10);
IkReal x14481=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14482 = IKatan2WithCheck(IkReal((((gconst50*r01*x14475))+((x14475*x14476)))),IkReal(((((-1.0)*r10*x14476*x14479))+((cj3*x14473*x14478))+(((-1.0)*cj3*x14474*x14480))+((gconst49*x14477*x14479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14482.valid){
continue;
}
CheckValue<IkReal> x14483=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14480*x14481))+(((-1.0)*gconst50*r11*sj3*x14476))+((r00*r10*sj3*x14474))+((sj3*x14473*x14477)))),-1);
if(!x14483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14482.value)+(((1.5707963267949)*(x14483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14484=IKsin(j4);
IkReal x14485=IKcos(j4);
IkReal x14486=(gconst50*r20);
IkReal x14487=(gconst50*sj3);
IkReal x14488=(cj3*r01);
IkReal x14489=(gconst50*r10);
IkReal x14490=(gconst49*sj3);
IkReal x14491=(sj1*sj2);
IkReal x14492=((1.0)*cj2);
IkReal x14493=(cj3*r11);
IkReal x14494=(gconst50*r00);
IkReal x14495=(cj3*r21);
IkReal x14496=(cj3*gconst49);
IkReal x14497=((1.0)*cj1*sj2);
IkReal x14498=(sj1*x14492);
IkReal x14499=((1.0)*x14485);
IkReal x14500=((1.0)*x14484);
IkReal x14501=(gconst49*x14484);
IkReal x14502=(gconst49*x14485);
IkReal x14503=(cj3*x14484);
IkReal x14504=(x14498+x14497);
evalcond[0]=((((-1.0)*r22*x14499))+(((-1.0)*x14486*x14500))+((r21*x14501)));
evalcond[1]=((((-1.0)*x14489*x14500))+(((-1.0)*r12*x14499))+((r11*x14501)));
evalcond[2]=((-1.0)+(((-1.0)*x14494*x14500))+(((-1.0)*r02*x14499))+((r01*x14501)));
evalcond[3]=(((x14488*x14502))+((r02*x14503))+(((-1.0)*cj3*x14494*x14499))+((r00*x14490))+((r01*x14487)));
evalcond[4]=(((r00*x14485*x14487))+(((-1.0)*r01*x14490*x14499))+((r00*x14496))+((gconst50*x14488))+(((-1.0)*r02*sj3*x14500)));
evalcond[5]=(((r21*x14487))+((r22*x14503))+(((-1.0)*cj3*x14486*x14499))+x14491+((x14495*x14502))+(((-1.0)*cj1*x14492))+((r20*x14490)));
evalcond[6]=((((-1.0)*x14491))+((r10*x14496))+((gconst50*x14493))+(((-1.0)*r11*x14490*x14499))+((r10*x14485*x14487))+((cj1*cj2))+(((-1.0)*r12*sj3*x14500)));
evalcond[7]=(((r10*x14490))+((r11*x14487))+(((-1.0)*x14504))+((x14493*x14502))+(((-1.0)*cj3*x14489*x14499))+((r12*x14503)));
evalcond[8]=((((-1.0)*r21*x14490*x14499))+(((-1.0)*x14504))+((gconst50*x14495))+(((-1.0)*r22*sj3*x14500))+((sj3*x14485*x14486))+((r20*x14496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14505=((1.0)*gconst50);
CheckValue<IkReal> x14506 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14506.valid){
continue;
}
CheckValue<IkReal> x14507=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14505)))),-1);
if(!x14507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14506.value)+(((1.5707963267949)*(x14507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14508=IKsin(j4);
IkReal x14509=IKcos(j4);
IkReal x14510=(gconst50*r20);
IkReal x14511=(gconst50*sj3);
IkReal x14512=(cj3*r01);
IkReal x14513=(gconst50*r10);
IkReal x14514=(gconst49*sj3);
IkReal x14515=(sj1*sj2);
IkReal x14516=((1.0)*cj2);
IkReal x14517=(cj3*r11);
IkReal x14518=(gconst50*r00);
IkReal x14519=(cj3*r21);
IkReal x14520=(cj3*gconst49);
IkReal x14521=((1.0)*cj1*sj2);
IkReal x14522=(sj1*x14516);
IkReal x14523=((1.0)*x14509);
IkReal x14524=((1.0)*x14508);
IkReal x14525=(gconst49*x14508);
IkReal x14526=(gconst49*x14509);
IkReal x14527=(cj3*x14508);
IkReal x14528=(x14521+x14522);
evalcond[0]=((((-1.0)*r22*x14523))+(((-1.0)*x14510*x14524))+((r21*x14525)));
evalcond[1]=((((-1.0)*x14513*x14524))+((r11*x14525))+(((-1.0)*r12*x14523)));
evalcond[2]=((-1.0)+((r01*x14525))+(((-1.0)*x14518*x14524))+(((-1.0)*r02*x14523)));
evalcond[3]=(((r00*x14514))+((r01*x14511))+((x14512*x14526))+((r02*x14527))+(((-1.0)*cj3*x14518*x14523)));
evalcond[4]=(((r00*x14520))+((r00*x14509*x14511))+((gconst50*x14512))+(((-1.0)*r01*x14514*x14523))+(((-1.0)*r02*sj3*x14524)));
evalcond[5]=(((r22*x14527))+(((-1.0)*cj1*x14516))+(((-1.0)*cj3*x14510*x14523))+((x14519*x14526))+((r20*x14514))+x14515+((r21*x14511)));
evalcond[6]=((((-1.0)*r11*x14514*x14523))+(((-1.0)*r12*sj3*x14524))+((gconst50*x14517))+((r10*x14509*x14511))+((cj1*cj2))+((r10*x14520))+(((-1.0)*x14515)));
evalcond[7]=(((x14517*x14526))+(((-1.0)*cj3*x14513*x14523))+((r11*x14511))+((r12*x14527))+(((-1.0)*x14528))+((r10*x14514)));
evalcond[8]=((((-1.0)*r21*x14514*x14523))+((gconst50*x14519))+((r20*x14520))+(((-1.0)*x14528))+(((-1.0)*r22*sj3*x14524))+((sj3*x14509*x14510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14530 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14530)==0){
continue;
}
IkReal x14529=pow(x14530,-0.5);
CheckValue<IkReal> x14531 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14531.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14531.value))));
IkReal gconst52=((1.0)*r21*x14529);
IkReal gconst53=((-1.0)*r20*x14529);
CheckValue<IkReal> x14532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14532.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14532.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14535 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14535.valid){
continue;
}
IkReal x14533=((1.0)*(x14535.value));
IkReal x14534=x14529;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14533)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14533)));
IkReal gconst52=((1.0)*r21*x14534);
IkReal gconst53=((-1.0)*r20*x14534);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14538 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14538.valid){
continue;
}
IkReal x14536=((1.0)*(x14538.value));
IkReal x14537=x14529;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14536)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14536)));
IkReal gconst52=((1.0)*r21*x14537);
IkReal gconst53=((-1.0)*r20*x14537);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14541 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14541.valid){
continue;
}
IkReal x14539=((1.0)*(x14541.value));
IkReal x14540=x14529;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14539)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14539)));
IkReal gconst52=((1.0)*r21*x14540);
IkReal gconst53=((-1.0)*r20*x14540);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14542=gconst52*gconst52;
IkReal x14543=gconst53*gconst53;
IkReal x14544=(gconst53*r01);
IkReal x14545=(cj3*r20);
IkReal x14546=(r22*sj3);
IkReal x14547=((1.0)*cj3);
IkReal x14548=(gconst52*sj3);
IkReal x14549=((1.0)*r00);
IkReal x14550=(gconst52*r00);
IkReal x14551=(r21*x14542);
CheckValue<IkReal> x14552=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14550))+((gconst52*x14544*x14545))+(((-1.0)*r02*r22*x14547))+(((-1.0)*x14543*x14545*x14549))+(((-1.0)*r01*x14547*x14551)))),-1);
if(!x14552.valid){
continue;
}
CheckValue<IkReal> x14553 = IKatan2WithCheck(IkReal((((x14544*x14546))+((x14546*x14550)))),IkReal(((((-1.0)*gconst53*r20*x14548*x14549))+((r00*sj3*x14551))+(((-1.0)*r01*r20*sj3*x14543))+((r21*x14544*x14548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14552.value)))+(x14553.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14554=IKsin(j4);
IkReal x14555=IKcos(j4);
IkReal x14556=((1.0)*cj1);
IkReal x14557=(cj3*gconst52);
IkReal x14558=(gconst53*sj3);
IkReal x14559=(sj1*sj2);
IkReal x14560=(cj3*gconst53);
IkReal x14561=(gconst52*sj3);
IkReal x14562=(sj2*x14556);
IkReal x14563=((1.0)*cj2*sj1);
IkReal x14564=((1.0)*x14555);
IkReal x14565=((1.0)*x14554);
IkReal x14566=(gconst52*x14554);
IkReal x14567=(cj3*x14554);
IkReal x14568=(x14563+x14562);
evalcond[0]=(((r21*x14566))+(((-1.0)*gconst53*r20*x14565))+(((-1.0)*r22*x14564)));
evalcond[1]=((((-1.0)*r12*x14564))+((r11*x14566))+(((-1.0)*gconst53*r10*x14565)));
evalcond[2]=((-1.0)+((r01*x14566))+(((-1.0)*r02*x14564))+(((-1.0)*gconst53*r00*x14565)));
evalcond[3]=(((r02*x14567))+(((-1.0)*r00*x14560*x14564))+((r01*x14555*x14557))+((r01*x14558))+((r00*x14561)));
evalcond[4]=(((r01*x14560))+((r00*x14555*x14558))+(((-1.0)*r01*x14561*x14564))+(((-1.0)*r02*sj3*x14565))+((r00*x14557)));
evalcond[5]=((((-1.0)*r20*x14560*x14564))+(((-1.0)*cj2*x14556))+((r20*x14561))+((r21*x14555*x14557))+x14559+((r22*x14567))+((r21*x14558)));
evalcond[6]=((((-1.0)*r11*x14561*x14564))+((r11*x14560))+((r10*x14557))+((r10*x14555*x14558))+(((-1.0)*x14559))+((cj1*cj2))+(((-1.0)*r12*sj3*x14565)));
evalcond[7]=((((-1.0)*r10*x14560*x14564))+(((-1.0)*x14568))+((r11*x14555*x14557))+((r10*x14561))+((r11*x14558))+((r12*x14567)));
evalcond[8]=(((r20*x14555*x14558))+((r21*x14560))+((r20*x14557))+(((-1.0)*x14568))+(((-1.0)*r22*sj3*x14565))+(((-1.0)*r21*x14561*x14564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14569=gconst52*gconst52;
IkReal x14570=gconst53*gconst53;
IkReal x14571=(cj3*gconst53);
IkReal x14572=(r21*sj3);
IkReal x14573=(gconst52*r01);
IkReal x14574=(r20*sj3);
IkReal x14575=(cj3*r00);
IkReal x14576=((1.0)*gconst52*r00);
CheckValue<IkReal> x14577=IKPowWithIntegerCheck(IKsign((((r01*x14569*x14572))+(((-1.0)*gconst53*x14572*x14576))+((r02*r22*sj3))+(((-1.0)*gconst53*x14573*x14574))+((r00*x14570*x14574)))),-1);
if(!x14577.valid){
continue;
}
CheckValue<IkReal> x14578 = IKatan2WithCheck(IkReal((((gconst52*r22*x14575))+((r01*r22*x14571)))),IkReal((((r21*x14571*x14573))+((r21*x14569*x14575))+(((-1.0)*r20*x14571*x14576))+(((-1.0)*cj3*r01*r20*x14570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14577.value)))+(x14578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14579=IKsin(j4);
IkReal x14580=IKcos(j4);
IkReal x14581=((1.0)*cj1);
IkReal x14582=(cj3*gconst52);
IkReal x14583=(gconst53*sj3);
IkReal x14584=(sj1*sj2);
IkReal x14585=(cj3*gconst53);
IkReal x14586=(gconst52*sj3);
IkReal x14587=(sj2*x14581);
IkReal x14588=((1.0)*cj2*sj1);
IkReal x14589=((1.0)*x14580);
IkReal x14590=((1.0)*x14579);
IkReal x14591=(gconst52*x14579);
IkReal x14592=(cj3*x14579);
IkReal x14593=(x14588+x14587);
evalcond[0]=((((-1.0)*gconst53*r20*x14590))+((r21*x14591))+(((-1.0)*r22*x14589)));
evalcond[1]=((((-1.0)*gconst53*r10*x14590))+(((-1.0)*r12*x14589))+((r11*x14591)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14589))+((r01*x14591))+(((-1.0)*gconst53*r00*x14590)));
evalcond[3]=((((-1.0)*r00*x14585*x14589))+((r00*x14586))+((r01*x14583))+((r01*x14580*x14582))+((r02*x14592)));
evalcond[4]=((((-1.0)*r01*x14586*x14589))+((r00*x14580*x14583))+((r00*x14582))+((r01*x14585))+(((-1.0)*r02*sj3*x14590)));
evalcond[5]=(((r20*x14586))+(((-1.0)*r20*x14585*x14589))+((r22*x14592))+((r21*x14583))+x14584+(((-1.0)*cj2*x14581))+((r21*x14580*x14582)));
evalcond[6]=((((-1.0)*x14584))+((r10*x14582))+((r11*x14585))+((cj1*cj2))+((r10*x14580*x14583))+(((-1.0)*r12*sj3*x14590))+(((-1.0)*r11*x14586*x14589)));
evalcond[7]=((((-1.0)*x14593))+((r11*x14580*x14582))+(((-1.0)*r10*x14585*x14589))+((r10*x14586))+((r11*x14583))+((r12*x14592)));
evalcond[8]=((((-1.0)*r21*x14586*x14589))+((r20*x14582))+(((-1.0)*x14593))+((r21*x14585))+((r20*x14580*x14583))+(((-1.0)*r22*sj3*x14590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14594=((1.0)*gconst53);
CheckValue<IkReal> x14595 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14595.valid){
continue;
}
CheckValue<IkReal> x14596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14594))+(((-1.0)*gconst52*r10)))),-1);
if(!x14596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14595.value)+(((1.5707963267949)*(x14596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14597=IKsin(j4);
IkReal x14598=IKcos(j4);
IkReal x14599=((1.0)*cj1);
IkReal x14600=(cj3*gconst52);
IkReal x14601=(gconst53*sj3);
IkReal x14602=(sj1*sj2);
IkReal x14603=(cj3*gconst53);
IkReal x14604=(gconst52*sj3);
IkReal x14605=(sj2*x14599);
IkReal x14606=((1.0)*cj2*sj1);
IkReal x14607=((1.0)*x14598);
IkReal x14608=((1.0)*x14597);
IkReal x14609=(gconst52*x14597);
IkReal x14610=(cj3*x14597);
IkReal x14611=(x14605+x14606);
evalcond[0]=((((-1.0)*r22*x14607))+(((-1.0)*gconst53*r20*x14608))+((r21*x14609)));
evalcond[1]=((((-1.0)*r12*x14607))+(((-1.0)*gconst53*r10*x14608))+((r11*x14609)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14608))+((r01*x14609))+(((-1.0)*r02*x14607)));
evalcond[3]=(((r02*x14610))+(((-1.0)*r00*x14603*x14607))+((r01*x14601))+((r00*x14604))+((r01*x14598*x14600)));
evalcond[4]=(((r01*x14603))+(((-1.0)*r01*x14604*x14607))+((r00*x14600))+(((-1.0)*r02*sj3*x14608))+((r00*x14598*x14601)));
evalcond[5]=(((r21*x14601))+((r21*x14598*x14600))+(((-1.0)*r20*x14603*x14607))+(((-1.0)*cj2*x14599))+((r22*x14610))+x14602+((r20*x14604)));
evalcond[6]=((((-1.0)*r11*x14604*x14607))+((r10*x14600))+(((-1.0)*r12*sj3*x14608))+(((-1.0)*x14602))+((r11*x14603))+((cj1*cj2))+((r10*x14598*x14601)));
evalcond[7]=(((r10*x14604))+(((-1.0)*r10*x14603*x14607))+((r11*x14598*x14600))+((r11*x14601))+((r12*x14610))+(((-1.0)*x14611)));
evalcond[8]=(((r20*x14598*x14601))+(((-1.0)*r22*sj3*x14608))+((r21*x14603))+(((-1.0)*r21*x14604*x14607))+((r20*x14600))+(((-1.0)*x14611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14612=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14612);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14612);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14613=(cj5*r00);
IkReal x14614=(r01*sj5);
j4eval[0]=((((-1.0)*x14613))+x14614);
j4eval[1]=((((-1.0)*sj3*x14614))+((sj3*x14613)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14615=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14615);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14615);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14616=(r01*sj5);
IkReal x14617=((1.0)*cj5*r00);
j4eval[0]=(x14616+(((-1.0)*x14617)));
j4eval[1]=((((-1.0)*cj3*x14617))+((cj3*x14616)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14618=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14618);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14618);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14619=((1.0)*cj3);
CheckValue<IkReal> x14620=IKPowWithIntegerCheck(cj3,-1);
if(!x14620.valid){
continue;
}
CheckValue<IkReal> x14621=IKPowWithIntegerCheck(r22,-1);
if(!x14621.valid){
continue;
}
CheckValue<IkReal> x14622=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x14622.valid){
continue;
}
if( IKabs(((x14620.value)*(x14621.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14622.value)*(((((-1.0)*cj5*r01*x14619))+(((-1.0)*r00*sj5*x14619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14620.value)*(x14621.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14622.value)*(((((-1.0)*cj5*r01*x14619))+(((-1.0)*r00*sj5*x14619))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14620.value)*(x14621.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14622.value)*(((((-1.0)*cj5*r01*x14619))+(((-1.0)*r00*sj5*x14619))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14623=IKsin(j4);
IkReal x14624=IKcos(j4);
IkReal x14625=(r11*sj5);
IkReal x14626=(cj5*r10);
IkReal x14627=(sj1*sj2);
IkReal x14628=(cj5*r01);
IkReal x14629=(cj5*r00);
IkReal x14630=(cj3*sj5);
IkReal x14631=((1.0)*cj2);
IkReal x14632=(sj3*sj5);
IkReal x14633=(cj5*r11);
IkReal x14634=(r01*sj5);
IkReal x14635=((1.0)*cj1*sj2);
IkReal x14636=(sj1*x14631);
IkReal x14637=(cj3*x14624);
IkReal x14638=((1.0)*x14623);
IkReal x14639=(sj3*x14624);
IkReal x14640=(x14635+x14636);
evalcond[0]=((-1.0)*r22*x14624);
evalcond[1]=((((-1.0)*x14626*x14638))+((x14623*x14625)));
evalcond[2]=(((cj3*r22*x14623))+x14627+(((-1.0)*cj1*x14631)));
evalcond[3]=((-1.0)+(((-1.0)*x14629*x14638))+((x14623*x14634)));
evalcond[4]=((((-1.0)*r22*sj3*x14638))+(((-1.0)*x14640)));
evalcond[5]=((((-1.0)*r01*x14624*x14632))+((x14629*x14639))+((cj3*x14628))+((r00*x14630)));
evalcond[6]=(((sj3*x14628))+((r01*x14624*x14630))+(((-1.0)*x14629*x14637))+((r00*x14632)));
evalcond[7]=(((x14626*x14639))+(((-1.0)*x14625*x14639))+((r10*x14630))+((cj3*x14633))+((cj1*cj2))+(((-1.0)*x14627)));
evalcond[8]=(((sj3*x14633))+((r10*x14632))+((x14625*x14637))+(((-1.0)*x14626*x14637))+(((-1.0)*x14640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14641=((1.0)*sj3);
IkReal x14642=(r01*sj5);
IkReal x14643=((1.0)*cj5*r00);
CheckValue<IkReal> x14644=IKPowWithIntegerCheck((x14642+(((-1.0)*x14643))),-1);
if(!x14644.valid){
continue;
}
CheckValue<IkReal> x14645=IKPowWithIntegerCheck(((((-1.0)*cj3*x14643))+((cj3*x14642))),-1);
if(!x14645.valid){
continue;
}
if( IKabs(x14644.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14645.value)*(((((-1.0)*cj5*r01*x14641))+(((-1.0)*r00*sj5*x14641)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14644.value)+IKsqr(((x14645.value)*(((((-1.0)*cj5*r01*x14641))+(((-1.0)*r00*sj5*x14641))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14644.value, ((x14645.value)*(((((-1.0)*cj5*r01*x14641))+(((-1.0)*r00*sj5*x14641))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14646=IKsin(j4);
IkReal x14647=IKcos(j4);
IkReal x14648=(r11*sj5);
IkReal x14649=(cj5*r10);
IkReal x14650=(sj1*sj2);
IkReal x14651=(cj5*r01);
IkReal x14652=(cj5*r00);
IkReal x14653=(cj3*sj5);
IkReal x14654=((1.0)*cj2);
IkReal x14655=(sj3*sj5);
IkReal x14656=(cj5*r11);
IkReal x14657=(r01*sj5);
IkReal x14658=((1.0)*cj1*sj2);
IkReal x14659=(sj1*x14654);
IkReal x14660=(cj3*x14647);
IkReal x14661=((1.0)*x14646);
IkReal x14662=(sj3*x14647);
IkReal x14663=(x14659+x14658);
evalcond[0]=((-1.0)*r22*x14647);
evalcond[1]=((((-1.0)*x14649*x14661))+((x14646*x14648)));
evalcond[2]=((((-1.0)*cj1*x14654))+x14650+((cj3*r22*x14646)));
evalcond[3]=((-1.0)+(((-1.0)*x14652*x14661))+((x14646*x14657)));
evalcond[4]=((((-1.0)*r22*sj3*x14661))+(((-1.0)*x14663)));
evalcond[5]=(((r00*x14653))+((x14652*x14662))+(((-1.0)*r01*x14647*x14655))+((cj3*x14651)));
evalcond[6]=(((r01*x14647*x14653))+((r00*x14655))+((sj3*x14651))+(((-1.0)*x14652*x14660)));
evalcond[7]=(((r10*x14653))+(((-1.0)*x14650))+(((-1.0)*x14648*x14662))+((cj1*cj2))+((cj3*x14656))+((x14649*x14662)));
evalcond[8]=(((x14648*x14660))+((r10*x14655))+((sj3*x14656))+(((-1.0)*x14649*x14660))+(((-1.0)*x14663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14664=((1.0)*cj3);
IkReal x14665=(cj5*r00);
IkReal x14666=(r01*sj5);
CheckValue<IkReal> x14667=IKPowWithIntegerCheck(((((-1.0)*x14665))+x14666),-1);
if(!x14667.valid){
continue;
}
CheckValue<IkReal> x14668=IKPowWithIntegerCheck(((((-1.0)*sj3*x14666))+((sj3*x14665))),-1);
if(!x14668.valid){
continue;
}
if( IKabs(x14667.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14668.value)*(((((-1.0)*cj5*r01*x14664))+(((-1.0)*r00*sj5*x14664)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14667.value)+IKsqr(((x14668.value)*(((((-1.0)*cj5*r01*x14664))+(((-1.0)*r00*sj5*x14664))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14667.value, ((x14668.value)*(((((-1.0)*cj5*r01*x14664))+(((-1.0)*r00*sj5*x14664))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14669=IKsin(j4);
IkReal x14670=IKcos(j4);
IkReal x14671=(r11*sj5);
IkReal x14672=(cj5*r10);
IkReal x14673=(sj1*sj2);
IkReal x14674=(cj5*r01);
IkReal x14675=(cj5*r00);
IkReal x14676=(cj3*sj5);
IkReal x14677=((1.0)*cj2);
IkReal x14678=(sj3*sj5);
IkReal x14679=(cj5*r11);
IkReal x14680=(r01*sj5);
IkReal x14681=((1.0)*cj1*sj2);
IkReal x14682=(sj1*x14677);
IkReal x14683=(cj3*x14670);
IkReal x14684=((1.0)*x14669);
IkReal x14685=(sj3*x14670);
IkReal x14686=(x14681+x14682);
evalcond[0]=((-1.0)*r22*x14670);
evalcond[1]=(((x14669*x14671))+(((-1.0)*x14672*x14684)));
evalcond[2]=((((-1.0)*cj1*x14677))+((cj3*r22*x14669))+x14673);
evalcond[3]=((-1.0)+((x14669*x14680))+(((-1.0)*x14675*x14684)));
evalcond[4]=((((-1.0)*x14686))+(((-1.0)*r22*sj3*x14684)));
evalcond[5]=(((x14675*x14685))+((r00*x14676))+((cj3*x14674))+(((-1.0)*r01*x14670*x14678)));
evalcond[6]=(((r01*x14670*x14676))+((r00*x14678))+(((-1.0)*x14675*x14683))+((sj3*x14674)));
evalcond[7]=(((r10*x14676))+(((-1.0)*x14673))+((cj3*x14679))+(((-1.0)*x14671*x14685))+((cj1*cj2))+((x14672*x14685)));
evalcond[8]=(((r10*x14678))+(((-1.0)*x14672*x14683))+(((-1.0)*x14686))+((sj3*x14679))+((x14671*x14683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14687=cj5*cj5;
IkReal x14688=(cj3*r20);
IkReal x14689=(r21*sj3);
IkReal x14690=((1.0)*cj3);
IkReal x14691=(r01*r21);
IkReal x14692=(r01*sj3);
IkReal x14693=(r00*sj5);
IkReal x14694=(cj5*r01*sj5);
IkReal x14695=((1.0)*x14687);
CheckValue<IkReal> x14696 = IKatan2WithCheck(IkReal((((r22*sj3*x14693))+((cj5*r22*x14692)))),IkReal((((r00*x14689))+(((-1.0)*r20*x14692*x14695))+(((-1.0)*cj5*r20*sj3*x14693))+(((-1.0)*r00*x14689*x14695))+((x14689*x14694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14696.valid){
continue;
}
CheckValue<IkReal> x14697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14690))+((cj3*x14687*x14691))+((x14688*x14694))+(((-1.0)*r00*x14688*x14695))+(((-1.0)*x14690*x14691))+((cj3*cj5*r21*x14693)))),-1);
if(!x14697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14696.value)+(((1.5707963267949)*(x14697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14698=IKsin(j4);
IkReal x14699=IKcos(j4);
IkReal x14700=(r11*sj5);
IkReal x14701=(cj5*r10);
IkReal x14702=(sj1*sj2);
IkReal x14703=(cj5*r01);
IkReal x14704=(cj5*r00);
IkReal x14705=((1.0)*cj1);
IkReal x14706=(cj3*sj5);
IkReal x14707=(r21*sj5);
IkReal x14708=(cj5*sj3);
IkReal x14709=(sj3*sj5);
IkReal x14710=(r01*sj5);
IkReal x14711=(cj3*cj5);
IkReal x14712=(cj5*r20);
IkReal x14713=(sj2*x14705);
IkReal x14714=((1.0)*cj2*sj1);
IkReal x14715=((1.0)*x14699);
IkReal x14716=((1.0)*x14698);
IkReal x14717=(cj3*x14699);
IkReal x14718=(sj3*x14699);
IkReal x14719=(cj3*x14698);
IkReal x14720=(x14713+x14714);
evalcond[0]=(((x14698*x14707))+(((-1.0)*r22*x14715))+(((-1.0)*x14712*x14716)));
evalcond[1]=(((x14698*x14700))+(((-1.0)*x14701*x14716))+(((-1.0)*r12*x14715)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14715))+((x14698*x14710))+(((-1.0)*x14704*x14716)));
evalcond[3]=(((r00*x14709))+((r02*x14719))+(((-1.0)*cj3*x14704*x14715))+((sj3*x14703))+((r01*x14699*x14706)));
evalcond[4]=(((r00*x14706))+(((-1.0)*r01*x14709*x14715))+((cj3*x14703))+(((-1.0)*r02*sj3*x14716))+((x14704*x14718)));
evalcond[5]=((((-1.0)*r20*x14711*x14715))+((r21*x14699*x14706))+((r22*x14719))+((r20*x14709))+(((-1.0)*cj2*x14705))+((r21*x14708))+x14702);
evalcond[6]=(((r11*x14711))+(((-1.0)*x14702))+((x14701*x14718))+(((-1.0)*sj3*x14700*x14715))+((cj1*cj2))+(((-1.0)*r12*sj3*x14716))+((r10*x14706)));
evalcond[7]=(((r12*x14719))+(((-1.0)*cj3*x14701*x14715))+((x14700*x14717))+((r11*x14708))+(((-1.0)*x14720))+((r10*x14709)));
evalcond[8]=((((-1.0)*sj3*x14707*x14715))+((r21*x14711))+((r20*x14699*x14708))+((r20*x14706))+(((-1.0)*x14720))+(((-1.0)*r22*sj3*x14716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14721=((1.0)*cj5);
CheckValue<IkReal> x14722 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14721))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14722.valid){
continue;
}
CheckValue<IkReal> x14723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14721))+(((-1.0)*r10*sj5)))),-1);
if(!x14723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14722.value)+(((1.5707963267949)*(x14723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14724=IKsin(j4);
IkReal x14725=IKcos(j4);
IkReal x14726=(r11*sj5);
IkReal x14727=(cj5*r10);
IkReal x14728=(sj1*sj2);
IkReal x14729=(cj5*r01);
IkReal x14730=(cj5*r00);
IkReal x14731=((1.0)*cj1);
IkReal x14732=(cj3*sj5);
IkReal x14733=(r21*sj5);
IkReal x14734=(cj5*sj3);
IkReal x14735=(sj3*sj5);
IkReal x14736=(r01*sj5);
IkReal x14737=(cj3*cj5);
IkReal x14738=(cj5*r20);
IkReal x14739=(sj2*x14731);
IkReal x14740=((1.0)*cj2*sj1);
IkReal x14741=((1.0)*x14725);
IkReal x14742=((1.0)*x14724);
IkReal x14743=(cj3*x14725);
IkReal x14744=(sj3*x14725);
IkReal x14745=(cj3*x14724);
IkReal x14746=(x14739+x14740);
evalcond[0]=((((-1.0)*x14738*x14742))+(((-1.0)*r22*x14741))+((x14724*x14733)));
evalcond[1]=((((-1.0)*x14727*x14742))+(((-1.0)*r12*x14741))+((x14724*x14726)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14741))+((x14724*x14736))+(((-1.0)*x14730*x14742)));
evalcond[3]=((((-1.0)*cj3*x14730*x14741))+((r00*x14735))+((sj3*x14729))+((r01*x14725*x14732))+((r02*x14745)));
evalcond[4]=(((x14730*x14744))+((r00*x14732))+(((-1.0)*r01*x14735*x14741))+((cj3*x14729))+(((-1.0)*r02*sj3*x14742)));
evalcond[5]=(((r22*x14745))+((r20*x14735))+((r21*x14725*x14732))+(((-1.0)*cj2*x14731))+(((-1.0)*r20*x14737*x14741))+x14728+((r21*x14734)));
evalcond[6]=((((-1.0)*x14728))+((r10*x14732))+(((-1.0)*sj3*x14726*x14741))+(((-1.0)*r12*sj3*x14742))+((cj1*cj2))+((r11*x14737))+((x14727*x14744)));
evalcond[7]=(((r10*x14735))+((r12*x14745))+(((-1.0)*x14746))+((r11*x14734))+((x14726*x14743))+(((-1.0)*cj3*x14727*x14741)));
evalcond[8]=(((r20*x14725*x14734))+((r20*x14732))+(((-1.0)*x14746))+(((-1.0)*r22*sj3*x14742))+((r21*x14737))+(((-1.0)*sj3*x14733*x14741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14747=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14747.valid){
continue;
}
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14747.value)))+(x14748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14749=IKsin(j4);
IkReal x14750=IKcos(j4);
IkReal x14751=(r11*sj5);
IkReal x14752=(cj5*r10);
IkReal x14753=(sj1*sj2);
IkReal x14754=(cj5*r01);
IkReal x14755=(cj5*r00);
IkReal x14756=((1.0)*cj1);
IkReal x14757=(cj3*sj5);
IkReal x14758=(r21*sj5);
IkReal x14759=(cj5*sj3);
IkReal x14760=(sj3*sj5);
IkReal x14761=(r01*sj5);
IkReal x14762=(cj3*cj5);
IkReal x14763=(cj5*r20);
IkReal x14764=(sj2*x14756);
IkReal x14765=((1.0)*cj2*sj1);
IkReal x14766=((1.0)*x14750);
IkReal x14767=((1.0)*x14749);
IkReal x14768=(cj3*x14750);
IkReal x14769=(sj3*x14750);
IkReal x14770=(cj3*x14749);
IkReal x14771=(x14765+x14764);
evalcond[0]=(((x14749*x14758))+(((-1.0)*x14763*x14767))+(((-1.0)*r22*x14766)));
evalcond[1]=(((x14749*x14751))+(((-1.0)*x14752*x14767))+(((-1.0)*r12*x14766)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14766))+(((-1.0)*x14755*x14767))+((x14749*x14761)));
evalcond[3]=(((r00*x14760))+((sj3*x14754))+((r01*x14750*x14757))+(((-1.0)*cj3*x14755*x14766))+((r02*x14770)));
evalcond[4]=(((x14755*x14769))+(((-1.0)*r02*sj3*x14767))+(((-1.0)*r01*x14760*x14766))+((cj3*x14754))+((r00*x14757)));
evalcond[5]=(((r22*x14770))+(((-1.0)*r20*x14762*x14766))+((r21*x14750*x14757))+((r20*x14760))+(((-1.0)*cj2*x14756))+x14753+((r21*x14759)));
evalcond[6]=((((-1.0)*sj3*x14751*x14766))+(((-1.0)*r12*sj3*x14767))+((r11*x14762))+((x14752*x14769))+((cj1*cj2))+((r10*x14757))+(((-1.0)*x14753)));
evalcond[7]=(((r12*x14770))+((r10*x14760))+((x14751*x14768))+(((-1.0)*x14771))+(((-1.0)*cj3*x14752*x14766))+((r11*x14759)));
evalcond[8]=(((r20*x14757))+(((-1.0)*x14771))+(((-1.0)*r22*sj3*x14767))+((r21*x14762))+(((-1.0)*sj3*x14758*x14766))+((r20*x14750*x14759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14772=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14772;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14773=((1.0)*cj5);
IkReal x14774=((((-1.0)*r21*x14773))+(((-1.0)*r20*sj5)));
j4eval[0]=x14774;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x14773)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x14775=cj5*cj5;
IkReal x14776=(cj3*r01);
IkReal x14777=(cj5*sj5);
IkReal x14778=((1.0)*cj3);
IkReal x14779=(((cj3*r00*r21*x14777))+(((-1.0)*r21*x14776))+(((-1.0)*r00*r20*x14775*x14778))+(((-1.0)*r02*r22*x14778))+((r21*x14775*x14776))+((r20*x14776*x14777)));
j4eval[0]=x14779;
j4eval[1]=IKsign(x14779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14780=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14780;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14781=((1.0)*cj5);
IkReal x14782=((((-1.0)*r21*x14781))+(((-1.0)*r20*sj5)));
j4eval[0]=x14782;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14781))+((r11*sj5))))));
j4eval[2]=IKsign(x14782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14783=cj5*cj5;
IkReal x14784=r01*r01;
IkReal x14785=(cj5*r00);
IkReal x14786=(r01*sj5);
IkReal x14787=((((-2.0)*x14785*x14786))+(((-1.0)*x14783*x14784))+((x14783*(r00*r00)))+x14784+(r02*r02));
j4eval[0]=x14787;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14786))+x14785))));
j4eval[2]=IKsign(x14787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14788=cj5*cj5;
IkReal x14789=r01*r01;
IkReal x14790=(r01*sj5);
IkReal x14791=(cj5*r00);
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(IKsign((((x14788*(r00*r00)))+(((-1.0)*x14788*x14789))+x14789+(r02*r02)+(((-2.0)*x14790*x14791)))),-1);
if(!x14792.valid){
continue;
}
CheckValue<IkReal> x14793 = IKatan2WithCheck(IkReal(((((-1.0)*x14790))+x14791)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14792.value)))+(x14793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14794=IKsin(j4);
IkReal x14795=IKcos(j4);
IkReal x14796=(cj5*r10);
IkReal x14797=(r01*sj5);
IkReal x14798=((1.0)*cj2);
IkReal x14799=(cj5*r00);
IkReal x14800=(cj5*r20);
IkReal x14801=((1.0)*x14795);
IkReal x14802=((1.0)*x14794);
IkReal x14803=(sj5*x14794);
evalcond[0]=((((-1.0)*r22*x14801))+((r21*x14803))+(((-1.0)*x14800*x14802)));
evalcond[1]=((((-1.0)*x14796*x14802))+(((-1.0)*r12*x14801))+((r11*x14803)));
evalcond[2]=((((-1.0)*x14797*x14801))+((x14795*x14799))+(((-1.0)*r02*x14802)));
evalcond[3]=((1.0)+(((-1.0)*x14799*x14802))+((x14794*x14797))+(((-1.0)*r02*x14801)));
evalcond[4]=((((-1.0)*r11*sj5*x14801))+((sj1*sj2))+(((-1.0)*r12*x14802))+(((-1.0)*cj1*x14798))+((x14795*x14796)));
evalcond[5]=((((-1.0)*r21*sj5*x14801))+(((-1.0)*r22*x14802))+(((-1.0)*sj1*x14798))+(((-1.0)*cj1*sj2))+((x14795*x14800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14804=((1.0)*cj5);
CheckValue<IkReal> x14805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14804))+(((-1.0)*r20*sj5)))),-1);
if(!x14805.valid){
continue;
}
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x14804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14805.value)))+(x14806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14807=IKsin(j4);
IkReal x14808=IKcos(j4);
IkReal x14809=(cj5*r10);
IkReal x14810=(r01*sj5);
IkReal x14811=((1.0)*cj2);
IkReal x14812=(cj5*r00);
IkReal x14813=(cj5*r20);
IkReal x14814=((1.0)*x14808);
IkReal x14815=((1.0)*x14807);
IkReal x14816=(sj5*x14807);
evalcond[0]=((((-1.0)*r22*x14814))+((r21*x14816))+(((-1.0)*x14813*x14815)));
evalcond[1]=((((-1.0)*r12*x14814))+(((-1.0)*x14809*x14815))+((r11*x14816)));
evalcond[2]=((((-1.0)*r02*x14815))+((x14808*x14812))+(((-1.0)*x14810*x14814)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14814))+((x14807*x14810))+(((-1.0)*x14812*x14815)));
evalcond[4]=((((-1.0)*r11*sj5*x14814))+((x14808*x14809))+((sj1*sj2))+(((-1.0)*r12*x14815))+(((-1.0)*cj1*x14811)));
evalcond[5]=((((-1.0)*r21*sj5*x14814))+(((-1.0)*r22*x14815))+((x14808*x14813))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
CheckValue<IkReal> x14818=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14817.value)+(((1.5707963267949)*(x14818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14819=IKsin(j4);
IkReal x14820=IKcos(j4);
IkReal x14821=(cj5*r10);
IkReal x14822=(r01*sj5);
IkReal x14823=((1.0)*cj2);
IkReal x14824=(cj5*r00);
IkReal x14825=(cj5*r20);
IkReal x14826=((1.0)*x14820);
IkReal x14827=((1.0)*x14819);
IkReal x14828=(sj5*x14819);
evalcond[0]=(((r21*x14828))+(((-1.0)*r22*x14826))+(((-1.0)*x14825*x14827)));
evalcond[1]=((((-1.0)*x14821*x14827))+(((-1.0)*r12*x14826))+((r11*x14828)));
evalcond[2]=(((x14820*x14824))+(((-1.0)*x14822*x14826))+(((-1.0)*r02*x14827)));
evalcond[3]=((1.0)+(((-1.0)*x14824*x14827))+((x14819*x14822))+(((-1.0)*r02*x14826)));
evalcond[4]=(((x14820*x14821))+(((-1.0)*r11*sj5*x14826))+((sj1*sj2))+(((-1.0)*r12*x14827))+(((-1.0)*cj1*x14823)));
evalcond[5]=((((-1.0)*sj1*x14823))+((x14820*x14825))+(((-1.0)*r22*x14827))+(((-1.0)*r21*sj5*x14826))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14829=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14829;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14830=((1.0)*cj5);
IkReal x14831=((((-1.0)*r21*x14830))+(((-1.0)*r20*sj5)));
j4eval[0]=x14831;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x14830))))));
j4eval[2]=IKsign(x14831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14832=(sj1*sj2);
IkReal x14833=(r01*sj5);
IkReal x14834=(cj1*cj2);
IkReal x14835=((1.0)*cj5);
IkReal x14836=((((-1.0)*r21*x14835))+(((-1.0)*r20*sj5)));
j4eval[0]=x14836;
j4eval[1]=((IKabs(((((-1.0)*r02*x14832))+((r02*x14834)))))+(IKabs((((x14832*x14833))+(((-1.0)*r00*x14832*x14835))+((cj5*r00*x14834))+(((-1.0)*x14833*x14834))))));
j4eval[2]=IKsign(x14836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14837=(sj1*sj2);
IkReal x14838=(r01*sj5);
IkReal x14839=(cj1*cj2);
IkReal x14840=((1.0)*cj5);
CheckValue<IkReal> x14841 = IKatan2WithCheck(IkReal((((x14837*x14838))+((cj5*r00*x14839))+(((-1.0)*r00*x14837*x14840))+(((-1.0)*x14838*x14839)))),IkReal(((((-1.0)*r02*x14837))+((r02*x14839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14841.valid){
continue;
}
CheckValue<IkReal> x14842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14840))+(((-1.0)*r20*sj5)))),-1);
if(!x14842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14841.value)+(((1.5707963267949)*(x14842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14843=IKcos(j4);
IkReal x14844=IKsin(j4);
IkReal x14845=(cj5*r00);
IkReal x14846=(cj5*r10);
IkReal x14847=(r21*sj5);
IkReal x14848=((1.0)*cj2);
IkReal x14849=(cj5*r20);
IkReal x14850=((1.0)*x14843);
IkReal x14851=((1.0)*x14844);
IkReal x14852=(sj5*x14844);
IkReal x14853=(sj5*x14843);
evalcond[0]=(((r02*x14844))+(((-1.0)*x14845*x14850))+((r01*x14853)));
evalcond[1]=(((x14844*x14847))+(((-1.0)*x14849*x14851))+(((-1.0)*r22*x14850)));
evalcond[2]=((((-1.0)*x14846*x14851))+((r11*x14852))+(((-1.0)*r12*x14850)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14850))+(((-1.0)*x14845*x14851))+((r01*x14852)));
evalcond[4]=((((-1.0)*cj1*x14848))+((sj1*sj2))+(((-1.0)*x14846*x14850))+((r11*x14853))+((r12*x14844)));
evalcond[5]=((((-1.0)*sj1*x14848))+((x14843*x14847))+(((-1.0)*x14849*x14850))+(((-1.0)*cj1*sj2))+((r22*x14844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14854=((1.0)*cj5);
CheckValue<IkReal> x14855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14854))+(((-1.0)*r20*sj5)))),-1);
if(!x14855.valid){
continue;
}
CheckValue<IkReal> x14856 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14854))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14855.value)))+(x14856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14857=IKcos(j4);
IkReal x14858=IKsin(j4);
IkReal x14859=(cj5*r00);
IkReal x14860=(cj5*r10);
IkReal x14861=(r21*sj5);
IkReal x14862=((1.0)*cj2);
IkReal x14863=(cj5*r20);
IkReal x14864=((1.0)*x14857);
IkReal x14865=((1.0)*x14858);
IkReal x14866=(sj5*x14858);
IkReal x14867=(sj5*x14857);
evalcond[0]=(((r02*x14858))+(((-1.0)*x14859*x14864))+((r01*x14867)));
evalcond[1]=(((x14858*x14861))+(((-1.0)*x14863*x14865))+(((-1.0)*r22*x14864)));
evalcond[2]=(((r11*x14866))+(((-1.0)*r12*x14864))+(((-1.0)*x14860*x14865)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14864))+(((-1.0)*x14859*x14865))+((r01*x14866)));
evalcond[4]=((((-1.0)*cj1*x14862))+((sj1*sj2))+((r11*x14867))+((r12*x14858))+(((-1.0)*x14860*x14864)));
evalcond[5]=(((x14857*x14861))+(((-1.0)*sj1*x14862))+(((-1.0)*cj1*sj2))+(((-1.0)*x14863*x14864))+((r22*x14858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14868 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14868.valid){
continue;
}
CheckValue<IkReal> x14869=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14868.value)+(((1.5707963267949)*(x14869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14870=IKcos(j4);
IkReal x14871=IKsin(j4);
IkReal x14872=(cj5*r00);
IkReal x14873=(cj5*r10);
IkReal x14874=(r21*sj5);
IkReal x14875=((1.0)*cj2);
IkReal x14876=(cj5*r20);
IkReal x14877=((1.0)*x14870);
IkReal x14878=((1.0)*x14871);
IkReal x14879=(sj5*x14871);
IkReal x14880=(sj5*x14870);
evalcond[0]=((((-1.0)*x14872*x14877))+((r01*x14880))+((r02*x14871)));
evalcond[1]=((((-1.0)*r22*x14877))+((x14871*x14874))+(((-1.0)*x14876*x14878)));
evalcond[2]=(((r11*x14879))+(((-1.0)*x14873*x14878))+(((-1.0)*r12*x14877)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14877))+(((-1.0)*x14872*x14878))+((r01*x14879)));
evalcond[4]=(((r11*x14880))+(((-1.0)*x14873*x14877))+((r12*x14871))+((sj1*sj2))+(((-1.0)*cj1*x14875)));
evalcond[5]=(((r22*x14871))+((x14870*x14874))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14875))+(((-1.0)*x14876*x14877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14882 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14882)==0){
continue;
}
IkReal x14881=pow(x14882,-0.5);
CheckValue<IkReal> x14883 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14883.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14883.value));
IkReal gconst61=((-1.0)*r11*x14881);
IkReal gconst62=(r10*x14881);
CheckValue<IkReal> x14884 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14884.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14884.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
IkReal x14885=((-1.0)*(x14887.value));
IkReal x14886=x14881;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14885;
IkReal gconst60=x14885;
IkReal gconst61=((-1.0)*r11*x14886);
IkReal gconst62=(r10*x14886);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14890 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14890.valid){
continue;
}
IkReal x14888=((-1.0)*(x14890.value));
IkReal x14889=x14881;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x14888;
IkReal gconst60=x14888;
IkReal gconst61=((-1.0)*r11*x14889);
IkReal gconst62=(r10*x14889);
CheckValue<IkReal> x14898=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14898.valid){
continue;
}
IkReal x14891=x14898.value;
IkReal x14892=(sj3*x14891);
IkReal x14893=(r20*x14892);
IkReal x14894=(r00*x14892);
IkReal x14895=(r01*x14892);
IkReal x14896=(r21*x14892);
IkReal x14897=(r10*r11*x14892);
j4eval[0]=IKsign((((r01*r10*r11*x14893))+((r00*x14893*(r10*r10)))+((r21*x14895*(r11*r11)))+((r10*r11*r21*x14894))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14899=gconst61*gconst61;
IkReal x14900=gconst62*gconst62;
IkReal x14901=(cj3*r01);
IkReal x14902=(r22*sj3);
IkReal x14903=(gconst61*r00);
IkReal x14904=((1.0)*cj3);
IkReal x14905=(gconst62*r01);
IkReal x14906=((1.0)*sj3);
IkReal x14907=(gconst61*gconst62*r20);
IkReal x14908=(r21*x14899);
IkReal x14909=(r20*x14900);
CheckValue<IkReal> x14910=IKPowWithIntegerCheck(IKsign((((x14901*x14907))+(((-1.0)*x14901*x14908))+(((-1.0)*r02*r22*x14904))+((cj3*gconst62*r21*x14903))+(((-1.0)*r00*x14904*x14909)))),-1);
if(!x14910.valid){
continue;
}
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal((((x14902*x14903))+((x14902*x14905)))),IkReal((((gconst61*r21*sj3*x14905))+(((-1.0)*r01*x14906*x14909))+((r00*sj3*x14908))+(((-1.0)*gconst62*r20*x14903*x14906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14910.value)))+(x14911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14912=IKsin(j4);
IkReal x14913=IKcos(j4);
IkReal x14914=(sj1*sj2);
IkReal x14915=(gconst61*sj3);
IkReal x14916=(cj3*gconst61);
IkReal x14917=(cj3*gconst62);
IkReal x14918=((1.0)*cj2);
IkReal x14919=(gconst62*sj3);
IkReal x14920=(cj1*sj2);
IkReal x14921=(cj1*x14918);
IkReal x14922=((1.0)*x14913);
IkReal x14923=((1.0)*x14912);
IkReal x14924=(gconst61*x14912);
IkReal x14925=(cj3*x14912);
evalcond[0]=(((r21*x14924))+(((-1.0)*r22*x14922))+(((-1.0)*gconst62*r20*x14923)));
evalcond[1]=((((-1.0)*r12*x14922))+((r11*x14924))+(((-1.0)*gconst62*r10*x14923)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x14923))+((r01*x14924))+(((-1.0)*r02*x14922)));
evalcond[3]=(((r01*x14919))+((r00*x14915))+(((-1.0)*r00*x14917*x14922))+((r01*x14913*x14916))+((r02*x14925)));
evalcond[4]=(((r01*x14917))+((r00*x14916))+(((-1.0)*r02*sj3*x14923))+((r00*x14913*x14919))+(((-1.0)*r01*x14915*x14922)));
evalcond[5]=(((r10*x14915))+((cj2*sj1))+x14920+((r11*x14919))+(((-1.0)*r10*x14917*x14922))+((r11*x14913*x14916))+((r12*x14925)));
evalcond[6]=(((r21*x14919))+x14914+(((-1.0)*r20*x14917*x14922))+((r21*x14913*x14916))+(((-1.0)*x14921))+((r20*x14915))+((r22*x14925)));
evalcond[7]=(((r10*x14916))+((r10*x14913*x14919))+(((-1.0)*r12*sj3*x14923))+x14914+(((-1.0)*r11*x14915*x14922))+((r11*x14917))+(((-1.0)*x14921)));
evalcond[8]=((((-1.0)*x14920))+((r21*x14917))+((r20*x14913*x14919))+(((-1.0)*r21*x14915*x14922))+(((-1.0)*r22*sj3*x14923))+((r20*x14916))+(((-1.0)*sj1*x14918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14926=gconst61*gconst61;
IkReal x14927=gconst62*gconst62;
IkReal x14928=(cj3*r22);
IkReal x14929=(gconst62*r01);
IkReal x14930=(gconst61*r00);
IkReal x14931=((1.0)*r20);
IkReal x14932=(cj3*r21);
IkReal x14933=(r21*sj3);
CheckValue<IkReal> x14934=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x14927))+(((-1.0)*gconst62*x14930*x14933))+(((-1.0)*gconst61*sj3*x14929*x14931))+((r01*x14926*x14933))+((r02*r22*sj3)))),-1);
if(!x14934.valid){
continue;
}
CheckValue<IkReal> x14935 = IKatan2WithCheck(IkReal((((x14928*x14930))+((x14928*x14929)))),IkReal(((((-1.0)*cj3*gconst62*x14930*x14931))+(((-1.0)*cj3*r01*x14927*x14931))+((r00*x14926*x14932))+((gconst61*x14929*x14932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14934.value)))+(x14935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14936=IKsin(j4);
IkReal x14937=IKcos(j4);
IkReal x14938=(sj1*sj2);
IkReal x14939=(gconst61*sj3);
IkReal x14940=(cj3*gconst61);
IkReal x14941=(cj3*gconst62);
IkReal x14942=((1.0)*cj2);
IkReal x14943=(gconst62*sj3);
IkReal x14944=(cj1*sj2);
IkReal x14945=(cj1*x14942);
IkReal x14946=((1.0)*x14937);
IkReal x14947=((1.0)*x14936);
IkReal x14948=(gconst61*x14936);
IkReal x14949=(cj3*x14936);
evalcond[0]=((((-1.0)*gconst62*r20*x14947))+((r21*x14948))+(((-1.0)*r22*x14946)));
evalcond[1]=((((-1.0)*gconst62*r10*x14947))+(((-1.0)*r12*x14946))+((r11*x14948)));
evalcond[2]=((1.0)+((r01*x14948))+(((-1.0)*r02*x14946))+(((-1.0)*gconst62*r00*x14947)));
evalcond[3]=((((-1.0)*r00*x14941*x14946))+((r01*x14943))+((r00*x14939))+((r01*x14937*x14940))+((r02*x14949)));
evalcond[4]=((((-1.0)*r02*sj3*x14947))+((r00*x14940))+(((-1.0)*r01*x14939*x14946))+((r01*x14941))+((r00*x14937*x14943)));
evalcond[5]=(((cj2*sj1))+((r12*x14949))+x14944+((r10*x14939))+(((-1.0)*r10*x14941*x14946))+((r11*x14937*x14940))+((r11*x14943)));
evalcond[6]=(x14938+((r22*x14949))+(((-1.0)*x14945))+(((-1.0)*r20*x14941*x14946))+((r21*x14937*x14940))+((r21*x14943))+((r20*x14939)));
evalcond[7]=(x14938+((r10*x14940))+(((-1.0)*r12*sj3*x14947))+(((-1.0)*x14945))+((r10*x14937*x14943))+((r11*x14941))+(((-1.0)*r11*x14939*x14946)));
evalcond[8]=((((-1.0)*sj1*x14942))+(((-1.0)*x14944))+((r20*x14937*x14943))+(((-1.0)*r22*sj3*x14947))+((r21*x14941))+(((-1.0)*r21*x14939*x14946))+((r20*x14940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14950=((1.0)*gconst62);
CheckValue<IkReal> x14951 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x14950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14951.valid){
continue;
}
CheckValue<IkReal> x14952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14950))+(((-1.0)*gconst61*r20)))),-1);
if(!x14952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14951.value)+(((1.5707963267949)*(x14952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14953=IKsin(j4);
IkReal x14954=IKcos(j4);
IkReal x14955=(sj1*sj2);
IkReal x14956=(gconst61*sj3);
IkReal x14957=(cj3*gconst61);
IkReal x14958=(cj3*gconst62);
IkReal x14959=((1.0)*cj2);
IkReal x14960=(gconst62*sj3);
IkReal x14961=(cj1*sj2);
IkReal x14962=(cj1*x14959);
IkReal x14963=((1.0)*x14954);
IkReal x14964=((1.0)*x14953);
IkReal x14965=(gconst61*x14953);
IkReal x14966=(cj3*x14953);
evalcond[0]=((((-1.0)*r22*x14963))+((r21*x14965))+(((-1.0)*gconst62*r20*x14964)));
evalcond[1]=((((-1.0)*r12*x14963))+((r11*x14965))+(((-1.0)*gconst62*r10*x14964)));
evalcond[2]=((1.0)+((r01*x14965))+(((-1.0)*r02*x14963))+(((-1.0)*gconst62*r00*x14964)));
evalcond[3]=(((r01*x14960))+((r01*x14954*x14957))+((r00*x14956))+((r02*x14966))+(((-1.0)*r00*x14958*x14963)));
evalcond[4]=((((-1.0)*r01*x14956*x14963))+((r01*x14958))+(((-1.0)*r02*sj3*x14964))+((r00*x14957))+((r00*x14954*x14960)));
evalcond[5]=(((cj2*sj1))+x14961+((r12*x14966))+((r10*x14956))+((r11*x14960))+(((-1.0)*r10*x14958*x14963))+((r11*x14954*x14957)));
evalcond[6]=(((r22*x14966))+x14955+((r21*x14954*x14957))+(((-1.0)*x14962))+((r20*x14956))+(((-1.0)*r20*x14958*x14963))+((r21*x14960)));
evalcond[7]=(x14955+(((-1.0)*r11*x14956*x14963))+((r10*x14957))+(((-1.0)*x14962))+((r10*x14954*x14960))+(((-1.0)*r12*sj3*x14964))+((r11*x14958)));
evalcond[8]=((((-1.0)*r21*x14956*x14963))+(((-1.0)*x14961))+(((-1.0)*sj1*x14959))+(((-1.0)*r22*sj3*x14964))+((r20*x14954*x14960))+((r21*x14958))+((r20*x14957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14968 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14968)==0){
continue;
}
IkReal x14967=pow(x14968,-0.5);
CheckValue<IkReal> x14969 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14969.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14969.value))));
IkReal gconst64=((1.0)*r11*x14967);
IkReal gconst65=((-1.0)*r10*x14967);
CheckValue<IkReal> x14970 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14973 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14973.valid){
continue;
}
IkReal x14971=((1.0)*(x14973.value));
IkReal x14972=x14967;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14971)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14971)));
IkReal gconst64=((1.0)*r11*x14972);
IkReal gconst65=((-1.0)*r10*x14972);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14976 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14976.valid){
continue;
}
IkReal x14974=((1.0)*(x14976.value));
IkReal x14975=x14967;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x14974)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14974)));
IkReal gconst64=((1.0)*r11*x14975);
IkReal gconst65=((-1.0)*r10*x14975);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14977=gconst65*gconst65;
IkReal x14978=gconst64*gconst64;
IkReal x14979=(r21*sj3);
IkReal x14980=(cj3*r20);
IkReal x14981=((1.0)*r20);
IkReal x14982=((1.0)*cj3);
IkReal x14983=(r01*sj3);
IkReal x14984=(gconst64*gconst65*r01);
IkReal x14985=(gconst64*r00*sj3);
CheckValue<IkReal> x14986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14982))+((x14980*x14984))+(((-1.0)*r00*x14977*x14980))+((cj3*gconst64*gconst65*r00*r21))+(((-1.0)*r01*r21*x14978*x14982)))),-1);
if(!x14986.valid){
continue;
}
CheckValue<IkReal> x14987 = IKatan2WithCheck(IkReal((((r22*x14985))+((gconst65*r22*x14983)))),IkReal((((r00*x14978*x14979))+(((-1.0)*x14977*x14981*x14983))+((x14979*x14984))+(((-1.0)*gconst65*x14981*x14985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14986.value)))+(x14987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14988=IKsin(j4);
IkReal x14989=IKcos(j4);
IkReal x14990=(sj1*sj2);
IkReal x14991=(cj3*gconst64);
IkReal x14992=(gconst65*r21);
IkReal x14993=(gconst65*sj3);
IkReal x14994=(gconst64*sj3);
IkReal x14995=((1.0)*cj2);
IkReal x14996=(cj1*sj2);
IkReal x14997=(cj3*gconst65);
IkReal x14998=(cj1*x14995);
IkReal x14999=((1.0)*x14989);
IkReal x15000=((1.0)*x14988);
IkReal x15001=(cj3*x14988);
IkReal x15002=(gconst64*x14988);
evalcond[0]=((((-1.0)*gconst65*r20*x15000))+(((-1.0)*r22*x14999))+((r21*x15002)));
evalcond[1]=((((-1.0)*r12*x14999))+(((-1.0)*gconst65*r10*x15000))+((r11*x15002)));
evalcond[2]=((1.0)+((r01*x15002))+(((-1.0)*gconst65*r00*x15000))+(((-1.0)*r02*x14999)));
evalcond[3]=((((-1.0)*r00*x14997*x14999))+((r00*x14994))+((r01*x14993))+((r02*x15001))+((r01*x14989*x14991)));
evalcond[4]=((((-1.0)*r02*sj3*x15000))+((r00*x14989*x14993))+(((-1.0)*r01*x14994*x14999))+((r00*x14991))+((r01*x14997)));
evalcond[5]=(((cj2*sj1))+((r11*x14989*x14991))+x14996+((r12*x15001))+((r10*x14994))+((r11*x14993))+(((-1.0)*r10*x14997*x14999)));
evalcond[6]=((((-1.0)*x14998))+x14990+((sj3*x14992))+((r21*x14989*x14991))+((r20*x14994))+(((-1.0)*r20*x14997*x14999))+((r22*x15001)));
evalcond[7]=((((-1.0)*x14998))+(((-1.0)*r12*sj3*x15000))+x14990+(((-1.0)*r11*x14994*x14999))+((r10*x14991))+((r11*x14997))+((r10*x14989*x14993)));
evalcond[8]=(((cj3*x14992))+((r20*x14991))+((r20*x14989*x14993))+(((-1.0)*r22*sj3*x15000))+(((-1.0)*sj1*x14995))+(((-1.0)*r21*x14994*x14999))+(((-1.0)*x14996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15003=((1.0)*gconst65);
CheckValue<IkReal> x15004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15003))+(((-1.0)*gconst64*r20)))),-1);
if(!x15004.valid){
continue;
}
CheckValue<IkReal> x15005 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15004.value)))+(x15005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15006=IKsin(j4);
IkReal x15007=IKcos(j4);
IkReal x15008=(sj1*sj2);
IkReal x15009=(cj3*gconst64);
IkReal x15010=(gconst65*r21);
IkReal x15011=(gconst65*sj3);
IkReal x15012=(gconst64*sj3);
IkReal x15013=((1.0)*cj2);
IkReal x15014=(cj1*sj2);
IkReal x15015=(cj3*gconst65);
IkReal x15016=(cj1*x15013);
IkReal x15017=((1.0)*x15007);
IkReal x15018=((1.0)*x15006);
IkReal x15019=(cj3*x15006);
IkReal x15020=(gconst64*x15006);
evalcond[0]=((((-1.0)*gconst65*r20*x15018))+((r21*x15020))+(((-1.0)*r22*x15017)));
evalcond[1]=((((-1.0)*r12*x15017))+(((-1.0)*gconst65*r10*x15018))+((r11*x15020)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15018))+(((-1.0)*r02*x15017))+((r01*x15020)));
evalcond[3]=(((r01*x15007*x15009))+((r00*x15012))+((r01*x15011))+(((-1.0)*r00*x15015*x15017))+((r02*x15019)));
evalcond[4]=(((r00*x15007*x15011))+((r00*x15009))+(((-1.0)*r01*x15012*x15017))+((r01*x15015))+(((-1.0)*r02*sj3*x15018)));
evalcond[5]=(((cj2*sj1))+((r10*x15012))+(((-1.0)*r10*x15015*x15017))+((r11*x15007*x15009))+x15014+((r11*x15011))+((r12*x15019)));
evalcond[6]=(((r22*x15019))+(((-1.0)*x15016))+(((-1.0)*r20*x15015*x15017))+x15008+((sj3*x15010))+((r20*x15012))+((r21*x15007*x15009)));
evalcond[7]=((((-1.0)*x15016))+(((-1.0)*r12*sj3*x15018))+(((-1.0)*r11*x15012*x15017))+x15008+((r10*x15007*x15011))+((r10*x15009))+((r11*x15015)));
evalcond[8]=((((-1.0)*x15014))+(((-1.0)*r21*x15012*x15017))+((cj3*x15010))+((r20*x15007*x15011))+((r20*x15009))+(((-1.0)*sj1*x15013))+(((-1.0)*r22*sj3*x15018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15021=IKPowWithIntegerCheck(IKsign((((gconst64*r10))+((gconst65*r11)))),-1);
if(!x15021.valid){
continue;
}
CheckValue<IkReal> x15022 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst65*r20))+((gconst64*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15021.value)))+(x15022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15023=IKsin(j4);
IkReal x15024=IKcos(j4);
IkReal x15025=(sj1*sj2);
IkReal x15026=(cj3*gconst64);
IkReal x15027=(gconst65*r21);
IkReal x15028=(gconst65*sj3);
IkReal x15029=(gconst64*sj3);
IkReal x15030=((1.0)*cj2);
IkReal x15031=(cj1*sj2);
IkReal x15032=(cj3*gconst65);
IkReal x15033=(cj1*x15030);
IkReal x15034=((1.0)*x15024);
IkReal x15035=((1.0)*x15023);
IkReal x15036=(cj3*x15023);
IkReal x15037=(gconst64*x15023);
evalcond[0]=(((r21*x15037))+(((-1.0)*gconst65*r20*x15035))+(((-1.0)*r22*x15034)));
evalcond[1]=((((-1.0)*gconst65*r10*x15035))+((r11*x15037))+(((-1.0)*r12*x15034)));
evalcond[2]=((1.0)+((r01*x15037))+(((-1.0)*r02*x15034))+(((-1.0)*gconst65*r00*x15035)));
evalcond[3]=(((r01*x15024*x15026))+((r00*x15029))+(((-1.0)*r00*x15032*x15034))+((r02*x15036))+((r01*x15028)));
evalcond[4]=(((r00*x15026))+((r01*x15032))+(((-1.0)*r01*x15029*x15034))+((r00*x15024*x15028))+(((-1.0)*r02*sj3*x15035)));
evalcond[5]=(((cj2*sj1))+((r10*x15029))+x15031+((r12*x15036))+((r11*x15024*x15026))+(((-1.0)*r10*x15032*x15034))+((r11*x15028)));
evalcond[6]=((((-1.0)*x15033))+x15025+(((-1.0)*r20*x15032*x15034))+((r21*x15024*x15026))+((sj3*x15027))+((r22*x15036))+((r20*x15029)));
evalcond[7]=((((-1.0)*x15033))+(((-1.0)*r12*sj3*x15035))+(((-1.0)*r11*x15029*x15034))+((r10*x15026))+x15025+((r11*x15032))+((r10*x15024*x15028)));
evalcond[8]=((((-1.0)*sj1*x15030))+((r20*x15024*x15028))+(((-1.0)*x15031))+((cj3*x15027))+((r20*x15026))+(((-1.0)*r22*sj3*x15035))+(((-1.0)*r21*x15029*x15034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15038=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15038);
rxp0_2=(py*r00);
rxp1_0=(r21*x15038);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15039=(cj5*r00);
IkReal x15040=(r01*sj5);
j4eval[0]=((((-1.0)*x15039))+x15040);
j4eval[1]=(((sj3*x15039))+(((-1.0)*sj3*x15040)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15041=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15041);
rxp0_2=(py*r00);
rxp1_0=(r21*x15041);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15042=(r01*sj5);
IkReal x15043=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15043))+x15042);
j4eval[1]=(((cj3*x15042))+(((-1.0)*cj3*x15043)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15044=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15044);
rxp0_2=(py*r00);
rxp1_0=(r21*x15044);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15045=((1.0)*cj3);
CheckValue<IkReal> x15046=IKPowWithIntegerCheck(cj3,-1);
if(!x15046.valid){
continue;
}
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(r12,-1);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048=IKPowWithIntegerCheck((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))),-1);
if(!x15048.valid){
continue;
}
if( IKabs(((x15046.value)*(x15047.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15048.value)*(((((-1.0)*cj5*r01*x15045))+(((-1.0)*r00*sj5*x15045)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15046.value)*(x15047.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15048.value)*(((((-1.0)*cj5*r01*x15045))+(((-1.0)*r00*sj5*x15045))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15046.value)*(x15047.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15048.value)*(((((-1.0)*cj5*r01*x15045))+(((-1.0)*r00*sj5*x15045))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j4);
IkReal x15050=IKcos(j4);
IkReal x15051=(sj1*sj2);
IkReal x15052=(cj5*sj3);
IkReal x15053=(cj3*cj5);
IkReal x15054=((1.0)*cj2);
IkReal x15055=(r21*sj5);
IkReal x15056=(cj1*sj2);
IkReal x15057=(r00*sj5);
IkReal x15058=(r01*sj5);
IkReal x15059=(r20*sj5);
IkReal x15060=(cj1*x15054);
IkReal x15061=((1.0)*x15049);
IkReal x15062=(r20*x15050);
IkReal x15063=(r00*x15050);
IkReal x15064=(cj3*x15050);
IkReal x15065=((1.0)*sj3*x15050);
evalcond[0]=((-1.0)*r12*x15050);
evalcond[1]=(((cj2*sj1))+x15056+((cj3*r12*x15049)));
evalcond[2]=(((x15049*x15055))+(((-1.0)*cj5*r20*x15061)));
evalcond[3]=((1.0)+((x15049*x15058))+(((-1.0)*cj5*r00*x15061)));
evalcond[4]=((((-1.0)*r12*sj3*x15061))+x15051+(((-1.0)*x15060)));
evalcond[5]=(((r01*x15053))+((x15052*x15063))+(((-1.0)*x15058*x15065))+((cj3*x15057)));
evalcond[6]=(((r01*x15052))+((x15058*x15064))+(((-1.0)*x15053*x15063))+((sj3*x15057)));
evalcond[7]=(((x15055*x15064))+x15051+((r21*x15052))+(((-1.0)*x15053*x15062))+((sj3*x15059))+(((-1.0)*x15060)));
evalcond[8]=((((-1.0)*x15056))+((x15052*x15062))+((r21*x15053))+(((-1.0)*x15055*x15065))+(((-1.0)*sj1*x15054))+((cj3*x15059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15066=((1.0)*r00);
IkReal x15067=(r01*sj5);
CheckValue<IkReal> x15068=IKPowWithIntegerCheck((x15067+(((-1.0)*cj5*x15066))),-1);
if(!x15068.valid){
continue;
}
CheckValue<IkReal> x15069=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15066))+((cj3*x15067))),-1);
if(!x15069.valid){
continue;
}
if( IKabs(((-1.0)*(x15068.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15069.value)*(((((-1.0)*sj3*sj5*x15066))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15068.value)))+IKsqr(((x15069.value)*(((((-1.0)*sj3*sj5*x15066))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15068.value)), ((x15069.value)*(((((-1.0)*sj3*sj5*x15066))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15070=IKsin(j4);
IkReal x15071=IKcos(j4);
IkReal x15072=(sj1*sj2);
IkReal x15073=(cj5*sj3);
IkReal x15074=(cj3*cj5);
IkReal x15075=((1.0)*cj2);
IkReal x15076=(r21*sj5);
IkReal x15077=(cj1*sj2);
IkReal x15078=(r00*sj5);
IkReal x15079=(r01*sj5);
IkReal x15080=(r20*sj5);
IkReal x15081=(cj1*x15075);
IkReal x15082=((1.0)*x15070);
IkReal x15083=(r20*x15071);
IkReal x15084=(r00*x15071);
IkReal x15085=(cj3*x15071);
IkReal x15086=((1.0)*sj3*x15071);
evalcond[0]=((-1.0)*r12*x15071);
evalcond[1]=(((cj2*sj1))+x15077+((cj3*r12*x15070)));
evalcond[2]=(((x15070*x15076))+(((-1.0)*cj5*r20*x15082)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r00*x15082))+((x15070*x15079)));
evalcond[4]=((((-1.0)*x15081))+x15072+(((-1.0)*r12*sj3*x15082)));
evalcond[5]=(((r01*x15074))+(((-1.0)*x15079*x15086))+((cj3*x15078))+((x15073*x15084)));
evalcond[6]=(((r01*x15073))+((x15079*x15085))+(((-1.0)*x15074*x15084))+((sj3*x15078)));
evalcond[7]=((((-1.0)*x15081))+x15072+(((-1.0)*x15074*x15083))+((r21*x15073))+((sj3*x15080))+((x15076*x15085)));
evalcond[8]=((((-1.0)*sj1*x15075))+(((-1.0)*x15077))+((r21*x15074))+((x15073*x15083))+(((-1.0)*x15076*x15086))+((cj3*x15080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15087=((1.0)*r01);
IkReal x15088=(cj5*r00);
CheckValue<IkReal> x15089=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15088))),-1);
if(!x15089.valid){
continue;
}
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15087))+((sj3*x15088))),-1);
if(!x15090.valid){
continue;
}
if( IKabs(((-1.0)*(x15089.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15090.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15087)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15089.value)))+IKsqr(((x15090.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15087))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15089.value)), ((x15090.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15087))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15091=IKsin(j4);
IkReal x15092=IKcos(j4);
IkReal x15093=(sj1*sj2);
IkReal x15094=(cj5*sj3);
IkReal x15095=(cj3*cj5);
IkReal x15096=((1.0)*cj2);
IkReal x15097=(r21*sj5);
IkReal x15098=(cj1*sj2);
IkReal x15099=(r00*sj5);
IkReal x15100=(r01*sj5);
IkReal x15101=(r20*sj5);
IkReal x15102=(cj1*x15096);
IkReal x15103=((1.0)*x15091);
IkReal x15104=(r20*x15092);
IkReal x15105=(r00*x15092);
IkReal x15106=(cj3*x15092);
IkReal x15107=((1.0)*sj3*x15092);
evalcond[0]=((-1.0)*r12*x15092);
evalcond[1]=(((cj2*sj1))+((cj3*r12*x15091))+x15098);
evalcond[2]=((((-1.0)*cj5*r20*x15103))+((x15091*x15097)));
evalcond[3]=((1.0)+((x15091*x15100))+(((-1.0)*cj5*r00*x15103)));
evalcond[4]=(x15093+(((-1.0)*x15102))+(((-1.0)*r12*sj3*x15103)));
evalcond[5]=(((x15094*x15105))+((r01*x15095))+((cj3*x15099))+(((-1.0)*x15100*x15107)));
evalcond[6]=(((sj3*x15099))+((r01*x15094))+(((-1.0)*x15095*x15105))+((x15100*x15106)));
evalcond[7]=(((r21*x15094))+((x15097*x15106))+x15093+(((-1.0)*x15095*x15104))+(((-1.0)*x15102))+((sj3*x15101)));
evalcond[8]=((((-1.0)*sj1*x15096))+(((-1.0)*x15097*x15107))+((r21*x15095))+((x15094*x15104))+(((-1.0)*x15098))+((cj3*x15101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15108=cj5*cj5;
IkReal x15109=(cj3*r20);
IkReal x15110=(r21*sj3);
IkReal x15111=((1.0)*cj3);
IkReal x15112=(r01*r21);
IkReal x15113=(r01*sj3);
IkReal x15114=(r00*sj5);
IkReal x15115=(cj5*r01*sj5);
IkReal x15116=((1.0)*x15108);
CheckValue<IkReal> x15117=IKPowWithIntegerCheck(IKsign((((x15109*x15115))+((cj3*x15108*x15112))+(((-1.0)*x15111*x15112))+(((-1.0)*r00*x15109*x15116))+((cj3*cj5*r21*x15114))+(((-1.0)*r02*r22*x15111)))),-1);
if(!x15117.valid){
continue;
}
CheckValue<IkReal> x15118 = IKatan2WithCheck(IkReal((((cj5*r22*x15113))+((r22*sj3*x15114)))),IkReal(((((-1.0)*cj5*r20*sj3*x15114))+(((-1.0)*r00*x15110*x15116))+((x15110*x15115))+(((-1.0)*r20*x15113*x15116))+((r00*x15110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15117.value)))+(x15118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15119=IKsin(j4);
IkReal x15120=IKcos(j4);
IkReal x15121=(sj1*sj2);
IkReal x15122=(r11*sj5);
IkReal x15123=(cj5*r10);
IkReal x15124=(cj5*r01);
IkReal x15125=(cj5*r00);
IkReal x15126=((1.0)*cj1);
IkReal x15127=(cj3*sj5);
IkReal x15128=(r21*sj5);
IkReal x15129=(cj5*sj3);
IkReal x15130=(sj3*sj5);
IkReal x15131=(cj2*sj1);
IkReal x15132=(r01*sj5);
IkReal x15133=(cj3*cj5);
IkReal x15134=(cj5*r20);
IkReal x15135=(cj2*x15126);
IkReal x15136=((1.0)*x15120);
IkReal x15137=((1.0)*x15119);
IkReal x15138=(cj3*x15120);
IkReal x15139=(sj3*x15120);
IkReal x15140=(cj3*x15119);
evalcond[0]=((((-1.0)*x15134*x15137))+(((-1.0)*r22*x15136))+((x15119*x15128)));
evalcond[1]=((((-1.0)*x15123*x15137))+(((-1.0)*r12*x15136))+((x15119*x15122)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15136))+((x15119*x15132))+(((-1.0)*x15125*x15137)));
evalcond[3]=(((r01*x15120*x15127))+((r00*x15130))+((sj3*x15124))+(((-1.0)*cj3*x15125*x15136))+((r02*x15140)));
evalcond[4]=((((-1.0)*r02*sj3*x15137))+((r00*x15127))+(((-1.0)*r01*x15130*x15136))+((x15125*x15139))+((cj3*x15124)));
evalcond[5]=(((r12*x15140))+((cj1*sj2))+x15131+(((-1.0)*cj3*x15123*x15136))+((r10*x15130))+((x15122*x15138))+((r11*x15129)));
evalcond[6]=(((r22*x15140))+((r20*x15130))+((r21*x15129))+(((-1.0)*x15135))+(((-1.0)*r20*x15133*x15136))+x15121+((r21*x15120*x15127)));
evalcond[7]=((((-1.0)*r12*sj3*x15137))+(((-1.0)*sj3*x15122*x15136))+(((-1.0)*x15135))+x15121+((r10*x15127))+((r11*x15133))+((x15123*x15139)));
evalcond[8]=(((r20*x15127))+((r21*x15133))+(((-1.0)*r22*sj3*x15137))+((r20*x15120*x15129))+(((-1.0)*x15131))+(((-1.0)*sj3*x15128*x15136))+(((-1.0)*sj2*x15126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15141=((1.0)*cj5);
CheckValue<IkReal> x15142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15141))+(((-1.0)*r20*sj5)))),-1);
if(!x15142.valid){
continue;
}
CheckValue<IkReal> x15143 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15141))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15142.value)))+(x15143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15144=IKsin(j4);
IkReal x15145=IKcos(j4);
IkReal x15146=(sj1*sj2);
IkReal x15147=(r11*sj5);
IkReal x15148=(cj5*r10);
IkReal x15149=(cj5*r01);
IkReal x15150=(cj5*r00);
IkReal x15151=((1.0)*cj1);
IkReal x15152=(cj3*sj5);
IkReal x15153=(r21*sj5);
IkReal x15154=(cj5*sj3);
IkReal x15155=(sj3*sj5);
IkReal x15156=(cj2*sj1);
IkReal x15157=(r01*sj5);
IkReal x15158=(cj3*cj5);
IkReal x15159=(cj5*r20);
IkReal x15160=(cj2*x15151);
IkReal x15161=((1.0)*x15145);
IkReal x15162=((1.0)*x15144);
IkReal x15163=(cj3*x15145);
IkReal x15164=(sj3*x15145);
IkReal x15165=(cj3*x15144);
evalcond[0]=((((-1.0)*x15159*x15162))+((x15144*x15153))+(((-1.0)*r22*x15161)));
evalcond[1]=((((-1.0)*x15148*x15162))+((x15144*x15147))+(((-1.0)*r12*x15161)));
evalcond[2]=((1.0)+(((-1.0)*x15150*x15162))+((x15144*x15157))+(((-1.0)*r02*x15161)));
evalcond[3]=(((r02*x15165))+((r00*x15155))+(((-1.0)*cj3*x15150*x15161))+((sj3*x15149))+((r01*x15145*x15152)));
evalcond[4]=(((cj3*x15149))+((r00*x15152))+(((-1.0)*r01*x15155*x15161))+((x15150*x15164))+(((-1.0)*r02*sj3*x15162)));
evalcond[5]=(((x15147*x15163))+((cj1*sj2))+((r12*x15165))+x15156+((r10*x15155))+((r11*x15154))+(((-1.0)*cj3*x15148*x15161)));
evalcond[6]=(((r21*x15154))+((r21*x15145*x15152))+(((-1.0)*x15160))+x15146+((r22*x15165))+(((-1.0)*r20*x15158*x15161))+((r20*x15155)));
evalcond[7]=((((-1.0)*sj3*x15147*x15161))+(((-1.0)*x15160))+(((-1.0)*r12*sj3*x15162))+x15146+((x15148*x15164))+((r10*x15152))+((r11*x15158)));
evalcond[8]=(((r21*x15158))+(((-1.0)*r22*sj3*x15162))+((r20*x15145*x15154))+(((-1.0)*x15156))+(((-1.0)*sj2*x15151))+(((-1.0)*sj3*x15153*x15161))+((r20*x15152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15166 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15166.valid){
continue;
}
CheckValue<IkReal> x15167=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15166.value)+(((1.5707963267949)*(x15167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15168=IKsin(j4);
IkReal x15169=IKcos(j4);
IkReal x15170=(sj1*sj2);
IkReal x15171=(r11*sj5);
IkReal x15172=(cj5*r10);
IkReal x15173=(cj5*r01);
IkReal x15174=(cj5*r00);
IkReal x15175=((1.0)*cj1);
IkReal x15176=(cj3*sj5);
IkReal x15177=(r21*sj5);
IkReal x15178=(cj5*sj3);
IkReal x15179=(sj3*sj5);
IkReal x15180=(cj2*sj1);
IkReal x15181=(r01*sj5);
IkReal x15182=(cj3*cj5);
IkReal x15183=(cj5*r20);
IkReal x15184=(cj2*x15175);
IkReal x15185=((1.0)*x15169);
IkReal x15186=((1.0)*x15168);
IkReal x15187=(cj3*x15169);
IkReal x15188=(sj3*x15169);
IkReal x15189=(cj3*x15168);
evalcond[0]=(((x15168*x15177))+(((-1.0)*x15183*x15186))+(((-1.0)*r22*x15185)));
evalcond[1]=((((-1.0)*x15172*x15186))+((x15168*x15171))+(((-1.0)*r12*x15185)));
evalcond[2]=((1.0)+(((-1.0)*x15174*x15186))+(((-1.0)*r02*x15185))+((x15168*x15181)));
evalcond[3]=(((r02*x15189))+((r01*x15169*x15176))+((sj3*x15173))+(((-1.0)*cj3*x15174*x15185))+((r00*x15179)));
evalcond[4]=((((-1.0)*r02*sj3*x15186))+((cj3*x15173))+((x15174*x15188))+(((-1.0)*r01*x15179*x15185))+((r00*x15176)));
evalcond[5]=(((r11*x15178))+((r10*x15179))+((cj1*sj2))+((r12*x15189))+x15180+((x15171*x15187))+(((-1.0)*cj3*x15172*x15185)));
evalcond[6]=((((-1.0)*r20*x15182*x15185))+((r20*x15179))+(((-1.0)*x15184))+((r21*x15169*x15176))+x15170+((r21*x15178))+((r22*x15189)));
evalcond[7]=(((r10*x15176))+(((-1.0)*r12*sj3*x15186))+((x15172*x15188))+(((-1.0)*x15184))+x15170+((r11*x15182))+(((-1.0)*sj3*x15171*x15185)));
evalcond[8]=((((-1.0)*x15180))+(((-1.0)*sj2*x15175))+((r20*x15176))+((r20*x15169*x15178))+((r21*x15182))+(((-1.0)*r22*sj3*x15186))+(((-1.0)*sj3*x15177*x15185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15190=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15190);
rxp1_1=(px*r21);
rxp1_2=(r11*x15190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15191=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15191);
rxp1_1=(px*r21);
rxp1_2=(r11*x15191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15192=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15192))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15192)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15193=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15193);
rxp1_1=(px*r21);
rxp1_2=(r11*x15193);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15194=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15194);
rxp1_1=(px*r21);
rxp1_2=(r11*x15194);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15195=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15195);
rxp1_1=(px*r21);
rxp1_2=(r11*x15195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15196=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15196);
rxp1_1=(px*r21);
rxp1_2=(r11*x15196);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15199=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15199.valid){
continue;
}
IkReal x15197=x15199.value;
IkReal x15198=(sj0*x15197);
cj4array[0]=((((-1.0)*cj1*cj2*x15198))+((sj1*sj2*x15198)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15200=IKsin(j4);
IkReal x15201=IKcos(j4);
IkReal x15202=(r21*sj5);
IkReal x15203=(cj5*r20);
IkReal x15204=((1.0)*x15200);
IkReal x15205=((1.0)*x15201);
evalcond[0]=((-1.0)*r02*x15200);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15205)));
evalcond[2]=(((x15200*x15202))+(((-1.0)*x15203*x15204)));
evalcond[3]=((((-1.0)*cj5*r10*x15204))+((r11*sj5*x15200)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x15202*x15205))+((x15201*x15203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15207=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15207.valid){
continue;
}
IkReal x15206=x15207.value;
cj4array[0]=(((cj1*sj2*x15206))+((cj2*sj1*x15206)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15208=IKsin(j4);
IkReal x15209=IKcos(j4);
IkReal x15210=(r11*sj5);
IkReal x15211=((1.0)*sj0);
IkReal x15212=((1.0)*x15209);
IkReal x15213=((1.0)*cj5*x15208);
evalcond[0]=((-1.0)*r02*x15208);
evalcond[1]=((((-1.0)*r02*x15212))+(((-1.0)*x15211)));
evalcond[2]=((((-1.0)*r20*x15213))+((r21*sj5*x15208)));
evalcond[3]=(((x15208*x15210))+(((-1.0)*r10*x15213)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x15210*x15212))+(((-1.0)*sj1*sj2*x15211))+((cj5*r10*x15209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15214=IKPowWithIntegerCheck(r02,-1);
if(!x15214.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15214.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15215=IKsin(j4);
IkReal x15216=IKcos(j4);
IkReal x15217=((1.0)*sj1);
IkReal x15218=(cj5*x15216);
IkReal x15219=(sj5*x15215);
IkReal x15220=((1.0)*sj5*x15216);
IkReal x15221=((1.0)*cj5*x15215);
evalcond[0]=((-1.0)*r02*x15215);
evalcond[1]=(((r21*x15219))+(((-1.0)*r20*x15221)));
evalcond[2]=(((r11*x15219))+(((-1.0)*r10*x15221)));
evalcond[3]=(((r20*x15218))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x15220))+(((-1.0)*cj2*x15217)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x15218))+(((-1.0)*sj0*sj2*x15217))+(((-1.0)*r11*x15220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15222=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15222);
rxp1_1=(px*r21);
rxp1_2=(r11*x15222);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15223=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15223);
rxp1_1=(px*r21);
rxp1_2=(r11*x15223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15224=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15224);
rxp1_1=(px*r21);
rxp1_2=(r11*x15224);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15227=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15227.valid){
continue;
}
IkReal x15225=x15227.value;
IkReal x15226=(sj0*x15225);
cj4array[0]=(((sj1*sj2*x15226))+(((-1.0)*cj1*cj2*x15226)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15228=IKsin(j4);
IkReal x15229=IKcos(j4);
IkReal x15230=(r21*sj5);
IkReal x15231=((1.0)*cj5*r20);
evalcond[0]=(r02*x15228);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15229)));
evalcond[2]=(((x15228*x15230))+(((-1.0)*x15228*x15231)));
evalcond[3]=((((-1.0)*cj5*r10*x15228))+((r11*sj5*x15228)));
evalcond[4]=(((x15229*x15230))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x15229*x15231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15233=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15233.valid){
continue;
}
IkReal x15232=x15233.value;
cj4array[0]=(((cj2*sj1*x15232))+((cj1*sj2*x15232)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15234=IKsin(j4);
IkReal x15235=IKcos(j4);
IkReal x15236=((1.0)*sj0);
IkReal x15237=((1.0)*cj5);
IkReal x15238=(sj5*x15234);
evalcond[0]=(r02*x15234);
evalcond[1]=((((-1.0)*x15236))+(((-1.0)*r02*x15235)));
evalcond[2]=((((-1.0)*r20*x15234*x15237))+((r21*x15238)));
evalcond[3]=((((-1.0)*r10*x15234*x15237))+((r11*x15238)));
evalcond[4]=((((-1.0)*r10*x15235*x15237))+((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x15236))+((r11*sj5*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15239=IKPowWithIntegerCheck(r02,-1);
if(!x15239.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15239.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15240=IKsin(j4);
IkReal x15241=IKcos(j4);
IkReal x15242=((1.0)*sj1);
IkReal x15243=(r21*sj5);
IkReal x15244=(r11*sj5);
IkReal x15245=((1.0)*cj5*x15241);
IkReal x15246=((1.0)*cj5*x15240);
evalcond[0]=(r02*x15240);
evalcond[1]=(((x15240*x15243))+(((-1.0)*r20*x15246)));
evalcond[2]=((((-1.0)*r10*x15246))+((x15240*x15244)));
evalcond[3]=((((-1.0)*cj2*x15242))+(((-1.0)*cj1*sj2))+((x15241*x15243))+(((-1.0)*r20*x15245)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x15245))+((x15241*x15244))+(((-1.0)*sj0*sj2*x15242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15247 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15247.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15247.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15248 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15248.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15248.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15249=((-1.0)*r10);
CheckValue<IkReal> x15251 = IKatan2WithCheck(IkReal(x15249),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15251.valid){
continue;
}
IkReal x15250=((-1.0)*(x15251.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15249);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15250;
IkReal gconst66=x15250;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15252=((-1.0)*r10);
CheckValue<IkReal> x15254 = IKatan2WithCheck(IkReal(x15252),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15254.valid){
continue;
}
IkReal x15253=((-1.0)*(x15254.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15252);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15253;
IkReal gconst66=x15253;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15255=((-1.0)*r10);
CheckValue<IkReal> x15257 = IKatan2WithCheck(IkReal(x15255),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15257.valid){
continue;
}
IkReal x15256=((-1.0)*(x15257.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15255);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15256;
IkReal gconst66=x15256;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r10*r21))+(((-1.0)*cj3*r11*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15258=((1.0)*r20);
CheckValue<IkReal> x15259=IKPowWithIntegerCheck(cj3,-1);
if(!x15259.valid){
continue;
}
CheckValue<IkReal> x15260=IKPowWithIntegerCheck(r02,-1);
if(!x15260.valid){
continue;
}
CheckValue<IkReal> x15261=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst68*x15258))+((cj3*gconst67*r21))),-1);
if(!x15261.valid){
continue;
}
if( IKabs(((x15259.value)*(x15260.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15261.value)*(((((-1.0)*gconst67*sj3*x15258))+(((-1.0)*gconst68*r21*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15259.value)*(x15260.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((x15261.value)*(((((-1.0)*gconst67*sj3*x15258))+(((-1.0)*gconst68*r21*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15259.value)*(x15260.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((x15261.value)*(((((-1.0)*gconst67*sj3*x15258))+(((-1.0)*gconst68*r21*sj3))+(((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15262=IKsin(j4);
IkReal x15263=IKcos(j4);
IkReal x15264=(cj1*cj2);
IkReal x15265=(gconst68*sj3);
IkReal x15266=(sj1*sj2);
IkReal x15267=(gconst67*sj3);
IkReal x15268=(gconst67*r11);
IkReal x15269=((1.0)*gconst68);
IkReal x15270=((1.0)*sj0);
IkReal x15271=(cj3*gconst67);
IkReal x15272=(cj3*gconst68);
IkReal x15273=(gconst67*r21);
IkReal x15274=(r10*x15263);
IkReal x15275=(cj3*x15263);
IkReal x15276=((1.0)*cj2*sj1);
IkReal x15277=((1.0)*cj1*sj2);
IkReal x15278=((1.0)*x15263);
IkReal x15279=(r02*x15262);
evalcond[0]=((((-1.0)*r02*x15278))+(((-1.0)*x15270)));
evalcond[1]=((((-1.0)*r20*x15262*x15269))+((x15262*x15273)));
evalcond[2]=(cj0+(((-1.0)*r10*x15262*x15269))+((x15262*x15268)));
evalcond[3]=((((-1.0)*sj3*x15279))+((cj0*x15264))+(((-1.0)*cj0*x15266)));
evalcond[4]=(((cj3*x15279))+(((-1.0)*cj0*x15276))+(((-1.0)*cj0*x15277)));
evalcond[5]=(((r20*x15267))+(((-1.0)*r20*x15269*x15275))+x15266+((r21*x15263*x15271))+(((-1.0)*x15264))+((r21*x15265)));
evalcond[6]=(((r20*x15271))+((r21*x15272))+((r20*x15263*x15265))+(((-1.0)*r21*x15267*x15278))+(((-1.0)*x15277))+(((-1.0)*x15276)));
evalcond[7]=(((sj0*x15264))+((r11*x15272))+((x15265*x15274))+((r10*x15271))+(((-1.0)*r11*x15267*x15278))+(((-1.0)*x15266*x15270)));
evalcond[8]=((((-1.0)*cj3*x15269*x15274))+((x15268*x15275))+(((-1.0)*cj2*sj1*x15270))+((r10*x15267))+(((-1.0)*cj1*sj2*x15270))+((r11*x15265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15281=IKPowWithIntegerCheck(r02,-1);
if(!x15281.valid){
continue;
}
IkReal x15280=x15281.value;
CheckValue<IkReal> x15282=IKPowWithIntegerCheck(sj3,-1);
if(!x15282.valid){
continue;
}
if( IKabs((x15280*(x15282.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15280)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15280*(x15282.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15280))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15280*(x15282.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15280));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15283=IKsin(j4);
IkReal x15284=IKcos(j4);
IkReal x15285=(cj1*cj2);
IkReal x15286=(gconst68*sj3);
IkReal x15287=(sj1*sj2);
IkReal x15288=(gconst67*sj3);
IkReal x15289=(gconst67*r11);
IkReal x15290=((1.0)*gconst68);
IkReal x15291=((1.0)*sj0);
IkReal x15292=(cj3*gconst67);
IkReal x15293=(cj3*gconst68);
IkReal x15294=(gconst67*r21);
IkReal x15295=(r10*x15284);
IkReal x15296=(cj3*x15284);
IkReal x15297=((1.0)*cj2*sj1);
IkReal x15298=((1.0)*cj1*sj2);
IkReal x15299=((1.0)*x15284);
IkReal x15300=(r02*x15283);
evalcond[0]=((((-1.0)*x15291))+(((-1.0)*r02*x15299)));
evalcond[1]=((((-1.0)*r20*x15283*x15290))+((x15283*x15294)));
evalcond[2]=(((x15283*x15289))+cj0+(((-1.0)*r10*x15283*x15290)));
evalcond[3]=(((cj0*x15285))+(((-1.0)*sj3*x15300))+(((-1.0)*cj0*x15287)));
evalcond[4]=((((-1.0)*cj0*x15297))+(((-1.0)*cj0*x15298))+((cj3*x15300)));
evalcond[5]=(x15287+((r21*x15284*x15292))+((r20*x15288))+(((-1.0)*r20*x15290*x15296))+(((-1.0)*x15285))+((r21*x15286)));
evalcond[6]=(((r20*x15292))+(((-1.0)*r21*x15288*x15299))+((r21*x15293))+(((-1.0)*x15298))+(((-1.0)*x15297))+((r20*x15284*x15286)));
evalcond[7]=((((-1.0)*x15287*x15291))+((r10*x15292))+((sj0*x15285))+((r11*x15293))+((x15286*x15295))+(((-1.0)*r11*x15288*x15299)));
evalcond[8]=((((-1.0)*cj2*sj1*x15291))+((r10*x15288))+(((-1.0)*cj3*x15290*x15295))+(((-1.0)*cj1*sj2*x15291))+((r11*x15286))+((x15289*x15296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15302=IKPowWithIntegerCheck(r02,-1);
if(!x15302.valid){
continue;
}
IkReal x15301=x15302.value;
CheckValue<IkReal> x15303=IKPowWithIntegerCheck(cj3,-1);
if(!x15303.valid){
continue;
}
if( IKabs((x15301*(x15303.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15301)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15301*(x15303.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x15301))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15301*(x15303.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x15301));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15304=IKsin(j4);
IkReal x15305=IKcos(j4);
IkReal x15306=(cj1*cj2);
IkReal x15307=(gconst68*sj3);
IkReal x15308=(sj1*sj2);
IkReal x15309=(gconst67*sj3);
IkReal x15310=(gconst67*r11);
IkReal x15311=((1.0)*gconst68);
IkReal x15312=((1.0)*sj0);
IkReal x15313=(cj3*gconst67);
IkReal x15314=(cj3*gconst68);
IkReal x15315=(gconst67*r21);
IkReal x15316=(r10*x15305);
IkReal x15317=(cj3*x15305);
IkReal x15318=((1.0)*cj2*sj1);
IkReal x15319=((1.0)*cj1*sj2);
IkReal x15320=((1.0)*x15305);
IkReal x15321=(r02*x15304);
evalcond[0]=((((-1.0)*x15312))+(((-1.0)*r02*x15320)));
evalcond[1]=(((x15304*x15315))+(((-1.0)*r20*x15304*x15311)));
evalcond[2]=(cj0+(((-1.0)*r10*x15304*x15311))+((x15304*x15310)));
evalcond[3]=(((cj0*x15306))+(((-1.0)*sj3*x15321))+(((-1.0)*cj0*x15308)));
evalcond[4]=((((-1.0)*cj0*x15318))+(((-1.0)*cj0*x15319))+((cj3*x15321)));
evalcond[5]=((((-1.0)*r20*x15311*x15317))+((r20*x15309))+(((-1.0)*x15306))+((r21*x15307))+((r21*x15305*x15313))+x15308);
evalcond[6]=((((-1.0)*x15318))+(((-1.0)*x15319))+(((-1.0)*r21*x15309*x15320))+((r21*x15314))+((r20*x15313))+((r20*x15305*x15307)));
evalcond[7]=(((r11*x15314))+((sj0*x15306))+(((-1.0)*r11*x15309*x15320))+((r10*x15313))+(((-1.0)*x15308*x15312))+((x15307*x15316)));
evalcond[8]=((((-1.0)*cj3*x15311*x15316))+(((-1.0)*cj2*sj1*x15312))+(((-1.0)*cj1*sj2*x15312))+((r10*x15309))+((x15310*x15317))+((r11*x15307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15322=((-1.0)*r10);
CheckValue<IkReal> x15323 = IKatan2WithCheck(IkReal(x15322),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15323.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15323.value))));
IkReal gconst70=x15322;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15324 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15324.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15324.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15325=((-1.0)*r10);
IkReal x15326=((-1.0)*r11);
CheckValue<IkReal> x15328 = IKatan2WithCheck(IkReal(x15325),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15328.valid){
continue;
}
IkReal x15327=((1.0)*(x15328.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15325);
rxp1_1=(px*r21);
rxp1_2=(px*x15326);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15327)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15327)));
IkReal gconst70=x15325;
IkReal gconst71=x15326;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15329=((-1.0)*r10);
IkReal x15330=((-1.0)*r11);
CheckValue<IkReal> x15332 = IKatan2WithCheck(IkReal(x15329),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15332.valid){
continue;
}
IkReal x15331=((1.0)*(x15332.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15329);
rxp1_1=(px*r21);
rxp1_2=(px*x15330);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15331)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15331)));
IkReal gconst70=x15329;
IkReal gconst71=x15330;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15333=((-1.0)*r10);
IkReal x15334=((-1.0)*r11);
CheckValue<IkReal> x15336 = IKatan2WithCheck(IkReal(x15333),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15336.valid){
continue;
}
IkReal x15335=((1.0)*(x15336.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15333);
rxp1_1=(px*r21);
rxp1_2=(px*x15334);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15335)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15335)));
IkReal gconst70=x15333;
IkReal gconst71=x15334;
IkReal x15337=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r20*x15337))+(((-1.0)*r10*r21*x15337)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15338=((1.0)*r20);
CheckValue<IkReal> x15339=IKPowWithIntegerCheck(cj3,-1);
if(!x15339.valid){
continue;
}
CheckValue<IkReal> x15340=IKPowWithIntegerCheck(r02,-1);
if(!x15340.valid){
continue;
}
CheckValue<IkReal> x15341=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst71*x15338))+((cj3*gconst70*r21))),-1);
if(!x15341.valid){
continue;
}
if( IKabs(((x15339.value)*(x15340.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15341.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst70*sj3*x15338))+(((-1.0)*gconst71*r21*sj3))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15339.value)*(x15340.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((x15341.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst70*sj3*x15338))+(((-1.0)*gconst71*r21*sj3))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15339.value)*(x15340.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((x15341.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst70*sj3*x15338))+(((-1.0)*gconst71*r21*sj3))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15342=IKsin(j4);
IkReal x15343=IKcos(j4);
IkReal x15344=(cj1*cj2);
IkReal x15345=(cj3*gconst70);
IkReal x15346=(sj1*sj2);
IkReal x15347=((1.0)*gconst71);
IkReal x15348=(gconst71*sj3);
IkReal x15349=(gconst70*r11);
IkReal x15350=(gconst70*sj3);
IkReal x15351=(cj3*gconst71);
IkReal x15352=((1.0)*sj0);
IkReal x15353=(r21*x15343);
IkReal x15354=((1.0)*cj2*sj1);
IkReal x15355=(r10*x15343);
IkReal x15356=((1.0)*cj1*sj2);
IkReal x15357=((1.0)*x15343);
IkReal x15358=(r02*x15342);
IkReal x15359=(r20*x15343);
evalcond[0]=((((-1.0)*r02*x15357))+(((-1.0)*x15352)));
evalcond[1]=(((gconst70*r21*x15342))+(((-1.0)*r20*x15342*x15347)));
evalcond[2]=(((x15342*x15349))+cj0+(((-1.0)*r10*x15342*x15347)));
evalcond[3]=(((cj0*x15344))+(((-1.0)*sj3*x15358))+(((-1.0)*cj0*x15346)));
evalcond[4]=((((-1.0)*cj0*x15356))+(((-1.0)*cj0*x15354))+((cj3*x15358)));
evalcond[5]=((((-1.0)*cj3*x15347*x15359))+((r21*x15348))+x15346+((x15345*x15353))+((r20*x15350))+(((-1.0)*x15344)));
evalcond[6]=((((-1.0)*x15356))+(((-1.0)*x15354))+((x15348*x15359))+((r20*x15345))+(((-1.0)*x15350*x15353))+((r21*x15351)));
evalcond[7]=((((-1.0)*sj3*x15349*x15357))+((sj0*x15344))+((x15348*x15355))+((r10*x15345))+((r11*x15351))+(((-1.0)*x15346*x15352)));
evalcond[8]=((((-1.0)*cj3*x15347*x15355))+((r10*x15350))+((r11*x15348))+((r11*x15343*x15345))+(((-1.0)*cj2*sj1*x15352))+(((-1.0)*cj1*sj2*x15352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15361=IKPowWithIntegerCheck(r02,-1);
if(!x15361.valid){
continue;
}
IkReal x15360=x15361.value;
CheckValue<IkReal> x15362=IKPowWithIntegerCheck(sj3,-1);
if(!x15362.valid){
continue;
}
if( IKabs((x15360*(x15362.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15360)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15360*(x15362.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15360))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15360*(x15362.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15360));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15363=IKsin(j4);
IkReal x15364=IKcos(j4);
IkReal x15365=(cj1*cj2);
IkReal x15366=(cj3*gconst70);
IkReal x15367=(sj1*sj2);
IkReal x15368=((1.0)*gconst71);
IkReal x15369=(gconst71*sj3);
IkReal x15370=(gconst70*r11);
IkReal x15371=(gconst70*sj3);
IkReal x15372=(cj3*gconst71);
IkReal x15373=((1.0)*sj0);
IkReal x15374=(r21*x15364);
IkReal x15375=((1.0)*cj2*sj1);
IkReal x15376=(r10*x15364);
IkReal x15377=((1.0)*cj1*sj2);
IkReal x15378=((1.0)*x15364);
IkReal x15379=(r02*x15363);
IkReal x15380=(r20*x15364);
evalcond[0]=((((-1.0)*x15373))+(((-1.0)*r02*x15378)));
evalcond[1]=((((-1.0)*r20*x15363*x15368))+((gconst70*r21*x15363)));
evalcond[2]=(cj0+(((-1.0)*r10*x15363*x15368))+((x15363*x15370)));
evalcond[3]=((((-1.0)*sj3*x15379))+(((-1.0)*cj0*x15367))+((cj0*x15365)));
evalcond[4]=(((cj3*x15379))+(((-1.0)*cj0*x15377))+(((-1.0)*cj0*x15375)));
evalcond[5]=((((-1.0)*cj3*x15368*x15380))+((r20*x15371))+x15367+((x15366*x15374))+(((-1.0)*x15365))+((r21*x15369)));
evalcond[6]=(((r21*x15372))+((x15369*x15380))+(((-1.0)*x15371*x15374))+((r20*x15366))+(((-1.0)*x15375))+(((-1.0)*x15377)));
evalcond[7]=(((sj0*x15365))+(((-1.0)*sj3*x15370*x15378))+((x15369*x15376))+((r10*x15366))+(((-1.0)*x15367*x15373))+((r11*x15372)));
evalcond[8]=((((-1.0)*cj3*x15368*x15376))+((r11*x15364*x15366))+(((-1.0)*cj2*sj1*x15373))+(((-1.0)*cj1*sj2*x15373))+((r11*x15369))+((r10*x15371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15382=IKPowWithIntegerCheck(r02,-1);
if(!x15382.valid){
continue;
}
IkReal x15381=x15382.value;
CheckValue<IkReal> x15383=IKPowWithIntegerCheck(cj3,-1);
if(!x15383.valid){
continue;
}
if( IKabs((x15381*(x15383.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15381)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15381*(x15383.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x15381))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15381*(x15383.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x15381));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15384=IKsin(j4);
IkReal x15385=IKcos(j4);
IkReal x15386=(cj1*cj2);
IkReal x15387=(cj3*gconst70);
IkReal x15388=(sj1*sj2);
IkReal x15389=((1.0)*gconst71);
IkReal x15390=(gconst71*sj3);
IkReal x15391=(gconst70*r11);
IkReal x15392=(gconst70*sj3);
IkReal x15393=(cj3*gconst71);
IkReal x15394=((1.0)*sj0);
IkReal x15395=(r21*x15385);
IkReal x15396=((1.0)*cj2*sj1);
IkReal x15397=(r10*x15385);
IkReal x15398=((1.0)*cj1*sj2);
IkReal x15399=((1.0)*x15385);
IkReal x15400=(r02*x15384);
IkReal x15401=(r20*x15385);
evalcond[0]=((((-1.0)*r02*x15399))+(((-1.0)*x15394)));
evalcond[1]=((((-1.0)*r20*x15384*x15389))+((gconst70*r21*x15384)));
evalcond[2]=(((x15384*x15391))+cj0+(((-1.0)*r10*x15384*x15389)));
evalcond[3]=(((cj0*x15386))+(((-1.0)*sj3*x15400))+(((-1.0)*cj0*x15388)));
evalcond[4]=((((-1.0)*cj0*x15398))+(((-1.0)*cj0*x15396))+((cj3*x15400)));
evalcond[5]=(((r21*x15390))+((r20*x15392))+x15388+(((-1.0)*x15386))+(((-1.0)*cj3*x15389*x15401))+((x15387*x15395)));
evalcond[6]=(((r21*x15393))+(((-1.0)*x15392*x15395))+((x15390*x15401))+((r20*x15387))+(((-1.0)*x15396))+(((-1.0)*x15398)));
evalcond[7]=(((sj0*x15386))+(((-1.0)*x15388*x15394))+((r10*x15387))+((x15390*x15397))+((r11*x15393))+(((-1.0)*sj3*x15391*x15399)));
evalcond[8]=(((r11*x15385*x15387))+(((-1.0)*cj2*sj1*x15394))+((r10*x15392))+(((-1.0)*cj1*sj2*x15394))+((r11*x15390))+(((-1.0)*cj3*x15389*x15397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15403=IKPowWithIntegerCheck(r02,-1);
if(!x15403.valid){
continue;
}
IkReal x15402=x15403.value;
CheckValue<IkReal> x15404=IKPowWithIntegerCheck(cj3,-1);
if(!x15404.valid){
continue;
}
if( IKabs((x15402*(x15404.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15402)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15402*(x15404.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))+IKsqr(((-1.0)*sj0*x15402))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15402*(x15404.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))), ((-1.0)*sj0*x15402));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15405=IKsin(j4);
IkReal x15406=IKcos(j4);
IkReal x15407=(cj1*cj2);
IkReal x15408=(cj5*r10);
IkReal x15409=(sj1*sj2);
IkReal x15410=(cj5*r20);
IkReal x15411=(r11*sj5);
IkReal x15412=(cj3*cj5);
IkReal x15413=(cj3*sj5);
IkReal x15414=(r21*sj5);
IkReal x15415=((1.0)*sj0);
IkReal x15416=(sj3*sj5);
IkReal x15417=(cj5*sj3);
IkReal x15418=((1.0)*x15405);
IkReal x15419=(sj3*x15406);
IkReal x15420=(cj3*x15406);
IkReal x15421=((1.0)*cj2*sj1);
IkReal x15422=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*r02*x15406))+(((-1.0)*x15415)));
evalcond[1]=((((-1.0)*x15410*x15418))+((x15405*x15414)));
evalcond[2]=(cj0+(((-1.0)*x15408*x15418))+((x15405*x15411)));
evalcond[3]=((((-1.0)*r02*sj3*x15418))+(((-1.0)*cj0*x15409))+((cj0*x15407)));
evalcond[4]=((((-1.0)*cj0*x15422))+(((-1.0)*cj0*x15421))+((cj3*r02*x15405)));
evalcond[5]=((((-1.0)*x15407))+(((-1.0)*x15410*x15420))+((r20*x15416))+((r21*x15406*x15413))+x15409+((r21*x15417)));
evalcond[6]=(((r20*x15413))+((x15410*x15419))+(((-1.0)*x15421))+(((-1.0)*x15422))+(((-1.0)*x15414*x15419))+((r21*x15412)));
evalcond[7]=(((r11*x15412))+(((-1.0)*x15409*x15415))+((x15408*x15419))+((r10*x15413))+(((-1.0)*x15411*x15419))+((sj0*x15407)));
evalcond[8]=(((r11*x15417))+((x15411*x15420))+(((-1.0)*cj1*sj2*x15415))+(((-1.0)*cj2*sj1*x15415))+((r10*x15416))+(((-1.0)*x15408*x15420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15423=((1.0)*sj3);
IkReal x15424=((1.0)*cj5);
CheckValue<IkReal> x15425=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15424))),-1);
if(!x15425.valid){
continue;
}
CheckValue<IkReal> x15426=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15424))),-1);
if(!x15426.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15425.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*sj5*x15423))+(((-1.0)*cj5*r21*x15423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15425.value)))+IKsqr(((x15426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*sj5*x15423))+(((-1.0)*cj5*r21*x15423))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15425.value)), ((x15426.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*sj5*x15423))+(((-1.0)*cj5*r21*x15423))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15427=IKsin(j4);
IkReal x15428=IKcos(j4);
IkReal x15429=(cj1*cj2);
IkReal x15430=(cj5*r10);
IkReal x15431=(sj1*sj2);
IkReal x15432=(cj5*r20);
IkReal x15433=(r11*sj5);
IkReal x15434=(cj3*cj5);
IkReal x15435=(cj3*sj5);
IkReal x15436=(r21*sj5);
IkReal x15437=((1.0)*sj0);
IkReal x15438=(sj3*sj5);
IkReal x15439=(cj5*sj3);
IkReal x15440=((1.0)*x15427);
IkReal x15441=(sj3*x15428);
IkReal x15442=(cj3*x15428);
IkReal x15443=((1.0)*cj2*sj1);
IkReal x15444=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x15437))+(((-1.0)*r02*x15428)));
evalcond[1]=((((-1.0)*x15432*x15440))+((x15427*x15436)));
evalcond[2]=(cj0+(((-1.0)*x15430*x15440))+((x15427*x15433)));
evalcond[3]=(((cj0*x15429))+(((-1.0)*r02*sj3*x15440))+(((-1.0)*cj0*x15431)));
evalcond[4]=((((-1.0)*cj0*x15444))+(((-1.0)*cj0*x15443))+((cj3*r02*x15427)));
evalcond[5]=(((r21*x15439))+(((-1.0)*x15429))+(((-1.0)*x15432*x15442))+((r21*x15428*x15435))+x15431+((r20*x15438)));
evalcond[6]=(((r21*x15434))+((x15432*x15441))+(((-1.0)*x15436*x15441))+(((-1.0)*x15443))+(((-1.0)*x15444))+((r20*x15435)));
evalcond[7]=((((-1.0)*x15431*x15437))+((r10*x15435))+((x15430*x15441))+(((-1.0)*x15433*x15441))+((sj0*x15429))+((r11*x15434)));
evalcond[8]=(((x15433*x15442))+((r10*x15438))+(((-1.0)*cj2*sj1*x15437))+(((-1.0)*x15430*x15442))+((r11*x15439))+(((-1.0)*cj1*sj2*x15437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15445=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15445.valid){
continue;
}
CheckValue<IkReal> x15446=IKPowWithIntegerCheck(r02,-1);
if(!x15446.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15445.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15446.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15445.value)))+IKsqr(((-1.0)*sj0*(x15446.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15445.value)), ((-1.0)*sj0*(x15446.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15447=IKsin(j4);
IkReal x15448=IKcos(j4);
IkReal x15449=(cj1*cj2);
IkReal x15450=(cj5*r10);
IkReal x15451=(sj1*sj2);
IkReal x15452=(cj5*r20);
IkReal x15453=(r11*sj5);
IkReal x15454=(cj3*cj5);
IkReal x15455=(cj3*sj5);
IkReal x15456=(r21*sj5);
IkReal x15457=((1.0)*sj0);
IkReal x15458=(sj3*sj5);
IkReal x15459=(cj5*sj3);
IkReal x15460=((1.0)*x15447);
IkReal x15461=(sj3*x15448);
IkReal x15462=(cj3*x15448);
IkReal x15463=((1.0)*cj2*sj1);
IkReal x15464=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x15457))+(((-1.0)*r02*x15448)));
evalcond[1]=(((x15447*x15456))+(((-1.0)*x15452*x15460)));
evalcond[2]=(cj0+(((-1.0)*x15450*x15460))+((x15447*x15453)));
evalcond[3]=(((cj0*x15449))+(((-1.0)*r02*sj3*x15460))+(((-1.0)*cj0*x15451)));
evalcond[4]=((((-1.0)*cj0*x15464))+(((-1.0)*cj0*x15463))+((cj3*r02*x15447)));
evalcond[5]=(((r20*x15458))+x15451+((r21*x15459))+((r21*x15448*x15455))+(((-1.0)*x15449))+(((-1.0)*x15452*x15462)));
evalcond[6]=(((r20*x15455))+((x15452*x15461))+(((-1.0)*x15463))+(((-1.0)*x15464))+(((-1.0)*x15456*x15461))+((r21*x15454)));
evalcond[7]=(((sj0*x15449))+((x15450*x15461))+((r11*x15454))+((r10*x15455))+(((-1.0)*x15453*x15461))+(((-1.0)*x15451*x15457)));
evalcond[8]=((((-1.0)*x15450*x15462))+((x15453*x15462))+((r11*x15459))+((r10*x15458))+(((-1.0)*cj1*sj2*x15457))+(((-1.0)*cj2*sj1*x15457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15465=((1.0)*sj0);
IkReal x15466=((1.0)*cj0);
CheckValue<IkReal> x15467 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15465))+(((-1.0)*r02*x15466)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x15466))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x15465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15467.valid){
continue;
}
CheckValue<IkReal> x15468=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15467.value)+(((1.5707963267949)*(x15468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15469=IKsin(j4);
IkReal x15470=IKcos(j4);
IkReal x15471=(r11*sj5);
IkReal x15472=(cj1*cj2);
IkReal x15473=(cj5*r10);
IkReal x15474=(sj1*sj2);
IkReal x15475=(cj5*r01);
IkReal x15476=(cj5*r00);
IkReal x15477=((1.0)*sj0);
IkReal x15478=(cj3*sj5);
IkReal x15479=(r21*sj5);
IkReal x15480=(cj2*sj1);
IkReal x15481=(sj3*sj5);
IkReal x15482=(r01*sj5);
IkReal x15483=(cj5*r21);
IkReal x15484=((1.0)*cj0);
IkReal x15485=(cj5*r11);
IkReal x15486=(cj5*r20);
IkReal x15487=((1.0)*x15470);
IkReal x15488=((1.0)*x15469);
IkReal x15489=(cj3*x15470);
IkReal x15490=(sj3*x15470);
IkReal x15491=(cj3*x15469);
IkReal x15492=((1.0)*cj1*sj2);
evalcond[0]=(((x15469*x15479))+(((-1.0)*x15486*x15488))+(((-1.0)*r22*x15487)));
evalcond[1]=((((-1.0)*r12*x15487))+cj0+((x15469*x15471))+(((-1.0)*x15473*x15488)));
evalcond[2]=((((-1.0)*r02*x15487))+((x15469*x15482))+(((-1.0)*x15477))+(((-1.0)*x15476*x15488)));
evalcond[3]=(((sj3*x15483))+((r21*x15470*x15478))+(((-1.0)*x15472))+x15474+((r22*x15491))+((r20*x15481))+(((-1.0)*cj3*x15486*x15487)));
evalcond[4]=((((-1.0)*r22*sj3*x15488))+((cj3*x15483))+(((-1.0)*x15480))+(((-1.0)*sj3*x15479*x15487))+((r20*x15478))+(((-1.0)*x15492))+((x15486*x15490)));
evalcond[5]=(((x15476*x15490))+(((-1.0)*r01*x15481*x15487))+(((-1.0)*x15474*x15484))+((r00*x15478))+(((-1.0)*r02*sj3*x15488))+((cj3*x15475))+((cj0*x15472)));
evalcond[6]=(((r01*x15470*x15478))+(((-1.0)*cj1*sj2*x15484))+(((-1.0)*x15480*x15484))+((r02*x15491))+(((-1.0)*cj3*x15476*x15487))+((sj3*x15475))+((r00*x15481)));
evalcond[7]=((((-1.0)*r12*sj3*x15488))+(((-1.0)*sj3*x15471*x15487))+((cj3*x15485))+((sj0*x15472))+(((-1.0)*x15474*x15477))+((x15473*x15490))+((r10*x15478)));
evalcond[8]=(((sj3*x15485))+((r12*x15491))+((r10*x15481))+(((-1.0)*cj3*x15473*x15487))+((x15471*x15489))+(((-1.0)*cj1*sj2*x15477))+(((-1.0)*x15477*x15480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15493=((1.0)*cj5);
CheckValue<IkReal> x15494=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15493)))),-1);
if(!x15494.valid){
continue;
}
CheckValue<IkReal> x15495 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15493))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15494.value)))+(x15495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15496=IKsin(j4);
IkReal x15497=IKcos(j4);
IkReal x15498=(r11*sj5);
IkReal x15499=(cj1*cj2);
IkReal x15500=(cj5*r10);
IkReal x15501=(sj1*sj2);
IkReal x15502=(cj5*r01);
IkReal x15503=(cj5*r00);
IkReal x15504=((1.0)*sj0);
IkReal x15505=(cj3*sj5);
IkReal x15506=(r21*sj5);
IkReal x15507=(cj2*sj1);
IkReal x15508=(sj3*sj5);
IkReal x15509=(r01*sj5);
IkReal x15510=(cj5*r21);
IkReal x15511=((1.0)*cj0);
IkReal x15512=(cj5*r11);
IkReal x15513=(cj5*r20);
IkReal x15514=((1.0)*x15497);
IkReal x15515=((1.0)*x15496);
IkReal x15516=(cj3*x15497);
IkReal x15517=(sj3*x15497);
IkReal x15518=(cj3*x15496);
IkReal x15519=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x15513*x15515))+(((-1.0)*r22*x15514))+((x15496*x15506)));
evalcond[1]=(cj0+(((-1.0)*r12*x15514))+((x15496*x15498))+(((-1.0)*x15500*x15515)));
evalcond[2]=((((-1.0)*x15504))+(((-1.0)*r02*x15514))+(((-1.0)*x15503*x15515))+((x15496*x15509)));
evalcond[3]=((((-1.0)*cj3*x15513*x15514))+((sj3*x15510))+x15501+((r20*x15508))+(((-1.0)*x15499))+((r21*x15497*x15505))+((r22*x15518)));
evalcond[4]=((((-1.0)*sj3*x15506*x15514))+(((-1.0)*r22*sj3*x15515))+(((-1.0)*x15507))+((cj3*x15510))+(((-1.0)*x15519))+((x15513*x15517))+((r20*x15505)));
evalcond[5]=(((x15503*x15517))+(((-1.0)*x15501*x15511))+((r00*x15505))+((cj0*x15499))+(((-1.0)*r01*x15508*x15514))+((cj3*x15502))+(((-1.0)*r02*sj3*x15515)));
evalcond[6]=(((r00*x15508))+(((-1.0)*cj3*x15503*x15514))+((r02*x15518))+(((-1.0)*x15507*x15511))+(((-1.0)*cj1*sj2*x15511))+((r01*x15497*x15505))+((sj3*x15502)));
evalcond[7]=(((r10*x15505))+(((-1.0)*x15501*x15504))+(((-1.0)*sj3*x15498*x15514))+(((-1.0)*r12*sj3*x15515))+((cj3*x15512))+((x15500*x15517))+((sj0*x15499)));
evalcond[8]=(((r10*x15508))+((sj3*x15512))+(((-1.0)*cj1*sj2*x15504))+(((-1.0)*x15504*x15507))+(((-1.0)*cj3*x15500*x15514))+((x15498*x15516))+((r12*x15518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15520=((1.0)*cj5);
CheckValue<IkReal> x15521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15520)))),-1);
if(!x15521.valid){
continue;
}
CheckValue<IkReal> x15522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15521.value)))+(x15522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15523=IKsin(j4);
IkReal x15524=IKcos(j4);
IkReal x15525=(r11*sj5);
IkReal x15526=(cj1*cj2);
IkReal x15527=(cj5*r10);
IkReal x15528=(sj1*sj2);
IkReal x15529=(cj5*r01);
IkReal x15530=(cj5*r00);
IkReal x15531=((1.0)*sj0);
IkReal x15532=(cj3*sj5);
IkReal x15533=(r21*sj5);
IkReal x15534=(cj2*sj1);
IkReal x15535=(sj3*sj5);
IkReal x15536=(r01*sj5);
IkReal x15537=(cj5*r21);
IkReal x15538=((1.0)*cj0);
IkReal x15539=(cj5*r11);
IkReal x15540=(cj5*r20);
IkReal x15541=((1.0)*x15524);
IkReal x15542=((1.0)*x15523);
IkReal x15543=(cj3*x15524);
IkReal x15544=(sj3*x15524);
IkReal x15545=(cj3*x15523);
IkReal x15546=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x15540*x15542))+(((-1.0)*r22*x15541))+((x15523*x15533)));
evalcond[1]=(cj0+((x15523*x15525))+(((-1.0)*x15527*x15542))+(((-1.0)*r12*x15541)));
evalcond[2]=(((x15523*x15536))+(((-1.0)*x15530*x15542))+(((-1.0)*x15531))+(((-1.0)*r02*x15541)));
evalcond[3]=(((r21*x15524*x15532))+((sj3*x15537))+((r20*x15535))+(((-1.0)*x15526))+(((-1.0)*cj3*x15540*x15541))+x15528+((r22*x15545)));
evalcond[4]=((((-1.0)*sj3*x15533*x15541))+((cj3*x15537))+((r20*x15532))+(((-1.0)*x15546))+(((-1.0)*x15534))+((x15540*x15544))+(((-1.0)*r22*sj3*x15542)));
evalcond[5]=((((-1.0)*x15528*x15538))+((x15530*x15544))+((cj3*x15529))+((r00*x15532))+(((-1.0)*r01*x15535*x15541))+((cj0*x15526))+(((-1.0)*r02*sj3*x15542)));
evalcond[6]=(((r02*x15545))+(((-1.0)*cj3*x15530*x15541))+((sj3*x15529))+((r01*x15524*x15532))+((r00*x15535))+(((-1.0)*x15534*x15538))+(((-1.0)*cj1*sj2*x15538)));
evalcond[7]=((((-1.0)*x15528*x15531))+((r10*x15532))+((cj3*x15539))+(((-1.0)*r12*sj3*x15542))+((sj0*x15526))+((x15527*x15544))+(((-1.0)*sj3*x15525*x15541)));
evalcond[8]=(((r10*x15535))+((sj3*x15539))+(((-1.0)*cj3*x15527*x15541))+(((-1.0)*x15531*x15534))+((x15525*x15543))+((r12*x15545))+(((-1.0)*cj1*sj2*x15531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15547=cj5*cj5;
IkReal x15548=r21*r21;
IkReal x15549=r20*r20;
IkReal x15550=(r20*r21);
IkReal x15551=((1.0)*cj3);
IkReal x15552=(cj5*sj5);
IkReal x15553=(r22*sj3);
IkReal x15554=(cj1*cj2);
IkReal x15555=(cj5*r20);
IkReal x15556=(sj1*sj2);
IkReal x15557=(r21*sj5);
CheckValue<IkReal> x15558=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15547*x15549*x15551))+(((-1.0)*x15551*(r22*r22)))+((cj3*x15547*x15548))+(((-1.0)*x15548*x15551))+(((2.0)*cj3*x15550*x15552)))),-1);
if(!x15558.valid){
continue;
}
CheckValue<IkReal> x15559 = IKatan2WithCheck(IkReal((((r22*x15556))+(((-1.0)*r22*x15554))+((cj5*r21*x15553))+((r20*sj5*x15553)))),IkReal(((((-2.0)*sj3*x15547*x15550))+((x15556*x15557))+((sj3*x15548*x15552))+(((-1.0)*x15555*x15556))+((sj3*x15550))+(((-1.0)*sj3*x15549*x15552))+((x15554*x15555))+(((-1.0)*x15554*x15557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15558.value)))+(x15559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15560=IKsin(j4);
IkReal x15561=IKcos(j4);
IkReal x15562=(cj3*r21);
IkReal x15563=((1.0)*cj1);
IkReal x15564=(r21*sj5);
IkReal x15565=(r20*sj5);
IkReal x15566=(cj5*r20);
IkReal x15567=((1.0)*x15561);
IkReal x15568=((1.0)*x15560);
evalcond[0]=((((-1.0)*r22*x15567))+(((-1.0)*x15566*x15568))+((x15560*x15564)));
evalcond[1]=(((cj5*r21*sj3))+(((-1.0)*cj2*x15563))+((sj1*sj2))+(((-1.0)*cj3*x15566*x15567))+((sj3*x15565))+((cj3*r22*x15560))+((sj5*x15561*x15562)));
evalcond[2]=((((-1.0)*sj2*x15563))+((sj3*x15561*x15566))+(((-1.0)*cj2*sj1))+((cj5*x15562))+(((-1.0)*r22*sj3*x15568))+((cj3*x15565))+(((-1.0)*sj3*x15564*x15567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15569=(cj5*sj4);
IkReal x15570=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15569))+((r01*x15570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15570))+((r10*x15569))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15569))+((r01*x15570))))+IKsqr(((((-1.0)*r11*x15570))+((r10*x15569))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15569))+((r01*x15570))), ((((-1.0)*r11*x15570))+((r10*x15569))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15571=IKcos(j0);
IkReal x15572=IKsin(j0);
IkReal x15573=(r02*sj4);
IkReal x15574=((0.39225)*cj1);
IkReal x15575=((1.0)*sj3);
IkReal x15576=(r12*sj4);
IkReal x15577=((1.0)*sj1);
IkReal x15578=(r11*sj5);
IkReal x15579=(cj5*r01);
IkReal x15580=(cj5*sj3);
IkReal x15581=(r00*sj5);
IkReal x15582=((0.425)*sj1);
IkReal x15583=(cj5*r11);
IkReal x15584=(r10*sj5);
IkReal x15585=((1.0)*cj4);
IkReal x15586=((0.39225)*sj1);
IkReal x15587=(sj2*x15572);
IkReal x15588=(cj1*x15571);
IkReal x15589=(cj2*x15572);
IkReal x15590=(cj4*r01*sj5);
IkReal x15591=(cj2*x15571);
IkReal x15592=(sj2*x15571);
IkReal x15593=((1.0)*cj5*sj4);
IkReal x15594=(cj3*cj5*x15585);
evalcond[0]=(((sj4*x15578))+(((-1.0)*r12*x15585))+(((-1.0)*r10*x15593))+x15571);
evalcond[1]=((((-1.0)*r02*x15585))+((r01*sj4*sj5))+(((-1.0)*r00*x15593))+(((-1.0)*x15572)));
evalcond[2]=((((-0.09465)*x15579))+(((-1.0)*px))+(((-0.09465)*x15581))+((x15571*x15582))+(((-0.10915)*x15572))+((x15574*x15592))+((x15586*x15591)));
evalcond[3]=((((-1.0)*py))+((x15586*x15589))+(((-0.09465)*x15583))+(((-0.09465)*x15584))+((x15574*x15587))+(((0.10915)*x15571))+((x15572*x15582)));
evalcond[4]=(((cj4*r00*x15580))+((cj3*x15581))+((cj2*x15588))+(((-1.0)*x15573*x15575))+(((-1.0)*x15575*x15590))+((cj3*x15579))+(((-1.0)*x15577*x15592)));
evalcond[5]=(((sj3*x15579))+(((-1.0)*r00*x15594))+((sj3*x15581))+((cj3*x15590))+(((-1.0)*sj2*x15588))+((cj3*x15573))+(((-1.0)*x15577*x15591)));
evalcond[6]=(((cj4*r10*x15580))+((cj3*x15583))+((cj3*x15584))+(((-1.0)*x15577*x15587))+(((-1.0)*cj4*x15575*x15578))+((cj1*x15589))+(((-1.0)*x15575*x15576)));
evalcond[7]=(((r11*x15580))+((cj3*cj4*x15578))+(((-1.0)*cj1*x15587))+(((-1.0)*r10*x15594))+((sj3*x15584))+(((-1.0)*x15577*x15589))+((cj3*x15576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15595=r21*r21;
IkReal x15596=cj5*cj5;
IkReal x15597=r20*r20;
IkReal x15598=(cj1*sj2);
IkReal x15599=((1.0)*r22);
IkReal x15600=(cj3*r21);
IkReal x15601=(cj5*r20);
IkReal x15602=((1.0)*sj5);
IkReal x15603=(cj3*cj5);
IkReal x15604=(cj2*sj1);
IkReal x15605=(sj3*x15595);
CheckValue<IkReal> x15606=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15596*x15597))+(((-1.0)*x15596*x15605))+(((-2.0)*r21*sj3*sj5*x15601))+x15605)),-1);
if(!x15606.valid){
continue;
}
CheckValue<IkReal> x15607 = IKatan2WithCheck(IkReal((((cj5*r22*x15600))+(((-1.0)*x15598*x15599))+(((-1.0)*x15599*x15604))+((cj3*r20*r22*sj5)))),IkReal(((((-2.0)*r20*x15596*x15600))+((sj5*x15595*x15603))+(((-1.0)*x15597*x15602*x15603))+(((-1.0)*r21*x15602*x15604))+(((-1.0)*r21*x15598*x15602))+((r20*x15600))+((x15598*x15601))+((x15601*x15604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15606.value)))+(x15607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15608=IKsin(j4);
IkReal x15609=IKcos(j4);
IkReal x15610=(cj3*r21);
IkReal x15611=((1.0)*cj1);
IkReal x15612=(r21*sj5);
IkReal x15613=(r20*sj5);
IkReal x15614=(cj5*r20);
IkReal x15615=((1.0)*x15609);
IkReal x15616=((1.0)*x15608);
evalcond[0]=(((x15608*x15612))+(((-1.0)*x15614*x15616))+(((-1.0)*r22*x15615)));
evalcond[1]=((((-1.0)*cj2*x15611))+((cj5*r21*sj3))+((sj5*x15609*x15610))+((sj1*sj2))+((cj3*r22*x15608))+((sj3*x15613))+(((-1.0)*cj3*x15614*x15615)));
evalcond[2]=(((cj5*x15610))+(((-1.0)*sj3*x15612*x15615))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*sj3*x15616))+((cj3*x15613))+((sj3*x15609*x15614))+(((-1.0)*sj2*x15611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15617=(cj5*sj4);
IkReal x15618=(sj4*sj5);
if( IKabs((((r01*x15618))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15617))+((cj4*r12))+(((-1.0)*r11*x15618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15618))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15617))))+IKsqr((((r10*x15617))+((cj4*r12))+(((-1.0)*r11*x15618))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x15618))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15617))), (((r10*x15617))+((cj4*r12))+(((-1.0)*r11*x15618))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15619=IKcos(j0);
IkReal x15620=IKsin(j0);
IkReal x15621=(r02*sj4);
IkReal x15622=((0.39225)*cj1);
IkReal x15623=((1.0)*sj3);
IkReal x15624=(r12*sj4);
IkReal x15625=((1.0)*sj1);
IkReal x15626=(r11*sj5);
IkReal x15627=(cj5*r01);
IkReal x15628=(cj5*sj3);
IkReal x15629=(r00*sj5);
IkReal x15630=((0.425)*sj1);
IkReal x15631=(cj5*r11);
IkReal x15632=(r10*sj5);
IkReal x15633=((1.0)*cj4);
IkReal x15634=((0.39225)*sj1);
IkReal x15635=(sj2*x15620);
IkReal x15636=(cj1*x15619);
IkReal x15637=(cj2*x15620);
IkReal x15638=(cj4*r01*sj5);
IkReal x15639=(cj2*x15619);
IkReal x15640=(sj2*x15619);
IkReal x15641=((1.0)*cj5*sj4);
IkReal x15642=(cj3*cj5*x15633);
evalcond[0]=(((sj4*x15626))+(((-1.0)*r10*x15641))+(((-1.0)*r12*x15633))+x15619);
evalcond[1]=((((-1.0)*r00*x15641))+((r01*sj4*sj5))+(((-1.0)*x15620))+(((-1.0)*r02*x15633)));
evalcond[2]=((((-0.10915)*x15620))+((x15619*x15630))+((x15634*x15639))+(((-1.0)*px))+((x15622*x15640))+(((-0.09465)*x15629))+(((-0.09465)*x15627)));
evalcond[3]=((((0.10915)*x15619))+((x15634*x15637))+(((-1.0)*py))+((x15622*x15635))+((x15620*x15630))+(((-0.09465)*x15632))+(((-0.09465)*x15631)));
evalcond[4]=((((-1.0)*x15623*x15638))+(((-1.0)*x15625*x15640))+((cj2*x15636))+((cj3*x15629))+((cj3*x15627))+(((-1.0)*x15621*x15623))+((cj4*r00*x15628)));
evalcond[5]=((((-1.0)*r00*x15642))+((cj3*x15638))+(((-1.0)*x15625*x15639))+(((-1.0)*sj2*x15636))+((cj3*x15621))+((sj3*x15629))+((sj3*x15627)));
evalcond[6]=(((cj1*x15637))+((cj3*x15632))+((cj3*x15631))+(((-1.0)*x15625*x15635))+(((-1.0)*x15623*x15624))+(((-1.0)*cj4*x15623*x15626))+((cj4*r10*x15628)));
evalcond[7]=(((sj3*x15632))+(((-1.0)*r10*x15642))+(((-1.0)*x15625*x15637))+((cj3*x15624))+((cj3*cj4*x15626))+(((-1.0)*cj1*x15635))+((r11*x15628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "04e10bbbf1f99db071fb8379b0e1a21f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
